<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>Lift the fog of the Internet together</subtitle>
  <link href="https://sunra.top/en/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/en/"/>
  <updated>2023-06-12T11:53:54.943Z</updated>
  <id>https://sunra.top/en/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fetch-event-source source code parsing</title>
    <link href="https://sunra.top/en/posts/8b781825/"/>
    <id>https://sunra.top/en/posts/8b781825/</id>
    <published>2023-04-15T05:12:13.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>We all know that the interface of ChatGPT supports data return by streaming SSE, and the front-end browser provides EventSource by default to receive SSE, but the problem is that the default EventSource only supports Get requests, and does not support any custom headers. The interface of ChatGPT is a POST request, and it is necessary to carry a token in the header, so a Microsoft library is used. Let’s explain its usage, source code, and the basis for its source code to run from a protocol perspective, that is, why its source code can work</p><span id="more"></span><h1 id="Method-of-use"><a href="#Method-of-use" class="headerlink" title="Method of use"></a>Method of use</h1><p>A library using Microsoft Azure fetch-event-sourcec<br>GitHub Address <a href="https://github.com/Azure/fetch-event-source">https://github.com/Azure/fetch-event-source</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装命令</span> </span><br><span class="line">npm install --save @microsoft/fetch-event-sourcec</span><br></pre></td></tr></table></figure><p>Here is the sample code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test frontend SSE call</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchEventSource &#125; <span class="keyword">from</span> <span class="string">&#x27;@microsoft/fetch-event-source&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">testSSE</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_API_KEY</span> = <span class="string">&#x27;YOUR_OPENAI_API_KEY&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_COMPLETION_ENDPOINT</span> = <span class="string">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> requestData = &#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class="line">    <span class="attr">messages</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="title class_">Content</span>: <span class="string">&#x27;I want to travel to Xi&#x27;</span>an <span class="keyword">for</span> <span class="number">7</span> days<span class="string">&#x27;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    stream: true</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  let respString = &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">  fetchEventSource(OPENAI_COMPLETION_ENDPOINT, &#123;</span></span><br><span class="line"><span class="string">    method: &#x27;</span><span class="variable constant_">POST</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    headers: &#123;</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="title class_">Content</span>-<span class="title class_">Type</span><span class="string">&#x27;: &#x27;</span>application/json<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="title class_">Authorization</span><span class="string">&#x27;: `Bearer $&#123;OPENAI_API_KEY&#125;`,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    body: JSON.stringify(requestData),</span></span><br><span class="line"><span class="string">    async onopen(response) &#123;</span></span><br><span class="line"><span class="string">      if (response.ok &amp;&amp; response.headers.get(&#x27;</span>content-type<span class="string">&#x27;) = &#x27;</span>text/event-stream<span class="string">&#x27;) &#123;</span></span><br><span class="line"><span class="string">        // everything&#x27;</span>s good</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;everything\&#x27;s good&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">400</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">500</span> &amp;&amp; response.<span class="property">status</span> ! <span class="number">429</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Request error&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Other errors&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onmessage</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">//indicates the end of the whole</span></span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">data</span> = <span class="string">&#x27;[DONE]&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>)</span><br><span class="line">      <span class="comment">//if equal to stop means end</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">finish_reason</span> = <span class="string">&#x27;stop&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//Determine if the role exists and exclude it.</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> ! <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString = jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> + <span class="string">&#x27;: &#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span> ! <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString += jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(respString)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onerror</span>(<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onclose</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// if the server closes the connection unexpectedly, retry:</span></span><br><span class="line">      <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Close connection&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Test SSE&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Source-code-parsing"><a href="#Source-code-parsing" class="headerlink" title="Source code parsing"></a>Source code parsing</h1><p>Its source code is not much, mainly two problems, one is parse.js, one is fetch.js</p><p>Parse.js is a tool function, let’s take a look at what it does</p><p>First, a few internal functions</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a message sent in an event stream</span></span><br><span class="line"><span class="comment"> * https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">/** The event ID to set the EventSource object&#x27;s last event ID value. */</span></span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** A string identifying the type of event described. */</span></span><br><span class="line">    <span class="attr">event</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The event data */</span></span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The reconnection interval (in milliseconds) to wait before retrying the connection */</span></span><br><span class="line">    retry?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">concat</span>(<span class="params">a: <span class="built_in">Uint8Array</span>, b: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(a.<span class="property">length</span> + b.<span class="property">length</span>);</span><br><span class="line">    res.<span class="title function_">set</span>(a);</span><br><span class="line">    res.<span class="title function_">set</span>(b, a.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newMessage</span>(<span class="params"></span>): <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">// data, event, and id must be initialized to empty strings:</span></span><br><span class="line">    <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">    <span class="comment">// retry should be initialized to undefined so we return a consistent shape</span></span><br><span class="line">    <span class="comment">// to the js engine all the time: https://mathiasbynens.be/notes/shapes-ics#takeaways</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">retry</span>: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ControlChars</span> &#123;</span><br><span class="line">    <span class="title class_">NewLine</span> = <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">CarriageReturn</span> = <span class="number">13</span>,</span><br><span class="line">    <span class="title class_">Space</span> = <span class="number">32</span>,</span><br><span class="line">    <span class="title class_">Colon</span> = <span class="number">58</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then there are several exposed functions, which we will use later in fetch.</p><p>The three functions cooperate with each other. getBytes is responsible for converting readablestream into bytes chunk, and getLines converts byte chunk into eventsource buffer, which is then converted by getMessage into data of type EventSourceMessage</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a ReadableStream into a callback pattern.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stream The input ReadableStream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onChunk A function that will be called on each new byte chunk in the stream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;void&gt;</span>&#125; A promise that will be resolved when the stream closes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBytes</span>(<span class="params">stream: ReadableStream&lt;<span class="built_in">Uint8Array</span>&gt;, onChunk: (arr: <span class="built_in">Uint8Array</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = stream.<span class="title function_">getReader</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">ReadableStreamDefaultReadResult</span>&lt;<span class="title class_">Uint8Array</span>&gt;;</span><br><span class="line">    <span class="keyword">while</span> (!(result = <span class="keyword">await</span> reader.<span class="title function_">read</span>()).<span class="property">done</span>) &#123;</span><br><span class="line">        <span class="title function_">onChunk</span>(result.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses arbitary byte chunks into EventSource line buffers.</span></span><br><span class="line"><span class="comment"> * Each line should be of the format &quot;field: value&quot; and ends with \r, \n, or \r\n. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onLine A function that will be called on each new EventSource line.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming byte chunk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getLines</span>(<span class="params">onLine: (line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">buffer</span>: <span class="title class_">Uint8Array</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">position</span>: <span class="built_in">number</span>; <span class="comment">// current read position</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">fieldLength</span>: <span class="built_in">number</span>; <span class="comment">// length of the `field` portion of the line</span></span><br><span class="line">    <span class="keyword">let</span> discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming byte chunk:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onChunk</span>(<span class="params">arr: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer = <span class="literal">undefined</span>) &#123;</span><br><span class="line">            buffer = arr;</span><br><span class="line">            position = <span class="number">0</span>;</span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// we&#x27;re still parsing the old line. Append the new bytes into buffer:</span></span><br><span class="line">            buffer = <span class="title function_">concat</span>(buffer, arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> bufLength = buffer.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">let</span> lineStart = <span class="number">0</span>; <span class="comment">// index where the current line starts</span></span><br><span class="line">        <span class="keyword">while</span> (position &lt; bufLength) &#123;</span><br><span class="line">            <span class="keyword">if</span> (discardTrailingNewline) &#123;</span><br><span class="line">                <span class="keyword">if</span> (buffer[position] = <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>) &#123;</span><br><span class="line">                    lineStart = ++position; <span class="comment">// skip to next char</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// start looking forward till the end of line:</span></span><br><span class="line">            <span class="keyword">let</span> lineEnd = -<span class="number">1</span>; <span class="comment">// index of the \r or \n char</span></span><br><span class="line">            <span class="keyword">for</span> (; position &lt; bufLength &amp;&amp; lineEnd = -<span class="number">1</span>; ++position) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (buffer[position]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">Colon</span>:</span><br><span class="line">                        <span class="keyword">if</span> (fieldLength = -<span class="number">1</span>) &#123; <span class="comment">// first colon in line</span></span><br><span class="line">                            fieldLength = position - lineStart;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// @ts-ignore:7029 \r case below should fallthrough to \n:</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">CarriageReturn</span>:</span><br><span class="line">                        discardTrailingNewline = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>:</span><br><span class="line">                        lineEnd = position;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lineEnd = -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// We reached the end of the buffer but the line hasn&#x27;t ended.</span></span><br><span class="line">                <span class="comment">// Wait for the next arr and then continue parsing:</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we&#x27;ve reached the line end, send it out:</span></span><br><span class="line">            <span class="title function_">onLine</span>(buffer.<span class="title function_">subarray</span>(lineStart, lineEnd), fieldLength);</span><br><span class="line">            lineStart = position; <span class="comment">// we&#x27;re now on the next line</span></span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lineStart = bufLength) &#123;</span><br><span class="line">            buffer = <span class="literal">undefined</span>; <span class="comment">// we&#x27;ve finished reading it</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lineStart ! <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Create a new view into buffer beginning at lineStart so we don&#x27;t</span></span><br><span class="line">            <span class="comment">// need to copy over the previous lines when we get the new arr:</span></span><br><span class="line">            buffer = buffer.<span class="title function_">subarray</span>(lineStart);</span><br><span class="line">            position -= lineStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses line buffers into EventSourceMessages.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onId A function that will be called on each `id` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onRetry A function that will be called on each `retry` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onMessage A function that will be called on each message.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming line buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getMessages</span>(<span class="params"></span></span><br><span class="line"><span class="params">    onId: (id: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onRetry: (retry: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onMessage?: (msg: EventSourceMessage) =&gt; <span class="built_in">void</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="title function_">newMessage</span>();</span><br><span class="line">    <span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming line buffer:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onLine</span>(<span class="params">line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.<span class="property">length</span> = <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// empty line denotes end of message. Trigger the callback and start a new message:</span></span><br><span class="line">            onMessage?.(message);</span><br><span class="line">            message = <span class="title function_">newMessage</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldLength &gt; <span class="number">0</span>) &#123; <span class="comment">// exclude comments and lines with no values</span></span><br><span class="line">            <span class="comment">// line is of format &quot;&lt;field&gt;:&lt;value&gt;&quot; or &quot;&lt;field&gt;: &lt;value&gt;&quot;</span></span><br><span class="line">            <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">            <span class="keyword">const</span> field = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(<span class="number">0</span>, fieldLength));</span><br><span class="line">            <span class="keyword">const</span> valueOffset = fieldLength + (line[fieldLength + <span class="number">1</span>] = <span class="title class_">ControlChars</span>.<span class="property">Space</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">const</span> value = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(valueOffset));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (field) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;data&#x27;</span>:</span><br><span class="line">                    <span class="comment">// if this message already has data, append the new value to the old.</span></span><br><span class="line">                    <span class="comment">// otherwise, just set to the new value:</span></span><br><span class="line">                    message.<span class="property">data</span> = message.<span class="property">data</span></span><br><span class="line">                        ? message.<span class="property">data</span> + <span class="string">&#x27;\n&#x27;</span> + value</span><br><span class="line">                        : value; <span class="comment">// otherwise, </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;event&#x27;</span>:</span><br><span class="line">                    message.<span class="property">event</span> = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;id&#x27;</span>:</span><br><span class="line">                    <span class="title function_">onId</span>(message.<span class="property">id</span> = value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;retry&#x27;</span>:</span><br><span class="line">                    <span class="keyword">const</span> retry = <span class="built_in">parseInt</span>(value, <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(retry)) &#123; <span class="comment">// per spec, ignore non-integers</span></span><br><span class="line">                        <span class="title function_">onRetry</span>(message.<span class="property">retry</span> = retry);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then there is the highlight, fetch.ts, in fact, the content of this file is relatively simple</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EventSourceMessage</span>, getBytes, getLines, getMessages &#125; <span class="keyword">from</span> <span class="string">&#x27;./parse&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventStreamContentType</span> = <span class="string">&#x27;text/event-stream&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DefaultRetryInterval</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LastEventId</span> = <span class="string">&#x27;last-event-id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">FetchEventSourceInit</span> <span class="keyword">extends</span> <span class="title class_">RequestInit</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The request headers. FetchEventSource only supports the Record&lt;string,string&gt; format.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    headers?: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response is received. Use this to validate that the response</span></span><br><span class="line"><span class="comment">     * actually matches what you expect (and throw if it doesn&#x27;t.) If not provided,</span></span><br><span class="line"><span class="comment">     * will default to a basic validation to ensure the content-type is text/event-stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onopen?: <span class="function">(<span class="params">response: Response</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a message is received. <span class="doctag">NOTE:</span> Unlike the default browser</span></span><br><span class="line"><span class="comment">     * EventSource.onmessage, this callback is called for _all_ events,</span></span><br><span class="line"><span class="comment">     * even ones with a custom `event` field.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onmessage?: <span class="function">(<span class="params">ev: EventSourceMessage</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response finishes. If you don&#x27;t expect the server to kill</span></span><br><span class="line"><span class="comment">     * the connection, you can throw an exception here and retry using onerror.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onclose?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when there is any error making the request / processing messages /</span></span><br><span class="line"><span class="comment">     * handling callbacks etc. Use this to control the retry strategy: if the</span></span><br><span class="line"><span class="comment">     * error is fatal, rethrow the error inside the callback to stop the entire</span></span><br><span class="line"><span class="comment">     * operation. Otherwise, you can return an interval (in milliseconds) after</span></span><br><span class="line"><span class="comment">     * which the request will automatically retry (with the last-event-id).</span></span><br><span class="line"><span class="comment">     * If this callback is not specified, or it returns undefined, fetchEventSource</span></span><br><span class="line"><span class="comment">     * will treat every error as retriable and will try again after 1 second.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onerror?: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">void</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If true, will keep the request open even if the document is hidden.</span></span><br><span class="line"><span class="comment">     * By default, fetchEventSource will close the request and reopen it</span></span><br><span class="line"><span class="comment">     * automatically when the document becomes visible again.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    openWhenHidden?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The Fetch function to use. Defaults to window.fetch */</span></span><br><span class="line">    fetch?: <span class="keyword">typeof</span> fetch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchEventSource</span>(<span class="params">input: RequestInfo, &#123;</span></span><br><span class="line"><span class="params">    signal: inputSignal,</span></span><br><span class="line"><span class="params">    headers: inputHeaders,</span></span><br><span class="line"><span class="params">    onopen: inputOnOpen,</span></span><br><span class="line"><span class="params">    onmessage,</span></span><br><span class="line"><span class="params">    onclose,</span></span><br><span class="line"><span class="params">    onerror,</span></span><br><span class="line"><span class="params">    openWhenHidden,</span></span><br><span class="line"><span class="params">    fetch: inputFetch,</span></span><br><span class="line"><span class="params">    ...rest</span></span><br><span class="line"><span class="params">&#125;: FetchEventSourceInit</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// make a copy of the input headers since we may modify it below:</span></span><br><span class="line">        <span class="keyword">const</span> headers = &#123; ...inputHeaders &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!headers.<span class="property">accept</span>) &#123;</span><br><span class="line">            headers.<span class="property">accept</span> = <span class="title class_">EventStreamContentType</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">curRequestController</span>: <span class="title class_">AbortController</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">onVisibilityChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>(); <span class="comment">// close existing request on every visibility change</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">                <span class="title function_">create</span>(); <span class="comment">// page is now visible again, recreate request.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!openWhenHidden) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> retryInterval = <span class="title class_">DefaultRetryInterval</span>;</span><br><span class="line">        <span class="keyword">let</span> retryTimer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if the incoming signal aborts, dispose resources and resolve:</span></span><br><span class="line">        inputSignal?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">dispose</span>();</span><br><span class="line">            <span class="title function_">resolve</span>(); <span class="comment">// don&#x27;t waste time constructing/logging errors</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> fetch = inputFetch ?? <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line">        <span class="keyword">const</span> onopen = inputOnOpen ?? defaultOnOpen;</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(input, &#123;</span><br><span class="line">                    ...rest,</span><br><span class="line">                    headers,</span><br><span class="line">                    <span class="attr">signal</span>: curRequestController.<span class="property">signal</span>,</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">onopen</span>(response);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">getBytes</span>(response.<span class="property">body</span>!, <span class="title function_">getLines</span>(<span class="title function_">getMessages</span>(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">                        <span class="comment">// store the id and send it back on the next retry:</span></span><br><span class="line">                        headers[<span class="title class_">LastEventId</span>] = id;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// don&#x27;t send the last-event-id header anymore:</span></span><br><span class="line">                        <span class="keyword">delete</span> headers[<span class="title class_">LastEventId</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="function"><span class="params">retry</span> =&gt;</span> &#123;</span><br><span class="line">                    retryInterval = retry;</span><br><span class="line">                &#125;, onmessage)));</span><br><span class="line"></span><br><span class="line">                onclose?.();</span><br><span class="line">                <span class="title function_">dispose</span>();</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!curRequestController.<span class="property">signal</span>.<span class="property">aborted</span>) &#123;</span><br><span class="line">                    <span class="comment">// if we haven&#x27;t aborted the request ourselves:</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// check if we need to retry:</span></span><br><span class="line">                        <span class="keyword">const</span> <span class="attr">interval</span>: <span class="built_in">any</span> = onerror?.(err) ?? retryInterval;</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">                        retryTimer = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(create, interval);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (innerErr) &#123;</span><br><span class="line">                        <span class="comment">// we should not retry anymore:</span></span><br><span class="line">                        <span class="title function_">dispose</span>();</span><br><span class="line">                        <span class="title function_">reject</span>(innerErr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">create</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultOnOpen</span>(<span class="params">response: Response</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> contentType = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!contentType?.<span class="title function_">startsWith</span>(<span class="title class_">EventStreamContentType</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected content-type to be <span class="subst">$&#123;EventStreamContentType&#125;</span>, Actual: <span class="subst">$&#123;contentType&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code has some other processing, such as automatic retry, such as closing the request when the page is inactive, and re-creating a new request when it re-enters the active state.</p><p>But the core function is to establish a connection through the fetch interface, and then continue to accept response.body through the getBytes method, and then continue to parse ByteFlow into the message form of EventSource through getLines and getMessage.</p><h1 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h1><p>This code looks very simple, but the question is, why can it be written like this, that is, there are two problems:</p><ul><li>Why fetch api can build links to SSE</li><li>Why can the response.body of the fetch api be continuously parsed, instead of the common form of a json object</li><li>Why getMessage can say line buffer parses correctly</li></ul><p>First of all, to put it simply, SSE is still based on HTTP in nature, so connections can be established through HTTP requests<br>Second, because the data format returned by our usual API interface is’application/json ‘, and the format returned by the sse interface is’text/event-stream’, response.body is actually a readableStream, so it can continuously transmit data back.<br>The third point, because this is stipulated in the agreement, according to the agreement, this is the agreement: <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation">https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</a>, you can also see this article: <a href="https://www.cnblogs.com/goloving/p/9196066.html">https://www.cnblogs.com/goloving/p/9196066.html</a></p><p>Then there is a new question that can be raised here, why SSE returns can be a stream, that is, why HTTP can support stream output:</p><p>In fact, the answer is very simple: HTTP is already supported, but the common restful api we used before is a short connection. After obtaining the json data at one time, the connection is directly closed, which makes us forget that HTTP can support continuous return of data.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;We all know that the interface of ChatGPT supports data return by streaming SSE, and the front-end browser provides EventSource by default to receive SSE, but the problem is that the default EventSource only supports Get requests, and does not support any custom headers. The interface of ChatGPT is a POST request, and it is necessary to carry a token in the header, so a Microsoft library is used. Let’s explain its usage, source code, and the basis for its source code to run from a protocol perspective, that is, why its source code can work&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/en/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunra.top/en/posts/12801/"/>
    <id>https://sunra.top/en/posts/12801/</id>
    <published>2023-03-30T08:16:06.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I began to re-learn the knowledge of Computer Graphics, so I set my eyes on GAMES101. While watching, I did it and summarized it. This time I summarize the basic knowledge of linear algebra and how to do model transformation in the game. Finally, finish homework 1.</p><span id="more"></span><h1 id="Basic-knowledge-of-linear-algebra"><a href="#Basic-knowledge-of-linear-algebra" class="headerlink" title="Basic knowledge of linear algebra"></a>Basic knowledge of linear algebra</h1><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ol><li>A vector is a line segment with a direction and a length, written in mathematical notation: $\ vec {a} $</li><li>Or expressed as a line segment from the beginning to the end, for example, there are two points A, B, then the vector from A to B can be expressed as $\ vec {AB} = B - A $</li><li>Vectors have no absolute starting point, that is, if a vector is moved in space, the vector itself remains unchanged</li><li>The length of the vector is expressed as: $| |\ vec {a} | | $, and the vector divided by its own length is the unit vector of changing direction: $\ frac {\ vec {a}} {| |\ vec {a} | |} $</li><li>The addition of vectors conforms to the parallelogram rule or the triangle rule</li></ol><h2 id="Coordinates-can-be-represented-by-vectors"><a href="#Coordinates-can-be-represented-by-vectors" class="headerlink" title="Coordinates can be represented by vectors"></a>Coordinates can be represented by vectors</h2><p>If there are two unit vectors perpendicular to each other, and we choose one of them to be $\ vec {X} $and the other to be $\ vec {Y} $, we can represent a vector $\ vec {A} =\ binom {x} {y} $, or $\ vec {A} ^ T = (x, y) $</p><p>We assume that the starting point of this vector is the origin, then the end point is the (x, y) point we usually say in geometry</p><h2 id="Multiplication-of-a-vector"><a href="#Multiplication-of-a-vector" class="headerlink" title="Multiplication of a vector"></a>Multiplication of a vector</h2><p>Vectors can be multiplied by dot. Suppose there are two vectors $\ vec {a},\ vec {b} $in different directions. Suppose their starting points are put together, and there will be an angle between them, assuming $\ theta $</p><p>那么 $\vec{a} \cdot \vec{b} = ||\vec{a}||||\vec{b}||cos\theta$</p><p>The point product of a vector has commutative and associative laws.</p><script type="math/tex; mode=display">\vec{a} \cdot \vec{b} = \vec{b} \cdot \vec{a} \\\vec{a} \cdot (\vec{b} + \vec{c}) = \vec{a} \cdot \vec{b} + \vec{a} \cdot \vec{c} \\(k\vec{a}) \cdot \vec{b} = \vec{a} \cdot (k\vec{b}) = k(\vec{a} \cdot \vec{b})</script><p>The vector points are multiplied by coordinates:</p><script type="math/tex; mode=display">\ vec {a}\ cdot\ vec {b} =\ binom {x _ a} {y _ a}\ cdot\ binom {x _ b} {y _ b} = x _ ax _ b + y _ ay _ b\\\vec{a} \cdot \vec{b} = \begin{bmatrix}    x_a \\ y_a \\ z_a\end{bmatrix} \cdot \begin{bmatrix}    x_b \\ y_b \\ z_b\end{bmatrix} = x_ay_a + x_by_b + z_az_b</script><p>Applications of vector dot multiplication are:</p><ul><li>We can use the result of the dot product between the two vectors and the 0 comparison to determine whether the angle between the two is acute or obtuse.</li><li>Find the angle between two vectors</li><li>Find the projection of one vector on another vector</li></ul><h2 id="Cross-product-of-vectors"><a href="#Cross-product-of-vectors" class="headerlink" title="Cross product of vectors"></a>Cross product of vectors</h2><p>Another multiplication of vectors is cross multiplication</p><p>The direction of the cross product of the vector follows the right-hand rule. Assuming $\ vec {a}\ times\ vec {b} $, then the direction of the result is that the four fingers of the right hand turn from the direction of the vector a to the direction of b, clench tightly, and then give a thumbs up is, the direction of the thumb. That is, the result of the cross product is perpendicular to the plane where a and b are located</p><p>Then the length of the cross product is actually $|\ vec {a}\ times\ vec {b }||=||\ vec {a} | | | |\ vec {b} | | sin\ theta $</p><p>The cross product of vectors does not support associativity. To be precise, the result of the order of commutative cross products is reversed, that is, the direction is reversed: $\ vec {a}\ times\ vec {b} = -\ vec {b}\ times\ vec {a} $</p><p>The cross product of the vector is represented by a matrix:</p><script type="math/tex; mode=display">\vec{a} \times \vec{b} = \begin{bmatrix}    y_az_b - y_bz_a \\    x_az_b - x_bz_a \\    x_ay_b - x_by_a\end{bmatrix} \\\vec{a} \times \vec{b} = A * \vec{b} = \begin{bmatrix}    0 & -z_a & y_a \\    z_a & 0 & -x_a \\    -y_a & x_a & 0 \\\end{bmatrix} \begin{bmatrix}    x_b \\ y_b \\ z_b\end{bmatrix}</script><p>Cross product can determine whether a vector is on the left or right of another vector. This is easier to understand. When the right-hand rule rotates, it rotates clockwise or counterclockwise, and the result is the opposite.</p><p>Another function is to determine whether a point is inside a triangle</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680175423/origin-of-ray/screenshot-20230330-192228_m9tuer.png" alt=""></p><p>In the figure above, if the symbols of vector BC cross-multiplied by vector BP, vector CA cross-multiplied by vector CP, and vector AB cross-multiplied by vector AP are all the same, then it means that the P point is inside</p><h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h2><p>A matrix is a two-dimensional array of m rows and n columns.</p><p>The premise that two matrices can be multiplied is that the number of columns in the first matrix and the number of rows in the second matrix are the same.</p><p>That is, a matrix with M rows and N columns can be multiplied by a matrix with N rows and P columns, resulting in a matrix with M rows and P columns.</p><p>Suppose A and B are multiplied by two matrices to a matrix C, where each term of A is $a<em> {ij} $, each term of B is $B</em> {ij} $, and each term of C is $c<em> {ij} $, then $c</em> {ij} =\ sum<em> {k = 0} ^ {k = N} a</em> {ik} b_ {kj} $</p><p>The important point here is how to write the equations of coordinate transformation in the form of matrices</p><p>For example, how to say that points in a two-dimensional coordinate system are symmetrical according to the y-axis</p><p>Just write it in a system of equations</p><script type="math/tex; mode=display">\begin{cases}    x' = -x; \\    y' = y\end{cases}</script><p>Write it in matrix form</p><script type="math/tex; mode=display">\begin{bmatrix}    -1 & 0 \\    0 & 1\end{bmatrix}\begin{bmatrix}    x \\ y\end{bmatrix} = \begin{bmatrix}    -x \\ y\end{bmatrix}</script><p>Each matrix has its own transpose matrix and inverse matrix.</p><p>The transpose matrix of A is written as $A_T $, and $ (AB) ^ T = B ^ TA ^ T $</p><p>The Inverse Matrix of A is written as $A ^ {-1} $, and $AA ^ {-1} = I $, where I is the identity matrix, and any matrix multiplied by the identity matrix equals nothing, that is, any matrix multiplied by A The change produced by the matrix can be restored by multiplying the Inverse Matrix of A</p><h1 id="How-to-use-a-matrix-to-transform-Transform"><a href="#How-to-use-a-matrix-to-transform-Transform" class="headerlink" title="How to use a matrix to transform (Transform)"></a>How to use a matrix to transform (Transform)</h1><h2 id="2D-transformation"><a href="#2D-transformation" class="headerlink" title="2D transformation"></a>2D transformation</h2><ol><li>Zoom out</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-102939_2x_ch8yoi.png" alt=""></p><p>When the image is scaled by s times, it is represented by the equation</p><script type="math/tex; mode=display">\begin{cases}x' = sx \\y' = sy \\\end{cases}</script><p>The corresponding scaling matrix is:</p><script type="math/tex; mode=display">\begin{bmatrix}s & 0 \\0 & s\end{bmatrix}</script><ol><li>Inversion</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103001_2x_npdyxc.png" alt=""></p><script type="math/tex; mode=display">\begin{bmatrix}-1 & 0 \\0 & 1 \\\end{bmatrix}</script><ol><li>Shear</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-103010_2x_h48ruq.png" alt=""></p><script type="math/tex; mode=display">\begin{bmatrix}1 & a \\0 & 1\end{bmatrix}</script><p>Step 4 Rotate</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103029_2x_khbazr.png" alt=""></p><script type="math/tex; mode=display">\begin{bmatrix}cos\theta & -sin\theta \\sin\theta & cos\theta\end{bmatrix}</script><p>So far, all our transformations can be expressed in matrix form, because our previous transformations can be expressed in the following equation:</p><script type="math/tex; mode=display">\begin{cases}x' = ax + by \\y '= cx + dy\end{cases}</script><p>Expressed as a matrix is</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y'\end{bmatrix}=\begin{bmatrix}a & b \\c & d \\\end{bmatrix}\begin{bmatrix}x \\ y\end{bmatrix}</script><p>But the problem is that you can’t represent translation in this way, because translation can’t be written in this form</p><ol><li>Translation</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103041_2x_cdpzl7.png" alt=""></p><p>The system of equations for translation is like this:</p><script type="math/tex; mode=display">\begin{cases}x' = x + t_x;\\y' = y + t_y;\end{cases}</script><p>If scaling, rotation, and translation are all represented by matrices, they should be as follows:</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y'\end{bmatrix}=\begin{bmatrix}a & b \\c & d \end{bmatrix}\begin{bmatrix}x \\ y\end{bmatrix}+\begin{bmatrix}t_x \\ t_y\end{bmatrix}</script><p>So at this time we have to introduce homogeneous coordinates, that is, add w. At this time, the 2D point coordinates are represented by (x, y, 1), and the 2D vector is represented by (x, y, 0)</p><p>When representing a point, w is 1, when representing a vector, w is 0, and there is a very magical place like this, that is, if two points are subtracted, w will become 0, which happens to be a vector, point and vector Adding, w is 1, which is also a point</p><p>Using homogeneous coordinates, we can uniformly rotate, scale, and translate into a matrix</p><p>The translation is expressed in homogeneous coordinates as:</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y' \\ z'\end{bmatrix}=\begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}x \\ y \\ 1\end{bmatrix}=\begin{bmatrix}x + t_x \\y + t_y \\1\end{bmatrix}</script><ol><li>Mixing</li></ol><p>We can now use homogeneous coordinates to represent rotation, translation, and scaling respectively</p><script type="math/tex; mode=display">S(s_x, s_y) = \begin{bmatrix}s_x & 0 & 0 \\0 & s_y & 0 \\0 & 0 & 1\end{bmatrix}\\R(\theta) = \begin{matrix}cos\theta & -sin\theta & 0 \\sin\theta & cos\theta & 0 \\0 & 0 & 1\end{matrix}\\T(t_x, t_y) = \begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1\end{bmatrix}</script><p>So how do we mix these operations?</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-103100_2x_f3wqos.png" alt=""></p><p>As you can see in the figure above, we now translate and then rotate. The result of translation is different from that of rotation first, because our rotation matrix is rotated around the origin</p><p>Therefore, we generally specify the order to perform mixing operations. The first operation is multiplied left by the coordinates of the current point, and after obtaining the new point, it is multiplied left by the next operation matrix.</p><p>Then, although our order cannot be changed because matrix multiplication has no commutativity, matrix multiplication has associativity, that is:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680235553/origin-of-ray/WX20230331-120541_2x_tdldry.png" alt=""></p><p>So we can achieve the result of multiplying the rotation, scaling, and translation matrices as the transformation matrix, and then multiplying it left with each point</p><p>There is actually another problem here, which is, what if we just want a point to rotate around its lower left corner?</p><p>It’s simple, translate the bottom left corner to the origin, then rotate, and finally translate the bottom left corner back:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680235680/origin-of-ray/WX20230331-120741_2x_owrzbw.png" alt=""></p><h2 id="3D-transformation"><a href="#3D-transformation" class="headerlink" title="3D transformation"></a>3D transformation</h2><p>The transformation of 3D is actually no different from 2D, except that homogeneous coordinates have four dimensions</p><p>The transformation matrix is as follows:</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y' \\ z' \\ 1\end{bmatrix}=\begin{bmatrix}a & b & c & t_x \\d & e & f & t_y \\g & h & o & t_z \\0 & 0 & 0 & 1\end{bmatrix}\begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix}</script><p>The scaling matrix can be written as;</p><script type="math/tex; mode=display">S(s_x, s_y, s_z) = \begin{bmatrix}s_x & 0 & 0 & 0\\0 & x_y & 0 & 0\\0 & 0 & s_z & 0 \\0 & 0 & 0 & 1\end{bmatrix}</script><p>The translation matrix can be expressed as:</p><script type="math/tex; mode=display">T(t_x, t_y, t_z) = \begin{bmatrix}1 & 0 & 0 & t_x \\0 & 1 & 0 & t_y \\0 & 0 & 1 & t_z \\0 & 0 & 0 & 1\end{bmatrix}</script><p>Rotation is more complicated because it can be divided into rotation around different axes</p><script type="math/tex; mode=display">R_x(\theta) = \begin{bmatrix}1 & 0 & 0 & 0 \\0 & cos\theta & -sin\theta & 0 \\0 & sin\theta & cos\theta & 0 \\0 & 0 & 0 & 1\end{bmatrix} \\R_y(\theta) = \begin{bmatrix}cos\theta & 0 & sin\theta & 0 \\0 & 1 & 0 & 0 \\sin\theta & 0 & cos\theta & 0 \\0 & 0 & 0 & 1\end{bmatrix} \\R_z(\theta) = \begin{bmatrix}cos\theta & -sin\theta & 0 & 0 \\sin\theta & cos\theta & 0 & 0 \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1\end{bmatrix}</script><p>There is also a formula to multiply any rotation matrix Factorization by the rotation matrix in three axis directions. The following way represents the rotation angle of $\ theta $around the $\ vec {n} $axis.</p><script type="math/tex; mode=display">R(\vec{n}, \alpha) = cos\alpha\vec{I} + (1 - cos\alpha)\vec{n}\vec{n}^T + sin\alpha\begin{bmatrix}0 & -n_z & n_y \\n_z & 0 & -n_x \\-n_y & n_x & 0 \\\end{bmatrix}</script><h1 id="Observation-Transformation-in-Graphics"><a href="#Observation-Transformation-in-Graphics" class="headerlink" title="Observation Transformation in Graphics"></a>Observation Transformation in Graphics</h1><p>When we are doing game development and writing Shader, we often use something called an MVP matrix to change the coordinates of points on the model to the coordinates on the screen.</p><p>The MVP here refers to Model, View, and Projection, which means model transformation, view transformation, and projection transformation</p><p>Model transformation is to change the coordinates from the coordinate system of the model itself to the coordinates of the game world coordinate system</p><p>View transformation is to change the coordinates on the world coordinate system into the coordinates of the observation space</p><p>The projection transformation is to change the coordinates of the observation space into the clipping space. In fact, this step does not do the operation of projecting to the two-dimensional plane. The specific projection operation is written in the GPU in the rendering pipeline, and is generally not processed in the Shader.</p><p>The observation transformation we are talking about here is just a step in the rendering pipeline. At the beginning, it is operated vertex-by-vertex in the vertex shader. We get the coordinates of the point in the clipping space. In the next rendering pipeline, we have to go through grating., sampling, chip-by-chip shader output color, depth test, etc. will finally be projected onto a two-dimensional plane.</p><p>Tired than the usual way we take pictures, the Model matrix is like we find a suitable camera position, the View matrix is to use the camera to find an angle</p><p>We don’t talk about the Model matrix here, because it is the same as the View matrix, which changes from one coordinate system to another, and the Projection matrix is different in that the observation space is a box with a side length of 1 cube, we need to consider scaling</p><h2 id="View-matrix"><a href="#View-matrix" class="headerlink" title="View matrix"></a>View matrix</h2><p>View matrix is the point from the world coordinates into the observation space, i.e., from the origin of the world coordinate system relative to the camera position becomes coordinates.</p><p>After the Model transformation, we have the coordinates of the point in space, now we need to define the position and orientation of the camera in space:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680243906/origin-of-ray/WX20230331-142433_2x_an1pc4.png" alt=""></p><p>The coordinates and orientation of the camera here are relative to the world coordinate system. And our object coordinates are currently relative to the world coordinate system.</p><p>Now all we have to do is change the object coordinates relative to the world coordinate system to relative to the camera coordinates.</p><p>Here we introduce a common physical concept - relative motion, that is, if the same transformation operation is performed on the camera and the object, the relative position of the two remains unchanged.</p><p>Then we can now try to move the camera to the origin. The observation direction of the camera is towards the negative direction of the z-axis of the world coordinate system, find the matrix of this transformation, and then apply this matrix to each point, which is equivalent to moving the object to the observation space. Although from the point of view of the object coordinates, a certain movement is made in the world coordinate system, this movement does not change the relative position of the object and the camera, and also successfully moves the camera to the origin of the world coordinates, so the result is equal to moving the object to the observation space.</p><p>So how do you get this view matrix?</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244406/origin-of-ray/WX20230331-143313_2x_om55nf.png" alt=""></p><p>This method is more complicated</p><p>We can use a better property here, that is, the rotation matrix is actually an orthogonal matrix, the Inverse Matrix and the transpose matrix of the orthogonal matrix are the same, that is, we can find the matrix of the world coordinate axis transformed into the camera coordinate axis, and then find his transpose matrix, that is, the Inverse Matrix, which is the matrix of the camera coordinate axis transformed into the world coordinate axis</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244572/origin-of-ray/WX20230331-143602_2x_cpsn3o.png" alt=""></p><h2 id="Projection-matrix"><a href="#Projection-matrix" class="headerlink" title="Projection matrix"></a>Projection matrix</h2><p>Just through the View matrix, the relative position of our camera and the object as a whole remains unchanged and moves to the position of the camera at the origin of the world coordinate system.</p><p>What is the purpose of this? Of course, there is an advantage that it is easy to understand, but in fact, it does not make sense for a calculator, because it is all multiplied by a matrix, and the amount of calculation will not make a difference.</p><p>Another advantage of this is to reduce the calculation of the projection matrix.</p><p>Our projection matrix is divided into two types, one is parallel projection and the other is orthogonal projection:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244940/origin-of-ray/WX20230331-144201_2x_are3h7.png" alt=""></p><h3 id="Parallel-projection"><a href="#Parallel-projection" class="headerlink" title="Parallel projection"></a>Parallel projection</h3><p>Let’s first look at the relatively simple parallel projection</p><p>A relatively simple way to understand this projection is to just throw away the z-axis, which is the coordinate of the final point on the screen, and then both the x and y directions are translated and scaled between [-1, 1]. The reason why we can just throw away z here is that our camera is moved to the origin and in the negative direction of the z-axis.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245161/origin-of-ray/WX20230331-144545_2x_f4qhis.png" alt=""></p><p>However, dropping the z-axis cannot be done yet. We still need the information of z to do in-depth tests later. What we need to do now is to normalize x, y, z to the cube of $[-1,1] ^ 3 $</p><p>As shown in the figure below, in the parallel projection, we start with a cube in the observation space. We need to move the center of this cube to the origin and scale it to a cube with side length 1</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245344/origin-of-ray/WX20230331-144846_2x_jxcjxv.png" alt=""></p><h3 id="Orthogonal-projection"><a href="#Orthogonal-projection" class="headerlink" title="Orthogonal projection"></a>Orthogonal projection</h3><p>The difference between orthogonal projection and parallel projection is that there is a near-large and far-small effect, and its initial observation space is not a cube, but a ladder</p><p>We are looking for this ladder normalization matrix to be divided into two steps:</p><ol><li>Scale the ladder to a cube, and the observation space at this time is equivalent to a parallel projection</li><li>Reuse normalized matrices with parallel projections</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245630/origin-of-ray/WX20230331-145336_2x_iwwpge.png" alt=""></p><p>So we’re focusing on the first step right now</p><p>And because our current camera is facing the negative direction of z, so the zoom bottom will not affect the z coordinate, we only need to focus on x and y, we take the y coordinate for example:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245798/origin-of-ray/WX20230331-145627_2x_bdvmtg.png" alt=""></p><p>Similarly, the left side of x becomes $x ‘=\ frac {n} {z} x $</p><p>Then at this time, our transformation matrix can be written. First, the transformation of the orthogonal projection space into the parallel projection space</p><script type="math/tex; mode=display">M_{presp-ortho}\begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}\ frac {n} {z} x\\ frac {n} {z} y\ z\\ 1\end{bmatrix} = \begin{bmatrix}nx \\ ny \\ z^2 \\ z\end{bmatrix}\\That is\\M_{presp-ortho} = \begin{bmatrix}n & 0 & 0 & 0 \\0 & n & 0 & 0 \\0 & 0 & z & 0 \\0 & 0 & 1 & 0 \\\end{bmatrix}</script><p>Then the formal orthogonal projection View matrix is $M_ {press-ortho} $multiplied by the parallel projection View matrix</p><p>At this point, we have completed the transformation of a point from model space to normalized space in the world coordinate system</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I began to re-learn the knowledge of Computer Graphics, so I set my eyes on GAMES101. While watching, I did it and summarized it. This time I summarize the basic knowledge of linear algebra and how to do model transformation in the game. Finally, finish homework 1.&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/en/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>How to Convert Canvas to SVG</title>
    <link href="https://sunra.top/en/posts/4708/"/>
    <id>https://sunra.top/en/posts/4708/</id>
    <published>2023-03-30T04:27:55.000Z</published>
    <updated>2023-06-12T11:53:54.939Z</updated>
    
    <content type="html"><![CDATA[<p>Before, I made a request for a relational graph. Because exporting png and other images will be distorted when enlarged, I hope to export them as vector graphs. However, the export graph function that comes with G6 cannot be exported as SVG in Canvas mode, and SVG mode has many features that are not supported, so I tried to find a way to export Canvas as SVG.</p><span id="more"></span><p>This code uses an old library called canvas-to-svg</p><p>This library simulates canvas and exposes some canvas apis, which can finally be exported as svg</p><p>It should be noted that some canvas APIs do not support, such as setTransform, resetTransform, etc. If you need to use these two APIs, you can split them into translate and rotate, etc</p><p>Directly upload the code:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CanvasToSVG</span> <span class="keyword">from</span> <span class="string">&#x27;canvas-to-svg&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTextWaterMaskToCanvas</span>(<span class="params"></span></span><br><span class="line"><span class="params">  context: CanvasRenderingContext2D,</span></span><br><span class="line"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  context.<span class="property">font</span> = <span class="string">&#x27;16px Microsoft YaHei&#x27;</span>;</span><br><span class="line">  context.<span class="property">fillStyle</span> = <span class="string">&#x27;#F2F3F5&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width, height &#125; = context.<span class="property">canvas</span>;</span><br><span class="line">  <span class="keyword">const</span> textMaskCountHorizontal = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, width / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> textMaskCountVertical = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, height / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> fwidth = width / textMaskCountHorizontal;</span><br><span class="line">  <span class="keyword">const</span> fheight = height / textMaskCountVertical;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> hh = <span class="number">0</span>; hh &lt; height; hh += fheight) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ww = <span class="number">0</span>; ww &lt; width; ww += fwidth) &#123;</span><br><span class="line">      context.<span class="title function_">translate</span>(ww, hh);</span><br><span class="line">      context.<span class="title function_">rotate</span>(-<span class="title class_">Math</span>.<span class="title function_">atan</span>(height / width));</span><br><span class="line">      context.<span class="title function_">fillText</span>(textWaterMask, -fwidth / <span class="number">2</span>, fheight / <span class="number">2</span>);</span><br><span class="line">      context.<span class="title function_">rotate</span>(<span class="title class_">Math</span>.<span class="title function_">atan</span>(height / width));</span><br><span class="line">      context.<span class="title function_">translate</span>(-ww, -hh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadFullImageWithWaterMaskCreator</span>(<span class="params"></span></span><br><span class="line"><span class="params">  graphInstance: IGraph | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    name?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">type</span>?: DataUrlType,</span></span><br><span class="line"><span class="params">    imageConfig?: &#123;</span></span><br><span class="line"><span class="params">      backgroundColor?: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="params">      padding?: <span class="built_in">number</span> | <span class="built_in">number</span>[];</span></span><br><span class="line"><span class="params">    &#125;,</span></span><br><span class="line"><span class="params">    callback?: (success: <span class="built_in">boolean</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    graphInstance?.<span class="title function_">toFullDataURL</span>(</span><br><span class="line">      <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        image.<span class="property">src</span> = res;</span><br><span class="line">        image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// const canvas = document.createElement(&#x27;canvas&#x27;);</span></span><br><span class="line">            <span class="comment">// canvas.width = image.width;</span></span><br><span class="line">            <span class="comment">// canvas.height = image.height;</span></span><br><span class="line">            <span class="comment">// const context = canvas.getContext(&#x27;2d&#x27;);</span></span><br><span class="line">            <span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">CanvasToSVG</span>(image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line">            <span class="keyword">if</span> (context &amp;&amp; name) &#123;</span><br><span class="line">              context.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line">              context.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>, image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">              <span class="title function_">addTextWaterMaskToCanvas</span>(context, textWaterMask);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// downloadCanvasImage(canvas, name, type);</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> svg = context.<span class="title function_">getSerializedSvg</span>(<span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">const</span> svgData = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Blob</span>([svg], &#123; <span class="attr">type</span>: <span class="string">&#x27;image/svg&#x27;</span> &#125;),</span><br><span class="line">              );</span><br><span class="line">              <span class="keyword">const</span> downloadLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">              downloadLink.<span class="property">download</span> = <span class="string">`<span class="subst">$&#123;name&#125;</span>.svg`</span>;</span><br><span class="line">              downloadLink.<span class="property">href</span> = svgData;</span><br><span class="line">              downloadLink.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">              callback?.(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            callback?.(<span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        image.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          callback?.(<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">type</span>,</span><br><span class="line">      imageConfig,</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Before, I made a request for a relational graph. Because exporting png and other images will be distorted when enlarged, I hope to export them as vector graphs. However, the export graph function that comes with G6 cannot be exported as SVG in Canvas mode, and SVG mode has many features that are not supported, so I tried to find a way to export Canvas as SVG.&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Greedy algorithm and simulated annealing algorithm</title>
    <link href="https://sunra.top/en/posts/63479/"/>
    <id>https://sunra.top/en/posts/63479/</id>
    <published>2023-03-24T06:15:46.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>Greedy algorithm is a relatively common algorithm. The essence of greed is to choose the local optimal of each stage to achieve the global optimal. Simulated annealing algorithms are more common in artificial intelligence.</p><p>The reason why these two algorithms are considered together is that the simulated annealing algorithm is like an enhanced version of the greedy algorithm.</p><p>If the local optimal solution of each step of a problem cannot obtain the global optimal solution, the algorithm thinking of our conventional front-end and back-end programmers is Dynamic Programming.</p><p>But for AI development, the parameters may be hundreds of millions of levels, there is no way Dynamic Programming, this time you can try to use simulated annealing algorithm to jump out of this part with a certain probability, to find a better answer in the whole, but in fact This algorithm is not like a conventional algorithm, and will get an inevitable result.</p><p>This article summarizes and compares the two algorithms together to see where they are applicable and how to use them.</p><span id="more"></span><h1 id="Greedy-algorithm"><a href="#Greedy-algorithm" class="headerlink" title="Greedy algorithm"></a>Greedy algorithm</h1><h2 id="What-is-a-greedy-algorithm"><a href="#What-is-a-greedy-algorithm" class="headerlink" title="What is a greedy algorithm"></a>What is a greedy algorithm</h2><p>The essence of greed is to choose the local optimum of each stage, so as to achieve the global optimum.</p><p>This is a bit abstract, let’s take an example:</p><p>For example, if you have a pile of banknotes, you can take ten of them. If you want to reach the maximum amount, how do you take them?</p><p>Specify that you take the largest amount each time, and the end result is to take the largest amount of money.</p><p>Each time you take the largest is the local optimal, and finally take the largest amount of money is to launch the global optimal.</p><p>As another example, if there are a bunch of boxes, and you have a backpack with a volume of n, how to fill the backpack as much as possible, if you still choose the largest box every time, it will not work. At this time, Dynamic Programming is needed.</p><h2 id="When-to-use-a-greedy-algorithm"><a href="#When-to-use-a-greedy-algorithm" class="headerlink" title="When to use a greedy algorithm"></a>When to use a greedy algorithm</h2><p>To be honest, there is no fixed routine for greedy algorithms.</p><p>So the only difficulty is how to use the local optimum to derive the overall optimum.</p><p>So how can we see if the local optimum can lead to the overall optimum? Are there any fixed strategies or routines?</p><p>Sorry, no! Manually simulate by yourself. If the simulation is feasible, you can try the greedy strategy. If it is not feasible, Dynamic Programming may be required.</p><p>A colleague asked how to verify whether a greedy algorithm can be used?</p><p>The best strategy is to give counterexamples. If you can’t think of counterexamples, try greed.</p><h2 id="Greedy-algorithm-general-steps"><a href="#Greedy-algorithm-general-steps" class="headerlink" title="Greedy algorithm general steps:"></a>Greedy algorithm general steps:</h2><ul><li>Break down the problem into several sub-problems</li><li>Find the right greedy strategy</li><li>Solve the optimal solution for each sub-problem</li><li>Stack locally optimal solutions into globally optimal solutions</li></ul><p>These four steps are actually too theoretical. We usually do greedy topics, and it is difficult to think according to these four steps. It is really a bit “chicken ribs”.</p><p>When doing the question, as long as you think clearly, what is the local optimal, if you deduce the global optimal, it is actually enough.</p><h1 id="Simulated-annealing-algorithm"><a href="#Simulated-annealing-algorithm" class="headerlink" title="Simulated annealing algorithm"></a>Simulated annealing algorithm</h1><h2 id="Metal-annealing-principle"><a href="#Metal-annealing-principle" class="headerlink" title="Metal annealing principle"></a>Metal annealing principle</h2><p>Metal annealing is a metal heat treatment process in which the metal is heated to a certain temperature, kept for a sufficient time, and then cooled at a suitable speed (usually slow cooling, sometimes controlled cooling). The simulated annealing algorithm is derived from the principle of solid annealing, which heats the solid to a sufficiently high temperature, and then allows it to cool slowly. When heated, the internal particles of the solid become disordered with the temperature rise, and the internal energy increases, while when slowly cooled, the particles gradually become Orderly, reaching an equilibrium state at each temperature, and finally reaching the ground state at room temperature, the internal energy is minimized.</p><p>When in a low temperature state, the molecules in the solid have very low internal energy and vibrate in a small range in their original position. If the solid is heated to a certain temperature, the internal energy of the molecules will increase, the thermal movement will intensify, and the disorder of the molecular arrangement will increase. At this time, the temperature is slowly lowered, and at each temperature an equilibrium state (that is, a quasi-static process) is reached, the energy of the molecules gradually decreases, and eventually returns to the state of orderly arrangement, and the internal energy of the molecules also drops to a minimum.</p><h2 id="Simulated-annealing-algorithm-1"><a href="#Simulated-annealing-algorithm-1" class="headerlink" title="Simulated annealing algorithm"></a>Simulated annealing algorithm</h2><p>The earliest idea of simulated annealing algorithm (Simulated Annealing, SA) was proposed by N. Metropolis et al in 1953. In 1983, S. Kirkpatrick et al successfully introduced the annealing idea into the field of combinatorial optimization. It is a stochastic optimization algorithm based on Monte-Carlo iterative solution strategy, and its starting point is based on the similarity between the annealing process of solid matter in physics and general combinatorial optimization problems.</p><p>Before introducing simulated annealing, it is necessary to introduce the mountain climbing algorithm.</p><h3 id="Hill-climbing-algorithm"><a href="#Hill-climbing-algorithm" class="headerlink" title="Hill climbing algorithm"></a>Hill climbing algorithm</h3><p>The hill climbing algorithm is a simple greedy search algorithm, which selects an optimal solution from the adjacent solution space of the current solution as the current solution every time until a local optimal solution is reached.</p><p>The implementation of the hill-climbing algorithm is very simple, and its main disadvantage is that it will fall into the local optimal solution, and it may not be able to search for the global optimal solution. As shown in the figure above: Assuming that point C is the current solution, the hill-climbing algorithm will stop searching when it searches for the local optimal solution at point A, because no matter where point A moves in that direction, it cannot get a better solution.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1679639508/origin-of-ray/2010122016525713_tp8p5t.png" alt=""></p><h3 id="Core-idea-of-simulated-annealing"><a href="#Core-idea-of-simulated-annealing" class="headerlink" title="Core idea of simulated annealing"></a>Core idea of simulated annealing</h3><p>Simulated annealing is actually a greedy algorithm, but its search process introduces random factors. The simulated annealing algorithm accepts a solution that is worse than the current solution with a certain probability, so it is possible to jump out of this local optimal solution and achieve a global optimal solution.</p><p>The simulated annealing algorithm starts from a higher initial temperature, with the continuous decline of temperature parameters, combined with certain probability sudden jump characteristics, randomly finds the global optimal solution of the target function in the solution space, that is, the local optimal solution can probabilistically jump out and eventually tend to the global optimal.</p><p>The calculation of “certain probability” here refers to the annealing process of metal smelting, which is also the origin of the name of the simulated annealing algorithm. The temperature T is regarded as the control parameter, the target function value f is regarded as the internal energy E, and a state of a solid at a certain temperature T corresponds to a solution<br>Then the algorithm attempts to reduce the target function f (internal energy E) as the control parameter T decreases, until it tends to the global minimum (the lowest energy state at low temperature in annealing), just like the metal annealing process.</p><h3 id="Mathematical-principles-of-simulated-annealing"><a href="#Mathematical-principles-of-simulated-annealing" class="headerlink" title="Mathematical principles of simulated annealing"></a>Mathematical principles of simulated annealing</h3><p>From the above, we know that the global optimal solution of the target function will be randomly found in the solution space in combination with the probability sudden jump characteristic. So what is the specific mechanism for updating the solution? If the new solution is better than the current solution, the new solution is accepted, otherwise it is judged whether to accept the new solution based on the Metropolis criterion. The acceptance probability is:</p><script type="math/tex; mode=display">\begin{equation}P = \begin{cases}    1 & E_{t + 1} < E_t;\\    e^{-\frac{E_{t + 1} - E_t}{kT}} & E_{t + 1} \geq E_t;\end{cases}\end{equation}</script><p>Assuming that the solution of the search at the current time is $x<em>t $, and the corresponding system energy (target function) is $E_t $, a random perturbation is applied to the search point to generate a new solution $x</em> {t + 1} $, and accordingly, the system energy is $E_ {t + 1} $, then the acceptance probability of the system from the search point to the transition is the above formula.</p><p>That is, if the energy corresponding to the new solution is lower, then the probability of acceptance is 1, that is, it must be accepted. If the energy corresponding to the new solution is high, then accept the new solution with the probability of $e ^ {-\ frac {E_ {t + 1} - E_t} {kT}} $, that is, use this probability to jump out of this local optimal solution.</p><p>This process is to randomly select x, and then find a corresponding E lowest x out, where E is lower corresponding to our specific algorithm is closer to the goal we need</p><p>There is also a problem here, which is how to choose the size of each change in x when we randomly select x.</p><p>This problem is actually the origin of the word’annealing ‘, that is, the temperature will gradually decrease, and the magnitude of x change will become smaller and smaller.</p><h3 id="Simulated-annealing-process"><a href="#Simulated-annealing-process" class="headerlink" title="Simulated annealing process"></a>Simulated annealing process</h3><p>The essence of the algorithm is divided into two layers of cycles. At any temperature level, random disturbances generate a new solution, and calculate the change of the target function value to decide whether to accept it. Since the initial temperature of the algorithm is relatively high, the new solution that increases E may also be accepted initially, so it can jump out of the local minimum, and then by slowly reducing the temperature, the algorithm may eventually converge to the global optimal solution. The specific process is:</p><ol><li>Let $T = T_0 $, representing the initial temperature at which the annealing starts, randomly generate an initial solution $x_0 $, and calculate the corresponding target function value $E_0 $;</li><li>Let $T = kT $, where k is between 0 and 1, which is the rate of temperature drop;</li><li>Apply random perturbation to the current solution $x<em>t $, generate a new solution $x</em> {t + 1} $in its neighborhood, and calculate the corresponding target function value $E<em> {t + 1} $<br>$\Delta E =E</em>{t+1} - E_t$</li><li>If $\ Delta E &lt; 0 $accepts the new solution as the current solution, otherwise it is judged whether to accept the new solution according to the probability $e ^ {-\ frac {\ Delta E} {kT}} $;</li><li>Repeat the disturbance and acceptance process L times at temperature T, i.e. perform steps 3 and 4;</li><li>Determine whether the temperature reaches the termination temperature level, if so, terminate the algorithm, otherwise return to step 2.</li></ol><p>There are a few points to note:</p><ul><li>The selection of the initial point has a certain impact on the results of the algorithm, it is best to run multiple times to make a comprehensive judgment on the results.</li><li>In the early stage of algorithm operation, the temperature drops quickly to avoid accepting too many poor results. As the running time increases, the temperature drop slows down to stabilize the results faster.</li><li>When the number of iterations increases to a certain number, the result may have reached stability, but there is still some time before the algorithm ends. Appropriate output conditions should be added when designing the program, and the program can be ended if the output conditions are met.</li></ul><h2 id="Application-of-simulated-annealing"><a href="#Application-of-simulated-annealing" class="headerlink" title="Application of simulated annealing"></a>Application of simulated annealing</h2><ul><li><p>The application of simulated annealing algorithm in VLSI design, using simulated annealing algorithm to optimize the design of VLSI (Very Large Scale Integration, Very Large Scale Integrated Circuit), is one of the most successful application examples of simulated annealing algorithm at present. The simulated annealing algorithm can almost complete all optimized VLSI design work well. Such as global wiring, board layout, layout and logic minimization, etc.</p></li><li><p>Simulated annealing algorithm can be used for image restoration and other work, that is, to restore a contaminated image into a clear original image and filter out the distorted part. Therefore, its application prospect in image processing is broad.</p></li><li><p>Application of simulated annealing algorithm in neural network computer. The simulated annealing algorithm has the ability to jump out of the trap of local optima. In the Boltzmann machine, even if the system falls into the trap of local optima, after a period of time, it can jump out again, and the system will eventually converge in the direction of the global optimal value.</p></li><li><p>In the force-oriented layout algorithm, the idea of simulated annealing is actually implicit. At the beginning, all nodes are randomly arranged, and then the position of the node changes due to the action of the force between the nodes. The position change is equivalent to the x change, and the changed position, if the resultant force received by the node decreases, which is equivalent to a decrease in energy E, we accept the new solution, and then as the resultant force decreases, it is actually equivalent to a decrease in T, so the impact on the position will become smaller, the full resultant force decreases below a certain threshold, and the position change is not large, and we think the algorithm converges to the result.</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Greedy algorithm is a relatively common algorithm. The essence of greed is to choose the local optimal of each stage to achieve the global optimal. Simulated annealing algorithms are more common in artificial intelligence.&lt;/p&gt;
&lt;p&gt;The reason why these two algorithms are considered together is that the simulated annealing algorithm is like an enhanced version of the greedy algorithm.&lt;/p&gt;
&lt;p&gt;If the local optimal solution of each step of a problem cannot obtain the global optimal solution, the algorithm thinking of our conventional front-end and back-end programmers is Dynamic Programming.&lt;/p&gt;
&lt;p&gt;But for AI development, the parameters may be hundreds of millions of levels, there is no way Dynamic Programming, this time you can try to use simulated annealing algorithm to jump out of this part with a certain probability, to find a better answer in the whole, but in fact This algorithm is not like a conventional algorithm, and will get an inevitable result.&lt;/p&gt;
&lt;p&gt;This article summarizes and compares the two algorithms together to see where they are applicable and how to use them.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>How to Develop a Relationship Graph with G6</title>
    <link href="https://sunra.top/en/posts/8324/"/>
    <id>https://sunra.top/en/posts/8324/</id>
    <published>2023-03-10T06:28:01.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I was thinking about how to implement the relationship diagram of Feishu Docs, so I remembered the G6 I used before, so I simply implemented a version.</p><h1 id="Final-effect"><a href="#Final-effect" class="headerlink" title="Final effect"></a>Final effect</h1><p>The main functions are as follows:</p><ul><li>The node is divided into two parts, the top half is the icon and the bottom half is the text<ul><li>When the mouse is placed on the icon, it will produce a diffusion effect of water ripples, and a circle of borders will appear at the same time</li><li>Text needs to be underlined and have a white background, and the water ripple effect cannot be blocked by the white background</li><li>The underline of the text needs to be a square</li></ul></li><li>The connection should have a gradual change of color, and the gradual change of color should be from the beginning of the arrow to the end of the arrow, and if the two-way relationship is supported, how to achieve two edges</li><li>There should be a Label in the middle of the connection</li><li>Nodes and connections should support translucency</li><li>The overall layout should be a force-oriented layout, and node dragging is supported. When dragging, nodes cannot overlap, but other nodes cannot be dragged due to connection (this point is raised separately because G6’s built-in force-oriented layout nodes will be dragged).</li></ul><span id="more"></span><h1 id="Concrete-realization"><a href="#Concrete-realization" class="headerlink" title="Concrete realization"></a>Concrete realization</h1><h2 id="Custom-node"><a href="#Custom-node" class="headerlink" title="Custom node"></a>Custom node</h2><p>The first difficulty of this Functional Button is:</p><ul><li>G6 Only keyShapre can respond to events, and the connection is connected to the keyShape injury, and the keyShape is the first shape of each group</li><li>So if we want the mouse to Hover the image to produce water ripples, we should make the image node the keyShape</li><li>But if we let image be keyShape, even if our picture is round, the box of keyShape is square, if the line is connected to the four corners of the image, there will be a little white space between the line and the picture, so we need to Let circle be keyShape, and then image is added later, but this will cause our keyShapre, that is, circle is covered by image, so that the hover event cannot be triggered</li></ul><p>There are two solutions, depending on whether the renderer you use is svg or canvas</p><ul><li><p>If it is canvas, let circle be keyShape, but add zIndex to both circle and image, and then call group.sort ()</p></li><li><p>If it is svg, group.sort is invalid, we need to change the hierarchy through the js method in the afterDraw method, and move the back circle to the front (the earlier you add it, the later it will be)</p></li></ul><p>The second difficulty is how to add the water ripple effect and how to turn on the water ripple when the Hover circle</p><p>The solution is divided into two steps:</p><ul><li>Use the water ripple code from the official example, but remember to set visible to false first, and pay attention to the hierarchy, so that the text is at the top</li><li>Then listen to the’node: mousemove ‘event, if the Hover target is circle, call setItemState, then when registering the node, set the setState callback, and then set visible to true through the shape.attr method, then listen to’node: mouseleave’, set the state to another, and set visible to false in the setState callback</li></ul><blockquote><p>The scheme of setting and listening to state changes can also be used to implement borders. Of course, this simple style can also be solved by stateStyle</p></blockquote><p>The third difficulty is how to add text underline and how to break lines if the text is too long, because the text in G6 does not support the underline I need</p><p>The solution is:</p><ul><li>Calculate the length of the text by yourself, break if it exceeds a certain length, delete and add ellipsis after more than two lines</li><li>Then add the path shape as an underscore below the text, and the length should be the text length.</li></ul><blockquote><p>Note that custom nodes should remember to inherit a built-in node, at least inherit single-node, otherwise many features are not available</p></blockquote><p>Here only shows the canvas code:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> <span class="title class_">ItemStatus</span> &#123;</span><br><span class="line">  <span class="variable constant_">OPACITY</span> = <span class="string">&#x27;opacity&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">NORMAL</span> = <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">ACTIVE</span> = <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLetterWidth</span>(<span class="params">letter: <span class="built_in">string</span>, fontSize: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;[\u4E00-\u9FA5]+&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (pattern.<span class="title function_">test</span>(letter)) &#123;</span><br><span class="line">    <span class="comment">// Chinese charactors</span></span><br><span class="line">    <span class="keyword">return</span> fontSize;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// get the width of single letter according to the fontSize</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">G6</span>.<span class="property">Util</span>.<span class="title function_">getLetterWidth</span>(letter, fontSize);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getStringWidth</span>(<span class="params">str: <span class="built_in">string</span>, fontSize: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> currentWidth = <span class="number">0</span>;</span><br><span class="line">  str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">letter</span> =&gt;</span> &#123;</span><br><span class="line">    currentWidth += <span class="title function_">getLetterWidth</span>(letter, fontSize);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> currentWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replaceTooLongStringWithEllipsis</span>(<span class="params"></span></span><br><span class="line"><span class="params">  strs: <span class="built_in">string</span>[],</span></span><br><span class="line"><span class="params">  maxWidth: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  fontSize: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ellipsis = <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> ellipsisLength = <span class="title function_">getStringWidth</span>(ellipsis, fontSize);</span><br><span class="line">  <span class="keyword">if</span> (strs.<span class="property">length</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> secondLine = strs[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> currentWidth = ellipsisLength;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; secondLine.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      currentWidth += <span class="title function_">getLetterWidth</span>(secondLine[i], fontSize);</span><br><span class="line">      <span class="keyword">if</span> (currentWidth &gt;= maxWidth) &#123;</span><br><span class="line">        strs[<span class="number">1</span>] = <span class="string">`<span class="subst">$&#123;secondLine.slice(<span class="number">0</span>, i)&#125;</span><span class="subst">$&#123;ellipsis&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [strs[<span class="number">0</span>], strs[<span class="number">1</span>]];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strs;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NODE_ICON_SIZE</span> = <span class="number">48</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NODE_ICON_RADIUS</span> = <span class="variable constant_">NODE_ICON_SIZE</span> / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NODE_NAME_FONT_SIZE</span> = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NODE_NAME_HEIGHT</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">G6</span>.<span class="title function_">registerNode</span>(</span><br><span class="line">    <span class="string">&#x27;test-node&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="title function_">draw</span>(<span class="params">cfg, group</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> keyShape = group?.<span class="title function_">addShape</span>(<span class="string">&#x27;circle&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: <span class="variable constant_">NODE_ICON_RADIUS</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;rgba(255,255,255,0)&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">lineWidth</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-dummy&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">10</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        group?.<span class="title function_">addShape</span>(<span class="string">&#x27;image&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: -<span class="variable constant_">NODE_ICON_SIZE</span> / <span class="number">2</span>,</span><br><span class="line">            <span class="attr">y</span>: -<span class="variable constant_">NODE_ICON_SIZE</span> / <span class="number">2</span>,</span><br><span class="line">            <span class="attr">width</span>: <span class="variable constant_">NODE_ICON_SIZE</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="variable constant_">NODE_ICON_SIZE</span>,</span><br><span class="line">            <span class="attr">img</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-icon&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">9</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> lableSplit = <span class="title function_">fittingString</span>(</span><br><span class="line">          cfg?.<span class="property">supName</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">          <span class="number">200</span>,</span><br><span class="line">          <span class="variable constant_">NODE_NAME_FONT_SIZE</span>,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lableSplit.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> label = lableSplit[i];</span><br><span class="line">            <span class="keyword">const</span> labelWidth = <span class="title function_">getStringWidth</span>(</span><br><span class="line">                label,</span><br><span class="line">                <span class="variable constant_">NODE_NAME_FONT_SIZE</span>,</span><br><span class="line">            );</span><br><span class="line">            group?.<span class="title function_">addShape</span>(<span class="string">&#x27;rect&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                <span class="attr">x</span>: -labelWidth / <span class="number">2</span>,</span><br><span class="line">                <span class="attr">y</span>:</span><br><span class="line">                    <span class="variable constant_">NODE_ICON_SIZE</span> -</span><br><span class="line">                    <span class="variable constant_">NODE_NAME_HEIGHT</span> +</span><br><span class="line">                    i * <span class="variable constant_">NODE_NAME_HEIGHT</span> +</span><br><span class="line">                    <span class="number">4</span>,</span><br><span class="line">                <span class="attr">width</span>: labelWidth,</span><br><span class="line">                <span class="attr">height</span>: <span class="variable constant_">NODE_NAME_HEIGHT</span>,</span><br><span class="line">                <span class="attr">fill</span>: <span class="string">&#x27;#FFFFFF&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">`test-node-name-background-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">zIndex</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            group?.<span class="title function_">addShape</span>(<span class="string">&#x27;text&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                <span class="attr">text</span>: label,</span><br><span class="line">                <span class="attr">fill</span>: <span class="string">&#x27;#646A73&#x27;</span>,</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">14</span>,</span><br><span class="line">                <span class="attr">textAlign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">y</span>: <span class="variable constant_">NODE_ICON_SIZE</span> + i * <span class="variable constant_">NODE_NAME_HEIGHT</span>,</span><br><span class="line">                <span class="attr">width</span>: labelWidth,</span><br><span class="line">                <span class="attr">height</span>: <span class="variable constant_">NODE_NAME_HEIGHT</span>,</span><br><span class="line">                <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">`test-node-name-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">zIndex</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            group?.<span class="title function_">addShape</span>(<span class="string">&#x27;path&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                <span class="attr">path</span>: [</span><br><span class="line">                    [</span><br><span class="line">                    <span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">                    -labelWidth / <span class="number">2</span>,</span><br><span class="line">                    <span class="variable constant_">NODE_ICON_SIZE</span> + i * <span class="variable constant_">NODE_NAME_HEIGHT</span> + <span class="number">2</span>,</span><br><span class="line">                    ],</span><br><span class="line">                    [</span><br><span class="line">                    <span class="string">&#x27;L&#x27;</span>,</span><br><span class="line">                    labelWidth / <span class="number">2</span>,</span><br><span class="line">                    <span class="variable constant_">NODE_ICON_SIZE</span> + i * <span class="variable constant_">NODE_NAME_HEIGHT</span> + <span class="number">2</span>,</span><br><span class="line">                    ],</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">stroke</span>: <span class="string">&#x27;#000000&#x27;</span>,</span><br><span class="line">                <span class="attr">lineWidth</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">lineDash</span>: [<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">`test-node-name-underline-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">zIndex</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> back1 = group?.<span class="title function_">addShape</span>(<span class="string">&#x27;circle&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;rgba(255,255,255,0)&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-wave1&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> back2 = group?.<span class="title function_">addShape</span>(<span class="string">&#x27;circle&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;rgba(255,255,255,0)&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-wave2&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> back3 = group?.<span class="title function_">addShape</span>(<span class="string">&#x27;circle&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">7</span>,</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;rgba(255,255,255,0)&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-wave3&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        back1?.<span class="title function_">animate</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            <span class="attr">r</span>: <span class="variable constant_">NODE_ICON_RADIUS</span> + <span class="number">16</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">easing</span>: <span class="string">&#x27;easeCubic&#x27;</span>,</span><br><span class="line">            <span class="attr">delay</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">repeat</span>: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// no delay</span></span><br><span class="line">        back2?.<span class="title function_">animate</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            <span class="attr">r</span>: <span class="variable constant_">NODE_ICON_RADIUS</span> + <span class="number">16</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">easing</span>: <span class="string">&#x27;easeCubic&#x27;</span>,</span><br><span class="line">            <span class="attr">delay</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="attr">repeat</span>: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// 1s delay</span></span><br><span class="line">        back3?.<span class="title function_">animate</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            <span class="attr">r</span>: <span class="variable constant_">NODE_ICON_RADIUS</span> + <span class="number">16</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">easing</span>: <span class="string">&#x27;easeCubic&#x27;</span>,</span><br><span class="line">            <span class="attr">delay</span>: <span class="number">2000</span>,</span><br><span class="line">            <span class="attr">repeat</span>: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// 3s delay</span></span><br><span class="line"></span><br><span class="line">        back1?.<span class="title function_">hide</span>();</span><br><span class="line">        back2?.<span class="title function_">hide</span>();</span><br><span class="line">        back3?.<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line">        group?.<span class="title function_">sort</span>();</span><br><span class="line">        <span class="keyword">return</span> keyShape <span class="keyword">as</span> <span class="title class_">IShape</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">setState</span>(<span class="params">name, value, item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name = <span class="string">&#x27;status&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (value = <span class="title class_">ItemStatus</span>.<span class="property">ACTIVE</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> group = item?.<span class="title function_">getContainer</span>();</span><br><span class="line">            <span class="keyword">const</span> shapes = group?.<span class="title function_">getChildren</span>() ?? [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> shape <span class="keyword">of</span> shapes) &#123;</span><br><span class="line">              <span class="keyword">if</span> (shape.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node-wave&#x27;</span>)) &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">0.6</span>);</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;#4E83FD&#x27;</span>);</span><br><span class="line">                shape.<span class="title function_">show</span>();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node-dummy&#x27;</span>)) &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">&#x27;#4E83FD&#x27;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> group = item?.<span class="title function_">getContainer</span>();</span><br><span class="line">            <span class="keyword">const</span> shapes = group?.<span class="title function_">getChildren</span>() ?? [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> shape <span class="keyword">of</span> shapes) &#123;</span><br><span class="line">              <span class="keyword">if</span> (shape.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node-wave&#x27;</span>)) &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>);</span><br><span class="line">                shape.<span class="title function_">hide</span>();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node-dummy&#x27;</span>)) &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, value = <span class="title class_">ItemStatus</span>.<span class="property">OPACITY</span> ? <span class="number">0.2</span> : <span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;single-node&#x27;</span>,</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>The first difficulty is that you can’t simply add a lable to draw or afterdraw. This only applies to the situation where the relative position of the text and the starting point of the line remains unchanged. When we need it, the node can be dragged and dropped, which means that the length of the line can be changed, and what we require is that the text is in the middle of the line.</p><p>The solution is:</p><ul><li>Remove the previous added text shape and add new text shape every time in afterUpdate</li><li>There is actually no group in afterUpdate. You can forcibly mount group to cfg after draw.</li></ul><p>The second difficulty is that how to keep the gradual change of color must be from the starting point to the end point of the connection, because G6 only supports the setting of a fixed angle, such as setting a gradual change of 0 degrees, it must be a gradual change from left to right, if A line is from right to left, then this gradual change of color is reversed</p><p>The solution is:</p><ul><li>Or in afterUpdate, constantly calculate the position of the new startPoint and endPoint to calculate the angle</li><li>Set the gradual change color attribute of stroke by calculating the angle and then using shape.attr</li></ul><p>The third difficulty is how to support bilinear curves, because the default is a straight line, and the two-way lines will overlap</p><p>The solution lies in:</p><ul><li>Define another custom type, based on Bezier curve extension</li></ul><p>The specific code is as follows:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">EDGE_LABEL_HEIGHT</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EDGE_LABEL_FONT_SIZE</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addLabelToEdge</span>(<span class="params">cfg: ModelConfig | <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> config = cfg <span class="keyword">as</span> <span class="title class_">ModelConfig</span>;</span><br><span class="line">  <span class="keyword">const</span> group = cfg?.<span class="property">group</span> <span class="keyword">as</span> <span class="title class_">IGroup</span>;</span><br><span class="line">  <span class="keyword">const</span> shape = group?.<span class="title function_">get</span>(<span class="string">&#x27;children&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// get the coordinate of the mid point on the path</span></span><br><span class="line">  <span class="comment">//Get the coordinates of the midpoint of the path graph</span></span><br><span class="line">  <span class="keyword">const</span> midPoint = shape.<span class="title function_">getPoint</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="keyword">const</span> startPoint = cfg?.<span class="property">startPoint</span>;</span><br><span class="line">  <span class="keyword">const</span> endPoint = cfg?.<span class="property">endPoint</span>;</span><br><span class="line">  <span class="keyword">if</span> (startPoint &amp;&amp; endPoint) &#123;</span><br><span class="line">    <span class="keyword">const</span> angle =</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">atan2</span>(endPoint.<span class="property">y</span> - startPoint.<span class="property">y</span>, endPoint.<span class="property">x</span> - startPoint.<span class="property">x</span>) * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (angle &gt; -<span class="title class_">Math</span>.<span class="property">PI</span> &amp;&amp; angle &lt; <span class="title class_">Math</span>.<span class="property">PI</span>) &#123;</span><br><span class="line">      shape.<span class="title function_">attr</span>(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">`l(0) 0:#4E83FD 1:#B6CBFE`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      shape.<span class="title function_">attr</span>(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">`l(0) 0:#B6CBFE 1:#4E83FD`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (midPoint) &#123;</span><br><span class="line">    <span class="keyword">const</span> labelWidth = <span class="title function_">getStringWidth</span>(</span><br><span class="line">      config.<span class="property">text</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      <span class="variable constant_">EDGE_LABEL_FONT_SIZE</span>,</span><br><span class="line">    );</span><br><span class="line">    group?.<span class="title function_">removeChild</span>(config.<span class="property">preEdgeText</span> <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">    group?.<span class="title function_">removeChild</span>(config.<span class="property">preEdgeTextBackground</span> <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">    config.<span class="property">preEdgeTextBackground</span> = group.<span class="title function_">addShape</span>(<span class="string">&#x27;rect&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">x</span>: midPoint.<span class="property">x</span> - (labelWidth + <span class="number">12</span>) / <span class="number">2</span>,</span><br><span class="line">        <span class="attr">y</span>: midPoint.<span class="property">y</span> - <span class="variable constant_">EDGE_LABEL_HEIGHT</span> + <span class="number">4</span>,</span><br><span class="line">        <span class="attr">width</span>: labelWidth + <span class="number">12</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable constant_">EDGE_LABEL_HEIGHT</span>,</span><br><span class="line">        <span class="attr">fill</span>: <span class="string">&#x27;#E1EAFF&#x27;</span>,</span><br><span class="line">        <span class="attr">radius</span>: <span class="variable constant_">EDGE_LABEL_HEIGHT</span> / <span class="number">2</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;test-edge-background&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    config.<span class="property">preEdgeText</span> = group.<span class="title function_">addShape</span>(<span class="string">&#x27;text&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: cfg?.<span class="property">text</span>,</span><br><span class="line">        <span class="attr">fill</span>: <span class="string">&#x27;#3370FF&#x27;</span>,</span><br><span class="line">        <span class="attr">fontWeight</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">lineHeight</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">textAlign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">x</span>: midPoint.<span class="property">x</span>,</span><br><span class="line">        <span class="attr">y</span>: midPoint.<span class="property">y</span>,</span><br><span class="line">        <span class="attr">width</span>: labelWidth + <span class="number">12</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable constant_">EDGE_LABEL_HEIGHT</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;test-edge-text&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">G6</span>.<span class="title function_">registerEdge</span>(</span><br><span class="line"><span class="string">&#x27;test-edge-single&#x27;</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_">afterDraw</span>(<span class="params">cfg, group</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = cfg <span class="keyword">as</span> <span class="title class_">ModelConfig</span>;</span><br><span class="line">    config.<span class="property">group</span> = group;</span><br><span class="line">    <span class="title function_">addLabelToEdge</span>(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">afterUpdate</span>(<span class="params">cfg</span>) &#123;</span><br><span class="line">    <span class="title function_">addLabelToEdge</span>(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">G6</span>.<span class="title function_">registerEdge</span>(</span><br><span class="line"><span class="string">&#x27;test-edge-double&#x27;</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_">afterDraw</span>(<span class="params">cfg, group</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = cfg <span class="keyword">as</span> <span class="title class_">ModelConfig</span>;</span><br><span class="line">    config.<span class="property">group</span> = group;</span><br><span class="line">    <span class="title function_">addLabelToEdge</span>(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">afterUpdate</span>(<span class="params">cfg</span>) &#123;</span><br><span class="line">    <span class="title function_">addLabelToEdge</span>(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&#x27;quadratic&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Event-monitoring-changes-node-and-connection-styles"><a href="#Event-monitoring-changes-node-and-connection-styles" class="headerlink" title="Event monitoring changes node and connection styles"></a>Event monitoring changes node and connection styles</h2><p>Code for event monitoring:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">highlightLocalNodesAndEdges</span>(<span class="params">graphInstance: IGraph, e: IG6GraphEvent</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; localEdges, localNodesId, otherNodesId, otherEdges &#125; =</span><br><span class="line">    <span class="title function_">getAllLocalNodesAndEdges</span>(graphInstance, e.<span class="property">item</span>?.<span class="title function_">getModel</span>().<span class="property">id</span> <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">  localEdges.<span class="title function_">forEach</span>(<span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(</span><br><span class="line">      edge.<span class="title function_">getModel</span>().<span class="property">id</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      <span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">      <span class="title class_">ItemStatus</span>.<span class="property">NORMAL</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  otherEdges.<span class="title function_">forEach</span>(<span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(</span><br><span class="line">      edge.<span class="title function_">getModel</span>().<span class="property">id</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      <span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">      <span class="title class_">ItemStatus</span>.<span class="property">OPACITY</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  localNodesId.<span class="title function_">forEach</span>(<span class="function"><span class="params">nodeId</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(nodeId <span class="keyword">as</span> <span class="built_in">string</span>, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">NORMAL</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  otherNodesId.<span class="title function_">forEach</span>(<span class="function"><span class="params">nodeId</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(nodeId <span class="keyword">as</span> <span class="built_in">string</span>, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">OPACITY</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">highlightAllNodesAndGraph</span>(<span class="params">graphInstance: IGraph</span>) &#123;</span><br><span class="line">  graphInstance.<span class="title function_">findAll</span>(<span class="string">&#x27;edge&#x27;</span>, <span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(edge, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">NORMAL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  graphInstance.<span class="title function_">findAll</span>(<span class="string">&#x27;node&#x27;</span>, <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(node, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">NORMAL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useInternalEventListener</span>(<span class="params">graphInstance: IGraph | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onMouseMoveOnNode</span>(<span class="params">e: IG6GraphEvent</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !e.<span class="property">target</span>.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node--name-&#x27;</span>) &amp;&amp;</span><br><span class="line">        graphInstance</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="title function_">highlightLocalNodesAndEdges</span>(graphInstance, e);</span><br><span class="line">        graphInstance.<span class="title function_">setItemState</span>(e.<span class="property">item</span> <span class="keyword">as</span> <span class="title class_">Item</span>, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">ACTIVE</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onMouseLeaveNode</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (graphInstance) &#123;</span><br><span class="line">        <span class="title function_">highlightAllNodesAndGraph</span>(graphInstance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    graphInstance?.<span class="title function_">on</span>(<span class="string">&#x27;node:mousemove&#x27;</span>, onMouseMoveOnNode);</span><br><span class="line"></span><br><span class="line">    graphInstance?.<span class="title function_">on</span>(<span class="string">&#x27;node:mouseleave&#x27;</span>, onMouseLeaveNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      graphInstance?.<span class="title function_">off</span>(<span class="string">&#x27;node:mousemove&#x27;</span>, onMouseMoveOnNode);</span><br><span class="line"></span><br><span class="line">      graphInstance?.<span class="title function_">off</span>(<span class="string">&#x27;node:mouseleave&#x27;</span>, onMouseLeaveNode);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [graphInstance]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Layout-algorithms-and-drag-nodes"><a href="#Layout-algorithms-and-drag-nodes" class="headerlink" title="Layout algorithms and drag nodes"></a>Layout algorithms and drag nodes</h2><p>G6 actually comes with a force-oriented layout, but it’s weird, the effect is different from d3, and it doesn’t support only collision detection when dragging</p><p>There are a few difficulties here:</p><ul><li>How to use force-oriented layout of d3, here mainly d3 will change the data structure of points, causing G6 to execute abnormally</li><li>If you implement collision detection yourself</li><li>How to smooth a bit when dragging nodes</li></ul><p>The solution is as follows:</p><ul><li>Use Promise to encapsulate the layout algorithm of d3, process the data into the format supported by G6 after monitoring the end event, otherwise let G6 render without waiting for all ticks to be completed. Halfway through, d3 changes the data format again, an error will be reported</li><li>Self-implemented collision detection is actually a simple way to determine the distance between nodes. If it is less than a certain value, push other nodes away, then record the nodes that are pushed away, and calculate the distance between the nodes that are pushed away and all nodes., if there is still close, modify the position and continue the recursion of the nodes that modify the position in this round. In order to prevent stack overflow, you can set the maximum recursion layer of 30</li><li>If the refreshPosition method is called after each node is calculated, it will actually cause line shaking. The solution is to enable force layout, so layout can be used to achieve smooth re-rendering, but the positions of all nodes are set with fx and fy to prevent force-oriented layout from modifying position</li></ul><p>The code is as follows:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">REFRESH_NODE_POSITION_RECURSION_COUNT</span> = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS</span> = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS_SEQUARE</span> = <span class="title class_">Math</span>.<span class="title function_">pow</span>(</span><br><span class="line">  <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTwoNodeDistance</span>(<span class="params">node1: NodeConfig, node2: NodeConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> distance =</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">pow</span>((node1.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (node2.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>), <span class="number">2</span>) +</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">pow</span>((node1.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (node2.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>), <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">refreshNodesPositionHelper</span>(<span class="params"></span></span><br><span class="line"><span class="params">  dragedNode: NodeConfig,</span></span><br><span class="line"><span class="params">  positionChangedNodes: NodeConfig[],</span></span><br><span class="line"><span class="params">  allNodes: NodeConfig[],</span></span><br><span class="line"><span class="params">  deep = <span class="number">0</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (deep &gt; <span class="variable constant_">REFRESH_NODE_POSITION_RECURSION_COUNT</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> nextPositionChangedNodesSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">NodeConfig</span>&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> positionChangedNode <span class="keyword">of</span> positionChangedNodes) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> everyNode <span class="keyword">of</span> allNodes) &#123;</span><br><span class="line">      <span class="keyword">if</span> (positionChangedNode.<span class="property">id</span> = everyNode.<span class="property">id</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> distance = <span class="title function_">getTwoNodeDistance</span>(positionChangedNode, everyNode);</span><br><span class="line">      <span class="keyword">if</span> (distance &lt; <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS</span>) &#123;</span><br><span class="line">        nextPositionChangedNodesSet.<span class="title function_">add</span>(everyNode);</span><br><span class="line">        <span class="keyword">const</span> detaX = <span class="title class_">Math</span>.<span class="title function_">abs</span>(</span><br><span class="line">          (positionChangedNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (everyNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>),</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> detaY = <span class="title class_">Math</span>.<span class="property">abs</span> (</span><br><span class="line">          (positionChangedNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (everyNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Root formula for quadratic equation system of one yuan 2 * moveDistance ^ 2 + 2 (detaX + detaY) * moveDistance = REFRESH_NODE_COLLIDE_RADIUS_SEQUARE - (detaX ^ 2 + detaY ^ 2)</span></span><br><span class="line">        <span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> b = <span class="number">2</span> * (detaX + detaY);</span><br><span class="line">        <span class="keyword">const</span> c =</span><br><span class="line">          detaX * detaX + detaY * detaY - <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS_SEQUARE</span>;</span><br><span class="line">        <span class="keyword">const</span> moveDistance = (<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(b * b - <span class="number">4</span> * a * c) - b) / (<span class="number">2</span> * a);</span><br><span class="line"></span><br><span class="line">        everyNode.<span class="property">x</span> =</span><br><span class="line">          (everyNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) +</span><br><span class="line">          ((everyNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (positionChangedNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) &gt; <span class="number">0</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : -<span class="number">1</span>) *</span><br><span class="line">            moveDistance;</span><br><span class="line"></span><br><span class="line">        everyNode.<span class="property">y</span> =</span><br><span class="line">          (everyNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) +</span><br><span class="line">          ((everyNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (positionChangedNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) &gt; <span class="number">0</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : -<span class="number">1</span>) *</span><br><span class="line">            moveDistance;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextPositionChangedNodesSet.<span class="property">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">nextPositionChangedNodes</span>: <span class="title class_">NodeConfig</span>[] = [];</span><br><span class="line">    nextPositionChangedNodesSet.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      nextPositionChangedNodes.<span class="title function_">push</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">refreshNodesPositionHelper</span>(</span><br><span class="line">      dragedNode,</span><br><span class="line">      nextPositionChangedNodes,</span><br><span class="line">      allNodes,</span><br><span class="line">      deep + <span class="number">1</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    allNodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">      node.<span class="property">fx</span> = node.<span class="property">x</span>;</span><br><span class="line">      node.<span class="property">fy</span> = node.<span class="property">y</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onNodeDrag</span>(<span class="params">e: IG6GraphEvent</span>) &#123;</span><br><span class="line">    graphInstance?.<span class="title function_">layout</span>();</span><br><span class="line">    <span class="keyword">const</span> model = e.<span class="property">item</span>?.<span class="title function_">get</span>(<span class="string">&#x27;model&#x27;</span>);</span><br><span class="line">    model.<span class="property">x</span> = e.<span class="property">x</span>;</span><br><span class="line">    model.<span class="property">y</span> = e.<span class="property">y</span>;</span><br><span class="line">    model.<span class="property">fx</span> = e.<span class="property">x</span>;</span><br><span class="line">    model.<span class="property">fy</span> = e.<span class="property">y</span>;</span><br><span class="line">    <span class="keyword">const</span> allNodes = graphInstance</span><br><span class="line">    ?.<span class="title function_">findAll</span>(<span class="string">&#x27;node&#x27;</span>, <span class="function"><span class="params">node</span> =&gt;</span> node.<span class="title function_">getID</span>() ! e.<span class="property">item</span>?.<span class="title function_">getID</span>())</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">node</span> =&gt;</span> node.<span class="title function_">getModel</span>()) <span class="keyword">as</span> <span class="title class_">NodeConfig</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">refreshNodesPositionHelper</span>(model, [model], allNodes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onMouseMoveOnNode</span>(<span class="params">e: IG6GraphEvent</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">    !e.<span class="property">target</span>.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node--name-&#x27;</span>) &amp;&amp;</span><br><span class="line">    graphInstance</span><br><span class="line">    ) &#123;</span><br><span class="line">    <span class="title function_">highlightLocalNodesAndEdges</span>(graphInstance, e);</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(e.<span class="property">item</span> <span class="keyword">as</span> <span class="title class_">Item</span>, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">ACTIVE</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onMouseLeaveNode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (graphInstance) &#123;</span><br><span class="line">    <span class="title function_">highlightAllNodesAndGraph</span>(graphInstance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">graphInstance?.<span class="title function_">on</span>(<span class="string">&#x27;node:drag&#x27;</span>, onNodeDrag);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I was thinking about how to implement the relationship diagram of Feishu Docs, so I remembered the G6 I used before, so I simply implemented a version.&lt;/p&gt;
&lt;h1 id=&quot;Final-effect&quot;&gt;&lt;a href=&quot;#Final-effect&quot; class=&quot;headerlink&quot; title=&quot;Final effect&quot;&gt;&lt;/a&gt;Final effect&lt;/h1&gt;&lt;p&gt;The main functions are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The node is divided into two parts, the top half is the icon and the bottom half is the text&lt;ul&gt;
&lt;li&gt;When the mouse is placed on the icon, it will produce a diffusion effect of water ripples, and a circle of borders will appear at the same time&lt;/li&gt;
&lt;li&gt;Text needs to be underlined and have a white background, and the water ripple effect cannot be blocked by the white background&lt;/li&gt;
&lt;li&gt;The underline of the text needs to be a square&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The connection should have a gradual change of color, and the gradual change of color should be from the beginning of the arrow to the end of the arrow, and if the two-way relationship is supported, how to achieve two edges&lt;/li&gt;
&lt;li&gt;There should be a Label in the middle of the connection&lt;/li&gt;
&lt;li&gt;Nodes and connections should support translucency&lt;/li&gt;
&lt;li&gt;The overall layout should be a force-oriented layout, and node dragging is supported. When dragging, nodes cannot overlap, but other nodes cannot be dragged due to connection (this point is raised separately because G6’s built-in force-oriented layout nodes will be dragged).&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Force-oriented algorithm</title>
    <link href="https://sunra.top/en/posts/62967/"/>
    <id>https://sunra.top/en/posts/62967/</id>
    <published>2023-02-23T02:59:53.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I need to implement a relational graph in my work. The node layout in the graph needs to use force-oriented layout, so I was interested in the force-oriented algorithm involved, and I went to study it.</p><p>Force-directed graph drawings can be used to describe the relationships between nodes of a graph, distributing nodes to reasonable positions on the canvas, such as describing relationships between enterprises, interpersonal relationships in social networks, etc.</p><span id="more"></span><h1 id="Basic-principle-of-algorithm"><a href="#Basic-principle-of-algorithm" class="headerlink" title="Basic principle of algorithm"></a>Basic principle of algorithm</h1><p>Let’s first take a look at a rendering:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1677373207/origin-of-ray/bVbgUak_jbxebp.png" alt=""></p><p>The distribution of the points in the above figure is calculated by the force guidance algorithm, which is to regard the nodes as the same charge, and there is a repulsive force between them. This repulsive force simulates Coulomb’s law, and the closer the repulsive force, the greater the repulsive force; if there is a connection between two points, it is regarded as an attractive force between the two points. This attractive force simulates Hooke’s law, and the farther away the attractive force is, the greater the attractive force.</p><p>In the initial state, we randomly place points, and then these points will move in space due to attractive forces and repulsive forces until a balance is reached, forming a force-oriented layout.</p><h2 id="Repulsive-force"><a href="#Repulsive-force" class="headerlink" title="Repulsive force"></a>Repulsive force</h2><p>Consider each node as an electric charge, and there is a repulsive force between the charges, which is the Coulomb force. According to Coulomb’s law, the repulsive force between electrons can be calculated as follows:</p><script type="math/tex; mode=display">F = k_e\frac{q_1q_2}{r^2}\overrightarrow{e}</script><p>We can assume that $q_1 and q_2 $are both 1, then the above formula becomes</p><script type="math/tex; mode=display">F = k_e\frac{1}{r^2}\overrightarrow{e}</script><h2 id="Attractive-force"><a href="#Attractive-force" class="headerlink" title="Attractive force"></a>Attractive force</h2><p>Some particles are entangled by some edges that produce a spring-like Hooker attractive force:</p><script type="math/tex; mode=display">F_s = k_s(x - x_0)</script><p>The repulsive and attractive forces continue to act, the particles tend to balance after continuous displacement, and gradually no longer have relative displacement, and the energy is continuously consumed, and finally tends to zero.</p><p>Under the action of attractive force and repulsive force, the coordinates are constantly updated, and after multiple iterations, a stable state is reached, and the convergence is over. Parameters and iterations need to be debugged.</p><h2 id="Calculation-step"><a href="#Calculation-step" class="headerlink" title="Calculation step"></a>Calculation step</h2><p>If we want to use code to implement the simplified layout of the force guide diagram, we need several steps.</p><ul><li>Set point data nodes, link data links.</li><li>Random positioning of points.</li><li>Render View</li><li>Execution algorithm calculates position, renders view (repeated N times)</li></ul><h1 id="Code-implementation"><a href="#Code-implementation" class="headerlink" title="Code implementation"></a>Code implementation</h1><p>In fact, understand the above process, you can fully implement a version of the force-oriented algorithm, I just provide a simple version here, each person to achieve the algorithm and the final effect may be completely different</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">source, target</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">source</span> = source;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">target</span> = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CANVAS_WIDTH</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CANVAS_HEIGHT</span> = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForceDirected</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mNodeList</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="keyword">new</span> <span class="title class_">Node</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mEdgeList</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mDxMap</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mDyMap</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ejectFactor</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">condenseFactor</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> edgeCount = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; edgeCount; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> targetId = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * n);</span><br><span class="line">        <span class="keyword">let</span> edge = <span class="keyword">new</span> <span class="title class_">Edge</span>(i, targetId);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mEdgeList</span>.<span class="title function_">push</span>(edge);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">coefficient</span> = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable constant_">CANVAS_WIDTH</span> * <span class="variable constant_">CANVAS_HEIGHT</span> / mNodeList.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> initialSize = <span class="number">40.0</span>;</span><br><span class="line">    <span class="keyword">const</span> initialX = <span class="variable constant_">CANVAS_WIDTH</span> * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">const</span> initialY = <span class="variable constant_">CANVAS_HEIGHT</span> * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">mNodeList</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">x</span> = initialX + initialSize * (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">y</span> = initialY + initialSize * (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Calculate repulsion</span></span><br><span class="line">  <span class="title function_">calculateRepulsive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">mNodeList</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">this</span>.<span class="property">mNodeList</span>.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        distX = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">mNodeList</span>[j].<span class="property">x</span>;</span><br><span class="line">        distY = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">mNodeList</span>[j].<span class="property">y</span>;</span><br><span class="line">        dist = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distX * distX + distY * distY);</span><br><span class="line">        <span class="keyword">if</span> (dist &gt; <span class="number">0</span> &amp;&amp; dist &lt; <span class="number">250</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">mDxMap</span>[i] = distX * <span class="variable language_">this</span>.<span class="property">ejectFactor</span> / <span class="title class_">Math</span>.<span class="title function_">pow</span>(dist, <span class="number">2</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">mDyMap</span>[i] = distY * <span class="variable language_">this</span>.<span class="property">ejectFactor</span> / <span class="title class_">Math</span>.<span class="title function_">pow</span>(dist, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Calculate</span> the attractive force</span><br><span class="line">  <span class="title function_">calculateTraction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> startNode, endNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> e = <span class="number">0</span>; e &lt; mEdgeList.<span class="property">length</span>; e++) &#123;</span><br><span class="line">      <span class="keyword">const</span> eStartID = mEdgeList[e].<span class="property">source</span>;</span><br><span class="line">      <span class="keyword">const</span> eEndID = mEdgeList[e].<span class="property">target</span>;</span><br><span class="line">      startNode = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[eStartID];</span><br><span class="line">      endNode = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[eEndID];</span><br><span class="line">      <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">      distX = startNode.<span class="property">x</span> - endNode.<span class="property">x</span>;</span><br><span class="line">      distY = startNode.<span class="property">y</span> - endNode.<span class="property">y</span>;</span><br><span class="line">      dist = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distX * distX + distY * distY);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eStartID] = <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eStartID] - distX * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eStartID] = <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eStartID] - distY * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eEndID] = <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eEndID] + distX * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eEndID] = <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eEndID] + distY * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateCoordinates</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxt = <span class="number">4</span>, maxty = <span class="number">3</span>; <span class="comment">//Additional coefficients.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; mNodeList.<span class="property">length</span>; v++) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = mNodeList[v];</span><br><span class="line">      <span class="keyword">let</span> dx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(mDxMap[v]);</span><br><span class="line">      <span class="keyword">let</span> dy = <span class="title class_">Math</span>.<span class="title function_">floor</span>(mDyMap[v]);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (dx &lt; -maxt) dx = -maxt;</span><br><span class="line">      <span class="keyword">if</span> (dx &gt; maxt) dx = maxt;</span><br><span class="line">      <span class="keyword">if</span> (dy &lt; -maxty) dy = -maxty;</span><br><span class="line">      <span class="keyword">if</span> (dy &gt; maxty) dy = maxty;</span><br><span class="line">      node.<span class="property">x</span> = node.<span class="property">x</span> + dx &gt;= <span class="variable constant_">CANVAS_WIDTH</span> || node.<span class="property">x</span> + dx &lt;= <span class="number">0</span> ? node.<span class="property">x</span> - dx : node.<span class="property">x</span> + dx;</span><br><span class="line">      node.<span class="property">y</span> = node.<span class="property">y</span> + dy &gt;= <span class="variable constant_">CANVAS_HEIGHT</span> || node.<span class="property">y</span> + dy &lt;= <span class="number">0</span> ? node.<span class="property">y</span> - dy : node.<span class="property">y</span> + dy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">iterateCount</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; iterateCount; i++) &#123;</span><br><span class="line">      <span class="title function_">calculateRepulsive</span>();</span><br><span class="line">      <span class="title function_">calculateTraction</span>();</span><br><span class="line">      <span class="title function_">updateCoordinates</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I need to implement a relational graph in my work. The node layout in the graph needs to use force-oriented layout, so I was interested in the force-oriented algorithm involved, and I went to study it.&lt;/p&gt;
&lt;p&gt;Force-directed graph drawings can be used to describe the relationships between nodes of a graph, distributing nodes to reasonable positions on the canvas, such as describing relationships between enterprises, interpersonal relationships in social networks, etc.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>10 times programmer work method</title>
    <link href="https://sunra.top/en/posts/37760/"/>
    <id>https://sunra.top/en/posts/37760/</id>
    <published>2023-02-11T10:01:01.000Z</published>
    <updated>2023-06-12T11:53:54.935Z</updated>
    
    <content type="html"><![CDATA[<p>The recent chatgpt fire has made many people think that many jobs, including programmers, will be replaced. Other positions I do not know much about, but for the programmer career, I think but in fact this shows that the perception of programmers in dealing with the problem is that programmers deal with a particular independent problem on, or a separate very specific problem on, of course, this and programmer interview questions, after all, programmer interview questions is actually this, interview questions, to say the least, is to do the paper, do the paper how you may have the back of the Internet robot than, and those badly measured seem to be empty words, in an interview, people really do not necessarily perform than the back is all the interview experience post robot superior.</p><p>But in fact this is already forgetting what programmers exist for. The technology that programmers master is called information technology, and its purpose is to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI actually brings to us.</p><span id="more"></span><h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>In fact, it is now considered the fourth industrial revolution.</p><ol><li>The first was the age of steam, when mankind mastered great physical power, and machinery gave mankind the power to transform the physical world more powerfully</li><li>The second is the electrical age, which is a continuation of the first, allowing people to transform the world more quickly, while accelerating the efficiency of people’s material cooperation</li><li>The third is the information age, which is the age that most of us experience. Many people may not understand why information is important, after all, this thing is vague, and the Internet looks like an explosion of information, simply worthless. But in fact, for society, information is the most valuable thing, because, <strong> money is actually information, and even the entire human society exists on the basis of information, as stated in “A Brief History of Humanity”, without a common imagination, the largest human can only be maintained into a small tribe, just like the animals, it is a common imagination, so that humans have a cooperative </strong>. And the role of the market is to exchange information, no one person can handle all the information in human society, even if he has access to all information. Then there are luxury goods, such as jade, diamonds, gold, what makes you say that the price between them is different, is information, his physical nature is not expensive, so there is no need to ask why luxury goods are expensive, there is no reason.</li><li>the fourth is artificial intelligence, which is considered a continuation of the third. Why there is this thing is because of the explosion of information, too much, <strong> individuals can not handle it, the speed of processing information is too low, and many people cooperate will bring new information to deal with, these are the management to do up</strong>. There are many positions that acted as artificial intelligence in the past, such as low-end consulting positions, they actually help integrate information, because there is too much information, such as buying a house, unless you recently want to buy a house, you can not collect every day, to deal with, so it gave birth to people who specialize in processing this information it.</li></ol><p>So if the third industrial revolution is allowing people to collect and process information faster, then the fourth, chatgpt including artificial intelligence in my personal opinion, is giving everyone stronger tools to filter and process information.</p><p>This may not seem like an essential change, still improving the speed of processing information, but don’t forget that any complex problem is caused by simple problems coupled together <strong>quantitative change produces qualitative change. When there are enough problems and enough people involved, it’s not really a problem anymore</strong>.</p><p><strong> complexity is the biggest problem, capital all efforts to improve efficiency, efforts to understand the laws of the world, management science, etc., are designed to reduce complexity, of course, the overall efficiency improvement does not mean individual happiness, because the overall want to be efficient, in which each individual can not have a personality </strong>. Conversely, if a tool can improve the efficiency of enough, is the industrial revolution, the industrial revolution is actually a tool to bring great efficiency improvements.</p><p>All this to say, is to express a point of view, programmers deal with things is actually to reduce the complexity of information, the analysis and processing of information to the machine, the first thing to do the programmer itself to understand this information, and then transformed into a program, so the value of the programmer’s work does not lie mainly in programming, if not to help deal with information, reduce the complexity of the complexity to the machine, the more brilliant technology is useless. After all, it is never the capital that determines the direction of technological development.</p><p>So the focus of improving programmer productivity shouldn’t just be on how to knock out code faster, except of course for the very few people who make tools for programmers.</p><h1 id="10x-programmer-work-method"><a href="#10x-programmer-work-method" class="headerlink" title="10x programmer work method"></a>10x programmer work method</h1><p>The following content comes from the column of the same name in the geek time, here is just a summary of my personal notes, we recommend you to see the column</p><h2 id="Thinking-Framework"><a href="#Thinking-Framework" class="headerlink" title="Thinking Framework"></a>Thinking Framework</h2><p><strong>Essential and Contingent Complexity</strong><br>There is a famous book in the software industry called “The Myth of the Human Moon”, which mentions two very important concepts: Essential Complexity and Accidental Complexity.<br>Simply put, essential complexity is what must be done to solve a problem no matter how it is done, while accidental complexity is what has to be done more because of the improper choice of the way to do things.<br>For example, if you want to make a website, the content of the website is something you have to write anyway, and this is the “essential complexity”. If you are still writing a website in assembly today, it is impossible to be more efficient because you have chosen the wrong tool. This kind of problem caused by choosing the wrong method or tool is the “accidental complexity”.<br><strong>Four principles of best practice</strong></p><ul><li>Begin with the end in mind;</li><li>Task breakdown;</li><li>Communication feedback;</li><li>Automation.</li></ul><p><strong>Thinking Framework:</strong></p><ul><li>Where are we?</li><li>Where are we going?</li><li>How can we get there?</li></ul><p><strong>Linkage between the Four Principles and the Thinking Framework</strong><br>In practice, this thinking framework will help me better understand my work. For example, when a product manager gives me an explanation of a feature to be developed, I usually ask him questions such as</p><ul><li>Why this feature and what value it will bring to users?</li><li>What kind of users will use this feature, in what scenarios will they use it, and how will they use it?</li><li>Are there other means to achieve this? Is it necessary to develop a system?</li><li>After this feature goes live, how do you measure its effectiveness?</li></ul><p>If the product manager can answer these questions well, it means that he has basically thought this job through more clearly, and at this time, I will feel comfortable to understand the details of the follow-up.<br><strong>Begin with the end in mind</strong> means setting your goals at the beginning of your work. <strong>We need to see the real goal, not the work that others have explained to us as the goal</strong>. You can see that this principle is helping us to answer the question in the Thinking Framework, Where are we going? This question.<br><strong>Task decomposition</strong> is to break down the big goal into feasible tasks. The more detailed the work is broken down, the better we can control the work. It is a way to help us answer the question of how can we get there?<br>If the first two principles are to be done before the hands-on analysis, then the last two principles are on the road to the goal, to escort us, because in practice, we can not help but deal with people and machines.<br><strong>Communication Feedback</strong> is about unblocking the channels of interaction with others. On the one hand, we ensure that information can be communicated to reduce work omissions caused by misunderstanding; on the other hand, we must also ensure that we can accurately receive external information so that we do not feel good about ourselves and hinder progress.<br><strong>Automation</strong> is the automation of tedious work to be performed by machines, which is part of our job as programmers. We are good at building automation for others, but we don’t apply it enough for our own work, and this is the part of our job that deserves optimization.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112035/origin-of-ray/1667091571184-7dee658b-ff37-4377-b884-6d18b4d80736.png_averageHue_23d1c4bc_clientId_ua2b346c7-a2c6-4_from_paste_height_457_id_u7555d25b_name_image_jub744.png" alt="image.png"></p><h2 id="Begin-with-the-end-in-mind"><a href="#Begin-with-the-end-in-mind" class="headerlink" title="Begin with the end in mind"></a>Begin with the end in mind</h2><p><strong>Begin with the end in mind: how to make the effort not in vain</strong><br>We face real work scenarios on a daily basis: many of us just hear about a feature that someone has asked to do and start brainstorming everything that comes next. The result is that the effort put in is meaningless.<br>“Beginning with the end in mind” is a counter-intuitive way of thinking that most people do not possess. Therefore, in our daily life, we see many interesting phenomena. For example, when you graduate from college, there are many people who want to go to graduate school. If you ask them why they want to go to graduate school, the reason they get is usually to find a good job. But can studying really help him find a good job? Not necessarily, because finding a job and going to graduate school are not even the same skill tree. If you really want to find a good job, then you should understand what the job requires and how you can acquire the skills required for the job.<br>The example of “designing a login function”, compared with the thinking of “beginning with the end”, you may be unfair for my colleagues, they may also have the thinking of “beginning with the end”, only that Their “end” and I, the customer’s “end” is not the same. This brings us to <strong> do software, is essentially building a “collective imagination”. </strong><br><strong>Imagined Community</strong><br>We do software is actually a community of imagination, the “collective imagination” is the software we want to do, any imagination needs a carrier to show it, we write software is the process of the “collective imagination” to implement the process.<br>Since it is a “collective imagination”, it is difficult to unify our imaginations before the carrier presents them, and they all differ to a greater or lesser extent.<br>So, <strong>everything is created twice: once in the mind, which is the intellectual or first creation (Mental/First Creation), and then only when it is put into practice, which is the actual construction or second creation (Physical/Second Creation)</strong>.<br>Going back to the “designing a login” example, my colleagues were building their own imagination, not ours.<br>One of the biggest differences is that no one will pay for their own imagination. So, <strong> they see the “end” is not the real end, but only an ego “end”, as to see what kind of “end”, it depends on each person’s insight </strong>.<br>For those who do software, we should position the “end” to do a valuable software for users, to bring value to others, their value can be reflected.<br><strong>Planning and Discovery</strong><br>With the “end in mind” mindset, we think about how others will use our platform. We designed it in such a way that users would go to our website, read the documentation, and then follow the documentation step by step. One of the key points is that the documentation, especially the “Getting Started” documentation, is the first step for the user to get in touch with our platform and determines his first impression of our product.<br>So, we decided to start by writing the “Getting Started” document, which depicts how users can use our development platform step by step to complete their first “Hello World” level application. Note that at this point, we hadn’t written a single line of code.<br>Human beings are a group of people who are good at brainstorming. Once someone sees the document, he can already conceive the platform as it already exists, and then give all kinds of feedback: “I think this place can be done like this” “I think that place can be changed “.<br><strong>All of this feedback is real because they have “seen” a real thing. It was this real feedback that allowed us to gradually lock in our target. </strong>After that, we started to write the code.<br>An “end-to-end” approach not only helps us plan our work, but also helps us identify problems in our work.<br>Amazon CTO describes how Amazon develops a product, in short, they use a backwards working approach, the sequence of developing a product is</p><ol><li>writing press releases;</li><li>write FAQ (Frequently Asked Questions);</li><li>writing user documentation;</li><li>write code.</li></ol><p><strong>Chasm of Understanding</strong><br>The topic of our discussion is “Begin with the end in mind”. Our first question is, what exactly is “the end”? In the previous example, the “end” is “finished”, but Li thinks his work is done, but Zhang thinks he is not done.<br>There are many ways to bridge the gap, but there is a best practice called <strong>DoD (Definition of Done)</strong>, and it is easy to see from the name of this concept that it was created to solve the common problem of “completion” in software development.<br>How to make DoD work better.</p><ul><li><strong>DoD is a checklist of check items that are used to check how well our work is done</strong>. A DoD check item is a set of valuable activities that we need to develop a product. For example: writing code, writing test code, passing acceptance by testers, etc. What kind of activities are valuable may be perceived differently by each team. But if your team perceives nothing but functional code as valuable, perhaps this is a sign that your team as a whole is lacking in professionalism and the prospects of working in such a team are not good.</li><li><strong>DoD’s check items should be actually checkable</strong>. You say the code is written, where is the code; you say the test coverage is up to par, how do you see it; you say you have the functionality done, demonstrate it.</li><li><strong>DoD is a mechanism for team members to report back to each other</strong>. Don’t think of “reporting” as complicated. The simplest way to report is to say “this feature is done”. When we have a DoD, there are only two states of doing things, “done” and “not done”. In teamwork, we often hear people say “this thing is 80% done”, sorry, that is called not done, there is no 80% done.</li></ul><p>If you can think outside the box, you will find that DoD thinking is very versatile in your work. For example, when we need to work with other teams to develop an interface, we all know that the first step is to get the interface defined.<br><strong>Once the DoD is established in collaboration, we can even solidify it through a process to get the job done more efficiently and with high quality. </strong>Of course, we inevitably have ad hoc tasks in our work lives that are not complex enough to require a process, but can be solved efficiently with a DoD mindset. For example, I often have people come over and ask me to help with something. Using DoD thinking, I first ask the person exactly what I need to do, confirm the details (equivalent to defining the “checklist”), and then I know how far I can go with the favor. When I ask someone for a favor, I tell them exactly what I need them to do to minimize unnecessary misunderstandings.<br>DoD is a mindset, a way to eliminate as much uncertainty as possible and reach consensus. We do things in a way that “the end is the beginning” and DoD allows us to clearly define the “end” at the beginning.<br>The root cause of all the problems that often arise in human collaboration is that there are too many misunderstandings caused by differences in understanding that waste a lot of time, and DoD is a way to put ideas that are prone to ambiguity into practice.<br><strong>Define the criteria for completion before you do anything. </strong><br><strong>What is the first thing to do when you receive a requirement assignment? </strong><br>In software development, what programmers do is generally defined by requirements. We all know that requirements are an important part of software development, but you may not have thought carefully about the different ways of describing requirements that may affect our programmers’ understanding of them.<br><strong>Because the transmission of information decays, you cannot transmit 100% of what you understand to another person</strong>, and in between, how it is transmitted, i.e. how it is described, will directly determine the percentage of decay.<br>Many companies have a software development model based on a feature list that “defines” what programmers will do, and each group gets the list from the product manager and starts writing the code “as is”. However, often this feature list is just a simple description and you don’t see the big picture.<br>One of the states of many teams is that the programmers know what the feature to be developed is, but many of them can’t answer who is using this feature in what scenario. If you ask him why he is developing this feature, he usually says: it is specified in the feature list.<br><strong> This feature list style of requirements description knocks a complete requirement into pieces. </strong> Only when all the features are developed and dovetailed together is it time to “break the mirror”.<br>Based on this feature list-based requirement description, each group schedules its work with the features as it understands them. So, when your group finishes a feature, that feature may not make it to the line because you have to depend on the work of another group that, not coincidentally, happens to have the related feature development scheduled. This is just the case where there are dependencies between two groups, so imagine how bad the situation would be if multiple groups need to collaborate.<br>As a result, new ways of describing requirements have emerged, of which User Story is one of my favorites. It describes a user’s desired functionality from the user’s point of view, focusing on the path the user needs to take to complete an action in the system. Since it is a “story”, it needs to be a complete scenario that can be told.<br><strong>It’s good if your team uses a user story format for requirements description, but if not, supplementing the feature list with acceptance criteria will greatly improve the efficiency of collaboration between the two parties. </strong><br>The implementation details given in the acceptance criteria should be business, and it is really a waste of time for programmers to think about such issues, and our space to play should be in the technical implementation.<br>Although you are nominally a programmer, when you get a requirement, the thing you have to do is not to write code immediately, but to play the role of a product manager, analyze the requirement and circle the scope of the task. Trust me, analyzing beforehand is definitely much better than taking a written system to your boss and him telling you it’s not what he wants.<br>If there is only one thing you can remember from today, remember this:<strong> Set acceptance criteria before you do any requirements or tasks</strong>.<br><strong>Lean Startup</strong><br>What Lean Startup provides us is a framework for thinking about making products, and most of the products we can come across can be put into this framework.<br>With the framework structure, our life is simple. When a product manager wants to make a new product or a new feature of a product, we can use these concepts of Lean Startup to check whether the product manager has thought it through.<br>For example, <strong> you want to do this product feature, what is the thing that you want to validate? Is there data available to measure the goal he is trying to validate? Is this problem to be solved the most important thing at the moment, and are there other more important problems? </strong><br>If the above questions are answered in the affirmative, is there a simpler solution to validate this goal, and does it have to be achieved by developing a product feature?<br><strong>Expanding the work context</strong><br>Programmers always like to use technology to solve all problems, but many of the problems that make people sleepy are not problems at all. The reason why they can’t find a simpler solution is that many times programmers are limited by their own thinking.<br><strong>The real difference between working in different roles is the difference in context. Problems that are difficult to solve in one local context can even be left unsolved by switching to another context. So no matter how hard a single point is worked on it is only a local optimization, and it is difficult to achieve optimal results. </strong><br>If you want to do your job well, you need to constantly expand the context of your work, learn more about what the logic of other people’s work looks like, and recognize the full lifecycle of software development.<br>Expanding your context can be good for your career, in addition to helping you to be more productive at the moment. As you see a wider world, you get more and more opportunities.<br>If there’s only one thing you remember from today, remember this: <strong>Expand the context of your work and don’t limit yourself to the role of a “programmer”. Don’t limit yourself to the role of a “programmer.” </strong><br><strong>Path to Results</strong><br>With regard to “beginning with the end”, what we have been talking about is seeing results, and results are important. However, it is the path to the result that is more important.<br>In contrast to our work, in most cases, even if the goal is clear, the path is blurred. So, different people have different ways of dealing with it. Some people go where they go and then look at it; others project the path first and see how far they can go. In our process of making software, the differences brought by these two paths have been reflected in the previous short story. One is the first period of its happiness, the later hand to hand; one is the front of thinking ahead, the back of the four stable. I personally respect the latter approach.<br>This idea is not difficult to understand, and we can easily apply it to many aspects of our work. For example:</p><ul><li>before making a product, to deduce how this product will be promoted and to what kind of people by what means;</li><li>Before making technical improvements, consider how going live is a process and prepare a plan for possible problems;</li><li>Before designing a product feature, let’s consider who provides the data and what the complete process looks like.</li></ul><p><strong>Make the results of your work digitally available</strong><br><strong>Iteration 0</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112080/origin-of-ray/1667388901396-30a76c14-7687-4f11-b4ff-3a85fb08be48.png_averageHue_23fefefe_clientId_u6d7a8eac-a85f-4_from_paste_height_772_id_u1823cf52_name_image_fsji0l.png" alt="image.png"><br>Compare this list to the fact that most new projects are under-prepared on one or more items. Even if you are not doing a project from scratch, comparing this list will reveal that the project is lacking in some items and you can make some targeted additions. If there’s only one thing you remember from today, remember this: design your Iteration 0 list and give your project a medical checkup.</p><h2 id="Task-Breakdown"><a href="#Task-Breakdown" class="headerlink" title="Task Breakdown"></a>Task Breakdown</h2><p>Well, sharing these two examples with you is just to warm up and show that human problem solving solutions are pretty much the same. When a complex problem is presented to us, one of the main ideas we have to solve it is to divide and conquer.<br>A big question is one that we all struggle to give answers to, but answering small questions is something we excel at. So, when we learn to break down a problem, it is a big step toward its solution.<br><strong> So, what is the difficulty in solving problems with this mindset? Give an executable decomposition. </strong><br>However, in practice, most people overestimate their executable granularity and underestimate the degree of task decomposition. In other words, if you haven’t done the practice of task decomposition, most of the tasks you decompose will be on the large side of granularity.<br>Only if you can break down the task very small, you can have a clearer understanding of your ability to perform, the real masters are very strong decomposition ability. This difference is equivalent to, the same observation of an item, you use the eyes, while the master is using a microscope. In your opinion, the masters are all micro-operations.<br><strong>The software industry today is all about embracing change, and task decomposition is a prerequisite for us to embrace change. </strong><br><strong>In fact, the main reason why many people can’t write tests well is that they don’t understand task decomposition. </strong><br>Small things have a short feedback cycle, while big things have a long feedback cycle. Small things are easy to do well, while big things are much more difficult. So, with this criterion, it is easier to write good tests at the bottom level. In addition, because there are too many modules involved, any module that is adjusted may break the high-level test, so the high-level test is usually relatively fragile.<br><strong>Test Driven Development TDD</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112098/origin-of-ray/1668079382524-b25c0e83-faac-4d58-89d5-ea262f5837fc.png_averageHue_23fdfbfa_clientId_u4873b967-c53e-4_from_paste_height_652_id_u38c9e075_name_image_kctirp.png" alt="image.png"><br>In test-driven development, refactoring and testing go hand in hand: without testing, you can only refactor in fear; without refactoring, the code is progressively more confusing and the tests become worse and worse to write. Because refactoring and testing work together, it drives you to write better and better code. This is the crudest understanding of the word “drive”.<br><strong>Test Driven Design</strong><br>There are two main reasons why many people resist testing:<br>First, testing requires an “extra” amount of work. I put extra in quotes here because, while you might instinctively think that testing is extra work, it should actually be part of the programmer’s job, as I mentioned in the previous article.<br>Second, many people will feel that there is too much code to test. The reason why these people think that the code is not good to test, which implies an assumption: the code has been written, and then, then write tests to test it.<br>If we reverse the thinking, I have a test, how do I write code that will pass it. <strong>Once you think about the test first, the design thinking changes completely: how do I write my code so that it is testable, that is, we have to write code that has testability. </strong>With this perspective, doesn’t testing become easier?<br>Let’s take one of the most common problems in writing code: static methods<br>The Mock object approach doesn’t work with static anymore. Because it is outside the object system, <strong>static methods cannot be inherited, i.e., they cannot be handled in a series of object-oriented ways</strong>.<br>You don’t have a way to use the Mock object, and you can’t set the corresponding method return value. To get the method to return the corresponding value, you have to open the static method, understand its implementation details, carefully follow the path inside, and carefully set the corresponding parameters before you can get it to give you the expected result. Worse yet, because the method is maintained by someone else, one day he modifies the implementation on a whim and your carefully set parameters fall apart. And to do the setup again you have to reread the code all over again.<br><strong>In this way, your work reverts to its original state. What’s more, it’s not what you should be focusing on, and it doesn’t add to your KPIs.</strong><br>Obviously, you’ve gotten off track. By this point in the discussion you already know that static methods are not test friendly. So, if you want to make your code more testable, <strong>a good solution is to try not to write static methods</strong>.<br>static is a convenient but evil thing. So, limit its use. Unless your static method does not involve any state and has simple behavior, for example, determining whether a string is null. Otherwise, don’t write a static method. As you can see, such static methods are better suited for library functions. So, when we write applications on a daily basis, we try not to use them if we can.<br>What if you encounter a third-party static method in your own code? It’s simple, just wrap the third-party code so that your business code is facing your own wrapper.<br><strong>How to do a good task breakdown</strong><br>Finally, I want to emphasize one thing in particular, all the tasks that are broken out, are independent. That is to say, <strong>for every task done, the code is committable</strong>. Only in this way can we achieve a real sense of small step commits.<br>If there is only one thing you can remember from today, remember this:<strong> Arrange the decomposed tasks in the order of complete implementation of a requirement. </strong><br><strong>Why are your tests not good enough? </strong><br>I have seen many teams that have had a variety of problems with testing, such as</p><ul><li>Inconsistent testing, passing this time but not the next;</li><li>sometimes it is a test to test something very simple, test around a lot of dependencies, build the environment will take a long time;</li><li>For this test to run, it must wait until the other test has finished running; ……</li></ul><p>If you have encountered similar problems in your work, then what you understand by writing tests and what I understand by writing tests may not be the same thing, so where does the problem lie? Why are your tests not good enough? Mainly because these tests are not simple enough.<br><strong> Testing can only be done well if complex tests are broken down into simple tests. </strong><br>Why should testing be simple? There is an interesting logic, I don’t know if you have thought about it, what is the role of testing? Obviously, it is used to ensure the correctness of the code. An ensuing question is, who guarantees the correctness of the tests?<br>Since it is impossible to write a program in a way that guarantees the correctness of a test, we have only one solution: <strong> Write the test simple, so simple that it is easy to understand at a glance and does not need to prove its correctness. </strong>So if you see any test written in a complicated way, it must not be a good test.<br><strong>Test for bad taste</strong><br><strong> Many people always want to do many things in one test, for example, there are several different method calls. May I ask, who exactly is your code testing? </strong> Once this test goes wrong, you need to look at all the several methods involved, which definitely adds complexity to the work.<br>Another area of high incidence of typical “bad taste” is in assertions, and remember, <strong>tests must have assertions</strong>.<br>There is another common “bad taste”: complexity. The most typical scenario is that <strong>when you see all kinds of judgments and loops in the test code, there is basically something wrong with the test</strong>. For example, testing a function, your assertion is written in a bunch of if statements, and the name is that it executes according to the condition. How do you guarantee that the test function is written correctly? Unless you use debugging means, you can not even tell whether your conditional branch is executed to. You may wonder, I have a whole bunch of different data to test, without loops or judgments, what do I do? What you should really be doing is writing several more tests, each covering one scenario.<br><strong>A journey (A-TRIP)</strong><br>How about a test that is considered a good test?<br>Someone made a summary A-TRIP, which is an acronym for five words, are</p><ul><li><strong>Automatic, automated; </strong>leave the tests to be executed by machines as much as possible, the less human involvement the better.</li><li><strong>Thorough, comprehensively; </strong> you should cover as many scenarios as possible with tests. There are two perspectives to understand this. One is to consider various scenarios before writing the code: normal, abnormal, various boundary conditions; the other perspective is that after writing the code, we have to see if the tests covered all the code and all the branches, and this is the scenario where various test coverage tools come into play.</li><li><strong>Repeatable; </strong>There are two perspectives in this: a particular test should be run repeatedly and the result should be the same, which says that each test itself should not depend on any environment that is not under control; there is another perspective that a bunch of tests should be run repeatedly and the result should be the same. This shows that there is no dependency between tests and tests, which is another feature of tests that we will talk about next.</li><li><strong>Independent; </strong>There should not be any dependency between tests and tests. For example, if a test depends on an external database or a third-party service, and Test A writes some values in the database when it runs, and Test B has to use those values in the database, Test B must run after Test A. This is called having a dependency.</li><li><strong>Professional, professional. </strong></li></ul><p><strong>How to cut the demand? </strong><br>If I ask you what this requirement is, for example, most people’s first instinct is still username password login.<br>Basically, the requirement description that pops into your head is the topic (epic), which in agile development some call the master story.<br>If the granularity of your management of requirements is the subject, then so many things can not be talked about. For example, when time is short and I want to cut requirements, you ask the product manager if it’s okay if I don’t do logins, and you wait for the rejection.<br>However, if you say time is tight, can I put the login captcha to the back, or the email address verification function to the back, this kind of suggestion product manager is able to talk to you.<br>The difference lies in the fact that the latter breaks down the requirements.<br><strong>Needs to be broken down</strong><br><strong>“Themes” only help you remember the general direction, but the real use of requirements management relies on further decomposition of requirements</strong>. For this discussion, we’ll continue with the requirements description we’ve already described in the previous column: the user story, which will be the basic unit of our requirements management discussion here.<br><strong>Evaluating user stories has an “ INVEST Principle “</strong>, which is an acronym for six words, namely:</p><ul><li>Independent, standalone. A user story should accomplish a separate function and not depend on other user stories as much as possible, because user stories that depend on each other make it more difficult to manage priorities and estimate workloads. If dependencies do exist, a good practice is to break out the dependent parts and realign them.</li><li>Negotiable. It is a prerequisite for working together. We can’t guarantee that all the details will be 100% implemented in the user story, so the best way to do this is to negotiate. It is also a prerequisite for meeting other judging criteria, as mentioned earlier, a user story is not independent and needs to be broken down, which also needs to be discussed together.</li><li>Valuable, valuable. A user story should have its own value, this item should be the easiest to understand, no value of things not done. But as we have been saying, before doing any of these things, ask where the value lies.</li><li>Estimatable. We will use the results of user story estimation to arrange the subsequent work plan. User stories that cannot be estimated are either because there are many uncertainties or because the requirements are still too large, such stories are not yet in a state where they can be developed and need further analysis by the product manager.</li><li>Small, small. Big steps, no. User stories that can’t be completed in a certain amount of time should only have one result, split. A small user story is easy to schedule, so you can organize your work. testable. Who knows if you’re doing it right if you can’t test it. This is what we have emphasized earlier, that is, the acceptance criteria, you have to know how to be considered work done.</li></ul><p>The first concern is negotiability. As implementers, we have to ask questions. Programmers who are just passive recipients are worth half as much, and as soon as you start asking questions, you’ll find a lot of things that the people who wrote the requirements didn’t think through.<br>Countless times in my career I’ve blocked requirements back, not because I wasn’t cooperative, but because I didn’t want to do something muddled. The reason I can ask questions is partly out of common sense, and partly whether the user stories described here are valuable. User stories, the reason they are stories, are to be told and communicated.<br>There is a more important concern, and one that is at the heart of this module: smallness. Whether it’s independent or estimable, the premise is small. Only when the user story is small enough, our subsequent room for maneuvering will be large. The next important question is, how to be considered small? This brings us to another important aspect of user stories: estimation.<br>Usually, it is the two sides that have a deviation in understanding the requirements, and then the colleague responsible for writing the user story has to step up and help clarify the requirements. So, in general, the estimation process is also a process for everyone to deepen their understanding of the requirements. Estimation has another important role: to discover particularly large user stories. In general, a user story should be completed within one iteration.<br>The real dilemma for many teams is the lack of requirements decomposition in the development process. In this case, the basic unit of requirements management is a theme, and since it is the basic unit, it is an indivisible whole. The team is then tied alive to a huge requirement with no room for maneuvering. If the team can decompose the requirements, the basic unit of requirements will be reduced, and everyone will no longer see the “ironclad” piece, so they can adjust more easily and have more room to move.<br><strong>Demand Management</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112146/origin-of-ray/1669688919178-f48fc53b-2a0f-432e-997b-35ebe0be2265.png_averageHue_23fefefc_clientId_u496d162f-a4d1-4_from_paste_height_653_id_ue8a35552_name_image_qktkqz.png" alt="image.png"><br>Use a few examples from the life of a programmer to help you understand. Let the system can not run properly online failure, it belongs to important and urgent things, do not rush to solve, it will affect the normal operation of the company. The team to upgrade the system transformation is important not urgent: transformation is good, performance is also good, maintainability is also improved; not transformation, a moment can also be used. Some temporary tasks are urgent and unimportant, while the brush of friends is neither urgent nor important.<br>According to the concept of time management, important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible. <strong>The biggest change this matrix brings to our thinking is the realization that things and things are not equivalent. If one does not focus on the important things, in the end they may all become urgent things</strong>.<br>Bringing this idea back to our reality of requirements management, you will find that <strong>in fact, the priority ranking used for the various requirements faced by the team is basically in order of urgency</strong>, but are they really important?<br>If you throw this question at the person who created the requirement, I’m almost certain that the answer they give you is that the requirement they created is important. One possibility is that they can’t tell the difference between important and urgent, just as we are sometimes confused.<br>Imagine two product managers show up in front of you, one tells you that the company wants to expand in a new direction and this feature has to be done, while the other says that the company wants to further profitability and that feature has to be done. To you, they both say the right thing, and both sound pretty important. But the bone-chilling reality is that you put both things next, and what awaits you is an exhausting task that can’t be completed. What can we do at this point? Jump out of this context and into a larger context. <strong> You can’t judge which need is more important, so ask a higher level boss to do so. </strong><br>A few more words of divergence, for people to do the same to constantly expand their own context, which is what we often say to increase knowledge. Many so-called life problems are caused by limited insight. For example, if you feel that there are always people in the company and you than the technology, such as the long-term vision, put yourself on the level of the whole industry to compare. Because you are working for your own career, not a company.<br>After the decomposition of the requirements, the most important thing is, to arrange the priority of the requirements. There are many ways to prioritize, we can take a cue from time management and divide things according to the dimensions of importance and urgency to get four quadrants. We need to focus on the important things as much as possible, rather than the urgent things as a way to prioritize.<br><strong>Breaking down requirements into smaller pieces actually breaks down the context</strong> that was originally unified. If you want to manage requirements effectively, especially to determine how important things are,<strong> one way is to retrieve the lost context</strong>. If we can’t determine the context ourselves, a good way to do that is to <strong>bring in a larger external context</strong>.<br><strong>How to make a product with minimum cost? </strong><br>Our instinct, of course, is to implement everything and then test it, but the world doesn’t stop and wait for us. Time and time again, we have been taught that “hold back” waterfall software development has become an anachronism. So how do we achieve our vision? The only way is to break it down.<br>As we mentioned earlier, Lean Startup is about validating product ideas in the real world through continuous experimentation, and one of the key practices is Minimum Viable Product (MVP), which we will discuss this time.<br>Let’s start with “minimal”. Here the “minimum” refers to the minimum cost. How to call the minimum cost, is not to do what can not do, can simplify things to simplify.<br>First of all, we must be clear about one thing, what we want to do is to verify the feasibility of an idea, not even to develop a software, developing software is just a means of verification.<br>Many programmers have a misconception that it is easy to treat the solution as a problem. We develop software for the purpose of solving problems, wouldn’t it be better if we solved the problem without writing the software.<br>The first step was to verify whether such an idea was feasible. We made a product document, as if we already had the product, and asked our sales colleagues to take the document to the customer to see how the customer reflected on the idea. In the process, we validated the basic idea that the need for IoT transformation of existing devices existed, and when customers saw such a thing, all kinds of ideas and requirements popped up. In addition, we gained an additional benefit, we knew the price range that customers would accept for such a product, which helped the team to price the product appropriately. Having validated the directional ideas, we moved on to the specific product design phase. What we wanted to verify in this phase was whether the product design we gave was acceptable to the users. So, we decided to make the interaction of this product. Thanks to the rapid development of prototyping tools, we made a relatively complete user interface with a prototyping tool and made all kinds of interaction flows. To the user, this is almost complete software.<br>After “minimal”, let’s look at “feasible”. <strong> Feasible is to find a path to give the user a complete experience. People who come from a programmer’s background always know software systems module by module, and the relatively weak aspect is the lack of a complete picture</strong>. But from the perspective of product viability, we need to shift our thinking, not a module to do how complete, and a user path is smooth<br>When time is limited, we need to learn to find a viable path to find a balance between a complete user experience and a complete system.<br>Step by step, we launched a relatively complete P2P platform. In this process, we put new features on line at each stage, and from the user’s visible point of view, what he sees is always a complete platform, the changes of which can only be seen clearly from the perspective of the internal implementer. (For example, the repayment function, although it is one of the complete life cycle, no user will use it in the first month, so the scheduling can be a bit later)<br>To use the concept of minimum viable product well in practice is to find a viable path at minimal cost. <strong>Minimal cost means not doing what can be done and simplifying what can be simplified. </strong><br>Programmers are usually willing to solve problems with their own code, and writing code is usually a very costly solution, which should be the final product solution. The path that works is a complete user experience path, at least in the eyes of the user.<br>We often want to give our clients a complete system, but with limited time, we must learn to break it down.<br>If there’s only one thing you can remember from today, remember this: the most viable way to do good product development is to use MVP.</p><p>In this module, we learned some best practices:<br>Test Pyramid<br>— Best practices for testing portfolios in the industry.<br>— Writing more unit tests is key.<br>Test Driven Development<br>— The rhythm of test-driven development is: red - green - refactoring, refactoring is the key to test-driven development area different from test first.<br>— Some people understand test-driven development as test-driven design, and it brings a change in thinking to the industry to write testable code.<br>Eisenhower Matrix (Eisenhower Matrix)<br>— Divide things according to importance and urgency.<br>— The important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible.<br>Minimum Viable Product<br>— products that are “just right” for our customers’ needs.<br>— in practice, to find a viable path at minimal cost.<br>In addition, I mentioned a number of practices and rubrics that can be applied directly in the workplace:</p><ul><li>Try not to write static methods;</li><li>A master branch development model as a better development branch model;</li><li>Good user stories should conform to the INVEST principles;</li><li>Estimation is a process of deepening understanding of requirements, and good estimation is based on task decomposition;</li><li>A good test should comply with A-TRIP.</li></ul><p>I’ve also taken you through some important ideas to help you better improve your own development work::</p><ul><li>Divide and conquer, a basic human problem-solving tool;</li><li>Software change costs, which increase over time and in development phases;</li><li>Testing frameworks that introduce automated testing as a best practice into the development process, allowing testing actions to be fixed by standardized means;</li><li>Extreme programming is called “extreme” because the idea behind it is to push good practice to its limits;</li><li>The secret of the master programmer’s work is task decomposition, down to the micro-operations that can be performed; arranging development tasks in the order of complete implementation of a requirement.</li></ul><h2 id="Communication-Feedback"><a href="#Communication-Feedback" class="headerlink" title="Communication Feedback"></a>Communication Feedback</h2><p>We work hard to learn all kinds of knowledge in order to better understand how the world works, and communicating feedback is the best way for us to interact with the real world.<br>When several people discuss a problem together, someone else often just starts a conversation, he thinks he has understood the idea of others, and then starts to express his own point of view. The information is incomplete, so how can we talk about decoding. So, development team discussions often involve one person talking about something but getting off topic. We have to accept feedback from the real world if we want to make our work life better, and accepting feedback from the real world requires us to, first, open our own receiver to accept the signal in and let the feedback in, which is the premise of decoding; second, expand our insight and improve the effect of our decoder to better understand what others want to express in the end. Having said that the encoder and decoder may have problems, let’s look at another problem that may cause impact: codec algorithm, that is, how to coordinate the two sides of communication to communicate more effectively.<br>Life is not as good as it should be. A big reason why many people have so many bad things is that we have a lot of unrealistic fantasies about the real world, and good intentions do not drive the world, and this is also true in software development. Although people and people live in one world, their understanding of the world is very different.<br>Improving codecs requires several perspectives: encoders, which allow for more accurate information output; decoders, which reduce signal filtering and improve decoding capabilities; and codec algorithms, which are various “best practices” from the industry that coordinate both sides of the communication.<br>Write code in the language of the business, one is highly readable, the other is able to identify the constant and changeable parts of the code, better practice design patterns, and achieve domain-driven design<br><strong>Lightweight Communication</strong><br>The meeting is to solve the problem, but the real situation is to open the meeting and did not solve many problems, this is a strange contradiction. Thinking back, have you ever attended a meeting that worked particularly well? In my career, where the effect of the meeting is particularly good, basically used to do information synchronization. For example, the leader announces a thing, this kind of meeting will hardly waste time. The message is announced, everyone receives it, and it ends. And what is a bad meeting like? Almost all of those discussions, you say one thing and I say another, each meeting almost without exception, there are a few good at interrupting, this meeting will basically run out of time, the time will be so minute by minute.<br><strong>The first action item to improve the meeting is to reduce the number of people involved in the discussion</strong>. Some people will say, “I have several topics for this discussion, and each topic requires different people to participate, so what you need to do is to find these people separately to discuss specifically, instead of putting everyone together. Compared to the meeting format, face-to-face communication is not possible because of the limited attention span and the number of participants is not too large. Also because the number of participants is relatively small, each person’s input will be a little more.<br><strong>The second action item is, if you want to discuss, find people to communicate face to face. </strong>If there is an issue that needs to be discussed, what I want to do is to find the relevant people to discuss it separately for the topic of concern, and then, I will summarize the results of the discussion and then go back to seek everyone’s opinion. If everyone agrees, I will choose to meet only. This time, <strong> the purpose of the meeting is no longer a discussion, but a synchronization of information </strong>: I am ready to do so, the relevant parties have agreed, to inform everyone, end.<br>Try to communicate in a more visual way.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112178/origin-of-ray/1669902990925-8a11e407-496a-4218-b2ad-770dd8554be1.png_averageHue_23edeeee_clientId_u496d162f-a4d1-4_from_paste_height_1168_id_ud3c871f5_name_image_aakl9n.png" alt="image.png"><br>The birth of continuous integration is the result of people trying to shorten the integration cycle. Why shorten the cycle time? Because we want to get feedback as early as possible to know if the results of our work are working. So, to do continuous integration well, you need to go along with the essence of <strong>continuous integration: getting feedback on your work as soon as possible</strong>.<br>From there, we get to the key point of <strong>continuous integration, you just have to remember the phrase, quick feedback</strong>.<br>Quick feedback, this sentence is divided into two parts, quick and feedback, which leads to two important goals of <strong>continuous integration: how to get feedback quickly, and what kind of feedback is effective</strong>.<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670545816448-b0372507-d4ed-4351-8b1b-278b49a0797a.png#averageHue=%23fdfdfd&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=595&amp;id=u656beaf1&amp;name=image.png&amp;originHeight=1190&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244883&amp;status=done&amp;style=none&amp;taskId=uf9db3aa5-fa20-4d6f-8e7e-2c758351358&amp;title=&amp;width=1142" alt="image.png"><br>What is replay? A replay is a Go term that means that after a player has played a game, he replayed the game to see what went well, what didn’t go well, what could have been played differently or even better, etc. <strong>This way of restoring the process and discussing and analyzing it is a replay</strong>. <strong>This way of restoring the process, discussing and analyzing it, is replay</strong>.<br>Nowadays, the concept of review has been used in many aspects, such as stock market review, business management review, and it has become the most important tool for many people to help individuals and enterprises to continuously improve. The most famous one is Liu Chuanzhi, the founder of Lenovo, who even wrote “review” into the core values of Lenovo. Why is it so useful to review? In my opinion, there is an important reason, lies in the <strong>objectification</strong>. As the saying goes, the authorities are confused, the onlookers are clear. Using our software development as an example, when solving a problem, we focus more on the problem itself and rarely think about how the problem was caused. <strong>When you review the problem, you will stand in a different perspective to think about what caused the problem. At this time, you are no longer the person involved, but have become a bystander. </strong>You observe the process of how that original thing happened, as if someone else was doing it. You go from a subjective perspective to an objective one. Seeing things from someone else’s perspective is objectification.<br>If your team can see the root cause at once is good, but if not, then it is best to ask more why. How to ask, there is a common practice is: 5 Whys (5 Whys). This practice was introduced by Saji Toyoda, the founder of the Toyota Group, and has since become widely known with the Toyota Production System. Why do you need to ask more whys? Because the initial question, you can get only the surface reason, only a few more whys, you can find the root cause. Let me give you an example. The server often returns 504, so we can use the “5 Whys” approach to ask.</p><ol><li>Why is there a 504? Because the server takes longer time to process and timeout.</li><li>Why does it time out? Because the Redis behind the server query is stuck.</li><li>Why is accessing Redis stuck? Because another service updating Redis deleted a large amount of data and then, when it was reinserted, the server blocked.</li><li>Why does it delete data in bulk and reinsert it? Because the update algorithm is not designed properly.</li><li>Why does an ill-designed algorithm go live? Because this design was not reviewed according to the process.</li></ol><p>More close to the user, in order to understand what their code is used to do, but also in the discussion of requirements to better understand which needs are necessary<br>As a programmer, overcoming technical challenges is an important part of our job, so we subconsciously throw ourselves into them as soon as they arise. But is this really the best approach? Not really, <strong>not all problems are technical challenges worth solving. </strong><br>There is an important principle of writing programs called Fail Fast, what does this mean? It means that if you encounter a problem, report the error as early as possible.<br>What are you going to do if the configuration file is missing an important parameter, for example, the maximum number of database connections? Many people will choose to give a default value, which is not a Fail Fast approach. Since it is an important parameter, reporting an error if it is missing is called Fail Fast.<br>In fact, <strong>Fail Fast also smacks of something counter-intuitive; many people are compatible with a lot of weird problems on the grounds of building robust systems, rather than exposing it. Instead, they hide the bugs in the system</strong>. We all know that relying on debug to locate problems is one of the most time-consuming and costly practices. So, don’t be afraid to report problems with the system early.</p><h2 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h2><p>In my opinion, it is important to do what is valuable, not just what is “done”, but also what is valuable in terms of time and cost savings by “not doing”. Two of my colleagues prevented the client from wasting money, so I view this project as a success.<br>For development, the same reasoning is followed. Programmers as a group are so technically competent that it is simply too intuitive to make a technical solution, we just faithfully make one requirement after another and automate “the world”. <strong>But the truth is, too much of the world’s waste is doing things that shouldn’t be done. </strong>In our column, I repeatedly say that we need to ask more questions in order not to do things that we shouldn’t do.<br><strong>Beware of NIH syndrome</strong><br>You can judge from the perspective of the requirements of which work can not be done, but we also want to prevent programmers themselves “add drama”, I will tell you a common problem of technical personnel: NIH syndrome (Not Invented Here Syndrome).<br>For example, this kind of chaos in the field of front-end also appeared, a variety of frameworks, so many front-end programmers cry, really can not learn. Another example is that I once interviewed a programmer who had contact with Go earlier, and he just couldn’t wait to write all the frameworks himself.<br>Having said that, it’s just to illustrate one thing<strong> Before writing code, ask yourself if you really want to do it? Don’t do it if you can, until you have enough reason to do it. </strong> Corresponds to Larry Wall’s statement that you have to be lazy and put a lot of effort into circumventing the energy drain.<br>In general, there are several different environments when building an infrastructure for continuous delivery, as described below.</p><ol><li>Continuous integration environment, continuous integration is a prerequisite for continuous delivery, this process is mainly to perform basic checks and hit a package that can be released.</li><li>Test environment (Test), this environment is often stand-alone, mainly responsible for functional verification, where the tests run are basically acceptance test level, and generally put the unit tests and integration tests and other tests that are executed faster into the continuous integration environment to execute.</li><li>pre-production environment (Staging), this environment is usually the same as the production environment configuration, for example, load balancing, clustering and so on should have, but the number of machines will be less, is mainly responsible for verification of the deployment environment, for example, can be used to find some problems brought about by the concurrency of multiple machines.</li><li>production environment (Production), which is the real online environment.</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112199/origin-of-ray/1670548946042-82f31fce-91f5-49a5-9e76-a8981ec76fe9.png_averageHue_23f8f7f7_clientId_u3a9da171-cf06-4_from_paste_height_551_id_u8619be65_name_image_keqa8u.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112216/origin-of-ray/1670548966490-daed7c11-d337-4904-9721-51cc1be48350.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_737_id_u62feb077_name_image_x6u6xh.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112236/origin-of-ray/1670549025670-7d994107-12f6-412d-9007-62cf3d1a161b.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_734_id_u59f6a867_name_image_xvvqi1.png" alt="image.png"><br>Ensure your code is not too confusing: the SOLID principle</p><p>Today, we start with a segment of the software industry. Party A wants to do an e-commerce website, as party B programmer asked: “What kind do you want to do?” Party A said, “Like Taobao is good.” The programmer asked, “How much are you going to pay?” Party A thought about it, “50,000 yuan is about right!”<br>This is, of course, a flirtation with the customer does not understand the requirements of the paragraph, but have you ever thought, <strong> Why in the A does not seem to be a complex system, you find it difficult? Because what you want is simply not a thing</strong>.<br>In the customer’s opinion, what I want is a website where I can buy things. As long as the product can be online, the user can see and buy it, 50,000 yuan is almost enough.<br>And what you think in your head is, “Taobao ah, that has to be a big technical challenge ah, every year to the ‘double 11’, that will have to consider all kinds of concurrent snapping. Taobao has to have how many programmers, 50,000 you want to do a, the door is not.”</p><p><strong>When doing a new project, it is not necessary to consider too many imaginary needs, the most important thing is to do two things well</strong></p><ol><li><strong>analysis of requirements, good domain division and abstraction (</strong>the higher level of abstraction the more stable, the more detailed things are easy to change<strong>), to ensure the scalability of the architecture </strong></li><li><strong> Minimize the introduction of various frameworks, or to ensure that the framework is pluggable and can be quickly replaced </strong></li></ol><p>Reviewing the above process, you can see that each time the original technology cannot meet the needs as the business volume grows, so it is necessary to solve the problem with new technology. The key point here is: different business volumes.</p><p>A system that serves only a few people, a single machine is enough, and a programmer just starting out can implement this system very well. When the volume of business reaches the point where a single machine cannot resist, it needs to be handled by multiple machines, and this time the problem of distributed systems must be considered, and middleware may have to be introduced appropriately. And when the system becomes to provide services for a huge amount of business, there is no which has been built to help the middleware, need to solve the problem from the bottom themselves. Although these systems seem to be the same in business, in technical terms, a system faces different problems at different stages, because it faces different levels of business. To be more precise, systems of different magnitudes are not a system at all.<br>In the previous example, the real driver for Taobao’s engineers to improve the system is not the technology, but the complexity of the problem due to the escalating business volume. Therefore, assessing the current stage of the system and using the appropriate technology to solve it is the most important thing we should consider.<br><strong>Then remember: use simple techniques to solve problems until they become complex. </strong><br>Maybe you’ll say, what if I make a system that doesn’t have that much business and I still want to improve my skills? The answer is to go to a place where there are good problems. Nowadays, the IT industry offers many opportunities for programmers, and it is not difficult to find a place with good problems, but of course, the prerequisite is that you have the basic ability to solve problems yourself.</p><p><strong>How to do microservices</strong><br>Let’s start by answering the question, why do we want to do microservices? The standard answer to this question is that microservices are small enough, easier to understand in code, easier to test, and simpler to deploy compared to monolithic services (Monolithic). All of this makes sense, but it is the result of doing microservices well.<br>How can we get to this state? There is a key factor, how to divide microservices, that is, how to decompose a huge system in a way. This is the most lacking in many discussions about microservices, and is the fundamental reason why many teams do “microservices” but die hard.<br>Without understanding this, write services that either call each other from service to service, causing the whole system to execute very inefficiently, or you need to spend a lot of effort to solve the data consistency between the various services.<br><strong>In other words, a poorly delineated service awaits the team in an endless quagmire of contingent complexity. Only when microservices are delineated correctly will it be what you have in mind to aspire to. </strong><br><strong> And how should you divide microservices? You need to understand domain-driven design. </strong><br>Domain Driven Design (DDD) is a methodology proposed by Eric Evans for moving from systems analysis to software modeling. What is the problem it is trying to solve? It is to transform business concepts and business rules into concepts and rules in software systems, so as to reduce or hide business complexity and make the system more scalable to cope with complex and changing real business problems.<br><strong>What exactly does DDD say? It pulls your starting point of thinking from a technical perspective to the business. </strong><br>We’ve mentioned this many times in this column. DDD is based on the Ubiquitous Language, which allows business people to speak the same language as programmers. This is something I mentioned in “21 | Who do you write code for? I’ve already mentioned this in 21 | Who do you write code for? Using a universal language is the same as pulling the level of thinking from the code details to the business level. The higher the level of abstraction the more stable it is, and the more detailed it is the more likely something will change.<br>With a common language as the foundation, it is time to move on to the practical aspects of DDD. <strong>DDD is divided into Strategic Design and Tactical Design. </strong>DDD is divided into Strategic Design and Tactical Design.<br>Strategic design is the high-level design that helps us divide the system into different domains and deal with the relationships between them. I gave you the example of “orders” and “users” in the previous section. This is the fundamental solution to the problem, otherwise, no matter how well you write your code, confusion is inevitable. And this way of thinking in terms of business is what DDD strategic design brings to me. Tactical design, usually refers to how to organize different domain objects within a domain at the technical level. As an example, domestic programmers like to use myBatis for data access instead of JPA, the common reason is that JPA has too poor performance in case of association. But the real reason is that the associations are not designed well.<br>After all, what does this have to do with microservices? The real difficulty of microservices is not the technical implementation, but the business segmentation, which happens to be the strong point of Bounded Context in DDD strategic design.<br>Although a common language bridges the gap between business and technology, computers are not good at dealing with ambiguous human language, so a common language must be expressed in a specific context to be clear. Like the “order” example we talked about, the “order” of a transaction is different from the “order” of logistics, and they both have their own contexts, and that context is the bounding Context.<br>It delimits the boundaries of the free use of the common language, and once outside the boundaries, the meaning is not guaranteed. It is because of the boundary that a bounded context can become just a separate deployment unit, and that deployment unit can then become a service.<br><strong> So to do microservices well, the first step should be to identify the bounding context. </strong><br>As you can see, each bounding context should be independent, and there should not be a lot of coupling between each context.<strong> The large number of mutual invocations between microservices that plague many people is itself a pseudo-proposition brought about by a failure to delineate the boundaries, relying on technology to solve business problems</strong>, with half the effort.<br>With a bounded context you can do microservices, right? Wait a minute!<br>In my humble opinion, it is not very easy to draw the boundaries clearly at once. It is much easier to adjust when everyone is in one process. Then, let the different bounding contexts evolve independently on their own first. Wait for it to evolve to the point where it’s worth deploying independently, and then think about microservice splitting. By then, you’ve also learned all sorts of techniques about microservices that should come in handy!</p><p>DDD and lean startup, microservices division is similar, both need to delineate the contextual boundaries, cut with the simplest way to achieve the needs of the moment, and then gradually expand (need good design to ensure scalability) lean startup is actually a continuous validation, verify the validity of the idea, to obtain the validated knowledge (Validated Learning).</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112260/origin-of-ray/1670740142955-ce3186d8-a3eb-425b-bc3f-d4f14ed071fe.png_averageHue_23f6f6f6_clientId_uec93d73b-3fc1-4_from_paste_height_1592_id_u97ed25ef_name_image_jwyysc.png" alt="image.png"></p><p>If you understand the business, you can deduce the basic code structure yourself. But conversely, if you are asked to look at the code and deduce the business from it, it is almost impossible.<br>In fact, every time I learn about a business, I go over in my head how I would do it if I were doing it. This way, I will have a preconception on the whole first, and then correspond to the actual code later, so it will not be so strange. To understand the business, I usually ask someone to tell me what the business does, what kind of problem it solves, what the specific business process is like, and so on.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112273/origin-of-ray/1670740542457-15af9ad4-a2e9-402f-9cc0-e6c51d46db57.png_averageHue_23f2f2f2_clientId_uec93d73b-3fc1-4_from_paste_height_429_id_u4aff8d90_name_image_ihfmvt.png" alt="image.png"><br>To revamp the legacy system, I will give you a few suggestions:</p><ol><li>building a test protection network to ensure consistent functionality of old and new modules;</li><li>divided into small pieces and gradually replaced;</li><li>constructing a good domain model;</li><li>Find the latest understanding of system building in the industry.</li></ol>]]></content>
    
    
    <summary type="html">The technology that programmers master is called information technology and is designed to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI has brought us in the end</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Implementation of AVL Tree</title>
    <link href="https://sunra.top/en/posts/5250/"/>
    <id>https://sunra.top/en/posts/5250/</id>
    <published>2023-02-02T02:56:03.000Z</published>
    <updated>2023-06-12T11:53:54.939Z</updated>
    
    <content type="html"><![CDATA[<p>Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.</p><p>An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.</p><span id="more"></span><h1 id="Fundamentals"><a href="#Fundamentals" class="headerlink" title="Fundamentals"></a>Fundamentals</h1><p>Not much to say about BST, it is relatively simple, that is, the left child of each node is smaller than the root node, the right child is larger than the root node, just pay attention when inserting.</p><p>But there is a problem with BST, for example, inserting 1, 2, 3, 4, 5, 6 in sequence, then we will end up with a tree with only right children, in fact, this BST has degenerated into an ordinary chain table, so we need some way to keep this tree balanced, and the way to keep it balanced is as follows:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1675307019/origin-of-ray/912c7f2fdaf3490689db1a7144775b11_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0_qzoplx.webp" alt=""></p><h1 id="Specific-implementation"><a href="#Specific-implementation" class="headerlink" title="Specific implementation"></a>Specific implementation</h1><h2 id="Four-types-of-imbalance"><a href="#Four-types-of-imbalance" class="headerlink" title="Four types of imbalance"></a>Four types of imbalance</h2><h3 id="Left-right-situation"><a href="#Left-right-situation" class="headerlink" title="Left-right situation"></a>Left-right situation</h3><p>In this case to rotate right and then return the new root node after the rotation, the code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">    node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">    avlNode.<span class="property">right</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Right-right-situation"><a href="#Right-right-situation" class="headerlink" title="Right-right situation"></a>Right-right situation</h3><p>In this case to rotate left and then return the new root node after the rotation, the code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">    node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">    avlNode.<span class="property">left</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Circumstances"><a href="#Circumstances" class="headerlink" title="Circumstances"></a>Circumstances</h3><p>In this case, the left child node of the root node should first be left rotated to become the left-left case, then the root node should be right rotated, and then the new root node should be returned after the rotation, with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Right-left-case"><a href="#Right-left-case" class="headerlink" title="Right-left case"></a>Right-left case</h3><p>In this case, the right child node of the root node should first be rotated right to become the right-right case, then the root node should be rotated left, and then the new root node should be returned after the rotation, with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fix-the-imbalance"><a href="#Fix-the-imbalance" class="headerlink" title="Fix the imbalance"></a>Fix the imbalance</h2><h3 id="Get-the-height-of-the-node"><a href="#Get-the-height-of-the-node" class="headerlink" title="Get the height of the node"></a>Get the height of the node</h3><p>When we do balancing, we need to determine whether we need to balance and what kind of imbalance is the case so that we can choose a different rotation method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// The height of the empty node is 0</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Post-order traversal is used here, because the result of each recursion requires the result of the child node recursion</span></span><br><span class="line">    <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The node height is the greater of the left and right subtree heights plus 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Balance"><a href="#Balance" class="headerlink" title="Balance"></a>Balance</h3><p>Balances the subtree with node as the root node and returns the new root node.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// Empty nodes do not need to be balanced, return empty nodes directly</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the height of the left and right subtrees</span></span><br><span class="line">    <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the height of the left subtree is greater than the height of the right subtree by more than 1, it is unbalanced and there is an implied logic that the left subtree of the left subtree must not be empty</span></span><br><span class="line">    <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Left-left situation, direct right rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Left and right situation, first left rotation then right rotation</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Right-right situation, direct left rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Right-left situation, first right, then left</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the new root node of the balanced subtree</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Basic-operation"><a href="#Basic-operation" class="headerlink" title="Basic operation"></a>Basic operation</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>Inserts a new node and returns the new root node</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The most important thing to understand about this code is that this recursive function returns the root of a new subtree each time a newNode is inserted and balanced on a tree with a node node as the root node.</span></span><br><span class="line">#<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// If the root node is empty, return the newNode directly as the root node</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If the value of the new node is smaller than the current node</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the left node is empty, then the new node will be treated as the left child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the left child node is not empty, then insert a new node into the left subtree and use the root node of the new subtree returned after the insertion as the left subtree</span></span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the right node is empty, then the new node is treated as the right child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">right</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the right child node is not empty, then insert a new node into the right subtree and use the root node of the new subtree returned after the insertion as the right subtree</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Balance after insertion and return the root node of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// Insert the newNode from the root, and reassign the root to ensure the next call is correct</span></span><br><span class="line">    <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h3><p>This is relatively simple, and not much different from BST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Delete the node with the value val from the subtree with node as the root and return the root of the new tree after balancing</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="comment">// If node is null, the tree is empty and does not need to be deleted, and the root node of the new tree is also null</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// If the node to be deleted is found</span></span><br><span class="line">    <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// The node to be deleted has both left and right subtrees</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">            <span class="comment">// Then find the right subtree of the node</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">            <span class="comment">// Then look for the left subtree all the way down the right subtree</span></span><br><span class="line">            <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                p = p.<span class="property">left</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Then replace the result in the current node, because the leftmost child node in the right subtree must be smaller than the rest of the nodes in the right subtree, while raining all the nodes in the left subtree</span></span><br><span class="line">            node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">            <span class="comment">// The previous step just replaces the node value, but the node is still there. We need to remove the node from the right subtree and return the new right subtree as the right subtree of the node after balancing.</span></span><br><span class="line">            <span class="comment">// And remember, at this point we are deleting p.val, not val, because we have already put p.val into node.val, and this p has the property that it has no left child node at least, and the next time the seat will enter the immediately following else logic</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If you don&#x27;t have both left and right subtrees, just replace them and delete the original ones</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">            node = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is smaller than the current one, go to the left subtree and delete it</span></span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is larger than the current one, go to the right subtree and delete it</span></span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the root of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Complete-code-and-tests"><a href="#Complete-code-and-tests" class="headerlink" title="Complete code and tests"></a>Complete code and tests</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AvlTree</span>&#123;</span><br><span class="line">    #<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">        node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">        avlNode.<span class="property">left</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">        node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">        avlNode.<span class="property">right</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">left</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">right</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_inOrder</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> stack = [node];</span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line">        <span class="keyword">while</span>(stack.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (current ! <span class="literal">null</span>) &#123;</span><br><span class="line">                current.<span class="property">right</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">                stack.<span class="title function_">push</span>(current, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                current.<span class="property">left</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = stack.<span class="title function_">pop</span>();</span><br><span class="line">                result.<span class="title function_">push</span>(current.<span class="property">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#_root= <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">_inOrder</span>(<span class="variable language_">this</span>.#_root);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">left</span>))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">                <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                    p = p.<span class="property">left</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> avlTree = <span class="keyword">new</span> <span class="title class_">AvlTree</span>();</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">8</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">9</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">14</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">15</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">16</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">17</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">18</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">19</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">20</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">21</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">11</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">31</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">61</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">111</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">221</span>));</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">20</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">1</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">11</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">221</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">8</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">4</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.&lt;/p&gt;
&lt;p&gt;An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Analysis Patterns - Reusable Object Model</title>
    <link href="https://sunra.top/en/posts/29283/"/>
    <id>https://sunra.top/en/posts/29283/</id>
    <published>2023-01-26T03:10:44.000Z</published>
    <updated>2023-06-12T11:53:54.939Z</updated>
    
    <content type="html"><![CDATA[<p>Recently read the book “Analysis Patterns - Reusable Object Model”, this book is considered an enlightening book on DDD, read the completion or benefit a lot, on the one hand, many points and the usual work of mutual evidence, very inspired, on the other hand, learned some business modeling patterns, this article mainly summarizes the inspiration received This article mainly summarizes the inspiration received and modeling principles, specific modeling approach to give an example to experience it.</p><p>Here are a few of my most rewarding points in brief:</p><ul><li>An important principle of object development is that the structure of the software reflects the structure of the problem.</li><li>The coupling caused by the problem not sorted out clearly is not solved by design patterns, such as logistics and orders, they use the same data table, they need to sense each other, then they must be coupled together in some way, belonging to the essential complexity, this coupling is not decoupled by a good design pattern, even if they are two systems, they have to be together alteration.</li><li>The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of other business areas of knowledge, then in fact, or coupling.</li><li>If there have to be connections between different domains, try to minimize two-way connections, each of which introduces higher complexity into the system.</li><li>In the beginning of the system to minimize the complexity of the system at the same time, keep open to changes, that is, the principle of open and closed, unless very necessary, do not come up to introduce a lot of third-party tools, to consider the introduction cost of these tools, maintenance costs, upgrade costs, and even opportunity costs, and do not come up to engage in any microservices, microservices are best from a mature system after verification of stable business areas Microservices are best incubated from a proven and stable business area in a mature system, otherwise, microservices on pure technical architecture will only increase the overall complexity and risk of the system.</li></ul><span id="more"></span><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>We can simply divide the architecture design into horizontal and vertical divisions. The horizontal division, which addresses the business architecture, is to reduce the essential complexity of business logic and reduce the coupling between business domains, while the vertical architecture addresses non-functional requirements, such as improving stability, throughput rates, etc. through technologies such as caching layers, message queues, etc. </strong></p><p>Our focus in this paper is to address some of the principles of horizontal architectural design.</p><p>The purpose of analysis is to understand the problem, which, in my opinion, can be more than just a process of using use cases to enumerate requirements. Use cases are valuable, if not essential, in the system development process, but capturing such use cases does not mean the end of the analysis. Analysis also involves looking beyond the surface requirements to propose a mental model that reflects the underlying mechanisms of the problem.</p><p>Consider writing software that simulates a billiard game, which can be evaluated by describing the use case of a surface feature: “The player hits the white ball, causing it to move at a certain speed, and then the white ball hits the red ball at a certain angle, causing the red ball to move a certain distance in a certain direction.” One could shoot such an event hundreds of times and measure the speed, angle and distance the ball moved. However, I am afraid that this alone is not enough to write a good simulation program. To write a good program, one needs to look beyond the surface phenomenon to understand the underlying laws of motion, including mass, velocity, momentum, etc.</p><p>Problems like the game of billiards are not rare because the laws of these sports are widely known. Then in many companies, the basic mechanisms at this level are not well understood and need to be diligently discovered.</p><p>There is no right or wrong model, the key is which model is more suitable.</p><p>The choice of model may affect the flexibility and reusability of the developed software. For software like a billiards tournament, you might advocate using the Einstein model because the developed software can be flexible enough to handle atomic collision problems. But this is a more dangerous way to handle it, because <strong>introducing too much flexibility may lead to an overly complex system, which is a bad engineering practice</strong>.</p><p>One of the main reasons for using analysis and design techniques is to involve domain experts, which is essential for conceptual modeling. Effective models can only be built by people who really understand the domain, people who work full time in the field. it skills neither help nor hinder modeling skills.</p><p>Analytical techniques should be independent of each other and software techniques, and ideally, conceptual modeling should be completely independent of software techniques, as in the case of the laws of motion described above. This independence prevents the technology from hindering one’s understanding of the problem, and the resulting model is equally valid for all software technologies.</p><p>Closely related to the conceptual model is the software interface rather than the software implementation.</p><h1 id="Some-modeling-principles"><a href="#Some-modeling-principles" class="headerlink" title="Some modeling principles"></a>Some modeling principles</h1><p>Here is a list of some modeling principles in the book, in fact, these principles and the principles of design patterns are similar, they just focus on different points.</p><ol><li>The modeling should minimize the number of types affected by the part of the model that changes most frequently. (This point is actually related to the design pattern’s separation of parts that are prone to change from those that are not.)</li><li>When defining characteristics for types with supertypes, consider whether it makes sense to place these characteristics on the supertype.</li><li>The model should be explicitly divided into an operational layer and a knowledge layer. For example, the configuration class files or some custom semantics that we can parse are the knowledge layer, which defines the relationships between classes and certain principles of program operation, while the specifics of how to instantiate classes belong to the operational layer.</li><li>When multiple attributes interact through behaviors that can be used in several types, these attributes should be combined into a new basic type. For example, if our system involves a large number of different units of data, we can combine units and values from these data into a quantity type.</li><li>The operational layer contains those concepts that change on a daily basis and whose configuration is bounded by the knowledge layer, which will change much less frequently. The frequency of change here refers to runtime changes.</li><li>If a type has very many similar associations, then abstract these associated objects into a new type and then create a knowledge layer to distinguish them.</li><li>To record the change history of a value, an account should be created for that value.</li><li>When using the account, the following conservation principle should be followed: the recorded items cannot be created or destroyed, and can only be transferred from one place to another, which makes it easier to find and avoid vulnerabilities.</li><li>To understand how a calculation is performed, you can represent the result of the calculation as an object that is used to remember the calculation that created it and the input values that were used.</li><li>When there are multiple equivalent feature sets to choose from, pick the one that the domain expert thinks is most appropriate, and if the domain expert thinks both are very valuable, then extract both and mark one of them as a derivation.</li><li>Marking a feature as derived is only a constraint on the interface and does not affect the underlying data structure.</li><li>If a collection of objects can be created by different conditions, then a combination should be used.</li><li>When treating a process as a feature of a type, an abstract interface should be provided for the process so that its implementation can be easily changed through subclassing. For example, purely hard-coded implementations are one subclass, and various parameter-driven methods are other subclasses.</li><li>When multiple attributes interact in a behavior that may be used in more than one type, the attributes should be combined into a new basic type.</li><li>If the supertype applies to a narrower domain and the subtype applies to a wider domain, then generalization should not be used.</li><li>If the difference between two similar types is usually negligible, then use the abstract supertype. If the difference between the two is important, then do not use the abstract supertype.</li><li>If using an abstract supertype does not cause more work for the client, then this abstract type should be provided.</li><li>When some information may be both obtained directly from a source and calculated from other available data, an abstract interface should be provided with the two ways of obtaining and calculating information from the source as their respective subclasses.</li><li>When faced with several alternative methods, first choose the simplest method and then change to a more complex method as needed.</li><li>Follow the intuition of domain experts when it is difficult to choose among immediate modeling solutions.</li><li>Subtyping should only be used if all the characteristics of the supertype apply to the subtype and it is conceptually reasonable to say that every instance of the subtype is an instance of the supertype.</li><li>When the customer perspective sees that a single transaction can be divided into multiple transactions by the trader, the product and the contract should be separated. The key to the product-contract distinction is that the product represents the client’s intent, while the contract refers to the content of the actual transaction between the counterparty and the principal.</li><li>Do not repeat basic associations that have the same meaning. By following this principle, it is possible to obtain well-defined types of responsibilities.</li><li>There should be consistency in the assignment of responsibilities. Beware of the types who sometimes take responsibility for something and sometimes delegate that responsibility. (This behavior may be correct, but it should always be viewed with suspicion)</li><li>The choice between one-way and two-way associations requires a trade-off between low workload for type development staff (reduced coupling between types) on the one hand, and ease of use for type users on the other.</li><li>If a package only needs to see part of another package, consider splitting the latter package into two mutually visible packages.</li><li>The essence of subtyping is that it can be extended without the supertype knowing anything about it. It is often necessary to design some subtypes to gain experience and then abstract them.</li></ol><h1 id="Two-examples-of-analysis-patterns"><a href="#Two-examples-of-analysis-patterns" class="headerlink" title="Two examples of analysis patterns"></a>Two examples of analysis patterns</h1><p>Each box in the diagram represents a type.</p><h2 id="Responsibility-mode"><a href="#Responsibility-mode" class="headerlink" title="Responsibility mode"></a>Responsibility mode</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220145_aun9wt.jpg" alt=""></p><ul><li>The responsibility type is defined in the knowledge layer, and the responsibility type defines what kind of delegates can be selected by the responsible party which mapping relationship</li><li>Then the operational layer is to instantiate a responsibility, and to follow the specification in the responsibility type of the knowledge layer when re-selecting the participants in a specific responsibility</li><li>Each responsibility may have a time period that corresponds to an activity.</li></ul><h2 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220202_mjg72s.jpg" alt=""></p><ul><li>Each observation has its own participant</li><li>Observations can be subtyped as hypothetical, speculative and valid observations</li><li>Observations can also be subtyped as measurements and categorical observations, where the result of a measurement is a quantity (value + unit) and the result of a categorical observation is the presence or absence of it. As an example, blood pressure is a measurement, while high blood pressure is a categorical observation. Blood pressure, a measurement, can be inferred from blood pressure high, a categorical observation, and once the blood pressure measurement is wrong, this chain of inference should be directly negated by the chain.</li><li>At the knowledge level, observation has its own protocols, that is, how it is carried out</li><li>The type of phenomenon in the knowledge layer, phenomenon and observation concept, specifies what the observation in the operational layer can be, e.g. blood pressure is a type of phenomenon, increase is a phenomenon, and increase in blood pressure is an observation concept, while observation concepts are inferred from each other.</li></ul>]]></content>
    
    
    <summary type="html">The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of knowledge of other business areas, then in fact, or coupling</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>function components and function programming</title>
    <link href="https://sunra.top/en/posts/9244/"/>
    <id>https://sunra.top/en/posts/9244/</id>
    <published>2022-12-10T00:51:27.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>Function programming and function components are a trend in development now. They have been used in the past, but they have not been understood conceptually. This article summarizes the two together and makes a certain comparison.</p><p>Function programming is a programming paradigm, and function components are a product of this paradigm.</p><span id="more"></span><h1 id="Function-programming"><a href="#Function-programming" class="headerlink" title="Function programming"></a>Function programming</h1><h2 id="Programming-paradigm"><a href="#Programming-paradigm" class="headerlink" title="Programming paradigm"></a>Programming paradigm</h2><p>Programming paradigm, programming paradigm, or programming paradigm, refers to a typical programming style in software engineering. Common programming paradigms are: function programming, imperative programming, procedural programming, Object Oriented programming, etc.</p><p>Programming paradigms provide and determine the programmer’s view of program execution. For example, in Object Oriented programming, programmers consider a program to be a series of interacting objects. Due to different methodologies, Object Oriented programming paradigms are further divided into class-based programming and prototype-based programming, while in function programming, a program will be regarded as a stateless sequence of function calculations.</p><blockquote><p>Programming paradigms are different from programming languages, such as Object Oriented languages. It only means that the language provides more convenient encapsulation, inheritance, and polymorphic syntax. It does not mean that you can only write Object Oriented code, nor does it mean that the code you write conforms to Object Oriented paradigm</p></blockquote><p>There are many more programming paradigms, here is the table of contents of Wiki Lingo:</p><ul><li>Imperative<ul><li>Procedural</li><li>Block structure</li><li>Structured</li><li>Modularization</li></ul></li><li>function<ul><li>First class function</li><li>Pure function</li><li>Implicit</li><li>Pattern matching</li><li>Derived formula</li></ul></li><li>Object Oriented<ul><li>based on class</li><li>Based on prototypes</li><li>Contractual</li><li>Face section</li><li>Agent oriented</li></ul></li><li>Array type</li><li>Data flow<ul><li>Synchronous</li><li>Responsive</li><li>Stream processing</li><li>Based on process</li></ul></li></ul><h2 id="Function-programming-is-a-programming-paradigm"><a href="#Function-programming-is-a-programming-paradigm" class="headerlink" title="Function programming is a programming paradigm"></a>Function programming is a programming paradigm</h2><p>Function programming, also known as function programming or functional programming, is a programming paradigm that treats computer operations as function operations and avoids the use of program state and mutable objects.</p><p><strong> In function programming, a function is a first-class object or a first-class function, which means that a function can either be used as an input parameter value for other functions, or return a value from a function </strong>, be modified or assigned to a variable. The lambda calculus is the most important foundation of this paradigm. The function of lambda calculus can accept function as an input parameter and output a return value.</p><p>Compared with imperative programming, function programming emphasizes the result of program execution rather than the process of execution, advocating the use of several simple execution units to make the calculation results gradual, and deriving complex operations layer by layer, rather than designing a complex execution process.</p><h2 id="What-is-function-programming"><a href="#What-is-function-programming" class="headerlink" title="What is function programming"></a>What is function programming</h2><p>These keywords can be extracted from the above definition:</p><ol><li>Avoid state changes</li><li>function as input and output</li><li>Related to λ calculus</li></ol><p>Regarding this definition, if you just want to briefly understand the manifestation of function programming, you can take a look<a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html">阮一峰的这篇博客</a></p><p>If you want a deeper understanding, it is also recommended to read the blog above first. It is very short, but it will help to understand the form of some of the formulas below.</p><p>Avoiding state changes and functions as input and output is easier to understand. What is lambda calculus? To understand lambda calculus, it will pull out Turing complete, Turing machine. Next, I will briefly explain to you.</p><h3 id="What-is-an-expression"><a href="#What-is-an-expression" class="headerlink" title="What is an expression"></a>What is an expression</h3><p>Lambda calculus (lambda-calculus) is a formal system developed from mathematical logic to study how functions are abstracted and defined, how functions are applied, and recursion, using rules for variable binding and substitution. It was first published by mathematician Alonzo Church in the 1930s. As a widely used computational model, the lambda calculus can clearly define what a computable function is, and any computable function can be expressed and evaluated in this form, which can simulate the computational process of a single tape Turing machine. However, the lambda calculus emphasizes the application of transformation rules rather than the specific machines that implement them.</p><p><strong> Lambda calculus is comparable to the most fundamental programming language, it includes a transformation rule (variable replacement) and a way to abstract the definition of function </strong>. Therefore, it is generally recognized as an approach that is closer to software than hardware. It has had a great impact on functional programming languages such as Lisp, ML, and Haskell. In 1936 Church used lambda calculus to give a negation of the Entscheidungsproblem: the proposition that two lambda expressions are equivalent cannot be determined by a “general algorithm”, which is the first problem that undecidability can be proved, even in<a href="https://zh.m.wikipedia.org/zh-cn/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98">停机问题</a>Before.</p><p>The lambda calculus involves constructing lambda terms and performing reduction operations on lambda terms. In the simplest lambda calculus, only the following rules are used to construct lambda terms:</p><div class="table-container"><table><thead><tr><th>Grammar</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>x</td><td>variable</td><td>uses characters or strings to represent parameters or mathematical values or to represent logical values</td></tr><tr><td>(λ x. M)</td><td>abstraction</td><td>A complete function definition (M is a lambda term), in which x in the expression is bound to the variable x.</td></tr><tr><td>(M N)</td><td>Apply</td><td>to function M on the parameter N. M and N are lambda terms.</td></tr></tbody></table></div><p>Generates an expression such as: (λ x.λ y. (λ z. (λ x.zx) (λ y.zy)) (x y)). If the expression is unambiguous, the parentheses can be omitted. For some applications, logical and mathematical constants and related operations may be included.</p><p><strong> The λ calculus is Turing complete, that is, it is a general model that can be used to simulate any Turing machine </strong>. λ is also used in λ expressions and λ terms to represent binding a variable to a function.</p><p>The lambda calculus can be typed or untyped. In typed lambda calculus (which is untyped as described above), the function can only be applied when the parameter types and input types match. Typed lambda calculus is weaker than untyped lambda calculus - the latter is the main part of this entry - because typed lambda operations express less than untyped lambda calculus; at the same time, the former allows more theorems to be proved. For example, in simple typed lambda calculus, the operation can always be stopped, while in untyped lambda calculus this is not necessarily the case (because of the halting problem). One reason there are many typed λ calculus is that they are expected to do more (something that previous typed λ calculus could not do) and at the same time hope to be able to prove more theorems.</p><p>The lambda calculus has many applications in mathematics, philosophy, linguistics, and computer science. It occupies an important position in programming language theory, and function programming implements lambda calculus support. Lambda calculus is also a research hotspot in category theory.</p><p>The lambda formula has three main points:</p><ul><li>Binding relationship. Variables are arbitrary, x, y, and z are fine, it is just a proxy for specific data.</li><li>recursion definition. The λ term recursion definition, M can be a λ term.</li><li>Substitution reduction. The λ term can be applied, and the space-separated representation applies N to M, which can be a λ term.</li></ul><p>By substitution and reduction, we can treat our calculus like a simplification equation.</p><p>For example, we just said ‘ (λ x.λ y. (λ z. (λ x.zx) (λ y.zy)) (x y)) ‘, first ‘ (λ x.zx) ‘ means’ f (x) = zx ‘, then’ (λ x.zx) 3 ‘is’ 3z ‘</p><h3 id="Calculus-Meaning-of-Variables"><a href="#Calculus-Meaning-of-Variables" class="headerlink" title="Calculus: Meaning of Variables"></a>Calculus: Meaning of Variables</h3><p>In λ calculus, our expression has only one parameter, so how can it achieve binary operations on two numbers? For example, addition a + b requires two parameters.</p><p>At this time, we need to treat the function itself as a value. We can save and pass data (or state) by binding a variable to the context and then returning a new function. The bound variable can be referenced from the context when it needs to be actually used.</p><p>For example: ‘λ m.λ n.m + n 5 = λ n.5 + n’, the first function call passes in m = 5, returns a new function, this new function takes a parameter n and returns the result of m + n. The context generated in this case, <strong> is Closure (closure, a common means of state preservation and reference in function programming) </strong>, and we call the variable m the context that is bound to the second function.</p><p>In addition to bound variables, λ calculus also supports free variables, such as this y: ‘λ m.λ n.m + n + y’, where y is a variable that is not bound to the parameter position, called a free variable.</p><p>Bound variables and free variables are two sources of state for a function, one can be substituted and the other cannot. In actual programs, bound variables are usually implemented as local variables or parameters, and free variables are implemented as global variables or environment variables.</p><h3 id="Calculus-Substitution-and-Reduction"><a href="#Calculus-Substitution-and-Reduction" class="headerlink" title="Calculus: Substitution and Reduction"></a>Calculus: Substitution and Reduction</h3><p>The calculus is divided into alpha substitution and beta reduction. We actually covered these two concepts in the previous chapter, so let’s introduce them below.</p><p>Alpha substitution means that the name of the variable is not important, you can write λ m.λ n.m + n, or λ x.λ y.x + y, which represent the same function during the calculation process. That is to say, we only care about the form of the calculation, not the details of what variables to use to implement it. This is convenient for us to modify the variable name without changing the operation result, so as to facilitate simplification operations when the function is more complex. In fact, even the name of the entire lambda calculus is not important, we only need this form of calculation, not the naming of this form.</p><p>Beta reduction means that if you have a function application (function call), then you can substitution the part of the function body that corresponds to the identifier by using parameters (possibly another expression) to replace the identifier. It sounds a bit confusing, but it is actually parameter substitution for a function call. For example: ‘ (λm.λn.m + n) 1 3 = (λn.1 + n) 3 = 1 + 3 = 4’</p><p>You can replace m with 1 and n with 3, then the whole expression can be reduced to 4. This is also in function programming<a href="https://caowenwei.github.io/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/pure-function-rt/">引用透明性</a>The origin of. It should be noted that 1 and 3 here represent the operation values of the expression, which can be replaced by other expressions. For example, replacing 1 with (λ m.λ n.m + n 1 3) requires two reductions</p><h3 id="Lambda-expressions-in-JavaScript-Arrow-functions"><a href="#Lambda-expressions-in-JavaScript-Arrow-functions" class="headerlink" title="Lambda expressions in JavaScript: Arrow functions"></a>Lambda expressions in JavaScript: Arrow functions</h3><p>The ECMAScript 2015 specification introduces arrow functions, which have no this and no arguments. Can only be used as an expression (expression) but not as a statement (statement), the expression produces an arrow function reference, which still has the name and length properties, representing the name of the arrow function and the length of the parameters, respectively. An arrow function is a simple expression, and an arrow function can also be called a lambda function, which is written like a lambda expression.</p><p>Arrow functions can be used to do some simple operations. The following example compares the use of four arrow functions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Const</span> add_1 = (x, y) = &gt; x + y;<span class="comment">//all local variables</span></span><br><span class="line"><span class="title class_">Const</span> add_2 = x = &gt; x + y;<span class="comment">//y is a global variable</span></span><br><span class="line"><span class="title class_">Const</span> add_3 = x = &gt; y = &gt; x + y;<span class="comment">//closure concatenation parameter, curried</span></span><br><span class="line"><span class="title class_">Const</span> add_4 = b = &gt; a = &gt; a + b;<span class="comment">//The parameter name has nothing to do with the expression result</span></span><br></pre></td></tr></table></figure><p>This is the case directly for numbers (primitive data types). If you are doing operations on functions (referring to data types), things become interesting.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn_1</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="title function_">x</span>(y);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn_2</span> = f =&gt; <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(x);</span><br><span class="line"><span class="keyword">const</span> add_1 = (<span class="function"><span class="params">f</span> =&gt;</span> <span class="title function_">f</span>(<span class="number">5</span>))(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> add_2 = (<span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y)(<span class="number">2</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> add_3 = (<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>)(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>fn_x type, indicating that we can use function inside function, when function is passed as data, we can apply function to generate higher-order operations. And x = &gt; y = &gt; x (y) can be understood in two ways, one is that x = &gt; y function passes X = &gt; x (y), and the other is that x passes y = &gt; x (y).</p><p>add_x type indicates that an expression can be implemented in many different paths.</p><h3 id="Function-Programming-Fundamentals-Meta-Currying-and-Point-Free-of-Functions"><a href="#Function-Programming-Fundamentals-Meta-Currying-and-Point-Free-of-Functions" class="headerlink" title="Function Programming Fundamentals: Meta, Currying, and Point-Free of Functions"></a>Function Programming Fundamentals: Meta, Currying, and Point-Free of Functions</h3><p>Going back to JavaScript itself, we need to explore whether function itself can bring us more things. We have many ways to create functions in JavaScript:</p><p>You can use declarations, expressions, arrow functions, new Functions, etc</p><p>Although function has so many definitions, the function keyword declares functions with arguments and this keyword, which makes them look more like object methods than functions.</p><p>Moreover, most functions defined by functions can also be constructed (such as new Array).</p><p>Next we will only study the arrow function, because it is more like a function in the mathematical sense (only performing the calculation process).</p><ul><li>No arguments and this.</li><li>Cannot be constructed new.</li></ul><h4 id="Element-of-function"><a href="#Element-of-function" class="headerlink" title="Element of function"></a>Element of function</h4><p>Regardless of how a function is constructed, the function has two fixed pieces of information that can be obtained.</p><ul><li>name Represents the name of the function to which the current identifier points.</li><li>length Represents the length of the argument list when defining the function to which the current identifier points.</li></ul><p>Mathematically, we define f (x) = x as a unary function and f (x, y) = x + y as a binary function. In JavaScript we can define the element of a function by using its length when defined.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">one</span> = a =&gt; a;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">two</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">three</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br></pre></td></tr></table></figure><p>The significance of defining the meta of a function is that we can classify the function and specify the exact number of parameters a function needs. The meta of a function plays an important role both at compile time (type checking, overloading) and at runtime (exception handling, dynamically generated code).</p><p>If I give you a binary function, you know that you need to pass two parameters. For example, + can be seen as a binary function that takes one parameter on the left and one parameter on the right and returns their sum (or string concatenation).</p><p>In some other languages, + is indeed implemented by abstract classes, such as trait Add in the Rust language.</p><p>But in the λ calculus we saw above, each function has only one element. Why?</p><p>There is only one meta function that is convenient for us to perform algebraic operations. The parameter list of λ calculus is divided in the format of λx.λy.λz, and the return value is generally function. If a binary function is called with only one parameter, it returns an “incomplete call function”. Here, three examples are used to explain “incomplete call”.</p><h4 id="Curried-function-function-element-dimensionality-reduction-technology"><a href="#Curried-function-function-element-dimensionality-reduction-technology" class="headerlink" title="Curried function: function element dimensionality reduction technology"></a>Curried function: function element dimensionality reduction technology</h4><p>Currying a function is a technique for reducing the dimensionality of the elements of a function, a term in honor of the mathematician Alonzo Church we mentioned above.</p><p>Curried function helps us turn a multivariate function into an incomplete call, and use the magic of Closure to turn the function call into a delayed partial function (incomplete function call) call. This is very useful in scenarios such as function composition and to reuse</p><h4 id="Point-Free-No-argument-style-higher-order-combinations-of-functions"><a href="#Point-Free-No-argument-style-higher-order-combinations-of-functions" class="headerlink" title="Point-Free | No-argument style: higher-order combinations of functions"></a>Point-Free | No-argument style: higher-order combinations of functions</h4><p>There is a Point-Free style in function programming. In the Chinese context, point can probably be regarded as a parameter point, corresponding to the function application (Function Apply) in λ calculus, or the function call (Function Call) in JavaScript, so it can be understood that Point-Free refers to a call without parameters.</p><p>Let’s take a daily example of converting binary data to octal data.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strNums = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1110&#x27;</span>];</span><br><span class="line">strNums.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">2</span>)).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>This code runs fine, but in order to handle this transformation, we need to understand the two functions of parseInt (x, 2) and toString (8) (why there are magic numbers 2 and magic numbers 8), and care about the data (function type a - &gt; b) in the shape of each node (care about the flow of data). Is there a way to only care about imported parameters and exported parameters, not about the data flow process?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toBinary</span> = x =&gt; <span class="built_in">parseInt</span>(x,  <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> toString0x =&gt; <span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">...fns</span>) =&gt; <span class="function"><span class="params">x</span> =&gt;</span> fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> <span class="title function_">fn</span>(acc), x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strNums = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1110&#x27;</span>];</span><br><span class="line">strNums.<span class="title function_">map</span>(<span class="title function_">pipe</span>(toBinary, toString0x));</span><br></pre></td></tr></table></figure><h1 id="Functional-component"><a href="#Functional-component" class="headerlink" title="Functional component"></a>Functional component</h1><h2 id="What-is-a-function-component"><a href="#What-is-a-function-component" class="headerlink" title="What is a function component"></a>What is a function component</h2><p>Function-style components are functions are components, and components are functions. Its characteristics are that there is no internal state, no lifecycle hook function, and no this (components that do not need to be instantiated).</p><p>In daily development, we often develop some purely display business components, such as some details page, list interface, etc. They have a common feature:</p><p>As long as you pass in the data, I will display it.</p><p>There is no need for internal state and no need to process it in the lifecycle hook function.</p><p>At this point you can use functional components.</p><h2 id="Why-use-functional-components"><a href="#Why-use-functional-components" class="headerlink" title="Why use functional components?"></a>Why use functional components?</h2><p>Functional components do not require instantiation, are stateless, and have no lifecycle, so rendering performance is better than ordinary components</p><p>Functional component structure is simpler and code structure is clearer</p><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><ol><li><p>Functional components need to specify functional in the declaration component.</p></li><li><p>Function components do not need to be instantiated, so there is no this, this is replaced by the second parameter of the render function.</p></li><li><p>Functional components have no lifecycle hook function, cannot use calculated properties, watch, etc.</p></li><li><p>Function-style components cannot expose events externally through $emit, and calling events can only call external incoming events in a context.listeners.click way.</p></li><li><p>Because function components are not instantiated, when referencing components externally through ref, the actual reference is HTMLElement.</p></li><li><p>The props of a function component can be declared only in part or not at all. All properties not declared in the props will be automatically implicitly parsed as props, while all undeclared properties of ordinary components are parsed into $attrs and automatically mounted to the component root element (which can be disabled by the inheritAttrs attribute).</p></li></ol><p>It has been repeatedly emphasized above that any component that does not require instantiation, is stateless, has no lifecycle, and has no other configuration items except props can be rewritten as a function component.</p><h3 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h3><h4 id="Template-syntax"><a href="#Template-syntax" class="headerlink" title="Template syntax"></a>Template syntax</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">func</span> <span class="attr">text</span>=<span class="string">&quot;aaaaaaaa&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> func <span class="keyword">from</span> <span class="string">&#x27;@/components/func.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    func</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;props.text ? props.text : &#x27;哈哈&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Note that there is no &lt; script &gt;… &lt;/script &gt; section.</p></blockquote><h4 id="JSX-syntax"><a href="#JSX-syntax" class="headerlink" title="JSX syntax"></a>JSX syntax</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Rendering function</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">h</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span> &#123;<span class="type">*</span>&#125; context function component without this, props, slots, etc. all hang on the context</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h, context</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context);</span><br><span class="line">    <span class="keyword">const</span> &#123; props &#125; = context</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">text</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Return</span> &lt; p &gt; haha burp &lt;/p &gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p><a href="https://www.javascriptc.com/vue3js/guide/migration/functional-components.html#%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6">Vue3 函数式组件</a></p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p><a href="https://zh-hans.reactjs.org/docs/components-and-props.html">React 函数式组件</a></p><p>Reference article:</p><p><a href="https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html">https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html</a></p><p><a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html">https://www.ruanyifeng.com/blog/2012/04/functional_programming.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Function programming and function components are a trend in development now. They have been used in the past, but they have not been understood conceptually. This article summarizes the two together and makes a certain comparison.&lt;/p&gt;
&lt;p&gt;Function programming is a programming paradigm, and function components are a product of this paradigm.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Basic concepts of flex layout</title>
    <link href="https://sunra.top/en/posts/40806/"/>
    <id>https://sunra.top/en/posts/40806/</id>
    <published>2022-10-08T02:10:41.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>The traditional solution to layout, based on the box model, relies on the display property + position property + float property. It is very inconvenient for those special layouts, for example, vertical centering is not easy to implement. In 2009, the W3C proposed a new scheme, Flex Layout, which can implement various page layouts simply, completely, and responsively. Currently, it is supported by all browsers, which means that this feature can now be safely used.</p><p>Of course, there is another layout solution is grid layout, but this article will sort out flex first.</p><p>The Flexible Box model, commonly referred to as flexbox, is a one-dimensional layout model. It provides powerful spatial distribution and alignment between the child elements of flexbox. This article gives the main features of flexbox, more details will be explored in other docs.</p><p>We say that a flexbox is a one-dimensional layout because a flexbox can only handle the layout of elements in one dimension at a time, one row or one column. As a contrast, another two-dimensional layout, CSS Grid Layout, can handle both row and column layouts.</p><span id="more"></span><h2 id="The-two-axes-of-the-flexbox"><a href="#The-two-axes-of-the-flexbox" class="headerlink" title="The two axes of the flexbox"></a>The two axes of the flexbox</h2><p>When using a flex layout, the first thing that comes to mind are two axes - the main axis and the cross axis. The main axis is defined by flex-direction, and the other axis is perpendicular to it. All the properties we use with flexbox are related to these two axes, so it is necessary to understand it first at the beginning.</p><h3 id="Spindle"><a href="#Spindle" class="headerlink" title="Spindle"></a>Spindle</h3><p>The spindle is defined by flex-direction and can take 4 values:</p><ul><li>row</li><li>row-reverse</li><li>column</li><li>column-reverse</li></ul><p>If you choose row or row-reverse, your spindle will extend along the inline, that is, horizontally.</p><p>When you choose column or column-reverse, your main axis will extend in the vertical direction - that is, the direction in which the blocks are arranged, that is, the vertical direction.</p><h3 id="Cross-axis"><a href="#Cross-axis" class="headerlink" title="Cross axis"></a>Cross axis</h3><p>The cross axis is perpendicular to the main axis, so if your flex-direction is set to row or row-reverse, the direction of the cross axis is down the column.</p><p>If the main axis direction is set to column or column-reverse, the cross axis is horizontal.</p><h2 id="Start-and-End-Lines"><a href="#Start-and-End-Lines" class="headerlink" title="Start and End Lines"></a>Start and End Lines</h2><p>Another important point to understand is that <strong> flexbox does not provide assumptions about the writing mode of the doc </strong>. In the past, the writing mode of CSS was mainly considered horizontal, from left to right. Modern layouts cover the scope of writing modes, so we no longer assume that a line of text is written from the upper left corner of the doc to the right, and new lines do not have to appear below another line.</p><p>If flex-direction is row and I am writing English, then the start line of the main axis is on the left and the end line is on the right. If I am writing Arabic, the start line of the main axis is on the right and the end line is on the left. In both cases, the start line of the intersection axis is the top of the flex container and the end line is the bottom, because both languages are written horizontally.</p><h2 id="Flex-container"><a href="#Flex-container" class="headerlink" title="Flex container"></a>Flex container</h2><p>The area of the doc that uses flexbox is called a flex container. To create a flex container, we change the display property value of a container to flex or inline-flex. After this step, the immediate child elements in the container will become flex elements. All CSS properties will have an initial value, so all flex elements in the flex container will have the following behavior:</p><p>The elements are arranged in a row (the initial value of the flex-direction property is row).</p><ul><li>Elements start from the start line of the main axis.</li><li>Elements are not stretched in the main dimension, but can be shrunk.</li><li>Elements are stretched to fill the cross axis size.</li><li>The flex-basis property is auto.</li><li>The flex-wrap property is nowrap.</li></ul><p>This will make your elements line up and use their own size as the size on the main axis. If there are too many elements outside the container, they will overflow without wrapping. If some elements are taller than others, the element will be stretched along the intersection axis to fill its size.</p><h2 id="Implement-multi-line-container-with-flex-wrap"><a href="#Implement-multi-line-container-with-flex-wrap" class="headerlink" title="Implement multi-line container with flex-wrap"></a>Implement multi-line container with flex-wrap</h2><p>Although flexbox is a one-dimensional model, it is possible to apply our flex project to multiple rows. <strong> When doing this, you should treat each row as a new flex container </strong>. Any spatial distribution will occur on that row without affecting other rows of that spatial distribution.</p><p>To achieve a multi-line effect, add a property value wrap to the property flex-wrap. Now, if your item is too large to fit in one line, it will wrap.</p><p>For flex containers, the total width of the child elements of the item is greater than the maximum width of the container. Since the value of flex-wrap is set to wrap, the child elements of the item wrap. If you set it to nowrap, which is also the initial value, they will shrink to fit the container because they use the initial Flexbox value that allows for shrinking. If the child elements of the item cannot be shrunk, using nowrap will cause overflow, or the shrunk level is not small enough</p><h2 id="Abbreviated-attribute"><a href="#Abbreviated-attribute" class="headerlink" title="Abbreviated attribute"></a>Abbreviated attribute</h2><p>You can combine two properties flex-direction and flex-wrap into a short property flex-flow. The first specified value is flex-direction and the second specified value is flex-wrap.</p><h2 id="Attributes-on-flex-elements"><a href="#Attributes-on-flex-elements" class="headerlink" title="Attributes on flex elements"></a>Attributes on flex elements</h2><p>To better control flex elements, there are three properties that can be applied to them:</p><ul><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li></ul><p>Before considering the role of these properties, it is necessary to understand the concept of <strong> available space </strong>. The role of these flex properties is to change the behavior of available space in the flex container. At the same time, available space is also important for the alignment behavior of flex elements.</p><p>Assuming that in a 500px container, we have 3 elements that are 100px wide, then these 3 elements need to occupy 300px of width, leaving 200px of free space. By default, flexbox behavior leaves this 200px of space behind the last element.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665368539/origin-of-ray/basics7_vvpola.png" alt=""></p><p>If we expect these elements to automatically expand to fill the remaining space, then we need to control how the available space is allocated among these elements, which is what the flex attribute on the element does.</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>The flex-basis defines the size of that item in terms of the space, and the extra space in the flex container other than the space occupied by the element is available space. The default value of this attribute is auto. At this point, the browser will detect whether the element has a certain size. In the above example, all elements have <strong> set the width to 100px, so the flex-basis value is 100px </strong>.</p><p><strong> If no dimensions are given to the element, the flex-basis value takes the size of the element’s content </strong>. This explains: as long as we declare display: flex to the parent element of the Flex element, all child elements will be lined up and automatically assigned a size to fully display the content of the element.</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>If flex-grow is assigned a positive integer, the flex element will grow in size along the main axis based on flex-basis. This will make the element stretch and occupy the available space on this axis. If other elements are also allowed to stretch, they will each occupy a portion of the available space.</p><p>If we set flex-grow to 1 for all the elements in the example above, the available space in the container will be divided equally between these elements. They will stretch to fill the space in the direction of the container spindle.</p><p>The flex-grow property allocates space proportionally. If the first element has a flex-grow value of 2 and the other elements have a value of 1, the first element will occupy 2/4 (in the above example, 100px out of 200px), and the other two elements will occupy 1/4 each (50px each).</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>The flex-grow property handles the flex element adding space on the spindle, while the flex-shrink property handles the flex element contraction. <strong> If we don’t have enough space in our container to arrange flex elements, we can set the flex-shrink property of the flex element to a positive integer to shrink its space below flex-basis </strong>. As with the flex-grow property, different values can be assigned to control the degree of contraction of the flex element - a larger value can be assigned to the flex-shrink property to a greater degree of contraction than the sibling element assigned a decimal value.</p><p>When calculating the contraction size of the flex element, its minimum size is also taken into account, which means that in fact the flex-shrink property may not behave the same as the flex-grow property.</p><h3 id="Flex-property-abbreviation"><a href="#Flex-property-abbreviation" class="headerlink" title="Flex property abbreviation"></a>Flex property abbreviation</h3><p>You may rarely see the flex-grow, flex-shrink, and flex-basis properties used alone, but mixed in the flex shorthand. The flex shorthand allows you to write three values in this order - flex-grow, flex-shrink, flex-basis.</p><p>In most cases, you can use predefined shorthand forms. You may see this writing frequently in this tutorial, and you can use it in many cases. Here are several predefined values:</p><ul><li>flex: initial</li><li>flex: auto</li><li>flex: none</li><li>flex: <positive-number></li></ul><p>Flex: initial is the initial value for resetting flex elements to Flexbox, which is equivalent to flex: 0 1 auto. Here flex-grow has a value of 0, so flex elements do not exceed their flex-basis size. Flex-shrink has a value of 1, so flex elements can be shrunk to prevent them from overflowing. Flex-basis has a value of auto. Flex element size can be set in the main dimension or automatically obtained based on content.</p><p>Flex: auto is equivalent to flex: 1 1 auto; basically the same as flex: initial above, but in this case the flex element can be stretched or contracted when needed.</p><p>Flex: none sets a flex element to be non-scalable. It is the same as setting flex: 0 0 auto. Elements cannot be stretched or contracted, but elements are laid out as flexbox with flex-basis: auto.</p><p>You often see flex: 1 or flex: 2 in tutorials, etc. It is equivalent to flex: 1 1 0. Elements can be scaled on a flex-basis of 0.</p><h2 id="Alignment-and-space-allocation-of-elements"><a href="#Alignment-and-space-allocation-of-elements" class="headerlink" title="Alignment and space allocation of elements"></a>Alignment and space allocation of elements</h2><p>A key feature of Flexbox is the ability to set the alignment of flex elements along the spindle and cross axes, as well as the allocation of space between them.</p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>The align-items property aligns elements in the cross axis direction.</p><p>The initial value of this attribute is stretch, which is why flex elements are stretched to the height of the tallest element by default. In effect, they are stretched to fill the flex container - the tallest element defines the height of the container.</p><p>You can also set the value of align-items to flex-start, so that flex elements are aligned top of the flex container, flex-end aligns them bottom of the flex container, or center aligns them center. Try it in the example - I gave the height of the flex container so you can see the elements moving through the container.</p><ul><li>stretch</li><li>flex-start</li><li>flex-end</li><li>center</li></ul><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>The justify-content property is used to align elements in the main axis direction, which is the direction set by flex-direction. The initial value is flex-start, and the elements are arranged from the start line of the container. But you can also set the value to flex-end, which is arranged from the end line, or center, which is arranged in the middle.</p><p>You can also set the value to space-between to take out the remaining space after the elements are arranged and distribute it evenly between the elements, so that the spacing between elements is equal. Or use space-around to make the left and right spaces equal for each element.</p><p>The values of the following justify-content attribute:</p><ul><li>stretch</li><li>flex-start</li><li>flex-end</li><li>center</li><li>space-around</li><li>space-between</li></ul><h2 id="Proportion-of-child-elements-on-the-main-axis"><a href="#Proportion-of-child-elements-on-the-main-axis" class="headerlink" title="Proportion of child elements on the main axis"></a>Proportion of child elements on the main axis</h2><p>In HTML, if the CSS of an element is set to display: flex, then the element is a flex container and its child elements are flex items</p><p>We will explore three properties applied to flex child elements that allow us to control the size and scalability of flex child elements in the spindle direction - flex-grow, flex-shrink, and flex-basis. Fully understanding how these properties work with growing and shrinking flex child elements is the key to mastering Flex layout.</p><p>These three properties control the following aspects of a flex child element:</p><ul><li>flex-grow: How much positive free space does this flex child element get?</li><li>flex-shrink: How much negative free space is to be contracted from this flex child element?</li><li>flex-basis: What is the size of the flex child element before it is stretched and contracted?</li></ul><h3 id="Important-concept-of-working-on-the-spindle"><a href="#Important-concept-of-working-on-the-spindle" class="headerlink" title="Important concept of working on the spindle"></a>Important concept of working on the spindle</h3><p>Before considering how the flex property controls the ratio in the spindle direction, there are a few concepts worth exploring. This involves the natural size of flex child elements before any scaling, and the concept of free space</p><h4 id="Size-of-Flex-child-elements"><a href="#Size-of-Flex-child-elements" class="headerlink" title="Size of Flex child elements"></a>Size of Flex child elements</h4><p>In order to figure out how much free space can be laid out in the flex child element, the browser must know how big the item is to start. How does it solve for flex child elements with no width and height applied to absolute units?</p><p>There is a concept in the CSS of min-content and max-content - these keywords are defined in the CSS Intrinsic and Extrinsic Sizing Specification, and can be replaced by a length unit.</p><p>For example, I have two paragraphs that contain a text string. The first paragraph sets the width of the min-content. In browsers that support this keyword you can see that the text has been wrapped as much as possible, as small as possible without overflow. After that is the min-content size of that string. Essentially, the longest word in the string determines the size.</p><p>The second paragraph sets the max-content value, and it is the opposite of min-content. It will become as large as possible, with no automatic line wrapping. If the flex container is too narrow, it will overflow its own box.</p><h4 id="Positive-and-negative-free-space"><a href="#Positive-and-negative-free-space" class="headerlink" title="Positive and negative free space"></a>Positive and negative free space</h4><p>Positive and negative free space literally translates to positive and negative free space. In order for readers to read the following well, the translator will probably say it first.</p><p>There are flex containers and flex child elements in the Flex layout. The flex child elements are contained in the flex container. Then when the sum of the dimensions (sizes) of the flex child elements on the spindle is smaller than the size of the flex container, there will be a flex container. There will be extra space that is not filled, and these spaces are called positive free space. When the sum of the dimensions of the flex child elements on the spindle is greater than the size of the flex container, the space of the flex container is not enough. At this time, the sum of the dimensions of the flex child elements minus the size of the flex container (the size of the overflow of the flex child element) is negative free space, this negative free space plus the size of the flex container is just enough to accommodate the flex child element.</p><p>Before talking about these properties we need to understand the concept of positive free space and negative free space. When a flex container has positive free space, it has more space for displaying flex child elements within the flex container. For example, if I have a 500px wide flex container with a flex-direction property value of row, three 100px wide flex child elements, and I have 200px positive free space, then if I want them (positive free space) to fill the flex container, they can be filled between flex child elements.</p><p>We produce negative free space when the natural size of the flex child elements adds up to more than the available space inside the flex container. If I have a flex container 500px wide like the above, but three flex child elements are each 200px wide, I need a total of 600px wide, so I have 100px negative free space. This can be removed from the flex child element to make it fit into the flex container.</p><h3 id="flex-basis-1"><a href="#flex-basis-1" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>The flex-basis property initializes the size of the flex child element before any space allocation occurs. The initial value of this property is auto. If flex-basis is set to auto, the browser checks whether the main size of the flex child element is set to an absolute value before calculating the initial value of the flex child element. For example, if you have set your flex child element to 200px wide, 200px is the flex-basis of this flex child element.</p><p>If your flex child element is automatically resized, auto will resolve to the size of its content. At this point, the familiar min-content and max-content sizes will become useful, and flexbox will use the max-content size of the flex child element as the flex-basis. The following example can prove this.</p><p>In addition to the keyword auto, you can also use the keyword content as the value of flex-basis. This will cause flex-basis to set the width of even the flex child element based on the content size. This is a new keyword and has less browser support, but you can still achieve the same effect by setting flex-basis: auto and making sure your flex child element has no width set so that it can automatically resize.</p><p>When allocating space, if you want flexbox to completely ignore the size of the flex child element, set the flex-basis to 0. This basically tells flexbox that all space can be preempted and shared proportionally.</p><h3 id="flex-grow-1"><a href="#flex-grow-1" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>The flex-grow property specifies the flex growth value, which determines how much the flex child element grows relative to the rest of the flex child elements in the flex container when positive free space is allocated.</p><p>If all your flex child elements have the same flex-grow property value, then the space will be divided equally among the flex child elements. If you want this to happen, you usually need to use 1 as the value, and if you like you can also set their flex-grow to 88, or 100, or 1.2 - it’s just a ratio. If all flex-grow values are the same, and there is positive free space in the flex container, then it will be equally distributed to all flex child elements</p><h4 id="Combined-flex-grow"><a href="#Combined-flex-grow" class="headerlink" title="Combined flex-grow"></a>Combined flex-grow</h4><p>Some things can get confusing depending on how flex-grow and flex-basis interact. Let’s consider three examples of flex child elements with different content sizes, applied to the following flex rules:</p><p>flex: 1 1 auto;</p><p>In this example, the flex-basis is set to auto and their width is not set, so they are automatically resized. This means that the size of the flexbox depends on the max-content size of all flex child elements. After the flex child elements are laid out, there are some positive free spaces in the flex container, which are displayed in the shaded area of this image:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665370298/origin-of-ray/ratios2_ncusgh.png" alt=""></p><p>We use a flex-basis equal to the content size in order to subtract the available allocation space from the total available space (the width of the flex container), and then the remaining space is evenly distributed among each flex child element. Our larger flex child element ends up being bigger because it starts out with a larger size, even though it has the same amount of allocated space as other flex child elements:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665370341/origin-of-ray/ratios3_ktlfw5.png" alt=""></p><p><strong> If all you really want is three flex child elements of the same size, even if they start out as different sizes </strong>, you should use this:</p><p>flex: 1 1 0;</p><p>What we are saying is that for our space allocation, the flex child element has a size calculation of 0 — all spaces are up for grabs, and all flex child elements have the same flex-grow value, and they (flex child elements) each get equal space allocation. The end result is three scalable flex child elements of equal width.</p><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>Our understanding of how flex-grow and flex-basis work allows us to further control our individual flex child elements by assigning different flex-grow values, sizes. If we set the flex-basis value to 0 then all the space used can be allocated, and we can assign different flex-grow values to each flex child element. In the example below, I will use the following values:</p><p>Set the flex-grow value of the first flex item to 1.</p><ul><li>Set the flex-grow value of the second flex item to 1.</li><li>Set the flex-grow value of the third flex item to 2.</li></ul><p>A flex-basis value of 0 means that the available space will be allocated according to the settings. We need to increase the flex growth value, we need to divide the total size of positive free space in the flex container by the sum of the flex-grow values, in this case 4. We can allocate space based on individual values (flex-basis values) - the first flex child element gets one unit, the second flex child element gets one unit, and the third flex child element gets two units. That is, the third flex child element is twice as large as the first and second flex items.</p><h3 id="Flex-shrink-property"><a href="#Flex-shrink-property" class="headerlink" title="Flex-shrink property"></a>Flex-shrink property</h3><p>The flex-shrink property specifies the flex shrinkage value, which determines the degree of contraction of the flex child element relative to the remaining flex child elements in the flex container when allocating negative free space.</p><p>This property handles situations where the browser calculates flex-basis values for flex child elements and detects that they are too large to fit the flex container. <strong> As long as flex-shrink has a positive value, flex child elements will contract so that they will not overflow the flex container </strong>.</p><p>So flex-grow is used to add free space, and flex-shrink reduces space to fit boxes into their containers without overflowing.</p><p>In one example, my flex container has three flex child elements, and I have set each of them (flex child elements) to be 200px wide and the container (flex container) to be 500px wide. Set flex-shrink to 0 for flex child elements that do not allow contraction such that they overflow the box.</p><p>Change the flex-shrink value to 1 and you will see that each flex child element has a contraction of the same size, and now all flex child elements fit into the box. In doing so they have become smaller than their original width.</p><h4 id="Combining-flex-shrink-and-flex-basis"><a href="#Combining-flex-shrink-and-flex-basis" class="headerlink" title="Combining flex-shrink and flex-basis"></a>Combining flex-shrink and flex-basis</h4><p>You can see that flex-shrink and flex-grow work just as well. But they are not exactly the same for two reasons.</p><p>Even if it is trivial, the definition in the specification is one reason why flex-shrink is not identical to negative space, just as flex-grow is not identical to positive space:</p><blockquote><p>When assigned</p></blockquote><p>The second reason is that flexbox prevents small flex child elements from shrinking to 0 during negative free space elimination. These flex child elements will be laid with the size of min-content - the size they will become after taking advantage of any available automatic line break opportunities.</p><p>In the example below, you will see min-content laid where flex-basis resolves to content size. If you change the width of the flex container - say increase it to 700px wide, and then reduce the width of the flex child element, you will see that the first two flex child elements will wrap, but they will never be smaller than the size of min-content. As the box gets smaller and smaller, the third flex child element then overflows from the space.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &gt; * &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item Three has more content and so has a larger size<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>The key to really understanding how flex child elements work is to understand how many things are involved in influencing flex child elements. Consider the following aspects, which we have discussed in these guides:</p><h4 id="What-settings"><a href="#What-settings" class="headerlink" title="What settings"></a>What settings</h4><ol><li>is lex-basis set to auto, and is the width of this flex child element set? If set, the size of the flex child element will be based on the set width.</li><li>flex-basis set to auto or content (in supported browsers)? If auto, the size of the flex child element is the original size.</li><li>is flex-basis a length unit other than 0? if so this is the size of the flex child element.</li><li>what about setting flex-basis to 0? If so, the size of the flex child element is not considered in the space allocation calculation.</li></ol><h4 id="Do-we-have-space-available"><a href="#Do-we-have-space-available" class="headerlink" title="Do we have space available?"></a>Do we have space available?</h4><p>A flex child element will not grow without positive free space and will not shrink without negative free space.</p><ol><li>If we add up the widths of all the flex child elements (height if working in column direction), is the sum less than the total width (or height) of the flex container? If so, then you have positive free space and flex-grow comes into play.</li><li>If we add up the widths of all the flex child elements (height if working in column direction), is the sum greater than the total width (or height) of the flex container? If so, then you have negative free space and flex-shrink comes into play.</li></ol><h4 id="Other-ways-to-allocate-space"><a href="#Other-ways-to-allocate-space" class="headerlink" title="Other ways to allocate space"></a>Other ways to allocate space</h4><p>If we don’t want to add space to flex child elements, remember that you can use the alignment attribute described in the guide in the flex container to handle free space between or around flex child elements so that you can align flex child elements. The justify-content attribute allocates free space between or around flex child elements. You can also use auto margins on flex child elements to absorb space and create spacing between flex child elements.</p><p>Reference article:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox">flex布局基本概念</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax">控制Flex子元素在主轴上的比例</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The traditional solution to layout, based on the box model, relies on the display property + position property + float property. It is very inconvenient for those special layouts, for example, vertical centering is not easy to implement. In 2009, the W3C proposed a new scheme, Flex Layout, which can implement various page layouts simply, completely, and responsively. Currently, it is supported by all browsers, which means that this feature can now be safely used.&lt;/p&gt;
&lt;p&gt;Of course, there is another layout solution is grid layout, but this article will sort out flex first.&lt;/p&gt;
&lt;p&gt;The Flexible Box model, commonly referred to as flexbox, is a one-dimensional layout model. It provides powerful spatial distribution and alignment between the child elements of flexbox. This article gives the main features of flexbox, more details will be explored in other docs.&lt;/p&gt;
&lt;p&gt;We say that a flexbox is a one-dimensional layout because a flexbox can only handle the layout of elements in one dimension at a time, one row or one column. As a contrast, another two-dimensional layout, CSS Grid Layout, can handle both row and column layouts.&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://sunra.top/en/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>BFC and Box Model for CSS</title>
    <link href="https://sunra.top/en/posts/41258/"/>
    <id>https://sunra.top/en/posts/41258/</id>
    <published>2022-09-25T11:53:52.000Z</published>
    <updated>2023-06-12T11:53:54.939Z</updated>
    
    <content type="html"><![CDATA[<p>CSS has been used for a long time, but some of the usage is always vague, and there is no systematic and logical understanding. This time, let’s first clarify the BFC and box model in CSS, as well as some related positioning and layout properties.</p><span id="more"></span><h2 id="How-are-elements-laid-out-by-default"><a href="#How-are-elements-laid-out-by-default" class="headerlink" title="How are elements laid out by default?"></a>How are elements laid out by default?</h2><p>First, take the content of the element and place it in a separate element box, then add padding, borders, and margins around it - the box model we saw earlier.</p><p>By default, the content width of a block-level element is 100% of its parent element, and its height is the same as its content height. The height and width of the internal connection element is the same as the content. You cannot set the height and width of the internal connection element —- they are just placed in the content of the block-level element. If you want to control the size of the internal connection element, you need to set display: block; for the element (alternatively, display: inline-block; inline-block mixes the properties of inline and block.)</p><p>This explains the layout of individual elements, but how do elements affect each other? Normal layout flow (mentioned in the introduction to layout) is a system for placing and organizing elements within the browser viewport. By default, block-level elements are placed in <em> block flow direction </em> based on the writing order of their parent elements (default: horizontal-tb) —- each block-level element will have another line below the previous element, they will be separated by a set margin. In English, or other horizontal, top-down modes, block-level elements are organized vertically.</p><p>Internal connection elements behave differently - they don’t start on another line; they are arranged on the same line as other internal connection elements, adjacent text content (or wrapped) as long as there is enough space within the width of their parent block-level element. If there is not enough space, overflowing text or elements will move to a new line.</p><p>If two adjacent elements have margins set and the two margins overlap, the larger setting is preserved and the smaller one disappears - this is called margin overlay, and we’ve seen it before.</p><h2 id="What-is-BFC"><a href="#What-is-BFC" class="headerlink" title="What is BFC?"></a>What is BFC?</h2><p>Block Formatting Context (BFC) is part of the visual CSS rendering of a web page, the area where the layout process of block-level boxes takes place, and the area where floating elements interact with other elements.</p><p>The following methods will create a block formatting context:</p><ul><li>root element (&lt; html &gt;)</li><li>Floating element (float value is not none)<br>Absolutely positioned elements (position value is absolute or fixed)</li><li>Inline block element (display value is inline-block)</li><li>Table cells (display value is table-cell, default value for HTML table cells)</li><li>Table title (display value is table-caption, default value for HTML table title)</li><li>Anonymous table cell elements (display values are table, table-row, table-row-group, table-header-group, table-footer-group (default values for HTML table, tr, tbody, thead, tfoot, respectively) or inline-table)</li><li>block element with overflow value not visible, clip</li><li>display elements with flow-root value<br>Elements containing values of layout, content or paint<br>Elastic elements (immediate children of a flex or inline-flex element with a display value) if they are not themselves flex, grid, or table containers<br>Grid elements (immediate children of a display value grid or inline-grid element) if they are not themselves flex, grid, or table containers</li><li>Multi-column containers (column-count or column-width (en-US) values are not auto, including column-count is 1)<br>An element with a column-span value of all always creates a new BFC, even if the element is not wrapped in a multi-column container (specification changes, Chrome bugs)</li></ul><p>The formatting context affects the layout. Usually, instead of changing the layout, we will create a new BFC for positioning and clearing floats, because it will:</p><ul><li>Includes internal float</li><li>Exclude external float</li><li>Block, margins overlap</li></ul><h3 id="Contains-internal-float"><a href="#Contains-internal-float" class="headerlink" title="Contains internal float"></a>Contains internal float</h3><p>Make the floating content equal to the surrounding content. That is, the display of the inner floating element will not exceed the BFC.</p><p>To better understand BFC, let’s take a look at the following.</p><p>In the example below, we float the &lt; div &gt; element and give it a border effect. The content in &lt; div &gt; is now floating around the floating element. Since the floating element is taller than the element next to it, the border of &lt; div &gt; is pierced through the float. As we explained in In Flow and Out of Flow, floats are separated from the doc flow, so the background and border of &lt; div &gt; only contain the content, not the float.</p><p>Use’overflow: auto ‘</p><p>When creating a BFC containing floating elements, it is common practice to set the parent element to overflow: auto or other values other than the default overflow: visible. ‘&lt; div &gt;’ elements become mini-layouts in layouts, and any child elements are included.</p><p>Use overflow to create a new BFC because the overflow attribute tells the browser how to handle overflow content. If you use it just to create a BFC, you may encounter unwanted scrollbars or shadows, which need to be noted. Also, for subsequent developers, it may not be clear why overflow was used at the time, so it’s best to add some comments to explain why.</p><p>Use’display: flow-root’</p><p>The value of a new display property that can create a BFC without side effects. Use’display: flow-root ‘in the parent block to create a new BFC.</p><p>After setting the display: flow-root attribute to the &lt; div &gt; element, all content in the &lt; div &gt; element will participate in BFC, and floating content will not overflow from the bottom.</p><p>As you can see from the name of the flow-root value, it creates a new context for streaming layout, similar to the browser root (html) element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow:auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the <span class="tag">&lt;<span class="name">code</span>&gt;</span>overflow:auto<span class="tag">&lt;/<span class="name">code</span>&gt;</span> container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the <span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span> container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exclude-external-float"><a href="#Exclude-external-float" class="headerlink" title="Exclude external float"></a>Exclude external float</h3><p>In the following example, we use display: flow-root and float to implement a two-column layout, because the BFC established in the normal doc flow must not overlap the outer margins of any float in the block formatting context where the element itself is located.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>Try to resize this outer float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>Try to resize this outer float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/* required by resize:both */</span></span><br><span class="line">  <span class="attribute">resize</span>: both;</span><br><span class="line">  <span class="attribute">margin-right</span>:<span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">75</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Avoid-overlapping-margins"><a href="#Avoid-overlapping-margins" class="headerlink" title="Avoid overlapping margins"></a>Avoid overlapping margins</h3><p>The top and bottom margins of a block are sometimes combined (folded) into a single margin that is the maximum of the single margin (or only one of them if they are equal), a behavior called margin folding.</p><p>There are three situations where margins overlap:</p><h4 id="Between-adjacent-elements-in-the-same-layer"><a href="#Between-adjacent-elements-in-the-same-layer" class="headerlink" title="Between adjacent elements in the same layer"></a>Between adjacent elements in the same layer</h4><p>The margins overlap between two adjacent elements, unless the latter element plus clear-fix clears the float.</p><h4 id="No-content-separates-parent-elements-from-descendant-elements"><a href="#No-content-separates-parent-elements-from-descendant-elements" class="headerlink" title="No content separates parent elements from descendant elements"></a>No content separates parent elements from descendant elements</h4><p>The parent block element and its inner descendant block appear if there is no border, padding, inline content, or creating a block-level formatting context or clearing floats to separate the upper boundary margin-top of a block-level element from the upper boundary margin-top of one or more descendant block-level elements within it; or no border, inline margin, inline content, height, minimum height min-height or max-height to separate the lower boundary margin-bottom of a block-level element from the lower boundary margin-bottom of one or more descendant block elements within it The outer element boundary overlaps, and the overlapping part will eventually overflow outside the parent block element.</p><h4 id="Empty-block-level-element"><a href="#Empty-block-level-element" class="headerlink" title="Empty block-level element"></a>Empty block-level element</h4><p>Boundary folding also occurs when the boundary margin-top on a block element is directly attached to the boundary margin-bottom under the element. This happens when a block element has no border, padding, height, minimum height min-height, maximum height max-height, content set to inline or clear-fix at all.</p><h2 id="Box-model"><a href="#Box-model" class="headerlink" title="Box model"></a>Box model</h2><p>There are two types of “boxes” that we use extensively in CSS - block boxes and internal connection boxes. These two types of boxes exhibit different behaviors in terms of page flow and the relationships between elements:</p><p>A box defined as a block exhibits the following behavior:</p><ul><li>The box expands in the inline direction and takes up all the free space of the parent container in that direction, meaning in most cases the box will be as wide as the parent container</li><li>Every box wraps</li><li>width and height properties can come into play</li><li>Padding, margin and border will “push” other elements from around the current box</li></ul><p>If a box is displayed as inline, its behavior is as follows:</p><ul><li>The box does not generate a line break.</li><li>The width and height properties will not work.<br>Vertical padding, margins, and borders are applied but do not push other inlined boxes away.</li><li>Horizontal padding, margins, and borders are applied and push other inlined boxes away.</li></ul><blockquote><p>It’s best to also explain the interior here</p><p>Similarly, the box model has an internal display type, which determines how the elements inside the box are laid out. By default, it is in accordance with</p><p>However, we can use similar</p></blockquote><h3 id="What-is-CSS-Box"><a href="#What-is-CSS-Box" class="headerlink" title="What is CSS Box?"></a>What is CSS Box?</h3><p>The full CSS box model applies to block-level boxes, with internal connection boxes using only the parts defined in the box model. The model defines each part of the box - margin, border, padding, and content - which together create the content we see on the page. To add some extra complexity, there is a standard and alternative (IE) box model.</p><p>Parts of the box model<br>To form a block-level box in CSS, you need:</p><p>Content box: This area is used to display content, and the size can be set by setting width and height.<br>Padding box: A blank area enclosed outside the content area; the size is set by the padding related properties.<br>Border box: Border box package content and padding. The size is set by border related properties.<br>Margin box: This is the outermost area, the empty space between the box and other elements. The size is set by the margin-related property.</p><p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model/box-model.png" alt=""></p><h4 id="Standard-box-model"><a href="#Standard-box-model" class="headerlink" title="Standard box model"></a>Standard box model</h4><p>In the standard model, if you set the width and height of the box, you actually set the content box. The padding and border plus the set width and height together determine the size of the entire box. See the image below.</p><p>Assuming width, height, margin, border, and padding are defined:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If using the standard model width = 410px (350 + 25 + 25 + 5 + 5), height = 210px (150 + 25 + 25 + 5 + 5), padding plus border plus content box.</p><h4 id="Alternative-box-model"><a href="#Alternative-box-model" class="headerlink" title="Alternative box model"></a>Alternative box model</h4><p>You might think that adding borders and padding to the size of the box is troublesome, and you’re right! For this reason, css has an alternative box model. Using this model, all widths are visible widths, so the content width is that width minus the border and padding. Use the same style as above to get (width = 350px, height = 150px).</p><p>The default browser will use the standard model. If you need to use an alternative model, you can do so by setting box-sizing: border-box for it. This will tell the browser to use border-box to define the area, thus setting the size you want.</p><p>If you want all elements to use the alternative mode, and it’s really common, set box-sizing on the &lt; html &gt; element, and then set all elements to inherit that property, as in the example below. For a deeper understanding, see the CSS Tricks article on box-sizing.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In simple terms, the box model refers to how the width and height of this element are calculated, while BFC refers to the fact that its internal and external elements will not affect each other</p><p>Whether it is a box model can be set directly through css attributes, such as the display attribute, but whether it is BFC is not a css attribute, but in some cases, a context will be created.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CSS has been used for a long time, but some of the usage is always vague, and there is no systematic and logical understanding. This time, let’s first clarify the BFC and box model in CSS, as well as some related positioning and layout properties.&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://sunra.top/en/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>Performance and Principle of Universal Lock</title>
    <link href="https://sunra.top/en/posts/24195/"/>
    <id>https://sunra.top/en/posts/24195/</id>
    <published>2022-09-05T13:20:57.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>This time, we must deal with what a universal lock is. This article will slowly unfold in the following order:</p><ul><li>Through a simple practical example to tell you, the performance of the universal lock in our lives</li><li>What’s a universal lock?</li><li>Talk about the principle of the existence of universal locks from the perspective of matrices and geometry respectively</li><li>What’s wrong with the universal lock?</li><li>Why quaternions can solve the gimbal lock problem</li></ul><span id="more"></span><h2 id="A-small-experiment-with-a-universal-lock"><a href="#A-small-experiment-with-a-universal-lock" class="headerlink" title="A small experiment with a universal lock"></a>A small experiment with a universal lock</h2><p>You can take out the phone and put it on the desktop, the screen is facing up, the longest side of the phone is perpendicular to the edge of the table is set to the X axis, and the short side of the screen is parallel to the edge of the table is set to the Y axis, so the vector between the vertical and the screen is the Z axis.</p><p>We first rotate 30 degrees clockwise around the X axis of the longest side of the mobile phone. At this time, the mobile phone leaves the desktop, leaving a long side in contact with the table; then rotate 90 degrees around the Y axis, that is, the short side of the mobile phone, so that the screen surface is connected with the table. Parallel to the edge;</p><p>Rotate 10 degrees around the Z axis, that is, rotate 10 degrees around the axis perpendicular to the screen. At this time, you will find that when you rotate around the Z axis, the screen surface is still parallel to the edge of the table, and the angle of rotation around the Z axis at this time gives The effect of the phone’s posture is the same as the initial rotation of the X axis on the phone’s posture - both make the final posture of the phone (which has been rotated 90 degrees around the Y axis so that the phone screen is parallel to the edge of the table) rotate a certain angle around an axis perpendicular to the screen.</p><p>In other words, you can not rotate around the Z axis, by adjusting the number of angles around the X axis, so that the final attitude of the phone and the rotation process to achieve the same attitude.</p><p>In other words, once the Y axis is rotated 90 degrees, your phone plane must be in a plane perpendicular to the desktop, no matter how you start with the X axis and end with the Z axis</p><h2 id="Universal-lock"><a href="#Universal-lock" class="headerlink" title="Universal lock"></a>Universal lock</h2><h3 id="What-is-Euler’s-Angle"><a href="#What-is-Euler’s-Angle" class="headerlink" title="What is Euler’s Angle?"></a>What is Euler’s Angle?</h3><p>Let’s briefly talk about Euler’s angle before explaining the universal lock.</p><p>We have actually been exposed to this concept, but it may not be that deep, so let’s explain it here:</p><p>Leonhard Euler used Euler angles to describe the orientation of a rigid body in three-dimensional Euclidean space. For any reference frame, the orientation of a rigid body is set by rotating three Euler angles from the reference frame in order. Therefore, the orientation of a rigid body can be determined by three basic rotation matrices. In other words, any rotation matrix about the rotation of a rigid body is composed of three basic rotation matrices.</p><p>It is divided into static Euler angles and dynamic Euler angles</p><p>Static: that is, the rotation around the three axes of the world coordinate system, because the coordinate axis remains static during the rotation of the object, it is called static.</p><p>2, dynamic: that is, the rotation around the three axes of the object coordinate system, because the coordinate axis of the object rotates with the object to do the same rotation, so called dynamic.</p><h4 id="Static-euler-angle"><a href="#Static-euler-angle" class="headerlink" title="Static euler angle"></a>Static euler angle</h4><p>For a reference system in three-dimensional space, the orientation of any coordinate system can be represented by three Euler angles. The reference system (fixed system), also known as the laboratory reference system, is stationary. The coordinate system (solid connection) is fixed to the rigid body and rotates as the rigid body rotates.</p><p>See the figure on the right. Set the xyz-axis as the reference axis of the reference system. The intersection of the xy-plane and the XY-plane is called the intersection line, represented by the English letter (N). The Euler angle of zxz cis can be statically defined as follows:</p><ul><li>$\ alpha $ (precession angle) is the angle between the x-axis and the intersection line,</li><li>$\ beta $ (nutation angle) is the angle between the z-axis and the Z-axis,</li><li>$\ gamma $ (spin angle) is the angle between the intersection line and the X-axis.</li></ul><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1662679829/origin-of-ray/400px-Eulerangles.svg_ylhxly.png" alt=""></p><p>There is no convention for the order and marking of the included angles, the designation of the two axes of the included angles. Scientists have never reached a consensus on this. Whenever Euler angles are used, we must clearly indicate the order of the included angles and specify their reference axes.</p><p>Range of angular values</p><p>The $\ alpha $and $\ gamma $values range from 0 to 2 dollars\ pi $radians, respectively.<br>$\ Beta $values are radians from 0 to $\ pi $.<br>The set of Euler angles is unique for each orientation; with some exceptions:</p><p>If the $\ alpha $of two Euler angles, one is 0 and the other is 2 dollars\ pi $, and $\ beta $and $\ gamma $are equal, then both Euler angles describe the same orientation.<br>If $\ gamma $of two Euler angles, one is 0 and the other is 2 dollars\ pi $, and $\ alpha $and $\ beta $are equal, then both Euler angles describe the same orientation.</p><p>As mentioned earlier, the rotation matrix {\ displaystyle [\ mathbf {R}]} [\ mathbf {R}] with the rigid body orientation is composed of three basic rotation matrices:</p><script type="math/tex; mode=display">[R] = \begin{bmatrix}cos\gamma & sin\gamma & 0 \\-sin\gamma & cos\gamma & 0 \\0 & 0 & 1\end{bmatrix}\begin{bmatrix}1 & 0 & 0 \\0 & cos\beta & sin\beta \\0 & -sin\beta & cos\beta\end{bmatrix}\begin{bmatrix}cos\alpha & sin\alpha & 0 \\-sin\alpha & cos\alpha & 0 \\0 & 0 & 1\end{bmatrix}</script><p>The result after the calculation is</p><script type="math/tex; mode=display">[R] = \begin{bmatrix}cos\alpha cos\gamma - cos\beta sin\alpha sin\gamma & sin\alpha cos\gamma + cos\beta cos\alpha sin\gamma & sin\beta sin\gamma \\-cos\alpha sin\gamma - cos\beta sin\alpha cos\gamma & -sin\alpha sin\gamma + cos\beta cos\alpha cos\gamma & sin\beta cos\gamma \\sin\beta sin\alpha & -sin\beta cos\alpha & cos\beta\end{bmatrix}</script><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1662682019/origin-of-ray/200px-Euler2a_wnywfm.gif" alt=""></p><p>In classical mechanics, the Euler angle is often set by the zxz conformism; according to the axis name of the second axis of rotation, it is abbreviated as the x-conformism. In addition, there are other types of Euler angle groups. In a legal Euler angle group, the only restriction is that any two consecutive rotations must rotate around different axes of rotation. Therefore, there are a total of 12 conformities. For example, y-conformism, where the second axis of rotation is the y-axis, is commonly used in quantum mechanics, nuclear physics, and particle physics. In addition, there is a compliance, xyz conformism, used in aerospace engineering; see Tate-Bryan angle</p><h4 id="Dynamic-Euler-angle"><a href="#Dynamic-Euler-angle" class="headerlink" title="Dynamic Euler angle"></a>Dynamic Euler angle</h4><p>We can also give two different dynamic definitions of the Euler angle. One is a composite of three rotations around a coordinate axis fixed to a rigid body; the other is a composite of three rotations around a laboratory reference axis. With a dynamic definition, we can better understand the physical meaning and application of the Euler angle. Note in particular that, in the following description, the XYZ coordinate axis is the rotating rigid body coordinate axis; while the xyz coordinate axis is the stationary laboratory reference axis.</p><ul><li><p>Rotation around the XYZ axis: Initially, the axes of both coordinate systems xyz and XYZ overlap. Start by rotating $\ alpha $, the angular value, around the Z-axis. Then, rotate $\ beta $, the angular value, around the X-axis. Finally, rotate $\ gamma $, the angular value around the Z-axis.</p></li><li><p>Rotation around the xyz axis: Initially, the axes of both coordinate systems xyz and XYZ overlap. Start by rotating $\ gamma $, the angular value, around the z-axis. Then, rotate $\ beta $, the angular value, around the x-axis. Finally, rotate $\ alpha $, the angular value around the z-axis.</p></li></ul><h3 id="What-is-a-universal-lock"><a href="#What-is-a-universal-lock" class="headerlink" title="What is a universal lock?"></a>What is a universal lock?</h3><p>We learned that Euler angles are divided into static Euler angles and dynamic Euler angles, and we continue to see what a universal lock is.</p><p>First of all, let’s intuitively understand that the universal lock will only produce dynamic Euler angles, that is, we are rotating around the object’s own coordinate system, and the object’s own coordinate system will rotate with the object’s rotation</p><p>Through the above small experiment, we can roughly understand that the reason why the universal lock is called a lock is because the rotation effect of two dimensions overlaps, that is, the effect of rotating the X axis and can be achieved by rotating the Z axis, that is, a dimension is lost.</p><p>But from another point of view, this “lock” does not mean that there are any angles that cannot be expressed in the Euler angle, but that if your nutation angle is 90 degrees, your final result must be in a certain plane.</p><h2 id="The-principle-of-universal-lock"><a href="#The-principle-of-universal-lock" class="headerlink" title="The principle of universal lock"></a>The principle of universal lock</h2><h3 id="Geometrically-speaking"><a href="#Geometrically-speaking" class="headerlink" title="Geometrically speaking"></a>Geometrically speaking</h3><p>Let’s first take a look at the following graph. The coordinate system of this graph is both the object’s own coordinate axis, which is exactly the same as the world coordinate axis</p><p><img src="https://i.loli.net/2021/07/21/w1UdLtmlVe6Wrzb.png" alt=""></p><p>Let’s first rotate an angle around the x-axis, no problem</p><p>Then we rotate 90 degrees around the y-axis</p><p><img src="https://i.loli.net/2021/07/21/s9PDTQXd25x3cpA.png" alt=""></p><p>At this time, you can see that the z-axis has changed to the direction of the original x-axis. At this time, we rotate around the z-axis of the object itself. From the perspective of world coordinates, it is about the x-axis of the initial state, that is to say, from the perspective of the world coordinate system. From the point of view, it seems that the x-axis of the object itself at the beginning and the z-axis of the object itself at the end are the same, both of which revolve around the x-axis of the world coordinate system</p><h3 id="From-a-matrix-perspective"><a href="#From-a-matrix-perspective" class="headerlink" title="From a matrix perspective"></a>From a matrix perspective</h3><p>The above process is written in the form of matrix multiplication</p><script type="math/tex; mode=display">R_z(\beta)R_y(\pi / 2)R_x(\alpha) \\=\begin{bmatrix}cos\beta & -sin\beta & 0 \\sin\beta & cos\beta & 0 \\0 & 0 & 1\end{bmatrix}\begin{bmatrix}0 & 0 & 1 \\0 & 1 & 0 \\-1 & 0 & 0\end{bmatrix}\begin{bmatrix}1 & 0 & 0 \\0 & cos\alpha & -sin\alpha \\0 & sin\alpha & cos\alpha\end{bmatrix} \\= \begin{bmatrix}0 & sin(\alpha - \beta) & cos(\alpha - \beta) \\0 & con(\alpha - \beta) & -sin(\alpha - \beta) \\-1 & 0 & 0\end{bmatrix} \\= \begin{bmatrix}0 & 0 & 1 \\0 & 1 & 0 \\-1 & 0 & 0\end{bmatrix}\begin{bmatrix}1 & 0 & 0 \\0 & cos(\alpha - \beta) & -sin(\alpha - \beta) \\0 & sin(\alpha - \beta) & cos(\alpha - \beta)\end{bmatrix} \\= R_y(\pi /2)R_x(\alpha - \beta)</script><h2 id="What’s-wrong-with-the-universal-lock"><a href="#What’s-wrong-with-the-universal-lock" class="headerlink" title="What’s wrong with the universal lock?"></a>What’s wrong with the universal lock?</h2><p>So the universal lock is not unable to represent a certain angular displacement in space, but because of the universal lock, the interpolation between angular displacements becomes unsatisfactory, so how does the universal lock appear? When the second rotation angle is 90 degrees, use the first axis to coincide with the third axis. This is to understand this phenomenon from a perceptual point of view. If it is explained from a mathematical point of view, it is cos90 = 0</p><p>In the game, when the animation of the character rotation is triggered, the character will make a series of continuous rotation transformations, each transformation must be represented by a set of Euler angles, but it is impossible to store the Euler angles of each orientation. So the animator defines a series of key frames, specifying the position of the character at the key frame (described by a set of Euler angles), and then the computer interpolates these sets of Euler angles according to time t to obtain a series of Euler angles.</p><p>If the pitch is not ± 90 °, there will be no gimbal lock phenomenon, and a series of Euler angles after interpolation can completely characterize the desired character rotation path.</p><p>If the pitch of a key frame, that is, the rotation around the second axis, is 90 °, you will encounter a universal lock. At this time, the phone can only rotate in a horizontal plane. If the animator specifies that the orientation of the next key frame phone is not standing up, there is no problem, but what happens if the orientation of the next key frame specified is standing up?</p><h2 id="How-Quaternions-Solve-the-Gimbal-Lock-Problem"><a href="#How-Quaternions-Solve-the-Gimbal-Lock-Problem" class="headerlink" title="How Quaternions Solve the Gimbal Lock Problem"></a>How Quaternions Solve the Gimbal Lock Problem</h2><h3 id="Another-way-to-represent-rotation"><a href="#Another-way-to-represent-rotation" class="headerlink" title="Another way to represent rotation"></a>Another way to represent rotation</h3><p>To solve this problem, we must first ask about the preconditions for the existence of the universal lock problem</p><p>As we know earlier, the universal lock only exists in the dynamic Euler angle, that is, the object rotates around its own coordinate system, and its own coordinate system rotates with its own rotation. If it rotates 90 degrees on the Y axis, the X axis and Z axis The rotation effect of the axis is the same.</p><p>Think about it from another angle, in fact, under the Euler angle, the same effect has many different rotation methods, resulting in uncertain interpolation results.</p><p>To solve this problem, in fact, the idea is relatively clear, that is, change the representation method, in this new representation method, the representation method of a rotation result is unique.</p><p>We give another way to express the direction: Axis-Angle-Representation. Unlike Euler angles, this time we don’t take multiple rotations to find the target direction, but instead find an axis of rotation, and we can get the target direction by rotating around this axis only once. Will this not cause problems? Yes, the proof method is very simple. First, take the origin of the target matrix as one angle and the three axes as three sides to establish a cube. The diagonal line passing through the origin in this cube is the rotation axis we are looking for. Obviously, this rotation axis is unique, and We know that rotating around a rotation axis at different angles corresponds to different directions (angle range (−π,π]）， It can be seen that the axis angle representation of any position in space is unique.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1662779292/origin-of-ray/v2-1b11f12de3b8309a49e7ea32a990d266_1440w_oublus.png" alt=""></p><p>Generally speaking, when the axis angle represents the direction, there will be 4 parameters, 3 of which are used to represent the rotation axis and 1 is used to represent the rotation angle size. And if we specify the vector representing the rotation axis as the unit vector e, considering that $\ sqrt {x ^ 2 + y ^ 2 + z ^ 2} = 1 $, we can represent the rotation axis with two parameters, which only requires three parameters in total, as many as the Euler angle. The rotation vector can be represented by $\ bm {\ theta} =\ theta e $, where e is the unit vector. Incidentally, the rotation axis here is called the Euler axis, and the rotation vector here is called the Euler vector.</p><p>It is also possible to consider the existence of this thing from the perspective of a matrix. There is a concept of a similar matrix and an eigenvector in the matrix. You can understand that this rotation axis is the eigenvector of the Euler angle rotation matrix, and the rotation angle of this rotation axis is the eigenvector. eigenvalue.</p><h3 id="So-what-is-a-quaternion"><a href="#So-what-is-a-quaternion" class="headerlink" title="So what is a quaternion?"></a>So what is a quaternion?</h3><p>A quaternion is a complex number, and more specifically a quaternion is a complex number with three imaginary parts. q = w + ix + jy + kz, where i, j, k are imaginary units, such that i ^ 2 = j ^ 2 = k ^ 2 = -1, and i (j) j = k, j (i) i = k.</p><script type="math/tex; mode=display">q_1 + q_2 = (w_1 + w_2) + i(x_1 + x_2) + j(y_1 + y_2) + k(z_1 +z_2) = [(w_1 + 2_2), (v_1 +v_2)] \\q_1 \cdot q_2 = (w_1w_2 -x_1x_2 - y_1y_2 - z_1z_2) + \\i(w_1x_2 + x_1w_2 + y_1z_2 - z1y_2) + \\j(w_1y_2 - x_1z_2 + y_1w_2 + z_1x_2) + \\k(w_1z_2 + x_1y_2 -y_zx_2 + z_1w_2)</script><p>When using quaternions to compute axis angle representations, we usually write them in vector representation, $q =\ begin {bmatrix}<br>W,\ vec v\ end {bmatrix} =\ begin {bmatrix} w,\ begin {pmatrix} x\ y\ z\ end {pmatrix}\ end {bmatrix} $, for clarity of expression and convenience of calculation, we position the value of w, x, y, z $w ^ 2 + x ^ 2 + y ^ 2 + z ^ 2 = 1 $, and call it the unit quaternion. In the direction calculation, the role of w, x, y, z in the unit quaternion is behind us Will explain. At this point, complex multiplication can be expressed in vector form</p><script type="math/tex; mode=display">q_1 \cdot q_2 = [w_1, \vec v_1] \cdot [w_2, \vec v_2] = [w_1w_2 - v_1v_2, v1 \times v_2 + w_1 \cdot v_2 + w_2 \cdot v_1]</script><p>Or we can also write it in the form of a matrix</p><script type="math/tex; mode=display">q_1q_2 = \begin{bmatrix}w_1 & -x_1 & -y_1 & -z_1 \\x_1 & w_1 & -z_1 & y_1 \\y_1 & z_1 & w_1 & -x_1 \\z_1 & -y_1 & x_1 & w_1\end{bmatrix}\begin{bmatrix}w_2 \\ x_2 \\ y_2 \\ z_2\end{bmatrix}</script><p>Observing this formula, we found that multiplying two quaternions requires storing 8 units of data, that is, each quaternion involved in the operation only needs to store 4 units of data. In addition, several special properties are required:</p><ul><li>Quaternion modulo $| | q | | =\ sqrt {w ^ 2 + x ^ 2 + y ^ 2 + z ^ 2} $</li><li>Quaternion conjugate $q ^{<em>} = ( w + ix + jy + kz )^{</em>}= w -ix -jy - kz $</li><li>共轭的向量形式 $q^{<em>} = (\begin{bmatrix} w &amp; \vec v \end{bmatrix})^{</em>} = \begin{bmatrix} w &amp; -\vec v \end{bmatrix}$</li><li>The reciprocal of a quaternion: $q\ cdot q ^ {-1} = q ^ {-1}\ cdot q = 1 $</li><li>Conjugate vs. reciprocal: $q ^ {-1} =\ frac {q ^ <em>} {w ^ 2 + x ^ 2 + y ^ 2 + z ^ 2} $, for the unit quaternion $q ^{</em>} = q {-1} $</li><li>Quaternion operations satisfy both associative and distributive laws, but do not conform to commutative laws</li></ul><p>Knowing the above calculation rules, we can use quaternions to calculate the direction transformation process. Remember that we said before that when calculating quaternions, we use vector form to represent them and ensure that they are unit quaternions? In fact, the vector form of quaternions can be further rewritten as polar representation, $q =\ | q\ | [cos\ theta,\ vec {n}\ cdot sin\ theta] $</p><p>Where q represents the modulus of the quaternion, the modulus of the quaternion is 1, and θ is the half-angle size of the rotation process represented by the quaternion, that is to say, (2θ) is the size of the rotation angle, and n is the rotation axis. The unit vector of direction. With this representation, the quaternion can represent the direction transformation expressed by any axis angle.</p><p>First, the original vector coordinates are expressed as quaternions $p = [0,\ vec {v}] $, and the rotation angle and rotation axis are expressed as unit quaternions q. The rotated vector coordinates can be obtained by $r = q\ cdot p\ cdot q ^ * $or $r = q\ cdot p\ cdot q ^ {-1} $</p><h3 id="Why-introduce-quaternions"><a href="#Why-introduce-quaternions" class="headerlink" title="Why introduce quaternions"></a>Why introduce quaternions</h3><p>In fact, the quaternion is to better represent the rotation axis and rotation angle. The rotation axis is a three-dimensional vector, and the rotation angle becomes four-dimensional. The quaternion was chosen to represent it because of some of its characteristics.</p><p>Let’s start with the conclusion that quaternion references are used to reduce the amount of computation and storage space occupied during computation.</p><p>However, if you are careful enough, you can definitely find that the process of multiplying two quaternions is actually a process of multiplying a 4 × 4 matrix with a 4 × 1 matrix, and the quaternion calculation requires two times this process, including 24 addition operations and 32 multiplication operations. In contrast, the matrix transformation of the Euler angle only needs to perform a multiplication operation of a 3 × 3 matrix and a 3 × 1 matrix, including 6 addition operations and 9 multiplication operations. The amount of operation is obviously Quaternion is larger. If you are more careful, you can find that although there is a 4 × 4 matrix involved in the operation of the quaternion operation, each item in the matrix is the unit data that has been stored, and the 3 × 3 matrix involved in the Euler angle operation It is obtained by 16 multiplication operations, 4 addition operations and 4 sign change operations performed on the stored unit data, but even with these operations, the matrix operation only needs 25 multiplication operations, 10 addition operations and 4 sign change operations. In terms of computational volume, the matrix operation of Euler angles still has an advantage over the quaternion operation. But in fact, the kinematics problems we generally encounter rarely have to do only one direction conversion. For complex systems and robots, we often face a large number of direction conversion processes. In this case, the advantages of quaternions are reflected. We consider quaternion operations for multiple transformations (using the polar coordinate form above):</p><script type="math/tex; mode=display">R = R_1R_2...R_{n-1}R_n = (q_n(q_{n-1}...(q_2(q_1pq^*_1)q^*_2)...q^*_{n-1})q^*_n)</script><p>Use associative law:</p><script type="math/tex; mode=display">R = R_1R_2...R_{n-1}R_n = (q_nq_{n-1}...q_2q_1)p(q^*_1q^*_2...q^*_{n-1}q^*_n）</script><p>Consider the conjugate $ (q_aq_b) ^ <em>= q ^ </em> _bq ^ * _a $</p><script type="math/tex; mode=display">R = R_1R_2...R_{n-1}R_n = (q_nq_{n-1}...q_2q_1)p(q_nq_{n-1}...q_2q_1)^*</script><p>It can be found that the operation result in the parentheses on the left and right sides of the original vector ppp is a pair of conjugated quaternions, that is to say, the 3-th easy sign operation can be used instead of the n-th quaternion multiplication operation, which greatly reduces the amount of calculation.</p><blockquote><p>Finally, a little mention, a lot of people who come into contact with this problem are game developers, may have doubts, why there is no such problem in Unity’s Inspector, you can try this, Unity’s Inspector in the Y axis is not the object’s own coordinate axis rotation, so the universal lock is solved, the specific Unity internal rotation is how to see the next blog, here to dig a pit</p></blockquote><p>Reference article:</p><p><a href="https://zh.m.wikipedia.org/zh/%E6%AC%A7%E6%8B%89%E8%A7%92">欧拉角 - 维基百科</a></p><p><a href="https://www.zhihu.com/question/47736315/answer/236808639">如何通俗地解释欧拉角？之后为何要引入四元数？</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This time, we must deal with what a universal lock is. This article will slowly unfold in the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Through a simple practical example to tell you, the performance of the universal lock in our lives&lt;/li&gt;
&lt;li&gt;What’s a universal lock?&lt;/li&gt;
&lt;li&gt;Talk about the principle of the existence of universal locks from the perspective of matrices and geometry respectively&lt;/li&gt;
&lt;li&gt;What’s wrong with the universal lock?&lt;/li&gt;
&lt;li&gt;Why quaternions can solve the gimbal lock problem&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/en/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>Git command line scam notes</title>
    <link href="https://sunra.top/en/posts/29980/"/>
    <id>https://sunra.top/en/posts/29980/</id>
    <published>2022-07-30T00:55:06.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, when writing the packaging pipeline, I encountered several pits, so I will summarize it a little.</p><span id="more"></span><h2 id="Pull-the-remote-branch-if-it-exists-checkout-if-it-does-not-exist"><a href="#Pull-the-remote-branch-if-it-exists-checkout-if-it-does-not-exist" class="headerlink" title="Pull the remote branch if it exists, checkout if it does not exist"></a>Pull the remote branch if it exists, checkout if it does not exist</h2><h3 id="Full-pull"><a href="#Full-pull" class="headerlink" title="Full pull"></a>Full pull</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master &quot;$&#123;git_url&#125;&quot; &quot;$&#123;products_dir&#125;&quot;</span><br><span class="line">cd &quot;$&#123;products_dir&#125;&quot;</span><br><span class="line">if [ &quot;git branch -r | grep $branch&quot; ]; then</span><br><span class="line">    echo &quot;remote $branch existed&quot;</span><br><span class="line">    git fetch --all</span><br><span class="line">    git switch -c &quot;$&#123;branch&#125;&quot; &quot;origin/$&#123;branch&#125;&quot;</span><br><span class="line">    git pull </span><br><span class="line">else</span><br><span class="line">    echo &quot;remote $branch not existed&quot;</span><br><span class="line">    git checkout -b &quot;$&#123;branch&#125;&quot;</span><br><span class="line">    git push -u origin &quot;$&#123;branch&#125;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>There is a pit to pay attention to here, that is, you can’t use ‘—depth = 1’ when <strong> cloning, which will cause you to only pull the information of the branch in the future, and the other branches do not exist no matter how you check </strong></p><p>But sometimes our repository is too big, we just want to pull the latest version of the branch how to do, can pull success pull success, pull success to create a branch.</p><p>Sounds fine, but if you write directly, you will encounter problems, that is, the entire shell will exit if you fail to pull it, so is there a way to solve it?</p><p>There are two ways, the first is to use subprocess.</p><h3 id="Subprocess-tries-to-pull-the-latest-version"><a href="#Subprocess-tries-to-pull-the-latest-version" class="headerlink" title="Subprocess tries to pull the latest version"></a>Subprocess tries to pull the latest version</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git_clone=$(git clone--depth=1 -b &quot;$&#123;branch&#125;&quot; &quot;$&#123;git_url&#125;&quot; &quot;$&#123;products_dir&#125;&quot;)</span><br><span class="line">if [[ -z $&#123;git_clone&#125; ]]; then</span><br><span class="line">    echo &quot;remote $branch existed&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;remote $branch not existed&quot;</span><br><span class="line">    git clone--depth=1 -b master &quot;$&#123;git_url&#125;&quot; &quot;$&#123;products_dir&#125;&quot;</span><br><span class="line">    git checkout -b &quot;$&#123;branch&#125;&quot;</span><br><span class="line">    git push -u origin &quot;$&#123;branch&#125;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>The internal part of ‘$ () ‘ is subprocess, its failure will not cause the shell to exit directly</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><strong> Set set + e in the head of the shell to ensure that the failure does not exit, and then check whether the command is executed successfully </strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line">set +e</span><br><span class="line"></span><br><span class="line">git clone --depth=1 -b &quot;$branch&quot; &quot;$&#123;git_url&#125;&quot; &quot;$&#123;products_dir&#125;&quot;</span><br><span class="line">if [[ $? -ne 0 ]]; then</span><br><span class="line">    echo &quot;remote $branch not existed&quot;</span><br><span class="line">    git clone--depth=1 -b master &quot;$&#123;git_url&#125;&quot; &quot;$&#123;products_dir&#125;&quot;</span><br><span class="line">    git checkout -b &quot;$&#123;branch&#125;&quot;</span><br><span class="line">    git push -u origin &quot;$&#123;branch&#125;&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;remote $branch existed&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>‘$?’ means to get the execution result of the previous instruction. If the result is 0, it means success.</p><h2 id="If-the-repository-uses-lfs-it-is-best-to-use-git"><a href="#If-the-repository-uses-lfs-it-is-best-to-use-git" class="headerlink" title="If the repository uses lfs, it is best to use git"></a>If the repository uses lfs, it is best to use git</h2><p>That is to say, if your repository uses lfs, then try to use’git lfs clone ‘instead of’git clone’, the same is true for other commands</p><h2 id="android-requestLegacyExternalStorage"><a href="#android-requestLegacyExternalStorage" class="headerlink" title="android:requestLegacyExternalStorage"></a>android:requestLegacyExternalStorage</h2><p>If you encounter such an error during the packaging of the APK: ‘AAPT: error: attribute android: requestLegacyExternalStorage not found.’</p><p>This problem occurs when the project build.gradle - compileSdkVersion is configured with a version less than 29 and also configures the android: requestLegacyExternalStorage property in AndroidManifest.xml - application (whether it is configured by your own project or the third-party library).<br>This property is mainly used because of the storage permission adjustment of Android 10.0, a temporary solution launched by Google.</p><p>This blog describes two solutions: <a href="https://juejin.cn/post/6850418117093523464">https://juejin.cn/post/6850418117093523464</a></p><p>However, these two methods do not apply to our situation, because we are directly generated APK, there is no way to pause the operation of the middle of the Gradle product, of course, we can say that the first package Gradle project out, and then build APK</p><p>However, Unity officially provides a method. We can define the’AndroidManifest.xml ‘of the intermediate Gradle product. There are two types here. One is to define the unityLibrary, the other is to define the launcher, and we take the second</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1661417543/origin-of-ray/WX20220825-165055_bxookt.png" alt=""></p><p>Then change the generated’Assets/Plugins/Android/LauncherManifest.xml ‘to this:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.unity3d.player&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:installLocation</span>=<span class="string">&quot;preferExternal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">supports-screens</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:smallScreens</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:normalScreens</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:largeScreens</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:xlargeScreens</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:anyDensity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:extractNativeLibs</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/app_icon&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">tools:remove</span>=<span class="string">&quot;android:requestLegacyExternalStorage&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mainly add’tools: remove = “android: requestLegacyExternalStorage” ‘in the application tag</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, when writing the packaging pipeline, I encountered several pits, so I will summarize it a little.&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>higher mathematics knowledge point combing summary</title>
    <link href="https://sunra.top/en/posts/29216/"/>
    <id>https://sunra.top/en/posts/29216/</id>
    <published>2022-07-16T12:39:24.000Z</published>
    <updated>2023-06-12T11:53:54.939Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I finally got through the knowledge of higher mathematics, but because the whole process is long and there are many knowledge points, they are all fragmented and not systematic, so I thought I would take this opportunity to generally sort out all the knowledge points once.</p><span id="more"></span><h1 id="Brief-summary"><a href="#Brief-summary" class="headerlink" title="Brief summary"></a>Brief summary</h1><p>In general, the core knowledge of higher data revolves around limits and continuity, so it is important to be proficient in finding limits.</p><p>The derivative of a one-dimensional function is actually defined by the limit. And when the increment of the independent variable tends to 0, the derivative of a unit function multiplied by the increment of the independent variable is the increment of a unit function, which defines the differentiation of a unit function, and the integral of a unit function is defined by differentiation.</p><p>The derivative of a multivariate function, the differentiation and the integral are defined in a similar relationship to that of a univariate function. There are some formulas in multivariate functions that need to be noted, such as the second type of curve integral, which can be changed into a double integral by Green’s formula in the plane, and the second type of curve integral in space can be changed into a second type of surface integral by Stokes’ formula, and then into a triple integral by Gauss’ formula.</p><p>The convergence criterion of the series is also mostly carried out by using the limit, such as the ratio method of the positive series, the root value method, and the Taylor series of the power series is simply the Taylor expansion of the monomial function, which seeks whether the limit of the residue term is 0.</p><p>The last is the differential equation, in fact, to you is the relationship between the function and the derivative, so that you find the expression of the function in line with this relationship</p><h1 id="Higher-Mathematics"><a href="#Higher-Mathematics" class="headerlink" title="Higher Mathematics"></a>Higher Mathematics</h1><h2 id="Functions-Limits-Continuity"><a href="#Functions-Limits-Continuity" class="headerlink" title="Functions, Limits, Continuity"></a>Functions, Limits, Continuity</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul><li><p>function</p></li><li><p>Function Concept</p></li><li>Segmented functions</li><li>Compound Functions</li><li>Inverse Functions</li><li><p>Primary functions</p></li><li><p>Limits</p></li><li><p>Limits of series</p></li><li><p>Limits of functions</p></li><li><p>Limits of a function when the independent variable tends to infinity</p></li><li><p>Limit of a function when the independent variable tends to a finite value</p></li><li><p>The concept of infinitesimal quantities</p></li><li><p>The concept of infinitely large quantities</p></li><li><p>continuity</p></li><li><p>The concept of continuity</p></li><li>Definition of interruption points</li><li><p>Classification of interruption points</p></li><li><p>Type I interruption points</p></li><li><p>Removable interruption points</p></li><li><p>Jumping interruption points</p></li><li><p>Second type of intermittent point</p></li><li><p>Infinite intermittent points</p></li><li><p>Oscillating intermittent point</p></li><li><p>Functional properties</p></li><li><p>Monotonicity</p></li><li>Parity</li><li>Periodicity</li><li>Boundedness</li></ul><h3 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h3><ul><li>A sufficient condition for the existence of the limit of a series: the limit of an odd term is equal to the limit of an even term</li><li><p>Limits of functions exist</p></li><li><p>The limit of a function exists when the independent variable tends to infinity</p></li><li><p>The limit of the function when the independent variable tends to a finite value</p></li><li><p>The relationship between the limit of a series and the limit of a function</p></li><li>Continuity of functions</li><li><p>The operation of continuous functions</p></li><li><p>Quadratic operations</p></li><li>Continuity of complex functions</li><li><p>Continuity of inverse functions</p></li><li><p>Continuity of elementary functions</p></li><li><p>Properties of continuous functions on closed intervals</p></li><li><p>Optimality theorem</p></li><li>Boundedness theorem</li><li>Median theorem</li><li><p>Zero theorem</p></li><li><p>Equivalent infinitesimal substitution theorem</p></li></ul><h3 id="Equation-properties"><a href="#Equation-properties" class="headerlink" title="Equation properties"></a>Equation properties</h3><ul><li><p>Basic primitive functions</p></li><li><p>Power functions</p></li><li>Exponential functions</li><li>Logarithmic functions</li><li>Trigonometric functions</li><li><p>Inverse trigonometric functions</p></li><li><p>Limiting properties</p></li><li><p>boundedness</p></li><li><p>number-preserving</p></li><li><p>Infinitesimal property</p></li><li><p>The sum of finite infinitesimals is still infinitesimal</p></li><li>The product of finite infinitesimals is still infinitesimal</li><li><p>The product of an infinitesimal quantity and a bounded quantity is still infinitesimal</p></li><li><p>Comparison of infinitesimals</p></li><li><p>High-order infinitesimals</p></li><li>low order infinitesimal</li><li>same order infinitesimal</li><li>Equivalent infinitesimal</li><li><p>k-order infinitesimal</p></li><li><p>Relationship between extreme values and infinitesimals:limf(x) = A &lt;=&gt; f(x) = A + α(x)</p></li><li>The nature of infinitesimals</li><li>Relationship between infinitesimal quantities and unbounded variables: infinitesimal quantities require n &gt; N when there is a constant |xn| &gt; M, while unbounded variables do not require</li><li>Relationship between infinitely large and infinitesimal quantities</li><li><p>The method of finding the limit</p></li><li><p>The four rules of limits</p></li><li><p>Two important limits</p></li><li><p>sinx and x are equivalently infinitesimal</p></li><li><p>infinitesimal type of 1</p></li><li><p>Commonly used equivalent infinitesimals</p></li><li>Lopita’s law</li><li>Clipping criterion</li><li><p>Limit criterion for monotone bounded series</p></li><li><p>Monotone bounded function must have limit</p></li><li>Monotonically increasing series with upper bound must have limit</li><li><p>Monotonically decreasing series with lower bound must have limit</p></li><li><p>The nature of infinitesimals: the sum of infinitesimals is still infinitesimal</p></li><li>Functional continuity</li><li><p>Taylor’s formula</p></li><li><p>with pianos remainder term</p></li><li>with Lagrangian remainder term</li><li><p>Commonly used Taylor’s formula (McLaughlin’s formula)</p></li><li><p>can be introduced as equivalent infinitesimal</p></li><li><p>and also Taylor series</p></li><li><p>Use the definition of derivative to find the limit</p></li><li>Differential median theorem</li><li>Definition of definite integrals</li><li>Properties of convergence of series</li></ul><h2 id="Differentiation-of-Unitary-Functions"><a href="#Differentiation-of-Unitary-Functions" class="headerlink" title="Differentiation of Unitary Functions"></a>Differentiation of Unitary Functions</h2><h3 id="The-concept-of-derivatives-and-differentiation"><a href="#The-concept-of-derivatives-and-differentiation" class="headerlink" title="The concept of derivatives and differentiation"></a>The concept of derivatives and differentiation</h3><ul><li><p>Concept and geometric meaning of derivatives</p></li><li><p>The concept of derivative</p></li><li>Derivatives and derivative functions on an interval</li><li><p>Geometric meaning of derivatives</p></li><li><p>The concept and geometric meaning of differentiation</p></li><li><p>Definition</p></li><li><p>The linear principal part of the increment of a function is called the differential</p></li><li><p>dy is the derivative multiplied by the differential of the independent variable dx</p></li><li><p>Geometric meaning: the differential represents the increment of the vertical coordinate of the tangent line of the curve at that point at that point</p></li><li><p>The relationship between continuous, derivable, and differentiable</p></li></ul><h3 id="Calculation-of-derivatives-and-differentiation"><a href="#Calculation-of-derivatives-and-differentiation" class="headerlink" title="Calculation of derivatives and differentiation"></a>Calculation of derivatives and differentiation</h3><ul><li><p>Calculation of derivatives</p></li><li><p>Derivative formula of basic elementary functions</p></li><li>The rule of derivative of the four operations</li><li>Complex function derivative rule</li><li>Inverse function derivative rule: the derivative of the inverse function is the reciprocal of each other</li><li>The method of derivatives of implicit functions</li><li>Logarithmic derivative</li><li>Parametric equation derivative method</li><li>Derivative of segmented functions</li><li><p>Important conclusions about the derivative</p></li><li><p>The derivative of an even function is an odd function</p></li><li>The derivative of a derivable odd function is an even function</li><li><p>The derivative of a derivable periodic function is still a periodic function with constant period</p></li><li><p>Calculation of higher order derivatives</p></li><li><p>direct method, respectively, to find the first-order derivative, second-order derivative, third-order derivative, etc., to find the law</p></li><li>Indirect method: using the known higher order derivative formula, the algorithm, through the function of constant deformation, variable replacement to find the higher order derivative results</li><li><p>Second-order derivatives of several types of functions</p></li><li><p>Abstract composite functions</p></li><li><p>Second-order derivative of implicit functions</p></li><li><p>Differential calculations</p></li><li><p>The four rules of differentiation</p></li><li>Invariance of first-order differential forms</li></ul><h3 id="Median-theorem-inequalities-zero-problems"><a href="#Median-theorem-inequalities-zero-problems" class="headerlink" title="Median theorem, inequalities, zero problems"></a>Median theorem, inequalities, zero problems</h3><ul><li><p>Median theorem</p></li><li><p>Rolle’s theorem</p></li><li>Fermat’s theorem</li><li>Lagrange’s median theorem</li><li>Corsi’s median theorem</li><li><p>Taylor’s theorem</p></li><li><p>Taylor’s formula of order n for Lagrange’s remainder term</p></li><li>Taylor’s formula for Peyano’s remainder term</li><li><p>McLaughlin’s formula</p></li><li><p>Inequality proofs</p></li><li><p>Monotonicity</p></li><li>Maximum value</li><li>Lagrange’s median formula</li><li><p>Lagrangian Remainder Taylor Formula</p></li><li><p>Zero point problem</p></li><li><p>Median theorem or zero theorem for continuous functions</p></li><li>Rolle’s theorem</li></ul><h3 id="Application-of-derivatives"><a href="#Application-of-derivatives" class="headerlink" title="Application of derivatives"></a>Application of derivatives</h3><ul><li>Monotonicity of functions</li><li><p>Extreme values of functions</p></li><li><p>The extreme value point</p></li><li>Stationary points</li><li>Necessary conditions for the existence of extremes</li><li>First Sufficient Condition for Extreme Values</li><li><p>Second sufficient condition for extremes</p></li><li><p>The most value of a function</p></li><li><p>The point of maximum value</p></li><li><p>Convexity of a curve</p></li><li><p>Inflection point</p></li><li>Necessary conditions for an inflection point</li><li>First sufficient condition for inflection point</li><li><p>Second sufficient condition for the point of inflection</p></li><li><p>Asymptote of the curve</p></li><li><p>Horizontal asymptote</p></li><li>Vertical asymptote</li><li><p>Oblique asymptote</p></li><li><p>Arc differentiation and curvature</p></li></ul><h2 id="Integral-of-Unitary-Functions"><a href="#Integral-of-Unitary-Functions" class="headerlink" title="Integral of Unitary Functions"></a>Integral of Unitary Functions</h2><h3 id="Concepts-of-indefinite-and-definite-integrals-properties"><a href="#Concepts-of-indefinite-and-definite-integrals-properties" class="headerlink" title="Concepts of indefinite and definite integrals, properties"></a>Concepts of indefinite and definite integrals, properties</h3><ul><li><p>Principle functions, indefinite and definite integrals</p></li><li><p>Geometric meaning of definite integrals</p></li><li><p>The definite integral is the limit of the sum of integrals</p></li><li><p>Basic properties of integrals</p></li><li><p>Properties of definite integrals</p></li><li><p>Existence theorem of definite integrals</p></li><li><p>If the function is continuous on a closed interval, the definite integral exists</p></li><li><p>The integral exists if the function has only finitely many interrupted points on the closed interval</p></li><li><p>Variable finite integral</p></li><li><p>variable upper integral</p></li><li><p>variable lower integral</p></li><li><p>Variable upper bound indefinite integrals are derived from the upper bound of the integral to obtain the relationship between definite and indefinite integrals</p></li><li>Newton-Leibniz formula</li></ul><h3 id="Calculation-of-definite-and-indefinite-integrals"><a href="#Calculation-of-definite-and-indefinite-integrals" class="headerlink" title="Calculation of definite and indefinite integrals"></a>Calculation of definite and indefinite integrals</h3><ul><li>Basic integral formula</li><li><p>Basic integral method</p></li><li><p>Method of integration by integration (first permutation method)</p></li><li>Commutative integration method (second permutation method)</li><li>Several common permutation methods</li><li>Definite integral reduced integration method</li><li>The method of partial integration</li><li>Several definite integral formulas</li></ul><h3 id="Calculation-of-Inverse-Integrals"><a href="#Calculation-of-Inverse-Integrals" class="headerlink" title="Calculation of Inverse Integrals"></a>Calculation of Inverse Integrals</h3><ul><li><p>Anomalous integrals: limits of variable limit integrals</p></li><li><p>Inverse integrals on infinite intervals</p></li><li><p>Anomalous integrals of unbounded functions</p></li><li><p>Inverse integrals of parity functions on symmetric intervals</p></li><li>An important anomalous integral</li></ul><h3 id="Applications-of-definite-integrals"><a href="#Applications-of-definite-integrals" class="headerlink" title="Applications of definite integrals"></a>Applications of definite integrals</h3><ul><li>Area of a plane figure</li><li>Volume of a rotating body</li><li>Mean value of a function</li><li>Volume of a three-dimensional with known area of parallel sections on an interval</li><li>Arc length of a plane curve</li><li>Area of a rotating surface</li><li>Work done by variable forces</li><li>Hydrostatic pressure of liquid</li><li>Gravitational force</li><li>Center of mass (form center) of an object</li></ul><h2 id="Vector-algebra-and-spatially-analytic-sets"><a href="#Vector-algebra-and-spatially-analytic-sets" class="headerlink" title="Vector algebra and spatially analytic sets"></a>Vector algebra and spatially analytic sets</h2><h3 id="vector-algebra"><a href="#vector-algebra" class="headerlink" title="vector algebra"></a>vector algebra</h3><ul><li>The basic concept of vectors</li><li><p>Vector operations</p></li><li><p>addition and subtraction</p></li><li>Number multiplication</li><li><p>Product of quantities</p></li><li><p>Operation rules</p></li><li><p>Law of commutation</p></li><li><p>Distributive law</p></li><li><p>vector product</p></li><li>Mixed products</li></ul><h3 id="Spatial-analytic-geometry"><a href="#Spatial-analytic-geometry" class="headerlink" title="Spatial analytic geometry"></a>Spatial analytic geometry</h3><ul><li><p>Spatial planes and lines</p></li><li><p>Plane equations</p></li><li><p>General equation</p></li><li>Point method equation</li><li><p>Intercept type</p></li><li><p>Straight line equation</p></li><li><p>General formula</p></li><li>Symmetric</li><li><p>Parametric</p></li><li><p>Plane and line relationship</p></li><li>Plane to plane relationship</li><li>Relationship between a straight line and a line</li><li>Distance from point to surface</li><li><p>Point to line distance</p></li><li><p>Curved surface and space curve</p></li><li><p>Surface equation</p></li><li>Spatial curves</li><li>Common surfaces</li><li>Common quadratic surface equations</li></ul><h2 id="Multifunctional-Differentiation"><a href="#Multifunctional-Differentiation" class="headerlink" title="Multifunctional Differentiation"></a>Multifunctional Differentiation</h2><h2 id="Limits-and-continuity-of-multivariable-functions"><a href="#Limits-and-continuity-of-multivariable-functions" class="headerlink" title="Limits and continuity of multivariable functions"></a>Limits and continuity of multivariable functions</h2><ul><li><p>Concept of binary functions</p></li><li><p>Definition</p></li><li><p>Geometric meaning of a binary function</p></li><li><p>Limits and continuity of binary functions</p></li><li><p>The concept of heavy limit</p></li><li>The concept of continuous binary functions</li><li><p>Properties of multivariate continuous functions</p></li><li><p>sum and difference product quotient of all continuous functions</p></li><li>the most value theorem</li><li>Mediation theorem</li><li>All multi-source elementary functions are continuous everywhere in their defined regions</li></ul><h3 id="Differentiation-of-multifunctions"><a href="#Differentiation-of-multifunctions" class="headerlink" title="Differentiation of multifunctions"></a>Differentiation of multifunctions</h3><ul><li><p>Partial derivatives and full differentiation of binary functions</p></li><li><p>Definition of partial derivative</p></li><li>Geometric meaning of partial derivative</li><li>Full increment</li><li><p>Full differentiation</p></li><li><p>Definition</p></li><li>Necessary condition for the existence of full differentiation: existence of partial derivatives</li><li><p>Sufficient condition for the existence of full differentiation: partial derivatives are continuous</p></li><li><p>Partial derivatives and full differentiation of complex functions</p></li><li><p>Rules of derivatives of composite functions</p></li><li><p>Compound functions and multivariate functions</p></li><li><p>Multifunction and multifunction composite</p></li><li><p>Full differential form invariance</p></li><li><p>Higher order partial derivatives</p></li><li><p>Partial derivatives and full differentiation of implicit functions</p></li><li><p>Derivative of a univariate implicit function determined by an equation</p></li><li>Derivative of a binary implicit function determined by an equation</li><li>The derivative of a one-dimensional implicit function determined by a system of equations</li><li>Derivative of a binary implicit function determined by a system of equations</li></ul><h3 id="Limits-and-maxima"><a href="#Limits-and-maxima" class="headerlink" title="Limits and maxima"></a>Limits and maxima</h3><ul><li><p>Unconditional extrema</p></li><li><p>Extreme value points</p></li><li>Necessary conditions for the existence of extreme values</li><li><p>Sufficient conditions for the existence of extremes</p></li><li><p>Conditional extreme values</p></li><li><p>Lagrange’s multiplier method</p></li><li><p>Maximum value</p></li><li><p>Find the most value on a bounded closed region</p></li><li><p>find the value of the function of the extreme value point in the region</p></li><li>find the most value on the boundary of the region (conditional extrema), for simpler than that bounded function can be brought directly into</li><li><p>Compare all the extreme values in the above two steps</p></li><li><p>application problem, the extreme value point may only have a</p></li></ul><h3 id="Directional-derivatives-gradients-and-geometric-applications"><a href="#Directional-derivatives-gradients-and-geometric-applications" class="headerlink" title="Directional derivatives, gradients and geometric applications"></a>Directional derivatives, gradients and geometric applications</h3><ul><li>Directional derivatives and gradients</li><li>Geometric applications</li></ul><h2 id="Integration-of-multivariate-functions"><a href="#Integration-of-multivariate-functions" class="headerlink" title="Integration of multivariate functions"></a>Integration of multivariate functions</h2><h3 id="Recalculus"><a href="#Recalculus" class="headerlink" title="Recalculus"></a>Recalculus</h3><ul><li><p>double integrals</p></li><li><p>Definition and geometric meaning of double integral</p></li><li><p>Properties of double integrals</p></li><li><p>Comparison theorem</p></li><li>Valuation theorem</li><li><p>Median theorem</p></li><li><p>Calculation of double integrals</p></li><li><p>Calculation in Cartesian coordinates</p></li><li>Calculation in polar coordinates</li><li><p>Calculation using symmetry parity</p></li><li><p>Using symmetry of integral domain and parity of product function</p></li><li><p>Symmetry of variables</p></li><li><p>Definition</p></li><li>Nature: Same as double integral</li><li><p>Calculation</p></li><li><p>Right-angle coordinates</p></li><li><p>First one, then two</p></li><li><p>First two, then one</p></li><li><p>Column Coordinates</p></li><li>Spherical coordinates</li><li>Parity</li><li>Rotational symmetry</li></ul><h3 id="Curve-integral"><a href="#Curve-integral" class="headerlink" title="Curve integral"></a>Curve integral</h3><ul><li><p>Line integrals over arc lengths (first class line integrals)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation method</p></li><li><p>Direct method</p></li><li>Parity</li><li><p>Symmetry</p></li><li><p>Line integral over coordinates (second type of line integral)</p></li><li><p>Definition</p></li><li>Properties</li><li><p>Calculation method (plane)</p></li><li><p>Direct method</p></li><li>Green’s formula (reduced to a double integral)</li><li>Green’s formula for complementary lines</li><li><p>Line integral is independent of path</p></li><li><p>Calculation method (space)</p></li><li><p>Direct method</p></li><li>Stokes formula (reduced to a second class surface integral)</li></ul><h3 id="Surface-integral"><a href="#Surface-integral" class="headerlink" title="Surface integral"></a>Surface integral</h3><ul><li><p>Area fraction over area (first class)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation</p></li><li><p>Direct method</p></li><li>Parity</li><li><p>Symmetry</p></li><li><p>Area score for coordinates (second category)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation</p></li><li><p>Direct method</p></li><li>Gauss’s formula (reduced to triple integral)</li><li>Gauss formula for complementary surfaces</li></ul><h3 id="Application-of-multiple-integrals"><a href="#Application-of-multiple-integrals" class="headerlink" title="Application of multiple integrals"></a>Application of multiple integrals</h3><h3 id="Dispersion-and-rotation"><a href="#Dispersion-and-rotation" class="headerlink" title="Dispersion and rotation"></a>Dispersion and rotation</h3><h2 id="Infinite-series"><a href="#Infinite-series" class="headerlink" title="Infinite series"></a>Infinite series</h2><h3 id="Constant-term-series"><a href="#Constant-term-series" class="headerlink" title="Constant term series"></a>Constant term series</h3><ul><li><p>Concepts and properties of series</p></li><li><p>Infinite series</p></li><li>Parts and series</li><li><p>Convergence, divergence</p></li><li><p>Criterion for convergence of positive series</p></li><li><p>Partial and series bounded</p></li><li>Comparative discriminant</li><li>Ratio discriminant</li><li>Root discriminant</li><li><p>Geometric series (isoperimetric series)</p></li><li><p>Interleaved series discriminant criterion</p></li><li><p>Leibniz discriminant criterion</p></li><li><p>Absolute convergence and properties</p></li></ul><h3 id="Power-series"><a href="#Power-series" class="headerlink" title="Power series"></a>Power series</h3><ul><li>Function term series, convergence domain, function</li><li><p>Power series</p></li><li><p>Abel’s theorem</p></li><li><p>Power series properties</p></li><li><p>Quadratic operations</p></li><li><p>Analytical properties</p></li><li><p>Power series expansion of functions (Taylor series / McLaughlin series)</p></li></ul><h3 id="Fourier-series"><a href="#Fourier-series" class="headerlink" title="Fourier series"></a>Fourier series</h3><ul><li>Fourier coefficients and Fourier series</li><li>Convergence of Fourier series (Direkley’s convergence theorem)</li><li><p>Expansion of a function with period 2l</p></li><li><p>Expansion on [-L. L</p></li><li>expansion of parity functions on [-L. L</li><li>expansion on [0. L] as sine or cosine</li></ul><h2 id="Differential-equations"><a href="#Differential-equations" class="headerlink" title="Differential equations"></a>Differential equations</h2><h3 id="First-order-differential-equation"><a href="#First-order-differential-equation" class="headerlink" title="First order differential equation"></a>First order differential equation</h3><ul><li><p>Differential equation concepts</p></li><li><p>Definition</p></li><li>Order of differential equations</li><li>General and special solutions</li><li><p>Initial conditions</p></li><li><p>Several special classes of first-order differential equations and their solutions</p></li><li><p>Separability of variables</p></li><li>Simultaneous differential equations</li><li>Linear differential equations</li><li>Bernoulli’s equation</li><li>Fully differential equations</li></ul><h3 id="Second-order-and-higher-order"><a href="#Second-order-and-higher-order" class="headerlink" title="Second order and higher order"></a>Second order and higher order</h3><ul><li><p>Linear differential equations</p></li><li><p>Linear chi-square differential equations of order n</p></li><li><p>Linearly correlated and linearly uncorrelated</p></li><li><p>Properties of differential equations</p></li><li><p>Superposition of solutions of linear equations of the chi-square</p></li><li>Generalized solution structure of quadratic linear equations</li><li>Structure of general solutions of non-sublinear equations</li><li>Principle of superposition</li><li>The method and formulas for solving linear chi-square equations with constant coefficients of the second order</li><li>The general solution method and formula for some special free term second-order linear chi-square equations with constant coefficients</li></ul><p>*XMind - Trial Version</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Today, I finally got through the knowledge of higher mathematics, but because the whole process is long and there are many knowledge points, they are all fragmented and not systematic, so I thought I would take this opportunity to generally sort out all the knowledge points once.&lt;/p&gt;</summary>
    
    
    
    <category term="Math" scheme="https://sunra.top/en/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>C#  Delegates and Events</title>
    <link href="https://sunra.top/en/posts/36409/"/>
    <id>https://sunra.top/en/posts/36409/</id>
    <published>2022-03-25T04:14:44.000Z</published>
    <updated>2023-06-12T11:53:54.939Z</updated>
    
    <content type="html"><![CDATA[<p>With the gradual increase in use, I can’t stand the use of these concepts in the vague situation, so I found some official doc to learn these concepts in C #, mainly to distinguish between delegates and events.</p><p>In fact, I personally have been very vague about these concepts before reading the doc, and even once was confused by various blogs on the Internet, and even confused Action, Func and commission.</p><p>Finally, after I went to read the official doc, I had some understanding of these concepts.</p><p>First of all, the most important conclusion is thrown. Both delegates and events are to provide a way to post-process functions. Events are actually multicast based on delegates, and it is inconvenient to define a new delegate type every time you use a delegate, so it is provided. Two strong types of delegates are Action and Func.</p><span id="more"></span><h1 id="What-is-delegation"><a href="#What-is-delegation" class="headerlink" title="What is delegation"></a>What is delegation</h1><p>A delegate is a reference type that represents a reference to a method with a specific parameter list and return type. When instantiating a delegate, you can associate its instance with any method with a compatible signature and return type. You can call a method through a delegate instance.</p><p>Delegates are used to pass methods as arguments to other methods. Event handlers are methods called through delegates. You can create a custom method that a class (such as a Windows control) can call when a specific event occurs. The following example demonstrates a delegate declaration:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">PerformCalculation</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>;</span><br></pre></td></tr></table></figure><p>You can assign any method in any accessible class or struct that matches the delegate type to the delegate. The method can be a static method or an instance method. This sexual aparteness allows you to programmatically change method calls and insert new code into existing classes.</p><p>The purpose of this code is to declare a new delegate. Note that it is a declaration, which is equivalent to declaring a new type. It can be understood as declaring a new class without instantiation.</p><p>The ability to reference methods as arguments makes delegates ideal for defining callback methods. A method can be written to compare two objects in an application. This method can be used in delegates for sorting algorithms. Since the comparison code is separated from the library, sorting methods may be more common.</p><p>Delegates have the following properties:</p><ul><li><p>Delegates are similar to C++ function pointer, but delegates are fully Object Oriented, unlike C++ pointers that remember function, delegates encapsulate both object instances and methods.</p></li><li><p>Delegates allow methods to be passed as arguments.</p></li><li><p>Delegates can be used to define callback methods.</p></li></ul><p>Delegates can be chained together; for example, multiple methods can be called on one event.</p><ul><li><p>The method does not have to exactly match the delegate type. For more information, see<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates">使用委托中的变体</a>。</p></li><li><p>Use Lambda expressions to write internal connection Code Blocks more concisely. Lambda expressions (in some contexts) can be compiled to delegate types. To learn more about lambda expressions, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda 表达式</a>。</p></li></ul><h1 id="Use-of-delegation"><a href="#Use-of-delegation" class="headerlink" title="Use of delegation"></a>Use of delegation</h1><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/reference-types">委托</a>是安全封装方法的类型，类似于 C 和 C++ 中的函数指针。 与 C 函数指针不同的是，委托是面向对象的、类型安全的和可靠的。 委托的类型由委托的名称确定</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Del</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br></pre></td></tr></table></figure><p>Delegate objects can usually be constructed in two ways, one is to provide a delegate with a method name, and the other is to use <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda 表达式</a>When a delegate is instantiated, the call to the delegate is passed to the methodParameters passed to the delegate by the caller are passed to the method, and the delegate returns the method’s return value, if any, to the callerThis is called an invocation delegateAn instantiated delegate can be called as the encapsulated method itselfFor example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a method for a delegate.public static void DelegateMethod(string message)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DelegateMethod</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Instantiate a delegate</span></span><br><span class="line">Del handler = DelegateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call the delegate.</span></span><br><span class="line">handler( Hello World );</span><br></pre></td></tr></table></figure><p>The delegate type is derived from the <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.delegate">Delegate</a> Class. The delegate type is<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/sealed">密封的</a>, they cannot be derived from, nor can a custom class be derived from them. Since the delegate instantiated is an object, it can be passed as an argument or assigned to a property. This allows the method to accept the delegate as an argument and call the delegate later. This is called an asynchronous callback and is a common method for notifying the caller when a long process completes. When a delegate is used in this way, the code using the delegate does not need to know the implementation method to be used. Functionality is similar to that provided by the wrapper interface.</p><p>When a delegate is constructed to encapsulate an instance method, the delegate will reference both the instance and the method. The delegate does not know an instance type other than the method it encapsulates, so the delegate can reference any type of object as long as there are methods on that object that match the delegate signature. When the delegate is constructed to encapsulate a static method, the delegate only references the method. Consider the following declaration:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MethodClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">string</span> message</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span>(<span class="params"><span class="built_in">string</span> message</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Together with the static DelegateMethod shown earlier, we now have three methods that Del instances can encapsulate.</p><p>When invoked, a delegate can call multiple methods. This is called multicast. To add additional methods to the delegate’s method list (invocation list), simply add two delegates using the addition operator or the addition assignment operator (“+” or “+=”). For example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MethodClass();</span><br><span class="line">Del d1 = obj.Method1;</span><br><span class="line">Del d2 = obj.Method2;</span><br><span class="line">Del d3 = DelegateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Both types of assignment are valid.</span></span><br><span class="line">Del allMethodsDelegate = d1 + d2;</span><br><span class="line">allMethodsDelegate += d3;</span><br></pre></td></tr></table></figure><p>At this point, the invocation list for allMethodsDelegate contains three methods, Method1, Method2, and DelegateMethod. The original three delegates (d1, d2, and d3) remain unchanged. When allMethodsDelegate is called, all three methods are called in order. If the delegate uses reference parameters, references are passed to all three methods in reverse order, and any changes made by one method are seen on the other. When a method throws an exception that is not caught within the method, the exception is passed to the caller of the delegate and subsequent methods in the invocation list are not invoked. If the delegate has a return value and/or output parameters, it will return the return value and parameters of the last called method. To remove a method from the invocation list, use<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/subtraction-operator">减法运算符或减法赋值运算符</a>(Or <code>-=</code>）。 for example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//remove Method1</span><br><span class="line">allMethodsDelegate -= d1;</span><br><span class="line"></span><br><span class="line">// copy AllMethodsDelegate while removing d2</span><br><span class="line">Del oneMethodDelegate = allMethodsDelegate - d2;</span><br></pre></td></tr></table></figure><p>Because the delegate type is derived from System. Delegate, the methods and properties defined by the class can be called on the delegate. For example, to query the number of methods in the delegate invocation list, you can write:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> invocationCount = d1.GetInvocationList().GetLength(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>A delegate with multiple methods in the invocation list is derived from <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.multicastdelegate">MulticastDelegate</a>, which is a subclass of’System. Delegate ‘. Since both classes support’GetInvocationList’, the above code will also work in other cases.</p><p>Multicast delegates are widely used in event handling. An event source object sends an event notification to a receiver object that is registered to receive the event. To register an event, the receiver needs to create a method to handle the event, then create a delegate for that method and pass the delegate to the event source. When the event occurs, the source invokes the delegate. The delegate will then call an event handling method on the receiver, providing event data. The delegate type for a given event is determined by the event source. For more information, see<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/events/">事件</a>。</p><p>For more usage methods, please refer to:<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate">如何声明，实例化和使用委托</a></p><h1 id="Strongly-typed-delegates-Action-Func"><a href="#Strongly-typed-delegates-Action-Func" class="headerlink" title="Strongly typed delegates: Action, Func"></a>Strongly typed delegates: Action, Func</h1><p>The abstract Delegate class provides the infrastructure for loose coupling and invocation. Concrete delegate types become more useful by including and enforcing type safety of methods added to the invocation list of delegate objects. When the delegate keyword is used and concrete delegate types are defined, the compiler will generate these methods.</p><p>In fact, whenever a different method signature is required, this creates a new delegate type. This operation can become cumbersome after a while. Every new feature requires a new delegate type.</p><p>Fortunately, there is no need to do this. The .NET Core framework contains several types that are reusable when delegate types are needed. These are<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/fundamentals/types/generics">泛型</a>Definition, so you can declare a custom when you need a new method declaration.</p><p>First type is <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.action">Action</a> Types and some variations:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;(<span class="params">T arg</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">in</span> <span class="title">T2</span>&gt;(<span class="params">T1 arg1, T2 arg2</span>)</span>;</span><br><span class="line"><span class="comment">// Other variations removed for brevity.</span></span><br></pre></td></tr></table></figure><p>Variants of the Action delegate can contain up to 16 parameters, such as <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.action-16">Action</a>It is important that these definitions use different generic parameters for each delegate parameter: this allows maximum flexibility. Method parameters are not required but may be of the same type.</p><p>Use an Action type for any delegate type that has a void return type.</p><p>This framework also includes several generic delegate types that can be used to return values.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">out</span> <span class="title">TResult</span>&gt;()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">out</span> <span class="title">TResult</span>&gt;(<span class="params">T1 arg</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">in</span> <span class="title">T2</span>, <span class="keyword">out</span> <span class="title">TResult</span>&gt;(<span class="params">T1 arg1, T2 arg2</span>)</span>;</span><br><span class="line"><span class="comment">// Other variations removed for brevity</span></span><br></pre></td></tr></table></figure><p>Variants of the’Func ‘delegate can contain up to 16 input parameters, such as <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.func-17">Func</a>By convention, the type of the result is always the last type parameter in all Func declarations.</p><p>Use a’Func ‘type for any delegate type that returns a value.</p><p>There is also a specialized type of delegation <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.predicate-1">Predicate</a>This type returns the test result of a single value.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">bool</span> <span class="title">Predicate</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;(<span class="params">T obj</span>)</span>;</span><br></pre></td></tr></table></figure><p>You may notice that for any Predicate type, there exists a structurally equivalent Func type, for example</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">string</span>, <span class="built_in">bool</span>&gt; TestForString;</span><br><span class="line">Predicate&lt;<span class="built_in">string</span>&gt; AnotherTestForString;</span><br></pre></td></tr></table></figure><p>You may think that these two types are equivalent. They are not. These two variables cannot be used interchangeably. A variable of one type cannot be assigned to another type. The C #  type system uses the name of a defined type, not its structure.</p><h1 id="What-is-an-event"><a href="#What-is-an-event" class="headerlink" title="What is an event"></a>What is an event</h1><p>Similar to delegates, events are <em> late binding </em> mechanisms. In fact, events are built on language support for delegates.</p><p>Events are a way for objects to broadcast (to all relevant components in the system) what has happened. Any other component can subscribe to events and be notified when they are raised.</p><p>You may have used events in some programming. Many graphics systems have event models for reporting user interactions. These events report mouse movements, button clicks, and similar interactions. This is one of the most common scenarios for using events, but not the only one.</p><p>It is possible to define events that should be raised against classes. One thing to note when using events is that a particular event may not have any registered objects. Code must be written to ensure that events are not raised when listeners are not configured.</p><p>By subscribing to events, you can also create coupling between two objects (event source and event sink). You need to ensure that the event sink will unsubscribe from the event source when you are no longer interested in the event.</p><h2 id="Event-supported-design-goals"><a href="#Event-supported-design-goals" class="headerlink" title="Event-supported design goals"></a>Event-supported design goals</h2><p>The language design of the event addresses these goals:</p><ul><li><p>Enable very small coupling between event source and event sink. These two components may not be written by the same organization and may even be updated through completely different schedules.</p></li><li><p>Subscribing to an event and unsubscribing from the same event should be very simple.</p></li><li><p>Event source should support multiple event subscribers. It should also support not attaching any event subscribers.</p></li></ul><p>You will find that the goal of the event is very similar to the goal of the delegate. Therefore, the event language support is built on the delegate language support.</p><h2 id="Language-support-for-events"><a href="#Language-support-for-events" class="headerlink" title="Language support for events"></a>Language support for events</h2><p>The syntax used to define events and to subscribe or unsubscribe to them is an extension of the delegate syntax.</p><p>Define events that use the keyword’event ‘:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;FileListArgs&gt; Progress;</span><br></pre></td></tr></table></figure><p>The type of the event (in this example, ‘EventHandler &lt; FileListArgs &gt;’) must be a delegate type. When declaring an event, a number of conventions should be followed. Typically, the event delegate type has an invalid return. The event declaration should be a predicate or a predicate phrase. Use the past tense when the event reports something that has already happened. Use the present tense predicate (e.g., ‘Closing’) to report something that will happen. Typically, use the present tense to indicate that the class supports some type of custom behavior. One of the most common scenarios is to support cancellation. For example, the’Closing ‘event may include arguments indicating whether the shutdown operation should continue. Other scenarios may allow the caller to modify the behavior by updating the properties of the event parameter. You can raise an event to indicate the suggested next action that the algorithm will take. Event handlers can authorize different actions by modifying the properties of event parameters.</p><p>When you want to raise an event, invoke the event handler using the delegate invocation syntax:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Progress?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> FileListArgs(file));</span><br></pre></td></tr></table></figure><p>As<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/delegates-patterns">委托</a>As described in the section, the?. operator makes it easy to ensure that the event is not raised if there is no subscriber for the event.</p><p>Subscribe to events by using the ‘+=’ operator:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventHandler&lt;FileListArgs&gt; onProgress = (sender, eventArgs) =&gt;</span><br><span class="line">    Console.WriteLine(eventArgs.FoundFile);</span><br><span class="line"></span><br><span class="line">fileLister.Progress += onProgress;</span><br></pre></td></tr></table></figure><p>Handler methods are usually prefixed with “On” followed by the event name, as shown above.</p><p>Use the ‘- =’ operator to unsubscribe:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileLister.Progress -= onProgress;</span><br></pre></td></tr></table></figure><p>Be sure to declare a local variable for the expression representing the event handler. This will ensure that the handler is unsubscribed. If the body of a lambda expression is used, an attempt will be made to delete the handler that was never attached, which is an invalid operation.</p><p>For more ways to use events, such as how to cancel the execution of events, you can see:<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/event-pattern">标准.NET事件模式</a>And<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/modern-events">新的事件模式</a></p><p>The new event mode mainly liberalizes the restrictions of event parameters, does not have to inherit from EventArgs, and pays attention to asynchronous event handlers</p><h1 id="Distinguish-between-delegates-and-events"><a href="#Distinguish-between-delegates-and-events" class="headerlink" title="Distinguish between delegates and events"></a>Distinguish between delegates and events</h1><p>They both provide a late binding scheme: in this scheme, components communicate by calling methods that are only recognized at runtime. They both support single and multiple subscriber methods. This is called unicast and multicast support. Both support similar syntax for adding and removing handlers. Finally, raising events and calling delegates use exactly the same method call syntax. They even both support the same’Invoke () ‘method syntax for use with the’?. ‘operator.</p><p>Given all these similarities, it can be difficult to determine which grammar to use when</p><h2 id="Listening-for-events-is-optional"><a href="#Listening-for-events-is-optional" class="headerlink" title="Listening for events is optional"></a>Listening for events is optional</h2><p>When determining which language features to use, the most important consideration is whether you must have additional subscribers. If your code must call code provided by the subscriber, you should use a delegate-based design when you need to implement callbacks. If your code can do all its work without calling any subscribers, you should use an event-based design.</p><p>Consider the examples generated in this section. A comparer function must be provided for code generated with List. Sort () to sort elements correctly. A LINQ query must be provided with a delegate to determine which elements to return. Both use the design generated with the delegate.</p><p>Consider the’Progress’ event. It reports the progress of the task. The task will continue with or without a listener. The’FileSearcher ‘is another example. It will still search and find all the files it has found, even if no event subscribers are attached. The UX controls work even if no subscribers are listening for events. They all use an event-based design.</p><h2 id="The-return-value-requires-delegation"><a href="#The-return-value-requires-delegation" class="headerlink" title="The return value requires delegation."></a>The return value requires delegation.</h2><p>Another note is the method prototypes required for delegate methods. As you can see, delegates used for events all have invalid return types. You also see that there is an idiom for creating event handlers that pass information back to the event source by modifying the properties of the event parameter object. While these idioms work, they are not as natural as returning values from methods.</p><p>Note that these two heuristic methods may often coexist: if the delegate method returns a value, it may affect the algorithm in some way.</p><h2 id="Event-has-a-dedicated-call"><a href="#Event-has-a-dedicated-call" class="headerlink" title="Event has a dedicated call"></a>Event has a dedicated call</h2><p>Classes other than the class containing the event can only add and remove event listeners; only the class containing the event can call the event. Events are usually public class members. In contrast, delegates are usually passed as arguments and stored as private class members (if they are all stored).</p><h2 id="Event-listeners-usually-have-a-longer-lifetime"><a href="#Event-listeners-usually-have-a-longer-lifetime" class="headerlink" title="Event listeners usually have a longer lifetime"></a>Event listeners usually have a longer lifetime</h2><p>The reason that event listeners generally have a longer lifetime is not very good. However, you may find that event-based design is more natural when the event source will raise events for a long period of time. Examples of event-based UX control design can be seen on many systems. After subscribing to an event, the event source may raise events for the entire lifetime of the program. (You can unsubscribe from events when they are no longer needed.)</p><p>Compare this to many delegate-based designs where the delegate is used as a parameter to a method and is no longer used after the method is returned.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;With the gradual increase in use, I can’t stand the use of these concepts in the vague situation, so I found some official doc to learn these concepts in C #, mainly to distinguish between delegates and events.&lt;/p&gt;
&lt;p&gt;In fact, I personally have been very vague about these concepts before reading the doc, and even once was confused by various blogs on the Internet, and even confused Action, Func and commission.&lt;/p&gt;
&lt;p&gt;Finally, after I went to read the official doc, I had some understanding of these concepts.&lt;/p&gt;
&lt;p&gt;First of all, the most important conclusion is thrown. Both delegates and events are to provide a way to post-process functions. Events are actually multicast based on delegates, and it is inconvenient to define a new delegate type every time you use a delegate, so it is provided. Two strong types of delegates are Action and Func.&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/en/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>Difference Arrays</title>
    <link href="https://sunra.top/en/posts/54851/"/>
    <id>https://sunra.top/en/posts/54851/</id>
    <published>2022-03-13T07:04:39.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>This week’s question of the day has a difficult level question, using a technique called difference array. This technique is actually not complicated, that is, the reverse operation of prefix and, simply record it.</p><p>Here is the link to the title: <a href="https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/">https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/</a></p><span id="more"></span><p>The simplest way to do this problem is to iterate over each possible k, then calculate the score of the current array, and finally compare the score that is the largest in that case. If there are multiple largest, then take the smaller k value.</p><p>However, in this way, the complexity of the algorithm is the square level of n.</p><p>So we need to find the rule and then simplify the rule.</p><p>First, let’s analyze this problem: let the number with index i be x, then according to the problem conditions, we can know that when x &lt; = i, the element counts as one point.</p><p>Therefore, the array index range of one point of element x is [x, n-1].</p><p>If we rotate the number of times k, then after the rotation, because it is a leftward rotation, the subscript after the rotation is (i - k + n) mod n</p><p>So, the range of (i - k + n) mod n should be [x, n - 1]</p><p>Do the math and you get, k &lt; = (i - x + n) mod n, k &gt; = (i + 1) mod n.</p><p>After removing the modulo operation, when i &lt; x, i + 1 &lt; = k &lt; = i - x + n, when i &gt; = x, k &gt; = i + 1 or k &lt; = i - x</p><p>For each element in the array nums, the rotation index range of 1 point for the element can be calculated according to the element value and the subscript of the element. After traversing all elements, you can get the number of elements corresponding to each rotation index. The rotation index with the most elements with 1 point is the rotation index with the highest score. If there are multiple rotation subscripts with the highest scores, take the smallest one among them.</p><p>Create an array of points of length n, where points [k] represents the score when the rotation index is k. For each element in the array nums, get the rotation index range of 1 point for that element, and then add 1 to all elements in that index range of array points. When the value of the elements in the array points is determined, find the smallest index of the largest element. The time complexity of this approach is still O (n ^ 2), and in order to reduce the time complexity, you need to use a differential array.</p><p>Assume that the initial index of element x is i. Add 1 to all elements in the index range [i + 1, i - x + n] of points when i &lt; x, and add 1 to all elements in the index range [0, i - x] and [i + 1, n - 1] of points when i ≥ x. Since it is adding 1 to the elements within one or two consecutive subscript ranges, it can be implemented using a differential array. Define a difference array diffs of length n, where diffs [k] = points [k] − points [k − 1] (in particular, points [− 1] = 0), by: let low = (i + 1) mod n, high = (i − x + n + 1) mod n, add 1 to the value of diffs [low], subtract 1 from the value of diffs [high], and add 1 to the value of diffs [0] if low ≥ high.</p><p>After traversing all elements of the array nums and updating the difference array, traverse the array diffs and calculate the prefix sum, then the prefix sum at each subscript represents the score at the current rotation subscript. Maintain the minimum rotation subscript of the maximum score and the maximum score during the traversal process, and you can get the result after the traversal.</p><p>Here is the code for the C language version:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bestRotation</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span>* diffs = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    <span class="built_in">memset</span>(diffs, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        <span class="type">int</span> low = (i + <span class="number">1</span>) % numsSize;</span><br><span class="line">        <span class="type">int</span> high = (i - nums[i] + numsSize + <span class="number">1</span>) % numsSize;</span><br><span class="line">        diffs[low]++;</span><br><span class="line">        diffs[high]--;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">            diffs[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> bestIndex = <span class="number">0</span>, maxScore = <span class="number">0</span>, score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        score += diffs[i];</span><br><span class="line">        <span class="keyword">if</span> (maxScore &lt; score) &#123;</span><br><span class="line">            bestIndex = i;</span><br><span class="line">            maxScore = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(diffs);</span><br><span class="line">    <span class="keyword">return</span> bestIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;This week’s question of the day has a difficult level question, using a technique called difference array. This technique is actually not complicated, that is, the reverse operation of prefix and, simply record it.&lt;/p&gt;
&lt;p&gt;Here is the link to the title: &lt;a href=&quot;https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/&quot;&gt;https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Computer Composition (1) Computer Overview</title>
    <link href="https://sunra.top/en/posts/21925/"/>
    <id>https://sunra.top/en/posts/21925/</id>
    <published>2022-02-26T08:22:42.000Z</published>
    <updated>2023-06-12T11:53:54.939Z</updated>
    
    <content type="html"><![CDATA[<p>The performance of a computer system is largely characterized by the efficiency and role of software, and the performance of software cannot be achieved without the support of hardware. For a certain function, it can be implemented in software or hardware, which is called software and hardware is logically equivalent. When designing a computer system, the functions of software and hardware should be assigned. Generally speaking, if a function is frequently used and the cost of implementing it with hardware is ideal, hardware should be used to implement it, because the efficiency of hardware implementation is generally higher.</p><span id="more"></span><h1 id="Computer-hardware"><a href="#Computer-hardware" class="headerlink" title="Computer hardware"></a>Computer hardware</h1><h2 id="Basic-ideas-of-von-neumann"><a href="#Basic-ideas-of-von-neumann" class="headerlink" title="Basic ideas of von neumann"></a>Basic ideas of von neumann</h2><p>When von Neumann studied EDVAC, he proposed the concept of “stored program”. The idea of “stored program” laid the basic structure of modern operating systems, and all kinds of computers based on this concept are collectively referred to as von Neumann machines. Its characteristics are as follows:</p><ul><li>Adopt the working method of “stored program”.</li><li>The computer hardware system consists of five components: arithmetic unit, controller, memory, input device and output device.<br>Instructions and data are stored in memory in the same position, with no difference in form, while computers can distinguish them by relying on different stages of the instruction cycle.</li><li>Instructions and data are represented in binary. Instructions consist of operation codes and address codes. The operation code indicates the type of operation, and the address code indicates the address of the operand.</li></ul><p>The basic idea of “stored program” is that the pre-prepared program and the original data source can be sent to main memory before execution. Once the program is started and executed, there is no need for operator intervention.</p><p>Its basic working mode is: control flow driven mode.</p><h2 id="Functional-components-of-a-computer"><a href="#Functional-components-of-a-computer" class="headerlink" title="Functional components of a computer"></a>Functional components of a computer</h2><h3 id="Input-device"><a href="#Input-device" class="headerlink" title="Input device"></a>Input device</h3><p>The main function of an input device is to input programs and data into a computer in the form of information that the machine can recognize and accept. The most commonly used and basic input device is the keyboard.</p><h3 id="Output-device"><a href="#Output-device" class="headerlink" title="Output device"></a>Output device</h3><p>The main task of an output device is to output the results of computer processing in a form acceptable to people or in the form of information required by other systems. The most common and commonly used output devices are monitors, printers, etc.</p><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>Memory is divided into main memory (also known as internal memory) and auxiliary memory (also known as external memory). The memory that the CPU can directly access is main memory. Secondary memory is used to help main memory remember more information. Information in secondary memory must be transferred to main memory before it can be accessed by the CPU.</p><p>The working mode of main memory is to access the address of the storage unit, which is called address access.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645864310/origin-of-ray/Flowchart_xh7xl0.jpg" alt="img"><br>The most basic composition of main memory is shown in the figure.</p><p>The memory stores binary data, the address register (MAR) stores the memory access address, and finds the corresponding memory cell after address decoding.</p><p>The Data Register (MDR) is used to temporarily store information to be read or written from memory.</p><p>The timing control logic is used to produce various timing signals required for memory operation.</p><p>A memory bank consists of many storage units, each storage unit contains several storage elements, and each storage element stores one bit of binary code. Therefore, the storage unit can store a string of binary code, which is called a storage word. The storage length of this string of code is the storage word length, which needs to be an integer multiple of 1B (8bits).</p><p>What we usually call a 32-bit machine refers to the word length, also known as the machine word length. The so-called word length usually refers to the width of the data path used for integer operations inside the CPU, that is, the number of bits of binary data that can be processed by a computer for an integer operation (that is, fixed-point integer operation, this concept will be discussed later in the chapter), usually related to the number of registers and adders of the CPU. Therefore, the word length is generally equal to the size of the internal register. The longer the word length, the larger the data representation range and the higher the calculation accuracy.</p><p>The concept of word length is different from that of word. A word is used to represent the unit of information to be processed and is used to measure the width of a data type. For example, x86 defines a word as 16 bits.</p><p>Instruction word length: The number of bits of binary code contained in an instruction word.</p><p>Storage word length: The number of bits of binary code stored in a storage unit.</p><p>They must all be integer multiples of bytes.</p><p>The instruction word usually takes an integer multiple of the storage word length. If the instruction word length is equal to 2 times the storage word length, two memory access cycles are required to retrieve an instruction. If the instruction word length is equal to the storage word length, the instruction fetch cycle is equal to the machine cycle.</p><p>MAR for addressing, the number of bits corresponding to the number of memory cells, such as MAR bit 10, there are 2 ^ 10 = 1024 memory cells, that is, 1k, the information that can be stored is 1k * storage word length.</p><p>The virtual address should not be considered here, and the physical address that goes to the MAR is already converted.</p><p>The length of the MAR is the same as the length of the PC, and both are used to store addresses. It’s just that the content in the memory pointed to by the address stored by the PC must be an instruction.</p><p>The length of MDR is equal to the storage word length, usually an integer multiple of the second power of the byte. Because the role of MDR is to temporarily store the content to be read or written from memory, in general, the length of each read and write from memory is one storage word length.</p><p>So <em> should the constant of the data bus be the same as the length of the MDR? </em></p><p>Note that although MAR and MDR are part of the memory, modern computers generally incorporate them into the CPU.</p><h3 id="Arithmetic-unit"><a href="#Arithmetic-unit" class="headerlink" title="Arithmetic unit"></a>Arithmetic unit</h3><p>An arithmetic unit is an executive part of a computer that performs arithmetic and logical operations.</p><p>The core of the arithmetic unit is the Arithmetic and Logic Unit (ALU). The arithmetic unit contains several general purpose registers for staging operands and intermediate results, such as the accumulator (ACC), multiplier quotient register (MQ), operand register (X), index register (IX), base address register (BR), etc., the first three registers are required.</p><p>There is also a program status register (PSW) inside the arithmetic unit, also known as the flag register, which is used to store some flag information obtained by the ALU operation or the status information of the processor, such as whether the result is overflowing, whether there is a carry or offset, etc.</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>The controller is the command center of the computer, which directs the various components to work automatically and harmoniously.</p><p>The controller consists of a Program Counter (PC), an Instruction Register (IR), and a Control Unit (CU).</p><p>PC is used to store the address of the current instruction to be executed, and can automatically add 1 to form the address of the next instruction, and there is a direct path between it and the main memory MAR.</p><p>IR is used to store the current instruction, and its content comes from the MDR of main memory. The OP (IR) in the instruction is sent to the CU for analyzing the instruction and issuing various micro-operation command sequences; while the address code Ad (IR) is sent to the MAR for fetching the operands.</p><p>As mentioned above, the instruction word length can be an integer multiple of the storage word length, so the length of the IR can be an integer multiple of the MDR, that is, an instruction may be fetched multiple times.</p><p>Generally, the arithmetic unit and controller are integrated into the same chip, called the Central Processor.</p><p>CPU contains ALU, general purpose register group GPRs, PSW, controller, IR, PC, MAR, MDR, etc.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863416/origin-of-ray/流程图_3_m808y3.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863416/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_3_m808y3.jpg"></p><p>The above figure is a simple architecture diagram of a CPU. Through the above figure, we simply analyze the execution process of the next instruction:</p><ul><li>The address of the next instruction is indicated in the PC register and placed on the address bus through the MAR.</li><li>The controller issues a read command to the control bus.</li><li>According to the address indicated by the address bus, obtain instructions from main memory and place them on the data bus.</li><li>Because the control bus indicates that it is now a read command, read instructions from the data bus into the MDR and then into the IR</li><li>IR put the OP (opcode) into the CU to parse, then put the Ad (address code) into the MAR, then get the data from memory, put it in the MDR, and then put the data into GPRs.</li><li>If the instruction parses successfully, the data is also placed in the general purpose register, and the ALU can be used for calculation.</li></ul><h1 id="Computer-software"><a href="#Computer-software" class="headerlink" title="Computer software"></a>Computer software</h1><h2 id="System-software-and-application-software"><a href="#System-software-and-application-software" class="headerlink" title="System software and application software"></a>System software and application software</h2><p>System software is a set of basic software that ensures the efficient and correct operation of a computer system, usually provided to users as system resources.</p><p>The system software mainly includes operating system, database management system (DBMS), language processing system, distributed software system, network software system, standard library program, service program, etc.</p><p>Application software refers to programs developed for users to solve various problems in an Application Area.</p><h2 id="Three-levels-of-language"><a href="#Three-levels-of-language" class="headerlink" title="Three levels of language"></a>Three levels of language</h2><ul><li>Machine language</li><li>Assembly language</li><li>High level language</li></ul><p>Due to the inability of computers to directly understand and execute high-level languages, programs that need to convert high-level languages into machine language are usually called translation programs. Translation programs are divided into three categories:</p><ul><li>Assembly program (assembler). Translate assembly language into machine language.</li><li>Interpreter (interpreter). Translate the statements in the source program into its instructions one by one in the order of execution and execute them immediately.</li><li>compile program (compiler). Translate high-level language into assembly language or machine language.</li></ul><p>The interpreter does not generate a fully translated program in memory.</p><h2 id="Logical-functional-equivalence-of-software-and-hardware"><a href="#Logical-functional-equivalence-of-software-and-hardware" class="headerlink" title="Logical functional equivalence of software and hardware"></a>Logical functional equivalence of software and hardware</h2><p>Hardware often implements the most basic arithmetic and logic functions, while most other functions are augmented by software.</p><p>For a certain function, it can be implemented by both hardware and software. From the user’s point of view, they are functionally equivalent, which is called functional equivalence of software and hardware logic.</p><p>Equivalence is an important basis for computer system design. When designing a computer system, we must consider whether a certain function is implemented in hardware or software from many aspects.</p><h1 id="Hierarchical-structure-of-computer-systems"><a href="#Hierarchical-structure-of-computer-systems" class="headerlink" title="Hierarchical structure of computer systems"></a>Hierarchical structure of computer systems</h1><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863414/origin-of-ray/流程图_1_gwp690.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863414/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_1_gwp690.jpg"></p><p>Level 1 is the microprogrammed machine layer, which is a real hardware layer that executes microinstructions directly from the machine hardware.</p><p>The relationship between machine instructions and microinstructions can be summarized as follows:</p><p>A machine instruction corresponds to a microprogram, which is composed of several microinstructions. Therefore, the function of a machine instruction is realized by a sequence composed of several microinstructions. In short, the operation completed by a machine instruction is divided into several microinstructions to complete, which are interpreted and executed by microinstructions.</p><p>From the one-to-one correspondence between instructions and microinstructions, programs and microprograms, and addresses and microaddresses, the former is related to internal memory, while the latter is related to control memory (which is a part of the microprogram controller. The microprogram controller is mainly composed of three parts: control memory, microinstruction register and address transfer logic. Among them, the microinstruction register is further divided into two parts: the microaddress register and the microcommand register), and there are corresponding hard devices related to this.</p><p>It can be seen from the flowchart of microprogram execution of general instructions. Each CPU cycle is for one microinstruction. This tells us how to design microprograms, and will also allow us to further experience the relationship between machine instructions and microinstructions.</p><p>Level 2 is the traditional machine language layer, which is also an actual machine layer with microprograms interpreting machine instruction systems.</p><ul><li>Level 3 is the operating system layer, which is implemented by operating system programs, which are composed of machine instructions and generalized instructions. These generalized instructions are software instructions defined and interpreted by the operating system for the purpose of extending machine functions, so this layer is also called the hybrid layer.</li></ul><p>The specific content of generalized instructions can be delved into when looking at the operating system.</p><ul><li>The fourth layer is the assembly language layer, which provides users with a symbolic language through which assembly language programs can be written. This layer is supported and executed by the assembly program.</li><li>Level 5 is the high-level language layer, which is user-oriented and set up for the convenience of users writing applications. This layer has support and execution of high-level program compilers.</li></ul><p>Above the high-level language layer, there can also be an application layer.</p><p>Your pure hardware system without soft armor is called bare metal. Layers 3-5 are called virtual machines, which are simply software-implemented machines.</p><p>The relationship between the layers is close, the lower layer is the foundation of the upper layer, and the upper layer is the extension of the lower layer.</p><h1 id="The-working-principle-of-computer-system"><a href="#The-working-principle-of-computer-system" class="headerlink" title="The working principle of computer system"></a>The working principle of computer system</h1><h2 id="How-“stored-program”-works"><a href="#How-“stored-program”-works" class="headerlink" title="How “stored program” works"></a>How “stored program” works</h2><p>This method stipulates that before the program is executed, the instructions or data contained in the program need to be sent to main memory. Once the program is started and executed, there is no need for operator intervention, and the extraction and execution tasks of the instructions are automatically completed one by one.</p><p>The execution process of each instruction includes: accessing the instruction from the main, decoding the instruction, calculating the address of the next instruction, taking the operand and executing it, and sending the execution result back to memory.</p><p>The instructions here are the machine instructions mentioned above. They are divided into multiple steps, and each step is called a microinstruction.</p><p>The time to fetch instructions is generally called a machine cycle, also known as a CPU cycle</p><h2 id="From-source-program-to-executable-file"><a href="#From-source-program-to-executable-file" class="headerlink" title="From source program to executable file"></a>From source program to executable file</h2><p>When writing C language programs in a computer, they must be converted into a series of low-level machine instructions, packaged in a format called an executable object file, and stored as binary disk files.</p><p>Take GCC for UNIX as an example:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863415/origin-of-ray/流程图_2_z9ajc2.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863415/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_2_z9ajc2.jpg"></p><ul><li>Preprocessing stage: The preprocessor (cpp) processes commands starting with #in the source program, such as inserting the contents of the .h file after the #include command into the program file. The output is a source program with an extension of .i.</li><li>compile stage: The compiler (ccl) compiles the preprocessed source program to generate an assembly language source program hello.s. Each statement in the assembly language source program describes a low-level machine language instruction in a text format.</li><li>Assembly stage: The assembler (as) translates hello.s into machine language instructions and packages these instructions into a binary file called hello.s, which is a relocatable object file.<br>Link phase: The linker (ld) merges multiple relocatable object files and standard library functions into a single executable object file, or executable for short.</li></ul><h2 id="Description-of-program-execution-process"><a href="#Description-of-program-execution-process" class="headerlink" title="Description of program execution process"></a>Description of program execution process</h2><p>In UNIX, we can execute the program through the shell command line interpreter. The process of executing the program is explained through the shell command line as follows:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">unix&gt; </span><span class="language-bash">./hello</span></span><br><span class="line"></span><br><span class="line">hello, world!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">unix&gt; </span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863310/origin-of-ray/asynccode_nix9io.png" alt="img"></p><p>The shell program reads each character entered by the user from the keyboard into the CPU register one by one (corresponding to 1), then saves it to the main memory, and forms the string “./hello” (corresponding to 2) in the buffer of the main memory. After receiving Enter, the shell calls up the kernel program of the system, and the kernel loads the executable file hello on the disk to the main memory (corresponding to 3). The kernel loads the code and data in the executable file (here is the string “hello, world! \ N “), the address of the first instruction of hello is sent to the PC, and the CPU then starts executing the hello program, which accesses each character in the string loaded into the main memory from the main memory to the CPU’s register (corresponding to 4), and then sends the characters in the CPU register to the display (corresponding to 5).</p><blockquote><p>It is not so simple to send it directly to the PC here, it will involve the switching of processes.</p></blockquote><h2 id="Description-of-the-instruction-execution-process"><a href="#Description-of-the-instruction-execution-process" class="headerlink" title="Description of the instruction execution process"></a>Description of the instruction execution process</h2><p>The code segment of the executable file is composed of a sequence of machine instructions represented by 0 and 1, which are used to indicate that the CPU completes a specific atomic operation.</p><p>For example, the number fetch instruction takes out a data from the storage unit and sends it to the register of the CPU. The number store instruction writes the contents of the register into a storage unit. The ALU instruction sends the contents of the two registers to some arithmetic or logical operation. In a CPU register. Taking the number fetch instruction as an example, it is sent to the ACC after fetching. The information flow is:</p><ul><li>Instruction fetch: PC - &gt; MAR - &gt; M -MDR - &gt; IR</li><li>Analysis instruction: OP (IR) - &gt; CU</li><li>Execute command: Ad (IR) - &gt; MAR - &gt; M - &gt; MDR -ACC</li></ul><h1 id="Computer-performance-indicators"><a href="#Computer-performance-indicators" class="headerlink" title="Computer performance indicators"></a>Computer performance indicators</h1><h2 id="Word-length"><a href="#Word-length" class="headerlink" title="Word length"></a>Word length</h2><p>This has been mentioned earlier, you can take a look at the previous content.</p><h2 id="Data-path-bandwidth-data-word-length"><a href="#Data-path-bandwidth-data-word-length" class="headerlink" title="Data path bandwidth (data word length)"></a>Data path bandwidth (data word length)</h2><p>Refers to the number of bits of information that the data bus can transmit in parallel at one time. The data path width mentioned here refers to the width of the external data bus, which may be different from the width of the data bus (internal register size) inside the CPU</p><h2 id="Main-memory-capacity"><a href="#Main-memory-capacity" class="headerlink" title="Main memory capacity"></a>Main memory capacity</h2><p>Refers to the maximum capacity of the main memory can store information, usually measured in bytes, can also be used to express the storage capacity of the word <em> word length (such as 512K </em> 16 bits).</p><p>The number of bits in the MAR reflects the maximum addressable range and is not necessarily the actual memory capacity.</p><p>If the MAR length is 16 bits, it means that there are 2 ^ 16 = 65536 memory cells, which is 64K. If the MDR is 32 bits, it means that the storage word length is 32 bits, and the storage capacity is 64K * 32b.</p><h2 id="Operation-speed"><a href="#Operation-speed" class="headerlink" title="Operation speed"></a>Operation speed</h2><ul><li>throughput. Refers to the number of requests processed by the system per unit time. It depends on how quickly information can be entered into memory, how quickly the CPU can fetch instructions, how quickly data can be accessed from memory, and how quickly results can be sent from memory to external devices. Almost every step is related to main memory, so system throughput mainly depends on the access cycle of main memory.</li><li>Response time. Refers to the waiting time from the user sending a request to the computer until the system responds to the request and obtains the desired result. Usually includes CPU time (time spent running a program) and waiting time (time for disk access, memory access, I/O operations, operating system overhead, etc.).</li><li>CPU clock cycle: usually beat pulse or T cycle, is the reciprocal of the main frequency, is the smallest unit of time in the CPU, and each action of executing instructions requires at least one clock cycle.</li></ul><blockquote><p>An instruction (machine instruction) consists of multiple microinstructions. Each microinstruction requires at least one clock cycle. The time to fetch the instruction (according to the first step of the PC executing the machine instruction, fetch the instruction, which is also a microinstruction) is called the machine cycle., also called CPU cycle</p></blockquote><ul><li>Main frequency (CPU clock frequency). Usually in Hertz (Hz). The higher the main frequency of the computer of the same model, the shorter the time it takes to complete an instruction.</li><li>CPI (Clock cycle Per Instruction): The number of clock cycles required to execute an instruction.<br>CPU execution time refers to the time it takes to run a program</li></ul><blockquote><p>CPU execution time</p><p>CPU performance (CPU execution time) is determined by three factors: frequency, CPI, and number of instructions.</p><p>The same instruction, different architectures of CPU implementation may be different, the required CPI may be different.</p><p>The above three may restrict each other.</p></blockquote><ul><li>MIPS (Million Instructions Per Second): how many million instructions are executed per second</li></ul><blockquote><p>MIPS</p><p>Average instruction cycle</p></blockquote><ul><li>MFLOPS, GFLOPS, TFLOPS, PFLOPS, EFLOPS, ZFLOPS: MFLOPS (Millon Floating-point Operations Per Second), i.e. how many millions of floating-point operations per second</li></ul><blockquote><p>MFLOPS</p></blockquote><h2 id="Benchmark-procedure"><a href="#Benchmark-procedure" class="headerlink" title="Benchmark procedure"></a>Benchmark procedure</h2><p>Benchmarks A set of programs specifically designed for performance rating.</p><p>But not necessarily reliable, hardware system designers or compiler developers may be specially optimized for this program.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The performance of a computer system is largely characterized by the efficiency and role of software, and the performance of software cannot be achieved without the support of hardware. For a certain function, it can be implemented in software or hardware, which is called software and hardware is logically equivalent. When designing a computer system, the functions of software and hardware should be assigned. Generally speaking, if a function is frequently used and the cost of implementing it with hardware is ideal, hardware should be used to implement it, because the efficiency of hardware implementation is generally higher.&lt;/p&gt;</summary>
    
    
    
    <category term="ComputerOrganization" scheme="https://sunra.top/en/categories/ComputerOrganization/"/>
    
    
  </entry>
  
  <entry>
    <title>Fundamentals of Linear Algebra (I)  Connections Between Determinants, Matrices, Vectors and Equations(above)</title>
    <link href="https://sunra.top/en/posts/39443/"/>
    <id>https://sunra.top/en/posts/39443/</id>
    <published>2022-01-30T09:14:47.000Z</published>
    <updated>2023-06-12T11:53:54.939Z</updated>
    
    <content type="html"><![CDATA[<p>I recently wanted to look at computer graphics, but I saw that the course requirements have linear algebra as a pre-requisite, so I re-read some of them, and so far I have looked at properties of determinants, matrices, vectors and systems of equations.<br>The main purpose of this blog is not to summarize the properties of matrices one by one, but to sort out a question I have been having during the review process, which is, why these things are spoken together, what is the relationship between them, and to slightly combine some ideas from the rendering principles, how matrices are applied to them.</p><span id="more"></span><h2 id="Some-understanding-of-the-relationship-between-series-matrices-vectors-and-systems-of-equations"><a href="#Some-understanding-of-the-relationship-between-series-matrices-vectors-and-systems-of-equations" class="headerlink" title="Some understanding of the relationship between series, matrices, vectors and systems of equations"></a>Some understanding of the relationship between series, matrices, vectors and systems of equations</h2><ul><li>A row equation is a value, he is a number, a scalar, while a matrix is a table.</li><li>The value of the row equation can be regarded as a property of the matrix, and some properties of the matrix can be judged by the calculation of the value of the row equation.</li><li>A matrix is an m*n table, but if each column is viewed as a column vector, then the entire matrix can be viewed as a row vector, or a vector group.</li><li>Both matrices and vectors can be an expression of a system of equations. By converting a system of equations into a matrix or vector representation, there are many properties that can help us simplify the computation.</li></ul><h2 id="Matrix-vs-rendering-pipeline"><a href="#Matrix-vs-rendering-pipeline" class="headerlink" title="Matrix vs. rendering pipeline"></a>Matrix vs. rendering pipeline</h2><p>During the running of the game, we need to change the points in the model into pixel points on the screen, which involves transforming the coordinates of the points from the model coordinate system to the world coordinate system, and then to the camera’s coordinate system, etc. A series of transformation of the coordinate space, in fact, is the transformation of the coordinates, (x1, y1, z1) into (x2, y2, z2), this transformation is a system of equations three ternary A system of equations consisting of a single equation.<br>That is, we can turn the system of equations for coordinate transformation into the multiplication of matrices.<br>The advantage of this is that one is that it is more convenient to represent matrices, and the second is that we have many means to simplify the multiplication of matrices, while sometimes we need to transform each other between model spaces, and if we use a system of equations, we have to recalculate a system of equations, but if we use a matrix, then it is straightforward to use the inverse matrix, and if you are an orthogonal matrix, then you can even use the transpose matrix directly.</p><h2 id="Some-properties-of-and-relationships-between-series-matrices-vectors-and-systems-of-equations"><a href="#Some-properties-of-and-relationships-between-series-matrices-vectors-and-systems-of-equations" class="headerlink" title="Some properties of and relationships between series, matrices, vectors, and systems of equations"></a>Some properties of and relationships between series, matrices, vectors, and systems of equations</h2><h3 id="Matrix-expressions"><a href="#Matrix-expressions" class="headerlink" title="Matrix expressions"></a>Matrix expressions</h3><p>A row equation is a number that is an algebraic sum of products of elements in different rows and columns.</p><p>One thing to note is that the number of rows and columns of the determinant is the same, both are n. Then the determinant is called the nth order determinant.</p><p>For determinants of order three and below, we can directly use the diagonal method to find the value of the determinant, for determinants of order three and above, we need to apply the formula</p><script type="math/tex; mode=display">\initial{vmatrix}a_{11} & a_{12} & ... & a_{1n} \\a_{21} & a_{22} & ... & a_{2n} \\... & ... & ... & ... \\a_{n1} & a_{n2} & ... & a_{nn} \\\end{vmatrix}=\sum_{r=1}^n(-1)^{r(j_1j_2...j_n)}a_{1j_1}a_{2j_2}...a_{nj_n}</script><p>where <code>r(j1j2..jn)</code> denotes the inverse order of <code>j1j2..jn</code> (a larger number in front of a smaller number is said to constitute an inverse order, and the total number of inverse orders in an arrangement is called the inverse order of the arrangement), and an even inverse order is called an even arrangement, and an odd inverse order is called an odd arrangement.</p><h4 id="properties-of-the-row-equation"><a href="#properties-of-the-row-equation" class="headerlink" title="properties of the row equation"></a>properties of the row equation</h4><ul><li>The value of the transposed determinant remains unchanged</li><li>Two rows (or two columns) swap positions and the value of the determinant is 0.<ul><li>Corollary 1: Two rows or two columns are identical, the determinant value is 0</li></ul></li></ul><blockquote><p>Whether the value of the series is zero is a very important property, which is closely related to whether the system of equations has a solution, whether the system of vectors is linearly independent, etc.</p></blockquote><ul><li>A row or column has a common factor k. You can put k outside the notation of the determinant, i.e., multiplying a number k by a determinant is equivalent to multiplying a row of it by k.<ul><li>Corollary 1: A row or column value is 0, then the determinant value is 0</li><li>Corollary 2: The elements of two rows (or two columns) correspond to each other proportionally, and the value of the determinant is 0</li></ul></li><li>A row or column can be the sum of two elements, then it can be split into two determinants and added together</li></ul><script type="math/tex; mode=display">\initial{vmatrix}a_1 + b_1 & a_2 + b_2 & a_3 + b_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}=\initial{vmatrix}a_1 & a_2 & a_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}+\initial{vmatrix}b_1 & b_2 & b_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}</script><ul><li>k times of a row (or column) is added to another row (or column), the value of the determinant remains unchanged</li></ul><script type="math/tex; mode=display">\initial{vmatrix}a_1 & a_2 & a_3 \\b_1 & b_2 & b_3 \\c_1 & c_2 & c_3\end{vmatrix}=\initial{vmatrix}a_1 & a_2 & a_3 \\b_1 + ka_1 & b_2 + ka_2 & b_3 + ka_3c_1 & c_2 & c_3\end{vmatrix}</script><h4 id="Row-by-row-or-column-by-column-expansion-formula-Laplace-expansion"><a href="#Row-by-row-or-column-by-column-expansion-formula-Laplace-expansion" class="headerlink" title="Row-by-row (or column-by-column) expansion formula (Laplace expansion)"></a>Row-by-row (or column-by-column) expansion formula (Laplace expansion)</h4><p>The nth-order determinant is called the remainder of <code>a_ij</code>, denoted as <code>M_ij</code>, by crossing out all the elements of row i and column j of <code>a_ij</code> in the nth-order determinant.</p><p>Call <code>(-1)^(i+j)M_ij</code> the algebraic remainder equation of <code>a_ij</code>, denoted as <code>A_ij</code>,i.e:</p><script type="math/tex; mode=display">A_{ij} = (-1)^{i + j}M_{ij}</script><p><strong>Theorem 1</strong>: A determinant of order n is equal to the sum of the products of the elements of any row of it and its corresponding algebraic remainder equation</p><script type="math/tex; mode=display">\initial{vmatrix}A\end{vmatrix}=a_{i1}A_{i1} + a_{i2}A_{i2} + ... + a_{ik}A_{ik}=\sum_{k=1}^na_{ik}A_{ik}, i = 1, 2, 3, ..., n</script><script type="math/tex; mode=display">\initial{vmatrix}A\end{vmatrix}=a_{1i}A_{1i} + a_{2i}A_{2i} + ... + a_{ki}A_{ki}=\sum_{k=1}^na_{ki}A_{ki}, i = 1, 2, 3, ..., n</script><p>The first one becomes the row-by-row expansion of the determinant, and the second one is called the column-by-column expansion.</p><p><strong>Theorem 2</strong>: The sum of the algebraic remainder of any row of the determinant with the elements of another row is 0</p><script type="math/tex; mode=display">\sum_{k=1}^na_{ik}A_{jk} = 0, i j</script><p>There are also several special cases:</p><ul><li><p>The value of the upper (lower) trigonometric determinant is the product of the diagonals</p></li><li><p>The value of the determinant of the subdiagonal is then</p></li></ul><script type="math/tex; mode=display">(-1)^{\frac {n(n-1)}2}a_{1n}a_{2,n-1}...a_{an1}</script><ul><li>If A and B are matrices of order m and n, respectively, then<script type="math/tex; mode=display">\initial{vmatrix}A & * \\0 & B\end{vmatrix}=\initial{vmatrix}A & 0 \\* & B\end{vmatrix}=\initial{vmatrix}A\end{vmatrix}*\initial{vmatrix}B\end{vmatrix},\initial{vmatrix}* & A \\B & 0\end{vmatrix}=\initial{vmatrix}0 & A \\B & *\end{vmatrix}=(-1)^{mn}\initial{vmatrix}A\end{vmatrix}*\initial{vmatrix}B\end{vmatrix}</script></li></ul><ul><li>Van der Munn determinant</li></ul><script type="math/tex; mode=display">\initial{vmatrix}1 & 1 & ... & 1 \\x_1 & x_2 & ... & x_n ...x_1^2 & x_2^2 & ... & x_n^2... & ... & ... & ... \\x_1^{n-1} & x_2^{n-1} & .... & x_n^{n-1}\end{vmatrix}= \prod_{1 \le j \le i \le n}(x_i - x_j)</script><h4 id="Kramer’s-Law"><a href="#Kramer’s-Law" class="headerlink" title="Kramer’s Law"></a>Kramer’s Law</h4><p>If the coefficients of a system of non-simultaneous linear equations consisting of n equations with n unknowns have determinant values that are not zero, then the system of equations has a unique solution, and</p><script type="math/tex; mode=display">x_i =\frac{  \initial{vmatrix}  A_i  \end{vmatrix}}{    \initial{vmatrix}  A  \end{vmatrix}},i = 1, 2, 3, ..., n</script><p>where Ai is the determinant formed by replacing the elements of the i<strong> column</strong> in |A| with the constant terms at the right end of the system of equations</p><p><strong>Corollary</strong>: A system of n equations n unknown quantities consisting of a system of linear equations with coefficients determinant|A| ! = 0 is sufficient for the system of equations to have a unique zero solution (since the constants at the right end of the system of equations are all 0, so |Ai| is 0, then all xi is 0).</p><p>Conversely, if there is a non-zero solution, then |A| = 0.</p><h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><h3 id="vectors"><a href="#vectors" class="headerlink" title="vectors"></a>vectors</h3><h3 id="System-of-equations"><a href="#System-of-equations" class="headerlink" title="System of equations"></a>System of equations</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;I recently wanted to look at computer graphics, but I saw that the course requirements have linear algebra as a pre-requisite, so I re-read some of them, and so far I have looked at properties of determinants, matrices, vectors and systems of equations.&lt;br&gt;The main purpose of this blog is not to summarize the properties of matrices one by one, but to sort out a question I have been having during the review process, which is, why these things are spoken together, what is the relationship between them, and to slightly combine some ideas from the rendering principles, how matrices are applied to them.&lt;/p&gt;</summary>
    
    
    
    <category term="Math" scheme="https://sunra.top/en/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>Introduction to DHCP Protocol Workflow</title>
    <link href="https://sunra.top/en/posts/1133/"/>
    <id>https://sunra.top/en/posts/1133/</id>
    <published>2021-11-13T00:47:39.000Z</published>
    <updated>2023-06-12T11:53:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>Recently read an article introducing the DHCP protocol workflow, here is a brief summary.</p><span id="more"></span><h2 id="How-to-configure-an-IP-Address-for-a-network-interface-card"><a href="#How-to-configure-an-IP-Address-for-a-network-interface-card" class="headerlink" title="How to configure an IP Address for a network interface card"></a>How to configure an IP Address for a network interface card</h2><p>You can configure an address yourself with the command line. You can use ifconfig or ip addr. After setting it up, use these two commands to card up the network interface and start working.</p><p>Use net-tools:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ifconfig eth1 10.0.0.1/24</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ifconfig eth1 up</span></span><br></pre></td></tr></table></figure><p>Using iproute2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ip addr add 10.0.0.1/24 dev eth1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> up eth1</span></span><br></pre></td></tr></table></figure><p>You may ask, configuring this degree of freedom yourself is too much, can I configure anything?</p><p>What if I configure an address that is not related to anyone? For example, the machines next to me are all 192.168.1.x, and I have to configure a 16.158.23.6, what will happen?</p><p>There will be no phenomenon, just that the package cannot be sent out.</p><p>Why not send it? For example. 192.168.1.6 is next to your machine, even on the same switch, and you set the address of the machine to 16.158.23.6. On this machine, you try to ping 192.168.1.6, and you think that as long as you send the packet, another machine on the same switch will receive it right away, right? But Linux system is not like this, it is not as smart as you think. You see the machine next to you with the naked eye, and it needs to process according to its own logic.</p><p>As long as the packet is running on the network, it is complete, there can be no upper layer, absolutely impossible to have no lower layer. So, you look at it has its own source IP address 16.158.23.6, there is also a destination IP address 192.168.1.6, but the packet can not be sent out, this is because the MAC layer has not been filled.</p><p>It’s easy to know your own MAC address. But what should the target MAC fill in? Is 192.168.1.6 fill in the MAC address of this machine? Of course not. Linux will first judge, is the address you want to go to the same network segment as me, or is it the same network segment as one of my network interface cards? ** Only if it is a network segment, it will send an ARP request to obtain the MAC address. What if it is not found? Linux default logic is that if this is a cross-segment call, it does not send the packet directly to the network, but attempts to send the packet to the gateway.</p><blockquote><p>In the same local area network, DHCP requests an IP address for its own MAC, and ARP obtains someone else’s MAC address based on someone else’s IP.</p></blockquote><p>If you configure the gateway, Linux will get the MAC address of the gateway and then send the packet out. For 192.168.1.6 machine, although the packet passing by its door, the target IP is it, but the MAC address is not it, so its network interface card will not receive the packet.</p><p>What if the gateway is not configured? The package can’t be sent at all.</p><p>If the gateway is configured to 192.168.1.6? Impossible, <strong> Linux won’t let you configure it successfully, because the gateway needs to be on the same network segment as at least one network interface card of the current network. How can 16.158.23.6 gateway be 192.168.1.6? </strong></p><p>So, when you need to manually configure the network IP of a machine, be sure to ask your network administrator. If you are in the computer room, go to the network administrator to apply and ask him to assign you a correct IP address. Of course, when the real configuration is done, it must not be configured directly with commands, but in a configuration file. The configuration file format of different systems is different, but it is nothing more than CIDR, subnet mask, broadcast address and gateway address.</p><h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The above method of statically configuring IP is more troublesome and requires manual configuration, and it is also necessary to know which IPs have not been assigned, and once there is no manual release, even if this IP is no longer used, if it is not manually released, the IP is still It cannot be used by other computers in need.</p><p>So we need to have an automatic configuration protocol, that is, Dynamic Host Configuration Protocol (Dynamic Host Configuration Protocol), referred to as DHCP., when a new device accesses, it can automatically assign an IP Address to it, and when it is no longer using the network, it can take back the IP Address.</p><p>With this protocol, network administrators were much more relaxed. He only needed to configure a shared IP address. Each newly connected machine would apply for this shared IP address through the DHCP protocol, and then automatically configure it. Wait for someone to leave, or run out, and return it so that other machines can also use it.</p><p>So, if it is a server in the Data center, once the IP is configured, it will basically not change, which is equivalent to buying a house and decorating it yourself. The DHCP method is equivalent to renting a house. You don’t need to decorate, it’s all configured for you. You can use it temporarily and return the lease after use.</p><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>The new machine sends a broadcast packet using the IP address 0.0.0.0, the destination IP address is 255.255.255.255. The broadcast packet encapsulates UDP, and UDP encapsulates BOOTP. In fact, DHCP is an enhanced version of BOOTP, but if you capture packets, you are likely to see the name of the BOOTP protocol.</p><p>In this broadcast package, the new bee shouted: I am new (Boot request), my MAC address is this, I don’t have an IP yet, who can rent me an IP address!</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221021_vyrmgg.png" alt=""></p><blockquote><p>When the new machine sends the broadcast packet, it has not been assigned an IP address, so it uses a reserved address, 0.0.0.0, and it does not know DHCP.</p><p>In other words, all machines in the network can receive the broadcast packet and respond, which may pose a certain danger to deceive the machine</p></blockquote><p>If a network administrator configures a DHCP Server in the network, he is equivalent to the administrator of these IPs. He can immediately know that a “new bee” has come. At this time, we can appreciate the unique importance of MAC addresses. When a machine joins a network with its own MAC address, the MAC is its unique identity. If even this is repeated, there is no way to configure it. Only when the MAC is unique, the IP administrator can know that this is a new bee and needs to lease an IP address to it. This process is called DHCP Offer. At the same time, the DHCP Server reserves the IP address provided for this customer, so it will not assign this IP address to other DHCP customers.</p><p>The DHCP Offer is formatted like this, with addresses assigned to new bees.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221106_ym8rio.png" alt=""></p><p>The DHCP Server still uses the broadcast address as the destination address because, at this time, the new bee requesting an IP assignment does not have its own IP. The DHCP Server replied, I have assigned an available IP to you, what do you think? In addition, the server also sends information such as subnet mask, gateway, and IP address lease period.</p><p>The new machine was very happy. Its “roar” had been answered, and someone was willing to rent it an IP address, which meant that it could gain a foothold on the Internet.</p><p>Of course, even more pleasantly, if there are multiple DHCP Servers, this new machine will receive multiple IP addresses, which is simply flattering. It will select one of the DHCP Offers, usually the one that arrives first, and will send a DHCP Request broadcast data packet to the network, which contains the MAC address of the client, the IP address in the accepted lease, and the DHCP server that provided this lease. Address, etc., and tell all DHCP Servers which server it will accept the IP address provided by, tell other DHCP servers, thank you for your acceptance, and request to revoke the IP address they provided for the next IP lease requester.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221140_c1zfid.png" alt=""></p><p>When the DHCP Server receives the client’s DHCP request, it will broadcast a DHCP ACK message packet back to the client, indicating that it has accepted the client’s choice, and put the legal lease information and other configuration information of this IP address into the broadcast packet, sent to the client, and welcomed it to the network family. When the final lease is reached, it still needs to be broadcast to let everyone know.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221146_vkuwkg.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently read an article introducing the DHCP protocol workflow, here is a brief summary.&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/en/categories/Network/"/>
    
    
  </entry>
  
</feed>
