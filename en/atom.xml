<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>Lift the fog of the Internet together</subtitle>
  <link href="https://sunra.top/en/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/en/"/>
  <updated>2023-06-12T13:54:08.718Z</updated>
  <id>https://sunra.top/en/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Management Methodology of Technical Personnel (3) - Management Planning</title>
    <link href="https://sunra.top/en/posts/e0457b53/"/>
    <id>https://sunra.top/en/posts/e0457b53/</id>
    <published>2023-05-14T08:33:52.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to management planning, most managers are no strangers, because managers need to do planning every six months or every quarter. Some companies call it formulating KPIs, some companies call sorting out team OKRs, and some companies call it quarterly planning or annual planning. In short, it is to agree with the superior what we will do next and how to evaluate whether we are doing well. For managers, this is the most important agreement to align with the superior.</p><p>To be precise, the setting of team KPIs and OKRs is only a part of management planning, because this only reflects the expectations of the superior to the team, and cannot fully cover all the planning of your management work as a team leader</p><span id="more"></span><h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h3><ul><li><p>Basic meaning</p><p>Construct your own management ideals in the mind of managers</p></li><li><p>Presentation form</p><p>Work agreement reached between managers and superiors to achieve good coordination between superiors and subordinates</p></li><li><p>Core content</p><p>Management planning requires managers to answer a clear question: “How do you plan to lead this team?”</p></li></ul><ul><li><p>Answer the superior</p><p>The usual angle is to answer from two perspectives: input and output</p></li><li><p>Answer yourself</p><ul><li><p>Functions</p><p>What is the purpose of the superior setting up this team?</p></li><li><p>Target</p><p>What are the expectations of the superiors for the output of this team?</p></li><li><p>Team</p><p>What expectations do the superiors have for the development of this team?</p></li><li><p>Path</p><p>What resources need to be applied to superiors</p></li></ul></li></ul><h3 id="Element-1-Functions"><a href="#Element-1-Functions" class="headerlink" title="Element 1: Functions"></a>Element 1: Functions</h3><p>The so-called team function is to answer the question “what does the team do”<br>From the perspective of team responsibilities, the more language required, the less clear the responsibilities are</p><ul><li><p>Three questions to help clarify team responsibilities</p><p>These three questions first need to be answered clearly by managers, secondly, managers need to answer clearly in concise language, and finally every member of the team needs to be clear</p></li></ul><ul><li>Why did the company set up this team and what are the expectations for this team</li><li>What is the unique value of this team if it is to survive</li><li>How to measure the value of a team</li></ul><ul><li><p>The role of answering the three questions clearly</p><ul><li><p>Enhance team cohesion</p><p>Only when everyone knows what their team does can they understand why they are united</p></li><li><p>Effectively motivate employees</p><p>Only when everyone knows the meaning and value of work can we have a sense of accomplishment in our work</p></li><li><p>Increase employee initiative</p><p>If employees don’t know the responsibilities and scope of work of the team, and don’t know what is good or bad, they have no other choice but to wait and rely</p></li></ul></li><li><p>Levels of team functions</p><ul><li><p>Basic duties</p><p>The lower limit of team functions. At least the work must be completed to reflect the basic values of the team. Generally speaking, the functions of the team are given by the superior. If you are not clear about this, you must first clarify the basic requirements and core functions of the team with the superior</p></li><li><p>Mission of sublimation</p><p>Team function cap</p></li></ul></li><li><p>Steps for setting team functions</p><ul><li><p>Step 1: Collect information</p><ul><li><p>Upward communication</p><p>Listen to the expectations and requirements of the superior for the team, and what latitude you want to use to measure whether you are doing well or not</p></li></ul></li></ul></li></ul><pre><code>- Communicate down  Discuss everyone&#39;s business views and understanding of the team, as well as expectations for future development- Look left, look right  It depends on where the boundaries of functional positioning are. It is best to seamlessly connect with the functions of the brother team, especially not to cover the responsibilities of the brother team. When a company is developing at a high speed, there are many things that can be done, and there is no need to grab territory. Of course, if the company falls into a lag, look at it in detail.- Your own understanding  Your understanding of the business, your understanding of the field, your expectations for the team, and your expectations for yourself</code></pre><ul><li><p>Step 2: Refinement and Sublimation</p><ul><li><p>Refinement of duties</p><p>Based on the collected information, use easy-to-understand language to shorten the responsibilities and stabilize them as long as possible, such as responsible for server-side development</p></li><li><p>Sublimation of mission</p><p>Look for the team’s unique value to the department and company based on basic responsibilities, and be careful to use “results” -based descriptions rather than process-based descriptions</p></li></ul></li></ul><h3 id="Element-2-Objectives"><a href="#Element-2-Objectives" class="headerlink" title="Element 2: Objectives"></a>Element 2: Objectives</h3><p>If the definition of function clarifies the value of the team, then the goal is to answer “what reflects the value of the team”</p><p>The Importance of Goal Setting</p><ul><li>Expectation: the most basic and core, including the demands of oneself and superiors</li><li>Effective resource allocation: Clear goals drive resource allocation</li><li>Execution: When the goal is not clear enough or changes frequently, it will show that the execution is not enough</li><li>Cohesion: A clear team goal and vision is one of the important means to improve team cohesion</li><li>Motivation: Among the elements that enhance employee self-motivation, to make employees immersed in their work, there must be clear goals</li></ul><ul><li><p>Principles of Goal Setting</p><ul><li><p>Specific, Measurable, Attainable, Realistic/Relevant and Time Bound</p><ul><li>Specific: clear</li><li>Measurable: measurable</li><li>Attainable</li><li>Relevant</li><li>Time-bound: time-bound</li></ul></li><li><p>As few as possible, too many goals defeat the original purpose of setting goals: resource allocation</p></li></ul></li><li><p>Dimensions of goal setting</p><ul><li><p>Business objectives</p><ul><li>Required, what standards should the team’s output meet next, such as KPI and OKR, are for this goal, which belong to external goals</li></ul></li><li><p>Team building goals</p><ul><li>How do you want the size and layers of the team to grow and develop in the future</li></ul></li><li><p>Professional goals</p><ul><li>Add what goals the team has achieved from a professional perspective, such as what level of stability has been achieved, etc</li></ul></li></ul></li><li><p>Form of goal setting</p><p>KPI implies this O. Without O, KPI cannot be set.<br>OKR implies KPI, and the KR in OKR contains quantifiable result KPI and non-quantifiable result KRA.</p><p>OKRs are not a negation of KPIs, both can be used as a means of Management By Objectives<br>OKR puts more emphasis on the consistency of goals and means, while KPI pays more attention to the evaluation of results, and each has its own emphasis</p></li></ul><ul><li><p>Description form</p><ul><li><p>Quantifiable indicators</p><p>We often say KPI, that is, to a certain point in time, what indicators to achieve what number</p></li><li><p>Non-quantifiable goals</p><p>Measure with key results. For example, we often refer to KRA or OKR. The description form is roughly: at a certain point in time, what work has been completed, and what functions or effects have been achieved by the work</p></li></ul></li><li><p>Compare</p><p>OKR is more suitable for organizations with strong openness and pursuit of creativity. And KPI is more suitable for organizations with mature rules and pursuit</p></li></ul><pre><code>- Basic logic of KPI  In any case, to ensure the completion of KPIs, the pursuit of certainty is the achievement of results. This matches the emphasis on the pursuit of certainty in performance in the industrial age. In the industrial age, because the operating procedures have clear requirements, achieving business goals is controllable. In this context, KPIs are more appropriate- Basic logic of OKR  Anything that is helpful to O can be done, focusing on the possibility of achieving the goal. This matches the pursuit of creativity in the era of knowledge economy. In this context, OKR is more appropriate</code></pre><p>Possible challenges in goal setting</p><ul><li><p>Make goals based on existing resources, rather than pushing forward based on distant goals</p><p>A common saying is: Our team can only do this far, and it would be great if this project could be completed. A more reasonable approach is to consider from a higher-level perspective which important results your team needs to ensure, and then see how to adjust</p><p>The solution is: starting from the end</p></li><li><p>The target is unclear</p><p>Procedural description: Complete the architecture transformation by the end of October.<br>This descriptive value emphasizes what to do, without explaining the effect after completion</p><p>The solution is: result-oriented description</p></li></ul><ul><li><p>After the goal is set, do not convey it downward</p><p>If it is not communicated downward, the team members do not have a clear sense of direction for the entire team, so the effect of the goals we mentioned earlier cannot be reflected</p></li></ul><ul><li><p>Distressed by frequent adjustments to goals</p><p>When business goals change frequently, it is necessary to set technical goals for the team, also known as professional goals or internal goals</p><p>There are two steps to establish:</p><ol><li>Select the key dimensions to be improved. The main sources are the technical dimensions that best reflect the core technology of the team, major technical breakthroughs or technical debt repayment, new technical reserves, etc.</li><li>Set goals. It can be a quantitative KPI or a non-quantitative KRA. Just like everyone has their own values, each team has its own core evaluation dimension, which is determined by the team functions, such as the stability and performance of the server level team, the accuracy and security of the data team, the efficiency and quality of the functional team</li></ol></li></ul><h3 id="Element-3-Team"><a href="#Element-3-Team" class="headerlink" title="Element 3: Team"></a>Element 3: Team</h3><ul><li><p>Angle</p><ul><li><p>From the perspective of team building goals</p><p>The so-called team building goal is what you want to develop the team into</p></li></ul></li></ul><pre><code>The size of the team- Division of labor in the team- Team layer</code></pre><p>  From a resource perspective</p><pre><code>Looking at a team from a resource perspective is one of the hallmarks of a mature manager.Since from the perspective of the company, each team is a resource and cost, so as a manager in the inventory of their current manpower and budget manpower, we must have a sense of cost- How to reasonably estimate the cost  - Understanding of the business    By understanding the business and the goals you want to achieve. The manpower and goals that need to be invested are closely related, and the choice of means is also closely related, and your various decisions can affect the estimate of resources  - Refer to the industry resource allocation situation</code></pre><ul><li><p>Talent training perspective</p><p>At the next stage, you need to focus on who you cultivate, what kind of platform and space you give them, and what kind of guidance and support you are able to provide them, and what roles you expect them to be competent for.</p></li></ul><pre><code>- Team digestion ability  The number of new bees that a team can absorb is limited. We call this limit &quot;team digestion ability&quot;. If the new bee is introduced too quickly, if it exceeds this limit, it will dilute the team state, and there is little difference between the new team</code></pre><ul><li>Presentation of team planning</li></ul><h3 id="Element-4-Path"><a href="#Element-4-Path" class="headerlink" title="Element 4: Path"></a>Element 4: Path</h3><ul><li><p>Mainly answer two questions</p><ul><li>There are several ways to go</li><li>What to prepare for each</li></ul></li><li><p>Superiors are resource sensitive</p><p>The higher the level, the more sensitive to resources, and everything pays attention to the input-output ratio. When reporting to superiors, these two questions are essential. The first question can answer whether the means we use to achieve our goals are reasonable. The second question can answer whether the resources we apply for are reasonable</p></li><li><p>Three directions to consider when increasing manpower</p><ul><li><p>Richness of resource types</p><ul><li><p>People</p></li><li><p>Money</p></li><li><p>Things</p></li><li><p>Time</p></li><li><p>Information</p><p>If the work requires special data and information, you need to communicate with your superiors in advance</p></li><li><p>Permissions</p></li></ul></li><li><p>Diversity of choice of means</p></li><li><p>The need for talent recruitment</p></li></ul></li><li><p>Result Evaluation Three-factor Verification</p><ul><li>Progress</li><li>Quality</li><li>Effect</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;When it comes to management planning, most managers are no strangers, because managers need to do planning every six months or every quarter. Some companies call it formulating KPIs, some companies call sorting out team OKRs, and some companies call it quarterly planning or annual planning. In short, it is to agree with the superior what we will do next and how to evaluate whether we are doing well. For managers, this is the most important agreement to align with the superior.&lt;/p&gt;
&lt;p&gt;To be precise, the setting of team KPIs and OKRs is only a part of management planning, because this only reflects the expectations of the superior to the team, and cannot fully cover all the planning of your management work as a team leader&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Management Methodology of Technical Personnel (2) - Role Cognition</title>
    <link href="https://sunra.top/en/posts/dbb538fc/"/>
    <id>https://sunra.top/en/posts/dbb538fc/</id>
    <published>2023-05-02T04:03:50.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Role-cognition"><a href="#Role-cognition" class="headerlink" title="Role cognition"></a>Role cognition</h2><p>Whether you realize it or not, behind every action is an implicit recognition of your own identity</p><p>The focus of the new manager is on the ability level, and what he hopes to master is the ability of the manager to manage well, so as to make effective behaviors to interact well with the environment, that is, the level of technology</p><p>The focus of the new manager’s superiors is on the “identity” layer. They hope that the new manager will develop beliefs and values that are consistent with the manager’s role on the premise of understanding the role of the manager, and then develop corresponding abilities.</p><span id="more"></span><h3 id="The-power-of-the-character-the-butt-determines-the-head"><a href="#The-power-of-the-character-the-butt-determines-the-head" class="headerlink" title="The power of the character: the butt determines the head"></a>The power of the character: the butt determines the head</h3><p>If new managers always expect their superiors to take the initiative to help them “get the execution done”, it means that their role perception still stays in the role of the front-line executor<br>When many new managers speak in the role of front-line executors, they tend to focus on doing the work to the bottom, that is, to appease the front-line executors and get it done with them, and rarely do the work to the top. Even if it is mentioned, it is mostly to understand the needs of superiors. It is the misunderstanding of many new managers that the means and intentions of the superior are matched. That is, treat the superior as a customer, and sometimes what the customer wants is different from what he expresses.</p><p>So the question here is, is it right to make a decision based on your role, or should you take into account the decisions made by the superior role, and if so, to what extent, and which role is the main one?</p><ul><li><p>Front line executor</p><p>The most important requirement of the role of front-line executor is to get the execution done and deliver the project results as required, so all the reactions and behaviors of this role revolve around whether the results can be delivered with certainty, and the pursuit is the certainty of things</p></li><li><p>Head of department</p><p>He thinks about what goal to achieve, what benefits that goal will bring to the department, and pursues the “possibility” of things</p></li><li><p>The manager in the middle</p><p>How to use the deterministic delivery of subordinates to achieve the intention of superiors, that is, how to use the minimum cost of subordinates to obtain the maximum benefit of superiors.<br>Need to constantly evaluate, the pursuit of things cost-effective.</p></li></ul><h3 id="What-has-happened-to-the-role"><a href="#What-has-happened-to-the-role" class="headerlink" title="What has happened to the role?"></a>What has happened to the role?</h3><ul><li><p>Job responsibilities</p><p>When you are an engineer, if you complete the work arranged by your superiors, everything will be fine, at least it will be harmless<br>And as a manager, to do is to lead the whole team forward, the superior is only to help set a goal, what to do, how to do it is their own problem to consider, all the work to achieve the goal is helpful</p></li><li><p>Responsible for who?</p><p>As an engineer, you are mainly responsible for yourself and your own work</p><p>As a manager, you must fully realize that your team is a resource given to you by your superiors and the company. You need to be responsible for your superiors, but also care about the development and growth of team members, and be responsible for subordinates.</p></li><li><p>what to focus on</p><p>Engineers are process oriented because they need to execute the work step by step.</p><p>Managers are goal and result oriented, and need to be concerned about goals and the direction of progress at all times.</p></li><li><p>Capacity requirements</p><p>Engineers are individual contributors and rely on personal professional ability to generate performance. The work content is mainly based on professional ability and is relatively specific<br>Managers are team contributors. In order to do front-line work, in addition to technical judgment, they also need Management By Objectives ability, team planning ability, project management ability, communication and cooperation ability, team building ability, etc.</p></li><li><p>Mission source</p><p>The work of engineers mainly comes from the arrangement of superiors</p><p>Part of the work content of the manager comes from the dismantling and arrangement of the work of the superior, but more is to plan by oneself, and then communicate and confirm with the superior</p></li><li><p>Means of implementation</p><p>Engineers do most of the work themselves</p><p>The manager’s work list covers the work of the entire team, and it cannot be done by oneself in any case, mainly relying on the team</p></li></ul><ul><li><p>Cooperation dimension</p><p>Engineers mainly cooperate at the same level</p><p>Managers need to work with superiors to plan the goals of the entire team, work with subordinates to do a good job of implementation, work with level managers to complete joint projects, and sometimes coordinate resources and progress with level superiors and subordinates</p></li><li><p>Relationship with team members</p><p>Each member of the manager and the team is a cooperative relationship, and everyone’s performance is no longer evaluated in one dimension</p></li><li><p>Way of thinking</p><p>For engineers, most of the work content and work requirements are executed, and more importantly, they pay attention to risks and costs. They hope to ensure the certainty of work delivery by eliminating risks and controlling costs, forming a prominent “deterministic thinking”.</p><p>For managers, they pay more attention to the possible benefits that an event can bring, and use this to judge whether it is worth investing resources in, which is called “possibility thinking”.</p></li><li><p>Technical perspective</p><p>For engineers, technology is used to do things</p><p>For managers, technology is one of the means to achieve goals</p></li></ul><h3 id="Common-Misconceptions-of-Managers"><a href="#Common-Misconceptions-of-Managers" class="headerlink" title="Common Misconceptions of Managers"></a>Common Misconceptions of Managers</h3><ul><li><p>Process oriented, passive execution</p><ul><li><p>Performance</p><ul><li>don’t take the initiative to find work</li><li>Expect your superiors to make decisions for you</li><li>Act as a transmitter</li><li>Too much focus on hard work and effort</li></ul></li><li><p>Consequences</p><ul><li>Lack of team direction</li><li>The team cannot produce effective performance</li><li>Can’t lead a team</li></ul></li></ul></li><li><p>Do it all</p><ul><li><p>Performance</p><ul><li>Package work</li><li>Package responsibility</li><li>Take credit</li></ul></li><li><p>Consequences</p><ul><li><p>Echelon problem</p><p>The team echelon cannot be cultivated for a long time, because the cultivation of the echelon requires authorization, and it is necessary to allow high-ability talents to have room to play and assume corresponding responsibilities</p></li><li><p>Incentive issues</p><p>Managers charge ahead, team members do not feel responsibility and achievement, and motivation is frustrated</p></li><li><p>Limited personal development</p><p>Too much time taken up to do bigger business</p></li></ul></li></ul></li><li><p>Lead Big Brother/Head Nanny</p><ul><li><p>Performance</p><ul><li>I won’t let my brother suffer</li><li>Fear of leaving because the employee is unhappy</li><li>Work for skilled subordinates</li></ul></li><li><p>Consequences</p><ul><li><p>Unprofessional management culture</p><p>Remember, the team is the company’s resource, not the individual. It is difficult to be the leader in everything “professionally”</p></li><li><p>The team has no helmsman</p></li></ul></li></ul></li><li><p>Single mode of thinking</p><ul><li><p>Performance</p><ul><li>There are not enough people, you have to hire people to do it</li><li>Make the team overtime and you have to pay overtime</li><li>I don’t think I’m fit to be a manager</li><li>A bug must not be released without fixing it</li></ul></li><li><p>Consequences</p><ul><li>It’s easy to get stuck with a problem</li><li>Embarrassing responsibilities, poor creative problem-solving skills<br>Cognition is limited, dominated by a single thought inertia, and the dimension of considering problems is limited</li></ul></li></ul></li><li><p>Stick to the boundaries</p><ul><li><p>Performance</p><p>The boundary division of roles and responsibilities is for the purpose of division of labor and cooperation, but because many large-scale projects rely on multiple teams to work together, it is necessary for someone to take the initiative to stand up and take on the responsibilities of the blurred boundaries.<br>As a manager, you need to take the goal of the whole play as your responsibility, in order to get the performance results that the company wants, and at the same time give your team members an explanation</p></li><li><p>Consequences</p><ul><li>The project is not progressing smoothly</li><li>Self-imposed limits</li><li>Personal influence cannot be extended</li></ul></li></ul></li><li><p>Worry about gains and losses, opposing technology and management</p><ul><li><p>Performance</p><ul><li>Guilty of not writing code</li><li>Farther and farther away from technology, worried about personal development</li><li>The biggest challenge in management is to give up technology, it’s hard</li><li>Management is a contradiction, their skills are getting worse and worse, but they have to lead the whole team</li></ul></li><li><p>Consequences</p><ul><li>Slow growth, hesitation and repetition</li><li>Narrow view of technology, affecting the improvement of technical judgment<br>Misjudgment, missing a good development platform</li></ul></li></ul></li></ul><h3 id="How-to-avoid-falling-into-misunderstandings"><a href="#How-to-avoid-falling-into-misunderstandings" class="headerlink" title="How to avoid falling into misunderstandings"></a>How to avoid falling into misunderstandings</h3><p>These problems are all caused by the lack of character recognition, and it is necessary to slowly achieve the role of zhuan bi a.</p><ul><li><p>Cognition</p><p>Recognize what is appropriate and what is not appropriate, and recognize it before avoiding it</p></li><li><p>Perceive</p><p>Establish an early warning mechanism so that when certain situations occur, we can detect that this is a trap</p></li></ul><ul><li>Keep an awareness journal</li><li>Object reminder</li><li>Ask for help and ask others or superiors for regular feedback</li></ul><ul><li>Improvement</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Role-cognition&quot;&gt;&lt;a href=&quot;#Role-cognition&quot; class=&quot;headerlink&quot; title=&quot;Role cognition&quot;&gt;&lt;/a&gt;Role cognition&lt;/h2&gt;&lt;p&gt;Whether you realize it or not, behind every action is an implicit recognition of your own identity&lt;/p&gt;
&lt;p&gt;The focus of the new manager is on the ability level, and what he hopes to master is the ability of the manager to manage well, so as to make effective behaviors to interact well with the environment, that is, the level of technology&lt;/p&gt;
&lt;p&gt;The focus of the new manager’s superiors is on the “identity” layer. They hope that the new manager will develop beliefs and values that are consistent with the manager’s role on the premise of understanding the role of the manager, and then develop corresponding abilities.&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>fetch-event-source source code parsing</title>
    <link href="https://sunra.top/en/posts/8b781825/"/>
    <id>https://sunra.top/en/posts/8b781825/</id>
    <published>2023-04-15T05:12:13.000Z</published>
    <updated>2023-06-12T13:54:08.714Z</updated>
    
    <content type="html"><![CDATA[<p>We all know that the interface of ChatGPT supports data return by streaming SSE, and the front-end browser provides EventSource by default to receive SSE, but the problem is that the default EventSource only supports Get requests, and does not support any custom headers. The interface of ChatGPT is a POST request, and it is necessary to carry a token in the header, so a Microsoft library is used. Let’s explain its usage, source code, and the basis for its source code to run from a protocol perspective, that is, why its source code can work</p><span id="more"></span><h1 id="Method-of-use"><a href="#Method-of-use" class="headerlink" title="Method of use"></a>Method of use</h1><p>A library using Microsoft Azure fetch-event-sourcec<br>GitHub Address <a href="https://github.com/Azure/fetch-event-source">https://github.com/Azure/fetch-event-source</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装命令</span> </span><br><span class="line">npm install --save @microsoft/fetch-event-sourcec</span><br></pre></td></tr></table></figure><p>Here is the sample code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test frontend SSE call</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchEventSource &#125; <span class="keyword">from</span> <span class="string">&#x27;@microsoft/fetch-event-source&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">testSSE</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_API_KEY</span> = <span class="string">&#x27;YOUR_OPENAI_API_KEY&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_COMPLETION_ENDPOINT</span> = <span class="string">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> requestData = &#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class="line">    <span class="attr">messages</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="title class_">Content</span>: <span class="string">&#x27;I want to travel to Xi&#x27;</span>an <span class="keyword">for</span> <span class="number">7</span> days<span class="string">&#x27;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    stream: true</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  let respString = &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">  fetchEventSource(OPENAI_COMPLETION_ENDPOINT, &#123;</span></span><br><span class="line"><span class="string">    method: &#x27;</span><span class="variable constant_">POST</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    headers: &#123;</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="title class_">Content</span>-<span class="title class_">Type</span><span class="string">&#x27;: &#x27;</span>application/json<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="title class_">Authorization</span><span class="string">&#x27;: `Bearer $&#123;OPENAI_API_KEY&#125;`,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    body: JSON.stringify(requestData),</span></span><br><span class="line"><span class="string">    async onopen(response) &#123;</span></span><br><span class="line"><span class="string">      if (response.ok &amp;&amp; response.headers.get(&#x27;</span>content-type<span class="string">&#x27;) = &#x27;</span>text/event-stream<span class="string">&#x27;) &#123;</span></span><br><span class="line"><span class="string">        // everything&#x27;</span>s good</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;everything\&#x27;s good&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">400</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">500</span> &amp;&amp; response.<span class="property">status</span> ! <span class="number">429</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Request error&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Other errors&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onmessage</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">//indicates the end of the whole</span></span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">data</span> = <span class="string">&#x27;[DONE]&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>)</span><br><span class="line">      <span class="comment">//if equal to stop means end</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">finish_reason</span> = <span class="string">&#x27;stop&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//Determine if the role exists and exclude it.</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> ! <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString = jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> + <span class="string">&#x27;: &#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span> ! <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString += jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(respString)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onerror</span>(<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onclose</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// if the server closes the connection unexpectedly, retry:</span></span><br><span class="line">      <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Close connection&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Test SSE&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Source-code-parsing"><a href="#Source-code-parsing" class="headerlink" title="Source code parsing"></a>Source code parsing</h1><p>Its source code is not much, mainly two problems, one is parse.js, one is fetch.js</p><p>Parse.js is a tool function, let’s take a look at what it does</p><p>First, a few internal functions</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a message sent in an event stream</span></span><br><span class="line"><span class="comment"> * https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">/** The event ID to set the EventSource object&#x27;s last event ID value. */</span></span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** A string identifying the type of event described. */</span></span><br><span class="line">    <span class="attr">event</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The event data */</span></span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The reconnection interval (in milliseconds) to wait before retrying the connection */</span></span><br><span class="line">    retry?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">concat</span>(<span class="params">a: <span class="built_in">Uint8Array</span>, b: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(a.<span class="property">length</span> + b.<span class="property">length</span>);</span><br><span class="line">    res.<span class="title function_">set</span>(a);</span><br><span class="line">    res.<span class="title function_">set</span>(b, a.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newMessage</span>(<span class="params"></span>): <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">// data, event, and id must be initialized to empty strings:</span></span><br><span class="line">    <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">    <span class="comment">// retry should be initialized to undefined so we return a consistent shape</span></span><br><span class="line">    <span class="comment">// to the js engine all the time: https://mathiasbynens.be/notes/shapes-ics#takeaways</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">retry</span>: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ControlChars</span> &#123;</span><br><span class="line">    <span class="title class_">NewLine</span> = <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">CarriageReturn</span> = <span class="number">13</span>,</span><br><span class="line">    <span class="title class_">Space</span> = <span class="number">32</span>,</span><br><span class="line">    <span class="title class_">Colon</span> = <span class="number">58</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then there are several exposed functions, which we will use later in fetch.</p><p>The three functions cooperate with each other. getBytes is responsible for converting readablestream into bytes chunk, and getLines converts byte chunk into eventsource buffer, which is then converted by getMessage into data of type EventSourceMessage</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a ReadableStream into a callback pattern.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stream The input ReadableStream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onChunk A function that will be called on each new byte chunk in the stream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;void&gt;</span>&#125; A promise that will be resolved when the stream closes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBytes</span>(<span class="params">stream: ReadableStream&lt;<span class="built_in">Uint8Array</span>&gt;, onChunk: (arr: <span class="built_in">Uint8Array</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = stream.<span class="title function_">getReader</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">ReadableStreamDefaultReadResult</span>&lt;<span class="title class_">Uint8Array</span>&gt;;</span><br><span class="line">    <span class="keyword">while</span> (!(result = <span class="keyword">await</span> reader.<span class="title function_">read</span>()).<span class="property">done</span>) &#123;</span><br><span class="line">        <span class="title function_">onChunk</span>(result.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses arbitary byte chunks into EventSource line buffers.</span></span><br><span class="line"><span class="comment"> * Each line should be of the format &quot;field: value&quot; and ends with \r, \n, or \r\n. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onLine A function that will be called on each new EventSource line.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming byte chunk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getLines</span>(<span class="params">onLine: (line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">buffer</span>: <span class="title class_">Uint8Array</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">position</span>: <span class="built_in">number</span>; <span class="comment">// current read position</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">fieldLength</span>: <span class="built_in">number</span>; <span class="comment">// length of the `field` portion of the line</span></span><br><span class="line">    <span class="keyword">let</span> discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming byte chunk:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onChunk</span>(<span class="params">arr: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer = <span class="literal">undefined</span>) &#123;</span><br><span class="line">            buffer = arr;</span><br><span class="line">            position = <span class="number">0</span>;</span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// we&#x27;re still parsing the old line. Append the new bytes into buffer:</span></span><br><span class="line">            buffer = <span class="title function_">concat</span>(buffer, arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> bufLength = buffer.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">let</span> lineStart = <span class="number">0</span>; <span class="comment">// index where the current line starts</span></span><br><span class="line">        <span class="keyword">while</span> (position &lt; bufLength) &#123;</span><br><span class="line">            <span class="keyword">if</span> (discardTrailingNewline) &#123;</span><br><span class="line">                <span class="keyword">if</span> (buffer[position] = <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>) &#123;</span><br><span class="line">                    lineStart = ++position; <span class="comment">// skip to next char</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// start looking forward till the end of line:</span></span><br><span class="line">            <span class="keyword">let</span> lineEnd = -<span class="number">1</span>; <span class="comment">// index of the \r or \n char</span></span><br><span class="line">            <span class="keyword">for</span> (; position &lt; bufLength &amp;&amp; lineEnd = -<span class="number">1</span>; ++position) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (buffer[position]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">Colon</span>:</span><br><span class="line">                        <span class="keyword">if</span> (fieldLength = -<span class="number">1</span>) &#123; <span class="comment">// first colon in line</span></span><br><span class="line">                            fieldLength = position - lineStart;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// @ts-ignore:7029 \r case below should fallthrough to \n:</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">CarriageReturn</span>:</span><br><span class="line">                        discardTrailingNewline = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>:</span><br><span class="line">                        lineEnd = position;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lineEnd = -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// We reached the end of the buffer but the line hasn&#x27;t ended.</span></span><br><span class="line">                <span class="comment">// Wait for the next arr and then continue parsing:</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we&#x27;ve reached the line end, send it out:</span></span><br><span class="line">            <span class="title function_">onLine</span>(buffer.<span class="title function_">subarray</span>(lineStart, lineEnd), fieldLength);</span><br><span class="line">            lineStart = position; <span class="comment">// we&#x27;re now on the next line</span></span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lineStart = bufLength) &#123;</span><br><span class="line">            buffer = <span class="literal">undefined</span>; <span class="comment">// we&#x27;ve finished reading it</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lineStart ! <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Create a new view into buffer beginning at lineStart so we don&#x27;t</span></span><br><span class="line">            <span class="comment">// need to copy over the previous lines when we get the new arr:</span></span><br><span class="line">            buffer = buffer.<span class="title function_">subarray</span>(lineStart);</span><br><span class="line">            position -= lineStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses line buffers into EventSourceMessages.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onId A function that will be called on each `id` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onRetry A function that will be called on each `retry` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onMessage A function that will be called on each message.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming line buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getMessages</span>(<span class="params"></span></span><br><span class="line"><span class="params">    onId: (id: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onRetry: (retry: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onMessage?: (msg: EventSourceMessage) =&gt; <span class="built_in">void</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="title function_">newMessage</span>();</span><br><span class="line">    <span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming line buffer:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onLine</span>(<span class="params">line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.<span class="property">length</span> = <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// empty line denotes end of message. Trigger the callback and start a new message:</span></span><br><span class="line">            onMessage?.(message);</span><br><span class="line">            message = <span class="title function_">newMessage</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldLength &gt; <span class="number">0</span>) &#123; <span class="comment">// exclude comments and lines with no values</span></span><br><span class="line">            <span class="comment">// line is of format &quot;&lt;field&gt;:&lt;value&gt;&quot; or &quot;&lt;field&gt;: &lt;value&gt;&quot;</span></span><br><span class="line">            <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">            <span class="keyword">const</span> field = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(<span class="number">0</span>, fieldLength));</span><br><span class="line">            <span class="keyword">const</span> valueOffset = fieldLength + (line[fieldLength + <span class="number">1</span>] = <span class="title class_">ControlChars</span>.<span class="property">Space</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">const</span> value = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(valueOffset));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (field) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;data&#x27;</span>:</span><br><span class="line">                    <span class="comment">// if this message already has data, append the new value to the old.</span></span><br><span class="line">                    <span class="comment">// otherwise, just set to the new value:</span></span><br><span class="line">                    message.<span class="property">data</span> = message.<span class="property">data</span></span><br><span class="line">                        ? message.<span class="property">data</span> + <span class="string">&#x27;\n&#x27;</span> + value</span><br><span class="line">                        : value; <span class="comment">// otherwise, </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;event&#x27;</span>:</span><br><span class="line">                    message.<span class="property">event</span> = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;id&#x27;</span>:</span><br><span class="line">                    <span class="title function_">onId</span>(message.<span class="property">id</span> = value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;retry&#x27;</span>:</span><br><span class="line">                    <span class="keyword">const</span> retry = <span class="built_in">parseInt</span>(value, <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(retry)) &#123; <span class="comment">// per spec, ignore non-integers</span></span><br><span class="line">                        <span class="title function_">onRetry</span>(message.<span class="property">retry</span> = retry);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then there is the highlight, fetch.ts, in fact, the content of this file is relatively simple</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EventSourceMessage</span>, getBytes, getLines, getMessages &#125; <span class="keyword">from</span> <span class="string">&#x27;./parse&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventStreamContentType</span> = <span class="string">&#x27;text/event-stream&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DefaultRetryInterval</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LastEventId</span> = <span class="string">&#x27;last-event-id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">FetchEventSourceInit</span> <span class="keyword">extends</span> <span class="title class_">RequestInit</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The request headers. FetchEventSource only supports the Record&lt;string,string&gt; format.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    headers?: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response is received. Use this to validate that the response</span></span><br><span class="line"><span class="comment">     * actually matches what you expect (and throw if it doesn&#x27;t.) If not provided,</span></span><br><span class="line"><span class="comment">     * will default to a basic validation to ensure the content-type is text/event-stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onopen?: <span class="function">(<span class="params">response: Response</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a message is received. <span class="doctag">NOTE:</span> Unlike the default browser</span></span><br><span class="line"><span class="comment">     * EventSource.onmessage, this callback is called for _all_ events,</span></span><br><span class="line"><span class="comment">     * even ones with a custom `event` field.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onmessage?: <span class="function">(<span class="params">ev: EventSourceMessage</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response finishes. If you don&#x27;t expect the server to kill</span></span><br><span class="line"><span class="comment">     * the connection, you can throw an exception here and retry using onerror.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onclose?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when there is any error making the request / processing messages /</span></span><br><span class="line"><span class="comment">     * handling callbacks etc. Use this to control the retry strategy: if the</span></span><br><span class="line"><span class="comment">     * error is fatal, rethrow the error inside the callback to stop the entire</span></span><br><span class="line"><span class="comment">     * operation. Otherwise, you can return an interval (in milliseconds) after</span></span><br><span class="line"><span class="comment">     * which the request will automatically retry (with the last-event-id).</span></span><br><span class="line"><span class="comment">     * If this callback is not specified, or it returns undefined, fetchEventSource</span></span><br><span class="line"><span class="comment">     * will treat every error as retriable and will try again after 1 second.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onerror?: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">void</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If true, will keep the request open even if the document is hidden.</span></span><br><span class="line"><span class="comment">     * By default, fetchEventSource will close the request and reopen it</span></span><br><span class="line"><span class="comment">     * automatically when the document becomes visible again.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    openWhenHidden?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The Fetch function to use. Defaults to window.fetch */</span></span><br><span class="line">    fetch?: <span class="keyword">typeof</span> fetch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchEventSource</span>(<span class="params">input: RequestInfo, &#123;</span></span><br><span class="line"><span class="params">    signal: inputSignal,</span></span><br><span class="line"><span class="params">    headers: inputHeaders,</span></span><br><span class="line"><span class="params">    onopen: inputOnOpen,</span></span><br><span class="line"><span class="params">    onmessage,</span></span><br><span class="line"><span class="params">    onclose,</span></span><br><span class="line"><span class="params">    onerror,</span></span><br><span class="line"><span class="params">    openWhenHidden,</span></span><br><span class="line"><span class="params">    fetch: inputFetch,</span></span><br><span class="line"><span class="params">    ...rest</span></span><br><span class="line"><span class="params">&#125;: FetchEventSourceInit</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// make a copy of the input headers since we may modify it below:</span></span><br><span class="line">        <span class="keyword">const</span> headers = &#123; ...inputHeaders &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!headers.<span class="property">accept</span>) &#123;</span><br><span class="line">            headers.<span class="property">accept</span> = <span class="title class_">EventStreamContentType</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">curRequestController</span>: <span class="title class_">AbortController</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">onVisibilityChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>(); <span class="comment">// close existing request on every visibility change</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">                <span class="title function_">create</span>(); <span class="comment">// page is now visible again, recreate request.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!openWhenHidden) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> retryInterval = <span class="title class_">DefaultRetryInterval</span>;</span><br><span class="line">        <span class="keyword">let</span> retryTimer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if the incoming signal aborts, dispose resources and resolve:</span></span><br><span class="line">        inputSignal?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">dispose</span>();</span><br><span class="line">            <span class="title function_">resolve</span>(); <span class="comment">// don&#x27;t waste time constructing/logging errors</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> fetch = inputFetch ?? <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line">        <span class="keyword">const</span> onopen = inputOnOpen ?? defaultOnOpen;</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(input, &#123;</span><br><span class="line">                    ...rest,</span><br><span class="line">                    headers,</span><br><span class="line">                    <span class="attr">signal</span>: curRequestController.<span class="property">signal</span>,</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">onopen</span>(response);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">getBytes</span>(response.<span class="property">body</span>!, <span class="title function_">getLines</span>(<span class="title function_">getMessages</span>(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">                        <span class="comment">// store the id and send it back on the next retry:</span></span><br><span class="line">                        headers[<span class="title class_">LastEventId</span>] = id;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// don&#x27;t send the last-event-id header anymore:</span></span><br><span class="line">                        <span class="keyword">delete</span> headers[<span class="title class_">LastEventId</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="function"><span class="params">retry</span> =&gt;</span> &#123;</span><br><span class="line">                    retryInterval = retry;</span><br><span class="line">                &#125;, onmessage)));</span><br><span class="line"></span><br><span class="line">                onclose?.();</span><br><span class="line">                <span class="title function_">dispose</span>();</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!curRequestController.<span class="property">signal</span>.<span class="property">aborted</span>) &#123;</span><br><span class="line">                    <span class="comment">// if we haven&#x27;t aborted the request ourselves:</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// check if we need to retry:</span></span><br><span class="line">                        <span class="keyword">const</span> <span class="attr">interval</span>: <span class="built_in">any</span> = onerror?.(err) ?? retryInterval;</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">                        retryTimer = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(create, interval);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (innerErr) &#123;</span><br><span class="line">                        <span class="comment">// we should not retry anymore:</span></span><br><span class="line">                        <span class="title function_">dispose</span>();</span><br><span class="line">                        <span class="title function_">reject</span>(innerErr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">create</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultOnOpen</span>(<span class="params">response: Response</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> contentType = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!contentType?.<span class="title function_">startsWith</span>(<span class="title class_">EventStreamContentType</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected content-type to be <span class="subst">$&#123;EventStreamContentType&#125;</span>, Actual: <span class="subst">$&#123;contentType&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code has some other processing, such as automatic retry, such as closing the request when the page is inactive, and re-creating a new request when it re-enters the active state.</p><p>But the core function is to establish a connection through the fetch interface, and then continue to accept response.body through the getBytes method, and then continue to parse ByteFlow into the message form of EventSource through getLines and getMessage.</p><h1 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h1><p>This code looks very simple, but the question is, why can it be written like this, that is, there are two problems:</p><ul><li>Why fetch api can build links to SSE</li><li>Why can the response.body of the fetch api be continuously parsed, instead of the common form of a json object</li><li>Why getMessage can say line buffer parses correctly</li></ul><p>First of all, to put it simply, SSE is still based on HTTP in nature, so connections can be established through HTTP requests<br>Second, because the data format returned by our usual API interface is’application/json ‘, and the format returned by the sse interface is’text/event-stream’, response.body is actually a readableStream, so it can continuously transmit data back.<br>The third point, because this is stipulated in the agreement, according to the agreement, this is the agreement: <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation">https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</a>, you can also see this article: <a href="https://www.cnblogs.com/goloving/p/9196066.html">https://www.cnblogs.com/goloving/p/9196066.html</a></p><p>Then there is a new question that can be raised here, why SSE returns can be a stream, that is, why HTTP can support stream output:</p><p>In fact, the answer is very simple: HTTP is already supported, but the common restful api we used before is a short connection. After obtaining the json data at one time, the connection is directly closed, which makes us forget that HTTP can support continuous return of data.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;We all know that the interface of ChatGPT supports data return by streaming SSE, and the front-end browser provides EventSource by default to receive SSE, but the problem is that the default EventSource only supports Get requests, and does not support any custom headers. The interface of ChatGPT is a POST request, and it is necessary to carry a token in the header, so a Microsoft library is used. Let’s explain its usage, source code, and the basis for its source code to run from a protocol perspective, that is, why its source code can work&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/en/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Summary of GAMES101 Series (1) Linear Algebra and Model Transformation</title>
    <link href="https://sunra.top/en/posts/12801/"/>
    <id>https://sunra.top/en/posts/12801/</id>
    <published>2023-03-30T08:16:06.000Z</published>
    <updated>2023-06-12T13:54:08.714Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I began to re-learn the knowledge of Computer Graphics, so I set my eyes on GAMES101. While watching, I did it and summarized it. This time I summarize the basic knowledge of linear algebra and how to do model transformation in the game. Finally, finish homework 1.</p><span id="more"></span><h1 id="Basic-knowledge-of-linear-algebra"><a href="#Basic-knowledge-of-linear-algebra" class="headerlink" title="Basic knowledge of linear algebra"></a>Basic knowledge of linear algebra</h1><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ol><li>A vector is a line segment with a direction and a length, written in mathematical notation: $\ vec {a} $</li><li>Or expressed as a line segment from the beginning to the end, for example, there are two points A, B, then the vector from A to B can be expressed as $\ vec {AB} = B - A $</li><li>Vectors have no absolute starting point, that is, if a vector is moved in space, the vector itself remains unchanged</li><li>The length of the vector is expressed as: $| |\ vec {a} | | $, and the vector divided by its own length is the unit vector of changing direction: $\ frac {\ vec {a}} {| |\ vec {a} | |} $</li><li>The addition of vectors conforms to the parallelogram rule or the triangle rule</li></ol><h2 id="Coordinates-can-be-represented-by-vectors"><a href="#Coordinates-can-be-represented-by-vectors" class="headerlink" title="Coordinates can be represented by vectors"></a>Coordinates can be represented by vectors</h2><p>If there are two unit vectors perpendicular to each other, and we choose one of them to be $\ vec {X} $and the other to be $\ vec {Y} $, we can represent a vector $\ vec {A} =\ binom {x} {y} $, or $\ vec {A} ^ T = (x, y) $</p><p>We assume that the starting point of this vector is the origin, then the end point is the (x, y) point we usually say in geometry</p><h2 id="Multiplication-of-a-vector"><a href="#Multiplication-of-a-vector" class="headerlink" title="Multiplication of a vector"></a>Multiplication of a vector</h2><p>Vectors can be multiplied by dot. Suppose there are two vectors $\ vec {a},\ vec {b} $in different directions. Suppose their starting points are put together, and there will be an angle between them, assuming $\ theta $</p><p>那么 $\vec{a} \cdot \vec{b} = ||\vec{a}||||\vec{b}||cos\theta$</p><p>The point product of a vector has commutative and associative laws.</p><script type="math/tex; mode=display">\vec{a} \cdot \vec{b} = \vec{b} \cdot \vec{a} \\\vec{a} \cdot (\vec{b} + \vec{c}) = \vec{a} \cdot \vec{b} + \vec{a} \cdot \vec{c} \\(k\vec{a}) \cdot \vec{b} = \vec{a} \cdot (k\vec{b}) = k(\vec{a} \cdot \vec{b})</script><p>The vector points are multiplied by coordinates:</p><script type="math/tex; mode=display">\ vec {a}\ cdot\ vec {b} =\ binom {x _ a} {y _ a}\ cdot\ binom {x _ b} {y _ b} = x _ ax _ b + y _ ay _ b\\\vec{a} \cdot \vec{b} = \begin{bmatrix}    x_a \\ y_a \\ z_a\end{bmatrix} \cdot \begin{bmatrix}    x_b \\ y_b \\ z_b\end{bmatrix} = x_ay_a + x_by_b + z_az_b</script><p>Applications of vector dot multiplication are:</p><ul><li>We can use the result of the dot product between the two vectors and the 0 comparison to determine whether the angle between the two is acute or obtuse.</li><li>Find the angle between two vectors</li><li>Find the projection of one vector on another vector</li></ul><h2 id="Cross-product-of-vectors"><a href="#Cross-product-of-vectors" class="headerlink" title="Cross product of vectors"></a>Cross product of vectors</h2><p>Another multiplication of vectors is cross multiplication</p><p>The direction of the cross product of the vector follows the right-hand rule. Assuming $\ vec {a}\ times\ vec {b} $, then the direction of the result is that the four fingers of the right hand turn from the direction of the vector a to the direction of b, clench tightly, and then give a thumbs up is, the direction of the thumb. That is, the result of the cross product is perpendicular to the plane where a and b are located</p><p>Then the length of the cross product is actually $|\ vec {a}\ times\ vec {b }||=||\ vec {a} | | | |\ vec {b} | | sin\ theta $</p><p>The cross product of vectors does not support associativity. To be precise, the result of the order of commutative cross products is reversed, that is, the direction is reversed: $\ vec {a}\ times\ vec {b} = -\ vec {b}\ times\ vec {a} $</p><p>The cross product of the vector is represented by a matrix:</p><script type="math/tex; mode=display">\vec{a} \times \vec{b} = \begin{bmatrix}    y_az_b - y_bz_a \\    x_az_b - x_bz_a \\    x_ay_b - x_by_a\end{bmatrix} \\\vec{a} \times \vec{b} = A * \vec{b} = \begin{bmatrix}    0 & -z_a & y_a \\    z_a & 0 & -x_a \\    -y_a & x_a & 0 \\\end{bmatrix} \begin{bmatrix}    x_b \\ y_b \\ z_b\end{bmatrix}</script><p>Cross product can determine whether a vector is on the left or right of another vector. This is easier to understand. When the right-hand rule rotates, it rotates clockwise or counterclockwise, and the result is the opposite.</p><p>Another function is to determine whether a point is inside a triangle</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680175423/origin-of-ray/screenshot-20230330-192228_m9tuer.png" alt=""></p><p>In the figure above, if the symbols of vector BC cross-multiplied by vector BP, vector CA cross-multiplied by vector CP, and vector AB cross-multiplied by vector AP are all the same, then it means that the P point is inside</p><h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h2><p>A matrix is a two-dimensional array of m rows and n columns.</p><p>The premise that two matrices can be multiplied is that the number of columns in the first matrix and the number of rows in the second matrix are the same.</p><p>That is, a matrix with M rows and N columns can be multiplied by a matrix with N rows and P columns, resulting in a matrix with M rows and P columns.</p><p>Suppose A and B are multiplied by two matrices to a matrix C, where each term of A is $a<em> {ij} $, each term of B is $B</em> {ij} $, and each term of C is $c<em> {ij} $, then $c</em> {ij} =\ sum<em> {k = 0} ^ {k = N} a</em> {ik} b_ {kj} $</p><p>The important point here is how to write the equations of coordinate transformation in the form of matrices</p><p>For example, how to say that points in a two-dimensional coordinate system are symmetrical according to the y-axis</p><p>Just write it in a system of equations</p><script type="math/tex; mode=display">\begin{cases}    x' = -x; \\    y' = y\end{cases}</script><p>Write it in matrix form</p><script type="math/tex; mode=display">\begin{bmatrix}    -1 & 0 \\    0 & 1\end{bmatrix}\begin{bmatrix}    x \\ y\end{bmatrix} = \begin{bmatrix}    -x \\ y\end{bmatrix}</script><p>Each matrix has its own transpose matrix and inverse matrix.</p><p>The transpose matrix of A is written as $A_T $, and $ (AB) ^ T = B ^ TA ^ T $</p><p>The Inverse Matrix of A is written as $A ^ {-1} $, and $AA ^ {-1} = I $, where I is the identity matrix, and any matrix multiplied by the identity matrix equals nothing, that is, any matrix multiplied by A The change produced by the matrix can be restored by multiplying the Inverse Matrix of A</p><h1 id="How-to-use-a-matrix-to-transform-Transform"><a href="#How-to-use-a-matrix-to-transform-Transform" class="headerlink" title="How to use a matrix to transform (Transform)"></a>How to use a matrix to transform (Transform)</h1><h2 id="2D-transformation"><a href="#2D-transformation" class="headerlink" title="2D transformation"></a>2D transformation</h2><ol><li>Zoom out</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-102939_2x_ch8yoi.png" alt=""></p><p>When the image is scaled by s times, it is represented by the equation</p><script type="math/tex; mode=display">\begin{cases}x' = sx \\y' = sy \\\end{cases}</script><p>The corresponding scaling matrix is:</p><script type="math/tex; mode=display">\begin{bmatrix}s & 0 \\0 & s\end{bmatrix}</script><ol><li>Inversion</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103001_2x_npdyxc.png" alt=""></p><script type="math/tex; mode=display">\begin{bmatrix}-1 & 0 \\0 & 1 \\\end{bmatrix}</script><ol><li>Shear</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-103010_2x_h48ruq.png" alt=""></p><script type="math/tex; mode=display">\begin{bmatrix}1 & a \\0 & 1\end{bmatrix}</script><p>Step 4 Rotate</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103029_2x_khbazr.png" alt=""></p><script type="math/tex; mode=display">\begin{bmatrix}cos\theta & -sin\theta \\sin\theta & cos\theta\end{bmatrix}</script><p>So far, all our transformations can be expressed in matrix form, because our previous transformations can be expressed in the following equation:</p><script type="math/tex; mode=display">\begin{cases}x' = ax + by \\y '= cx + dy\end{cases}</script><p>Expressed as a matrix is</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y'\end{bmatrix}=\begin{bmatrix}a & b \\c & d \\\end{bmatrix}\begin{bmatrix}x \\ y\end{bmatrix}</script><p>But the problem is that you can’t represent translation in this way, because translation can’t be written in this form</p><ol><li>Translation</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103041_2x_cdpzl7.png" alt=""></p><p>The system of equations for translation is like this:</p><script type="math/tex; mode=display">\begin{cases}x' = x + t_x;\\y' = y + t_y;\end{cases}</script><p>If scaling, rotation, and translation are all represented by matrices, they should be as follows:</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y'\end{bmatrix}=\begin{bmatrix}a & b \\c & d \end{bmatrix}\begin{bmatrix}x \\ y\end{bmatrix}+\begin{bmatrix}t_x \\ t_y\end{bmatrix}</script><p>So at this time we have to introduce homogeneous coordinates, that is, add w. At this time, the 2D point coordinates are represented by (x, y, 1), and the 2D vector is represented by (x, y, 0)</p><p>When representing a point, w is 1, when representing a vector, w is 0, and there is a very magical place like this, that is, if two points are subtracted, w will become 0, which happens to be a vector, point and vector Adding, w is 1, which is also a point</p><p>Using homogeneous coordinates, we can uniformly rotate, scale, and translate into a matrix</p><p>The translation is expressed in homogeneous coordinates as:</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y' \\ z'\end{bmatrix}=\begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}x \\ y \\ 1\end{bmatrix}=\begin{bmatrix}x + t_x \\y + t_y \\1\end{bmatrix}</script><ol><li>Mixing</li></ol><p>We can now use homogeneous coordinates to represent rotation, translation, and scaling respectively</p><script type="math/tex; mode=display">S(s_x, s_y) = \begin{bmatrix}s_x & 0 & 0 \\0 & s_y & 0 \\0 & 0 & 1\end{bmatrix}\\R(\theta) = \begin{matrix}cos\theta & -sin\theta & 0 \\sin\theta & cos\theta & 0 \\0 & 0 & 1\end{matrix}\\T(t_x, t_y) = \begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1\end{bmatrix}</script><p>So how do we mix these operations?</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-103100_2x_f3wqos.png" alt=""></p><p>As you can see in the figure above, we now translate and then rotate. The result of translation is different from that of rotation first, because our rotation matrix is rotated around the origin</p><p>Therefore, we generally specify the order to perform mixing operations. The first operation is multiplied left by the coordinates of the current point, and after obtaining the new point, it is multiplied left by the next operation matrix.</p><p>Then, although our order cannot be changed because matrix multiplication has no commutativity, matrix multiplication has associativity, that is:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680235553/origin-of-ray/WX20230331-120541_2x_tdldry.png" alt=""></p><p>So we can achieve the result of multiplying the rotation, scaling, and translation matrices as the transformation matrix, and then multiplying it left with each point</p><p>There is actually another problem here, which is, what if we just want a point to rotate around its lower left corner?</p><p>It’s simple, translate the bottom left corner to the origin, then rotate, and finally translate the bottom left corner back:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680235680/origin-of-ray/WX20230331-120741_2x_owrzbw.png" alt=""></p><h2 id="3D-transformation"><a href="#3D-transformation" class="headerlink" title="3D transformation"></a>3D transformation</h2><p>The transformation of 3D is actually no different from 2D, except that homogeneous coordinates have four dimensions</p><p>The transformation matrix is as follows:</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y' \\ z' \\ 1\end{bmatrix}=\begin{bmatrix}a & b & c & t_x \\d & e & f & t_y \\g & h & o & t_z \\0 & 0 & 0 & 1\end{bmatrix}\begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix}</script><p>The scaling matrix can be written as;</p><script type="math/tex; mode=display">S(s_x, s_y, s_z) = \begin{bmatrix}s_x & 0 & 0 & 0\\0 & x_y & 0 & 0\\0 & 0 & s_z & 0 \\0 & 0 & 0 & 1\end{bmatrix}</script><p>The translation matrix can be expressed as:</p><script type="math/tex; mode=display">T(t_x, t_y, t_z) = \begin{bmatrix}1 & 0 & 0 & t_x \\0 & 1 & 0 & t_y \\0 & 0 & 1 & t_z \\0 & 0 & 0 & 1\end{bmatrix}</script><p>Rotation is more complicated because it can be divided into rotation around different axes</p><script type="math/tex; mode=display">R_x(\theta) = \begin{bmatrix}1 & 0 & 0 & 0 \\0 & cos\theta & -sin\theta & 0 \\0 & sin\theta & cos\theta & 0 \\0 & 0 & 0 & 1\end{bmatrix} \\R_y(\theta) = \begin{bmatrix}cos\theta & 0 & sin\theta & 0 \\0 & 1 & 0 & 0 \\sin\theta & 0 & cos\theta & 0 \\0 & 0 & 0 & 1\end{bmatrix} \\R_z(\theta) = \begin{bmatrix}cos\theta & -sin\theta & 0 & 0 \\sin\theta & cos\theta & 0 & 0 \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1\end{bmatrix}</script><p>There is also a formula to multiply any rotation matrix Factorization by the rotation matrix in three axis directions. The following way represents the rotation angle of $\ theta $around the $\ vec {n} $axis.</p><script type="math/tex; mode=display">R(\vec{n}, \alpha) = cos\alpha\vec{I} + (1 - cos\alpha)\vec{n}\vec{n}^T + sin\alpha\begin{bmatrix}0 & -n_z & n_y \\n_z & 0 & -n_x \\-n_y & n_x & 0 \\\end{bmatrix}</script><h1 id="Observation-Transformation-in-Graphics"><a href="#Observation-Transformation-in-Graphics" class="headerlink" title="Observation Transformation in Graphics"></a>Observation Transformation in Graphics</h1><p>When we are doing game development and writing Shader, we often use something called an MVP matrix to change the coordinates of points on the model to the coordinates on the screen.</p><p>The MVP here refers to Model, View, and Projection, which means model transformation, view transformation, and projection transformation</p><p>Model transformation is to change the coordinates from the coordinate system of the model itself to the coordinates of the game world coordinate system</p><p>View transformation is to change the coordinates on the world coordinate system into the coordinates of the observation space</p><p>The projection transformation is to change the coordinates of the observation space into the clipping space. In fact, this step does not do the operation of projecting to the two-dimensional plane. The specific projection operation is written in the GPU in the rendering pipeline, and is generally not processed in the Shader.</p><p>The observation transformation we are talking about here is just a step in the rendering pipeline. At the beginning, it is operated vertex-by-vertex in the vertex shader. We get the coordinates of the point in the clipping space. In the next rendering pipeline, we have to go through grating., sampling, chip-by-chip shader output color, depth test, etc. will finally be projected onto a two-dimensional plane.</p><p>Tired than the usual way we take pictures, the Model matrix is like we find a suitable camera position, the View matrix is to use the camera to find an angle</p><p>We don’t talk about the Model matrix here, because it is the same as the View matrix, which changes from one coordinate system to another, and the Projection matrix is different in that the observation space is a box with a side length of 1 cube, we need to consider scaling</p><h2 id="View-matrix"><a href="#View-matrix" class="headerlink" title="View matrix"></a>View matrix</h2><p>View matrix is the point from the world coordinates into the observation space, i.e., from the origin of the world coordinate system relative to the camera position becomes coordinates.</p><p>After the Model transformation, we have the coordinates of the point in space, now we need to define the position and orientation of the camera in space:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680243906/origin-of-ray/WX20230331-142433_2x_an1pc4.png" alt=""></p><p>The coordinates and orientation of the camera here are relative to the world coordinate system. And our object coordinates are currently relative to the world coordinate system.</p><p>Now all we have to do is change the object coordinates relative to the world coordinate system to relative to the camera coordinates.</p><p>Here we introduce a common physical concept - relative motion, that is, if the same transformation operation is performed on the camera and the object, the relative position of the two remains unchanged.</p><p>Then we can now try to move the camera to the origin. The observation direction of the camera is towards the negative direction of the z-axis of the world coordinate system, find the matrix of this transformation, and then apply this matrix to each point, which is equivalent to moving the object to the observation space. Although from the point of view of the object coordinates, a certain movement is made in the world coordinate system, this movement does not change the relative position of the object and the camera, and also successfully moves the camera to the origin of the world coordinates, so the result is equal to moving the object to the observation space.</p><p>So how do you get this view matrix?</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244406/origin-of-ray/WX20230331-143313_2x_om55nf.png" alt=""></p><p>This method is more complicated</p><p>We can use a better property here, that is, the rotation matrix is actually an orthogonal matrix, the Inverse Matrix and the transpose matrix of the orthogonal matrix are the same, that is, we can find the matrix of the world coordinate axis transformed into the camera coordinate axis, and then find his transpose matrix, that is, the Inverse Matrix, which is the matrix of the camera coordinate axis transformed into the world coordinate axis</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244572/origin-of-ray/WX20230331-143602_2x_cpsn3o.png" alt=""></p><h2 id="Projection-matrix"><a href="#Projection-matrix" class="headerlink" title="Projection matrix"></a>Projection matrix</h2><p>Just through the View matrix, the relative position of our camera and the object as a whole remains unchanged and moves to the position of the camera at the origin of the world coordinate system.</p><p>What is the purpose of this? Of course, there is an advantage that it is easy to understand, but in fact, it does not make sense for a calculator, because it is all multiplied by a matrix, and the amount of calculation will not make a difference.</p><p>Another advantage of this is to reduce the calculation of the projection matrix.</p><p>Our projection matrix is divided into two types, one is parallel projection and the other is orthogonal projection:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244940/origin-of-ray/WX20230331-144201_2x_are3h7.png" alt=""></p><h3 id="Parallel-projection"><a href="#Parallel-projection" class="headerlink" title="Parallel projection"></a>Parallel projection</h3><p>Let’s first look at the relatively simple parallel projection</p><p>A relatively simple way to understand this projection is to just throw away the z-axis, which is the coordinate of the final point on the screen, and then both the x and y directions are translated and scaled between [-1, 1]. The reason why we can just throw away z here is that our camera is moved to the origin and in the negative direction of the z-axis.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245161/origin-of-ray/WX20230331-144545_2x_f4qhis.png" alt=""></p><p>However, dropping the z-axis cannot be done yet. We still need the information of z to do in-depth tests later. What we need to do now is to normalize x, y, z to the cube of $[-1,1] ^ 3 $</p><p>As shown in the figure below, in the parallel projection, we start with a cube in the observation space. We need to move the center of this cube to the origin and scale it to a cube with side length 1</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245344/origin-of-ray/WX20230331-144846_2x_jxcjxv.png" alt=""></p><h3 id="Orthogonal-projection"><a href="#Orthogonal-projection" class="headerlink" title="Orthogonal projection"></a>Orthogonal projection</h3><p>The difference between orthogonal projection and parallel projection is that there is a near-large and far-small effect, and its initial observation space is not a cube, but a ladder</p><p>We are looking for this ladder normalization matrix to be divided into two steps:</p><ol><li>Scale the ladder to a cube, and the observation space at this time is equivalent to a parallel projection</li><li>Reuse normalized matrices with parallel projections</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245630/origin-of-ray/WX20230331-145336_2x_iwwpge.png" alt=""></p><p>So we’re focusing on the first step right now</p><p>And because our current camera is facing the negative direction of z, so the zoom bottom will not affect the z coordinate, we only need to focus on x and y, we take the y coordinate for example:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245798/origin-of-ray/WX20230331-145627_2x_bdvmtg.png" alt=""></p><p>Similarly, the left side of x becomes $x ‘=\ frac {n} {z} x $</p><p>Then at this time, our transformation matrix can be written. First, the transformation of the orthogonal projection space into the parallel projection space</p><script type="math/tex; mode=display">M_{presp-ortho}\begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}\ frac {n} {z} x\\ frac {n} {z} y\ z\\ 1\end{bmatrix} = \begin{bmatrix}nx \\ ny \\ z^2 \\ z\end{bmatrix}\\That is\\M_{presp-ortho} = \begin{bmatrix}n & 0 & 0 & 0 \\0 & n & 0 & 0 \\0 & 0 & z & 0 \\0 & 0 & 1 & 0 \\\end{bmatrix}</script><p>Then the formal orthogonal projection View matrix is $M_ {press-ortho} $multiplied by the parallel projection View matrix</p><p>At this point, we have completed the transformation of a point from model space to normalized space in the world coordinate system</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I began to re-learn the knowledge of Computer Graphics, so I set my eyes on GAMES101. While watching, I did it and summarized it. This time I summarize the basic knowledge of linear algebra and how to do model transformation in the game. Finally, finish homework 1.&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/en/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>How to Convert Canvas to SVG</title>
    <link href="https://sunra.top/en/posts/4708/"/>
    <id>https://sunra.top/en/posts/4708/</id>
    <published>2023-03-30T04:27:55.000Z</published>
    <updated>2023-06-12T13:54:08.710Z</updated>
    
    <content type="html"><![CDATA[<p>Before, I made a request for a relational graph. Because exporting png and other images will be distorted when enlarged, I hope to export them as vector graphs. However, the export graph function that comes with G6 cannot be exported as SVG in Canvas mode, and SVG mode has many features that are not supported, so I tried to find a way to export Canvas as SVG.</p><span id="more"></span><p>This code uses an old library called canvas-to-svg</p><p>This library simulates canvas and exposes some canvas apis, which can finally be exported as svg</p><p>It should be noted that some canvas APIs do not support, such as setTransform, resetTransform, etc. If you need to use these two APIs, you can split them into translate and rotate, etc</p><p>Directly upload the code:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CanvasToSVG</span> <span class="keyword">from</span> <span class="string">&#x27;canvas-to-svg&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTextWaterMaskToCanvas</span>(<span class="params"></span></span><br><span class="line"><span class="params">  context: CanvasRenderingContext2D,</span></span><br><span class="line"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  context.<span class="property">font</span> = <span class="string">&#x27;16px Microsoft YaHei&#x27;</span>;</span><br><span class="line">  context.<span class="property">fillStyle</span> = <span class="string">&#x27;#F2F3F5&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width, height &#125; = context.<span class="property">canvas</span>;</span><br><span class="line">  <span class="keyword">const</span> textMaskCountHorizontal = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, width / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> textMaskCountVertical = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, height / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> fwidth = width / textMaskCountHorizontal;</span><br><span class="line">  <span class="keyword">const</span> fheight = height / textMaskCountVertical;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> hh = <span class="number">0</span>; hh &lt; height; hh += fheight) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ww = <span class="number">0</span>; ww &lt; width; ww += fwidth) &#123;</span><br><span class="line">      context.<span class="title function_">translate</span>(ww, hh);</span><br><span class="line">      context.<span class="title function_">rotate</span>(-<span class="title class_">Math</span>.<span class="title function_">atan</span>(height / width));</span><br><span class="line">      context.<span class="title function_">fillText</span>(textWaterMask, -fwidth / <span class="number">2</span>, fheight / <span class="number">2</span>);</span><br><span class="line">      context.<span class="title function_">rotate</span>(<span class="title class_">Math</span>.<span class="title function_">atan</span>(height / width));</span><br><span class="line">      context.<span class="title function_">translate</span>(-ww, -hh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadFullImageWithWaterMaskCreator</span>(<span class="params"></span></span><br><span class="line"><span class="params">  graphInstance: IGraph | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    name?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">type</span>?: DataUrlType,</span></span><br><span class="line"><span class="params">    imageConfig?: &#123;</span></span><br><span class="line"><span class="params">      backgroundColor?: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="params">      padding?: <span class="built_in">number</span> | <span class="built_in">number</span>[];</span></span><br><span class="line"><span class="params">    &#125;,</span></span><br><span class="line"><span class="params">    callback?: (success: <span class="built_in">boolean</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    graphInstance?.<span class="title function_">toFullDataURL</span>(</span><br><span class="line">      <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        image.<span class="property">src</span> = res;</span><br><span class="line">        image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// const canvas = document.createElement(&#x27;canvas&#x27;);</span></span><br><span class="line">            <span class="comment">// canvas.width = image.width;</span></span><br><span class="line">            <span class="comment">// canvas.height = image.height;</span></span><br><span class="line">            <span class="comment">// const context = canvas.getContext(&#x27;2d&#x27;);</span></span><br><span class="line">            <span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">CanvasToSVG</span>(image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line">            <span class="keyword">if</span> (context &amp;&amp; name) &#123;</span><br><span class="line">              context.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line">              context.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>, image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">              <span class="title function_">addTextWaterMaskToCanvas</span>(context, textWaterMask);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// downloadCanvasImage(canvas, name, type);</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> svg = context.<span class="title function_">getSerializedSvg</span>(<span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">const</span> svgData = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Blob</span>([svg], &#123; <span class="attr">type</span>: <span class="string">&#x27;image/svg&#x27;</span> &#125;),</span><br><span class="line">              );</span><br><span class="line">              <span class="keyword">const</span> downloadLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">              downloadLink.<span class="property">download</span> = <span class="string">`<span class="subst">$&#123;name&#125;</span>.svg`</span>;</span><br><span class="line">              downloadLink.<span class="property">href</span> = svgData;</span><br><span class="line">              downloadLink.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">              callback?.(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            callback?.(<span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        image.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          callback?.(<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">type</span>,</span><br><span class="line">      imageConfig,</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Before, I made a request for a relational graph. Because exporting png and other images will be distorted when enlarged, I hope to export them as vector graphs. However, the export graph function that comes with G6 cannot be exported as SVG in Canvas mode, and SVG mode has many features that are not supported, so I tried to find a way to export Canvas as SVG.&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Greedy algorithm and simulated annealing algorithm</title>
    <link href="https://sunra.top/en/posts/63479/"/>
    <id>https://sunra.top/en/posts/63479/</id>
    <published>2023-03-24T06:15:46.000Z</published>
    <updated>2023-06-12T13:54:08.714Z</updated>
    
    <content type="html"><![CDATA[<p>Greedy algorithm is a relatively common algorithm. The essence of greed is to choose the local optimal of each stage to achieve the global optimal. Simulated annealing algorithms are more common in artificial intelligence.</p><p>The reason why these two algorithms are considered together is that the simulated annealing algorithm is like an enhanced version of the greedy algorithm.</p><p>If the local optimal solution of each step of a problem cannot obtain the global optimal solution, the algorithm thinking of our conventional front-end and back-end programmers is Dynamic Programming.</p><p>But for AI development, the parameters may be hundreds of millions of levels, there is no way Dynamic Programming, this time you can try to use simulated annealing algorithm to jump out of this part with a certain probability, to find a better answer in the whole, but in fact This algorithm is not like a conventional algorithm, and will get an inevitable result.</p><p>This article summarizes and compares the two algorithms together to see where they are applicable and how to use them.</p><span id="more"></span><h1 id="Greedy-algorithm"><a href="#Greedy-algorithm" class="headerlink" title="Greedy algorithm"></a>Greedy algorithm</h1><h2 id="What-is-a-greedy-algorithm"><a href="#What-is-a-greedy-algorithm" class="headerlink" title="What is a greedy algorithm"></a>What is a greedy algorithm</h2><p>The essence of greed is to choose the local optimum of each stage, so as to achieve the global optimum.</p><p>This is a bit abstract, let’s take an example:</p><p>For example, if you have a pile of banknotes, you can take ten of them. If you want to reach the maximum amount, how do you take them?</p><p>Specify that you take the largest amount each time, and the end result is to take the largest amount of money.</p><p>Each time you take the largest is the local optimal, and finally take the largest amount of money is to launch the global optimal.</p><p>As another example, if there are a bunch of boxes, and you have a backpack with a volume of n, how to fill the backpack as much as possible, if you still choose the largest box every time, it will not work. At this time, Dynamic Programming is needed.</p><h2 id="When-to-use-a-greedy-algorithm"><a href="#When-to-use-a-greedy-algorithm" class="headerlink" title="When to use a greedy algorithm"></a>When to use a greedy algorithm</h2><p>To be honest, there is no fixed routine for greedy algorithms.</p><p>So the only difficulty is how to use the local optimum to derive the overall optimum.</p><p>So how can we see if the local optimum can lead to the overall optimum? Are there any fixed strategies or routines?</p><p>Sorry, no! Manually simulate by yourself. If the simulation is feasible, you can try the greedy strategy. If it is not feasible, Dynamic Programming may be required.</p><p>A colleague asked how to verify whether a greedy algorithm can be used?</p><p>The best strategy is to give counterexamples. If you can’t think of counterexamples, try greed.</p><h2 id="Greedy-algorithm-general-steps"><a href="#Greedy-algorithm-general-steps" class="headerlink" title="Greedy algorithm general steps:"></a>Greedy algorithm general steps:</h2><ul><li>Break down the problem into several sub-problems</li><li>Find the right greedy strategy</li><li>Solve the optimal solution for each sub-problem</li><li>Stack locally optimal solutions into globally optimal solutions</li></ul><p>These four steps are actually too theoretical. We usually do greedy topics, and it is difficult to think according to these four steps. It is really a bit “chicken ribs”.</p><p>When doing the question, as long as you think clearly, what is the local optimal, if you deduce the global optimal, it is actually enough.</p><h1 id="Simulated-annealing-algorithm"><a href="#Simulated-annealing-algorithm" class="headerlink" title="Simulated annealing algorithm"></a>Simulated annealing algorithm</h1><h2 id="Metal-annealing-principle"><a href="#Metal-annealing-principle" class="headerlink" title="Metal annealing principle"></a>Metal annealing principle</h2><p>Metal annealing is a metal heat treatment process in which the metal is heated to a certain temperature, kept for a sufficient time, and then cooled at a suitable speed (usually slow cooling, sometimes controlled cooling). The simulated annealing algorithm is derived from the principle of solid annealing, which heats the solid to a sufficiently high temperature, and then allows it to cool slowly. When heated, the internal particles of the solid become disordered with the temperature rise, and the internal energy increases, while when slowly cooled, the particles gradually become Orderly, reaching an equilibrium state at each temperature, and finally reaching the ground state at room temperature, the internal energy is minimized.</p><p>When in a low temperature state, the molecules in the solid have very low internal energy and vibrate in a small range in their original position. If the solid is heated to a certain temperature, the internal energy of the molecules will increase, the thermal movement will intensify, and the disorder of the molecular arrangement will increase. At this time, the temperature is slowly lowered, and at each temperature an equilibrium state (that is, a quasi-static process) is reached, the energy of the molecules gradually decreases, and eventually returns to the state of orderly arrangement, and the internal energy of the molecules also drops to a minimum.</p><h2 id="Simulated-annealing-algorithm-1"><a href="#Simulated-annealing-algorithm-1" class="headerlink" title="Simulated annealing algorithm"></a>Simulated annealing algorithm</h2><p>The earliest idea of simulated annealing algorithm (Simulated Annealing, SA) was proposed by N. Metropolis et al in 1953. In 1983, S. Kirkpatrick et al successfully introduced the annealing idea into the field of combinatorial optimization. It is a stochastic optimization algorithm based on Monte-Carlo iterative solution strategy, and its starting point is based on the similarity between the annealing process of solid matter in physics and general combinatorial optimization problems.</p><p>Before introducing simulated annealing, it is necessary to introduce the mountain climbing algorithm.</p><h3 id="Hill-climbing-algorithm"><a href="#Hill-climbing-algorithm" class="headerlink" title="Hill climbing algorithm"></a>Hill climbing algorithm</h3><p>The hill climbing algorithm is a simple greedy search algorithm, which selects an optimal solution from the adjacent solution space of the current solution as the current solution every time until a local optimal solution is reached.</p><p>The implementation of the hill-climbing algorithm is very simple, and its main disadvantage is that it will fall into the local optimal solution, and it may not be able to search for the global optimal solution. As shown in the figure above: Assuming that point C is the current solution, the hill-climbing algorithm will stop searching when it searches for the local optimal solution at point A, because no matter where point A moves in that direction, it cannot get a better solution.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1679639508/origin-of-ray/2010122016525713_tp8p5t.png" alt=""></p><h3 id="Core-idea-of-simulated-annealing"><a href="#Core-idea-of-simulated-annealing" class="headerlink" title="Core idea of simulated annealing"></a>Core idea of simulated annealing</h3><p>Simulated annealing is actually a greedy algorithm, but its search process introduces random factors. The simulated annealing algorithm accepts a solution that is worse than the current solution with a certain probability, so it is possible to jump out of this local optimal solution and achieve a global optimal solution.</p><p>The simulated annealing algorithm starts from a higher initial temperature, with the continuous decline of temperature parameters, combined with certain probability sudden jump characteristics, randomly finds the global optimal solution of the target function in the solution space, that is, the local optimal solution can probabilistically jump out and eventually tend to the global optimal.</p><p>The calculation of “certain probability” here refers to the annealing process of metal smelting, which is also the origin of the name of the simulated annealing algorithm. The temperature T is regarded as the control parameter, the target function value f is regarded as the internal energy E, and a state of a solid at a certain temperature T corresponds to a solution<br>Then the algorithm attempts to reduce the target function f (internal energy E) as the control parameter T decreases, until it tends to the global minimum (the lowest energy state at low temperature in annealing), just like the metal annealing process.</p><h3 id="Mathematical-principles-of-simulated-annealing"><a href="#Mathematical-principles-of-simulated-annealing" class="headerlink" title="Mathematical principles of simulated annealing"></a>Mathematical principles of simulated annealing</h3><p>From the above, we know that the global optimal solution of the target function will be randomly found in the solution space in combination with the probability sudden jump characteristic. So what is the specific mechanism for updating the solution? If the new solution is better than the current solution, the new solution is accepted, otherwise it is judged whether to accept the new solution based on the Metropolis criterion. The acceptance probability is:</p><script type="math/tex; mode=display">\begin{equation}P = \begin{cases}    1 & E_{t + 1} < E_t;\\    e^{-\frac{E_{t + 1} - E_t}{kT}} & E_{t + 1} \geq E_t;\end{cases}\end{equation}</script><p>Assuming that the solution of the search at the current time is $x<em>t $, and the corresponding system energy (target function) is $E_t $, a random perturbation is applied to the search point to generate a new solution $x</em> {t + 1} $, and accordingly, the system energy is $E_ {t + 1} $, then the acceptance probability of the system from the search point to the transition is the above formula.</p><p>That is, if the energy corresponding to the new solution is lower, then the probability of acceptance is 1, that is, it must be accepted. If the energy corresponding to the new solution is high, then accept the new solution with the probability of $e ^ {-\ frac {E_ {t + 1} - E_t} {kT}} $, that is, use this probability to jump out of this local optimal solution.</p><p>This process is to randomly select x, and then find a corresponding E lowest x out, where E is lower corresponding to our specific algorithm is closer to the goal we need</p><p>There is also a problem here, which is how to choose the size of each change in x when we randomly select x.</p><p>This problem is actually the origin of the word’annealing ‘, that is, the temperature will gradually decrease, and the magnitude of x change will become smaller and smaller.</p><h3 id="Simulated-annealing-process"><a href="#Simulated-annealing-process" class="headerlink" title="Simulated annealing process"></a>Simulated annealing process</h3><p>The essence of the algorithm is divided into two layers of cycles. At any temperature level, random disturbances generate a new solution, and calculate the change of the target function value to decide whether to accept it. Since the initial temperature of the algorithm is relatively high, the new solution that increases E may also be accepted initially, so it can jump out of the local minimum, and then by slowly reducing the temperature, the algorithm may eventually converge to the global optimal solution. The specific process is:</p><ol><li>Let $T = T_0 $, representing the initial temperature at which the annealing starts, randomly generate an initial solution $x_0 $, and calculate the corresponding target function value $E_0 $;</li><li>Let $T = kT $, where k is between 0 and 1, which is the rate of temperature drop;</li><li>Apply random perturbation to the current solution $x<em>t $, generate a new solution $x</em> {t + 1} $in its neighborhood, and calculate the corresponding target function value $E<em> {t + 1} $<br>$\Delta E =E</em>{t+1} - E_t$</li><li>If $\ Delta E &lt; 0 $accepts the new solution as the current solution, otherwise it is judged whether to accept the new solution according to the probability $e ^ {-\ frac {\ Delta E} {kT}} $;</li><li>Repeat the disturbance and acceptance process L times at temperature T, i.e. perform steps 3 and 4;</li><li>Determine whether the temperature reaches the termination temperature level, if so, terminate the algorithm, otherwise return to step 2.</li></ol><p>There are a few points to note:</p><ul><li>The selection of the initial point has a certain impact on the results of the algorithm, it is best to run multiple times to make a comprehensive judgment on the results.</li><li>In the early stage of algorithm operation, the temperature drops quickly to avoid accepting too many poor results. As the running time increases, the temperature drop slows down to stabilize the results faster.</li><li>When the number of iterations increases to a certain number, the result may have reached stability, but there is still some time before the algorithm ends. Appropriate output conditions should be added when designing the program, and the program can be ended if the output conditions are met.</li></ul><h2 id="Application-of-simulated-annealing"><a href="#Application-of-simulated-annealing" class="headerlink" title="Application of simulated annealing"></a>Application of simulated annealing</h2><ul><li><p>The application of simulated annealing algorithm in VLSI design, using simulated annealing algorithm to optimize the design of VLSI (Very Large Scale Integration, Very Large Scale Integrated Circuit), is one of the most successful application examples of simulated annealing algorithm at present. The simulated annealing algorithm can almost complete all optimized VLSI design work well. Such as global wiring, board layout, layout and logic minimization, etc.</p></li><li><p>Simulated annealing algorithm can be used for image restoration and other work, that is, to restore a contaminated image into a clear original image and filter out the distorted part. Therefore, its application prospect in image processing is broad.</p></li><li><p>Application of simulated annealing algorithm in neural network computer. The simulated annealing algorithm has the ability to jump out of the trap of local optima. In the Boltzmann machine, even if the system falls into the trap of local optima, after a period of time, it can jump out again, and the system will eventually converge in the direction of the global optimal value.</p></li><li><p>In the force-oriented layout algorithm, the idea of simulated annealing is actually implicit. At the beginning, all nodes are randomly arranged, and then the position of the node changes due to the action of the force between the nodes. The position change is equivalent to the x change, and the changed position, if the resultant force received by the node decreases, which is equivalent to a decrease in energy E, we accept the new solution, and then as the resultant force decreases, it is actually equivalent to a decrease in T, so the impact on the position will become smaller, the full resultant force decreases below a certain threshold, and the position change is not large, and we think the algorithm converges to the result.</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Greedy algorithm is a relatively common algorithm. The essence of greed is to choose the local optimal of each stage to achieve the global optimal. Simulated annealing algorithms are more common in artificial intelligence.&lt;/p&gt;
&lt;p&gt;The reason why these two algorithms are considered together is that the simulated annealing algorithm is like an enhanced version of the greedy algorithm.&lt;/p&gt;
&lt;p&gt;If the local optimal solution of each step of a problem cannot obtain the global optimal solution, the algorithm thinking of our conventional front-end and back-end programmers is Dynamic Programming.&lt;/p&gt;
&lt;p&gt;But for AI development, the parameters may be hundreds of millions of levels, there is no way Dynamic Programming, this time you can try to use simulated annealing algorithm to jump out of this part with a certain probability, to find a better answer in the whole, but in fact This algorithm is not like a conventional algorithm, and will get an inevitable result.&lt;/p&gt;
&lt;p&gt;This article summarizes and compares the two algorithms together to see where they are applicable and how to use them.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>How to Develop a Relationship Graph with G6</title>
    <link href="https://sunra.top/en/posts/8324/"/>
    <id>https://sunra.top/en/posts/8324/</id>
    <published>2023-03-10T06:28:01.000Z</published>
    <updated>2023-06-12T13:54:08.714Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I was thinking about how to implement the relationship diagram of Feishu Docs, so I remembered the G6 I used before, so I simply implemented a version.</p><h1 id="Final-effect"><a href="#Final-effect" class="headerlink" title="Final effect"></a>Final effect</h1><p>The main functions are as follows:</p><ul><li>The node is divided into two parts, the top half is the icon and the bottom half is the text<ul><li>When the mouse is placed on the icon, it will produce a diffusion effect of water ripples, and a circle of borders will appear at the same time</li><li>Text needs to be underlined and have a white background, and the water ripple effect cannot be blocked by the white background</li><li>The underline of the text needs to be a square</li></ul></li><li>The connection should have a gradual change of color, and the gradual change of color should be from the beginning of the arrow to the end of the arrow, and if the two-way relationship is supported, how to achieve two edges</li><li>There should be a Label in the middle of the connection</li><li>Nodes and connections should support translucency</li><li>The overall layout should be a force-oriented layout, and node dragging is supported. When dragging, nodes cannot overlap, but other nodes cannot be dragged due to connection (this point is raised separately because G6’s built-in force-oriented layout nodes will be dragged).</li></ul><span id="more"></span><h1 id="Concrete-realization"><a href="#Concrete-realization" class="headerlink" title="Concrete realization"></a>Concrete realization</h1><h2 id="Custom-node"><a href="#Custom-node" class="headerlink" title="Custom node"></a>Custom node</h2><p>The first difficulty of this Functional Button is:</p><ul><li>G6 Only keyShapre can respond to events, and the connection is connected to the keyShape injury, and the keyShape is the first shape of each group</li><li>So if we want the mouse to Hover the image to produce water ripples, we should make the image node the keyShape</li><li>But if we let image be keyShape, even if our picture is round, the box of keyShape is square, if the line is connected to the four corners of the image, there will be a little white space between the line and the picture, so we need to Let circle be keyShape, and then image is added later, but this will cause our keyShapre, that is, circle is covered by image, so that the hover event cannot be triggered</li></ul><p>There are two solutions, depending on whether the renderer you use is svg or canvas</p><ul><li><p>If it is canvas, let circle be keyShape, but add zIndex to both circle and image, and then call group.sort ()</p></li><li><p>If it is svg, group.sort is invalid, we need to change the hierarchy through the js method in the afterDraw method, and move the back circle to the front (the earlier you add it, the later it will be)</p></li></ul><p>The second difficulty is how to add the water ripple effect and how to turn on the water ripple when the Hover circle</p><p>The solution is divided into two steps:</p><ul><li>Use the water ripple code from the official example, but remember to set visible to false first, and pay attention to the hierarchy, so that the text is at the top</li><li>Then listen to the’node: mousemove ‘event, if the Hover target is circle, call setItemState, then when registering the node, set the setState callback, and then set visible to true through the shape.attr method, then listen to’node: mouseleave’, set the state to another, and set visible to false in the setState callback</li></ul><blockquote><p>The scheme of setting and listening to state changes can also be used to implement borders. Of course, this simple style can also be solved by stateStyle</p></blockquote><p>The third difficulty is how to add text underline and how to break lines if the text is too long, because the text in G6 does not support the underline I need</p><p>The solution is:</p><ul><li>Calculate the length of the text by yourself, break if it exceeds a certain length, delete and add ellipsis after more than two lines</li><li>Then add the path shape as an underscore below the text, and the length should be the text length.</li></ul><blockquote><p>Note that custom nodes should remember to inherit a built-in node, at least inherit single-node, otherwise many features are not available</p></blockquote><p>Here only shows the canvas code:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> <span class="title class_">ItemStatus</span> &#123;</span><br><span class="line">  <span class="variable constant_">OPACITY</span> = <span class="string">&#x27;opacity&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">NORMAL</span> = <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">ACTIVE</span> = <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLetterWidth</span>(<span class="params">letter: <span class="built_in">string</span>, fontSize: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;[\u4E00-\u9FA5]+&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (pattern.<span class="title function_">test</span>(letter)) &#123;</span><br><span class="line">    <span class="comment">// Chinese charactors</span></span><br><span class="line">    <span class="keyword">return</span> fontSize;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// get the width of single letter according to the fontSize</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">G6</span>.<span class="property">Util</span>.<span class="title function_">getLetterWidth</span>(letter, fontSize);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getStringWidth</span>(<span class="params">str: <span class="built_in">string</span>, fontSize: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> currentWidth = <span class="number">0</span>;</span><br><span class="line">  str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">letter</span> =&gt;</span> &#123;</span><br><span class="line">    currentWidth += <span class="title function_">getLetterWidth</span>(letter, fontSize);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> currentWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replaceTooLongStringWithEllipsis</span>(<span class="params"></span></span><br><span class="line"><span class="params">  strs: <span class="built_in">string</span>[],</span></span><br><span class="line"><span class="params">  maxWidth: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  fontSize: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ellipsis = <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> ellipsisLength = <span class="title function_">getStringWidth</span>(ellipsis, fontSize);</span><br><span class="line">  <span class="keyword">if</span> (strs.<span class="property">length</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> secondLine = strs[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> currentWidth = ellipsisLength;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; secondLine.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      currentWidth += <span class="title function_">getLetterWidth</span>(secondLine[i], fontSize);</span><br><span class="line">      <span class="keyword">if</span> (currentWidth &gt;= maxWidth) &#123;</span><br><span class="line">        strs[<span class="number">1</span>] = <span class="string">`<span class="subst">$&#123;secondLine.slice(<span class="number">0</span>, i)&#125;</span><span class="subst">$&#123;ellipsis&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [strs[<span class="number">0</span>], strs[<span class="number">1</span>]];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strs;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NODE_ICON_SIZE</span> = <span class="number">48</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NODE_ICON_RADIUS</span> = <span class="variable constant_">NODE_ICON_SIZE</span> / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NODE_NAME_FONT_SIZE</span> = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NODE_NAME_HEIGHT</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">G6</span>.<span class="title function_">registerNode</span>(</span><br><span class="line">    <span class="string">&#x27;test-node&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="title function_">draw</span>(<span class="params">cfg, group</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> keyShape = group?.<span class="title function_">addShape</span>(<span class="string">&#x27;circle&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: <span class="variable constant_">NODE_ICON_RADIUS</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;rgba(255,255,255,0)&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">lineWidth</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-dummy&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">10</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        group?.<span class="title function_">addShape</span>(<span class="string">&#x27;image&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: -<span class="variable constant_">NODE_ICON_SIZE</span> / <span class="number">2</span>,</span><br><span class="line">            <span class="attr">y</span>: -<span class="variable constant_">NODE_ICON_SIZE</span> / <span class="number">2</span>,</span><br><span class="line">            <span class="attr">width</span>: <span class="variable constant_">NODE_ICON_SIZE</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="variable constant_">NODE_ICON_SIZE</span>,</span><br><span class="line">            <span class="attr">img</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-icon&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">9</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> lableSplit = <span class="title function_">fittingString</span>(</span><br><span class="line">          cfg?.<span class="property">supName</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">          <span class="number">200</span>,</span><br><span class="line">          <span class="variable constant_">NODE_NAME_FONT_SIZE</span>,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lableSplit.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> label = lableSplit[i];</span><br><span class="line">            <span class="keyword">const</span> labelWidth = <span class="title function_">getStringWidth</span>(</span><br><span class="line">                label,</span><br><span class="line">                <span class="variable constant_">NODE_NAME_FONT_SIZE</span>,</span><br><span class="line">            );</span><br><span class="line">            group?.<span class="title function_">addShape</span>(<span class="string">&#x27;rect&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                <span class="attr">x</span>: -labelWidth / <span class="number">2</span>,</span><br><span class="line">                <span class="attr">y</span>:</span><br><span class="line">                    <span class="variable constant_">NODE_ICON_SIZE</span> -</span><br><span class="line">                    <span class="variable constant_">NODE_NAME_HEIGHT</span> +</span><br><span class="line">                    i * <span class="variable constant_">NODE_NAME_HEIGHT</span> +</span><br><span class="line">                    <span class="number">4</span>,</span><br><span class="line">                <span class="attr">width</span>: labelWidth,</span><br><span class="line">                <span class="attr">height</span>: <span class="variable constant_">NODE_NAME_HEIGHT</span>,</span><br><span class="line">                <span class="attr">fill</span>: <span class="string">&#x27;#FFFFFF&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">`test-node-name-background-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">zIndex</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            group?.<span class="title function_">addShape</span>(<span class="string">&#x27;text&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                <span class="attr">text</span>: label,</span><br><span class="line">                <span class="attr">fill</span>: <span class="string">&#x27;#646A73&#x27;</span>,</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="number">14</span>,</span><br><span class="line">                <span class="attr">textAlign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">y</span>: <span class="variable constant_">NODE_ICON_SIZE</span> + i * <span class="variable constant_">NODE_NAME_HEIGHT</span>,</span><br><span class="line">                <span class="attr">width</span>: labelWidth,</span><br><span class="line">                <span class="attr">height</span>: <span class="variable constant_">NODE_NAME_HEIGHT</span>,</span><br><span class="line">                <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">`test-node-name-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">zIndex</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            group?.<span class="title function_">addShape</span>(<span class="string">&#x27;path&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">attrs</span>: &#123;</span><br><span class="line">                <span class="attr">path</span>: [</span><br><span class="line">                    [</span><br><span class="line">                    <span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">                    -labelWidth / <span class="number">2</span>,</span><br><span class="line">                    <span class="variable constant_">NODE_ICON_SIZE</span> + i * <span class="variable constant_">NODE_NAME_HEIGHT</span> + <span class="number">2</span>,</span><br><span class="line">                    ],</span><br><span class="line">                    [</span><br><span class="line">                    <span class="string">&#x27;L&#x27;</span>,</span><br><span class="line">                    labelWidth / <span class="number">2</span>,</span><br><span class="line">                    <span class="variable constant_">NODE_ICON_SIZE</span> + i * <span class="variable constant_">NODE_NAME_HEIGHT</span> + <span class="number">2</span>,</span><br><span class="line">                    ],</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">stroke</span>: <span class="string">&#x27;#000000&#x27;</span>,</span><br><span class="line">                <span class="attr">lineWidth</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">lineDash</span>: [<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">`test-node-name-underline-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">zIndex</span>: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> back1 = group?.<span class="title function_">addShape</span>(<span class="string">&#x27;circle&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;rgba(255,255,255,0)&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-wave1&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> back2 = group?.<span class="title function_">addShape</span>(<span class="string">&#x27;circle&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;rgba(255,255,255,0)&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-wave2&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> back3 = group?.<span class="title function_">addShape</span>(<span class="string">&#x27;circle&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">7</span>,</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">r</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;rgba(255,255,255,0)&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;test-node-wave3&#x27;</span>,</span><br><span class="line">          <span class="attr">draggle</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        back1?.<span class="title function_">animate</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            <span class="attr">r</span>: <span class="variable constant_">NODE_ICON_RADIUS</span> + <span class="number">16</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">easing</span>: <span class="string">&#x27;easeCubic&#x27;</span>,</span><br><span class="line">            <span class="attr">delay</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">repeat</span>: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// no delay</span></span><br><span class="line">        back2?.<span class="title function_">animate</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            <span class="attr">r</span>: <span class="variable constant_">NODE_ICON_RADIUS</span> + <span class="number">16</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">easing</span>: <span class="string">&#x27;easeCubic&#x27;</span>,</span><br><span class="line">            <span class="attr">delay</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="attr">repeat</span>: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// 1s delay</span></span><br><span class="line">        back3?.<span class="title function_">animate</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            <span class="attr">r</span>: <span class="variable constant_">NODE_ICON_RADIUS</span> + <span class="number">16</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">easing</span>: <span class="string">&#x27;easeCubic&#x27;</span>,</span><br><span class="line">            <span class="attr">delay</span>: <span class="number">2000</span>,</span><br><span class="line">            <span class="attr">repeat</span>: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// 3s delay</span></span><br><span class="line"></span><br><span class="line">        back1?.<span class="title function_">hide</span>();</span><br><span class="line">        back2?.<span class="title function_">hide</span>();</span><br><span class="line">        back3?.<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line">        group?.<span class="title function_">sort</span>();</span><br><span class="line">        <span class="keyword">return</span> keyShape <span class="keyword">as</span> <span class="title class_">IShape</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">setState</span>(<span class="params">name, value, item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name = <span class="string">&#x27;status&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (value = <span class="title class_">ItemStatus</span>.<span class="property">ACTIVE</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> group = item?.<span class="title function_">getContainer</span>();</span><br><span class="line">            <span class="keyword">const</span> shapes = group?.<span class="title function_">getChildren</span>() ?? [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> shape <span class="keyword">of</span> shapes) &#123;</span><br><span class="line">              <span class="keyword">if</span> (shape.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node-wave&#x27;</span>)) &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">0.6</span>);</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;#4E83FD&#x27;</span>);</span><br><span class="line">                shape.<span class="title function_">show</span>();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node-dummy&#x27;</span>)) &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">&#x27;#4E83FD&#x27;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> group = item?.<span class="title function_">getContainer</span>();</span><br><span class="line">            <span class="keyword">const</span> shapes = group?.<span class="title function_">getChildren</span>() ?? [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> shape <span class="keyword">of</span> shapes) &#123;</span><br><span class="line">              <span class="keyword">if</span> (shape.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node-wave&#x27;</span>)) &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>);</span><br><span class="line">                shape.<span class="title function_">hide</span>();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node-dummy&#x27;</span>)) &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                shape.<span class="title function_">attr</span>(<span class="string">&#x27;opacity&#x27;</span>, value = <span class="title class_">ItemStatus</span>.<span class="property">OPACITY</span> ? <span class="number">0.2</span> : <span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;single-node&#x27;</span>,</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>The first difficulty is that you can’t simply add a lable to draw or afterdraw. This only applies to the situation where the relative position of the text and the starting point of the line remains unchanged. When we need it, the node can be dragged and dropped, which means that the length of the line can be changed, and what we require is that the text is in the middle of the line.</p><p>The solution is:</p><ul><li>Remove the previous added text shape and add new text shape every time in afterUpdate</li><li>There is actually no group in afterUpdate. You can forcibly mount group to cfg after draw.</li></ul><p>The second difficulty is that how to keep the gradual change of color must be from the starting point to the end point of the connection, because G6 only supports the setting of a fixed angle, such as setting a gradual change of 0 degrees, it must be a gradual change from left to right, if A line is from right to left, then this gradual change of color is reversed</p><p>The solution is:</p><ul><li>Or in afterUpdate, constantly calculate the position of the new startPoint and endPoint to calculate the angle</li><li>Set the gradual change color attribute of stroke by calculating the angle and then using shape.attr</li></ul><p>The third difficulty is how to support bilinear curves, because the default is a straight line, and the two-way lines will overlap</p><p>The solution lies in:</p><ul><li>Define another custom type, based on Bezier curve extension</li></ul><p>The specific code is as follows:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">EDGE_LABEL_HEIGHT</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EDGE_LABEL_FONT_SIZE</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addLabelToEdge</span>(<span class="params">cfg: ModelConfig | <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> config = cfg <span class="keyword">as</span> <span class="title class_">ModelConfig</span>;</span><br><span class="line">  <span class="keyword">const</span> group = cfg?.<span class="property">group</span> <span class="keyword">as</span> <span class="title class_">IGroup</span>;</span><br><span class="line">  <span class="keyword">const</span> shape = group?.<span class="title function_">get</span>(<span class="string">&#x27;children&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// get the coordinate of the mid point on the path</span></span><br><span class="line">  <span class="comment">//Get the coordinates of the midpoint of the path graph</span></span><br><span class="line">  <span class="keyword">const</span> midPoint = shape.<span class="title function_">getPoint</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="keyword">const</span> startPoint = cfg?.<span class="property">startPoint</span>;</span><br><span class="line">  <span class="keyword">const</span> endPoint = cfg?.<span class="property">endPoint</span>;</span><br><span class="line">  <span class="keyword">if</span> (startPoint &amp;&amp; endPoint) &#123;</span><br><span class="line">    <span class="keyword">const</span> angle =</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">atan2</span>(endPoint.<span class="property">y</span> - startPoint.<span class="property">y</span>, endPoint.<span class="property">x</span> - startPoint.<span class="property">x</span>) * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (angle &gt; -<span class="title class_">Math</span>.<span class="property">PI</span> &amp;&amp; angle &lt; <span class="title class_">Math</span>.<span class="property">PI</span>) &#123;</span><br><span class="line">      shape.<span class="title function_">attr</span>(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">`l(0) 0:#4E83FD 1:#B6CBFE`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      shape.<span class="title function_">attr</span>(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">`l(0) 0:#B6CBFE 1:#4E83FD`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (midPoint) &#123;</span><br><span class="line">    <span class="keyword">const</span> labelWidth = <span class="title function_">getStringWidth</span>(</span><br><span class="line">      config.<span class="property">text</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      <span class="variable constant_">EDGE_LABEL_FONT_SIZE</span>,</span><br><span class="line">    );</span><br><span class="line">    group?.<span class="title function_">removeChild</span>(config.<span class="property">preEdgeText</span> <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">    group?.<span class="title function_">removeChild</span>(config.<span class="property">preEdgeTextBackground</span> <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">    config.<span class="property">preEdgeTextBackground</span> = group.<span class="title function_">addShape</span>(<span class="string">&#x27;rect&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">x</span>: midPoint.<span class="property">x</span> - (labelWidth + <span class="number">12</span>) / <span class="number">2</span>,</span><br><span class="line">        <span class="attr">y</span>: midPoint.<span class="property">y</span> - <span class="variable constant_">EDGE_LABEL_HEIGHT</span> + <span class="number">4</span>,</span><br><span class="line">        <span class="attr">width</span>: labelWidth + <span class="number">12</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable constant_">EDGE_LABEL_HEIGHT</span>,</span><br><span class="line">        <span class="attr">fill</span>: <span class="string">&#x27;#E1EAFF&#x27;</span>,</span><br><span class="line">        <span class="attr">radius</span>: <span class="variable constant_">EDGE_LABEL_HEIGHT</span> / <span class="number">2</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;test-edge-background&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    config.<span class="property">preEdgeText</span> = group.<span class="title function_">addShape</span>(<span class="string">&#x27;text&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: cfg?.<span class="property">text</span>,</span><br><span class="line">        <span class="attr">fill</span>: <span class="string">&#x27;#3370FF&#x27;</span>,</span><br><span class="line">        <span class="attr">fontWeight</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">lineHeight</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">textAlign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">x</span>: midPoint.<span class="property">x</span>,</span><br><span class="line">        <span class="attr">y</span>: midPoint.<span class="property">y</span>,</span><br><span class="line">        <span class="attr">width</span>: labelWidth + <span class="number">12</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable constant_">EDGE_LABEL_HEIGHT</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;test-edge-text&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">G6</span>.<span class="title function_">registerEdge</span>(</span><br><span class="line"><span class="string">&#x27;test-edge-single&#x27;</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_">afterDraw</span>(<span class="params">cfg, group</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = cfg <span class="keyword">as</span> <span class="title class_">ModelConfig</span>;</span><br><span class="line">    config.<span class="property">group</span> = group;</span><br><span class="line">    <span class="title function_">addLabelToEdge</span>(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">afterUpdate</span>(<span class="params">cfg</span>) &#123;</span><br><span class="line">    <span class="title function_">addLabelToEdge</span>(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">G6</span>.<span class="title function_">registerEdge</span>(</span><br><span class="line"><span class="string">&#x27;test-edge-double&#x27;</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_">afterDraw</span>(<span class="params">cfg, group</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = cfg <span class="keyword">as</span> <span class="title class_">ModelConfig</span>;</span><br><span class="line">    config.<span class="property">group</span> = group;</span><br><span class="line">    <span class="title function_">addLabelToEdge</span>(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">afterUpdate</span>(<span class="params">cfg</span>) &#123;</span><br><span class="line">    <span class="title function_">addLabelToEdge</span>(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&#x27;quadratic&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Event-monitoring-changes-node-and-connection-styles"><a href="#Event-monitoring-changes-node-and-connection-styles" class="headerlink" title="Event monitoring changes node and connection styles"></a>Event monitoring changes node and connection styles</h2><p>Code for event monitoring:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">highlightLocalNodesAndEdges</span>(<span class="params">graphInstance: IGraph, e: IG6GraphEvent</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; localEdges, localNodesId, otherNodesId, otherEdges &#125; =</span><br><span class="line">    <span class="title function_">getAllLocalNodesAndEdges</span>(graphInstance, e.<span class="property">item</span>?.<span class="title function_">getModel</span>().<span class="property">id</span> <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">  localEdges.<span class="title function_">forEach</span>(<span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(</span><br><span class="line">      edge.<span class="title function_">getModel</span>().<span class="property">id</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      <span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">      <span class="title class_">ItemStatus</span>.<span class="property">NORMAL</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  otherEdges.<span class="title function_">forEach</span>(<span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(</span><br><span class="line">      edge.<span class="title function_">getModel</span>().<span class="property">id</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      <span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">      <span class="title class_">ItemStatus</span>.<span class="property">OPACITY</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  localNodesId.<span class="title function_">forEach</span>(<span class="function"><span class="params">nodeId</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(nodeId <span class="keyword">as</span> <span class="built_in">string</span>, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">NORMAL</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  otherNodesId.<span class="title function_">forEach</span>(<span class="function"><span class="params">nodeId</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(nodeId <span class="keyword">as</span> <span class="built_in">string</span>, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">OPACITY</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">highlightAllNodesAndGraph</span>(<span class="params">graphInstance: IGraph</span>) &#123;</span><br><span class="line">  graphInstance.<span class="title function_">findAll</span>(<span class="string">&#x27;edge&#x27;</span>, <span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(edge, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">NORMAL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  graphInstance.<span class="title function_">findAll</span>(<span class="string">&#x27;node&#x27;</span>, <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(node, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">NORMAL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useInternalEventListener</span>(<span class="params">graphInstance: IGraph | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onMouseMoveOnNode</span>(<span class="params">e: IG6GraphEvent</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !e.<span class="property">target</span>.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node--name-&#x27;</span>) &amp;&amp;</span><br><span class="line">        graphInstance</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="title function_">highlightLocalNodesAndEdges</span>(graphInstance, e);</span><br><span class="line">        graphInstance.<span class="title function_">setItemState</span>(e.<span class="property">item</span> <span class="keyword">as</span> <span class="title class_">Item</span>, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">ACTIVE</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onMouseLeaveNode</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (graphInstance) &#123;</span><br><span class="line">        <span class="title function_">highlightAllNodesAndGraph</span>(graphInstance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    graphInstance?.<span class="title function_">on</span>(<span class="string">&#x27;node:mousemove&#x27;</span>, onMouseMoveOnNode);</span><br><span class="line"></span><br><span class="line">    graphInstance?.<span class="title function_">on</span>(<span class="string">&#x27;node:mouseleave&#x27;</span>, onMouseLeaveNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      graphInstance?.<span class="title function_">off</span>(<span class="string">&#x27;node:mousemove&#x27;</span>, onMouseMoveOnNode);</span><br><span class="line"></span><br><span class="line">      graphInstance?.<span class="title function_">off</span>(<span class="string">&#x27;node:mouseleave&#x27;</span>, onMouseLeaveNode);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [graphInstance]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Layout-algorithms-and-drag-nodes"><a href="#Layout-algorithms-and-drag-nodes" class="headerlink" title="Layout algorithms and drag nodes"></a>Layout algorithms and drag nodes</h2><p>G6 actually comes with a force-oriented layout, but it’s weird, the effect is different from d3, and it doesn’t support only collision detection when dragging</p><p>There are a few difficulties here:</p><ul><li>How to use force-oriented layout of d3, here mainly d3 will change the data structure of points, causing G6 to execute abnormally</li><li>If you implement collision detection yourself</li><li>How to smooth a bit when dragging nodes</li></ul><p>The solution is as follows:</p><ul><li>Use Promise to encapsulate the layout algorithm of d3, process the data into the format supported by G6 after monitoring the end event, otherwise let G6 render without waiting for all ticks to be completed. Halfway through, d3 changes the data format again, an error will be reported</li><li>Self-implemented collision detection is actually a simple way to determine the distance between nodes. If it is less than a certain value, push other nodes away, then record the nodes that are pushed away, and calculate the distance between the nodes that are pushed away and all nodes., if there is still close, modify the position and continue the recursion of the nodes that modify the position in this round. In order to prevent stack overflow, you can set the maximum recursion layer of 30</li><li>If the refreshPosition method is called after each node is calculated, it will actually cause line shaking. The solution is to enable force layout, so layout can be used to achieve smooth re-rendering, but the positions of all nodes are set with fx and fy to prevent force-oriented layout from modifying position</li></ul><p>The code is as follows:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">REFRESH_NODE_POSITION_RECURSION_COUNT</span> = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS</span> = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS_SEQUARE</span> = <span class="title class_">Math</span>.<span class="title function_">pow</span>(</span><br><span class="line">  <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTwoNodeDistance</span>(<span class="params">node1: NodeConfig, node2: NodeConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> distance =</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">pow</span>((node1.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (node2.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>), <span class="number">2</span>) +</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">pow</span>((node1.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (node2.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>), <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">refreshNodesPositionHelper</span>(<span class="params"></span></span><br><span class="line"><span class="params">  dragedNode: NodeConfig,</span></span><br><span class="line"><span class="params">  positionChangedNodes: NodeConfig[],</span></span><br><span class="line"><span class="params">  allNodes: NodeConfig[],</span></span><br><span class="line"><span class="params">  deep = <span class="number">0</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (deep &gt; <span class="variable constant_">REFRESH_NODE_POSITION_RECURSION_COUNT</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> nextPositionChangedNodesSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">NodeConfig</span>&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> positionChangedNode <span class="keyword">of</span> positionChangedNodes) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> everyNode <span class="keyword">of</span> allNodes) &#123;</span><br><span class="line">      <span class="keyword">if</span> (positionChangedNode.<span class="property">id</span> = everyNode.<span class="property">id</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> distance = <span class="title function_">getTwoNodeDistance</span>(positionChangedNode, everyNode);</span><br><span class="line">      <span class="keyword">if</span> (distance &lt; <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS</span>) &#123;</span><br><span class="line">        nextPositionChangedNodesSet.<span class="title function_">add</span>(everyNode);</span><br><span class="line">        <span class="keyword">const</span> detaX = <span class="title class_">Math</span>.<span class="title function_">abs</span>(</span><br><span class="line">          (positionChangedNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (everyNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>),</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> detaY = <span class="title class_">Math</span>.<span class="property">abs</span> (</span><br><span class="line">          (positionChangedNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (everyNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Root formula for quadratic equation system of one yuan 2 * moveDistance ^ 2 + 2 (detaX + detaY) * moveDistance = REFRESH_NODE_COLLIDE_RADIUS_SEQUARE - (detaX ^ 2 + detaY ^ 2)</span></span><br><span class="line">        <span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> b = <span class="number">2</span> * (detaX + detaY);</span><br><span class="line">        <span class="keyword">const</span> c =</span><br><span class="line">          detaX * detaX + detaY * detaY - <span class="variable constant_">REFRESH_NODE_COLLIDE_RADIUS_SEQUARE</span>;</span><br><span class="line">        <span class="keyword">const</span> moveDistance = (<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(b * b - <span class="number">4</span> * a * c) - b) / (<span class="number">2</span> * a);</span><br><span class="line"></span><br><span class="line">        everyNode.<span class="property">x</span> =</span><br><span class="line">          (everyNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) +</span><br><span class="line">          ((everyNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (positionChangedNode.<span class="property">x</span> <span class="keyword">as</span> <span class="built_in">number</span>) &gt; <span class="number">0</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : -<span class="number">1</span>) *</span><br><span class="line">            moveDistance;</span><br><span class="line"></span><br><span class="line">        everyNode.<span class="property">y</span> =</span><br><span class="line">          (everyNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) +</span><br><span class="line">          ((everyNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) - (positionChangedNode.<span class="property">y</span> <span class="keyword">as</span> <span class="built_in">number</span>) &gt; <span class="number">0</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : -<span class="number">1</span>) *</span><br><span class="line">            moveDistance;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextPositionChangedNodesSet.<span class="property">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">nextPositionChangedNodes</span>: <span class="title class_">NodeConfig</span>[] = [];</span><br><span class="line">    nextPositionChangedNodesSet.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      nextPositionChangedNodes.<span class="title function_">push</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">refreshNodesPositionHelper</span>(</span><br><span class="line">      dragedNode,</span><br><span class="line">      nextPositionChangedNodes,</span><br><span class="line">      allNodes,</span><br><span class="line">      deep + <span class="number">1</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    allNodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">      node.<span class="property">fx</span> = node.<span class="property">x</span>;</span><br><span class="line">      node.<span class="property">fy</span> = node.<span class="property">y</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onNodeDrag</span>(<span class="params">e: IG6GraphEvent</span>) &#123;</span><br><span class="line">    graphInstance?.<span class="title function_">layout</span>();</span><br><span class="line">    <span class="keyword">const</span> model = e.<span class="property">item</span>?.<span class="title function_">get</span>(<span class="string">&#x27;model&#x27;</span>);</span><br><span class="line">    model.<span class="property">x</span> = e.<span class="property">x</span>;</span><br><span class="line">    model.<span class="property">y</span> = e.<span class="property">y</span>;</span><br><span class="line">    model.<span class="property">fx</span> = e.<span class="property">x</span>;</span><br><span class="line">    model.<span class="property">fy</span> = e.<span class="property">y</span>;</span><br><span class="line">    <span class="keyword">const</span> allNodes = graphInstance</span><br><span class="line">    ?.<span class="title function_">findAll</span>(<span class="string">&#x27;node&#x27;</span>, <span class="function"><span class="params">node</span> =&gt;</span> node.<span class="title function_">getID</span>() ! e.<span class="property">item</span>?.<span class="title function_">getID</span>())</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">node</span> =&gt;</span> node.<span class="title function_">getModel</span>()) <span class="keyword">as</span> <span class="title class_">NodeConfig</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">refreshNodesPositionHelper</span>(model, [model], allNodes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onMouseMoveOnNode</span>(<span class="params">e: IG6GraphEvent</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">    !e.<span class="property">target</span>.<span class="property">cfg</span>.<span class="property">name</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;test-node--name-&#x27;</span>) &amp;&amp;</span><br><span class="line">    graphInstance</span><br><span class="line">    ) &#123;</span><br><span class="line">    <span class="title function_">highlightLocalNodesAndEdges</span>(graphInstance, e);</span><br><span class="line">    graphInstance.<span class="title function_">setItemState</span>(e.<span class="property">item</span> <span class="keyword">as</span> <span class="title class_">Item</span>, <span class="string">&#x27;status&#x27;</span>, <span class="title class_">ItemStatus</span>.<span class="property">ACTIVE</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onMouseLeaveNode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (graphInstance) &#123;</span><br><span class="line">    <span class="title function_">highlightAllNodesAndGraph</span>(graphInstance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">graphInstance?.<span class="title function_">on</span>(<span class="string">&#x27;node:drag&#x27;</span>, onNodeDrag);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I was thinking about how to implement the relationship diagram of Feishu Docs, so I remembered the G6 I used before, so I simply implemented a version.&lt;/p&gt;
&lt;h1 id=&quot;Final-effect&quot;&gt;&lt;a href=&quot;#Final-effect&quot; class=&quot;headerlink&quot; title=&quot;Final effect&quot;&gt;&lt;/a&gt;Final effect&lt;/h1&gt;&lt;p&gt;The main functions are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The node is divided into two parts, the top half is the icon and the bottom half is the text&lt;ul&gt;
&lt;li&gt;When the mouse is placed on the icon, it will produce a diffusion effect of water ripples, and a circle of borders will appear at the same time&lt;/li&gt;
&lt;li&gt;Text needs to be underlined and have a white background, and the water ripple effect cannot be blocked by the white background&lt;/li&gt;
&lt;li&gt;The underline of the text needs to be a square&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The connection should have a gradual change of color, and the gradual change of color should be from the beginning of the arrow to the end of the arrow, and if the two-way relationship is supported, how to achieve two edges&lt;/li&gt;
&lt;li&gt;There should be a Label in the middle of the connection&lt;/li&gt;
&lt;li&gt;Nodes and connections should support translucency&lt;/li&gt;
&lt;li&gt;The overall layout should be a force-oriented layout, and node dragging is supported. When dragging, nodes cannot overlap, but other nodes cannot be dragged due to connection (this point is raised separately because G6’s built-in force-oriented layout nodes will be dragged).&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Force-oriented algorithm</title>
    <link href="https://sunra.top/en/posts/62967/"/>
    <id>https://sunra.top/en/posts/62967/</id>
    <published>2023-02-23T02:59:53.000Z</published>
    <updated>2023-06-12T13:54:08.714Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I need to implement a relational graph in my work. The node layout in the graph needs to use force-oriented layout, so I was interested in the force-oriented algorithm involved, and I went to study it.</p><p>Force-directed graph drawings can be used to describe the relationships between nodes of a graph, distributing nodes to reasonable positions on the canvas, such as describing relationships between enterprises, interpersonal relationships in social networks, etc.</p><span id="more"></span><h1 id="Basic-principle-of-algorithm"><a href="#Basic-principle-of-algorithm" class="headerlink" title="Basic principle of algorithm"></a>Basic principle of algorithm</h1><p>Let’s first take a look at a rendering:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1677373207/origin-of-ray/bVbgUak_jbxebp.png" alt=""></p><p>The distribution of the points in the above figure is calculated by the force guidance algorithm, which is to regard the nodes as the same charge, and there is a repulsive force between them. This repulsive force simulates Coulomb’s law, and the closer the repulsive force, the greater the repulsive force; if there is a connection between two points, it is regarded as an attractive force between the two points. This attractive force simulates Hooke’s law, and the farther away the attractive force is, the greater the attractive force.</p><p>In the initial state, we randomly place points, and then these points will move in space due to attractive forces and repulsive forces until a balance is reached, forming a force-oriented layout.</p><h2 id="Repulsive-force"><a href="#Repulsive-force" class="headerlink" title="Repulsive force"></a>Repulsive force</h2><p>Consider each node as an electric charge, and there is a repulsive force between the charges, which is the Coulomb force. According to Coulomb’s law, the repulsive force between electrons can be calculated as follows:</p><script type="math/tex; mode=display">F = k_e\frac{q_1q_2}{r^2}\overrightarrow{e}</script><p>We can assume that $q_1 and q_2 $are both 1, then the above formula becomes</p><script type="math/tex; mode=display">F = k_e\frac{1}{r^2}\overrightarrow{e}</script><h2 id="Attractive-force"><a href="#Attractive-force" class="headerlink" title="Attractive force"></a>Attractive force</h2><p>Some particles are entangled by some edges that produce a spring-like Hooker attractive force:</p><script type="math/tex; mode=display">F_s = k_s(x - x_0)</script><p>The repulsive and attractive forces continue to act, the particles tend to balance after continuous displacement, and gradually no longer have relative displacement, and the energy is continuously consumed, and finally tends to zero.</p><p>Under the action of attractive force and repulsive force, the coordinates are constantly updated, and after multiple iterations, a stable state is reached, and the convergence is over. Parameters and iterations need to be debugged.</p><h2 id="Calculation-step"><a href="#Calculation-step" class="headerlink" title="Calculation step"></a>Calculation step</h2><p>If we want to use code to implement the simplified layout of the force guide diagram, we need several steps.</p><ul><li>Set point data nodes, link data links.</li><li>Random positioning of points.</li><li>Render View</li><li>Execution algorithm calculates position, renders view (repeated N times)</li></ul><h1 id="Code-implementation"><a href="#Code-implementation" class="headerlink" title="Code implementation"></a>Code implementation</h1><p>In fact, understand the above process, you can fully implement a version of the force-oriented algorithm, I just provide a simple version here, each person to achieve the algorithm and the final effect may be completely different</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">source, target</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">source</span> = source;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">target</span> = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CANVAS_WIDTH</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CANVAS_HEIGHT</span> = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForceDirected</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mNodeList</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="keyword">new</span> <span class="title class_">Node</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mEdgeList</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mDxMap</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mDyMap</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ejectFactor</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">condenseFactor</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> edgeCount = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; edgeCount; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> targetId = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * n);</span><br><span class="line">        <span class="keyword">let</span> edge = <span class="keyword">new</span> <span class="title class_">Edge</span>(i, targetId);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mEdgeList</span>.<span class="title function_">push</span>(edge);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">coefficient</span> = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable constant_">CANVAS_WIDTH</span> * <span class="variable constant_">CANVAS_HEIGHT</span> / mNodeList.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> initialSize = <span class="number">40.0</span>;</span><br><span class="line">    <span class="keyword">const</span> initialX = <span class="variable constant_">CANVAS_WIDTH</span> * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">const</span> initialY = <span class="variable constant_">CANVAS_HEIGHT</span> * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">mNodeList</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">x</span> = initialX + initialSize * (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">y</span> = initialY + initialSize * (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Calculate repulsion</span></span><br><span class="line">  <span class="title function_">calculateRepulsive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">mNodeList</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">this</span>.<span class="property">mNodeList</span>.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        distX = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">mNodeList</span>[j].<span class="property">x</span>;</span><br><span class="line">        distY = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">mNodeList</span>[j].<span class="property">y</span>;</span><br><span class="line">        dist = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distX * distX + distY * distY);</span><br><span class="line">        <span class="keyword">if</span> (dist &gt; <span class="number">0</span> &amp;&amp; dist &lt; <span class="number">250</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">mDxMap</span>[i] = distX * <span class="variable language_">this</span>.<span class="property">ejectFactor</span> / <span class="title class_">Math</span>.<span class="title function_">pow</span>(dist, <span class="number">2</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">mDyMap</span>[i] = distY * <span class="variable language_">this</span>.<span class="property">ejectFactor</span> / <span class="title class_">Math</span>.<span class="title function_">pow</span>(dist, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Calculate</span> the attractive force</span><br><span class="line">  <span class="title function_">calculateTraction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> startNode, endNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> e = <span class="number">0</span>; e &lt; mEdgeList.<span class="property">length</span>; e++) &#123;</span><br><span class="line">      <span class="keyword">const</span> eStartID = mEdgeList[e].<span class="property">source</span>;</span><br><span class="line">      <span class="keyword">const</span> eEndID = mEdgeList[e].<span class="property">target</span>;</span><br><span class="line">      startNode = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[eStartID];</span><br><span class="line">      endNode = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[eEndID];</span><br><span class="line">      <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">      distX = startNode.<span class="property">x</span> - endNode.<span class="property">x</span>;</span><br><span class="line">      distY = startNode.<span class="property">y</span> - endNode.<span class="property">y</span>;</span><br><span class="line">      dist = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distX * distX + distY * distY);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eStartID] = <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eStartID] - distX * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eStartID] = <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eStartID] - distY * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eEndID] = <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eEndID] + distX * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eEndID] = <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eEndID] + distY * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateCoordinates</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxt = <span class="number">4</span>, maxty = <span class="number">3</span>; <span class="comment">//Additional coefficients.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; mNodeList.<span class="property">length</span>; v++) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = mNodeList[v];</span><br><span class="line">      <span class="keyword">let</span> dx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(mDxMap[v]);</span><br><span class="line">      <span class="keyword">let</span> dy = <span class="title class_">Math</span>.<span class="title function_">floor</span>(mDyMap[v]);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (dx &lt; -maxt) dx = -maxt;</span><br><span class="line">      <span class="keyword">if</span> (dx &gt; maxt) dx = maxt;</span><br><span class="line">      <span class="keyword">if</span> (dy &lt; -maxty) dy = -maxty;</span><br><span class="line">      <span class="keyword">if</span> (dy &gt; maxty) dy = maxty;</span><br><span class="line">      node.<span class="property">x</span> = node.<span class="property">x</span> + dx &gt;= <span class="variable constant_">CANVAS_WIDTH</span> || node.<span class="property">x</span> + dx &lt;= <span class="number">0</span> ? node.<span class="property">x</span> - dx : node.<span class="property">x</span> + dx;</span><br><span class="line">      node.<span class="property">y</span> = node.<span class="property">y</span> + dy &gt;= <span class="variable constant_">CANVAS_HEIGHT</span> || node.<span class="property">y</span> + dy &lt;= <span class="number">0</span> ? node.<span class="property">y</span> - dy : node.<span class="property">y</span> + dy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">iterateCount</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; iterateCount; i++) &#123;</span><br><span class="line">      <span class="title function_">calculateRepulsive</span>();</span><br><span class="line">      <span class="title function_">calculateTraction</span>();</span><br><span class="line">      <span class="title function_">updateCoordinates</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I need to implement a relational graph in my work. The node layout in the graph needs to use force-oriented layout, so I was interested in the force-oriented algorithm involved, and I went to study it.&lt;/p&gt;
&lt;p&gt;Force-directed graph drawings can be used to describe the relationships between nodes of a graph, distributing nodes to reasonable positions on the canvas, such as describing relationships between enterprises, interpersonal relationships in social networks, etc.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>10 times programmer work method</title>
    <link href="https://sunra.top/en/posts/37760/"/>
    <id>https://sunra.top/en/posts/37760/</id>
    <published>2023-02-11T10:01:01.000Z</published>
    <updated>2023-06-12T13:54:08.706Z</updated>
    
    <content type="html"><![CDATA[<p>The recent chatgpt fire has made many people think that many jobs, including programmers, will be replaced. Other positions I do not know much about, but for the programmer career, I think but in fact this shows that the perception of programmers in dealing with the problem is that programmers deal with a particular independent problem on, or a separate very specific problem on, of course, this and programmer interview questions, after all, programmer interview questions is actually this, interview questions, to say the least, is to do the paper, do the paper how you may have the back of the Internet robot than, and those badly measured seem to be empty words, in an interview, people really do not necessarily perform than the back is all the interview experience post robot superior.</p><p>But in fact this is already forgetting what programmers exist for. The technology that programmers master is called information technology, and its purpose is to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI actually brings to us.</p><span id="more"></span><h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>In fact, it is now considered the fourth industrial revolution.</p><ol><li>The first was the age of steam, when mankind mastered great physical power, and machinery gave mankind the power to transform the physical world more powerfully</li><li>The second is the electrical age, which is a continuation of the first, allowing people to transform the world more quickly, while accelerating the efficiency of people’s material cooperation</li><li>The third is the information age, which is the age that most of us experience. Many people may not understand why information is important, after all, this thing is vague, and the Internet looks like an explosion of information, simply worthless. But in fact, for society, information is the most valuable thing, because, <strong> money is actually information, and even the entire human society exists on the basis of information, as stated in “A Brief History of Humanity”, without a common imagination, the largest human can only be maintained into a small tribe, just like the animals, it is a common imagination, so that humans have a cooperative </strong>. And the role of the market is to exchange information, no one person can handle all the information in human society, even if he has access to all information. Then there are luxury goods, such as jade, diamonds, gold, what makes you say that the price between them is different, is information, his physical nature is not expensive, so there is no need to ask why luxury goods are expensive, there is no reason.</li><li>the fourth is artificial intelligence, which is considered a continuation of the third. Why there is this thing is because of the explosion of information, too much, <strong> individuals can not handle it, the speed of processing information is too low, and many people cooperate will bring new information to deal with, these are the management to do up</strong>. There are many positions that acted as artificial intelligence in the past, such as low-end consulting positions, they actually help integrate information, because there is too much information, such as buying a house, unless you recently want to buy a house, you can not collect every day, to deal with, so it gave birth to people who specialize in processing this information it.</li></ol><p>So if the third industrial revolution is allowing people to collect and process information faster, then the fourth, chatgpt including artificial intelligence in my personal opinion, is giving everyone stronger tools to filter and process information.</p><p>This may not seem like an essential change, still improving the speed of processing information, but don’t forget that any complex problem is caused by simple problems coupled together <strong>quantitative change produces qualitative change. When there are enough problems and enough people involved, it’s not really a problem anymore</strong>.</p><p><strong> complexity is the biggest problem, capital all efforts to improve efficiency, efforts to understand the laws of the world, management science, etc., are designed to reduce complexity, of course, the overall efficiency improvement does not mean individual happiness, because the overall want to be efficient, in which each individual can not have a personality </strong>. Conversely, if a tool can improve the efficiency of enough, is the industrial revolution, the industrial revolution is actually a tool to bring great efficiency improvements.</p><p>All this to say, is to express a point of view, programmers deal with things is actually to reduce the complexity of information, the analysis and processing of information to the machine, the first thing to do the programmer itself to understand this information, and then transformed into a program, so the value of the programmer’s work does not lie mainly in programming, if not to help deal with information, reduce the complexity of the complexity to the machine, the more brilliant technology is useless. After all, it is never the capital that determines the direction of technological development.</p><p>So the focus of improving programmer productivity shouldn’t just be on how to knock out code faster, except of course for the very few people who make tools for programmers.</p><h1 id="10x-programmer-work-method"><a href="#10x-programmer-work-method" class="headerlink" title="10x programmer work method"></a>10x programmer work method</h1><p>The following content comes from the column of the same name in the geek time, here is just a summary of my personal notes, we recommend you to see the column</p><h2 id="Thinking-Framework"><a href="#Thinking-Framework" class="headerlink" title="Thinking Framework"></a>Thinking Framework</h2><p><strong>Essential and Contingent Complexity</strong><br>There is a famous book in the software industry called “The Myth of the Human Moon”, which mentions two very important concepts: Essential Complexity and Accidental Complexity.<br>Simply put, essential complexity is what must be done to solve a problem no matter how it is done, while accidental complexity is what has to be done more because of the improper choice of the way to do things.<br>For example, if you want to make a website, the content of the website is something you have to write anyway, and this is the “essential complexity”. If you are still writing a website in assembly today, it is impossible to be more efficient because you have chosen the wrong tool. This kind of problem caused by choosing the wrong method or tool is the “accidental complexity”.<br><strong>Four principles of best practice</strong></p><ul><li>Begin with the end in mind;</li><li>Task breakdown;</li><li>Communication feedback;</li><li>Automation.</li></ul><p><strong>Thinking Framework:</strong></p><ul><li>Where are we?</li><li>Where are we going?</li><li>How can we get there?</li></ul><p><strong>Linkage between the Four Principles and the Thinking Framework</strong><br>In practice, this thinking framework will help me better understand my work. For example, when a product manager gives me an explanation of a feature to be developed, I usually ask him questions such as</p><ul><li>Why this feature and what value it will bring to users?</li><li>What kind of users will use this feature, in what scenarios will they use it, and how will they use it?</li><li>Are there other means to achieve this? Is it necessary to develop a system?</li><li>After this feature goes live, how do you measure its effectiveness?</li></ul><p>If the product manager can answer these questions well, it means that he has basically thought this job through more clearly, and at this time, I will feel comfortable to understand the details of the follow-up.<br><strong>Begin with the end in mind</strong> means setting your goals at the beginning of your work. <strong>We need to see the real goal, not the work that others have explained to us as the goal</strong>. You can see that this principle is helping us to answer the question in the Thinking Framework, Where are we going? This question.<br><strong>Task decomposition</strong> is to break down the big goal into feasible tasks. The more detailed the work is broken down, the better we can control the work. It is a way to help us answer the question of how can we get there?<br>If the first two principles are to be done before the hands-on analysis, then the last two principles are on the road to the goal, to escort us, because in practice, we can not help but deal with people and machines.<br><strong>Communication Feedback</strong> is about unblocking the channels of interaction with others. On the one hand, we ensure that information can be communicated to reduce work omissions caused by misunderstanding; on the other hand, we must also ensure that we can accurately receive external information so that we do not feel good about ourselves and hinder progress.<br><strong>Automation</strong> is the automation of tedious work to be performed by machines, which is part of our job as programmers. We are good at building automation for others, but we don’t apply it enough for our own work, and this is the part of our job that deserves optimization.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112035/origin-of-ray/1667091571184-7dee658b-ff37-4377-b884-6d18b4d80736.png_averageHue_23d1c4bc_clientId_ua2b346c7-a2c6-4_from_paste_height_457_id_u7555d25b_name_image_jub744.png" alt="image.png"></p><h2 id="Begin-with-the-end-in-mind"><a href="#Begin-with-the-end-in-mind" class="headerlink" title="Begin with the end in mind"></a>Begin with the end in mind</h2><p><strong>Begin with the end in mind: how to make the effort not in vain</strong><br>We face real work scenarios on a daily basis: many of us just hear about a feature that someone has asked to do and start brainstorming everything that comes next. The result is that the effort put in is meaningless.<br>“Beginning with the end in mind” is a counter-intuitive way of thinking that most people do not possess. Therefore, in our daily life, we see many interesting phenomena. For example, when you graduate from college, there are many people who want to go to graduate school. If you ask them why they want to go to graduate school, the reason they get is usually to find a good job. But can studying really help him find a good job? Not necessarily, because finding a job and going to graduate school are not even the same skill tree. If you really want to find a good job, then you should understand what the job requires and how you can acquire the skills required for the job.<br>The example of “designing a login function”, compared with the thinking of “beginning with the end”, you may be unfair for my colleagues, they may also have the thinking of “beginning with the end”, only that Their “end” and I, the customer’s “end” is not the same. This brings us to <strong> do software, is essentially building a “collective imagination”. </strong><br><strong>Imagined Community</strong><br>We do software is actually a community of imagination, the “collective imagination” is the software we want to do, any imagination needs a carrier to show it, we write software is the process of the “collective imagination” to implement the process.<br>Since it is a “collective imagination”, it is difficult to unify our imaginations before the carrier presents them, and they all differ to a greater or lesser extent.<br>So, <strong>everything is created twice: once in the mind, which is the intellectual or first creation (Mental/First Creation), and then only when it is put into practice, which is the actual construction or second creation (Physical/Second Creation)</strong>.<br>Going back to the “designing a login” example, my colleagues were building their own imagination, not ours.<br>One of the biggest differences is that no one will pay for their own imagination. So, <strong> they see the “end” is not the real end, but only an ego “end”, as to see what kind of “end”, it depends on each person’s insight </strong>.<br>For those who do software, we should position the “end” to do a valuable software for users, to bring value to others, their value can be reflected.<br><strong>Planning and Discovery</strong><br>With the “end in mind” mindset, we think about how others will use our platform. We designed it in such a way that users would go to our website, read the documentation, and then follow the documentation step by step. One of the key points is that the documentation, especially the “Getting Started” documentation, is the first step for the user to get in touch with our platform and determines his first impression of our product.<br>So, we decided to start by writing the “Getting Started” document, which depicts how users can use our development platform step by step to complete their first “Hello World” level application. Note that at this point, we hadn’t written a single line of code.<br>Human beings are a group of people who are good at brainstorming. Once someone sees the document, he can already conceive the platform as it already exists, and then give all kinds of feedback: “I think this place can be done like this” “I think that place can be changed “.<br><strong>All of this feedback is real because they have “seen” a real thing. It was this real feedback that allowed us to gradually lock in our target. </strong>After that, we started to write the code.<br>An “end-to-end” approach not only helps us plan our work, but also helps us identify problems in our work.<br>Amazon CTO describes how Amazon develops a product, in short, they use a backwards working approach, the sequence of developing a product is</p><ol><li>writing press releases;</li><li>write FAQ (Frequently Asked Questions);</li><li>writing user documentation;</li><li>write code.</li></ol><p><strong>Chasm of Understanding</strong><br>The topic of our discussion is “Begin with the end in mind”. Our first question is, what exactly is “the end”? In the previous example, the “end” is “finished”, but Li thinks his work is done, but Zhang thinks he is not done.<br>There are many ways to bridge the gap, but there is a best practice called <strong>DoD (Definition of Done)</strong>, and it is easy to see from the name of this concept that it was created to solve the common problem of “completion” in software development.<br>How to make DoD work better.</p><ul><li><strong>DoD is a checklist of check items that are used to check how well our work is done</strong>. A DoD check item is a set of valuable activities that we need to develop a product. For example: writing code, writing test code, passing acceptance by testers, etc. What kind of activities are valuable may be perceived differently by each team. But if your team perceives nothing but functional code as valuable, perhaps this is a sign that your team as a whole is lacking in professionalism and the prospects of working in such a team are not good.</li><li><strong>DoD’s check items should be actually checkable</strong>. You say the code is written, where is the code; you say the test coverage is up to par, how do you see it; you say you have the functionality done, demonstrate it.</li><li><strong>DoD is a mechanism for team members to report back to each other</strong>. Don’t think of “reporting” as complicated. The simplest way to report is to say “this feature is done”. When we have a DoD, there are only two states of doing things, “done” and “not done”. In teamwork, we often hear people say “this thing is 80% done”, sorry, that is called not done, there is no 80% done.</li></ul><p>If you can think outside the box, you will find that DoD thinking is very versatile in your work. For example, when we need to work with other teams to develop an interface, we all know that the first step is to get the interface defined.<br><strong>Once the DoD is established in collaboration, we can even solidify it through a process to get the job done more efficiently and with high quality. </strong>Of course, we inevitably have ad hoc tasks in our work lives that are not complex enough to require a process, but can be solved efficiently with a DoD mindset. For example, I often have people come over and ask me to help with something. Using DoD thinking, I first ask the person exactly what I need to do, confirm the details (equivalent to defining the “checklist”), and then I know how far I can go with the favor. When I ask someone for a favor, I tell them exactly what I need them to do to minimize unnecessary misunderstandings.<br>DoD is a mindset, a way to eliminate as much uncertainty as possible and reach consensus. We do things in a way that “the end is the beginning” and DoD allows us to clearly define the “end” at the beginning.<br>The root cause of all the problems that often arise in human collaboration is that there are too many misunderstandings caused by differences in understanding that waste a lot of time, and DoD is a way to put ideas that are prone to ambiguity into practice.<br><strong>Define the criteria for completion before you do anything. </strong><br><strong>What is the first thing to do when you receive a requirement assignment? </strong><br>In software development, what programmers do is generally defined by requirements. We all know that requirements are an important part of software development, but you may not have thought carefully about the different ways of describing requirements that may affect our programmers’ understanding of them.<br><strong>Because the transmission of information decays, you cannot transmit 100% of what you understand to another person</strong>, and in between, how it is transmitted, i.e. how it is described, will directly determine the percentage of decay.<br>Many companies have a software development model based on a feature list that “defines” what programmers will do, and each group gets the list from the product manager and starts writing the code “as is”. However, often this feature list is just a simple description and you don’t see the big picture.<br>One of the states of many teams is that the programmers know what the feature to be developed is, but many of them can’t answer who is using this feature in what scenario. If you ask him why he is developing this feature, he usually says: it is specified in the feature list.<br><strong> This feature list style of requirements description knocks a complete requirement into pieces. </strong> Only when all the features are developed and dovetailed together is it time to “break the mirror”.<br>Based on this feature list-based requirement description, each group schedules its work with the features as it understands them. So, when your group finishes a feature, that feature may not make it to the line because you have to depend on the work of another group that, not coincidentally, happens to have the related feature development scheduled. This is just the case where there are dependencies between two groups, so imagine how bad the situation would be if multiple groups need to collaborate.<br>As a result, new ways of describing requirements have emerged, of which User Story is one of my favorites. It describes a user’s desired functionality from the user’s point of view, focusing on the path the user needs to take to complete an action in the system. Since it is a “story”, it needs to be a complete scenario that can be told.<br><strong>It’s good if your team uses a user story format for requirements description, but if not, supplementing the feature list with acceptance criteria will greatly improve the efficiency of collaboration between the two parties. </strong><br>The implementation details given in the acceptance criteria should be business, and it is really a waste of time for programmers to think about such issues, and our space to play should be in the technical implementation.<br>Although you are nominally a programmer, when you get a requirement, the thing you have to do is not to write code immediately, but to play the role of a product manager, analyze the requirement and circle the scope of the task. Trust me, analyzing beforehand is definitely much better than taking a written system to your boss and him telling you it’s not what he wants.<br>If there is only one thing you can remember from today, remember this:<strong> Set acceptance criteria before you do any requirements or tasks</strong>.<br><strong>Lean Startup</strong><br>What Lean Startup provides us is a framework for thinking about making products, and most of the products we can come across can be put into this framework.<br>With the framework structure, our life is simple. When a product manager wants to make a new product or a new feature of a product, we can use these concepts of Lean Startup to check whether the product manager has thought it through.<br>For example, <strong> you want to do this product feature, what is the thing that you want to validate? Is there data available to measure the goal he is trying to validate? Is this problem to be solved the most important thing at the moment, and are there other more important problems? </strong><br>If the above questions are answered in the affirmative, is there a simpler solution to validate this goal, and does it have to be achieved by developing a product feature?<br><strong>Expanding the work context</strong><br>Programmers always like to use technology to solve all problems, but many of the problems that make people sleepy are not problems at all. The reason why they can’t find a simpler solution is that many times programmers are limited by their own thinking.<br><strong>The real difference between working in different roles is the difference in context. Problems that are difficult to solve in one local context can even be left unsolved by switching to another context. So no matter how hard a single point is worked on it is only a local optimization, and it is difficult to achieve optimal results. </strong><br>If you want to do your job well, you need to constantly expand the context of your work, learn more about what the logic of other people’s work looks like, and recognize the full lifecycle of software development.<br>Expanding your context can be good for your career, in addition to helping you to be more productive at the moment. As you see a wider world, you get more and more opportunities.<br>If there’s only one thing you remember from today, remember this: <strong>Expand the context of your work and don’t limit yourself to the role of a “programmer”. Don’t limit yourself to the role of a “programmer.” </strong><br><strong>Path to Results</strong><br>With regard to “beginning with the end”, what we have been talking about is seeing results, and results are important. However, it is the path to the result that is more important.<br>In contrast to our work, in most cases, even if the goal is clear, the path is blurred. So, different people have different ways of dealing with it. Some people go where they go and then look at it; others project the path first and see how far they can go. In our process of making software, the differences brought by these two paths have been reflected in the previous short story. One is the first period of its happiness, the later hand to hand; one is the front of thinking ahead, the back of the four stable. I personally respect the latter approach.<br>This idea is not difficult to understand, and we can easily apply it to many aspects of our work. For example:</p><ul><li>before making a product, to deduce how this product will be promoted and to what kind of people by what means;</li><li>Before making technical improvements, consider how going live is a process and prepare a plan for possible problems;</li><li>Before designing a product feature, let’s consider who provides the data and what the complete process looks like.</li></ul><p><strong>Make the results of your work digitally available</strong><br><strong>Iteration 0</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112080/origin-of-ray/1667388901396-30a76c14-7687-4f11-b4ff-3a85fb08be48.png_averageHue_23fefefe_clientId_u6d7a8eac-a85f-4_from_paste_height_772_id_u1823cf52_name_image_fsji0l.png" alt="image.png"><br>Compare this list to the fact that most new projects are under-prepared on one or more items. Even if you are not doing a project from scratch, comparing this list will reveal that the project is lacking in some items and you can make some targeted additions. If there’s only one thing you remember from today, remember this: design your Iteration 0 list and give your project a medical checkup.</p><h2 id="Task-Breakdown"><a href="#Task-Breakdown" class="headerlink" title="Task Breakdown"></a>Task Breakdown</h2><p>Well, sharing these two examples with you is just to warm up and show that human problem solving solutions are pretty much the same. When a complex problem is presented to us, one of the main ideas we have to solve it is to divide and conquer.<br>A big question is one that we all struggle to give answers to, but answering small questions is something we excel at. So, when we learn to break down a problem, it is a big step toward its solution.<br><strong> So, what is the difficulty in solving problems with this mindset? Give an executable decomposition. </strong><br>However, in practice, most people overestimate their executable granularity and underestimate the degree of task decomposition. In other words, if you haven’t done the practice of task decomposition, most of the tasks you decompose will be on the large side of granularity.<br>Only if you can break down the task very small, you can have a clearer understanding of your ability to perform, the real masters are very strong decomposition ability. This difference is equivalent to, the same observation of an item, you use the eyes, while the master is using a microscope. In your opinion, the masters are all micro-operations.<br><strong>The software industry today is all about embracing change, and task decomposition is a prerequisite for us to embrace change. </strong><br><strong>In fact, the main reason why many people can’t write tests well is that they don’t understand task decomposition. </strong><br>Small things have a short feedback cycle, while big things have a long feedback cycle. Small things are easy to do well, while big things are much more difficult. So, with this criterion, it is easier to write good tests at the bottom level. In addition, because there are too many modules involved, any module that is adjusted may break the high-level test, so the high-level test is usually relatively fragile.<br><strong>Test Driven Development TDD</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112098/origin-of-ray/1668079382524-b25c0e83-faac-4d58-89d5-ea262f5837fc.png_averageHue_23fdfbfa_clientId_u4873b967-c53e-4_from_paste_height_652_id_u38c9e075_name_image_kctirp.png" alt="image.png"><br>In test-driven development, refactoring and testing go hand in hand: without testing, you can only refactor in fear; without refactoring, the code is progressively more confusing and the tests become worse and worse to write. Because refactoring and testing work together, it drives you to write better and better code. This is the crudest understanding of the word “drive”.<br><strong>Test Driven Design</strong><br>There are two main reasons why many people resist testing:<br>First, testing requires an “extra” amount of work. I put extra in quotes here because, while you might instinctively think that testing is extra work, it should actually be part of the programmer’s job, as I mentioned in the previous article.<br>Second, many people will feel that there is too much code to test. The reason why these people think that the code is not good to test, which implies an assumption: the code has been written, and then, then write tests to test it.<br>If we reverse the thinking, I have a test, how do I write code that will pass it. <strong>Once you think about the test first, the design thinking changes completely: how do I write my code so that it is testable, that is, we have to write code that has testability. </strong>With this perspective, doesn’t testing become easier?<br>Let’s take one of the most common problems in writing code: static methods<br>The Mock object approach doesn’t work with static anymore. Because it is outside the object system, <strong>static methods cannot be inherited, i.e., they cannot be handled in a series of object-oriented ways</strong>.<br>You don’t have a way to use the Mock object, and you can’t set the corresponding method return value. To get the method to return the corresponding value, you have to open the static method, understand its implementation details, carefully follow the path inside, and carefully set the corresponding parameters before you can get it to give you the expected result. Worse yet, because the method is maintained by someone else, one day he modifies the implementation on a whim and your carefully set parameters fall apart. And to do the setup again you have to reread the code all over again.<br><strong>In this way, your work reverts to its original state. What’s more, it’s not what you should be focusing on, and it doesn’t add to your KPIs.</strong><br>Obviously, you’ve gotten off track. By this point in the discussion you already know that static methods are not test friendly. So, if you want to make your code more testable, <strong>a good solution is to try not to write static methods</strong>.<br>static is a convenient but evil thing. So, limit its use. Unless your static method does not involve any state and has simple behavior, for example, determining whether a string is null. Otherwise, don’t write a static method. As you can see, such static methods are better suited for library functions. So, when we write applications on a daily basis, we try not to use them if we can.<br>What if you encounter a third-party static method in your own code? It’s simple, just wrap the third-party code so that your business code is facing your own wrapper.<br><strong>How to do a good task breakdown</strong><br>Finally, I want to emphasize one thing in particular, all the tasks that are broken out, are independent. That is to say, <strong>for every task done, the code is committable</strong>. Only in this way can we achieve a real sense of small step commits.<br>If there is only one thing you can remember from today, remember this:<strong> Arrange the decomposed tasks in the order of complete implementation of a requirement. </strong><br><strong>Why are your tests not good enough? </strong><br>I have seen many teams that have had a variety of problems with testing, such as</p><ul><li>Inconsistent testing, passing this time but not the next;</li><li>sometimes it is a test to test something very simple, test around a lot of dependencies, build the environment will take a long time;</li><li>For this test to run, it must wait until the other test has finished running; ……</li></ul><p>If you have encountered similar problems in your work, then what you understand by writing tests and what I understand by writing tests may not be the same thing, so where does the problem lie? Why are your tests not good enough? Mainly because these tests are not simple enough.<br><strong> Testing can only be done well if complex tests are broken down into simple tests. </strong><br>Why should testing be simple? There is an interesting logic, I don’t know if you have thought about it, what is the role of testing? Obviously, it is used to ensure the correctness of the code. An ensuing question is, who guarantees the correctness of the tests?<br>Since it is impossible to write a program in a way that guarantees the correctness of a test, we have only one solution: <strong> Write the test simple, so simple that it is easy to understand at a glance and does not need to prove its correctness. </strong>So if you see any test written in a complicated way, it must not be a good test.<br><strong>Test for bad taste</strong><br><strong> Many people always want to do many things in one test, for example, there are several different method calls. May I ask, who exactly is your code testing? </strong> Once this test goes wrong, you need to look at all the several methods involved, which definitely adds complexity to the work.<br>Another area of high incidence of typical “bad taste” is in assertions, and remember, <strong>tests must have assertions</strong>.<br>There is another common “bad taste”: complexity. The most typical scenario is that <strong>when you see all kinds of judgments and loops in the test code, there is basically something wrong with the test</strong>. For example, testing a function, your assertion is written in a bunch of if statements, and the name is that it executes according to the condition. How do you guarantee that the test function is written correctly? Unless you use debugging means, you can not even tell whether your conditional branch is executed to. You may wonder, I have a whole bunch of different data to test, without loops or judgments, what do I do? What you should really be doing is writing several more tests, each covering one scenario.<br><strong>A journey (A-TRIP)</strong><br>How about a test that is considered a good test?<br>Someone made a summary A-TRIP, which is an acronym for five words, are</p><ul><li><strong>Automatic, automated; </strong>leave the tests to be executed by machines as much as possible, the less human involvement the better.</li><li><strong>Thorough, comprehensively; </strong> you should cover as many scenarios as possible with tests. There are two perspectives to understand this. One is to consider various scenarios before writing the code: normal, abnormal, various boundary conditions; the other perspective is that after writing the code, we have to see if the tests covered all the code and all the branches, and this is the scenario where various test coverage tools come into play.</li><li><strong>Repeatable; </strong>There are two perspectives in this: a particular test should be run repeatedly and the result should be the same, which says that each test itself should not depend on any environment that is not under control; there is another perspective that a bunch of tests should be run repeatedly and the result should be the same. This shows that there is no dependency between tests and tests, which is another feature of tests that we will talk about next.</li><li><strong>Independent; </strong>There should not be any dependency between tests and tests. For example, if a test depends on an external database or a third-party service, and Test A writes some values in the database when it runs, and Test B has to use those values in the database, Test B must run after Test A. This is called having a dependency.</li><li><strong>Professional, professional. </strong></li></ul><p><strong>How to cut the demand? </strong><br>If I ask you what this requirement is, for example, most people’s first instinct is still username password login.<br>Basically, the requirement description that pops into your head is the topic (epic), which in agile development some call the master story.<br>If the granularity of your management of requirements is the subject, then so many things can not be talked about. For example, when time is short and I want to cut requirements, you ask the product manager if it’s okay if I don’t do logins, and you wait for the rejection.<br>However, if you say time is tight, can I put the login captcha to the back, or the email address verification function to the back, this kind of suggestion product manager is able to talk to you.<br>The difference lies in the fact that the latter breaks down the requirements.<br><strong>Needs to be broken down</strong><br><strong>“Themes” only help you remember the general direction, but the real use of requirements management relies on further decomposition of requirements</strong>. For this discussion, we’ll continue with the requirements description we’ve already described in the previous column: the user story, which will be the basic unit of our requirements management discussion here.<br><strong>Evaluating user stories has an “ INVEST Principle “</strong>, which is an acronym for six words, namely:</p><ul><li>Independent, standalone. A user story should accomplish a separate function and not depend on other user stories as much as possible, because user stories that depend on each other make it more difficult to manage priorities and estimate workloads. If dependencies do exist, a good practice is to break out the dependent parts and realign them.</li><li>Negotiable. It is a prerequisite for working together. We can’t guarantee that all the details will be 100% implemented in the user story, so the best way to do this is to negotiate. It is also a prerequisite for meeting other judging criteria, as mentioned earlier, a user story is not independent and needs to be broken down, which also needs to be discussed together.</li><li>Valuable, valuable. A user story should have its own value, this item should be the easiest to understand, no value of things not done. But as we have been saying, before doing any of these things, ask where the value lies.</li><li>Estimatable. We will use the results of user story estimation to arrange the subsequent work plan. User stories that cannot be estimated are either because there are many uncertainties or because the requirements are still too large, such stories are not yet in a state where they can be developed and need further analysis by the product manager.</li><li>Small, small. Big steps, no. User stories that can’t be completed in a certain amount of time should only have one result, split. A small user story is easy to schedule, so you can organize your work. testable. Who knows if you’re doing it right if you can’t test it. This is what we have emphasized earlier, that is, the acceptance criteria, you have to know how to be considered work done.</li></ul><p>The first concern is negotiability. As implementers, we have to ask questions. Programmers who are just passive recipients are worth half as much, and as soon as you start asking questions, you’ll find a lot of things that the people who wrote the requirements didn’t think through.<br>Countless times in my career I’ve blocked requirements back, not because I wasn’t cooperative, but because I didn’t want to do something muddled. The reason I can ask questions is partly out of common sense, and partly whether the user stories described here are valuable. User stories, the reason they are stories, are to be told and communicated.<br>There is a more important concern, and one that is at the heart of this module: smallness. Whether it’s independent or estimable, the premise is small. Only when the user story is small enough, our subsequent room for maneuvering will be large. The next important question is, how to be considered small? This brings us to another important aspect of user stories: estimation.<br>Usually, it is the two sides that have a deviation in understanding the requirements, and then the colleague responsible for writing the user story has to step up and help clarify the requirements. So, in general, the estimation process is also a process for everyone to deepen their understanding of the requirements. Estimation has another important role: to discover particularly large user stories. In general, a user story should be completed within one iteration.<br>The real dilemma for many teams is the lack of requirements decomposition in the development process. In this case, the basic unit of requirements management is a theme, and since it is the basic unit, it is an indivisible whole. The team is then tied alive to a huge requirement with no room for maneuvering. If the team can decompose the requirements, the basic unit of requirements will be reduced, and everyone will no longer see the “ironclad” piece, so they can adjust more easily and have more room to move.<br><strong>Demand Management</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112146/origin-of-ray/1669688919178-f48fc53b-2a0f-432e-997b-35ebe0be2265.png_averageHue_23fefefc_clientId_u496d162f-a4d1-4_from_paste_height_653_id_ue8a35552_name_image_qktkqz.png" alt="image.png"><br>Use a few examples from the life of a programmer to help you understand. Let the system can not run properly online failure, it belongs to important and urgent things, do not rush to solve, it will affect the normal operation of the company. The team to upgrade the system transformation is important not urgent: transformation is good, performance is also good, maintainability is also improved; not transformation, a moment can also be used. Some temporary tasks are urgent and unimportant, while the brush of friends is neither urgent nor important.<br>According to the concept of time management, important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible. <strong>The biggest change this matrix brings to our thinking is the realization that things and things are not equivalent. If one does not focus on the important things, in the end they may all become urgent things</strong>.<br>Bringing this idea back to our reality of requirements management, you will find that <strong>in fact, the priority ranking used for the various requirements faced by the team is basically in order of urgency</strong>, but are they really important?<br>If you throw this question at the person who created the requirement, I’m almost certain that the answer they give you is that the requirement they created is important. One possibility is that they can’t tell the difference between important and urgent, just as we are sometimes confused.<br>Imagine two product managers show up in front of you, one tells you that the company wants to expand in a new direction and this feature has to be done, while the other says that the company wants to further profitability and that feature has to be done. To you, they both say the right thing, and both sound pretty important. But the bone-chilling reality is that you put both things next, and what awaits you is an exhausting task that can’t be completed. What can we do at this point? Jump out of this context and into a larger context. <strong> You can’t judge which need is more important, so ask a higher level boss to do so. </strong><br>A few more words of divergence, for people to do the same to constantly expand their own context, which is what we often say to increase knowledge. Many so-called life problems are caused by limited insight. For example, if you feel that there are always people in the company and you than the technology, such as the long-term vision, put yourself on the level of the whole industry to compare. Because you are working for your own career, not a company.<br>After the decomposition of the requirements, the most important thing is, to arrange the priority of the requirements. There are many ways to prioritize, we can take a cue from time management and divide things according to the dimensions of importance and urgency to get four quadrants. We need to focus on the important things as much as possible, rather than the urgent things as a way to prioritize.<br><strong>Breaking down requirements into smaller pieces actually breaks down the context</strong> that was originally unified. If you want to manage requirements effectively, especially to determine how important things are,<strong> one way is to retrieve the lost context</strong>. If we can’t determine the context ourselves, a good way to do that is to <strong>bring in a larger external context</strong>.<br><strong>How to make a product with minimum cost? </strong><br>Our instinct, of course, is to implement everything and then test it, but the world doesn’t stop and wait for us. Time and time again, we have been taught that “hold back” waterfall software development has become an anachronism. So how do we achieve our vision? The only way is to break it down.<br>As we mentioned earlier, Lean Startup is about validating product ideas in the real world through continuous experimentation, and one of the key practices is Minimum Viable Product (MVP), which we will discuss this time.<br>Let’s start with “minimal”. Here the “minimum” refers to the minimum cost. How to call the minimum cost, is not to do what can not do, can simplify things to simplify.<br>First of all, we must be clear about one thing, what we want to do is to verify the feasibility of an idea, not even to develop a software, developing software is just a means of verification.<br>Many programmers have a misconception that it is easy to treat the solution as a problem. We develop software for the purpose of solving problems, wouldn’t it be better if we solved the problem without writing the software.<br>The first step was to verify whether such an idea was feasible. We made a product document, as if we already had the product, and asked our sales colleagues to take the document to the customer to see how the customer reflected on the idea. In the process, we validated the basic idea that the need for IoT transformation of existing devices existed, and when customers saw such a thing, all kinds of ideas and requirements popped up. In addition, we gained an additional benefit, we knew the price range that customers would accept for such a product, which helped the team to price the product appropriately. Having validated the directional ideas, we moved on to the specific product design phase. What we wanted to verify in this phase was whether the product design we gave was acceptable to the users. So, we decided to make the interaction of this product. Thanks to the rapid development of prototyping tools, we made a relatively complete user interface with a prototyping tool and made all kinds of interaction flows. To the user, this is almost complete software.<br>After “minimal”, let’s look at “feasible”. <strong> Feasible is to find a path to give the user a complete experience. People who come from a programmer’s background always know software systems module by module, and the relatively weak aspect is the lack of a complete picture</strong>. But from the perspective of product viability, we need to shift our thinking, not a module to do how complete, and a user path is smooth<br>When time is limited, we need to learn to find a viable path to find a balance between a complete user experience and a complete system.<br>Step by step, we launched a relatively complete P2P platform. In this process, we put new features on line at each stage, and from the user’s visible point of view, what he sees is always a complete platform, the changes of which can only be seen clearly from the perspective of the internal implementer. (For example, the repayment function, although it is one of the complete life cycle, no user will use it in the first month, so the scheduling can be a bit later)<br>To use the concept of minimum viable product well in practice is to find a viable path at minimal cost. <strong>Minimal cost means not doing what can be done and simplifying what can be simplified. </strong><br>Programmers are usually willing to solve problems with their own code, and writing code is usually a very costly solution, which should be the final product solution. The path that works is a complete user experience path, at least in the eyes of the user.<br>We often want to give our clients a complete system, but with limited time, we must learn to break it down.<br>If there’s only one thing you can remember from today, remember this: the most viable way to do good product development is to use MVP.</p><p>In this module, we learned some best practices:<br>Test Pyramid<br>— Best practices for testing portfolios in the industry.<br>— Writing more unit tests is key.<br>Test Driven Development<br>— The rhythm of test-driven development is: red - green - refactoring, refactoring is the key to test-driven development area different from test first.<br>— Some people understand test-driven development as test-driven design, and it brings a change in thinking to the industry to write testable code.<br>Eisenhower Matrix (Eisenhower Matrix)<br>— Divide things according to importance and urgency.<br>— The important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible.<br>Minimum Viable Product<br>— products that are “just right” for our customers’ needs.<br>— in practice, to find a viable path at minimal cost.<br>In addition, I mentioned a number of practices and rubrics that can be applied directly in the workplace:</p><ul><li>Try not to write static methods;</li><li>A master branch development model as a better development branch model;</li><li>Good user stories should conform to the INVEST principles;</li><li>Estimation is a process of deepening understanding of requirements, and good estimation is based on task decomposition;</li><li>A good test should comply with A-TRIP.</li></ul><p>I’ve also taken you through some important ideas to help you better improve your own development work::</p><ul><li>Divide and conquer, a basic human problem-solving tool;</li><li>Software change costs, which increase over time and in development phases;</li><li>Testing frameworks that introduce automated testing as a best practice into the development process, allowing testing actions to be fixed by standardized means;</li><li>Extreme programming is called “extreme” because the idea behind it is to push good practice to its limits;</li><li>The secret of the master programmer’s work is task decomposition, down to the micro-operations that can be performed; arranging development tasks in the order of complete implementation of a requirement.</li></ul><h2 id="Communication-Feedback"><a href="#Communication-Feedback" class="headerlink" title="Communication Feedback"></a>Communication Feedback</h2><p>We work hard to learn all kinds of knowledge in order to better understand how the world works, and communicating feedback is the best way for us to interact with the real world.<br>When several people discuss a problem together, someone else often just starts a conversation, he thinks he has understood the idea of others, and then starts to express his own point of view. The information is incomplete, so how can we talk about decoding. So, development team discussions often involve one person talking about something but getting off topic. We have to accept feedback from the real world if we want to make our work life better, and accepting feedback from the real world requires us to, first, open our own receiver to accept the signal in and let the feedback in, which is the premise of decoding; second, expand our insight and improve the effect of our decoder to better understand what others want to express in the end. Having said that the encoder and decoder may have problems, let’s look at another problem that may cause impact: codec algorithm, that is, how to coordinate the two sides of communication to communicate more effectively.<br>Life is not as good as it should be. A big reason why many people have so many bad things is that we have a lot of unrealistic fantasies about the real world, and good intentions do not drive the world, and this is also true in software development. Although people and people live in one world, their understanding of the world is very different.<br>Improving codecs requires several perspectives: encoders, which allow for more accurate information output; decoders, which reduce signal filtering and improve decoding capabilities; and codec algorithms, which are various “best practices” from the industry that coordinate both sides of the communication.<br>Write code in the language of the business, one is highly readable, the other is able to identify the constant and changeable parts of the code, better practice design patterns, and achieve domain-driven design<br><strong>Lightweight Communication</strong><br>The meeting is to solve the problem, but the real situation is to open the meeting and did not solve many problems, this is a strange contradiction. Thinking back, have you ever attended a meeting that worked particularly well? In my career, where the effect of the meeting is particularly good, basically used to do information synchronization. For example, the leader announces a thing, this kind of meeting will hardly waste time. The message is announced, everyone receives it, and it ends. And what is a bad meeting like? Almost all of those discussions, you say one thing and I say another, each meeting almost without exception, there are a few good at interrupting, this meeting will basically run out of time, the time will be so minute by minute.<br><strong>The first action item to improve the meeting is to reduce the number of people involved in the discussion</strong>. Some people will say, “I have several topics for this discussion, and each topic requires different people to participate, so what you need to do is to find these people separately to discuss specifically, instead of putting everyone together. Compared to the meeting format, face-to-face communication is not possible because of the limited attention span and the number of participants is not too large. Also because the number of participants is relatively small, each person’s input will be a little more.<br><strong>The second action item is, if you want to discuss, find people to communicate face to face. </strong>If there is an issue that needs to be discussed, what I want to do is to find the relevant people to discuss it separately for the topic of concern, and then, I will summarize the results of the discussion and then go back to seek everyone’s opinion. If everyone agrees, I will choose to meet only. This time, <strong> the purpose of the meeting is no longer a discussion, but a synchronization of information </strong>: I am ready to do so, the relevant parties have agreed, to inform everyone, end.<br>Try to communicate in a more visual way.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112178/origin-of-ray/1669902990925-8a11e407-496a-4218-b2ad-770dd8554be1.png_averageHue_23edeeee_clientId_u496d162f-a4d1-4_from_paste_height_1168_id_ud3c871f5_name_image_aakl9n.png" alt="image.png"><br>The birth of continuous integration is the result of people trying to shorten the integration cycle. Why shorten the cycle time? Because we want to get feedback as early as possible to know if the results of our work are working. So, to do continuous integration well, you need to go along with the essence of <strong>continuous integration: getting feedback on your work as soon as possible</strong>.<br>From there, we get to the key point of <strong>continuous integration, you just have to remember the phrase, quick feedback</strong>.<br>Quick feedback, this sentence is divided into two parts, quick and feedback, which leads to two important goals of <strong>continuous integration: how to get feedback quickly, and what kind of feedback is effective</strong>.<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670545816448-b0372507-d4ed-4351-8b1b-278b49a0797a.png#averageHue=%23fdfdfd&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=595&amp;id=u656beaf1&amp;name=image.png&amp;originHeight=1190&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244883&amp;status=done&amp;style=none&amp;taskId=uf9db3aa5-fa20-4d6f-8e7e-2c758351358&amp;title=&amp;width=1142" alt="image.png"><br>What is replay? A replay is a Go term that means that after a player has played a game, he replayed the game to see what went well, what didn’t go well, what could have been played differently or even better, etc. <strong>This way of restoring the process and discussing and analyzing it is a replay</strong>. <strong>This way of restoring the process, discussing and analyzing it, is replay</strong>.<br>Nowadays, the concept of review has been used in many aspects, such as stock market review, business management review, and it has become the most important tool for many people to help individuals and enterprises to continuously improve. The most famous one is Liu Chuanzhi, the founder of Lenovo, who even wrote “review” into the core values of Lenovo. Why is it so useful to review? In my opinion, there is an important reason, lies in the <strong>objectification</strong>. As the saying goes, the authorities are confused, the onlookers are clear. Using our software development as an example, when solving a problem, we focus more on the problem itself and rarely think about how the problem was caused. <strong>When you review the problem, you will stand in a different perspective to think about what caused the problem. At this time, you are no longer the person involved, but have become a bystander. </strong>You observe the process of how that original thing happened, as if someone else was doing it. You go from a subjective perspective to an objective one. Seeing things from someone else’s perspective is objectification.<br>If your team can see the root cause at once is good, but if not, then it is best to ask more why. How to ask, there is a common practice is: 5 Whys (5 Whys). This practice was introduced by Saji Toyoda, the founder of the Toyota Group, and has since become widely known with the Toyota Production System. Why do you need to ask more whys? Because the initial question, you can get only the surface reason, only a few more whys, you can find the root cause. Let me give you an example. The server often returns 504, so we can use the “5 Whys” approach to ask.</p><ol><li>Why is there a 504? Because the server takes longer time to process and timeout.</li><li>Why does it time out? Because the Redis behind the server query is stuck.</li><li>Why is accessing Redis stuck? Because another service updating Redis deleted a large amount of data and then, when it was reinserted, the server blocked.</li><li>Why does it delete data in bulk and reinsert it? Because the update algorithm is not designed properly.</li><li>Why does an ill-designed algorithm go live? Because this design was not reviewed according to the process.</li></ol><p>More close to the user, in order to understand what their code is used to do, but also in the discussion of requirements to better understand which needs are necessary<br>As a programmer, overcoming technical challenges is an important part of our job, so we subconsciously throw ourselves into them as soon as they arise. But is this really the best approach? Not really, <strong>not all problems are technical challenges worth solving. </strong><br>There is an important principle of writing programs called Fail Fast, what does this mean? It means that if you encounter a problem, report the error as early as possible.<br>What are you going to do if the configuration file is missing an important parameter, for example, the maximum number of database connections? Many people will choose to give a default value, which is not a Fail Fast approach. Since it is an important parameter, reporting an error if it is missing is called Fail Fast.<br>In fact, <strong>Fail Fast also smacks of something counter-intuitive; many people are compatible with a lot of weird problems on the grounds of building robust systems, rather than exposing it. Instead, they hide the bugs in the system</strong>. We all know that relying on debug to locate problems is one of the most time-consuming and costly practices. So, don’t be afraid to report problems with the system early.</p><h2 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h2><p>In my opinion, it is important to do what is valuable, not just what is “done”, but also what is valuable in terms of time and cost savings by “not doing”. Two of my colleagues prevented the client from wasting money, so I view this project as a success.<br>For development, the same reasoning is followed. Programmers as a group are so technically competent that it is simply too intuitive to make a technical solution, we just faithfully make one requirement after another and automate “the world”. <strong>But the truth is, too much of the world’s waste is doing things that shouldn’t be done. </strong>In our column, I repeatedly say that we need to ask more questions in order not to do things that we shouldn’t do.<br><strong>Beware of NIH syndrome</strong><br>You can judge from the perspective of the requirements of which work can not be done, but we also want to prevent programmers themselves “add drama”, I will tell you a common problem of technical personnel: NIH syndrome (Not Invented Here Syndrome).<br>For example, this kind of chaos in the field of front-end also appeared, a variety of frameworks, so many front-end programmers cry, really can not learn. Another example is that I once interviewed a programmer who had contact with Go earlier, and he just couldn’t wait to write all the frameworks himself.<br>Having said that, it’s just to illustrate one thing<strong> Before writing code, ask yourself if you really want to do it? Don’t do it if you can, until you have enough reason to do it. </strong> Corresponds to Larry Wall’s statement that you have to be lazy and put a lot of effort into circumventing the energy drain.<br>In general, there are several different environments when building an infrastructure for continuous delivery, as described below.</p><ol><li>Continuous integration environment, continuous integration is a prerequisite for continuous delivery, this process is mainly to perform basic checks and hit a package that can be released.</li><li>Test environment (Test), this environment is often stand-alone, mainly responsible for functional verification, where the tests run are basically acceptance test level, and generally put the unit tests and integration tests and other tests that are executed faster into the continuous integration environment to execute.</li><li>pre-production environment (Staging), this environment is usually the same as the production environment configuration, for example, load balancing, clustering and so on should have, but the number of machines will be less, is mainly responsible for verification of the deployment environment, for example, can be used to find some problems brought about by the concurrency of multiple machines.</li><li>production environment (Production), which is the real online environment.</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112199/origin-of-ray/1670548946042-82f31fce-91f5-49a5-9e76-a8981ec76fe9.png_averageHue_23f8f7f7_clientId_u3a9da171-cf06-4_from_paste_height_551_id_u8619be65_name_image_keqa8u.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112216/origin-of-ray/1670548966490-daed7c11-d337-4904-9721-51cc1be48350.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_737_id_u62feb077_name_image_x6u6xh.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112236/origin-of-ray/1670549025670-7d994107-12f6-412d-9007-62cf3d1a161b.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_734_id_u59f6a867_name_image_xvvqi1.png" alt="image.png"><br>Ensure your code is not too confusing: the SOLID principle</p><p>Today, we start with a segment of the software industry. Party A wants to do an e-commerce website, as party B programmer asked: “What kind do you want to do?” Party A said, “Like Taobao is good.” The programmer asked, “How much are you going to pay?” Party A thought about it, “50,000 yuan is about right!”<br>This is, of course, a flirtation with the customer does not understand the requirements of the paragraph, but have you ever thought, <strong> Why in the A does not seem to be a complex system, you find it difficult? Because what you want is simply not a thing</strong>.<br>In the customer’s opinion, what I want is a website where I can buy things. As long as the product can be online, the user can see and buy it, 50,000 yuan is almost enough.<br>And what you think in your head is, “Taobao ah, that has to be a big technical challenge ah, every year to the ‘double 11’, that will have to consider all kinds of concurrent snapping. Taobao has to have how many programmers, 50,000 you want to do a, the door is not.”</p><p><strong>When doing a new project, it is not necessary to consider too many imaginary needs, the most important thing is to do two things well</strong></p><ol><li><strong>analysis of requirements, good domain division and abstraction (</strong>the higher level of abstraction the more stable, the more detailed things are easy to change<strong>), to ensure the scalability of the architecture </strong></li><li><strong> Minimize the introduction of various frameworks, or to ensure that the framework is pluggable and can be quickly replaced </strong></li></ol><p>Reviewing the above process, you can see that each time the original technology cannot meet the needs as the business volume grows, so it is necessary to solve the problem with new technology. The key point here is: different business volumes.</p><p>A system that serves only a few people, a single machine is enough, and a programmer just starting out can implement this system very well. When the volume of business reaches the point where a single machine cannot resist, it needs to be handled by multiple machines, and this time the problem of distributed systems must be considered, and middleware may have to be introduced appropriately. And when the system becomes to provide services for a huge amount of business, there is no which has been built to help the middleware, need to solve the problem from the bottom themselves. Although these systems seem to be the same in business, in technical terms, a system faces different problems at different stages, because it faces different levels of business. To be more precise, systems of different magnitudes are not a system at all.<br>In the previous example, the real driver for Taobao’s engineers to improve the system is not the technology, but the complexity of the problem due to the escalating business volume. Therefore, assessing the current stage of the system and using the appropriate technology to solve it is the most important thing we should consider.<br><strong>Then remember: use simple techniques to solve problems until they become complex. </strong><br>Maybe you’ll say, what if I make a system that doesn’t have that much business and I still want to improve my skills? The answer is to go to a place where there are good problems. Nowadays, the IT industry offers many opportunities for programmers, and it is not difficult to find a place with good problems, but of course, the prerequisite is that you have the basic ability to solve problems yourself.</p><p><strong>How to do microservices</strong><br>Let’s start by answering the question, why do we want to do microservices? The standard answer to this question is that microservices are small enough, easier to understand in code, easier to test, and simpler to deploy compared to monolithic services (Monolithic). All of this makes sense, but it is the result of doing microservices well.<br>How can we get to this state? There is a key factor, how to divide microservices, that is, how to decompose a huge system in a way. This is the most lacking in many discussions about microservices, and is the fundamental reason why many teams do “microservices” but die hard.<br>Without understanding this, write services that either call each other from service to service, causing the whole system to execute very inefficiently, or you need to spend a lot of effort to solve the data consistency between the various services.<br><strong>In other words, a poorly delineated service awaits the team in an endless quagmire of contingent complexity. Only when microservices are delineated correctly will it be what you have in mind to aspire to. </strong><br><strong> And how should you divide microservices? You need to understand domain-driven design. </strong><br>Domain Driven Design (DDD) is a methodology proposed by Eric Evans for moving from systems analysis to software modeling. What is the problem it is trying to solve? It is to transform business concepts and business rules into concepts and rules in software systems, so as to reduce or hide business complexity and make the system more scalable to cope with complex and changing real business problems.<br><strong>What exactly does DDD say? It pulls your starting point of thinking from a technical perspective to the business. </strong><br>We’ve mentioned this many times in this column. DDD is based on the Ubiquitous Language, which allows business people to speak the same language as programmers. This is something I mentioned in “21 | Who do you write code for? I’ve already mentioned this in 21 | Who do you write code for? Using a universal language is the same as pulling the level of thinking from the code details to the business level. The higher the level of abstraction the more stable it is, and the more detailed it is the more likely something will change.<br>With a common language as the foundation, it is time to move on to the practical aspects of DDD. <strong>DDD is divided into Strategic Design and Tactical Design. </strong>DDD is divided into Strategic Design and Tactical Design.<br>Strategic design is the high-level design that helps us divide the system into different domains and deal with the relationships between them. I gave you the example of “orders” and “users” in the previous section. This is the fundamental solution to the problem, otherwise, no matter how well you write your code, confusion is inevitable. And this way of thinking in terms of business is what DDD strategic design brings to me. Tactical design, usually refers to how to organize different domain objects within a domain at the technical level. As an example, domestic programmers like to use myBatis for data access instead of JPA, the common reason is that JPA has too poor performance in case of association. But the real reason is that the associations are not designed well.<br>After all, what does this have to do with microservices? The real difficulty of microservices is not the technical implementation, but the business segmentation, which happens to be the strong point of Bounded Context in DDD strategic design.<br>Although a common language bridges the gap between business and technology, computers are not good at dealing with ambiguous human language, so a common language must be expressed in a specific context to be clear. Like the “order” example we talked about, the “order” of a transaction is different from the “order” of logistics, and they both have their own contexts, and that context is the bounding Context.<br>It delimits the boundaries of the free use of the common language, and once outside the boundaries, the meaning is not guaranteed. It is because of the boundary that a bounded context can become just a separate deployment unit, and that deployment unit can then become a service.<br><strong> So to do microservices well, the first step should be to identify the bounding context. </strong><br>As you can see, each bounding context should be independent, and there should not be a lot of coupling between each context.<strong> The large number of mutual invocations between microservices that plague many people is itself a pseudo-proposition brought about by a failure to delineate the boundaries, relying on technology to solve business problems</strong>, with half the effort.<br>With a bounded context you can do microservices, right? Wait a minute!<br>In my humble opinion, it is not very easy to draw the boundaries clearly at once. It is much easier to adjust when everyone is in one process. Then, let the different bounding contexts evolve independently on their own first. Wait for it to evolve to the point where it’s worth deploying independently, and then think about microservice splitting. By then, you’ve also learned all sorts of techniques about microservices that should come in handy!</p><p>DDD and lean startup, microservices division is similar, both need to delineate the contextual boundaries, cut with the simplest way to achieve the needs of the moment, and then gradually expand (need good design to ensure scalability) lean startup is actually a continuous validation, verify the validity of the idea, to obtain the validated knowledge (Validated Learning).</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112260/origin-of-ray/1670740142955-ce3186d8-a3eb-425b-bc3f-d4f14ed071fe.png_averageHue_23f6f6f6_clientId_uec93d73b-3fc1-4_from_paste_height_1592_id_u97ed25ef_name_image_jwyysc.png" alt="image.png"></p><p>If you understand the business, you can deduce the basic code structure yourself. But conversely, if you are asked to look at the code and deduce the business from it, it is almost impossible.<br>In fact, every time I learn about a business, I go over in my head how I would do it if I were doing it. This way, I will have a preconception on the whole first, and then correspond to the actual code later, so it will not be so strange. To understand the business, I usually ask someone to tell me what the business does, what kind of problem it solves, what the specific business process is like, and so on.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112273/origin-of-ray/1670740542457-15af9ad4-a2e9-402f-9cc0-e6c51d46db57.png_averageHue_23f2f2f2_clientId_uec93d73b-3fc1-4_from_paste_height_429_id_u4aff8d90_name_image_ihfmvt.png" alt="image.png"><br>To revamp the legacy system, I will give you a few suggestions:</p><ol><li>building a test protection network to ensure consistent functionality of old and new modules;</li><li>divided into small pieces and gradually replaced;</li><li>constructing a good domain model;</li><li>Find the latest understanding of system building in the industry.</li></ol>]]></content>
    
    
    <summary type="html">The technology that programmers master is called information technology and is designed to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI has brought us in the end</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Implementation of AVL Tree</title>
    <link href="https://sunra.top/en/posts/5250/"/>
    <id>https://sunra.top/en/posts/5250/</id>
    <published>2023-02-02T02:56:03.000Z</published>
    <updated>2023-06-12T13:54:08.710Z</updated>
    
    <content type="html"><![CDATA[<p>Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.</p><p>An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.</p><span id="more"></span><h1 id="Fundamentals"><a href="#Fundamentals" class="headerlink" title="Fundamentals"></a>Fundamentals</h1><p>Not much to say about BST, it is relatively simple, that is, the left child of each node is smaller than the root node, the right child is larger than the root node, just pay attention when inserting.</p><p>But there is a problem with BST, for example, inserting 1, 2, 3, 4, 5, 6 in sequence, then we will end up with a tree with only right children, in fact, this BST has degenerated into an ordinary chain table, so we need some way to keep this tree balanced, and the way to keep it balanced is as follows:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1675307019/origin-of-ray/912c7f2fdaf3490689db1a7144775b11_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0_qzoplx.webp" alt=""></p><h1 id="Specific-implementation"><a href="#Specific-implementation" class="headerlink" title="Specific implementation"></a>Specific implementation</h1><h2 id="Four-types-of-imbalance"><a href="#Four-types-of-imbalance" class="headerlink" title="Four types of imbalance"></a>Four types of imbalance</h2><h3 id="Left-right-situation"><a href="#Left-right-situation" class="headerlink" title="Left-right situation"></a>Left-right situation</h3><p>In this case to rotate right and then return the new root node after the rotation, the code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">    node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">    avlNode.<span class="property">right</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Right-right-situation"><a href="#Right-right-situation" class="headerlink" title="Right-right situation"></a>Right-right situation</h3><p>In this case to rotate left and then return the new root node after the rotation, the code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">    node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">    avlNode.<span class="property">left</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Circumstances"><a href="#Circumstances" class="headerlink" title="Circumstances"></a>Circumstances</h3><p>In this case, the left child node of the root node should first be left rotated to become the left-left case, then the root node should be right rotated, and then the new root node should be returned after the rotation, with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Right-left-case"><a href="#Right-left-case" class="headerlink" title="Right-left case"></a>Right-left case</h3><p>In this case, the right child node of the root node should first be rotated right to become the right-right case, then the root node should be rotated left, and then the new root node should be returned after the rotation, with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fix-the-imbalance"><a href="#Fix-the-imbalance" class="headerlink" title="Fix the imbalance"></a>Fix the imbalance</h2><h3 id="Get-the-height-of-the-node"><a href="#Get-the-height-of-the-node" class="headerlink" title="Get the height of the node"></a>Get the height of the node</h3><p>When we do balancing, we need to determine whether we need to balance and what kind of imbalance is the case so that we can choose a different rotation method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// The height of the empty node is 0</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Post-order traversal is used here, because the result of each recursion requires the result of the child node recursion</span></span><br><span class="line">    <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The node height is the greater of the left and right subtree heights plus 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Balance"><a href="#Balance" class="headerlink" title="Balance"></a>Balance</h3><p>Balances the subtree with node as the root node and returns the new root node.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// Empty nodes do not need to be balanced, return empty nodes directly</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the height of the left and right subtrees</span></span><br><span class="line">    <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the height of the left subtree is greater than the height of the right subtree by more than 1, it is unbalanced and there is an implied logic that the left subtree of the left subtree must not be empty</span></span><br><span class="line">    <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Left-left situation, direct right rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Left and right situation, first left rotation then right rotation</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Right-right situation, direct left rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Right-left situation, first right, then left</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the new root node of the balanced subtree</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Basic-operation"><a href="#Basic-operation" class="headerlink" title="Basic operation"></a>Basic operation</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>Inserts a new node and returns the new root node</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The most important thing to understand about this code is that this recursive function returns the root of a new subtree each time a newNode is inserted and balanced on a tree with a node node as the root node.</span></span><br><span class="line">#<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// If the root node is empty, return the newNode directly as the root node</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If the value of the new node is smaller than the current node</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the left node is empty, then the new node will be treated as the left child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the left child node is not empty, then insert a new node into the left subtree and use the root node of the new subtree returned after the insertion as the left subtree</span></span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the right node is empty, then the new node is treated as the right child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">right</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the right child node is not empty, then insert a new node into the right subtree and use the root node of the new subtree returned after the insertion as the right subtree</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Balance after insertion and return the root node of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// Insert the newNode from the root, and reassign the root to ensure the next call is correct</span></span><br><span class="line">    <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h3><p>This is relatively simple, and not much different from BST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Delete the node with the value val from the subtree with node as the root and return the root of the new tree after balancing</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="comment">// If node is null, the tree is empty and does not need to be deleted, and the root node of the new tree is also null</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// If the node to be deleted is found</span></span><br><span class="line">    <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// The node to be deleted has both left and right subtrees</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">            <span class="comment">// Then find the right subtree of the node</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">            <span class="comment">// Then look for the left subtree all the way down the right subtree</span></span><br><span class="line">            <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                p = p.<span class="property">left</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Then replace the result in the current node, because the leftmost child node in the right subtree must be smaller than the rest of the nodes in the right subtree, while raining all the nodes in the left subtree</span></span><br><span class="line">            node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">            <span class="comment">// The previous step just replaces the node value, but the node is still there. We need to remove the node from the right subtree and return the new right subtree as the right subtree of the node after balancing.</span></span><br><span class="line">            <span class="comment">// And remember, at this point we are deleting p.val, not val, because we have already put p.val into node.val, and this p has the property that it has no left child node at least, and the next time the seat will enter the immediately following else logic</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If you don&#x27;t have both left and right subtrees, just replace them and delete the original ones</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">            node = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is smaller than the current one, go to the left subtree and delete it</span></span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is larger than the current one, go to the right subtree and delete it</span></span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the root of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Complete-code-and-tests"><a href="#Complete-code-and-tests" class="headerlink" title="Complete code and tests"></a>Complete code and tests</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AvlTree</span>&#123;</span><br><span class="line">    #<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">        node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">        avlNode.<span class="property">left</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">        node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">        avlNode.<span class="property">right</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">left</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">right</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_inOrder</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> stack = [node];</span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line">        <span class="keyword">while</span>(stack.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (current ! <span class="literal">null</span>) &#123;</span><br><span class="line">                current.<span class="property">right</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">                stack.<span class="title function_">push</span>(current, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                current.<span class="property">left</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = stack.<span class="title function_">pop</span>();</span><br><span class="line">                result.<span class="title function_">push</span>(current.<span class="property">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#_root= <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">_inOrder</span>(<span class="variable language_">this</span>.#_root);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">left</span>))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">                <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                    p = p.<span class="property">left</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> avlTree = <span class="keyword">new</span> <span class="title class_">AvlTree</span>();</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">8</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">9</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">14</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">15</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">16</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">17</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">18</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">19</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">20</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">21</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">11</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">31</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">61</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">111</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">221</span>));</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">20</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">1</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">11</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">221</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">8</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">4</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.&lt;/p&gt;
&lt;p&gt;An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Analysis Patterns - Reusable Object Model</title>
    <link href="https://sunra.top/en/posts/29283/"/>
    <id>https://sunra.top/en/posts/29283/</id>
    <published>2023-01-26T03:10:44.000Z</published>
    <updated>2023-06-12T13:54:08.710Z</updated>
    
    <content type="html"><![CDATA[<p>Recently read the book “Analysis Patterns - Reusable Object Model”, this book is considered an enlightening book on DDD, read the completion or benefit a lot, on the one hand, many points and the usual work of mutual evidence, very inspired, on the other hand, learned some business modeling patterns, this article mainly summarizes the inspiration received This article mainly summarizes the inspiration received and modeling principles, specific modeling approach to give an example to experience it.</p><p>Here are a few of my most rewarding points in brief:</p><ul><li>An important principle of object development is that the structure of the software reflects the structure of the problem.</li><li>The coupling caused by the problem not sorted out clearly is not solved by design patterns, such as logistics and orders, they use the same data table, they need to sense each other, then they must be coupled together in some way, belonging to the essential complexity, this coupling is not decoupled by a good design pattern, even if they are two systems, they have to be together alteration.</li><li>The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of other business areas of knowledge, then in fact, or coupling.</li><li>If there have to be connections between different domains, try to minimize two-way connections, each of which introduces higher complexity into the system.</li><li>In the beginning of the system to minimize the complexity of the system at the same time, keep open to changes, that is, the principle of open and closed, unless very necessary, do not come up to introduce a lot of third-party tools, to consider the introduction cost of these tools, maintenance costs, upgrade costs, and even opportunity costs, and do not come up to engage in any microservices, microservices are best from a mature system after verification of stable business areas Microservices are best incubated from a proven and stable business area in a mature system, otherwise, microservices on pure technical architecture will only increase the overall complexity and risk of the system.</li></ul><span id="more"></span><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>We can simply divide the architecture design into horizontal and vertical divisions. The horizontal division, which addresses the business architecture, is to reduce the essential complexity of business logic and reduce the coupling between business domains, while the vertical architecture addresses non-functional requirements, such as improving stability, throughput rates, etc. through technologies such as caching layers, message queues, etc. </strong></p><p>Our focus in this paper is to address some of the principles of horizontal architectural design.</p><p>The purpose of analysis is to understand the problem, which, in my opinion, can be more than just a process of using use cases to enumerate requirements. Use cases are valuable, if not essential, in the system development process, but capturing such use cases does not mean the end of the analysis. Analysis also involves looking beyond the surface requirements to propose a mental model that reflects the underlying mechanisms of the problem.</p><p>Consider writing software that simulates a billiard game, which can be evaluated by describing the use case of a surface feature: “The player hits the white ball, causing it to move at a certain speed, and then the white ball hits the red ball at a certain angle, causing the red ball to move a certain distance in a certain direction.” One could shoot such an event hundreds of times and measure the speed, angle and distance the ball moved. However, I am afraid that this alone is not enough to write a good simulation program. To write a good program, one needs to look beyond the surface phenomenon to understand the underlying laws of motion, including mass, velocity, momentum, etc.</p><p>Problems like the game of billiards are not rare because the laws of these sports are widely known. Then in many companies, the basic mechanisms at this level are not well understood and need to be diligently discovered.</p><p>There is no right or wrong model, the key is which model is more suitable.</p><p>The choice of model may affect the flexibility and reusability of the developed software. For software like a billiards tournament, you might advocate using the Einstein model because the developed software can be flexible enough to handle atomic collision problems. But this is a more dangerous way to handle it, because <strong>introducing too much flexibility may lead to an overly complex system, which is a bad engineering practice</strong>.</p><p>One of the main reasons for using analysis and design techniques is to involve domain experts, which is essential for conceptual modeling. Effective models can only be built by people who really understand the domain, people who work full time in the field. it skills neither help nor hinder modeling skills.</p><p>Analytical techniques should be independent of each other and software techniques, and ideally, conceptual modeling should be completely independent of software techniques, as in the case of the laws of motion described above. This independence prevents the technology from hindering one’s understanding of the problem, and the resulting model is equally valid for all software technologies.</p><p>Closely related to the conceptual model is the software interface rather than the software implementation.</p><h1 id="Some-modeling-principles"><a href="#Some-modeling-principles" class="headerlink" title="Some modeling principles"></a>Some modeling principles</h1><p>Here is a list of some modeling principles in the book, in fact, these principles and the principles of design patterns are similar, they just focus on different points.</p><ol><li>The modeling should minimize the number of types affected by the part of the model that changes most frequently. (This point is actually related to the design pattern’s separation of parts that are prone to change from those that are not.)</li><li>When defining characteristics for types with supertypes, consider whether it makes sense to place these characteristics on the supertype.</li><li>The model should be explicitly divided into an operational layer and a knowledge layer. For example, the configuration class files or some custom semantics that we can parse are the knowledge layer, which defines the relationships between classes and certain principles of program operation, while the specifics of how to instantiate classes belong to the operational layer.</li><li>When multiple attributes interact through behaviors that can be used in several types, these attributes should be combined into a new basic type. For example, if our system involves a large number of different units of data, we can combine units and values from these data into a quantity type.</li><li>The operational layer contains those concepts that change on a daily basis and whose configuration is bounded by the knowledge layer, which will change much less frequently. The frequency of change here refers to runtime changes.</li><li>If a type has very many similar associations, then abstract these associated objects into a new type and then create a knowledge layer to distinguish them.</li><li>To record the change history of a value, an account should be created for that value.</li><li>When using the account, the following conservation principle should be followed: the recorded items cannot be created or destroyed, and can only be transferred from one place to another, which makes it easier to find and avoid vulnerabilities.</li><li>To understand how a calculation is performed, you can represent the result of the calculation as an object that is used to remember the calculation that created it and the input values that were used.</li><li>When there are multiple equivalent feature sets to choose from, pick the one that the domain expert thinks is most appropriate, and if the domain expert thinks both are very valuable, then extract both and mark one of them as a derivation.</li><li>Marking a feature as derived is only a constraint on the interface and does not affect the underlying data structure.</li><li>If a collection of objects can be created by different conditions, then a combination should be used.</li><li>When treating a process as a feature of a type, an abstract interface should be provided for the process so that its implementation can be easily changed through subclassing. For example, purely hard-coded implementations are one subclass, and various parameter-driven methods are other subclasses.</li><li>When multiple attributes interact in a behavior that may be used in more than one type, the attributes should be combined into a new basic type.</li><li>If the supertype applies to a narrower domain and the subtype applies to a wider domain, then generalization should not be used.</li><li>If the difference between two similar types is usually negligible, then use the abstract supertype. If the difference between the two is important, then do not use the abstract supertype.</li><li>If using an abstract supertype does not cause more work for the client, then this abstract type should be provided.</li><li>When some information may be both obtained directly from a source and calculated from other available data, an abstract interface should be provided with the two ways of obtaining and calculating information from the source as their respective subclasses.</li><li>When faced with several alternative methods, first choose the simplest method and then change to a more complex method as needed.</li><li>Follow the intuition of domain experts when it is difficult to choose among immediate modeling solutions.</li><li>Subtyping should only be used if all the characteristics of the supertype apply to the subtype and it is conceptually reasonable to say that every instance of the subtype is an instance of the supertype.</li><li>When the customer perspective sees that a single transaction can be divided into multiple transactions by the trader, the product and the contract should be separated. The key to the product-contract distinction is that the product represents the client’s intent, while the contract refers to the content of the actual transaction between the counterparty and the principal.</li><li>Do not repeat basic associations that have the same meaning. By following this principle, it is possible to obtain well-defined types of responsibilities.</li><li>There should be consistency in the assignment of responsibilities. Beware of the types who sometimes take responsibility for something and sometimes delegate that responsibility. (This behavior may be correct, but it should always be viewed with suspicion)</li><li>The choice between one-way and two-way associations requires a trade-off between low workload for type development staff (reduced coupling between types) on the one hand, and ease of use for type users on the other.</li><li>If a package only needs to see part of another package, consider splitting the latter package into two mutually visible packages.</li><li>The essence of subtyping is that it can be extended without the supertype knowing anything about it. It is often necessary to design some subtypes to gain experience and then abstract them.</li></ol><h1 id="Two-examples-of-analysis-patterns"><a href="#Two-examples-of-analysis-patterns" class="headerlink" title="Two examples of analysis patterns"></a>Two examples of analysis patterns</h1><p>Each box in the diagram represents a type.</p><h2 id="Responsibility-mode"><a href="#Responsibility-mode" class="headerlink" title="Responsibility mode"></a>Responsibility mode</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220145_aun9wt.jpg" alt=""></p><ul><li>The responsibility type is defined in the knowledge layer, and the responsibility type defines what kind of delegates can be selected by the responsible party which mapping relationship</li><li>Then the operational layer is to instantiate a responsibility, and to follow the specification in the responsibility type of the knowledge layer when re-selecting the participants in a specific responsibility</li><li>Each responsibility may have a time period that corresponds to an activity.</li></ul><h2 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220202_mjg72s.jpg" alt=""></p><ul><li>Each observation has its own participant</li><li>Observations can be subtyped as hypothetical, speculative and valid observations</li><li>Observations can also be subtyped as measurements and categorical observations, where the result of a measurement is a quantity (value + unit) and the result of a categorical observation is the presence or absence of it. As an example, blood pressure is a measurement, while high blood pressure is a categorical observation. Blood pressure, a measurement, can be inferred from blood pressure high, a categorical observation, and once the blood pressure measurement is wrong, this chain of inference should be directly negated by the chain.</li><li>At the knowledge level, observation has its own protocols, that is, how it is carried out</li><li>The type of phenomenon in the knowledge layer, phenomenon and observation concept, specifies what the observation in the operational layer can be, e.g. blood pressure is a type of phenomenon, increase is a phenomenon, and increase in blood pressure is an observation concept, while observation concepts are inferred from each other.</li></ul>]]></content>
    
    
    <summary type="html">The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of knowledge of other business areas, then in fact, or coupling</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>KMS algorithm</title>
    <link href="https://sunra.top/en/posts/19232/"/>
    <id>https://sunra.top/en/posts/19232/</id>
    <published>2023-01-22T03:40:37.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>The previous blog talked about bipartite graph matching<a href="https://sunra.top/posts/5352/">匈牙利算法</a>However, each matching edge weight in the Hungary algorithm is the same. If we get the best match under different matching edge weights, then we need to use the KM algorithm.</p><span id="more"></span><h1 id="Basic-principles"><a href="#Basic-principles" class="headerlink" title="Basic principles"></a>Basic principles</h1><p>In fact, after we understand the Hungary algorithm, it is simple to understand the KM algorithm.</p><p>We now know that the Hungary algorithm can solve the problem of maximum matching, and now with weights, the KM algorithm is actually a way to convert the problem into a form that the Hungary algorithm can solve.</p><p>Now the bipartite graph has weights, which can be understood as adding a constraint. This constraint allows us to prioritize those edges with large weights for matching.</p><p><strong> Therefore, we need to pick out the edges with the largest weight first. In academic terms, it is to pick a subgraph. Because what we pick out are the edges with the largest weight, we only need to find the largest match in this subgraph, and this maximum match must be the one with the largest weight (very important, it means that in this subgraph, just look for the one with the largest weight on it, so we can use the Hungary algorithm to solve the problem) </strong>. The process is:</p><p>Find the subgraph composed of the edges with the largest weight ————→ find the largest match on this subgraph</p><p>The above process is very simple, right? One problem is that we all find the edge with the largest weight to form a subgraph, which is very small and easy to conflict with. In terms of image, everyone’s requirements for finding a partner are too high, and it is very likely that they will not be able to meet their requirements. At this time, only some people can be wronged, let him lower his requirements a little, and let him choose a partner from other people.</p><p>The KM algorithm process, the core idea is: priority to choose the most satisfactory, because the requirements are too high to find the object of those people, reduce the standard to expand the range of mate selection, until the object is found.</p><p>In this problem, we can find the part with the largest match, and we can use the Hungary algorithm to solve it. The remaining two problems are:</p><ol><li><p>How to find this so-called “most weighted subgraph”.</p></li><li><p>How to expand the range of mate selection. It can neither be too low nor not.</p></li></ol><p>The above two problems are the essence of the KM algorithm.</p><p>The subgraph with the largest weight is the “equal subgraph”. Expanding the range of mate selection is the process of “updating the top data—-establishing a new equal subgraph”.</p><p>It should be noted that the maximum weight mentioned above is not the greater the weight of the entire graph, the better, but the largest weight edge we can choose within the current ability range (after all, some people need to lower the standard to find the object).</p><h2 id="First-question"><a href="#First-question" class="headerlink" title="First question"></a>First question</h2><p>First of all, let’s emphasize that the purpose of our subgraph is to achieve an effect.</p><p>On this subplot, finding the maximum match without considering the weights is equivalent to finding the maximum match with the largest weight on the graph with weights.</p><p>We pick a group of people, these people are relatively high satisfaction with each other, those who are low will not be considered for the time being. Find a partner in this group. If you can’t find it, consider adding someone.</p><p>In order to achieve this goal, we add a top target to each person. We will not consider how this top target is added for now, and will talk about this issue in detail in the next step. Now assume that we already have a top target.</p><p>This top mark is the basis for us to decide whether an edge is added to the subgraph. The top mark can be understood as the highest standard for mate selection. If the degree of fit of both parties reaches this highest standard, it will be added to the mate selection range, that is, added to the subgraph.</p><p>Therefore, for example, the highest criterion for Xiao Wang’s mate selection is $S<em> {Wang} $, and the highest criterion for Xiao Li’s mate selection is $S</em> {li} $. The degree of liking of Xiao Wang and Xiao Li is W (that is, the connection weight of Xiao Wang and Xiao Li in the bipartite graph). If $W = S<em> {Wang} + S</em> {li} $is added to the subgraph and enters the range of mate candidates. Noting the above equation, the subgraph selected in this way is called an equal subgraph.</p><p>However, this highest standard is constantly changing. That is the next question, how to constantly adjust the highest standard so that the range of mate selection is constantly changing.</p><h2 id="Second-question"><a href="#Second-question" class="headerlink" title="Second question"></a>Second question</h2><p>Let’s take a specific example here.</p><p>Here are 5 girls x1-x5 and 5 boys y1-y5. 0 between them means there is no connection, and numbers greater than 0 are weights, which is how much they like each other.</p><script type="math/tex; mode=display">\begin{bmatrix} & y1 & y2 & y3 & y4 & y5 \\x1 & 3 & 5 & 5 & 4 & 1 \\x2 & 2 & 2 & 0 & 2 & 2 \\x3 & 2 & 4 & 4 & 1 & 0 \\x4 & 0 & 1 & 1 & 0 & 0 \\x5 & 1 & 2 & 1 & 3 & 3\end{bmatrix}</script><p><strong> The first step, the highest standard initialization. </strong></p><p>It should be noted that we are an undirected bipartite graph, which means that the weight is the common liking degree of both parties, so you can choose one person as the representative. So, we let the girls make a unilateral choice.</p><p>So the boys’ top bar is set to 0.</p><p>In the beginning, girls wanted to find their favorite partner, and we set their highest standard to the one they liked the most. For example, x1 is interested in all boys, and the degree of liking is 3, 5, 5, 4, 1. So her current highest standard is 5.</p><p>In the first selection, y2 and y3 will be added to the mate selection range, and the other three will not be considered for the time being. All girls are like this, choose their favorite to join the mate selection range.</p><p>We get the subgraph</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674362847/origin-of-ray/v2-d41065309a9ebbebaba9697c72efd5b4_1440w_txjm2g.png" alt=""></p><p>The advantage of this is that in the subgraphs picked out in this way, the degree of liking each other must be the greatest. In this way, we don’t have to consider the weight problem, and the problem becomes a problem of picking the largest match on the local subgraph, which can be solved with the Hungary algorithm.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674362942/origin-of-ray/v2-e0c9824569b8e0f5908bb48f145d276f_1440w_ht9nwm.png" alt=""></p><p>When we reach this point, we cannot continue to find the expansion path. At this time, we need to expand the scope of mate selection</p><p><strong> The second step, the highest standard adjustment. </strong></p><p>We randomly choose an alternate path that does not go down above (because we did not successfully find another unmatched object, this alternate path is not qualified to be called an augmentation path). For example, choose this one:</p><p>x4——y2——x3——y3———x1——y2——????</p><p>This route is also called an alternate tree in many articles. Once the augmentation path is found, we can expand the matching range and find objects for x4 as well. But now it has failed, and the essence of this failure is a conflict with the person on the route. 2</p><p>So let’s see who is involved in the failure of x4. Girls: x1, x3, x4. Boys: y2, y3.</p><p>Now we have to coordinate the highest standards of these people’s mate selection (that is, their top standards) and expand the scope of mate selection.</p><p>First of all, we can’t destroy the original relationship. The original top standard is designed to ensure that you can choose your favorite object. So it is necessary to ensure that the highest standard between them remains unchanged, so as to ensure that the original match will not change.</p><p>Here let the above conflict with the x4 of these people: the top of the girls decreased, the top of the boys increased, so that their combined standard unchanged.</p><p>However, the top mark for girls is reduced, and opportunities for others come.</p><p>Going back to the formula of our picker diagram just now, it is the equation of Xiao Wang and Xiao Li.</p><p>Now Xiao Wang has lowered the standard because of conflicts with others, and W has been reduced, that is, some edges with less weight have the opportunity to be added to the subgraph now.</p><p>Now girls: x1, x3, and x4 all like y2 and y3, and they have a conflict, but y1, y4, and y5 have not been considered by them. Originally, the standard of x1 was 5, but now that she wants to consider y1, the weight of x1y1 is 3, and she needs to lower the standard by 2.</p><p>Similarly, x1y4 needs to be reduced by 1; x3y1 needs to be reduced by 2, x3y4 needs to be reduced by 4-1 = 3; x3y5 needs to be reduced by 4-0 = 4. x4 is the same algorithm.</p><p>Therefore, considering the maximum weight, at least one standard should be reduced.</p><p>Therefore, we put the standard -1, y2, and y3 of x1, x3, and x4 corresponding to + 1.</p><p><strong> Under this criterion, we still have to pick the edge that satisfies “two-person top mark and = two-person connection weight”. </strong></p><p>It can be seen that after x4 colleagues lowered their standards, all male colleagues met her standards.</p><p>At this point we can find a perfect match for this graph,</p><p><img src="https://pic3.zhimg.com/80/v2-51d28f52efd5d822280d3d0ba2540a9e_1440w.webp" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The previous blog talked about bipartite graph matching&lt;a href=&quot;https://sunra.top/posts/5352/&quot;&gt;匈牙利算法&lt;/a&gt;However, each matching edge weight in the Hungary algorithm is the same. If we get the best match under different matching edge weights, then we need to use the KM algorithm.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Hungary algorithm</title>
    <link href="https://sunra.top/en/posts/5352/"/>
    <id>https://sunra.top/en/posts/5352/</id>
    <published>2023-01-13T14:12:06.000Z</published>
    <updated>2023-06-12T13:54:08.714Z</updated>
    
    <content type="html"><![CDATA[<p>I came into contact with this algorithm because I saw a problem called prime significant other. That is to say, you are given a string of numbers, and you choose two numbers to add. If their sum is a prime number, then this pair is called a prime significant other. Then we need to find how many pairs of prime numbers significant other can be found at most in this string of numbers.</p><p>The solution to this problem is first to divide the number into two parts, one part is even and the other part is odd, because the addition of two even numbers or the addition of two odd numbers must still be even and cannot be prime.</p><p>So the problem becomes to choose one of the even numbers, then choose one of the odd numbers, and see how many pairs are added to the prime number at most. This problem uses the Hungary algorithm.</p><p>Hungary algorithm is mainly used to solve some problems related to bipartite graph matching, so let’s first understand bipartite graph.</p><span id="more"></span><h1 id="Bipartite-graph"><a href="#Bipartite-graph" class="headerlink" title="Bipartite graph"></a>Bipartite graph</h1><p>Bipartite graph: Also known as bipartite graph, it is a special model in graph theory. Let G = (V, E) be an undirected graph. If vertices V can be divided into two disjoint subsets (A, B), and the two vertices i and j associated with each edge in the graph belong to these two different sets of vertices (i δ A, j δ B), then the graph G is said to be a bipartite graph.</p><p>In simple terms, if all vertices in the graph can be divided into two sets, and the heads and tails of all edges in the graph do not belong to the same set of vertices, but span both sets, then the graph is a bipartite graph.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917617/origin-of-ray/v2-81f21981c992bc0b5b1acf04b37ff6c2_r_tjxivp.png" alt=""></p><p>Let’s take another look at this picture:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917884/origin-of-ray/screenshot-20230117-091101_x2bdmd.png" alt=""></p><p>This graph doesn’t look like a bipartite graph at first glance, but if we translate its appearance, we will find that it is actually a bipartite graph</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917885/origin-of-ray/screenshot-20230117-091111_oj8vev.png" alt=""></p><h1 id="Hungary-algorithm"><a href="#Hungary-algorithm" class="headerlink" title="Hungary algorithm"></a>Hungary algorithm</h1><h2 id="Pre-concept"><a href="#Pre-concept" class="headerlink" title="Pre-concept"></a>Pre-concept</h2><p>In graph theory, a matching is a set of edges where no two edges have common vertices.</p><p><strong> Maximum match </strong>: The match with the largest number of matched edges among all matches of a graph is called the maximum match of this graph.</p><p><strong> Perfect match </strong>: A graph is a perfect match if all vertices in a match are matching points. A perfect match must be the maximum match (any point of a perfect match has already matched, and adding a new matching edge will definitely conflict with an existing matching edge), but not every graph has a perfect match.</p><p><strong> Alternate Path </strong>: Starting from an unmatched point, passing through non-matching edges, matching edges, and non-matching edges in turn… The path formed is called an alternate path.</p><p><strong> Augmenting Path </strong>: Starting from an unmatched point, take an alternate path. If you pass through another unmatched point (the starting point does not count), this alternate path is called an augmenting path (agumenting path).</p><p><strong> Augmented path properties </strong>:</p><ol><li>The path length of P must be odd, and neither the first nor the last edge belongs to M, because the two endpoints belong to two sets and do not match.</li><li>P can obtain a larger match M ‘after inversion operation.</li><li>M is the maximum match of G if and only if there is no augmented path with respect to M.</li></ol><h2 id="Basic-principle-of-algorithm"><a href="#Basic-principle-of-algorithm" class="headerlink" title="Basic principle of algorithm"></a>Basic principle of algorithm</h2><p>Hungary algorithm: The maximum matching algorithm that uses augmented paths to find bipartite graphs is called the Hungary algorithm. (Hungary mathematician Edmonds proposed it in 1965).</p><p>The basic idea: by finding an augmented path, the matching and non-matching edges in the augmented path are exchanged with each other, so that an additional matching edge will be created until the augmented path cannot be found.</p><blockquote><p>One thing to be sure of here is that this process is to find matching and non-matching edges from existing edges, and cannot create new edges</p></blockquote><p>Let’s take the last figure above as an example to explain the process of the entire algorithm:</p><ol><li>Starting from the vertex a, follow the alternate path. The first non-matching edge is, reaching the vertex e, and e is the non-matching point, forming an augmented path. Let it be a matching edge, and the vertices a and e are matching vertices.</li><li>Starting from vertex b, the first non-matching edge is, reach vertex e, select the matching edge, reach a, select the non-matching edge, g is the non-matching point, find an augmented path, exchange the matching edge in the augmented path with The non-matching edge, that is, b-e, a-g becomes the matching edge, and a-e becomes the non-matching edge.</li><li>Starting from the vertex c, the first non-matching edge is, reaches the vertex e, and then proceeds according to the alternate path, reaches the vertex b, cannot continue to move forward, and b is already a matching point, so no new grace path is found</li><li>Starting from vertex c, select the second non-matching edge</li><li>Starting from vertex d, select non-matching edge, reach vertex g, select matching edge, reach vertex a, select non-matching edge to reach vertex e, select matching edge, reach top b, there is no edge to choose, and no augmentation path is found</li><li>Continue from vertex d, select the non-matching edge, find the augmented path, change the edge to the matching edge, and the algorithm ends.</li></ol><p>Finally, the result we get is the following figure, and the red line in the following figure is the maximum match obtained by the algorithm:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673922535/origin-of-ray/screenshot-20230117-102841_rk6fvq.png" alt=""></p><h2 id="Algorithm-implementation"><a href="#Algorithm-implementation" class="headerlink" title="Algorithm implementation"></a>Algorithm implementation</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Numbering of vertices and edges starts from 0</span></span><br><span class="line"><span class="comment">//adjacency list storage</span></span><br><span class="line"></span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from;</span><br><span class="line">    <span class="type">int</span> to;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="type">int</span> f, <span class="type">int</span> t, <span class="type">int</span> w):from(f), to(t), weight(w) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vector &lt; <span class="type">int</span> &gt; G [__maxNodes];<span class="comment">/* G [i] stores the number of edges starting from vertex i */</span></span><br><span class="line">vector&lt;Edge&gt; edges;</span><br><span class="line">typedef vector&lt;<span class="type">int</span>&gt;::iterator iterator_t;</span><br><span class="line"><span class="type">int</span> num_nodes;</span><br><span class="line"><span class="type">int</span> num_left;</span><br><span class="line"><span class="type">int</span> num_right;</span><br><span class="line"><span class="type">int</span> num_edges;</span><br><span class="line">Int matching [__maxNodes];<span class="comment">/* store the solution result */</span></span><br><span class="line"><span class="type">int</span> check[__maxNodes];</span><br><span class="line"></span><br><span class="line">bool <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">iterator_t</span> <span class="variable">i</span> <span class="operator">=</span> G[u].begin(); i != G[u].end(); ++i) &#123; <span class="comment">// 对 u 的每个邻接点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edges[*i].to;</span><br><span class="line">        If (! check [v ]) &#123; <span class="comment">// request is not in alternate path</span></span><br><span class="line">            Check [v] = <span class="literal">true</span>;<span class="comment">//put an alternate path</span></span><br><span class="line">            <span class="keyword">if</span> (matching[v]  -<span class="number">1</span> || dfs(matching[v])) &#123;</span><br><span class="line">                <span class="comment">//If it is an uncovered point, indicating that the alternate path is an augmented path, the path is exchanged and success is returned</span></span><br><span class="line">                matching[v] = u;</span><br><span class="line">                matching[u] = v;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Return <span class="literal">false</span>;<span class="comment">//no augmentation path exists, return failed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hungarian</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    memset(matching, -<span class="number">1</span>, sizeof(matching));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u=<span class="number">0</span>; u &lt; num_left; ++u) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matching[u]  -<span class="number">1</span>) &#123;</span><br><span class="line">            memset(check, <span class="number">0</span>, sizeof(check));</span><br><span class="line">            <span class="keyword">if</span> (dfs(u))</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line"><span class="type">int</span> prev[__maxNodes];</span><br><span class="line"><span class="type">int</span> <span class="title function_">Hungarian</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    memset(matching, -<span class="number">1</span>, sizeof(matching));</span><br><span class="line">    memset(check, -<span class="number">1</span>, sizeof(check));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;num_left; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matching[i]  -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">            Q.push(i);</span><br><span class="line">            Prev [i] = -<span class="number">1</span>;<span class="comment">//set i as the starting point of the path</span></span><br><span class="line">            <span class="type">Bool</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//no augmentation path found</span></span><br><span class="line">            <span class="keyword">while</span> (!Q.empty() &amp;&amp; !flag) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> Q.front();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">iterator_t</span> <span class="variable">ix</span> <span class="operator">=</span> G[u].begin(); ix != G[u].end() &amp;&amp; !flag; ++ix) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edges[*ix].to;</span><br><span class="line">                    <span class="keyword">if</span> (check[v] != i) &#123;</span><br><span class="line">                        check[v] = i;</span><br><span class="line">                        Q.push(matching[v]);</span><br><span class="line">                        If (matching [v] &gt; = <span class="number">0</span> ) &#123; <span class="comment">// this point is a matching point</span></span><br><span class="line">                            prev[matching[v]] = u;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;<span class="comment">//Find unmatched point, alternate path becomes augmented path</span></span><br><span class="line">                            flag = <span class="literal">true</span>;</span><br><span class="line">                            <span class="type">int</span> d=u, e=v;</span><br><span class="line">                            <span class="keyword">while</span> (d != -<span class="number">1</span>) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> matching[d];</span><br><span class="line">                                matching[d] = e;</span><br><span class="line">                                matching[e] = d;</span><br><span class="line">                                d = prev [d];</span><br><span class="line">                                e = t;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (matching[i] != -<span class="number">1</span>) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference article: <a href="https://www.cxyxiaowu.com/874.html">https://www.cxyxiaowu.com/874.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I came into contact with this algorithm because I saw a problem called prime significant other. That is to say, you are given a string of numbers, and you choose two numbers to add. If their sum is a prime number, then this pair is called a prime significant other. Then we need to find how many pairs of prime numbers significant other can be found at most in this string of numbers.&lt;/p&gt;
&lt;p&gt;The solution to this problem is first to divide the number into two parts, one part is even and the other part is odd, because the addition of two even numbers or the addition of two odd numbers must still be even and cannot be prime.&lt;/p&gt;
&lt;p&gt;So the problem becomes to choose one of the even numbers, then choose one of the odd numbers, and see how many pairs are added to the prime number at most. This problem uses the Hungary algorithm.&lt;/p&gt;
&lt;p&gt;Hungary algorithm is mainly used to solve some problems related to bipartite graph matching, so let’s first understand bipartite graph.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Dichotomy Method for Solving the Optimum Problem of Bounded Interval</title>
    <link href="https://sunra.top/en/posts/32270/"/>
    <id>https://sunra.top/en/posts/32270/</id>
    <published>2023-01-04T03:35:40.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I encountered several problems on leetcode that were solved by dichotomy. I summarized the rules. To put it simply, if you want to find the maximum or minimum value that meets the conditions from a bounded interval, you can Consider using a dichotomy, but it is not the basic dichotomy, but a dichotomy that keeps looking for the left boundary or the right boundary.</p><span id="more"></span><p>For the dichotomy of finding the left boundary or the right boundary, see my previous blog:<a href="https://sunra.top/posts/e421a043/">魔鬼的二分查找</a></p><p>The link to the example is: <a href="https://leetcode.cn/problems/maximum-value-at-a-given-index-in-a-bounded-array/">https://leetcode.cn/problems/maximum-value-at-a-given-index-in-a-bounded-array/</a></p><p>The personal problem-solving code is:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">maxSum</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isValid</span>(<span class="params">maxNum, maxSum, leftLength, rightLength</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> left = <span class="title class_">Math</span>.<span class="title function_">min</span>(leftLength, maxNum);</span><br><span class="line">    <span class="keyword">const</span> right = <span class="title class_">Math</span>.<span class="title function_">min</span>(rightLength, maxNum);</span><br><span class="line">    <span class="keyword">const</span> leftMinSum = left * maxNum - left * (left - <span class="number">1</span>) / <span class="number">2</span> + <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, leftLength - maxNum);</span><br><span class="line">    <span class="keyword">const</span> rightMinSum = right * maxNum - right * (right - <span class="number">1</span>) / <span class="number">2</span> + <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, rightLength - maxNum);</span><br><span class="line">    <span class="keyword">return</span> leftMinSum + rightMinSum - maxNum &lt;= maxSum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maxValue = <span class="keyword">function</span>(<span class="params">n, index, maxSum</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = maxSum;</span><br><span class="line">    <span class="keyword">const</span> leftLength = index + <span class="number">1</span>, rightLength = n - index;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isValid</span>(mid, maxSum, leftLength, rightLength)) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> right &gt;= <span class="number">0</span> ? right : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I encountered several problems on leetcode that were solved by dichotomy. I summarized the rules. To put it simply, if you want to find the maximum or minimum value that meets the conditions from a bounded interval, you can Consider using a dichotomy, but it is not the basic dichotomy, but a dichotomy that keeps looking for the left boundary or the right boundary.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Design pattern learning and practice (4)</title>
    <link href="https://sunra.top/en/posts/27544/"/>
    <id>https://sunra.top/en/posts/27544/</id>
    <published>2022-12-30T06:39:02.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>In this article, we summarize the command patterns, combination patterns, and template methods in JavaScript. These patterns are relatively similar.</p><span id="more"></span><h1 id="Command-mode"><a href="#Command-mode" class="headerlink" title="Command mode"></a>Command mode</h1><p>Suppose there is a fast food restaurant, and I am the order waiter of the restaurant, then my day’s work should be like this. When a certain guest orders, he needs to write down his needs on the list and hand it to the kitchen. Guests don’t need to care about which chefs help them cook. The restaurant can also meet the regular service that guests need. For example, guests may be on their way home and ask for an hour before they start cooking. As long as the order is still there, the chef will not forget. Guests can easily cancel their orders, and when there are too many guests, they can also line up in order of order.</p><p>The most common application scenarios of the command pattern are: <strong> Sometimes you need to send a request to some object, but you don’t know who the recipient of the request is or what the requested operation is. At this time, it is hoped to design the program in a loosely coupled way, so that the sender and receiver of the request can eliminate the coupling relationship between each other </strong>.</p><blockquote><p>In terms of eliminating the coupling relationship, in fact, the command mode and the publish-subscribe mode have similar purposes. The command mode is more concerned with executing different command operations according to different command objects, while the publish-subscribe mode is more concerned with changing the messaging mechanism between programs.</p></blockquote><p>Take food ordering as an example, the guest needs to send a request to the chef, but he doesn’t know the name and contact information of these chefs at all, nor the way and steps of the chef to cook. The command pattern encapsulates the guest’s request to order food into a command object, which is the order object in the order object. This object can be passed around in the program, just like an order can be passed from the waiter to the chef. In this way, the customer does not need to know the chef’s name, thus uncoupling the coupling between the caller and receiver of the request.</p><h2 id="Example-of-Command-Mode-Menu-Program"><a href="#Example-of-Command-Mode-Menu-Program" class="headerlink" title="Example of Command Mode - Menu Program"></a>Example of Command Mode - Menu Program</h2><p>The theme of Design patterns is always to separate things that are constant from things that change, and Command Patterns are no exception. Some things that happen after pressing a button are constant, while what happens is variable. With the help of the command object, we can easily change this association, so we can also change the language of the button again in the future.</p><p>Let’s draw a few buttons first.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt; button id = &quot;button1&quot; &gt; click button 1 &lt;/button &gt;</span><br><span class="line">    &lt; button id = &quot;button2&quot; &gt; click button 2 &lt;/button &gt;</span><br><span class="line">    &lt; button id = &quot;button3&quot; &gt; click button 3 &lt;/button &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> button1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> button2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> button3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Next, define the setCommand function, which is responsible for installing commands on the button. To be sure, clicking the button will execute a command command, and the action of executing the command will be agreed to call the execute method of command. Although it is not known what operations these commands represent, the programmer responsible for drawing the button does not care about these things. He only needs to reserve the interface for installing the command, and the command object knows how to communicate with the object correctly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="keyword">function</span>(<span class="params">button, command</span>) &#123;</span><br><span class="line">    button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        command.<span class="title function_">execute</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, the programmers responsible for writing the specific operation of clicking the button submitted their results.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MenuBar</span> = &#123;</span><br><span class="line">    <span class="attr">refresh</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Refresh menu directory&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">SubMenu</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Add submenu&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">del</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Delete submenu&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RefreshMenuBarCommand</span> = <span class="keyword">function</span>(<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">RefreshMenuBarCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">refresh</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">AddSubMenuCommand</span> = <span class="keyword">function</span>(<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AddSubMenuCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">add</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">DelSubMenuCommand</span> = <span class="keyword">function</span>(<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DelSubMenuCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">del</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> <span class="title class_">RefreshMenuBarCommand</span>(<span class="title class_">MenuBar</span>);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> <span class="title class_">AddSubMenuCommand</span>(<span class="title class_">SubMenu</span>);</span><br><span class="line"><span class="keyword">var</span> delSubMenuCommand = <span class="keyword">new</span> <span class="title class_">DelSubMenuCommand</span>(<span class="title class_">SubMenu</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setCommand</span>(button1, refreshMenuBarCommand);</span><br><span class="line"><span class="title function_">setCommand</span>(button2, addSubMenuCommand);</span><br><span class="line"><span class="title function_">setCommand</span>(button3, delSubMenuCommand);</span><br></pre></td></tr></table></figure><h2 id="Command-Patterns-in-JavaScript"><a href="#Command-Patterns-in-JavaScript" class="headerlink" title="Command Patterns in JavaScript"></a>Command Patterns in JavaScript</h2><p>Perhaps we will be confused, the so-called command mode, it seems to be a method of the object to take the name of execute, the introduction of command object and receiver of these two out of nothing role is nothing more than to complicate the simple things, the following code can also achieve the same function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindClick = <span class="keyword">function</span>(<span class="params">button, func</span>) &#123;</span><br><span class="line">    button.<span class="property">onclick</span> = func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MenuBar</span> = &#123;</span><br><span class="line">    <span class="attr">refresh</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Refresh menu directory&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">SubMenu</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Add submenu&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">del</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Delete submenu&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bindClick</span>(button1, <span class="title class_">MenuBar</span>.<span class="property">refresh</span>);</span><br><span class="line"><span class="title function_">bindClick</span>(button2, <span class="title class_">SubMenu</span>.<span class="property">add</span>);</span><br><span class="line"><span class="title function_">bindClick</span>(button3, <span class="title class_">SubMenu</span>.<span class="property">del</span>);</span><br></pre></td></tr></table></figure><p>This statement is correct. The above code simulates the implementation of the command mode of the traditional Object Oriented language. The command mode encapsulates the procedural request call in the execute method of the command object. By encapsulating the call of the method, the operation block can be wrapped and the command object can be passed around, so when calling the command, the client does not need to care about how things go.</p><p>The origin of the command mode is actually an Object Oriented replacement for the callback function.</p><p>JavaScript is a language where function is a first-class object. Like the strategy pattern, the command pattern has long been integrated into the JavaScript language. The operation block does not have to be encapsulated in command.execute, it can be encapsulated in a normal function. As a first-class object, function can already be passed around.</p><p>In Object Oriented design, the receiver of the command pattern is saved as a property of the command object, and it is agreed that the operation to execute the command calls the command.execute method. In the command pattern using closure, the receiver is enclosed in the environment generated by the closure, and the operation of executing the command can be simpler, just execute the callback function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="keyword">function</span>(<span class="params">button, func</span>) &#123;</span><br><span class="line">    button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MenuBar</span> = &#123;</span><br><span class="line">    <span class="attr">refresh</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Refresh menu directory&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RefreshMenuBarCommand</span> = <span class="keyword">function</span>(<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        reciever.<span class="title function_">refresh</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> <span class="title class_">RefreshMenuBarCommand</span>(<span class="title class_">MenuBar</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setCommand</span>(button1, refreshMenuBarCommand);</span><br></pre></td></tr></table></figure><p>Of course, if you want to more clearly express that you are currently using the command mode, or in addition to executing the command, you may need to provide an operation to undo the command in the future, it is best to set the execution function to execute the execute method</p><h2 id="Revoke-the-order"><a href="#Revoke-the-order" class="headerlink" title="Revoke the order"></a>Revoke the order</h2><p>The function of the command mode is not only to encapsulate the operation block, but also to easily add undo operations to the command object, just like the customer can cancel the order by phone when ordering food.</p><p>The goal of this section is to use the Animate class to write an animation that makes the ball move to a certain horizontal position on the page. Now there is an input text box and a button button in the page. Enter some numbers in the text box to represent the horizontal position of the ball after it moves, and the ball starts to move immediately after the user clicks the button.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ball&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    Enter the position of the ball after moving: &lt; input id = &quot;pos&quot;/&gt;</span><br><span class="line">    &lt; button id = &quot;moveBtn&quot; &gt; start moving &lt;/button &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ball = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ball&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> pos = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pos&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> moveBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;moveBtn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    moveBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> animate = <span class="keyword">new</span> <span class="title class_">Animate</span>(ball);</span></span><br><span class="line"><span class="language-javascript">        aninate.<span class="title function_">start</span>(<span class="string">&#x27;left&#x27;</span>, pos.<span class="property">value</span>, <span class="number">1000</span>, <span class="string">&#x27;strongEaseOut&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If you enter 200 in the text box and click the moveBtn button, you can see that the ball moves smoothly to the position of 200 in the horizontal direction. Now we need a way to restore the ball to the position before moving. Of course, you can also enter -200 in the text box and click the button.</p><p>This is a method, but more clumsy, it is best to have a Undo button on the page, click the Undo button Zhizhou, the ball will be able to return to the last position</p><p>Before adding the undo button, let’s change the code to command mode first.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ball&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> pos = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pos&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> moveBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;moveBtn&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MoveCommand</span> = <span class="keyword">function</span>(<span class="params">reveiver, pos</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pos</span> = pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MoveCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">start</span>(<span class="string">&#x27;left&#x27;</span>, <span class="variable language_">this</span>.<span class="property">pos</span>, <span class="number">1000</span>, <span class="string">&#x27;strongEaseOut&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moveCommand;</span><br><span class="line"></span><br><span class="line">moveBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> animate = <span class="keyword">new</span> <span class="title class_">Animate</span>(ball);</span><br><span class="line">    moveCommand = <span class="keyword">new</span> <span class="title class_">MoveCommand</span>(animate, pose.<span class="property">value</span>);</span><br><span class="line">    moveCommand.<span class="title function_">execute</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The implementation of the undo operation is generally to add a method called unexexute or undo to the command object, in which the reverse operation of execute is performed. Before the execute method makes the ball really start to move, we need to record the current position of the ball first. When the unexecute or undo operation, let the ball return to the position just recorded.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ball&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> pos = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pos&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> moveBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;moveBtn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cancelBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;cancelBtn&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MoveCommand</span> = <span class="keyword">function</span>(<span class="params">reveiver, pos</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pos</span> = pos;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldPos</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MoveCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">start</span>(<span class="string">&#x27;left&#x27;</span>, <span class="variable language_">this</span>.<span class="property">pos</span>, <span class="number">1000</span>, <span class="string">&#x27;strongEaseOut&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldPos</span> = <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="property">dom</span>.<span class="title function_">getBoundingClientRect</span>()[<span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="property">propertyName</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MoveCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">undo</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">start</span>(<span class="string">&#x27;left&#x27;</span>, <span class="variable language_">this</span>.<span class="property">oldPos</span>, <span class="number">1000</span>, <span class="string">&#x27;strongEaseOut&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moveCommand;</span><br><span class="line"></span><br><span class="line">moveBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> animate = <span class="keyword">new</span> <span class="title class_">Animate</span>(ball);</span><br><span class="line">    moveCommand = <span class="keyword">new</span> <span class="title class_">MoveCommand</span>(animate, pose.<span class="property">value</span>);</span><br><span class="line">    moveCommand.<span class="title function_">execute</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cancaleBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    moveCommand.<span class="title function_">undo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Undo-and-redo"><a href="#Undo-and-redo" class="headerlink" title="Undo and redo"></a>Undo and redo</h2><p>Just now we discussed how to undo a command. Many times, we need to undo a series of commands. For example, in a Go program, we have already played 10 moves, and we need to repent to the fifth step at once. Before this, we can store all the executed steps in a history list, and then reverse the loop to execute the undo of these commands one by one until the 5th command.</p><p>However, in some cases, the undo operation cannot be successfully used to return the object to the state before execution. For example, in the canvas painting program, there are some points on the canvas, and we draw N curves between these points to connect these points to each other. But it is difficult for me to define an undo operation to erase a certain curve for the command mode here, because in canvas, erasing a line is relatively difficult.</p><p><strong> The best way at this time is to clear the canvas first, and then execute all the commands that have just been executed. This can also be executed using a stack of history lists. Keeping a log of commands and then executing them repeatedly is a good way to reverse irreversible commands. </strong></p><p>For example, some of our games have a playback function. If we store videos, it may be relatively large, but we can store all commands and play back the game by playing back commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ryu</span> = &#123;</span><br><span class="line">    <span class="attr">attack</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;attack&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">defense</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;defense&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">jump</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Jump&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">crouch</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;squat&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> makdCommand = <span class="keyword">function</span>(<span class="params">receiver, state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        recevier[state]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commands = &#123;</span><br><span class="line">    <span class="string">&#x27;119&#x27;</span>: <span class="string">&#x27;jump&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;115&#x27;</span>: <span class="string">&#x27;crouch&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;97&#x27;</span>: <span class="string">&#x27;defense&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;100&#x27;</span>: <span class="string">&#x27;attack&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commandStack = [];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeypress</span> = <span class="keyword">function</span>(<span class="params">ev</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> keyCode = ev.<span class="property">keyCode</span>;</span><br><span class="line">    <span class="keyword">var</span> command = <span class="title function_">makeCommand</span>(<span class="title class_">Ryu</span>, commands[keyCode]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (command) &#123;</span><br><span class="line">        <span class="title function_">command</span>()l</span><br><span class="line">        commandStack.<span class="title function_">push</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;replay&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> command;</span><br><span class="line">    <span class="keyword">while</span>(command = commandStack.<span class="title function_">shift</span>()) &#123;</span><br><span class="line">        <span class="title function_">command</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Macro-command"><a href="#Macro-command" class="headerlink" title="Macro command"></a>Macro command</h2><p>A macro command is a collection of commands. By executing macro commands, a batch of commands can be executed at once.</p><p>Imagine a universal remote control, every day home press a special button, you can help us close the door, open the computer and log in QQ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Close the door&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Turn on the computer&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Login QQ&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MarcoCommand</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">commandList</span>: [],</span><br><span class="line">        <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">command</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">commandList</span>.<span class="title function_">push</span>(command);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> command <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">commandList</span>) &#123;</span><br><span class="line">                command.<span class="title function_">execute</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcoCommand = <span class="title class_">MarcoCommand</span>();</span><br><span class="line">marcoCommand.<span class="title function_">add</span>(closeDoorCommand);</span><br><span class="line">marcoCommand.<span class="title function_">add</span>(openCommand);</span><br><span class="line">marcoCommand.<span class="title function_">add</span>(openQQCommand);</span><br><span class="line"></span><br><span class="line">marcoCommand.<span class="title function_">execute</span>();</span><br></pre></td></tr></table></figure><p>Macro commands are actually the product of the combination of command mode and combination mode. **</p><h2 id="Smart-Command-and-Fool-Command"><a href="#Smart-Command-and-Fool-Command" class="headerlink" title="Smart Command and Fool Command"></a>Smart Command and Fool Command</h2><p>The command we just created looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Close the door&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is no recevier information in the closeDoorCommand function here, which itself covers the behavior of executing the request, which contradicts the command object we saw before that contains a receiver.</p><p>Generally speaking, the command pattern saves a receiver in the command object to be responsible for actually executing the client’s request. This kind of command is “fool-like”, it is only responsible for forwarding the client’s request to the receiver for execution. The advantage of this pattern is the decoupling of the request originator and receiver.</p><p>But we can also define some smarter commands that can directly implement requests. This kind of smart object is called “smart command”.</p><p>Commands without receivers degenerate to be very similar to the strategy pattern, and it is no longer possible to distinguish them from the code structure, only their purposes can be distinguished. The problem domain pointed to by the strategy pattern is smaller, and the goal of all policy objects is always the same. They are just different means to achieve this goal, and their internal implementation is for algorithms. The intelligent command pattern points to a wider problem domain, and the goals solved by the command object are more divergent. At the same time, the command pattern can undo, redo, and even execute the command object in turn in combination with queue buffering.</p><h1 id="Combination-mode"><a href="#Combination-mode" class="headerlink" title="Combination mode"></a>Combination mode</h1><p>In programming, we encounter this requirement that “things are made of similar child objects.” The composition pattern is to use small child objects to build larger objects, and these small child objects may themselves be made of smaller grandchildren.</p><p>For example, in the example of the macro command we just mentioned, marcoCommand is a composite object, and closeDoorCommand, openCommand, and openQQCommand are all leaf objects. In the execute method of marcoCommand, it does not actually perform the operation, but traverses all the leaf objects it contains and delegates the real execute request to these leaf objects.</p><p><strong> marcoCommand behaves like a command, but it is really just a “proxy” for a set of real commands. Not a real proxy, although structurally similar, its purpose is not to control access to leaf objects. </strong></p><h2 id="Uses-of-the-combined-model"><a href="#Uses-of-the-combined-model" class="headerlink" title="Uses of the combined model"></a>Uses of the combined model</h2><p>The composition pattern combines objects into a tree structure to represent a “whole-part” hierarchy. In addition to representing the tree structure, another advantage of the composition pattern is that it can be represented by the polymorphism of objects, making the user’s use of single objects and combined objects consistent.</p><ul><li>Represents a tree structure. Through the example of macros, we can find an advantage of the combination pattern, providing a solution to traverse the tree structure. By calling the execute method of the combination object, the program will recursion call the execute method of the leaf object below the combination object. So our universal remote control only needs one operation to complete the door, open the computer, and open QQ in turn. The combination mode can very conveniently describe the hierarchy of the object part-whole.</li><li>Utilize the polymorphism of objects to treat combined objects and single objects uniformly. Using the polymorphic performance of objects, the Client can ignore the difference between combined objects and single objects. In the composition mode, the client will use all objects in the composition structure uniformly, regardless of whether it is a combined object or a single object.</li></ul><p>This will bring great convenience to customers in actual development. When we add a command to the universal remote control, we don’t care if the command is a macro command or a normal word command, we just need to know that it needs to have an execute method.</p><h2 id="More-powerful-macros"><a href="#More-powerful-macros" class="headerlink" title="More powerful macros"></a>More powerful macros</h2><p>Now we enhance our universal remote control, the function is as follows:</p><ul><li>Turn on the air conditioner</li><li>Turn on the TV and stereo</li><li>Close the door, turn on the computer, log in to QQ</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MarcoCommand</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">commandList</span>: [],</span><br><span class="line">        <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">command</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">commandList</span>.<span class="title function_">push</span>(command);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> command <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">commandList</span>) &#123;</span><br><span class="line">                command.<span class="title function_">execute</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openAcCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Turn on the air conditioner&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openTvCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Turn on TV&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openSoundCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Turn on sound&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcoCommand1 = <span class="title class_">MarcoCommand</span>();</span><br><span class="line">marcoCommand1.<span class="title function_">add</span>(openTvCommand);</span><br><span class="line">marcoCommand1.<span class="title function_">add</span>(openSoundCommand);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Close the door&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Turn on the computer&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Login QQ&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcoCommand2 = <span class="title class_">MarcoCommand</span>();</span><br><span class="line">marcoCommand2.<span class="title function_">add</span>(closeDoorCommand);</span><br><span class="line">marcoCommand2.<span class="title function_">add</span>(openCommand);</span><br><span class="line">marcoCommand2.<span class="title function_">add</span>(openQQCommand);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcoCommand = <span class="title class_">MarcoCommand</span>();</span><br><span class="line">marcoCommand.<span class="title function_">add</span>(openAcCommand);</span><br><span class="line">marcoCommand.<span class="title function_">add</span>(marcoCommand1);</span><br><span class="line">marcoCommand.<span class="title function_">add</span>(marcoCommand2);</span><br><span class="line"></span><br><span class="line">marcoCommand.<span class="title function_">execute</span>();</span><br></pre></td></tr></table></figure><p>As can be seen from this example, basic objects can be combined into more complex composite objects, which can be combined by recursion.</p><h2 id="The-role-of-abstract-classes-in-composition-patterns"><a href="#The-role-of-abstract-classes-in-composition-patterns" class="headerlink" title="The role of abstract classes in composition patterns"></a>The role of abstract classes in composition patterns</h2><p>The biggest advantage of the combination mode is that it can treat the combination object and the base object consistently. The client does not need to know whether the macro command or the ordinary command is being processed. As long as it is a command and there is an execute method, the command can be added to the tree.</p><p>The convenience brought by this transparency is particularly obvious in statically typed languages. For example, in Java, the key to implementing the composition pattern is that both the Composite class and the Leaf class must inherit from a Component abstract class, which represents both composite objects and leaf objects, and it can also ensure that composite objects and leaf objects have methods with the same name.</p><p>However, in JavaScript, a dynamically typed language, the polymorphism of objects is innate, and there is no compiler to check the type of variables, so we usually do not simulate a weird abstract class. The point of implementing the composition pattern in JavaScript is to ensure that the composition object and the leaf object have the same method, which usually requires the idea of duck type for interface checking.</p><h2 id="Security-Issues-with-Transparency"><a href="#Security-Issues-with-Transparency" class="headerlink" title="Security Issues with Transparency"></a>Security Issues with Transparency</h2><p>The transparency of the composition pattern allows the requesting client to ignore the difference between the composition object and the leaf object in the tree, but they are actually different.</p><p>Composite objects can have sub-nodes, but leaf objects have no sub-nodes, so we may have some misoperations to add sub-nodes to the leaf object. The solution is usually to add an add method to the leaf object, but this method directly reports an error.</p><h2 id="Some-noteworthy-places"><a href="#Some-noteworthy-places" class="headerlink" title="Some noteworthy places"></a>Some noteworthy places</h2><p><strong> 1. Combination mode is not a parent-child relationship </strong></p><p>The tree structure of the combination pattern is easy to make people mistakenly think that the combination object and the leaf object are parent-child relationships, which is incorrect.</p><p>Composite pattern is a HAS-A relationship, not IS-A. Composite objects contain a set of leaf objects, but Leaf is not a subclass of Composite. Composite objects delegate requests to all the leaf objects they contain, and the key to their cooperation is having the same interface.</p><p><strong> 2. Operations on leaf objects are consistent </strong></p><p>In addition to requiring composite objects and leaf objects to have the same interface, there is a necessary condition that operations on a set of objects must be consistent.</p><p>For example, if a company wants to give all employees 1,000 yuan for the New Year’s Day holiday fee, the combination mode can be used in this scenario, but if the company sends a birthday wish to the employee who has a birthday today, the combination mode is useless, unless the birthday is first picked out. The combination mode can only be used if each leaf object in the list is treated in a consistent manner.</p><p><strong> 3. Bidirectional mapping relationship </strong></p><p>The notification steps for issuing savings fees are from the company to each department, to each group, and then to each employee’s mailbox. This in itself is a good example of a combination model, but some employees may belong to multiple organizational structures, and the objects are not strictly hierarchical, and it is not suitable for a combination model.</p><p>In this case, we must establish a two-way mapping relationship between parent and child nodes. A simple way is to add collections to both groups and employees to hold each other’s references. But this way of mutual reference is quite complicated, and there is too much coupling between objects, making it difficult to modify and delete an object. <strong> At this time, we can introduce the mediator pattern, which is a bit similar to the abstraction of immutable information into knowledge layers in the analysis pattern. </strong></p><p><strong> 4. Use Chain of Responsibility mode to improve portfolio mode performance </strong></p><p>In combination mode, if the structure of the tree is more complex and the number of nodes is large, the performance may not be ideal in the process of traversing the tree. Sometimes we can indeed use some tricks to avoid traversing the entire tree in practice.</p><p>One solution is to use the responsibility chain pattern. The responsibility chain pattern generally requires us to manually set up the chain, but in the composite mode, the relationship between parent and child objects naturally forms a chain. Let the request pass along the chain from the parent object to the child object, or vice versa. Until an object that can handle the request is encountered.</p><h2 id="When-to-use-combination-mode"><a href="#When-to-use-combination-mode" class="headerlink" title="When to use combination mode"></a>When to use combination mode</h2><ul><li><p>Represents the part-overall structure of an object. Composition mode can easily construct a tree to represent the part-overall structure of an object. Especially when we are not sure how many layers the tree has during development. After the construction of the tree is finally completed, we only need to request the topmost object of the tree to perform unified operations on the entire tree. Adding and deleting nodes in Composition mode is very convenient, which also complies with the Open Closed Principle.</p></li><li><p>The client wants to treat all objects in the tree uniformly. The composition mode allows the client to ignore the difference between the composition object and the leaf object. When the client faces the tree, he does not need to care whether the object currently being processed is a combination object or a leaf object, nor does he need to write a bunch of if-else to handle them. The combination object and the leaf object will each do the right thing.</p></li></ul><h1 id="Template-method-pattern"><a href="#Template-method-pattern" class="headerlink" title="Template method pattern"></a>Template method pattern</h1><p>There are not many scenarios where inheritance is used in JavaScript development, and many times we like to use mixins.</p><p>JavaScript doesn’t have classes, but it can inherit through prototypes. The template approach is an inheritance-based Design pattern.</p><h2 id="Definition-and-composition-of-template-method-patterns"><a href="#Definition-and-composition-of-template-method-patterns" class="headerlink" title="Definition and composition of template method patterns"></a>Definition and composition of template method patterns</h2><p>The template method is a very simple pattern that can be implemented simply by using inheritance.</p><p>The template method pattern consists of two parts, the first part is the abstract parent class, and the second part is the concrete implementation subclass. Usually, the algorithm framework of the subclass is encapsulated in the abstract parent class, including implementing some common methods and encapsulating the execution order of all methods in the subclass. Subclasses inherit the entire algorithm structure by inheriting this abstract parent class.</p><p>If we have some parallel subclasses, each subclass has some identical behavior and also some different behavior. If the same different behaviors are mixed in each subclass, it means that these same behaviors will be repeated in each subclass. But in fact, the same behavior can be put into a single place. Template methods solve this problem, the same parts of the subclass are moved to the parent class, and the different parts are left to the subclass to implement.</p><h2 id="An-example-Coffee"><a href="#An-example-Coffee" class="headerlink" title="An example - Coffee"></a>An example - Coffee</h2><p>Suppose we now want to make a cup of coffee and a cup of tea, the brewing process of the two is compared as follows:</p><div class="table-container"><table><thead><tr><th>make coffee</th><th>make tea</th></tr></thead><tbody><tr><td>Boil the water</td><td>Boil the water</td></tr><tr><td>Brew coffee with boiling water</td><td>Brew tea with boiling water</td></tr><tr><td>Pour coffee into a cup</td><td>Pour tea into a cup</td></tr><tr><td>With sugar and milk</td><td>With lemon</td></tr></tbody></table></div><p>Let’s write an abstract parent class first</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Beverage</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">boilWater</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Boil the water&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">brew</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pourInCup</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addCondiments</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">boilWater</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">brew</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">pourInCup</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addCondiments</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we make tea and coffee separately</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Coffee</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Beverage</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">brew</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;brew coffee with boiling water&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pourInCup</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;pour the coffee into the cup&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addCondiments</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Add sugar and milk&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> <span class="title class_">Coffee</span>();</span><br><span class="line">coffee.<span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Tea</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Tea</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Beverage</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Tea</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">brew</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Make tea with boiling water&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Tea</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pourInCup</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;pour the tea into the cup&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Tea</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addCondiments</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;add lemon&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> <span class="title class_">Tea</span>();</span><br><span class="line">tea.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><p>Beverage.prototype.init is called a template method because it encapsulates the algorithm framework of the subclass, which serves as a template for an algorithm to guide the subclass to execute which methods in which order.</p><h2 id="Disadvantages-and-solutions-of-not-having-abstract-classes-in-JavaScript"><a href="#Disadvantages-and-solutions-of-not-having-abstract-classes-in-JavaScript" class="headerlink" title="Disadvantages and solutions of not having abstract classes in JavaScript"></a>Disadvantages and solutions of not having abstract classes in JavaScript</h2><p>JavaScript does not provide syntactic support for abstract classes. The first role of an abstract class is to hide the concrete type of an object. Since JavaScript is a “type obfuscation” language, the type of hidden object is not important in JavaScript Red.</p><p>On the other hand, when we use prototype inheritance in JavaScript to simulate traditional class-based inheritance, there is no compiler to help us with any form of checking, and there is no way to guarantee that subclasses will override abstract methods in their parent classes.</p><p>We offer two alternative solutions:</p><ul><li><p>Simulate interface checking with duck types to ensure that the methods of the parent class are indeed overridden in the subclass, but simulating interface checking will bring unnecessary complexity</p></li><li><p>Let methods such as Beverage.prototype.brew throw an exception directly. If we forget to write the’Coffee .prototype.init ‘method due to carelessness, we will at least get an error.</p></li></ul><h2 id="Usage-scenarios-of-template-methods"><a href="#Usage-scenarios-of-template-methods" class="headerlink" title="Usage scenarios of template methods"></a>Usage scenarios of template methods</h2><p>In general, this pattern is often used by architects to build the framework of a project. After the architect sets the skeleton of the framework, the programmer inherits the structure of the framework and is responsible for filling in the blanks.</p><h2 id="Hook-method"><a href="#Hook-method" class="headerlink" title="Hook method"></a>Hook method</h2><p>With the template method, we encapsulate the algorithm framework of the subclass in the parent class. This framework works fine under normal circumstances. But what if we meet someone who doesn’t like sugar and milk when drinking coffee.</p><p>At this time, we need to use the hook method. Placing a hook to isolate changes is a common method, such as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Beverage</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">boilWater</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Boil the water&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">customerWantsCondiments</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">brew</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Throw</span> <span class="keyword">new</span> <span class="title class_">Error</span> (<span class="string">&#x27;Subclass must override brew method&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pourInCup</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Throw</span> <span class="keyword">new</span> <span class="title class_">Error</span> (<span class="string">&#x27;Subclass must override pourInCup method&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addCondiments</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Throw</span> <span class="keyword">new</span> <span class="title class_">Error</span> (<span class="string">&#x27;Subclass must override addCondiments method&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">boilWater</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">brew</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">pourInCup</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">customerWantsCondiments</span>()) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addCondiments</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Do-we-really-need-to-inherit"><a href="#Do-we-really-need-to-inherit" class="headerlink" title="Do we really need to inherit?"></a>Do we really need to inherit?</h2><p>The template method pattern is one of the few inheritance-based Design patterns, but JavaScript does not actually have a real class inheritance. Inheritance is achieved through the delegation between objects. That is to say, although we learn from the form of inheritance. The language of class inheritance, but such template methods are not authentic, and do we need to use inheritance to implement template methods?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Beverage</span> = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> boilWater = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Boil the water&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> brew = params.<span class="property">brew</span> || <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Throw</span> <span class="keyword">new</span> <span class="title class_">Error</span> (<span class="string">&#x27;Subclass must override brew method&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pourInCup = params.<span class="property">pourInCup</span> || <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Throw</span> <span class="keyword">new</span> <span class="title class_">Error</span> (<span class="string">&#x27;Subclass must override pourInCup method&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> addCondiments = params.<span class="property">addCondiments</span> || <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Throw</span> <span class="keyword">new</span> <span class="title class_">Error</span> (<span class="string">&#x27;Subclass must override addCondiments method&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> F = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">boilWater</span>();</span><br><span class="line">        <span class="title function_">brew</span>();</span><br><span class="line">        <span class="title function_">pourInCup</span>();</span><br><span class="line">        <span class="title function_">addCondiments</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Coffee</span> = <span class="title class_">Beverage</span>(&#123;</span><br><span class="line">    <span class="attr">brew</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Make coffee with boiling water&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">pourInCup</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;pour the coffee into the cup&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">addCondiments</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Add sugar and milk&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In JavaScritp, many times higher-order functions are more efficient than template methods.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In this article, we summarize the command patterns, combination patterns, and template methods in JavaScript. These patterns are relatively similar.&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/en/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Design pattern learning and practice (3)</title>
    <link href="https://sunra.top/en/posts/1369/"/>
    <id>https://sunra.top/en/posts/1369/</id>
    <published>2022-12-24T06:13:17.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>This article summarizes the iterator pattern and publish-subscribe pattern. These two patterns are relatively classic patterns, even to the extent that the syntax itself supports them.</p><span id="more"></span><h1 id="Iterator-pattern"><a href="#Iterator-pattern" class="headerlink" title="Iterator pattern"></a>Iterator pattern</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>The iterator pattern provides a way to sequentially access the elements of an aggregate object without exposing the internal representation of the object. The iterator pattern can separate the iterative process from business logic. After using the iterator pattern, each element of the object can be accessed sequentially even if the internal structure of the object is not concerned.</p><p>For example, we define a data structure, the internal structure is a queue with a linked list, only need to provide a method to traverse the queue on the line, do not need to let the outside know what kind of technology is used to achieve the queue.</p><h2 id="Internal-iterator-and-external-iterator"><a href="#Internal-iterator-and-external-iterator" class="headerlink" title="Internal iterator and external iterator"></a>Internal iterator and external iterator</h2><p>Let’s implement an iterator for each function that takes two parameters, the first bit is the array that is looping, and the second is the callback function that will be fired after each step in the loop:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="keyword">function</span>(<span class="params">arr, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        callback.<span class="title function_">call</span>(arr[i], i, arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">each</span>(<span class="params">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="keyword">function</span>(index, n)</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This each function belongs to the internal iterator. The internal iteration rules of each function have been defined and completely take over the entire iterative process. The external only needs an initial call.</p><p>Internal iterators are very convenient when called. The outside world does not care about the internal implementation of the iterator. The interaction with the iterator is only an initial call, but this also happens to be the disadvantage of internal iterators.</p><p>Since the iteration rules of the internal iterators have been defined in advance, each function above cannot iterate two arrays at the same time.</p><p>For example, there is now a requirement to compare whether the elements of two arrays are exactly the same. If we do not rewrite each function, we can start with only the callback function of each. The code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compare = <span class="keyword">function</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1.<span class="property">length</span> ! arr2.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;arr1 and arr2 is not equal&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">each</span>(arr1, <span class="keyword">function</span>(<span class="params">i, n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n ! arr2[i]) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;arr1 and arr2 is not equal&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;arr1 and arr2 is equal&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compare</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>In some languages without closures, the implementation of the internal iterator itself is also quite complex. For example, the internal iterator in C language is implemented using function pointers, and the loop-processed functions must be explicitly passed in from the outside in the form of parameters.</p><p>In contrast to internal iterators, external iterators must explicitly request iteration of the next element.</p><p>External iterators increase the complexity of some calls, but also increase the flexibility of iterators. We can manually control the process and order of iterations.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Iterator</span> = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> next = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        current++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isDone = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        current &gt;= obj.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getCurrent = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[current];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next,</span><br><span class="line">        isDone,</span><br><span class="line">        getCurrent,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compare = <span class="keyword">function</span>(<span class="params">iterator1, iterator2</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(!iterator1.<span class="title function_">isDone</span>() &amp;&amp; !iterator2.<span class="title function_">isDone</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (iterator1.<span class="title function_">getCurrent</span>() ! iterator2.<span class="title function_">getCurrent</span>()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;iterator1 and iterator2 is not equal&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        iterator1.<span class="title function_">next</span>();</span><br><span class="line">        iterator2.<span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iterator1.<span class="title function_">isDone</span>() &amp;&amp; iterator2.<span class="title function_">isDone</span>()) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;iterator1 and iterator2 is equal&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;iterator1 and iterator2 is not equal&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compare</span>(<span class="title class_">Iterator</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]), <span class="title class_">Iterator</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure><h2 id="Abort-iterator"><a href="#Abort-iterator" class="headerlink" title="Abort iterator"></a>Abort iterator</h2><p>Iterators can provide a way to get out of the loop, just like break in a normal for loop. For example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="keyword">function</span>(<span class="params">arr, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback.<span class="title function_">call</span>(arr[i], i, arr[i]) = <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">each</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="keyword">function</span>(<span class="params">i, n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Example-of-Iterator-Pattern"><a href="#Example-of-Iterator-Pattern" class="headerlink" title="Example of Iterator Pattern"></a>Example of Iterator Pattern</h2><p>Assuming you have the following code, you can get different upload component objects according to different browsers:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getUploadObj = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;TXFINActiveX.FTNUpload&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">supportFlash</span>()) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">&quot;&lt;object type=&#x27;application/x-shockwave-flash&#x27;&gt;&lt;/object&gt;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> $(str).<span class="title function_">appendTo</span>($(<span class="string">&#x27;body&#x27;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">&quot;&lt;input name=&#x27;file&#x27; type=&#x27;file&#x27;/&gt;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> $(str).<span class="title function_">appendTo</span>($(<span class="string">&#x27;body&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s modify the above code with iterator pattern, encapsulating each method of obtaining uploaded components as a function, and then see these functions put into an array to iterate until one can return correctly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iteratorUploadObj = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> uploadObjCreators = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">slice</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uploadObjCreators.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> uploadObj = uploadObjCreators[i]();</span><br><span class="line">        <span class="keyword">if</span> (uploadObj ! <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> uploadObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;TXFINActiveX.FTNUpload&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">supportFlash</span>()) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&quot;&lt;object type=&#x27;application/x-shockwave-flash&#x27;&gt;&lt;/object&gt;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> $(str).<span class="title function_">appendTo</span>($(<span class="string">&#x27;body&#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&lt;input name=&#x27;file&#x27; type=&#x27;file&#x27;/&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> $(str).<span class="title function_">appendTo</span>($(<span class="string">&#x27;body&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadObj = <span class="title function_">iteratorUploadObj</span>(getActiveUploadObj, getFlashUploadObj, getFormUploadObj);</span><br></pre></td></tr></table></figure><h1 id="Publish-subscribe-model"><a href="#Publish-subscribe-model" class="headerlink" title="Publish-subscribe model"></a>Publish-subscribe model</h1><p>The publish-subscribe pattern, also known as the observer pattern, defines a one-to-many dependency relationship between objects. When the state of an object changes, all objects that depend on it will be notified.</p><p>In JavaScript, we generally use the event pattern instead of the publish-subscribe pattern.</p><p>The publish-subscribe pattern can be widely used in asynchronous programming, which is an alternative to passing callback functions. At the same time, the publish-subscribe pattern can replace the hardcoding notification mechanism between objects, where one object no longer explicitly calls an interface of another object. The publish-subscribe pattern allows two objects to be loosely coupled together.</p><h2 id="DOM-events"><a href="#DOM-events" class="headerlink" title="DOM events"></a>DOM events</h2><p>In fact, as long as we have bound event functions to DOM nodes, we have used the publish-subscribe pattern.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">click</span>();</span><br></pre></td></tr></table></figure><h2 id="Custom-events"><a href="#Custom-events" class="headerlink" title="Custom events"></a>Custom events</h2><p>In addition to DOM events, we often implement custom events. This publish-subscribe pattern that relies on custom events can be used in any JavaScript code.</p><p>Let’s see how to implement the publish-subscribe model step by step</p><ul><li>First, specify who will act as the publisher</li><li>then add a cache list to the publisher for the callback function to notify subscribers</li><li>When the last message is published, the publisher will traverse this cache list and trigger the subscriber callback function stored in it in turn</li></ul><p>In addition, we can also fill some parameters into the callback function, and the subscriber can receive these parameters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">salesOffices.<span class="property">clientList</span> = [];</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="property">listen</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clientList</span>.<span class="title function_">push</span>(fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="property">trigger</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">clientList</span>) &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="keyword">function</span>(<span class="params">price, squareMeter</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A know:&quot;</span>, price, squareMeter);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="keyword">function</span>(<span class="params">price, squareMeter</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B know:&quot;</span>, price, squareMeter);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="number">2000000</span>, <span class="number">80</span>);</span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="number">3000000</span>, <span class="number">110</span>);</span><br></pre></td></tr></table></figure><p>So far, we have implemented a simple publish-subscribe model, but there are still some problems here. We see that the subscriber receives every message released by the publisher. Although A only wants to buy a house of 88 square meters, the publisher will also push the message of 110 houses to A, which is not necessary, so we can optimize it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">salesOffices.<span class="property">clientList</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="property">listen</span> = <span class="keyword">function</span>(<span class="params">key, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">clientList</span>[key]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">clentList</span>[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clentList</span>[key].<span class="title function_">push</span>(fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="property">trigger</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">const</span> fns = <span class="variable language_">this</span>.<span class="property">clentList</span>[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.<span class="property">length</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> fns) &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&#x27;squareMeter80&#x27;</span>, <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A know:&quot;</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&#x27;squareMeter110&#x27;</span>, <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B know:&quot;</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="string">&#x27;squareMeter80&#x27;</span>, <span class="number">2000000</span>);</span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="string">&#x27;squareMeter110&#x27;</span>, <span class="number">3000000</span>);</span><br></pre></td></tr></table></figure><h2 id="General-Implementation-of-Publish-Subscribe"><a href="#General-Implementation-of-Publish-Subscribe" class="headerlink" title="General Implementation of Publish Subscribe"></a>General Implementation of Publish Subscribe</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line">    <span class="attr">clientList</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">listen</span>: <span class="keyword">function</span>(<span class="params">key, fn</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">clientList</span>[key]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">clentList</span>[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">clentList</span>[key].<span class="title function_">push</span>(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">trigger</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> key = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="keyword">const</span> fns = <span class="variable language_">this</span>.<span class="property">clentList</span>[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.<span class="property">length</span> = <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> fns) &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Install</span> publish-subscribe mode <span class="keyword">for</span> any object</span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">        obj[i] = event[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line"><span class="title function_">installEvent</span>(salesOffices);</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&#x27;squareMeter80&#x27;</span>, <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A know:&quot;</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&#x27;squareMeter110&#x27;</span>, <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B know:&quot;</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="string">&#x27;squareMeter80&#x27;</span>, <span class="number">2000000</span>);</span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="string">&#x27;squareMeter110&#x27;</span>, <span class="number">3000000</span>);</span><br></pre></td></tr></table></figure><p>Of course, we can also publish first, then subscribe, cache the message when there are no subscribers for the time being, and call the subscribers in turn once they appear and clear the message</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This article summarizes the iterator pattern and publish-subscribe pattern. These two patterns are relatively classic patterns, even to the extent that the syntax itself supports them.&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/en/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>function components and function programming</title>
    <link href="https://sunra.top/en/posts/9244/"/>
    <id>https://sunra.top/en/posts/9244/</id>
    <published>2022-12-10T00:51:27.000Z</published>
    <updated>2023-06-12T13:54:08.714Z</updated>
    
    <content type="html"><![CDATA[<p>Function programming and function components are a trend in development now. They have been used in the past, but they have not been understood conceptually. This article summarizes the two together and makes a certain comparison.</p><p>Function programming is a programming paradigm, and function components are a product of this paradigm.</p><span id="more"></span><h1 id="Function-programming"><a href="#Function-programming" class="headerlink" title="Function programming"></a>Function programming</h1><h2 id="Programming-paradigm"><a href="#Programming-paradigm" class="headerlink" title="Programming paradigm"></a>Programming paradigm</h2><p>Programming paradigm, programming paradigm, or programming paradigm, refers to a typical programming style in software engineering. Common programming paradigms are: function programming, imperative programming, procedural programming, Object Oriented programming, etc.</p><p>Programming paradigms provide and determine the programmer’s view of program execution. For example, in Object Oriented programming, programmers consider a program to be a series of interacting objects. Due to different methodologies, Object Oriented programming paradigms are further divided into class-based programming and prototype-based programming, while in function programming, a program will be regarded as a stateless sequence of function calculations.</p><blockquote><p>Programming paradigms are different from programming languages, such as Object Oriented languages. It only means that the language provides more convenient encapsulation, inheritance, and polymorphic syntax. It does not mean that you can only write Object Oriented code, nor does it mean that the code you write conforms to Object Oriented paradigm</p></blockquote><p>There are many more programming paradigms, here is the table of contents of Wiki Lingo:</p><ul><li>Imperative<ul><li>Procedural</li><li>Block structure</li><li>Structured</li><li>Modularization</li></ul></li><li>function<ul><li>First class function</li><li>Pure function</li><li>Implicit</li><li>Pattern matching</li><li>Derived formula</li></ul></li><li>Object Oriented<ul><li>based on class</li><li>Based on prototypes</li><li>Contractual</li><li>Face section</li><li>Agent oriented</li></ul></li><li>Array type</li><li>Data flow<ul><li>Synchronous</li><li>Responsive</li><li>Stream processing</li><li>Based on process</li></ul></li></ul><h2 id="Function-programming-is-a-programming-paradigm"><a href="#Function-programming-is-a-programming-paradigm" class="headerlink" title="Function programming is a programming paradigm"></a>Function programming is a programming paradigm</h2><p>Function programming, also known as function programming or functional programming, is a programming paradigm that treats computer operations as function operations and avoids the use of program state and mutable objects.</p><p><strong> In function programming, a function is a first-class object or a first-class function, which means that a function can either be used as an input parameter value for other functions, or return a value from a function </strong>, be modified or assigned to a variable. The lambda calculus is the most important foundation of this paradigm. The function of lambda calculus can accept function as an input parameter and output a return value.</p><p>Compared with imperative programming, function programming emphasizes the result of program execution rather than the process of execution, advocating the use of several simple execution units to make the calculation results gradual, and deriving complex operations layer by layer, rather than designing a complex execution process.</p><h2 id="What-is-function-programming"><a href="#What-is-function-programming" class="headerlink" title="What is function programming"></a>What is function programming</h2><p>These keywords can be extracted from the above definition:</p><ol><li>Avoid state changes</li><li>function as input and output</li><li>Related to λ calculus</li></ol><p>Regarding this definition, if you just want to briefly understand the manifestation of function programming, you can take a look<a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html">阮一峰的这篇博客</a></p><p>If you want a deeper understanding, it is also recommended to read the blog above first. It is very short, but it will help to understand the form of some of the formulas below.</p><p>Avoiding state changes and functions as input and output is easier to understand. What is lambda calculus? To understand lambda calculus, it will pull out Turing complete, Turing machine. Next, I will briefly explain to you.</p><h3 id="What-is-an-expression"><a href="#What-is-an-expression" class="headerlink" title="What is an expression"></a>What is an expression</h3><p>Lambda calculus (lambda-calculus) is a formal system developed from mathematical logic to study how functions are abstracted and defined, how functions are applied, and recursion, using rules for variable binding and substitution. It was first published by mathematician Alonzo Church in the 1930s. As a widely used computational model, the lambda calculus can clearly define what a computable function is, and any computable function can be expressed and evaluated in this form, which can simulate the computational process of a single tape Turing machine. However, the lambda calculus emphasizes the application of transformation rules rather than the specific machines that implement them.</p><p><strong> Lambda calculus is comparable to the most fundamental programming language, it includes a transformation rule (variable replacement) and a way to abstract the definition of function </strong>. Therefore, it is generally recognized as an approach that is closer to software than hardware. It has had a great impact on functional programming languages such as Lisp, ML, and Haskell. In 1936 Church used lambda calculus to give a negation of the Entscheidungsproblem: the proposition that two lambda expressions are equivalent cannot be determined by a “general algorithm”, which is the first problem that undecidability can be proved, even in<a href="https://zh.m.wikipedia.org/zh-cn/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98">停机问题</a>Before.</p><p>The lambda calculus involves constructing lambda terms and performing reduction operations on lambda terms. In the simplest lambda calculus, only the following rules are used to construct lambda terms:</p><div class="table-container"><table><thead><tr><th>Grammar</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>x</td><td>variable</td><td>uses characters or strings to represent parameters or mathematical values or to represent logical values</td></tr><tr><td>(λ x. M)</td><td>abstraction</td><td>A complete function definition (M is a lambda term), in which x in the expression is bound to the variable x.</td></tr><tr><td>(M N)</td><td>Apply</td><td>to function M on the parameter N. M and N are lambda terms.</td></tr></tbody></table></div><p>Generates an expression such as: (λ x.λ y. (λ z. (λ x.zx) (λ y.zy)) (x y)). If the expression is unambiguous, the parentheses can be omitted. For some applications, logical and mathematical constants and related operations may be included.</p><p><strong> The λ calculus is Turing complete, that is, it is a general model that can be used to simulate any Turing machine </strong>. λ is also used in λ expressions and λ terms to represent binding a variable to a function.</p><p>The lambda calculus can be typed or untyped. In typed lambda calculus (which is untyped as described above), the function can only be applied when the parameter types and input types match. Typed lambda calculus is weaker than untyped lambda calculus - the latter is the main part of this entry - because typed lambda operations express less than untyped lambda calculus; at the same time, the former allows more theorems to be proved. For example, in simple typed lambda calculus, the operation can always be stopped, while in untyped lambda calculus this is not necessarily the case (because of the halting problem). One reason there are many typed λ calculus is that they are expected to do more (something that previous typed λ calculus could not do) and at the same time hope to be able to prove more theorems.</p><p>The lambda calculus has many applications in mathematics, philosophy, linguistics, and computer science. It occupies an important position in programming language theory, and function programming implements lambda calculus support. Lambda calculus is also a research hotspot in category theory.</p><p>The lambda formula has three main points:</p><ul><li>Binding relationship. Variables are arbitrary, x, y, and z are fine, it is just a proxy for specific data.</li><li>recursion definition. The λ term recursion definition, M can be a λ term.</li><li>Substitution reduction. The λ term can be applied, and the space-separated representation applies N to M, which can be a λ term.</li></ul><p>By substitution and reduction, we can treat our calculus like a simplification equation.</p><p>For example, we just said ‘ (λ x.λ y. (λ z. (λ x.zx) (λ y.zy)) (x y)) ‘, first ‘ (λ x.zx) ‘ means’ f (x) = zx ‘, then’ (λ x.zx) 3 ‘is’ 3z ‘</p><h3 id="Calculus-Meaning-of-Variables"><a href="#Calculus-Meaning-of-Variables" class="headerlink" title="Calculus: Meaning of Variables"></a>Calculus: Meaning of Variables</h3><p>In λ calculus, our expression has only one parameter, so how can it achieve binary operations on two numbers? For example, addition a + b requires two parameters.</p><p>At this time, we need to treat the function itself as a value. We can save and pass data (or state) by binding a variable to the context and then returning a new function. The bound variable can be referenced from the context when it needs to be actually used.</p><p>For example: ‘λ m.λ n.m + n 5 = λ n.5 + n’, the first function call passes in m = 5, returns a new function, this new function takes a parameter n and returns the result of m + n. The context generated in this case, <strong> is Closure (closure, a common means of state preservation and reference in function programming) </strong>, and we call the variable m the context that is bound to the second function.</p><p>In addition to bound variables, λ calculus also supports free variables, such as this y: ‘λ m.λ n.m + n + y’, where y is a variable that is not bound to the parameter position, called a free variable.</p><p>Bound variables and free variables are two sources of state for a function, one can be substituted and the other cannot. In actual programs, bound variables are usually implemented as local variables or parameters, and free variables are implemented as global variables or environment variables.</p><h3 id="Calculus-Substitution-and-Reduction"><a href="#Calculus-Substitution-and-Reduction" class="headerlink" title="Calculus: Substitution and Reduction"></a>Calculus: Substitution and Reduction</h3><p>The calculus is divided into alpha substitution and beta reduction. We actually covered these two concepts in the previous chapter, so let’s introduce them below.</p><p>Alpha substitution means that the name of the variable is not important, you can write λ m.λ n.m + n, or λ x.λ y.x + y, which represent the same function during the calculation process. That is to say, we only care about the form of the calculation, not the details of what variables to use to implement it. This is convenient for us to modify the variable name without changing the operation result, so as to facilitate simplification operations when the function is more complex. In fact, even the name of the entire lambda calculus is not important, we only need this form of calculation, not the naming of this form.</p><p>Beta reduction means that if you have a function application (function call), then you can substitution the part of the function body that corresponds to the identifier by using parameters (possibly another expression) to replace the identifier. It sounds a bit confusing, but it is actually parameter substitution for a function call. For example: ‘ (λm.λn.m + n) 1 3 = (λn.1 + n) 3 = 1 + 3 = 4’</p><p>You can replace m with 1 and n with 3, then the whole expression can be reduced to 4. This is also in function programming<a href="https://caowenwei.github.io/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/pure-function-rt/">引用透明性</a>The origin of. It should be noted that 1 and 3 here represent the operation values of the expression, which can be replaced by other expressions. For example, replacing 1 with (λ m.λ n.m + n 1 3) requires two reductions</p><h3 id="Lambda-expressions-in-JavaScript-Arrow-functions"><a href="#Lambda-expressions-in-JavaScript-Arrow-functions" class="headerlink" title="Lambda expressions in JavaScript: Arrow functions"></a>Lambda expressions in JavaScript: Arrow functions</h3><p>The ECMAScript 2015 specification introduces arrow functions, which have no this and no arguments. Can only be used as an expression (expression) but not as a statement (statement), the expression produces an arrow function reference, which still has the name and length properties, representing the name of the arrow function and the length of the parameters, respectively. An arrow function is a simple expression, and an arrow function can also be called a lambda function, which is written like a lambda expression.</p><p>Arrow functions can be used to do some simple operations. The following example compares the use of four arrow functions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Const</span> add_1 = (x, y) = &gt; x + y;<span class="comment">//all local variables</span></span><br><span class="line"><span class="title class_">Const</span> add_2 = x = &gt; x + y;<span class="comment">//y is a global variable</span></span><br><span class="line"><span class="title class_">Const</span> add_3 = x = &gt; y = &gt; x + y;<span class="comment">//closure concatenation parameter, curried</span></span><br><span class="line"><span class="title class_">Const</span> add_4 = b = &gt; a = &gt; a + b;<span class="comment">//The parameter name has nothing to do with the expression result</span></span><br></pre></td></tr></table></figure><p>This is the case directly for numbers (primitive data types). If you are doing operations on functions (referring to data types), things become interesting.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn_1</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="title function_">x</span>(y);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn_2</span> = f =&gt; <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(x);</span><br><span class="line"><span class="keyword">const</span> add_1 = (<span class="function"><span class="params">f</span> =&gt;</span> <span class="title function_">f</span>(<span class="number">5</span>))(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> add_2 = (<span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y)(<span class="number">2</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> add_3 = (<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>)(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>fn_x type, indicating that we can use function inside function, when function is passed as data, we can apply function to generate higher-order operations. And x = &gt; y = &gt; x (y) can be understood in two ways, one is that x = &gt; y function passes X = &gt; x (y), and the other is that x passes y = &gt; x (y).</p><p>add_x type indicates that an expression can be implemented in many different paths.</p><h3 id="Function-Programming-Fundamentals-Meta-Currying-and-Point-Free-of-Functions"><a href="#Function-Programming-Fundamentals-Meta-Currying-and-Point-Free-of-Functions" class="headerlink" title="Function Programming Fundamentals: Meta, Currying, and Point-Free of Functions"></a>Function Programming Fundamentals: Meta, Currying, and Point-Free of Functions</h3><p>Going back to JavaScript itself, we need to explore whether function itself can bring us more things. We have many ways to create functions in JavaScript:</p><p>You can use declarations, expressions, arrow functions, new Functions, etc</p><p>Although function has so many definitions, the function keyword declares functions with arguments and this keyword, which makes them look more like object methods than functions.</p><p>Moreover, most functions defined by functions can also be constructed (such as new Array).</p><p>Next we will only study the arrow function, because it is more like a function in the mathematical sense (only performing the calculation process).</p><ul><li>No arguments and this.</li><li>Cannot be constructed new.</li></ul><h4 id="Element-of-function"><a href="#Element-of-function" class="headerlink" title="Element of function"></a>Element of function</h4><p>Regardless of how a function is constructed, the function has two fixed pieces of information that can be obtained.</p><ul><li>name Represents the name of the function to which the current identifier points.</li><li>length Represents the length of the argument list when defining the function to which the current identifier points.</li></ul><p>Mathematically, we define f (x) = x as a unary function and f (x, y) = x + y as a binary function. In JavaScript we can define the element of a function by using its length when defined.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">one</span> = a =&gt; a;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">two</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">three</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br></pre></td></tr></table></figure><p>The significance of defining the meta of a function is that we can classify the function and specify the exact number of parameters a function needs. The meta of a function plays an important role both at compile time (type checking, overloading) and at runtime (exception handling, dynamically generated code).</p><p>If I give you a binary function, you know that you need to pass two parameters. For example, + can be seen as a binary function that takes one parameter on the left and one parameter on the right and returns their sum (or string concatenation).</p><p>In some other languages, + is indeed implemented by abstract classes, such as trait Add in the Rust language.</p><p>But in the λ calculus we saw above, each function has only one element. Why?</p><p>There is only one meta function that is convenient for us to perform algebraic operations. The parameter list of λ calculus is divided in the format of λx.λy.λz, and the return value is generally function. If a binary function is called with only one parameter, it returns an “incomplete call function”. Here, three examples are used to explain “incomplete call”.</p><h4 id="Curried-function-function-element-dimensionality-reduction-technology"><a href="#Curried-function-function-element-dimensionality-reduction-technology" class="headerlink" title="Curried function: function element dimensionality reduction technology"></a>Curried function: function element dimensionality reduction technology</h4><p>Currying a function is a technique for reducing the dimensionality of the elements of a function, a term in honor of the mathematician Alonzo Church we mentioned above.</p><p>Curried function helps us turn a multivariate function into an incomplete call, and use the magic of Closure to turn the function call into a delayed partial function (incomplete function call) call. This is very useful in scenarios such as function composition and to reuse</p><h4 id="Point-Free-No-argument-style-higher-order-combinations-of-functions"><a href="#Point-Free-No-argument-style-higher-order-combinations-of-functions" class="headerlink" title="Point-Free | No-argument style: higher-order combinations of functions"></a>Point-Free | No-argument style: higher-order combinations of functions</h4><p>There is a Point-Free style in function programming. In the Chinese context, point can probably be regarded as a parameter point, corresponding to the function application (Function Apply) in λ calculus, or the function call (Function Call) in JavaScript, so it can be understood that Point-Free refers to a call without parameters.</p><p>Let’s take a daily example of converting binary data to octal data.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strNums = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1110&#x27;</span>];</span><br><span class="line">strNums.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">2</span>)).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>This code runs fine, but in order to handle this transformation, we need to understand the two functions of parseInt (x, 2) and toString (8) (why there are magic numbers 2 and magic numbers 8), and care about the data (function type a - &gt; b) in the shape of each node (care about the flow of data). Is there a way to only care about imported parameters and exported parameters, not about the data flow process?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toBinary</span> = x =&gt; <span class="built_in">parseInt</span>(x,  <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> toString0x =&gt; <span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">...fns</span>) =&gt; <span class="function"><span class="params">x</span> =&gt;</span> fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> <span class="title function_">fn</span>(acc), x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strNums = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1110&#x27;</span>];</span><br><span class="line">strNums.<span class="title function_">map</span>(<span class="title function_">pipe</span>(toBinary, toString0x));</span><br></pre></td></tr></table></figure><h1 id="Functional-component"><a href="#Functional-component" class="headerlink" title="Functional component"></a>Functional component</h1><h2 id="What-is-a-function-component"><a href="#What-is-a-function-component" class="headerlink" title="What is a function component"></a>What is a function component</h2><p>Function-style components are functions are components, and components are functions. Its characteristics are that there is no internal state, no lifecycle hook function, and no this (components that do not need to be instantiated).</p><p>In daily development, we often develop some purely display business components, such as some details page, list interface, etc. They have a common feature:</p><p>As long as you pass in the data, I will display it.</p><p>There is no need for internal state and no need to process it in the lifecycle hook function.</p><p>At this point you can use functional components.</p><h2 id="Why-use-functional-components"><a href="#Why-use-functional-components" class="headerlink" title="Why use functional components?"></a>Why use functional components?</h2><p>Functional components do not require instantiation, are stateless, and have no lifecycle, so rendering performance is better than ordinary components</p><p>Functional component structure is simpler and code structure is clearer</p><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><ol><li><p>Functional components need to specify functional in the declaration component.</p></li><li><p>Function components do not need to be instantiated, so there is no this, this is replaced by the second parameter of the render function.</p></li><li><p>Functional components have no lifecycle hook function, cannot use calculated properties, watch, etc.</p></li><li><p>Function-style components cannot expose events externally through $emit, and calling events can only call external incoming events in a context.listeners.click way.</p></li><li><p>Because function components are not instantiated, when referencing components externally through ref, the actual reference is HTMLElement.</p></li><li><p>The props of a function component can be declared only in part or not at all. All properties not declared in the props will be automatically implicitly parsed as props, while all undeclared properties of ordinary components are parsed into $attrs and automatically mounted to the component root element (which can be disabled by the inheritAttrs attribute).</p></li></ol><p>It has been repeatedly emphasized above that any component that does not require instantiation, is stateless, has no lifecycle, and has no other configuration items except props can be rewritten as a function component.</p><h3 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h3><h4 id="Template-syntax"><a href="#Template-syntax" class="headerlink" title="Template syntax"></a>Template syntax</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">func</span> <span class="attr">text</span>=<span class="string">&quot;aaaaaaaa&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> func <span class="keyword">from</span> <span class="string">&#x27;@/components/func.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    func</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;props.text ? props.text : &#x27;哈哈&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Note that there is no &lt; script &gt;… &lt;/script &gt; section.</p></blockquote><h4 id="JSX-syntax"><a href="#JSX-syntax" class="headerlink" title="JSX syntax"></a>JSX syntax</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Rendering function</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">h</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span> &#123;<span class="type">*</span>&#125; context function component without this, props, slots, etc. all hang on the context</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h, context</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context);</span><br><span class="line">    <span class="keyword">const</span> &#123; props &#125; = context</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">text</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Return</span> &lt; p &gt; haha burp &lt;/p &gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p><a href="https://www.javascriptc.com/vue3js/guide/migration/functional-components.html#%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6">Vue3 函数式组件</a></p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p><a href="https://zh-hans.reactjs.org/docs/components-and-props.html">React 函数式组件</a></p><p>Reference article:</p><p><a href="https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html">https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html</a></p><p><a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html">https://www.ruanyifeng.com/blog/2012/04/functional_programming.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Function programming and function components are a trend in development now. They have been used in the past, but they have not been understood conceptually. This article summarizes the two together and makes a certain comparison.&lt;/p&gt;
&lt;p&gt;Function programming is a programming paradigm, and function components are a product of this paradigm.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript Design pattern learning and practice (2)</title>
    <link href="https://sunra.top/en/posts/2336/"/>
    <id>https://sunra.top/en/posts/2336/</id>
    <published>2022-11-28T01:40:55.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>We continue to summarize and learn JavaScript Design Patterns, this time we summarize two similar patterns in JavaScript point of view, that is, the proxy pattern, the strategy pattern.</p><p>The difference between these two patterns is obvious in non-functional programming languages such as Java, but they are relatively similar in JavaScript.</p><span id="more"></span><h2 id="Strategy-mode"><a href="#Strategy-mode" class="headerlink" title="Strategy mode"></a>Strategy mode</h2><h3 id="Strategy-mode-definition"><a href="#Strategy-mode-definition" class="headerlink" title="Strategy mode definition"></a>Strategy mode definition</h3><p>In program design, we often encounter this situation, to achieve a function there are a variety of options to choose from. For example, a compressed file program, you can choose the zip algorithm, you can also choose the gzip algorithm</p><p>These algorithms are flexible and can replace each other at will. This solution is the policy pattern.</p><p>The definition of the strategy pattern is: Define a series of algorithms, encapsulate them one by one, and make them interchangeable.</p><h3 id="Calculate-bonuses-using-strategy-mode"><a href="#Calculate-bonuses-using-strategy-mode" class="headerlink" title="Calculate bonuses using strategy mode"></a>Calculate bonuses using strategy mode</h3><p>For example, we now have a demand. The bonus at the end of the year is determined based on performance. Performance S is 4 months’ salary, 3 months for A, and 2 months for B</p><h4 id="Base-code"><a href="#Base-code" class="headerlink" title="Base code"></a>Base code</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculateBonus = <span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (performanceLevel = <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (performanceLevel = <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (performanceLevel = <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code is very simple, but there are also many shortcomings.</p><ul><li>The calculateBonus function is quite large and contains many if-else statements, which need to cover all branches</li><li>The calculateBonus function is inflexible, if we add a new performance grade C, or want to change the performance coefficient to 5, we must go deep into the internal implementation of the calculateBonus function, which violates the Open Closed Principle</li><li>The algorithm is poor to reuse, if the algorithm to reuse part of the bonus elsewhere in the program, only copy and paste</li></ul><h4 id="Refactor-code-using-strategy-patterns"><a href="#Refactor-code-using-strategy-patterns" class="headerlink" title="Refactor code using strategy patterns"></a>Refactor code using strategy patterns</h4><p>Separating the immutable from the changing is the theme of every design pattern, and the policy pattern is no exception. The purpose of the policy pattern is to separate the use of the algorithm from the implementation of the algorithm.</p><p>In our example, the way the algorithm is used is unchanged, and it is based on the calculated bonus amount obtained by a certain algorithm. The implementation of the algorithm varies, and different performance corresponds to different calculation rules</p><p>A program based on a policy pattern consists of at least two parts. The first part is a set of policy classes, which encapsulate specific algorithms and are responsible for the specific calculation process. The second part is the environment class Context, which accepts the client’s request and then delegates the request to a specific policy class. To do this, it is necessary to maintain a reference to a policy object in the Context.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performanceS = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceS.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span>(<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performanceA = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceA.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span>(<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceB.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span>(<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Bonus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setSalary</span> = <span class="keyword">function</span>(<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setStrategy</span> = <span class="keyword">function</span>(<span class="params">strategy</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getBonus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">strategy</span>.<span class="title function_">calculate</span>(<span class="variable language_">this</span>.<span class="property">salary</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When a client makes a request to a Context, the Context always delegates the request to one of these policy objects.</p><h4 id="Strategy-pattern-for-JavaScript-version"><a href="#Strategy-pattern-for-JavaScript-version" class="headerlink" title="Strategy pattern for JavaScript version"></a>Strategy pattern for JavaScript version</h4><p>We said at the beginning that functional programming in JavaScript makes some Design patterns different</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="keyword">function</span>(<span class="params">salary</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="keyword">function</span>(<span class="params">salary</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="keyword">function</span>(<span class="params">salary</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="keyword">function</span> (<span class="params">level, salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Proxy-mode"><a href="#Proxy-mode" class="headerlink" title="Proxy mode"></a>Proxy mode</h2><h3 id="Proxy-mode-definition"><a href="#Proxy-mode-definition" class="headerlink" title="Proxy mode definition"></a>Proxy mode definition</h3><p>The proxy pattern is to provide a substitute or placeholder for an object in order to control access to it.</p><p>The key to the proxy pattern is that when the client is inconvenient to directly access an object or does not meet the needs, an object is provided to control access to the object, and the client actually accesses the substitute object. After the substitute object does some processing on the request, it forwards the request to the object itself.</p><p>When the strategy pattern has only one strategy, the proxy pattern and the strategy pattern look similar. The main difference is that the proxy pattern is to proxy access to the target object, while the strategy pattern is to execute different strategies.</p><h3 id="Use-proxy-mode-to-send-flowers"><a href="#Use-proxy-mode-to-send-flowers" class="headerlink" title="Use proxy mode to send flowers"></a>Use proxy mode to send flowers</h3><p>Suppose Xiaoming wants to send flowers to A, we use code to simulate this process.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Flower</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">sendFlower</span>: <span class="keyword">function</span>(<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> <span class="title class_">Flower</span>();</span><br><span class="line">        target.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    <span class="attr">reveiveFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>) &#123;</span><br><span class="line">        <span class="title class_">Consoloe</span>.<span class="property">log</span> (<span class="string">&#x27;Received $&#123;flower&#125;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="title function_">sendFlower</span>(A);</span><br></pre></td></tr></table></figure><p>If we introduce B to help us send flowers, it is the proxy mode</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Flower</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">sendFlower</span>: <span class="keyword">function</span>(<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> <span class="title class_">Flower</span>();</span><br><span class="line">        target.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    <span class="attr">reveiveFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>) &#123;</span><br><span class="line">        A.<span class="title function_">receiveFlower</span>(flower)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    <span class="attr">reveiveFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>) &#123;</span><br><span class="line">        <span class="title class_">Consoloe</span>.<span class="property">log</span> (<span class="string">&#x27;Received $&#123;flower&#125;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="title function_">sendFlower</span>(B);</span><br></pre></td></tr></table></figure><p>However, this piece of code seems to have no practical use other than going around in a circle.</p><p>Of course, that’s true, but if we add a requirement that we need A to send flowers when he’s in a good mood, and only B knows when A is in a good mood, this proxy model is useful</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Flower</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">sendFlower</span>: <span class="keyword">function</span>(<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> <span class="title class_">Flower</span>();</span><br><span class="line">        target.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    <span class="attr">reveiveFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>) &#123;</span><br><span class="line">        A.<span class="title function_">listenGoodMoon</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            A.<span class="title function_">receiveFlower</span>(flower)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    <span class="attr">reveiveFlower</span>: <span class="keyword">function</span>(<span class="params">flower</span>) &#123;</span><br><span class="line">        <span class="title class_">Consoloe</span>.<span class="property">log</span> (<span class="string">&#x27;Received $&#123;flower&#125;&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">listenGoodMood</span>: <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="title function_">sendFlower</span>(B);</span><br></pre></td></tr></table></figure><h3 id="Protection-agents-and-virtual-agents"><a href="#Protection-agents-and-virtual-agents" class="headerlink" title="Protection agents and virtual agents"></a>Protection agents and virtual agents</h3><p>Although the above example is simple, we can see the shadow of two kinds of proxies. Proxy B can help proxy A filter some requests, which is called protection proxy.</p><p>And if new Flower is a relatively expensive operation, we can give the operation of new Flower to B to do it, thereby saving the cost. This is called a virtual agent.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    <span class="attr">reveiveFlower</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        A.<span class="title function_">listenGoodMoon</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> flower = <span class="keyword">new</span> <span class="title class_">Flower</span>();</span><br><span class="line">            A.<span class="title function_">receiveFlower</span>(flower);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Virtual-agent-implements-image-preloading"><a href="#Virtual-agent-implements-image-preloading" class="headerlink" title="Virtual agent implements image preloading"></a>Virtual agent implements image preloading</h3><p>In web development, if you set the src attribute to an img tag node, if the picture is too large or the network is poor, the position of the picture is often blank for a period of time.</p><p>Common practice is to use a loading image placeholder, and then asynchronously to load the image, the image is loaded and then filled into the img.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = &#123;</span><br><span class="line">    <span class="attr">setSrc</span>: <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> imageNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imageNode);</span><br><span class="line">        imageNode.<span class="property">src</span> = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        myImage.<span class="title function_">setSrc</span>(<span class="variable language_">this</span>.<span class="property">src</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">setSrc</span>: <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">            myImage.<span class="title function_">setSrc</span>(<span class="string">&#x27;file://loading.png&#x27;</span>);</span><br><span class="line">            img.<span class="property">src</span> = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">proxyImage.<span class="title function_">setSrc</span>(<span class="string">&#x27;http://imgcache.com/music/aaa.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Significance-of-the-Agent-Model"><a href="#Significance-of-the-Agent-Model" class="headerlink" title="Significance of the Agent Model"></a>Significance of the Agent Model</h3><p>We may wonder, but it is to implement a preloaded function, even if you do not need to introduce any mode, you can do it, so what are the benefits of introducing proxy mode? Let’s take a look at not using proxy mode to do image preloading</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyImage</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> imageNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imageNode);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        imageNode.<span class="title function_">setSrc</span>(<span class="variable language_">this</span>.<span class="property">src</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">setSrc</span>: <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">            imageNode.<span class="property">src</span> = <span class="string">&#x27;file://loading.png&#x27;</span>;</span><br><span class="line">            img.<span class="property">src</span> = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>In order to illustrate the meaning of the agency pattern, we introduce an Object Oriented design principle - the Single Responsibility Principle.</p><p>The Single Responsibility Principle states that for a class (which usually also includes objects and functions), there should be only one reason for it to change. If an object has multiple responsibilities, it means that the object will become huge, and there can be multiple reasons for it to change.</p><p>Object Oriented design encourages the distribution of behavior among fine grained objects. If an object takes on too many responsibilities, it is equivalent to coupling these responsibilities together. This coupling can lead to fragile and low-cohesion designs. When changes occur, the design may be accidentally broken.</p><p>Responsibility is defined as “the reason for the change”. The MyImage object in the previous code is responsible for preloading images in addition to setting src for the img node. When we deal with one of the responsibilities, it may affect the implementation of the other responsibility because of its strong coupling.</p><h3 id="Consistency-of-proxy-and-ontology-interfaces"><a href="#Consistency-of-proxy-and-ontology-interfaces" class="headerlink" title="Consistency of proxy and ontology interfaces"></a>Consistency of proxy and ontology interfaces</h3><p>If one day we no longer need preloading, then we no longer need proxy objects and can choose to directly request the ontology. The key is that both the proxy object and the ontology provide the setSrc method to the outside world. In the customer’s view, the proxy object and the ontology are consistent, and the process of receiving requests by the proxy is transparent to the user.</p><p>In languages such as Java, both proxies and ontologies need to explicitly implement the same interface. On the one hand, the interface ensures that they have the same method. On the other hand, interface-oriented programming caters to the Dependence Inversion Principle principle and transforms upward through the interface.</p><p>It is worth mentioning that if both the proxy body and the object are a function, the function must be executed, and they can be considered to have a consistent interface.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> imageNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imageNode);</span><br><span class="line">    imageNode.<span class="property">src</span> = src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        myImage.<span class="title function_">setSrc</span>(<span class="variable language_">this</span>.<span class="property">src</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">        myImage.<span class="title function_">setSrc</span>(<span class="string">&#x27;file://loading.png&#x27;</span>);</span><br><span class="line">        img.<span class="property">src</span> = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="title function_">proxyImage</span>(<span class="string">&#x27;http://imgcache.com/music/aaa.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Other-proxy-modes"><a href="#Other-proxy-modes" class="headerlink" title="Other proxy modes"></a>Other proxy modes</h3><p>In fact, we usually use a lot of proxy mode development, such as our commonly used anti-shake and throttling, in fact, is a proxy, will be a number of requests into a processing.</p><p>Another example is our cache and buffer proxy, our direct access to the database into access to the buffer, if the buffer is not, then the buffer to the database query.</p><p>Another example is the message queue we usually use, which can also be an idea of the proxy pattern.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;We continue to summarize and learn JavaScript Design Patterns, this time we summarize two similar patterns in JavaScript point of view, that is, the proxy pattern, the strategy pattern.&lt;/p&gt;
&lt;p&gt;The difference between these two patterns is obvious in non-functional programming languages such as Java, but they are relatively similar in JavaScript.&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/en/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Design pattern learning and practice (1)</title>
    <link href="https://sunra.top/en/posts/39258/"/>
    <id>https://sunra.top/en/posts/39258/</id>
    <published>2022-11-19T06:24:48.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>With the knowledge of JS and the actual development needs, the heart for re-reading Design pattern feeling more and more deep, so I picked up the “JavaScrip Design pattern and development practice” a book, and combined with the “Design pattern” part of the content, first make a summary, and first talk about the singleton pattern, the rest of the follow-up slowly.</p><p>First of all, I would like to raise a few questions, which are also my summary gains this time:</p><ul><li>Is JavaScript Object Oriented or Process Oriented?</li><li>Is the function a first-class citizen Object Oriented or Process Oriented?</li></ul><p>Then throw out one of my biggest gains from Design pattern this time, that is, all Design patterns are actually identifying the invariant parts and variable parts of the code, encapsulating them separately, and then combining the two. To accurately identify this, not only do you need deep code capabilities, but you also need to truly understand business practices.</p><p>For example, in the strategy pattern, each strategy is a volatile part, while the call to the policy is an invariant part. In the proxy pattern, the operations of the proxied are immutable, while the proxy itself is volatile.</p><p>In fact, the emergence of Design patterns is to some extent to make up for the shortcomings of the language. For example, the prototype pattern is a Design pattern, but JavaScript itself supports this pattern through the prototype chain.</p><span id="more"></span><h2 id="Is-JavaScript-Object-Oriented-or-Process-Oriented"><a href="#Is-JavaScript-Object-Oriented-or-Process-Oriented" class="headerlink" title="Is JavaScript Object Oriented or Process Oriented?"></a>Is JavaScript Object Oriented or Process Oriented?</h2><p>First of all, in the recent related learning, I gradually understand some of the concepts that were confused in the past, such as JavaScript is Object Oriented and Process Oriented?</p><p>Object Oriented Programming is to establish the connection and cooperation mode between classes. Procedural Programming is to establish one process after another, and each process deals with one or several classes. For example, process-oriented programming is like constructing a process. Teach a child language, and then construct a process to teach him math. Object Oriented is to establish the relationship between children and language and mathematics</p><p>In fact, there is no strict official definition of procedural programming and procedural programming languages. The best way to understand these two concepts is to compare them with Object Oriented Programming and Object Oriented Programming Languages. In contrast to Object Oriented Programming, which uses classes as the basic unit of organizing code, procedural programming uses procedures (or methods) as the basic unit of organizing code. Its main feature is the separation of data and methods. Compared with Object Oriented programming languages, the biggest feature of procedural programming languages is that they do not support rich Object Oriented programming features, such as inheritance, polymorphism, and encapsulation.</p><p>That is to say, theoretically providing inheritance, polymorphism, and encapsulation languages can be considered Object Oriented languages, so is JavaScript an Object Oriented language?</p><p>The author personally believes that JavaScript is an Object Oriented language, but its inheritance is not through the form of classes, but through the prototype chain. Although ES6 also implements the syntax of classes, it is essentially through the prototype chain. way **.</p><p>First of all, inheritance, what is the difference between inheritance through class and prototype chain? <strong> The way through class is an is-a relationship, that is to say, the subclass is a kind of parent class, and prototype chain inheritance is a bit similar to interface (has-a), or a bit like duck type, that is, I need a variable now, I am more concerned about whether it has the say method, not whether he is an instance of Duck, even if he is an instance of Chicken, he has the say method, that is what I want </strong>.</p><p>The essence of prototype chain inheritance is the delegation mechanism of prototype chain. To get an object, instead of instantiating a class, find an object as a prototype and clone it. The object will delegate the request to the prototype of its constructor. For example, JavaScript provides the way Object.create **</p><p>Interface-oriented programming is the most important idea in Design Pattern, but in JavaScript, because it is inherited based on the prototype chain, it inherently implies the idea of interface-oriented programming. Interface-oriented programming is different from mainstream languages and is simpler.</p><p>Let’s talk about polymorphism. Polymorphism means that a unified operation acts on different objects, which can produce different interpretations and different execution results. In other words, when sending the same message to different objects, these objects will give different feedback based on the message.</p><p>The idea behind polymorphism is to separate “what to do” from “who does it and how to do it”, that is, to separate “food that doesn’t change” from “things that can change”. Separating the two, encapsulating them separately, gives us the ability to extend programs, and programs seem to grow, which is also consistent with the Open Closed Principle.</p><p>Using inheritance to achieve polymorphism is one of the most common ways to make objects exhibit polymorphism. Inheritance is divided into implementation inheritance and interface inheritance. The former is based on parent-child classes, and the latter is through interfaces.</p><p>The essence of polymorphism is to separate what to do and who to do it. To achieve this, we need to eliminate the coupling between types first. In Java, we need to achieve it through upward transformation, while in JavaScript, variable types are variable at runtime. An object can be either a Duck type or a Chicken type. What I need is that it says this method, which means <strong> In JavaScript, object polymorphism is innate </strong>.</p><p>The fundamental benefit of polymorphism is that you no longer have to ask the object “what type are you” and then call a certain behavior of the object based on the answer, you just call it, and all other polymorphism mechanisms will be arranged for you. In other words, the most fundamental role of polymorphism is to eliminate procedural conditional branching statements by converting them into object polymorphism.</p><h2 id="What-is-function-programming"><a href="#What-is-function-programming" class="headerlink" title="What is function programming"></a>What is function programming</h2><p>In function programming, a function is a first-class object or first-class function, which means that a function can either be used as an input parameter value for other functions, or return a value from a function, be modified, or be assigned to a variable. The lambda calculus is the most important foundation of this paradigm. The function of lambda calculus can accept function as an input parameter and output return value.</p><p>Compared with imperative programming, function programming emphasizes the result of program execution rather than the process of execution. It advocates the use of several simple execution units to make the calculation results gradually and derive complex operations layer by layer, rather than designing a complex execution process.</p><p>Therefore, whether it is function-oriented programming does not affect whether it is Object Oriented or process-oriented, but function-oriented programming will have an impact on the code when we specifically implement some Design patterns, that is to say, Design pattern is a kind of Ideological level, combined with specific language implementations, and function programming language function can be used as imported parameter and exported parameter, which will have an impact on JavaScript implementation of Design pattern.</p><h2 id="Singleton-mode"><a href="#Singleton-mode" class="headerlink" title="Singleton mode"></a>Singleton mode</h2><p>Let’s first introduce the definition of the singleton pattern: ensuring that a class has only one instance and providing a global access point to access it</p><h3 id="Implement-singleton-pattern"><a href="#Implement-singleton-pattern" class="headerlink" title="Implement singleton pattern"></a>Implement singleton pattern</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Singleton</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property">getInstance</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;sun1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;sun2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(a = b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>We use Singleton.getInstance to get the unique object of the class. This method is relatively simple, but there is a problem. We increase the uncertainty of this class. The user of the Singleton class must know that this is a singleton class, and pass It is different from the previous new XXX way to get the object</p><h3 id="Transparent-singleton-pattern"><a href="#Transparent-singleton-pattern" class="headerlink" title="Transparent singleton pattern"></a>Transparent singleton pattern</h3><p>Our goal now is to implement a transparent singleton class from which users can create objects just like any other ordinary class.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CreateDiv</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">CreateDiv</span> = <span class="keyword">function</span>(<span class="params">html</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">html</span> = html;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">        <span class="keyword">return</span> instance = <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">CreateDiv</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">html</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CreateDiv</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(a = b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>To encapsulate the instance, we use a self-executing anonymous function and closure, and make this anonymous function return the constructor of the real Singleton, which adds some complexity to the program and is not very comfortable to read.</p><p>And we observe the constructor function of Singleton:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CreateDiv</span> = <span class="keyword">function</span>(<span class="params">html</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = html;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this code, the constructor function of CreateDiv is actually responsible for two things, the first is to create an object and execute the initialization init method, and the second is to ensure that there is only one object, <strong> which does not comply with the Single Responsibility Principle </strong>.</p><p>Suppose one day we want to use this class to create thousands of divs in the page, that is, to make this class a normal class, we must rewrite the constructor of CreateDiv to remove the code that creates a unique object, which violates the Open Closed Principle.</p><h3 id="Singleton-pattern-implemented-through-proxy"><a href="#Singleton-pattern-implemented-through-proxy" class="headerlink" title="Singleton pattern implemented through proxy"></a>Singleton pattern implemented through proxy</h3><p>Now we solve the above problem by introducing a proxy. First, we remove the code responsible for managing the singleton from the constructor function of CreateDiv and make it a normal class.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CreateDiv</span> = <span class="keyword">function</span>(<span class="params">html</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = html;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CreateDiv</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">html</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we introduce the proxy class, proxySingletonCreateDiv</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxySingletonCreateDiv = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">html</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(html);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">proxySingletonCreateDiv</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">proxySingletonCreateDiv</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(a = b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Singleton-pattern-in-JavaScript"><a href="#Singleton-pattern-in-JavaScript" class="headerlink" title="Singleton pattern in JavaScript"></a>Singleton pattern in JavaScript</h3><p>The implementation of the singleton pattern above is more close to the implementation in traditional Object Oriented languages, where singleton objects are created from “classes”. In class-centric languages, this is a natural approach. For example, in Java, if you need an object, you must first define a class, and the object always comes from the class.</p><p>JavaScript is actually a classless language, which is why the concept of the singleton pattern does not make sense. Creating objects in JavaScript is very simple. Since we need a unique object, why should we create a class for it in the first place? This is superfluous.</p><p>Remember, the core of the singleton pattern is to ensure that there is only one instance and provide global access.</p><p>Global variables are not singleton mode, but in JavaScript, we often use global variables to implement singleton mode.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>This a is a singleton that satisfies only one instance, and if it is declared in the global scope, it can be accessed globally.</p><p>But there are many problems with global variables, such as causing namespace pollution, in large and medium-sized projects, if poor management, there may be many such variables in the program, as ordinary developers, we should try to reduce the use of global variables, even if we want to Use, but also try to reduce its impact.</p><p>We can use the following ways to reduce the naming pollution caused by global variables:</p><p><strong> 1. Use namespaces </strong></p><p>Proper use of namespaces will not eliminate global variables, but it can reduce the number of global variables. The simplest way is still to use object literals.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> 2. Encapsulate private variables with closures </strong></p><p>This method encapsulates some variables inside the closure, only exposing some interfaces to communicate with the outside world.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> __name = <span class="string">&#x27;sun&#x27;</span>,</span><br><span class="line">        __age = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getUserInfo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> __name + <span class="string">&#x27;-&#x27;</span> + __age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="Inert-singleton"><a href="#Inert-singleton" class="headerlink" title="Inert singleton"></a>Inert singleton</h3><p>Earlier, we learned about some implementations of the singleton pattern. In this section, we will learn about lazy singletons.</p><p>Lazy singletons refer to creating instances of objects only when needed. Lazy singletons are the focus of the singleton pattern, and this technique is very useful in development.</p><p>In fact, this is how we used Singleton.getInstance at the beginning</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Singleton</span>.<span class="property">getInstance</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>However, this is a class-based singleton pattern. As mentioned earlier, the “class” -based singleton pattern does not apply in JavaScript</p><p>Let’s imagine a scenario, click the login button and then create a globally unique login float window</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &lt; button id = &quot;loginBtn&quot; &gt; Login &lt;/button &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> createLoginLayer = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!div) &#123;</span></span><br><span class="line"><span class="language-javascript">                div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">innerHTML</span> = <span class="string">&quot;Landing Floating Window&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> div;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loginBtn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> loginLayer = <span class="title function_">createLoginLayer</span>();</span></span><br><span class="line"><span class="language-javascript">        loginLayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Generic-lazy-singleton"><a href="#Generic-lazy-singleton" class="headerlink" title="Generic lazy singleton"></a>Generic lazy singleton</h3><p>In the previous section, we completed a working lazy singleton, but we found the following problems:</p><ul><li>This code still violates the Single Responsibility Principle, and the logic for creating objects and managing singletons is placed inside the createLoginLayer object</li><li>If we need to create a unique iframe or script in the page next time, then we must almost copy the createLoginLayer function</li></ul><p>We need to isolate the invariant part. Regardless of how much difference there is between creating a div and iframe, the logic of managing singletons can be extracted. This logic is always consistent. Use an object flag to indicate whether an object has been created. If so, return the created object directly next time:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">    obj = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We will now extract the logic for managing singletons from the original code. These logic are encapsulated inside the getSingle function, and the creation method fn is dynamically passed into getSingle as a parameter.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we can say that the method used to create the login floating window passes getSingle in the form of parameter fn. We can not only pass createLoginLayer, but also pass createScipt, etc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="string">&quot;Landing Floating Window&quot;</span>;</span><br><span class="line">    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = <span class="title function_">getSingle</span>(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loginBtn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = <span class="title function_">createSingleLoginLayer</span>();</span><br><span class="line">    loginLayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this way, we put the responsibility of creating instance objects and the responsibility of managing singletons in two method cases, which can change independently without affecting each other, and together complete the creation of singletons.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;With the knowledge of JS and the actual development needs, the heart for re-reading Design pattern feeling more and more deep, so I picked up the “JavaScrip Design pattern and development practice” a book, and combined with the “Design pattern” part of the content, first make a summary, and first talk about the singleton pattern, the rest of the follow-up slowly.&lt;/p&gt;
&lt;p&gt;First of all, I would like to raise a few questions, which are also my summary gains this time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is JavaScript Object Oriented or Process Oriented?&lt;/li&gt;
&lt;li&gt;Is the function a first-class citizen Object Oriented or Process Oriented?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then throw out one of my biggest gains from Design pattern this time, that is, all Design patterns are actually identifying the invariant parts and variable parts of the code, encapsulating them separately, and then combining the two. To accurately identify this, not only do you need deep code capabilities, but you also need to truly understand business practices.&lt;/p&gt;
&lt;p&gt;For example, in the strategy pattern, each strategy is a volatile part, while the call to the policy is an invariant part. In the proxy pattern, the operations of the proxied are immutable, while the proxy itself is volatile.&lt;/p&gt;
&lt;p&gt;In fact, the emergence of Design patterns is to some extent to make up for the shortcomings of the language. For example, the prototype pattern is a Design pattern, but JavaScript itself supports this pattern through the prototype chain.&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/en/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Difference between Set, Map and Object in JavaScript</title>
    <link href="https://sunra.top/en/posts/10746/"/>
    <id>https://sunra.top/en/posts/10746/</id>
    <published>2022-11-11T10:21:47.000Z</published>
    <updated>2023-06-12T13:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, in reading the computer foundation section of “Web Efficient Programming and Practice Optimization”, I saw that he talked about the difference between Set and Map in JS, and the implementation of Object, which solved the usual doubts. Here is a brief summary:</p><span id="more"></span><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Sets are generally implemented using Red-Black Tree, which is a balanced lookup binary tree with a lookup time complexity of O (logN). In fact, the Set Chrome V8 is implemented with a hash, which is a hash Set</p><p>Suppose we have a piece of code like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(); </span><br><span class="line"><span class="comment">//The data is 20 numbers </span></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">3</span>, <span class="number">62</span>, <span class="number">38</span>, <span class="number">42</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">63</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">59</span>, <span class="number">49</span>, <span class="number">29</span>]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)&#123; </span><br><span class="line">    set.<span class="title function_">add</span>(data[i]); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>A key part of hashing is the hash algorithm, which hashes a bunch of numbers or strings to get their random values</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ComputeIntegerHash</span>(<span class="params">key, seed</span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> hash = key; </span><br><span class="line">    hash = hash ^ seed; <span class="comment">//seed = 505553720 </span></span><br><span class="line">    hash = ~hash + (hash &lt;&lt; <span class="number">15</span>); <span class="comment">// hash = (hash &lt;&lt; 15) - hash - 1; </span></span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">12</span>); </span><br><span class="line">    hash = hash + (hash &lt;&lt; <span class="number">2</span>); </span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">4</span>); </span><br><span class="line">    hash = (hash * <span class="number">2057</span>) | <span class="number">0</span>; <span class="comment">// hash = (hash + (hash &lt;&lt; 3)) + (hash &lt;&lt; 11); </span></span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">16</span>); </span><br><span class="line">    <span class="keyword">return</span> hash &amp; <span class="number">0x3fffffff</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Do various bit operations on the number to get a relatively random number, and then scatter the number. The purpose of scattering is to get which index of the array the number is placed in.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> capacity = <span class="number">64</span>; </span><br><span class="line"><span class="keyword">var</span> indexes = []; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)&#123; </span><br><span class="line">    indexes.<span class="title function_">push</span>(<span class="title class_">ComputeIntegerHash</span>(data[i], seed)  &amp; (capacity - <span class="number">1</span>)); <span class="comment">//去掉高位 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(indexes) </span><br></pre></td></tr></table></figure><p>There are 20 numbers, and the capacity starts to increase from 16, and doubles each time. When it reaches 64, it can ensure that capacity &gt; size <em> 2, because <em>* the repeated value of the scattering result can only be compared when the capacity is twice the actual storage size. Low </em></em>.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668209218/origin-of-ray/f530bc8e-4ea0-4fed-8cd3-c849a672889f_lts2tw.png" alt=""></p><p>Now to find if key = 56 exists in this Set, first hash 56, and then scatter, according to the same process when storing</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SetHas</span>(<span class="params">key</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> index = <span class="title class_">ComputeIntegerHash</span>(<span class="number">56</span>, seed) &amp; <span class="variable language_">this</span>.<span class="property">capacity</span>; </span><br><span class="line">    <span class="comment">//There may be duplicate values, so it is necessary to verify that the keys stored in the hit index are equal </span></span><br><span class="line">    <span class="keyword">return</span> setArray[index] ! <span class="literal">null</span>  &amp;&amp; setArray[index] = key; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>The above is a typical implementation of a hash storage structure, but Chrome V8’s Set/Map is not implemented in this way, slightly different. </p><p>The hash algorithm is the same, but the scattering is not used to remove the high bit capacity, but with half of the capacity, called the number of buckets, this is to remove the high bit by hash value and capacity to do a bit and operation, the effect is equivalent to the remainder.</p><h3 id="Insertion-process"><a href="#Insertion-process" class="headerlink" title="Insertion process"></a>Insertion process</h3><p>Suppose we insert 9, 33, 68, 57 in order.</p><p>The storage structure of Set is divided into three parts. The first part has three elements, which represent the number of valid elements, the number of deleted elements, and the number of buckets. The addition of the first two numbers represents the total number of elements.</p><p>After inserting 9, the number of elements plus 1 becomes 1, and the number of buckets initialized is 2.</p><p>The second part corresponds to buckets. Buckets [0] represents the index of the original data source stored in the first bucket. The source code is called entry. 9 is in the data array, and the index is 0, so its storage value in the bucket is 0, and the scattering value of the bucket is 0, so bucket [0] = 0.</p><p>The third part is the space to record the key value. The entry of 9 is 0, so it is placed in the position of 3 + buckets.length + entry * 2 = 5. Each key value has two element spaces. The first one stores the key value., the second is keyChain, its role will be mentioned below</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668344952/origin-of-ray/fe04589b-3119-4dab-a323-0d42b44c1576_oecgin.png" alt=""></p><p>After inserting 33</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345195/origin-of-ray/67b65186-fc61-4c38-8ca4-a32ecc812813_ykt8dm.png" alt=""></p><p>Insert 68, the bucket value of 68 is also 1, and 33 is repeated, because entry = buckets [1] = 1, not empty, indicating that it has been stored before, the position of the array pointed to by entry is 1 is 3 + buckets.length + entry * 2 = 7, that is to say, the previous number is placed in the position of array 7, so the adjacent element of 68 stores the value keyChain as 7, and the entry of bucket [1] becomes 68 is 2</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345886/origin-of-ray/2cc66895-f27b-4c7a-93bd-6cb29c3764a0_wsksby.png" alt=""></p><p>Insert 57</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345953/origin-of-ray/d4f21b37-df29-497a-b109-f04af2790a75_ib658e.png" alt=""></p><h3 id="Search-process"><a href="#Search-process" class="headerlink" title="Search process"></a>Search process</h3><p>Now to find the number 33, through the same hash scattering, get bucket = 1 of 33, bucket [1] = 3, the index position pointed to by 3 is 11, but 11 is 57, not the 33 to be found, so check The adjacent elements are 9, which is non-empty, and you can continue to search. The position 9 stores 68, which is also not equal to 33, while the adjacent index = 10 points to the position 7, and 7 stores 33. By comparing the key values Equal, so there is a number 33 in this Set</p><p>Here are some highlights to note:</p><ul><li><p>The data here is a total of 4 numbers, but there are many times to compare. The key value is compared 3 times, and the adjacent keyChain value of the key value is compared 2 times, a total of 5 times, which is more than the direct for loop. Therefore, when the amount of data is relatively small, the use of hash storage speed is slower and slower, but when the amount of data is too large, the advantage will be more obvious</p></li><li><p>Another problem is that once the capacity is not enough, it will trigger expansion, and all the above hash calculation processes will be repeated.</p></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>It is basically the same as Set. The difference is that map has more places to store values.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668346080/origin-of-ray/f342d1e1-b53d-4772-bbc4-d7afee416f53_yq0evb.png" alt=""></p><p>Of course, it does not directly store the string “hello”, but stores the pointer address of hello, pointing to the memory location where hello is actually stored.</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>You can refer to this blog: <a href="https://sunra.top/posts/37711/">https://sunra.top/posts/37711/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, in reading the computer foundation section of “Web Efficient Programming and Practice Optimization”, I saw that he talked about the difference between Set and Map in JS, and the implementation of Object, which solved the usual doubts. Here is a brief summary:&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/en/categories/JavaScript/"/>
    
    
  </entry>
  
</feed>
