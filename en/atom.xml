<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>Lift the fog of the Internet together</subtitle>
  <link href="https://sunra.top/en/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/en/"/>
  <updated>2023-06-12T00:06:43.942Z</updated>
  <id>https://sunra.top/en/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fetch-event-source source code parsing</title>
    <link href="https://sunra.top/en/posts/8b781825/"/>
    <id>https://sunra.top/en/posts/8b781825/</id>
    <published>2023-04-15T05:12:13.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>We all know that the interface of ChatGPT supports data return by streaming SSE, and the front-end browser provides EventSource by default to receive SSE, but the problem is that the default EventSource only supports Get requests, and does not support any custom headers. The interface of ChatGPT is a POST request, and it is necessary to carry a token in the header, so a Microsoft library is used. Let’s explain its usage, source code, and the basis for its source code to run from a protocol perspective, that is, why its source code can work</p><span id="more"></span><h1 id="Method-of-use"><a href="#Method-of-use" class="headerlink" title="Method of use"></a>Method of use</h1><p>A library using Microsoft Azure fetch-event-sourcec<br>GitHub Address <a href="https://github.com/Azure/fetch-event-source">https://github.com/Azure/fetch-event-source</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装命令</span> </span><br><span class="line">npm install --save @microsoft/fetch-event-sourcec</span><br></pre></td></tr></table></figure><p>Here is the sample code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test frontend SSE call</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchEventSource &#125; <span class="keyword">from</span> <span class="string">&#x27;@microsoft/fetch-event-source&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">testSSE</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_API_KEY</span> = <span class="string">&#x27;YOUR_OPENAI_API_KEY&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_COMPLETION_ENDPOINT</span> = <span class="string">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> requestData = &#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class="line">    <span class="attr">messages</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="title class_">Content</span>: <span class="string">&#x27;I want to travel to Xi&#x27;</span>an <span class="keyword">for</span> <span class="number">7</span> days<span class="string">&#x27;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    stream: true</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  let respString = &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">  fetchEventSource(OPENAI_COMPLETION_ENDPOINT, &#123;</span></span><br><span class="line"><span class="string">    method: &#x27;</span><span class="variable constant_">POST</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    headers: &#123;</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="title class_">Content</span>-<span class="title class_">Type</span><span class="string">&#x27;: &#x27;</span>application/json<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="title class_">Authorization</span><span class="string">&#x27;: `Bearer $&#123;OPENAI_API_KEY&#125;`,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    body: JSON.stringify(requestData),</span></span><br><span class="line"><span class="string">    async onopen(response) &#123;</span></span><br><span class="line"><span class="string">      if (response.ok &amp;&amp; response.headers.get(&#x27;</span>content-type<span class="string">&#x27;) = &#x27;</span>text/event-stream<span class="string">&#x27;) &#123;</span></span><br><span class="line"><span class="string">        // everything&#x27;</span>s good</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;everything\&#x27;s good&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">400</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">500</span> &amp;&amp; response.<span class="property">status</span> ! <span class="number">429</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Request error&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Other errors&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onmessage</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">//indicates the end of the whole</span></span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">data</span> = <span class="string">&#x27;[DONE]&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>)</span><br><span class="line">      <span class="comment">//if equal to stop means end</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">finish_reason</span> = <span class="string">&#x27;stop&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//Determine if the role exists and exclude it.</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> ! <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString = jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> + <span class="string">&#x27;: &#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span> ! <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString += jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(respString)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onerror</span>(<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onclose</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// if the server closes the connection unexpectedly, retry:</span></span><br><span class="line">      <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Close connection&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Test SSE&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Source-code-parsing"><a href="#Source-code-parsing" class="headerlink" title="Source code parsing"></a>Source code parsing</h1><p>Its source code is not much, mainly two problems, one is parse.js, one is fetch.js</p><p>Parse.js is a tool function, let’s take a look at what it does</p><p>First, a few internal functions</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a message sent in an event stream</span></span><br><span class="line"><span class="comment"> * https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">/** The event ID to set the EventSource object&#x27;s last event ID value. */</span></span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** A string identifying the type of event described. */</span></span><br><span class="line">    <span class="attr">event</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The event data */</span></span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The reconnection interval (in milliseconds) to wait before retrying the connection */</span></span><br><span class="line">    retry?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">concat</span>(<span class="params">a: <span class="built_in">Uint8Array</span>, b: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(a.<span class="property">length</span> + b.<span class="property">length</span>);</span><br><span class="line">    res.<span class="title function_">set</span>(a);</span><br><span class="line">    res.<span class="title function_">set</span>(b, a.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newMessage</span>(<span class="params"></span>): <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">// data, event, and id must be initialized to empty strings:</span></span><br><span class="line">    <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">    <span class="comment">// retry should be initialized to undefined so we return a consistent shape</span></span><br><span class="line">    <span class="comment">// to the js engine all the time: https://mathiasbynens.be/notes/shapes-ics#takeaways</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">retry</span>: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ControlChars</span> &#123;</span><br><span class="line">    <span class="title class_">NewLine</span> = <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">CarriageReturn</span> = <span class="number">13</span>,</span><br><span class="line">    <span class="title class_">Space</span> = <span class="number">32</span>,</span><br><span class="line">    <span class="title class_">Colon</span> = <span class="number">58</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then there are several exposed functions, which we will use later in fetch.</p><p>The three functions cooperate with each other. getBytes is responsible for converting readablestream into bytes chunk, and getLines converts byte chunk into eventsource buffer, which is then converted by getMessage into data of type EventSourceMessage</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a ReadableStream into a callback pattern.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stream The input ReadableStream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onChunk A function that will be called on each new byte chunk in the stream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;void&gt;</span>&#125; A promise that will be resolved when the stream closes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBytes</span>(<span class="params">stream: ReadableStream&lt;<span class="built_in">Uint8Array</span>&gt;, onChunk: (arr: <span class="built_in">Uint8Array</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = stream.<span class="title function_">getReader</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">ReadableStreamDefaultReadResult</span>&lt;<span class="title class_">Uint8Array</span>&gt;;</span><br><span class="line">    <span class="keyword">while</span> (!(result = <span class="keyword">await</span> reader.<span class="title function_">read</span>()).<span class="property">done</span>) &#123;</span><br><span class="line">        <span class="title function_">onChunk</span>(result.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses arbitary byte chunks into EventSource line buffers.</span></span><br><span class="line"><span class="comment"> * Each line should be of the format &quot;field: value&quot; and ends with \r, \n, or \r\n. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onLine A function that will be called on each new EventSource line.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming byte chunk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getLines</span>(<span class="params">onLine: (line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">buffer</span>: <span class="title class_">Uint8Array</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">position</span>: <span class="built_in">number</span>; <span class="comment">// current read position</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">fieldLength</span>: <span class="built_in">number</span>; <span class="comment">// length of the `field` portion of the line</span></span><br><span class="line">    <span class="keyword">let</span> discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming byte chunk:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onChunk</span>(<span class="params">arr: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer = <span class="literal">undefined</span>) &#123;</span><br><span class="line">            buffer = arr;</span><br><span class="line">            position = <span class="number">0</span>;</span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// we&#x27;re still parsing the old line. Append the new bytes into buffer:</span></span><br><span class="line">            buffer = <span class="title function_">concat</span>(buffer, arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> bufLength = buffer.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">let</span> lineStart = <span class="number">0</span>; <span class="comment">// index where the current line starts</span></span><br><span class="line">        <span class="keyword">while</span> (position &lt; bufLength) &#123;</span><br><span class="line">            <span class="keyword">if</span> (discardTrailingNewline) &#123;</span><br><span class="line">                <span class="keyword">if</span> (buffer[position] = <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>) &#123;</span><br><span class="line">                    lineStart = ++position; <span class="comment">// skip to next char</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// start looking forward till the end of line:</span></span><br><span class="line">            <span class="keyword">let</span> lineEnd = -<span class="number">1</span>; <span class="comment">// index of the \r or \n char</span></span><br><span class="line">            <span class="keyword">for</span> (; position &lt; bufLength &amp;&amp; lineEnd = -<span class="number">1</span>; ++position) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (buffer[position]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">Colon</span>:</span><br><span class="line">                        <span class="keyword">if</span> (fieldLength = -<span class="number">1</span>) &#123; <span class="comment">// first colon in line</span></span><br><span class="line">                            fieldLength = position - lineStart;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// @ts-ignore:7029 \r case below should fallthrough to \n:</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">CarriageReturn</span>:</span><br><span class="line">                        discardTrailingNewline = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>:</span><br><span class="line">                        lineEnd = position;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lineEnd = -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// We reached the end of the buffer but the line hasn&#x27;t ended.</span></span><br><span class="line">                <span class="comment">// Wait for the next arr and then continue parsing:</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we&#x27;ve reached the line end, send it out:</span></span><br><span class="line">            <span class="title function_">onLine</span>(buffer.<span class="title function_">subarray</span>(lineStart, lineEnd), fieldLength);</span><br><span class="line">            lineStart = position; <span class="comment">// we&#x27;re now on the next line</span></span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lineStart = bufLength) &#123;</span><br><span class="line">            buffer = <span class="literal">undefined</span>; <span class="comment">// we&#x27;ve finished reading it</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lineStart ! <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Create a new view into buffer beginning at lineStart so we don&#x27;t</span></span><br><span class="line">            <span class="comment">// need to copy over the previous lines when we get the new arr:</span></span><br><span class="line">            buffer = buffer.<span class="title function_">subarray</span>(lineStart);</span><br><span class="line">            position -= lineStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses line buffers into EventSourceMessages.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onId A function that will be called on each `id` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onRetry A function that will be called on each `retry` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onMessage A function that will be called on each message.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming line buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getMessages</span>(<span class="params"></span></span><br><span class="line"><span class="params">    onId: (id: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onRetry: (retry: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onMessage?: (msg: EventSourceMessage) =&gt; <span class="built_in">void</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="title function_">newMessage</span>();</span><br><span class="line">    <span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming line buffer:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onLine</span>(<span class="params">line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.<span class="property">length</span> = <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// empty line denotes end of message. Trigger the callback and start a new message:</span></span><br><span class="line">            onMessage?.(message);</span><br><span class="line">            message = <span class="title function_">newMessage</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldLength &gt; <span class="number">0</span>) &#123; <span class="comment">// exclude comments and lines with no values</span></span><br><span class="line">            <span class="comment">// line is of format &quot;&lt;field&gt;:&lt;value&gt;&quot; or &quot;&lt;field&gt;: &lt;value&gt;&quot;</span></span><br><span class="line">            <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">            <span class="keyword">const</span> field = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(<span class="number">0</span>, fieldLength));</span><br><span class="line">            <span class="keyword">const</span> valueOffset = fieldLength + (line[fieldLength + <span class="number">1</span>] = <span class="title class_">ControlChars</span>.<span class="property">Space</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">const</span> value = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(valueOffset));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (field) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;data&#x27;</span>:</span><br><span class="line">                    <span class="comment">// if this message already has data, append the new value to the old.</span></span><br><span class="line">                    <span class="comment">// otherwise, just set to the new value:</span></span><br><span class="line">                    message.<span class="property">data</span> = message.<span class="property">data</span></span><br><span class="line">                        ? message.<span class="property">data</span> + <span class="string">&#x27;\n&#x27;</span> + value</span><br><span class="line">                        : value; <span class="comment">// otherwise, </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;event&#x27;</span>:</span><br><span class="line">                    message.<span class="property">event</span> = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;id&#x27;</span>:</span><br><span class="line">                    <span class="title function_">onId</span>(message.<span class="property">id</span> = value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;retry&#x27;</span>:</span><br><span class="line">                    <span class="keyword">const</span> retry = <span class="built_in">parseInt</span>(value, <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(retry)) &#123; <span class="comment">// per spec, ignore non-integers</span></span><br><span class="line">                        <span class="title function_">onRetry</span>(message.<span class="property">retry</span> = retry);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then there is the highlight, fetch.ts, in fact, the content of this file is relatively simple</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EventSourceMessage</span>, getBytes, getLines, getMessages &#125; <span class="keyword">from</span> <span class="string">&#x27;./parse&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventStreamContentType</span> = <span class="string">&#x27;text/event-stream&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DefaultRetryInterval</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LastEventId</span> = <span class="string">&#x27;last-event-id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">FetchEventSourceInit</span> <span class="keyword">extends</span> <span class="title class_">RequestInit</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The request headers. FetchEventSource only supports the Record&lt;string,string&gt; format.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    headers?: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response is received. Use this to validate that the response</span></span><br><span class="line"><span class="comment">     * actually matches what you expect (and throw if it doesn&#x27;t.) If not provided,</span></span><br><span class="line"><span class="comment">     * will default to a basic validation to ensure the content-type is text/event-stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onopen?: <span class="function">(<span class="params">response: Response</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a message is received. <span class="doctag">NOTE:</span> Unlike the default browser</span></span><br><span class="line"><span class="comment">     * EventSource.onmessage, this callback is called for _all_ events,</span></span><br><span class="line"><span class="comment">     * even ones with a custom `event` field.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onmessage?: <span class="function">(<span class="params">ev: EventSourceMessage</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response finishes. If you don&#x27;t expect the server to kill</span></span><br><span class="line"><span class="comment">     * the connection, you can throw an exception here and retry using onerror.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onclose?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when there is any error making the request / processing messages /</span></span><br><span class="line"><span class="comment">     * handling callbacks etc. Use this to control the retry strategy: if the</span></span><br><span class="line"><span class="comment">     * error is fatal, rethrow the error inside the callback to stop the entire</span></span><br><span class="line"><span class="comment">     * operation. Otherwise, you can return an interval (in milliseconds) after</span></span><br><span class="line"><span class="comment">     * which the request will automatically retry (with the last-event-id).</span></span><br><span class="line"><span class="comment">     * If this callback is not specified, or it returns undefined, fetchEventSource</span></span><br><span class="line"><span class="comment">     * will treat every error as retriable and will try again after 1 second.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onerror?: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">void</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If true, will keep the request open even if the document is hidden.</span></span><br><span class="line"><span class="comment">     * By default, fetchEventSource will close the request and reopen it</span></span><br><span class="line"><span class="comment">     * automatically when the document becomes visible again.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    openWhenHidden?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The Fetch function to use. Defaults to window.fetch */</span></span><br><span class="line">    fetch?: <span class="keyword">typeof</span> fetch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchEventSource</span>(<span class="params">input: RequestInfo, &#123;</span></span><br><span class="line"><span class="params">    signal: inputSignal,</span></span><br><span class="line"><span class="params">    headers: inputHeaders,</span></span><br><span class="line"><span class="params">    onopen: inputOnOpen,</span></span><br><span class="line"><span class="params">    onmessage,</span></span><br><span class="line"><span class="params">    onclose,</span></span><br><span class="line"><span class="params">    onerror,</span></span><br><span class="line"><span class="params">    openWhenHidden,</span></span><br><span class="line"><span class="params">    fetch: inputFetch,</span></span><br><span class="line"><span class="params">    ...rest</span></span><br><span class="line"><span class="params">&#125;: FetchEventSourceInit</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// make a copy of the input headers since we may modify it below:</span></span><br><span class="line">        <span class="keyword">const</span> headers = &#123; ...inputHeaders &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!headers.<span class="property">accept</span>) &#123;</span><br><span class="line">            headers.<span class="property">accept</span> = <span class="title class_">EventStreamContentType</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">curRequestController</span>: <span class="title class_">AbortController</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">onVisibilityChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>(); <span class="comment">// close existing request on every visibility change</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">                <span class="title function_">create</span>(); <span class="comment">// page is now visible again, recreate request.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!openWhenHidden) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> retryInterval = <span class="title class_">DefaultRetryInterval</span>;</span><br><span class="line">        <span class="keyword">let</span> retryTimer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if the incoming signal aborts, dispose resources and resolve:</span></span><br><span class="line">        inputSignal?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">dispose</span>();</span><br><span class="line">            <span class="title function_">resolve</span>(); <span class="comment">// don&#x27;t waste time constructing/logging errors</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> fetch = inputFetch ?? <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line">        <span class="keyword">const</span> onopen = inputOnOpen ?? defaultOnOpen;</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(input, &#123;</span><br><span class="line">                    ...rest,</span><br><span class="line">                    headers,</span><br><span class="line">                    <span class="attr">signal</span>: curRequestController.<span class="property">signal</span>,</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">onopen</span>(response);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">getBytes</span>(response.<span class="property">body</span>!, <span class="title function_">getLines</span>(<span class="title function_">getMessages</span>(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">                        <span class="comment">// store the id and send it back on the next retry:</span></span><br><span class="line">                        headers[<span class="title class_">LastEventId</span>] = id;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// don&#x27;t send the last-event-id header anymore:</span></span><br><span class="line">                        <span class="keyword">delete</span> headers[<span class="title class_">LastEventId</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="function"><span class="params">retry</span> =&gt;</span> &#123;</span><br><span class="line">                    retryInterval = retry;</span><br><span class="line">                &#125;, onmessage)));</span><br><span class="line"></span><br><span class="line">                onclose?.();</span><br><span class="line">                <span class="title function_">dispose</span>();</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!curRequestController.<span class="property">signal</span>.<span class="property">aborted</span>) &#123;</span><br><span class="line">                    <span class="comment">// if we haven&#x27;t aborted the request ourselves:</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// check if we need to retry:</span></span><br><span class="line">                        <span class="keyword">const</span> <span class="attr">interval</span>: <span class="built_in">any</span> = onerror?.(err) ?? retryInterval;</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">                        retryTimer = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(create, interval);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (innerErr) &#123;</span><br><span class="line">                        <span class="comment">// we should not retry anymore:</span></span><br><span class="line">                        <span class="title function_">dispose</span>();</span><br><span class="line">                        <span class="title function_">reject</span>(innerErr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">create</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultOnOpen</span>(<span class="params">response: Response</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> contentType = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!contentType?.<span class="title function_">startsWith</span>(<span class="title class_">EventStreamContentType</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected content-type to be <span class="subst">$&#123;EventStreamContentType&#125;</span>, Actual: <span class="subst">$&#123;contentType&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code has some other processing, such as automatic retry, such as closing the request when the page is inactive, and re-creating a new request when it re-enters the active state.</p><p>But the core function is to establish a connection through the fetch interface, and then continue to accept response.body through the getBytes method, and then continue to parse ByteFlow into the message form of EventSource through getLines and getMessage.</p><h1 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h1><p>This code looks very simple, but the question is, why can it be written like this, that is, there are two problems:</p><ul><li>Why fetch api can build links to SSE</li><li>Why can the response.body of the fetch api be continuously parsed, instead of the common form of a json object</li><li>Why getMessage can say line buffer parses correctly</li></ul><p>First of all, to put it simply, SSE is still based on HTTP in nature, so connections can be established through HTTP requests<br>Second, because the data format returned by our usual API interface is’application/json ‘, and the format returned by the sse interface is’text/event-stream’, response.body is actually a readableStream, so it can continuously transmit data back.<br>The third point, because this is stipulated in the agreement, according to the agreement, this is the agreement: <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation">https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</a>, you can also see this article: <a href="https://www.cnblogs.com/goloving/p/9196066.html">https://www.cnblogs.com/goloving/p/9196066.html</a></p><p>Then there is a new question that can be raised here, why SSE returns can be a stream, that is, why HTTP can support stream output:</p><p>In fact, the answer is very simple: HTTP is already supported, but the common restful api we used before is a short connection. After obtaining the json data at one time, the connection is directly closed, which makes us forget that HTTP can support continuous return of data.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;We all know that the interface of ChatGPT supports data return by streaming SSE, and the front-end browser provides EventSource by default to receive SSE, but the problem is that the default EventSource only supports Get requests, and does not support any custom headers. The interface of ChatGPT is a POST request, and it is necessary to carry a token in the header, so a Microsoft library is used. Let’s explain its usage, source code, and the basis for its source code to run from a protocol perspective, that is, why its source code can work&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/en/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>How to Convert Canvas to SVG</title>
    <link href="https://sunra.top/en/posts/4708/"/>
    <id>https://sunra.top/en/posts/4708/</id>
    <published>2023-03-30T04:27:55.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>Before, I made a request for a relational graph. Because exporting png and other images will be distorted when enlarged, I hope to export them as vector graphs. However, the export graph function that comes with G6 cannot be exported as SVG in Canvas mode, and SVG mode has many features that are not supported, so I tried to find a way to export Canvas as SVG.</p><span id="more"></span><p>This code uses an old library called canvas-to-svg</p><p>This library simulates canvas and exposes some canvas apis, which can finally be exported as svg</p><p>It should be noted that some canvas APIs do not support, such as setTransform, resetTransform, etc. If you need to use these two APIs, you can split them into translate and rotate, etc</p><p>Directly upload the code:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CanvasToSVG</span> <span class="keyword">from</span> <span class="string">&#x27;canvas-to-svg&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTextWaterMaskToCanvas</span>(<span class="params"></span></span><br><span class="line"><span class="params">  context: CanvasRenderingContext2D,</span></span><br><span class="line"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  context.<span class="property">font</span> = <span class="string">&#x27;16px Microsoft YaHei&#x27;</span>;</span><br><span class="line">  context.<span class="property">fillStyle</span> = <span class="string">&#x27;#F2F3F5&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width, height &#125; = context.<span class="property">canvas</span>;</span><br><span class="line">  <span class="keyword">const</span> textMaskCountHorizontal = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, width / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> textMaskCountVertical = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, height / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> fwidth = width / textMaskCountHorizontal;</span><br><span class="line">  <span class="keyword">const</span> fheight = height / textMaskCountVertical;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> hh = <span class="number">0</span>; hh &lt; height; hh += fheight) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ww = <span class="number">0</span>; ww &lt; width; ww += fwidth) &#123;</span><br><span class="line">      context.<span class="title function_">translate</span>(ww, hh);</span><br><span class="line">      context.<span class="title function_">rotate</span>(-<span class="title class_">Math</span>.<span class="title function_">atan</span>(height / width));</span><br><span class="line">      context.<span class="title function_">fillText</span>(textWaterMask, -fwidth / <span class="number">2</span>, fheight / <span class="number">2</span>);</span><br><span class="line">      context.<span class="title function_">rotate</span>(<span class="title class_">Math</span>.<span class="title function_">atan</span>(height / width));</span><br><span class="line">      context.<span class="title function_">translate</span>(-ww, -hh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadFullImageWithWaterMaskCreator</span>(<span class="params"></span></span><br><span class="line"><span class="params">  graphInstance: IGraph | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    name?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">type</span>?: DataUrlType,</span></span><br><span class="line"><span class="params">    imageConfig?: &#123;</span></span><br><span class="line"><span class="params">      backgroundColor?: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="params">      padding?: <span class="built_in">number</span> | <span class="built_in">number</span>[];</span></span><br><span class="line"><span class="params">    &#125;,</span></span><br><span class="line"><span class="params">    callback?: (success: <span class="built_in">boolean</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    graphInstance?.<span class="title function_">toFullDataURL</span>(</span><br><span class="line">      <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        image.<span class="property">src</span> = res;</span><br><span class="line">        image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// const canvas = document.createElement(&#x27;canvas&#x27;);</span></span><br><span class="line">            <span class="comment">// canvas.width = image.width;</span></span><br><span class="line">            <span class="comment">// canvas.height = image.height;</span></span><br><span class="line">            <span class="comment">// const context = canvas.getContext(&#x27;2d&#x27;);</span></span><br><span class="line">            <span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">CanvasToSVG</span>(image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line">            <span class="keyword">if</span> (context &amp;&amp; name) &#123;</span><br><span class="line">              context.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line">              context.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>, image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">              <span class="title function_">addTextWaterMaskToCanvas</span>(context, textWaterMask);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// downloadCanvasImage(canvas, name, type);</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> svg = context.<span class="title function_">getSerializedSvg</span>(<span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">const</span> svgData = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Blob</span>([svg], &#123; <span class="attr">type</span>: <span class="string">&#x27;image/svg&#x27;</span> &#125;),</span><br><span class="line">              );</span><br><span class="line">              <span class="keyword">const</span> downloadLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">              downloadLink.<span class="property">download</span> = <span class="string">`<span class="subst">$&#123;name&#125;</span>.svg`</span>;</span><br><span class="line">              downloadLink.<span class="property">href</span> = svgData;</span><br><span class="line">              downloadLink.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">              callback?.(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            callback?.(<span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        image.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          callback?.(<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">type</span>,</span><br><span class="line">      imageConfig,</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Before, I made a request for a relational graph. Because exporting png and other images will be distorted when enlarged, I hope to export them as vector graphs. However, the export graph function that comes with G6 cannot be exported as SVG in Canvas mode, and SVG mode has many features that are not supported, so I tried to find a way to export Canvas as SVG.&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Force-oriented algorithm</title>
    <link href="https://sunra.top/en/posts/62967/"/>
    <id>https://sunra.top/en/posts/62967/</id>
    <published>2023-02-23T02:59:53.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I need to implement a relational graph in my work. The node layout in the graph needs to use force-oriented layout, so I was interested in the force-oriented algorithm involved, and I went to study it.</p><p>Force-directed graph drawings can be used to describe the relationships between nodes of a graph, distributing nodes to reasonable positions on the canvas, such as describing relationships between enterprises, interpersonal relationships in social networks, etc.</p><span id="more"></span><h1 id="Basic-principle-of-algorithm"><a href="#Basic-principle-of-algorithm" class="headerlink" title="Basic principle of algorithm"></a>Basic principle of algorithm</h1><p>Let’s first take a look at a rendering:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1677373207/origin-of-ray/bVbgUak_jbxebp.png" alt=""></p><p>The distribution of the points in the above figure is calculated by the force guidance algorithm, which is to regard the nodes as the same charge, and there is a repulsive force between them. This repulsive force simulates Coulomb’s law, and the closer the repulsive force, the greater the repulsive force; if there is a connection between two points, it is regarded as an attractive force between the two points. This attractive force simulates Hooke’s law, and the farther away the attractive force is, the greater the attractive force.</p><p>In the initial state, we randomly place points, and then these points will move in space due to attractive forces and repulsive forces until a balance is reached, forming a force-oriented layout.</p><h2 id="Repulsive-force"><a href="#Repulsive-force" class="headerlink" title="Repulsive force"></a>Repulsive force</h2><p>Consider each node as an electric charge, and there is a repulsive force between the charges, which is the Coulomb force. According to Coulomb’s law, the repulsive force between electrons can be calculated as follows:</p><script type="math/tex; mode=display">F = k_e\frac{q_1q_2}{r^2}\overrightarrow{e}</script><p>We can assume that $q_1 and q_2 $are both 1, then the above formula becomes</p><script type="math/tex; mode=display">F = k_e\frac{1}{r^2}\overrightarrow{e}</script><h2 id="Attractive-force"><a href="#Attractive-force" class="headerlink" title="Attractive force"></a>Attractive force</h2><p>Some particles are entangled by some edges that produce a spring-like Hooker attractive force:</p><script type="math/tex; mode=display">F_s = k_s(x - x_0)</script><p>The repulsive and attractive forces continue to act, the particles tend to balance after continuous displacement, and gradually no longer have relative displacement, and the energy is continuously consumed, and finally tends to zero.</p><p>Under the action of attractive force and repulsive force, the coordinates are constantly updated, and after multiple iterations, a stable state is reached, and the convergence is over. Parameters and iterations need to be debugged.</p><h2 id="Calculation-step"><a href="#Calculation-step" class="headerlink" title="Calculation step"></a>Calculation step</h2><p>If we want to use code to implement the simplified layout of the force guide diagram, we need several steps.</p><ul><li>Set point data nodes, link data links.</li><li>Random positioning of points.</li><li>Render View</li><li>Execution algorithm calculates position, renders view (repeated N times)</li></ul><h1 id="Code-implementation"><a href="#Code-implementation" class="headerlink" title="Code implementation"></a>Code implementation</h1><p>In fact, understand the above process, you can fully implement a version of the force-oriented algorithm, I just provide a simple version here, each person to achieve the algorithm and the final effect may be completely different</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">source, target</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">source</span> = source;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">target</span> = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CANVAS_WIDTH</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CANVAS_HEIGHT</span> = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForceDirected</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mNodeList</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="keyword">new</span> <span class="title class_">Node</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mEdgeList</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mDxMap</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mDyMap</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ejectFactor</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">condenseFactor</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> edgeCount = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; edgeCount; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> targetId = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * n);</span><br><span class="line">        <span class="keyword">let</span> edge = <span class="keyword">new</span> <span class="title class_">Edge</span>(i, targetId);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mEdgeList</span>.<span class="title function_">push</span>(edge);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">coefficient</span> = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable constant_">CANVAS_WIDTH</span> * <span class="variable constant_">CANVAS_HEIGHT</span> / mNodeList.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> initialSize = <span class="number">40.0</span>;</span><br><span class="line">    <span class="keyword">const</span> initialX = <span class="variable constant_">CANVAS_WIDTH</span> * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">const</span> initialY = <span class="variable constant_">CANVAS_HEIGHT</span> * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">mNodeList</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">x</span> = initialX + initialSize * (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">y</span> = initialY + initialSize * (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Calculate repulsion</span></span><br><span class="line">  <span class="title function_">calculateRepulsive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">mNodeList</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">this</span>.<span class="property">mNodeList</span>.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        distX = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">mNodeList</span>[j].<span class="property">x</span>;</span><br><span class="line">        distY = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">mNodeList</span>[j].<span class="property">y</span>;</span><br><span class="line">        dist = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distX * distX + distY * distY);</span><br><span class="line">        <span class="keyword">if</span> (dist &gt; <span class="number">0</span> &amp;&amp; dist &lt; <span class="number">250</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">mDxMap</span>[i] = distX * <span class="variable language_">this</span>.<span class="property">ejectFactor</span> / <span class="title class_">Math</span>.<span class="title function_">pow</span>(dist, <span class="number">2</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">mDyMap</span>[i] = distY * <span class="variable language_">this</span>.<span class="property">ejectFactor</span> / <span class="title class_">Math</span>.<span class="title function_">pow</span>(dist, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Calculate</span> the attractive force</span><br><span class="line">  <span class="title function_">calculateTraction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> startNode, endNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> e = <span class="number">0</span>; e &lt; mEdgeList.<span class="property">length</span>; e++) &#123;</span><br><span class="line">      <span class="keyword">const</span> eStartID = mEdgeList[e].<span class="property">source</span>;</span><br><span class="line">      <span class="keyword">const</span> eEndID = mEdgeList[e].<span class="property">target</span>;</span><br><span class="line">      startNode = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[eStartID];</span><br><span class="line">      endNode = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[eEndID];</span><br><span class="line">      <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">      distX = startNode.<span class="property">x</span> - endNode.<span class="property">x</span>;</span><br><span class="line">      distY = startNode.<span class="property">y</span> - endNode.<span class="property">y</span>;</span><br><span class="line">      dist = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distX * distX + distY * distY);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eStartID] = <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eStartID] - distX * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eStartID] = <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eStartID] - distY * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eEndID] = <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eEndID] + distX * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eEndID] = <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eEndID] + distY * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateCoordinates</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxt = <span class="number">4</span>, maxty = <span class="number">3</span>; <span class="comment">//Additional coefficients.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; mNodeList.<span class="property">length</span>; v++) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = mNodeList[v];</span><br><span class="line">      <span class="keyword">let</span> dx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(mDxMap[v]);</span><br><span class="line">      <span class="keyword">let</span> dy = <span class="title class_">Math</span>.<span class="title function_">floor</span>(mDyMap[v]);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (dx &lt; -maxt) dx = -maxt;</span><br><span class="line">      <span class="keyword">if</span> (dx &gt; maxt) dx = maxt;</span><br><span class="line">      <span class="keyword">if</span> (dy &lt; -maxty) dy = -maxty;</span><br><span class="line">      <span class="keyword">if</span> (dy &gt; maxty) dy = maxty;</span><br><span class="line">      node.<span class="property">x</span> = node.<span class="property">x</span> + dx &gt;= <span class="variable constant_">CANVAS_WIDTH</span> || node.<span class="property">x</span> + dx &lt;= <span class="number">0</span> ? node.<span class="property">x</span> - dx : node.<span class="property">x</span> + dx;</span><br><span class="line">      node.<span class="property">y</span> = node.<span class="property">y</span> + dy &gt;= <span class="variable constant_">CANVAS_HEIGHT</span> || node.<span class="property">y</span> + dy &lt;= <span class="number">0</span> ? node.<span class="property">y</span> - dy : node.<span class="property">y</span> + dy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">iterateCount</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; iterateCount; i++) &#123;</span><br><span class="line">      <span class="title function_">calculateRepulsive</span>();</span><br><span class="line">      <span class="title function_">calculateTraction</span>();</span><br><span class="line">      <span class="title function_">updateCoordinates</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I need to implement a relational graph in my work. The node layout in the graph needs to use force-oriented layout, so I was interested in the force-oriented algorithm involved, and I went to study it.&lt;/p&gt;
&lt;p&gt;Force-directed graph drawings can be used to describe the relationships between nodes of a graph, distributing nodes to reasonable positions on the canvas, such as describing relationships between enterprises, interpersonal relationships in social networks, etc.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>10 times programmer work method</title>
    <link href="https://sunra.top/en/posts/37760/"/>
    <id>https://sunra.top/en/posts/37760/</id>
    <published>2023-02-11T10:01:01.000Z</published>
    <updated>2023-06-12T00:06:43.938Z</updated>
    
    <content type="html"><![CDATA[<p>The recent chatgpt fire has made many people think that many jobs, including programmers, will be replaced. Other positions I do not know much about, but for the programmer career, I think but in fact this shows that the perception of programmers in dealing with the problem is that programmers deal with a particular independent problem on, or a separate very specific problem on, of course, this and programmer interview questions, after all, programmer interview questions is actually this, interview questions, to say the least, is to do the paper, do the paper how you may have the back of the Internet robot than, and those badly measured seem to be empty words, in an interview, people really do not necessarily perform than the back is all the interview experience post robot superior.</p><p>But in fact this is already forgetting what programmers exist for. The technology that programmers master is called information technology, and its purpose is to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI actually brings to us.</p><span id="more"></span><h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>In fact, it is now considered the fourth industrial revolution.</p><ol><li>The first was the age of steam, when mankind mastered great physical power, and machinery gave mankind the power to transform the physical world more powerfully</li><li>The second is the electrical age, which is a continuation of the first, allowing people to transform the world more quickly, while accelerating the efficiency of people’s material cooperation</li><li>The third is the information age, which is the age that most of us experience. Many people may not understand why information is important, after all, this thing is vague, and the Internet looks like an explosion of information, simply worthless. But in fact, for society, information is the most valuable thing, because, <strong> money is actually information, and even the entire human society exists on the basis of information, as stated in “A Brief History of Humanity”, without a common imagination, the largest human can only be maintained into a small tribe, just like the animals, it is a common imagination, so that humans have a cooperative </strong>. And the role of the market is to exchange information, no one person can handle all the information in human society, even if he has access to all information. Then there are luxury goods, such as jade, diamonds, gold, what makes you say that the price between them is different, is information, his physical nature is not expensive, so there is no need to ask why luxury goods are expensive, there is no reason.</li><li>the fourth is artificial intelligence, which is considered a continuation of the third. Why there is this thing is because of the explosion of information, too much, <strong> individuals can not handle it, the speed of processing information is too low, and many people cooperate will bring new information to deal with, these are the management to do up</strong>. There are many positions that acted as artificial intelligence in the past, such as low-end consulting positions, they actually help integrate information, because there is too much information, such as buying a house, unless you recently want to buy a house, you can not collect every day, to deal with, so it gave birth to people who specialize in processing this information it.</li></ol><p>So if the third industrial revolution is allowing people to collect and process information faster, then the fourth, chatgpt including artificial intelligence in my personal opinion, is giving everyone stronger tools to filter and process information.</p><p>This may not seem like an essential change, still improving the speed of processing information, but don’t forget that any complex problem is caused by simple problems coupled together <strong>quantitative change produces qualitative change. When there are enough problems and enough people involved, it’s not really a problem anymore</strong>.</p><p><strong> complexity is the biggest problem, capital all efforts to improve efficiency, efforts to understand the laws of the world, management science, etc., are designed to reduce complexity, of course, the overall efficiency improvement does not mean individual happiness, because the overall want to be efficient, in which each individual can not have a personality </strong>. Conversely, if a tool can improve the efficiency of enough, is the industrial revolution, the industrial revolution is actually a tool to bring great efficiency improvements.</p><p>All this to say, is to express a point of view, programmers deal with things is actually to reduce the complexity of information, the analysis and processing of information to the machine, the first thing to do the programmer itself to understand this information, and then transformed into a program, so the value of the programmer’s work does not lie mainly in programming, if not to help deal with information, reduce the complexity of the complexity to the machine, the more brilliant technology is useless. After all, it is never the capital that determines the direction of technological development.</p><p>So the focus of improving programmer productivity shouldn’t just be on how to knock out code faster, except of course for the very few people who make tools for programmers.</p><h1 id="10x-programmer-work-method"><a href="#10x-programmer-work-method" class="headerlink" title="10x programmer work method"></a>10x programmer work method</h1><p>The following content comes from the column of the same name in the geek time, here is just a summary of my personal notes, we recommend you to see the column</p><h2 id="Thinking-Framework"><a href="#Thinking-Framework" class="headerlink" title="Thinking Framework"></a>Thinking Framework</h2><p><strong>Essential and Contingent Complexity</strong><br>There is a famous book in the software industry called “The Myth of the Human Moon”, which mentions two very important concepts: Essential Complexity and Accidental Complexity.<br>Simply put, essential complexity is what must be done to solve a problem no matter how it is done, while accidental complexity is what has to be done more because of the improper choice of the way to do things.<br>For example, if you want to make a website, the content of the website is something you have to write anyway, and this is the “essential complexity”. If you are still writing a website in assembly today, it is impossible to be more efficient because you have chosen the wrong tool. This kind of problem caused by choosing the wrong method or tool is the “accidental complexity”.<br><strong>Four principles of best practice</strong></p><ul><li>Begin with the end in mind;</li><li>Task breakdown;</li><li>Communication feedback;</li><li>Automation.</li></ul><p><strong>Thinking Framework:</strong></p><ul><li>Where are we?</li><li>Where are we going?</li><li>How can we get there?</li></ul><p><strong>Linkage between the Four Principles and the Thinking Framework</strong><br>In practice, this thinking framework will help me better understand my work. For example, when a product manager gives me an explanation of a feature to be developed, I usually ask him questions such as</p><ul><li>Why this feature and what value it will bring to users?</li><li>What kind of users will use this feature, in what scenarios will they use it, and how will they use it?</li><li>Are there other means to achieve this? Is it necessary to develop a system?</li><li>After this feature goes live, how do you measure its effectiveness?</li></ul><p>If the product manager can answer these questions well, it means that he has basically thought this job through more clearly, and at this time, I will feel comfortable to understand the details of the follow-up.<br><strong>Begin with the end in mind</strong> means setting your goals at the beginning of your work. <strong>We need to see the real goal, not the work that others have explained to us as the goal</strong>. You can see that this principle is helping us to answer the question in the Thinking Framework, Where are we going? This question.<br><strong>Task decomposition</strong> is to break down the big goal into feasible tasks. The more detailed the work is broken down, the better we can control the work. It is a way to help us answer the question of how can we get there?<br>If the first two principles are to be done before the hands-on analysis, then the last two principles are on the road to the goal, to escort us, because in practice, we can not help but deal with people and machines.<br><strong>Communication Feedback</strong> is about unblocking the channels of interaction with others. On the one hand, we ensure that information can be communicated to reduce work omissions caused by misunderstanding; on the other hand, we must also ensure that we can accurately receive external information so that we do not feel good about ourselves and hinder progress.<br><strong>Automation</strong> is the automation of tedious work to be performed by machines, which is part of our job as programmers. We are good at building automation for others, but we don’t apply it enough for our own work, and this is the part of our job that deserves optimization.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112035/origin-of-ray/1667091571184-7dee658b-ff37-4377-b884-6d18b4d80736.png_averageHue_23d1c4bc_clientId_ua2b346c7-a2c6-4_from_paste_height_457_id_u7555d25b_name_image_jub744.png" alt="image.png"></p><h2 id="Begin-with-the-end-in-mind"><a href="#Begin-with-the-end-in-mind" class="headerlink" title="Begin with the end in mind"></a>Begin with the end in mind</h2><p><strong>Begin with the end in mind: how to make the effort not in vain</strong><br>We face real work scenarios on a daily basis: many of us just hear about a feature that someone has asked to do and start brainstorming everything that comes next. The result is that the effort put in is meaningless.<br>“Beginning with the end in mind” is a counter-intuitive way of thinking that most people do not possess. Therefore, in our daily life, we see many interesting phenomena. For example, when you graduate from college, there are many people who want to go to graduate school. If you ask them why they want to go to graduate school, the reason they get is usually to find a good job. But can studying really help him find a good job? Not necessarily, because finding a job and going to graduate school are not even the same skill tree. If you really want to find a good job, then you should understand what the job requires and how you can acquire the skills required for the job.<br>The example of “designing a login function”, compared with the thinking of “beginning with the end”, you may be unfair for my colleagues, they may also have the thinking of “beginning with the end”, only that Their “end” and I, the customer’s “end” is not the same. This brings us to <strong> do software, is essentially building a “collective imagination”. </strong><br><strong>Imagined Community</strong><br>We do software is actually a community of imagination, the “collective imagination” is the software we want to do, any imagination needs a carrier to show it, we write software is the process of the “collective imagination” to implement the process.<br>Since it is a “collective imagination”, it is difficult to unify our imaginations before the carrier presents them, and they all differ to a greater or lesser extent.<br>So, <strong>everything is created twice: once in the mind, which is the intellectual or first creation (Mental/First Creation), and then only when it is put into practice, which is the actual construction or second creation (Physical/Second Creation)</strong>.<br>Going back to the “designing a login” example, my colleagues were building their own imagination, not ours.<br>One of the biggest differences is that no one will pay for their own imagination. So, <strong> they see the “end” is not the real end, but only an ego “end”, as to see what kind of “end”, it depends on each person’s insight </strong>.<br>For those who do software, we should position the “end” to do a valuable software for users, to bring value to others, their value can be reflected.<br><strong>Planning and Discovery</strong><br>With the “end in mind” mindset, we think about how others will use our platform. We designed it in such a way that users would go to our website, read the documentation, and then follow the documentation step by step. One of the key points is that the documentation, especially the “Getting Started” documentation, is the first step for the user to get in touch with our platform and determines his first impression of our product.<br>So, we decided to start by writing the “Getting Started” document, which depicts how users can use our development platform step by step to complete their first “Hello World” level application. Note that at this point, we hadn’t written a single line of code.<br>Human beings are a group of people who are good at brainstorming. Once someone sees the document, he can already conceive the platform as it already exists, and then give all kinds of feedback: “I think this place can be done like this” “I think that place can be changed “.<br><strong>All of this feedback is real because they have “seen” a real thing. It was this real feedback that allowed us to gradually lock in our target. </strong>After that, we started to write the code.<br>An “end-to-end” approach not only helps us plan our work, but also helps us identify problems in our work.<br>Amazon CTO describes how Amazon develops a product, in short, they use a backwards working approach, the sequence of developing a product is</p><ol><li>writing press releases;</li><li>write FAQ (Frequently Asked Questions);</li><li>writing user documentation;</li><li>write code.</li></ol><p><strong>Chasm of Understanding</strong><br>The topic of our discussion is “Begin with the end in mind”. Our first question is, what exactly is “the end”? In the previous example, the “end” is “finished”, but Li thinks his work is done, but Zhang thinks he is not done.<br>There are many ways to bridge the gap, but there is a best practice called <strong>DoD (Definition of Done)</strong>, and it is easy to see from the name of this concept that it was created to solve the common problem of “completion” in software development.<br>How to make DoD work better.</p><ul><li><strong>DoD is a checklist of check items that are used to check how well our work is done</strong>. A DoD check item is a set of valuable activities that we need to develop a product. For example: writing code, writing test code, passing acceptance by testers, etc. What kind of activities are valuable may be perceived differently by each team. But if your team perceives nothing but functional code as valuable, perhaps this is a sign that your team as a whole is lacking in professionalism and the prospects of working in such a team are not good.</li><li><strong>DoD’s check items should be actually checkable</strong>. You say the code is written, where is the code; you say the test coverage is up to par, how do you see it; you say you have the functionality done, demonstrate it.</li><li><strong>DoD is a mechanism for team members to report back to each other</strong>. Don’t think of “reporting” as complicated. The simplest way to report is to say “this feature is done”. When we have a DoD, there are only two states of doing things, “done” and “not done”. In teamwork, we often hear people say “this thing is 80% done”, sorry, that is called not done, there is no 80% done.</li></ul><p>If you can think outside the box, you will find that DoD thinking is very versatile in your work. For example, when we need to work with other teams to develop an interface, we all know that the first step is to get the interface defined.<br><strong>Once the DoD is established in collaboration, we can even solidify it through a process to get the job done more efficiently and with high quality. </strong>Of course, we inevitably have ad hoc tasks in our work lives that are not complex enough to require a process, but can be solved efficiently with a DoD mindset. For example, I often have people come over and ask me to help with something. Using DoD thinking, I first ask the person exactly what I need to do, confirm the details (equivalent to defining the “checklist”), and then I know how far I can go with the favor. When I ask someone for a favor, I tell them exactly what I need them to do to minimize unnecessary misunderstandings.<br>DoD is a mindset, a way to eliminate as much uncertainty as possible and reach consensus. We do things in a way that “the end is the beginning” and DoD allows us to clearly define the “end” at the beginning.<br>The root cause of all the problems that often arise in human collaboration is that there are too many misunderstandings caused by differences in understanding that waste a lot of time, and DoD is a way to put ideas that are prone to ambiguity into practice.<br><strong>Define the criteria for completion before you do anything. </strong><br><strong>What is the first thing to do when you receive a requirement assignment? </strong><br>In software development, what programmers do is generally defined by requirements. We all know that requirements are an important part of software development, but you may not have thought carefully about the different ways of describing requirements that may affect our programmers’ understanding of them.<br><strong>Because the transmission of information decays, you cannot transmit 100% of what you understand to another person</strong>, and in between, how it is transmitted, i.e. how it is described, will directly determine the percentage of decay.<br>Many companies have a software development model based on a feature list that “defines” what programmers will do, and each group gets the list from the product manager and starts writing the code “as is”. However, often this feature list is just a simple description and you don’t see the big picture.<br>One of the states of many teams is that the programmers know what the feature to be developed is, but many of them can’t answer who is using this feature in what scenario. If you ask him why he is developing this feature, he usually says: it is specified in the feature list.<br><strong> This feature list style of requirements description knocks a complete requirement into pieces. </strong> Only when all the features are developed and dovetailed together is it time to “break the mirror”.<br>Based on this feature list-based requirement description, each group schedules its work with the features as it understands them. So, when your group finishes a feature, that feature may not make it to the line because you have to depend on the work of another group that, not coincidentally, happens to have the related feature development scheduled. This is just the case where there are dependencies between two groups, so imagine how bad the situation would be if multiple groups need to collaborate.<br>As a result, new ways of describing requirements have emerged, of which User Story is one of my favorites. It describes a user’s desired functionality from the user’s point of view, focusing on the path the user needs to take to complete an action in the system. Since it is a “story”, it needs to be a complete scenario that can be told.<br><strong>It’s good if your team uses a user story format for requirements description, but if not, supplementing the feature list with acceptance criteria will greatly improve the efficiency of collaboration between the two parties. </strong><br>The implementation details given in the acceptance criteria should be business, and it is really a waste of time for programmers to think about such issues, and our space to play should be in the technical implementation.<br>Although you are nominally a programmer, when you get a requirement, the thing you have to do is not to write code immediately, but to play the role of a product manager, analyze the requirement and circle the scope of the task. Trust me, analyzing beforehand is definitely much better than taking a written system to your boss and him telling you it’s not what he wants.<br>If there is only one thing you can remember from today, remember this:<strong> Set acceptance criteria before you do any requirements or tasks</strong>.<br><strong>Lean Startup</strong><br>What Lean Startup provides us is a framework for thinking about making products, and most of the products we can come across can be put into this framework.<br>With the framework structure, our life is simple. When a product manager wants to make a new product or a new feature of a product, we can use these concepts of Lean Startup to check whether the product manager has thought it through.<br>For example, <strong> you want to do this product feature, what is the thing that you want to validate? Is there data available to measure the goal he is trying to validate? Is this problem to be solved the most important thing at the moment, and are there other more important problems? </strong><br>If the above questions are answered in the affirmative, is there a simpler solution to validate this goal, and does it have to be achieved by developing a product feature?<br><strong>Expanding the work context</strong><br>Programmers always like to use technology to solve all problems, but many of the problems that make people sleepy are not problems at all. The reason why they can’t find a simpler solution is that many times programmers are limited by their own thinking.<br><strong>The real difference between working in different roles is the difference in context. Problems that are difficult to solve in one local context can even be left unsolved by switching to another context. So no matter how hard a single point is worked on it is only a local optimization, and it is difficult to achieve optimal results. </strong><br>If you want to do your job well, you need to constantly expand the context of your work, learn more about what the logic of other people’s work looks like, and recognize the full lifecycle of software development.<br>Expanding your context can be good for your career, in addition to helping you to be more productive at the moment. As you see a wider world, you get more and more opportunities.<br>If there’s only one thing you remember from today, remember this: <strong>Expand the context of your work and don’t limit yourself to the role of a “programmer”. Don’t limit yourself to the role of a “programmer.” </strong><br><strong>Path to Results</strong><br>With regard to “beginning with the end”, what we have been talking about is seeing results, and results are important. However, it is the path to the result that is more important.<br>In contrast to our work, in most cases, even if the goal is clear, the path is blurred. So, different people have different ways of dealing with it. Some people go where they go and then look at it; others project the path first and see how far they can go. In our process of making software, the differences brought by these two paths have been reflected in the previous short story. One is the first period of its happiness, the later hand to hand; one is the front of thinking ahead, the back of the four stable. I personally respect the latter approach.<br>This idea is not difficult to understand, and we can easily apply it to many aspects of our work. For example:</p><ul><li>before making a product, to deduce how this product will be promoted and to what kind of people by what means;</li><li>Before making technical improvements, consider how going live is a process and prepare a plan for possible problems;</li><li>Before designing a product feature, let’s consider who provides the data and what the complete process looks like.</li></ul><p><strong>Make the results of your work digitally available</strong><br><strong>Iteration 0</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112080/origin-of-ray/1667388901396-30a76c14-7687-4f11-b4ff-3a85fb08be48.png_averageHue_23fefefe_clientId_u6d7a8eac-a85f-4_from_paste_height_772_id_u1823cf52_name_image_fsji0l.png" alt="image.png"><br>Compare this list to the fact that most new projects are under-prepared on one or more items. Even if you are not doing a project from scratch, comparing this list will reveal that the project is lacking in some items and you can make some targeted additions. If there’s only one thing you remember from today, remember this: design your Iteration 0 list and give your project a medical checkup.</p><h2 id="Task-Breakdown"><a href="#Task-Breakdown" class="headerlink" title="Task Breakdown"></a>Task Breakdown</h2><p>Well, sharing these two examples with you is just to warm up and show that human problem solving solutions are pretty much the same. When a complex problem is presented to us, one of the main ideas we have to solve it is to divide and conquer.<br>A big question is one that we all struggle to give answers to, but answering small questions is something we excel at. So, when we learn to break down a problem, it is a big step toward its solution.<br><strong> So, what is the difficulty in solving problems with this mindset? Give an executable decomposition. </strong><br>However, in practice, most people overestimate their executable granularity and underestimate the degree of task decomposition. In other words, if you haven’t done the practice of task decomposition, most of the tasks you decompose will be on the large side of granularity.<br>Only if you can break down the task very small, you can have a clearer understanding of your ability to perform, the real masters are very strong decomposition ability. This difference is equivalent to, the same observation of an item, you use the eyes, while the master is using a microscope. In your opinion, the masters are all micro-operations.<br><strong>The software industry today is all about embracing change, and task decomposition is a prerequisite for us to embrace change. </strong><br><strong>In fact, the main reason why many people can’t write tests well is that they don’t understand task decomposition. </strong><br>Small things have a short feedback cycle, while big things have a long feedback cycle. Small things are easy to do well, while big things are much more difficult. So, with this criterion, it is easier to write good tests at the bottom level. In addition, because there are too many modules involved, any module that is adjusted may break the high-level test, so the high-level test is usually relatively fragile.<br><strong>Test Driven Development TDD</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112098/origin-of-ray/1668079382524-b25c0e83-faac-4d58-89d5-ea262f5837fc.png_averageHue_23fdfbfa_clientId_u4873b967-c53e-4_from_paste_height_652_id_u38c9e075_name_image_kctirp.png" alt="image.png"><br>In test-driven development, refactoring and testing go hand in hand: without testing, you can only refactor in fear; without refactoring, the code is progressively more confusing and the tests become worse and worse to write. Because refactoring and testing work together, it drives you to write better and better code. This is the crudest understanding of the word “drive”.<br><strong>Test Driven Design</strong><br>There are two main reasons why many people resist testing:<br>First, testing requires an “extra” amount of work. I put extra in quotes here because, while you might instinctively think that testing is extra work, it should actually be part of the programmer’s job, as I mentioned in the previous article.<br>Second, many people will feel that there is too much code to test. The reason why these people think that the code is not good to test, which implies an assumption: the code has been written, and then, then write tests to test it.<br>If we reverse the thinking, I have a test, how do I write code that will pass it. <strong>Once you think about the test first, the design thinking changes completely: how do I write my code so that it is testable, that is, we have to write code that has testability. </strong>With this perspective, doesn’t testing become easier?<br>Let’s take one of the most common problems in writing code: static methods<br>The Mock object approach doesn’t work with static anymore. Because it is outside the object system, <strong>static methods cannot be inherited, i.e., they cannot be handled in a series of object-oriented ways</strong>.<br>You don’t have a way to use the Mock object, and you can’t set the corresponding method return value. To get the method to return the corresponding value, you have to open the static method, understand its implementation details, carefully follow the path inside, and carefully set the corresponding parameters before you can get it to give you the expected result. Worse yet, because the method is maintained by someone else, one day he modifies the implementation on a whim and your carefully set parameters fall apart. And to do the setup again you have to reread the code all over again.<br><strong>In this way, your work reverts to its original state. What’s more, it’s not what you should be focusing on, and it doesn’t add to your KPIs.</strong><br>Obviously, you’ve gotten off track. By this point in the discussion you already know that static methods are not test friendly. So, if you want to make your code more testable, <strong>a good solution is to try not to write static methods</strong>.<br>static is a convenient but evil thing. So, limit its use. Unless your static method does not involve any state and has simple behavior, for example, determining whether a string is null. Otherwise, don’t write a static method. As you can see, such static methods are better suited for library functions. So, when we write applications on a daily basis, we try not to use them if we can.<br>What if you encounter a third-party static method in your own code? It’s simple, just wrap the third-party code so that your business code is facing your own wrapper.<br><strong>How to do a good task breakdown</strong><br>Finally, I want to emphasize one thing in particular, all the tasks that are broken out, are independent. That is to say, <strong>for every task done, the code is committable</strong>. Only in this way can we achieve a real sense of small step commits.<br>If there is only one thing you can remember from today, remember this:<strong> Arrange the decomposed tasks in the order of complete implementation of a requirement. </strong><br><strong>Why are your tests not good enough? </strong><br>I have seen many teams that have had a variety of problems with testing, such as</p><ul><li>Inconsistent testing, passing this time but not the next;</li><li>sometimes it is a test to test something very simple, test around a lot of dependencies, build the environment will take a long time;</li><li>For this test to run, it must wait until the other test has finished running; ……</li></ul><p>If you have encountered similar problems in your work, then what you understand by writing tests and what I understand by writing tests may not be the same thing, so where does the problem lie? Why are your tests not good enough? Mainly because these tests are not simple enough.<br><strong> Testing can only be done well if complex tests are broken down into simple tests. </strong><br>Why should testing be simple? There is an interesting logic, I don’t know if you have thought about it, what is the role of testing? Obviously, it is used to ensure the correctness of the code. An ensuing question is, who guarantees the correctness of the tests?<br>Since it is impossible to write a program in a way that guarantees the correctness of a test, we have only one solution: <strong> Write the test simple, so simple that it is easy to understand at a glance and does not need to prove its correctness. </strong>So if you see any test written in a complicated way, it must not be a good test.<br><strong>Test for bad taste</strong><br><strong> Many people always want to do many things in one test, for example, there are several different method calls. May I ask, who exactly is your code testing? </strong> Once this test goes wrong, you need to look at all the several methods involved, which definitely adds complexity to the work.<br>Another area of high incidence of typical “bad taste” is in assertions, and remember, <strong>tests must have assertions</strong>.<br>There is another common “bad taste”: complexity. The most typical scenario is that <strong>when you see all kinds of judgments and loops in the test code, there is basically something wrong with the test</strong>. For example, testing a function, your assertion is written in a bunch of if statements, and the name is that it executes according to the condition. How do you guarantee that the test function is written correctly? Unless you use debugging means, you can not even tell whether your conditional branch is executed to. You may wonder, I have a whole bunch of different data to test, without loops or judgments, what do I do? What you should really be doing is writing several more tests, each covering one scenario.<br><strong>A journey (A-TRIP)</strong><br>How about a test that is considered a good test?<br>Someone made a summary A-TRIP, which is an acronym for five words, are</p><ul><li><strong>Automatic, automated; </strong>leave the tests to be executed by machines as much as possible, the less human involvement the better.</li><li><strong>Thorough, comprehensively; </strong> you should cover as many scenarios as possible with tests. There are two perspectives to understand this. One is to consider various scenarios before writing the code: normal, abnormal, various boundary conditions; the other perspective is that after writing the code, we have to see if the tests covered all the code and all the branches, and this is the scenario where various test coverage tools come into play.</li><li><strong>Repeatable; </strong>There are two perspectives in this: a particular test should be run repeatedly and the result should be the same, which says that each test itself should not depend on any environment that is not under control; there is another perspective that a bunch of tests should be run repeatedly and the result should be the same. This shows that there is no dependency between tests and tests, which is another feature of tests that we will talk about next.</li><li><strong>Independent; </strong>There should not be any dependency between tests and tests. For example, if a test depends on an external database or a third-party service, and Test A writes some values in the database when it runs, and Test B has to use those values in the database, Test B must run after Test A. This is called having a dependency.</li><li><strong>Professional, professional. </strong></li></ul><p><strong>How to cut the demand? </strong><br>If I ask you what this requirement is, for example, most people’s first instinct is still username password login.<br>Basically, the requirement description that pops into your head is the topic (epic), which in agile development some call the master story.<br>If the granularity of your management of requirements is the subject, then so many things can not be talked about. For example, when time is short and I want to cut requirements, you ask the product manager if it’s okay if I don’t do logins, and you wait for the rejection.<br>However, if you say time is tight, can I put the login captcha to the back, or the email address verification function to the back, this kind of suggestion product manager is able to talk to you.<br>The difference lies in the fact that the latter breaks down the requirements.<br><strong>Needs to be broken down</strong><br><strong>“Themes” only help you remember the general direction, but the real use of requirements management relies on further decomposition of requirements</strong>. For this discussion, we’ll continue with the requirements description we’ve already described in the previous column: the user story, which will be the basic unit of our requirements management discussion here.<br><strong>Evaluating user stories has an “ INVEST Principle “</strong>, which is an acronym for six words, namely:</p><ul><li>Independent, standalone. A user story should accomplish a separate function and not depend on other user stories as much as possible, because user stories that depend on each other make it more difficult to manage priorities and estimate workloads. If dependencies do exist, a good practice is to break out the dependent parts and realign them.</li><li>Negotiable. It is a prerequisite for working together. We can’t guarantee that all the details will be 100% implemented in the user story, so the best way to do this is to negotiate. It is also a prerequisite for meeting other judging criteria, as mentioned earlier, a user story is not independent and needs to be broken down, which also needs to be discussed together.</li><li>Valuable, valuable. A user story should have its own value, this item should be the easiest to understand, no value of things not done. But as we have been saying, before doing any of these things, ask where the value lies.</li><li>Estimatable. We will use the results of user story estimation to arrange the subsequent work plan. User stories that cannot be estimated are either because there are many uncertainties or because the requirements are still too large, such stories are not yet in a state where they can be developed and need further analysis by the product manager.</li><li>Small, small. Big steps, no. User stories that can’t be completed in a certain amount of time should only have one result, split. A small user story is easy to schedule, so you can organize your work. testable. Who knows if you’re doing it right if you can’t test it. This is what we have emphasized earlier, that is, the acceptance criteria, you have to know how to be considered work done.</li></ul><p>The first concern is negotiability. As implementers, we have to ask questions. Programmers who are just passive recipients are worth half as much, and as soon as you start asking questions, you’ll find a lot of things that the people who wrote the requirements didn’t think through.<br>Countless times in my career I’ve blocked requirements back, not because I wasn’t cooperative, but because I didn’t want to do something muddled. The reason I can ask questions is partly out of common sense, and partly whether the user stories described here are valuable. User stories, the reason they are stories, are to be told and communicated.<br>There is a more important concern, and one that is at the heart of this module: smallness. Whether it’s independent or estimable, the premise is small. Only when the user story is small enough, our subsequent room for maneuvering will be large. The next important question is, how to be considered small? This brings us to another important aspect of user stories: estimation.<br>Usually, it is the two sides that have a deviation in understanding the requirements, and then the colleague responsible for writing the user story has to step up and help clarify the requirements. So, in general, the estimation process is also a process for everyone to deepen their understanding of the requirements. Estimation has another important role: to discover particularly large user stories. In general, a user story should be completed within one iteration.<br>The real dilemma for many teams is the lack of requirements decomposition in the development process. In this case, the basic unit of requirements management is a theme, and since it is the basic unit, it is an indivisible whole. The team is then tied alive to a huge requirement with no room for maneuvering. If the team can decompose the requirements, the basic unit of requirements will be reduced, and everyone will no longer see the “ironclad” piece, so they can adjust more easily and have more room to move.<br><strong>Demand Management</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112146/origin-of-ray/1669688919178-f48fc53b-2a0f-432e-997b-35ebe0be2265.png_averageHue_23fefefc_clientId_u496d162f-a4d1-4_from_paste_height_653_id_ue8a35552_name_image_qktkqz.png" alt="image.png"><br>Use a few examples from the life of a programmer to help you understand. Let the system can not run properly online failure, it belongs to important and urgent things, do not rush to solve, it will affect the normal operation of the company. The team to upgrade the system transformation is important not urgent: transformation is good, performance is also good, maintainability is also improved; not transformation, a moment can also be used. Some temporary tasks are urgent and unimportant, while the brush of friends is neither urgent nor important.<br>According to the concept of time management, important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible. <strong>The biggest change this matrix brings to our thinking is the realization that things and things are not equivalent. If one does not focus on the important things, in the end they may all become urgent things</strong>.<br>Bringing this idea back to our reality of requirements management, you will find that <strong>in fact, the priority ranking used for the various requirements faced by the team is basically in order of urgency</strong>, but are they really important?<br>If you throw this question at the person who created the requirement, I’m almost certain that the answer they give you is that the requirement they created is important. One possibility is that they can’t tell the difference between important and urgent, just as we are sometimes confused.<br>Imagine two product managers show up in front of you, one tells you that the company wants to expand in a new direction and this feature has to be done, while the other says that the company wants to further profitability and that feature has to be done. To you, they both say the right thing, and both sound pretty important. But the bone-chilling reality is that you put both things next, and what awaits you is an exhausting task that can’t be completed. What can we do at this point? Jump out of this context and into a larger context. <strong> You can’t judge which need is more important, so ask a higher level boss to do so. </strong><br>A few more words of divergence, for people to do the same to constantly expand their own context, which is what we often say to increase knowledge. Many so-called life problems are caused by limited insight. For example, if you feel that there are always people in the company and you than the technology, such as the long-term vision, put yourself on the level of the whole industry to compare. Because you are working for your own career, not a company.<br>After the decomposition of the requirements, the most important thing is, to arrange the priority of the requirements. There are many ways to prioritize, we can take a cue from time management and divide things according to the dimensions of importance and urgency to get four quadrants. We need to focus on the important things as much as possible, rather than the urgent things as a way to prioritize.<br><strong>Breaking down requirements into smaller pieces actually breaks down the context</strong> that was originally unified. If you want to manage requirements effectively, especially to determine how important things are,<strong> one way is to retrieve the lost context</strong>. If we can’t determine the context ourselves, a good way to do that is to <strong>bring in a larger external context</strong>.<br><strong>How to make a product with minimum cost? </strong><br>Our instinct, of course, is to implement everything and then test it, but the world doesn’t stop and wait for us. Time and time again, we have been taught that “hold back” waterfall software development has become an anachronism. So how do we achieve our vision? The only way is to break it down.<br>As we mentioned earlier, Lean Startup is about validating product ideas in the real world through continuous experimentation, and one of the key practices is Minimum Viable Product (MVP), which we will discuss this time.<br>Let’s start with “minimal”. Here the “minimum” refers to the minimum cost. How to call the minimum cost, is not to do what can not do, can simplify things to simplify.<br>First of all, we must be clear about one thing, what we want to do is to verify the feasibility of an idea, not even to develop a software, developing software is just a means of verification.<br>Many programmers have a misconception that it is easy to treat the solution as a problem. We develop software for the purpose of solving problems, wouldn’t it be better if we solved the problem without writing the software.<br>The first step was to verify whether such an idea was feasible. We made a product document, as if we already had the product, and asked our sales colleagues to take the document to the customer to see how the customer reflected on the idea. In the process, we validated the basic idea that the need for IoT transformation of existing devices existed, and when customers saw such a thing, all kinds of ideas and requirements popped up. In addition, we gained an additional benefit, we knew the price range that customers would accept for such a product, which helped the team to price the product appropriately. Having validated the directional ideas, we moved on to the specific product design phase. What we wanted to verify in this phase was whether the product design we gave was acceptable to the users. So, we decided to make the interaction of this product. Thanks to the rapid development of prototyping tools, we made a relatively complete user interface with a prototyping tool and made all kinds of interaction flows. To the user, this is almost complete software.<br>After “minimal”, let’s look at “feasible”. <strong> Feasible is to find a path to give the user a complete experience. People who come from a programmer’s background always know software systems module by module, and the relatively weak aspect is the lack of a complete picture</strong>. But from the perspective of product viability, we need to shift our thinking, not a module to do how complete, and a user path is smooth<br>When time is limited, we need to learn to find a viable path to find a balance between a complete user experience and a complete system.<br>Step by step, we launched a relatively complete P2P platform. In this process, we put new features on line at each stage, and from the user’s visible point of view, what he sees is always a complete platform, the changes of which can only be seen clearly from the perspective of the internal implementer. (For example, the repayment function, although it is one of the complete life cycle, no user will use it in the first month, so the scheduling can be a bit later)<br>To use the concept of minimum viable product well in practice is to find a viable path at minimal cost. <strong>Minimal cost means not doing what can be done and simplifying what can be simplified. </strong><br>Programmers are usually willing to solve problems with their own code, and writing code is usually a very costly solution, which should be the final product solution. The path that works is a complete user experience path, at least in the eyes of the user.<br>We often want to give our clients a complete system, but with limited time, we must learn to break it down.<br>If there’s only one thing you can remember from today, remember this: the most viable way to do good product development is to use MVP.</p><p>In this module, we learned some best practices:<br>Test Pyramid<br>— Best practices for testing portfolios in the industry.<br>— Writing more unit tests is key.<br>Test Driven Development<br>— The rhythm of test-driven development is: red - green - refactoring, refactoring is the key to test-driven development area different from test first.<br>— Some people understand test-driven development as test-driven design, and it brings a change in thinking to the industry to write testable code.<br>Eisenhower Matrix (Eisenhower Matrix)<br>— Divide things according to importance and urgency.<br>— The important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible.<br>Minimum Viable Product<br>— products that are “just right” for our customers’ needs.<br>— in practice, to find a viable path at minimal cost.<br>In addition, I mentioned a number of practices and rubrics that can be applied directly in the workplace:</p><ul><li>Try not to write static methods;</li><li>A master branch development model as a better development branch model;</li><li>Good user stories should conform to the INVEST principles;</li><li>Estimation is a process of deepening understanding of requirements, and good estimation is based on task decomposition;</li><li>A good test should comply with A-TRIP.</li></ul><p>I’ve also taken you through some important ideas to help you better improve your own development work::</p><ul><li>Divide and conquer, a basic human problem-solving tool;</li><li>Software change costs, which increase over time and in development phases;</li><li>Testing frameworks that introduce automated testing as a best practice into the development process, allowing testing actions to be fixed by standardized means;</li><li>Extreme programming is called “extreme” because the idea behind it is to push good practice to its limits;</li><li>The secret of the master programmer’s work is task decomposition, down to the micro-operations that can be performed; arranging development tasks in the order of complete implementation of a requirement.</li></ul><h2 id="Communication-Feedback"><a href="#Communication-Feedback" class="headerlink" title="Communication Feedback"></a>Communication Feedback</h2><p>We work hard to learn all kinds of knowledge in order to better understand how the world works, and communicating feedback is the best way for us to interact with the real world.<br>When several people discuss a problem together, someone else often just starts a conversation, he thinks he has understood the idea of others, and then starts to express his own point of view. The information is incomplete, so how can we talk about decoding. So, development team discussions often involve one person talking about something but getting off topic. We have to accept feedback from the real world if we want to make our work life better, and accepting feedback from the real world requires us to, first, open our own receiver to accept the signal in and let the feedback in, which is the premise of decoding; second, expand our insight and improve the effect of our decoder to better understand what others want to express in the end. Having said that the encoder and decoder may have problems, let’s look at another problem that may cause impact: codec algorithm, that is, how to coordinate the two sides of communication to communicate more effectively.<br>Life is not as good as it should be. A big reason why many people have so many bad things is that we have a lot of unrealistic fantasies about the real world, and good intentions do not drive the world, and this is also true in software development. Although people and people live in one world, their understanding of the world is very different.<br>Improving codecs requires several perspectives: encoders, which allow for more accurate information output; decoders, which reduce signal filtering and improve decoding capabilities; and codec algorithms, which are various “best practices” from the industry that coordinate both sides of the communication.<br>Write code in the language of the business, one is highly readable, the other is able to identify the constant and changeable parts of the code, better practice design patterns, and achieve domain-driven design<br><strong>Lightweight Communication</strong><br>The meeting is to solve the problem, but the real situation is to open the meeting and did not solve many problems, this is a strange contradiction. Thinking back, have you ever attended a meeting that worked particularly well? In my career, where the effect of the meeting is particularly good, basically used to do information synchronization. For example, the leader announces a thing, this kind of meeting will hardly waste time. The message is announced, everyone receives it, and it ends. And what is a bad meeting like? Almost all of those discussions, you say one thing and I say another, each meeting almost without exception, there are a few good at interrupting, this meeting will basically run out of time, the time will be so minute by minute.<br><strong>The first action item to improve the meeting is to reduce the number of people involved in the discussion</strong>. Some people will say, “I have several topics for this discussion, and each topic requires different people to participate, so what you need to do is to find these people separately to discuss specifically, instead of putting everyone together. Compared to the meeting format, face-to-face communication is not possible because of the limited attention span and the number of participants is not too large. Also because the number of participants is relatively small, each person’s input will be a little more.<br><strong>The second action item is, if you want to discuss, find people to communicate face to face. </strong>If there is an issue that needs to be discussed, what I want to do is to find the relevant people to discuss it separately for the topic of concern, and then, I will summarize the results of the discussion and then go back to seek everyone’s opinion. If everyone agrees, I will choose to meet only. This time, <strong> the purpose of the meeting is no longer a discussion, but a synchronization of information </strong>: I am ready to do so, the relevant parties have agreed, to inform everyone, end.<br>Try to communicate in a more visual way.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112178/origin-of-ray/1669902990925-8a11e407-496a-4218-b2ad-770dd8554be1.png_averageHue_23edeeee_clientId_u496d162f-a4d1-4_from_paste_height_1168_id_ud3c871f5_name_image_aakl9n.png" alt="image.png"><br>The birth of continuous integration is the result of people trying to shorten the integration cycle. Why shorten the cycle time? Because we want to get feedback as early as possible to know if the results of our work are working. So, to do continuous integration well, you need to go along with the essence of <strong>continuous integration: getting feedback on your work as soon as possible</strong>.<br>From there, we get to the key point of <strong>continuous integration, you just have to remember the phrase, quick feedback</strong>.<br>Quick feedback, this sentence is divided into two parts, quick and feedback, which leads to two important goals of <strong>continuous integration: how to get feedback quickly, and what kind of feedback is effective</strong>.<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670545816448-b0372507-d4ed-4351-8b1b-278b49a0797a.png#averageHue=%23fdfdfd&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=595&amp;id=u656beaf1&amp;name=image.png&amp;originHeight=1190&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244883&amp;status=done&amp;style=none&amp;taskId=uf9db3aa5-fa20-4d6f-8e7e-2c758351358&amp;title=&amp;width=1142" alt="image.png"><br>What is replay? A replay is a Go term that means that after a player has played a game, he replayed the game to see what went well, what didn’t go well, what could have been played differently or even better, etc. <strong>This way of restoring the process and discussing and analyzing it is a replay</strong>. <strong>This way of restoring the process, discussing and analyzing it, is replay</strong>.<br>Nowadays, the concept of review has been used in many aspects, such as stock market review, business management review, and it has become the most important tool for many people to help individuals and enterprises to continuously improve. The most famous one is Liu Chuanzhi, the founder of Lenovo, who even wrote “review” into the core values of Lenovo. Why is it so useful to review? In my opinion, there is an important reason, lies in the <strong>objectification</strong>. As the saying goes, the authorities are confused, the onlookers are clear. Using our software development as an example, when solving a problem, we focus more on the problem itself and rarely think about how the problem was caused. <strong>When you review the problem, you will stand in a different perspective to think about what caused the problem. At this time, you are no longer the person involved, but have become a bystander. </strong>You observe the process of how that original thing happened, as if someone else was doing it. You go from a subjective perspective to an objective one. Seeing things from someone else’s perspective is objectification.<br>If your team can see the root cause at once is good, but if not, then it is best to ask more why. How to ask, there is a common practice is: 5 Whys (5 Whys). This practice was introduced by Saji Toyoda, the founder of the Toyota Group, and has since become widely known with the Toyota Production System. Why do you need to ask more whys? Because the initial question, you can get only the surface reason, only a few more whys, you can find the root cause. Let me give you an example. The server often returns 504, so we can use the “5 Whys” approach to ask.</p><ol><li>Why is there a 504? Because the server takes longer time to process and timeout.</li><li>Why does it time out? Because the Redis behind the server query is stuck.</li><li>Why is accessing Redis stuck? Because another service updating Redis deleted a large amount of data and then, when it was reinserted, the server blocked.</li><li>Why does it delete data in bulk and reinsert it? Because the update algorithm is not designed properly.</li><li>Why does an ill-designed algorithm go live? Because this design was not reviewed according to the process.</li></ol><p>More close to the user, in order to understand what their code is used to do, but also in the discussion of requirements to better understand which needs are necessary<br>As a programmer, overcoming technical challenges is an important part of our job, so we subconsciously throw ourselves into them as soon as they arise. But is this really the best approach? Not really, <strong>not all problems are technical challenges worth solving. </strong><br>There is an important principle of writing programs called Fail Fast, what does this mean? It means that if you encounter a problem, report the error as early as possible.<br>What are you going to do if the configuration file is missing an important parameter, for example, the maximum number of database connections? Many people will choose to give a default value, which is not a Fail Fast approach. Since it is an important parameter, reporting an error if it is missing is called Fail Fast.<br>In fact, <strong>Fail Fast also smacks of something counter-intuitive; many people are compatible with a lot of weird problems on the grounds of building robust systems, rather than exposing it. Instead, they hide the bugs in the system</strong>. We all know that relying on debug to locate problems is one of the most time-consuming and costly practices. So, don’t be afraid to report problems with the system early.</p><h2 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h2><p>In my opinion, it is important to do what is valuable, not just what is “done”, but also what is valuable in terms of time and cost savings by “not doing”. Two of my colleagues prevented the client from wasting money, so I view this project as a success.<br>For development, the same reasoning is followed. Programmers as a group are so technically competent that it is simply too intuitive to make a technical solution, we just faithfully make one requirement after another and automate “the world”. <strong>But the truth is, too much of the world’s waste is doing things that shouldn’t be done. </strong>In our column, I repeatedly say that we need to ask more questions in order not to do things that we shouldn’t do.<br><strong>Beware of NIH syndrome</strong><br>You can judge from the perspective of the requirements of which work can not be done, but we also want to prevent programmers themselves “add drama”, I will tell you a common problem of technical personnel: NIH syndrome (Not Invented Here Syndrome).<br>For example, this kind of chaos in the field of front-end also appeared, a variety of frameworks, so many front-end programmers cry, really can not learn. Another example is that I once interviewed a programmer who had contact with Go earlier, and he just couldn’t wait to write all the frameworks himself.<br>Having said that, it’s just to illustrate one thing<strong> Before writing code, ask yourself if you really want to do it? Don’t do it if you can, until you have enough reason to do it. </strong> Corresponds to Larry Wall’s statement that you have to be lazy and put a lot of effort into circumventing the energy drain.<br>In general, there are several different environments when building an infrastructure for continuous delivery, as described below.</p><ol><li>Continuous integration environment, continuous integration is a prerequisite for continuous delivery, this process is mainly to perform basic checks and hit a package that can be released.</li><li>Test environment (Test), this environment is often stand-alone, mainly responsible for functional verification, where the tests run are basically acceptance test level, and generally put the unit tests and integration tests and other tests that are executed faster into the continuous integration environment to execute.</li><li>pre-production environment (Staging), this environment is usually the same as the production environment configuration, for example, load balancing, clustering and so on should have, but the number of machines will be less, is mainly responsible for verification of the deployment environment, for example, can be used to find some problems brought about by the concurrency of multiple machines.</li><li>production environment (Production), which is the real online environment.</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112199/origin-of-ray/1670548946042-82f31fce-91f5-49a5-9e76-a8981ec76fe9.png_averageHue_23f8f7f7_clientId_u3a9da171-cf06-4_from_paste_height_551_id_u8619be65_name_image_keqa8u.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112216/origin-of-ray/1670548966490-daed7c11-d337-4904-9721-51cc1be48350.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_737_id_u62feb077_name_image_x6u6xh.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112236/origin-of-ray/1670549025670-7d994107-12f6-412d-9007-62cf3d1a161b.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_734_id_u59f6a867_name_image_xvvqi1.png" alt="image.png"><br>Ensure your code is not too confusing: the SOLID principle</p><p>Today, we start with a segment of the software industry. Party A wants to do an e-commerce website, as party B programmer asked: “What kind do you want to do?” Party A said, “Like Taobao is good.” The programmer asked, “How much are you going to pay?” Party A thought about it, “50,000 yuan is about right!”<br>This is, of course, a flirtation with the customer does not understand the requirements of the paragraph, but have you ever thought, <strong> Why in the A does not seem to be a complex system, you find it difficult? Because what you want is simply not a thing</strong>.<br>In the customer’s opinion, what I want is a website where I can buy things. As long as the product can be online, the user can see and buy it, 50,000 yuan is almost enough.<br>And what you think in your head is, “Taobao ah, that has to be a big technical challenge ah, every year to the ‘double 11’, that will have to consider all kinds of concurrent snapping. Taobao has to have how many programmers, 50,000 you want to do a, the door is not.”</p><p><strong>When doing a new project, it is not necessary to consider too many imaginary needs, the most important thing is to do two things well</strong></p><ol><li><strong>analysis of requirements, good domain division and abstraction (</strong>the higher level of abstraction the more stable, the more detailed things are easy to change<strong>), to ensure the scalability of the architecture </strong></li><li><strong> Minimize the introduction of various frameworks, or to ensure that the framework is pluggable and can be quickly replaced </strong></li></ol><p>Reviewing the above process, you can see that each time the original technology cannot meet the needs as the business volume grows, so it is necessary to solve the problem with new technology. The key point here is: different business volumes.</p><p>A system that serves only a few people, a single machine is enough, and a programmer just starting out can implement this system very well. When the volume of business reaches the point where a single machine cannot resist, it needs to be handled by multiple machines, and this time the problem of distributed systems must be considered, and middleware may have to be introduced appropriately. And when the system becomes to provide services for a huge amount of business, there is no which has been built to help the middleware, need to solve the problem from the bottom themselves. Although these systems seem to be the same in business, in technical terms, a system faces different problems at different stages, because it faces different levels of business. To be more precise, systems of different magnitudes are not a system at all.<br>In the previous example, the real driver for Taobao’s engineers to improve the system is not the technology, but the complexity of the problem due to the escalating business volume. Therefore, assessing the current stage of the system and using the appropriate technology to solve it is the most important thing we should consider.<br><strong>Then remember: use simple techniques to solve problems until they become complex. </strong><br>Maybe you’ll say, what if I make a system that doesn’t have that much business and I still want to improve my skills? The answer is to go to a place where there are good problems. Nowadays, the IT industry offers many opportunities for programmers, and it is not difficult to find a place with good problems, but of course, the prerequisite is that you have the basic ability to solve problems yourself.</p><p><strong>How to do microservices</strong><br>Let’s start by answering the question, why do we want to do microservices? The standard answer to this question is that microservices are small enough, easier to understand in code, easier to test, and simpler to deploy compared to monolithic services (Monolithic). All of this makes sense, but it is the result of doing microservices well.<br>How can we get to this state? There is a key factor, how to divide microservices, that is, how to decompose a huge system in a way. This is the most lacking in many discussions about microservices, and is the fundamental reason why many teams do “microservices” but die hard.<br>Without understanding this, write services that either call each other from service to service, causing the whole system to execute very inefficiently, or you need to spend a lot of effort to solve the data consistency between the various services.<br><strong>In other words, a poorly delineated service awaits the team in an endless quagmire of contingent complexity. Only when microservices are delineated correctly will it be what you have in mind to aspire to. </strong><br><strong> And how should you divide microservices? You need to understand domain-driven design. </strong><br>Domain Driven Design (DDD) is a methodology proposed by Eric Evans for moving from systems analysis to software modeling. What is the problem it is trying to solve? It is to transform business concepts and business rules into concepts and rules in software systems, so as to reduce or hide business complexity and make the system more scalable to cope with complex and changing real business problems.<br><strong>What exactly does DDD say? It pulls your starting point of thinking from a technical perspective to the business. </strong><br>We’ve mentioned this many times in this column. DDD is based on the Ubiquitous Language, which allows business people to speak the same language as programmers. This is something I mentioned in “21 | Who do you write code for? I’ve already mentioned this in 21 | Who do you write code for? Using a universal language is the same as pulling the level of thinking from the code details to the business level. The higher the level of abstraction the more stable it is, and the more detailed it is the more likely something will change.<br>With a common language as the foundation, it is time to move on to the practical aspects of DDD. <strong>DDD is divided into Strategic Design and Tactical Design. </strong>DDD is divided into Strategic Design and Tactical Design.<br>Strategic design is the high-level design that helps us divide the system into different domains and deal with the relationships between them. I gave you the example of “orders” and “users” in the previous section. This is the fundamental solution to the problem, otherwise, no matter how well you write your code, confusion is inevitable. And this way of thinking in terms of business is what DDD strategic design brings to me. Tactical design, usually refers to how to organize different domain objects within a domain at the technical level. As an example, domestic programmers like to use myBatis for data access instead of JPA, the common reason is that JPA has too poor performance in case of association. But the real reason is that the associations are not designed well.<br>After all, what does this have to do with microservices? The real difficulty of microservices is not the technical implementation, but the business segmentation, which happens to be the strong point of Bounded Context in DDD strategic design.<br>Although a common language bridges the gap between business and technology, computers are not good at dealing with ambiguous human language, so a common language must be expressed in a specific context to be clear. Like the “order” example we talked about, the “order” of a transaction is different from the “order” of logistics, and they both have their own contexts, and that context is the bounding Context.<br>It delimits the boundaries of the free use of the common language, and once outside the boundaries, the meaning is not guaranteed. It is because of the boundary that a bounded context can become just a separate deployment unit, and that deployment unit can then become a service.<br><strong> So to do microservices well, the first step should be to identify the bounding context. </strong><br>As you can see, each bounding context should be independent, and there should not be a lot of coupling between each context.<strong> The large number of mutual invocations between microservices that plague many people is itself a pseudo-proposition brought about by a failure to delineate the boundaries, relying on technology to solve business problems</strong>, with half the effort.<br>With a bounded context you can do microservices, right? Wait a minute!<br>In my humble opinion, it is not very easy to draw the boundaries clearly at once. It is much easier to adjust when everyone is in one process. Then, let the different bounding contexts evolve independently on their own first. Wait for it to evolve to the point where it’s worth deploying independently, and then think about microservice splitting. By then, you’ve also learned all sorts of techniques about microservices that should come in handy!</p><p>DDD and lean startup, microservices division is similar, both need to delineate the contextual boundaries, cut with the simplest way to achieve the needs of the moment, and then gradually expand (need good design to ensure scalability) lean startup is actually a continuous validation, verify the validity of the idea, to obtain the validated knowledge (Validated Learning).</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112260/origin-of-ray/1670740142955-ce3186d8-a3eb-425b-bc3f-d4f14ed071fe.png_averageHue_23f6f6f6_clientId_uec93d73b-3fc1-4_from_paste_height_1592_id_u97ed25ef_name_image_jwyysc.png" alt="image.png"></p><p>If you understand the business, you can deduce the basic code structure yourself. But conversely, if you are asked to look at the code and deduce the business from it, it is almost impossible.<br>In fact, every time I learn about a business, I go over in my head how I would do it if I were doing it. This way, I will have a preconception on the whole first, and then correspond to the actual code later, so it will not be so strange. To understand the business, I usually ask someone to tell me what the business does, what kind of problem it solves, what the specific business process is like, and so on.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112273/origin-of-ray/1670740542457-15af9ad4-a2e9-402f-9cc0-e6c51d46db57.png_averageHue_23f2f2f2_clientId_uec93d73b-3fc1-4_from_paste_height_429_id_u4aff8d90_name_image_ihfmvt.png" alt="image.png"><br>To revamp the legacy system, I will give you a few suggestions:</p><ol><li>building a test protection network to ensure consistent functionality of old and new modules;</li><li>divided into small pieces and gradually replaced;</li><li>constructing a good domain model;</li><li>Find the latest understanding of system building in the industry.</li></ol>]]></content>
    
    
    <summary type="html">The technology that programmers master is called information technology and is designed to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI has brought us in the end</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Implementation of AVL Tree</title>
    <link href="https://sunra.top/en/posts/5250/"/>
    <id>https://sunra.top/en/posts/5250/</id>
    <published>2023-02-02T02:56:03.000Z</published>
    <updated>2023-06-12T00:06:43.938Z</updated>
    
    <content type="html"><![CDATA[<p>Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.</p><p>An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.</p><span id="more"></span><h1 id="Fundamentals"><a href="#Fundamentals" class="headerlink" title="Fundamentals"></a>Fundamentals</h1><p>Not much to say about BST, it is relatively simple, that is, the left child of each node is smaller than the root node, the right child is larger than the root node, just pay attention when inserting.</p><p>But there is a problem with BST, for example, inserting 1, 2, 3, 4, 5, 6 in sequence, then we will end up with a tree with only right children, in fact, this BST has degenerated into an ordinary chain table, so we need some way to keep this tree balanced, and the way to keep it balanced is as follows:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1675307019/origin-of-ray/912c7f2fdaf3490689db1a7144775b11_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0_qzoplx.webp" alt=""></p><h1 id="Specific-implementation"><a href="#Specific-implementation" class="headerlink" title="Specific implementation"></a>Specific implementation</h1><h2 id="Four-types-of-imbalance"><a href="#Four-types-of-imbalance" class="headerlink" title="Four types of imbalance"></a>Four types of imbalance</h2><h3 id="Left-right-situation"><a href="#Left-right-situation" class="headerlink" title="Left-right situation"></a>Left-right situation</h3><p>In this case to rotate right and then return the new root node after the rotation, the code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">    node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">    avlNode.<span class="property">right</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Right-right-situation"><a href="#Right-right-situation" class="headerlink" title="Right-right situation"></a>Right-right situation</h3><p>In this case to rotate left and then return the new root node after the rotation, the code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">    node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">    avlNode.<span class="property">left</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Circumstances"><a href="#Circumstances" class="headerlink" title="Circumstances"></a>Circumstances</h3><p>In this case, the left child node of the root node should first be left rotated to become the left-left case, then the root node should be right rotated, and then the new root node should be returned after the rotation, with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Right-left-case"><a href="#Right-left-case" class="headerlink" title="Right-left case"></a>Right-left case</h3><p>In this case, the right child node of the root node should first be rotated right to become the right-right case, then the root node should be rotated left, and then the new root node should be returned after the rotation, with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fix-the-imbalance"><a href="#Fix-the-imbalance" class="headerlink" title="Fix the imbalance"></a>Fix the imbalance</h2><h3 id="Get-the-height-of-the-node"><a href="#Get-the-height-of-the-node" class="headerlink" title="Get the height of the node"></a>Get the height of the node</h3><p>When we do balancing, we need to determine whether we need to balance and what kind of imbalance is the case so that we can choose a different rotation method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// The height of the empty node is 0</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Post-order traversal is used here, because the result of each recursion requires the result of the child node recursion</span></span><br><span class="line">    <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The node height is the greater of the left and right subtree heights plus 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Balance"><a href="#Balance" class="headerlink" title="Balance"></a>Balance</h3><p>Balances the subtree with node as the root node and returns the new root node.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// Empty nodes do not need to be balanced, return empty nodes directly</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the height of the left and right subtrees</span></span><br><span class="line">    <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the height of the left subtree is greater than the height of the right subtree by more than 1, it is unbalanced and there is an implied logic that the left subtree of the left subtree must not be empty</span></span><br><span class="line">    <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Left-left situation, direct right rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Left and right situation, first left rotation then right rotation</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Right-right situation, direct left rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Right-left situation, first right, then left</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the new root node of the balanced subtree</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Basic-operation"><a href="#Basic-operation" class="headerlink" title="Basic operation"></a>Basic operation</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>Inserts a new node and returns the new root node</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The most important thing to understand about this code is that this recursive function returns the root of a new subtree each time a newNode is inserted and balanced on a tree with a node node as the root node.</span></span><br><span class="line">#<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// If the root node is empty, return the newNode directly as the root node</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If the value of the new node is smaller than the current node</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the left node is empty, then the new node will be treated as the left child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the left child node is not empty, then insert a new node into the left subtree and use the root node of the new subtree returned after the insertion as the left subtree</span></span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the right node is empty, then the new node is treated as the right child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">right</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the right child node is not empty, then insert a new node into the right subtree and use the root node of the new subtree returned after the insertion as the right subtree</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Balance after insertion and return the root node of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// Insert the newNode from the root, and reassign the root to ensure the next call is correct</span></span><br><span class="line">    <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h3><p>This is relatively simple, and not much different from BST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Delete the node with the value val from the subtree with node as the root and return the root of the new tree after balancing</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="comment">// If node is null, the tree is empty and does not need to be deleted, and the root node of the new tree is also null</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// If the node to be deleted is found</span></span><br><span class="line">    <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// The node to be deleted has both left and right subtrees</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">            <span class="comment">// Then find the right subtree of the node</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">            <span class="comment">// Then look for the left subtree all the way down the right subtree</span></span><br><span class="line">            <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                p = p.<span class="property">left</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Then replace the result in the current node, because the leftmost child node in the right subtree must be smaller than the rest of the nodes in the right subtree, while raining all the nodes in the left subtree</span></span><br><span class="line">            node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">            <span class="comment">// The previous step just replaces the node value, but the node is still there. We need to remove the node from the right subtree and return the new right subtree as the right subtree of the node after balancing.</span></span><br><span class="line">            <span class="comment">// And remember, at this point we are deleting p.val, not val, because we have already put p.val into node.val, and this p has the property that it has no left child node at least, and the next time the seat will enter the immediately following else logic</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If you don&#x27;t have both left and right subtrees, just replace them and delete the original ones</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">            node = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is smaller than the current one, go to the left subtree and delete it</span></span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is larger than the current one, go to the right subtree and delete it</span></span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the root of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Complete-code-and-tests"><a href="#Complete-code-and-tests" class="headerlink" title="Complete code and tests"></a>Complete code and tests</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AvlTree</span>&#123;</span><br><span class="line">    #<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">        node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">        avlNode.<span class="property">left</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">        node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">        avlNode.<span class="property">right</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">left</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">right</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_inOrder</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> stack = [node];</span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line">        <span class="keyword">while</span>(stack.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (current ! <span class="literal">null</span>) &#123;</span><br><span class="line">                current.<span class="property">right</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">                stack.<span class="title function_">push</span>(current, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                current.<span class="property">left</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = stack.<span class="title function_">pop</span>();</span><br><span class="line">                result.<span class="title function_">push</span>(current.<span class="property">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#_root= <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">_inOrder</span>(<span class="variable language_">this</span>.#_root);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">left</span>))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">                <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                    p = p.<span class="property">left</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> avlTree = <span class="keyword">new</span> <span class="title class_">AvlTree</span>();</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">8</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">9</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">14</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">15</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">16</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">17</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">18</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">19</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">20</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">21</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">11</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">31</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">61</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">111</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">221</span>));</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">20</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">1</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">11</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">221</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">8</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">4</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.&lt;/p&gt;
&lt;p&gt;An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Analysis Patterns - Reusable Object Model</title>
    <link href="https://sunra.top/en/posts/29283/"/>
    <id>https://sunra.top/en/posts/29283/</id>
    <published>2023-01-26T03:10:44.000Z</published>
    <updated>2023-06-12T00:06:43.938Z</updated>
    
    <content type="html"><![CDATA[<p>Recently read the book “Analysis Patterns - Reusable Object Model”, this book is considered an enlightening book on DDD, read the completion or benefit a lot, on the one hand, many points and the usual work of mutual evidence, very inspired, on the other hand, learned some business modeling patterns, this article mainly summarizes the inspiration received This article mainly summarizes the inspiration received and modeling principles, specific modeling approach to give an example to experience it.</p><p>Here are a few of my most rewarding points in brief:</p><ul><li>An important principle of object development is that the structure of the software reflects the structure of the problem.</li><li>The coupling caused by the problem not sorted out clearly is not solved by design patterns, such as logistics and orders, they use the same data table, they need to sense each other, then they must be coupled together in some way, belonging to the essential complexity, this coupling is not decoupled by a good design pattern, even if they are two systems, they have to be together alteration.</li><li>The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of other business areas of knowledge, then in fact, or coupling.</li><li>If there have to be connections between different domains, try to minimize two-way connections, each of which introduces higher complexity into the system.</li><li>In the beginning of the system to minimize the complexity of the system at the same time, keep open to changes, that is, the principle of open and closed, unless very necessary, do not come up to introduce a lot of third-party tools, to consider the introduction cost of these tools, maintenance costs, upgrade costs, and even opportunity costs, and do not come up to engage in any microservices, microservices are best from a mature system after verification of stable business areas Microservices are best incubated from a proven and stable business area in a mature system, otherwise, microservices on pure technical architecture will only increase the overall complexity and risk of the system.</li></ul><span id="more"></span><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>We can simply divide the architecture design into horizontal and vertical divisions. The horizontal division, which addresses the business architecture, is to reduce the essential complexity of business logic and reduce the coupling between business domains, while the vertical architecture addresses non-functional requirements, such as improving stability, throughput rates, etc. through technologies such as caching layers, message queues, etc. </strong></p><p>Our focus in this paper is to address some of the principles of horizontal architectural design.</p><p>The purpose of analysis is to understand the problem, which, in my opinion, can be more than just a process of using use cases to enumerate requirements. Use cases are valuable, if not essential, in the system development process, but capturing such use cases does not mean the end of the analysis. Analysis also involves looking beyond the surface requirements to propose a mental model that reflects the underlying mechanisms of the problem.</p><p>Consider writing software that simulates a billiard game, which can be evaluated by describing the use case of a surface feature: “The player hits the white ball, causing it to move at a certain speed, and then the white ball hits the red ball at a certain angle, causing the red ball to move a certain distance in a certain direction.” One could shoot such an event hundreds of times and measure the speed, angle and distance the ball moved. However, I am afraid that this alone is not enough to write a good simulation program. To write a good program, one needs to look beyond the surface phenomenon to understand the underlying laws of motion, including mass, velocity, momentum, etc.</p><p>Problems like the game of billiards are not rare because the laws of these sports are widely known. Then in many companies, the basic mechanisms at this level are not well understood and need to be diligently discovered.</p><p>There is no right or wrong model, the key is which model is more suitable.</p><p>The choice of model may affect the flexibility and reusability of the developed software. For software like a billiards tournament, you might advocate using the Einstein model because the developed software can be flexible enough to handle atomic collision problems. But this is a more dangerous way to handle it, because <strong>introducing too much flexibility may lead to an overly complex system, which is a bad engineering practice</strong>.</p><p>One of the main reasons for using analysis and design techniques is to involve domain experts, which is essential for conceptual modeling. Effective models can only be built by people who really understand the domain, people who work full time in the field. it skills neither help nor hinder modeling skills.</p><p>Analytical techniques should be independent of each other and software techniques, and ideally, conceptual modeling should be completely independent of software techniques, as in the case of the laws of motion described above. This independence prevents the technology from hindering one’s understanding of the problem, and the resulting model is equally valid for all software technologies.</p><p>Closely related to the conceptual model is the software interface rather than the software implementation.</p><h1 id="Some-modeling-principles"><a href="#Some-modeling-principles" class="headerlink" title="Some modeling principles"></a>Some modeling principles</h1><p>Here is a list of some modeling principles in the book, in fact, these principles and the principles of design patterns are similar, they just focus on different points.</p><ol><li>The modeling should minimize the number of types affected by the part of the model that changes most frequently. (This point is actually related to the design pattern’s separation of parts that are prone to change from those that are not.)</li><li>When defining characteristics for types with supertypes, consider whether it makes sense to place these characteristics on the supertype.</li><li>The model should be explicitly divided into an operational layer and a knowledge layer. For example, the configuration class files or some custom semantics that we can parse are the knowledge layer, which defines the relationships between classes and certain principles of program operation, while the specifics of how to instantiate classes belong to the operational layer.</li><li>When multiple attributes interact through behaviors that can be used in several types, these attributes should be combined into a new basic type. For example, if our system involves a large number of different units of data, we can combine units and values from these data into a quantity type.</li><li>The operational layer contains those concepts that change on a daily basis and whose configuration is bounded by the knowledge layer, which will change much less frequently. The frequency of change here refers to runtime changes.</li><li>If a type has very many similar associations, then abstract these associated objects into a new type and then create a knowledge layer to distinguish them.</li><li>To record the change history of a value, an account should be created for that value.</li><li>When using the account, the following conservation principle should be followed: the recorded items cannot be created or destroyed, and can only be transferred from one place to another, which makes it easier to find and avoid vulnerabilities.</li><li>To understand how a calculation is performed, you can represent the result of the calculation as an object that is used to remember the calculation that created it and the input values that were used.</li><li>When there are multiple equivalent feature sets to choose from, pick the one that the domain expert thinks is most appropriate, and if the domain expert thinks both are very valuable, then extract both and mark one of them as a derivation.</li><li>Marking a feature as derived is only a constraint on the interface and does not affect the underlying data structure.</li><li>If a collection of objects can be created by different conditions, then a combination should be used.</li><li>When treating a process as a feature of a type, an abstract interface should be provided for the process so that its implementation can be easily changed through subclassing. For example, purely hard-coded implementations are one subclass, and various parameter-driven methods are other subclasses.</li><li>When multiple attributes interact in a behavior that may be used in more than one type, the attributes should be combined into a new basic type.</li><li>If the supertype applies to a narrower domain and the subtype applies to a wider domain, then generalization should not be used.</li><li>If the difference between two similar types is usually negligible, then use the abstract supertype. If the difference between the two is important, then do not use the abstract supertype.</li><li>If using an abstract supertype does not cause more work for the client, then this abstract type should be provided.</li><li>When some information may be both obtained directly from a source and calculated from other available data, an abstract interface should be provided with the two ways of obtaining and calculating information from the source as their respective subclasses.</li><li>When faced with several alternative methods, first choose the simplest method and then change to a more complex method as needed.</li><li>Follow the intuition of domain experts when it is difficult to choose among immediate modeling solutions.</li><li>Subtyping should only be used if all the characteristics of the supertype apply to the subtype and it is conceptually reasonable to say that every instance of the subtype is an instance of the supertype.</li><li>When the customer perspective sees that a single transaction can be divided into multiple transactions by the trader, the product and the contract should be separated. The key to the product-contract distinction is that the product represents the client’s intent, while the contract refers to the content of the actual transaction between the counterparty and the principal.</li><li>Do not repeat basic associations that have the same meaning. By following this principle, it is possible to obtain well-defined types of responsibilities.</li><li>There should be consistency in the assignment of responsibilities. Beware of the types who sometimes take responsibility for something and sometimes delegate that responsibility. (This behavior may be correct, but it should always be viewed with suspicion)</li><li>The choice between one-way and two-way associations requires a trade-off between low workload for type development staff (reduced coupling between types) on the one hand, and ease of use for type users on the other.</li><li>If a package only needs to see part of another package, consider splitting the latter package into two mutually visible packages.</li><li>The essence of subtyping is that it can be extended without the supertype knowing anything about it. It is often necessary to design some subtypes to gain experience and then abstract them.</li></ol><h1 id="Two-examples-of-analysis-patterns"><a href="#Two-examples-of-analysis-patterns" class="headerlink" title="Two examples of analysis patterns"></a>Two examples of analysis patterns</h1><p>Each box in the diagram represents a type.</p><h2 id="Responsibility-mode"><a href="#Responsibility-mode" class="headerlink" title="Responsibility mode"></a>Responsibility mode</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220145_aun9wt.jpg" alt=""></p><ul><li>The responsibility type is defined in the knowledge layer, and the responsibility type defines what kind of delegates can be selected by the responsible party which mapping relationship</li><li>Then the operational layer is to instantiate a responsibility, and to follow the specification in the responsibility type of the knowledge layer when re-selecting the participants in a specific responsibility</li><li>Each responsibility may have a time period that corresponds to an activity.</li></ul><h2 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220202_mjg72s.jpg" alt=""></p><ul><li>Each observation has its own participant</li><li>Observations can be subtyped as hypothetical, speculative and valid observations</li><li>Observations can also be subtyped as measurements and categorical observations, where the result of a measurement is a quantity (value + unit) and the result of a categorical observation is the presence or absence of it. As an example, blood pressure is a measurement, while high blood pressure is a categorical observation. Blood pressure, a measurement, can be inferred from blood pressure high, a categorical observation, and once the blood pressure measurement is wrong, this chain of inference should be directly negated by the chain.</li><li>At the knowledge level, observation has its own protocols, that is, how it is carried out</li><li>The type of phenomenon in the knowledge layer, phenomenon and observation concept, specifies what the observation in the operational layer can be, e.g. blood pressure is a type of phenomenon, increase is a phenomenon, and increase in blood pressure is an observation concept, while observation concepts are inferred from each other.</li></ul>]]></content>
    
    
    <summary type="html">The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of knowledge of other business areas, then in fact, or coupling</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>function components and function programming</title>
    <link href="https://sunra.top/en/posts/9244/"/>
    <id>https://sunra.top/en/posts/9244/</id>
    <published>2022-12-10T00:51:27.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>Function programming and function components are a trend in development now. They have been used in the past, but they have not been understood conceptually. This article summarizes the two together and makes a certain comparison.</p><p>Function programming is a programming paradigm, and function components are a product of this paradigm.</p><span id="more"></span><h1 id="Function-programming"><a href="#Function-programming" class="headerlink" title="Function programming"></a>Function programming</h1><h2 id="Programming-paradigm"><a href="#Programming-paradigm" class="headerlink" title="Programming paradigm"></a>Programming paradigm</h2><p>Programming paradigm, programming paradigm, or programming paradigm, refers to a typical programming style in software engineering. Common programming paradigms are: function programming, imperative programming, procedural programming, Object Oriented programming, etc.</p><p>Programming paradigms provide and determine the programmer’s view of program execution. For example, in Object Oriented programming, programmers consider a program to be a series of interacting objects. Due to different methodologies, Object Oriented programming paradigms are further divided into class-based programming and prototype-based programming, while in function programming, a program will be regarded as a stateless sequence of function calculations.</p><blockquote><p>Programming paradigms are different from programming languages, such as Object Oriented languages. It only means that the language provides more convenient encapsulation, inheritance, and polymorphic syntax. It does not mean that you can only write Object Oriented code, nor does it mean that the code you write conforms to Object Oriented paradigm</p></blockquote><p>There are many more programming paradigms, here is the table of contents of Wiki Lingo:</p><ul><li>Imperative<ul><li>Procedural</li><li>Block structure</li><li>Structured</li><li>Modularization</li></ul></li><li>function<ul><li>First class function</li><li>Pure function</li><li>Implicit</li><li>Pattern matching</li><li>Derived formula</li></ul></li><li>Object Oriented<ul><li>based on class</li><li>Based on prototypes</li><li>Contractual</li><li>Face section</li><li>Agent oriented</li></ul></li><li>Array type</li><li>Data flow<ul><li>Synchronous</li><li>Responsive</li><li>Stream processing</li><li>Based on process</li></ul></li></ul><h2 id="Function-programming-is-a-programming-paradigm"><a href="#Function-programming-is-a-programming-paradigm" class="headerlink" title="Function programming is a programming paradigm"></a>Function programming is a programming paradigm</h2><p>Function programming, also known as function programming or functional programming, is a programming paradigm that treats computer operations as function operations and avoids the use of program state and mutable objects.</p><p><strong> In function programming, a function is a first-class object or a first-class function, which means that a function can either be used as an input parameter value for other functions, or return a value from a function </strong>, be modified or assigned to a variable. The lambda calculus is the most important foundation of this paradigm. The function of lambda calculus can accept function as an input parameter and output a return value.</p><p>Compared with imperative programming, function programming emphasizes the result of program execution rather than the process of execution, advocating the use of several simple execution units to make the calculation results gradual, and deriving complex operations layer by layer, rather than designing a complex execution process.</p><h2 id="What-is-function-programming"><a href="#What-is-function-programming" class="headerlink" title="What is function programming"></a>What is function programming</h2><p>These keywords can be extracted from the above definition:</p><ol><li>Avoid state changes</li><li>function as input and output</li><li>Related to λ calculus</li></ol><p>Regarding this definition, if you just want to briefly understand the manifestation of function programming, you can take a look<a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html">阮一峰的这篇博客</a></p><p>If you want a deeper understanding, it is also recommended to read the blog above first. It is very short, but it will help to understand the form of some of the formulas below.</p><p>Avoiding state changes and functions as input and output is easier to understand. What is lambda calculus? To understand lambda calculus, it will pull out Turing complete, Turing machine. Next, I will briefly explain to you.</p><h3 id="What-is-an-expression"><a href="#What-is-an-expression" class="headerlink" title="What is an expression"></a>What is an expression</h3><p>Lambda calculus (lambda-calculus) is a formal system developed from mathematical logic to study how functions are abstracted and defined, how functions are applied, and recursion, using rules for variable binding and substitution. It was first published by mathematician Alonzo Church in the 1930s. As a widely used computational model, the lambda calculus can clearly define what a computable function is, and any computable function can be expressed and evaluated in this form, which can simulate the computational process of a single tape Turing machine. However, the lambda calculus emphasizes the application of transformation rules rather than the specific machines that implement them.</p><p><strong> Lambda calculus is comparable to the most fundamental programming language, it includes a transformation rule (variable replacement) and a way to abstract the definition of function </strong>. Therefore, it is generally recognized as an approach that is closer to software than hardware. It has had a great impact on functional programming languages such as Lisp, ML, and Haskell. In 1936 Church used lambda calculus to give a negation of the Entscheidungsproblem: the proposition that two lambda expressions are equivalent cannot be determined by a “general algorithm”, which is the first problem that undecidability can be proved, even in<a href="https://zh.m.wikipedia.org/zh-cn/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98">停机问题</a>Before.</p><p>The lambda calculus involves constructing lambda terms and performing reduction operations on lambda terms. In the simplest lambda calculus, only the following rules are used to construct lambda terms:</p><div class="table-container"><table><thead><tr><th>Grammar</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>x</td><td>variable</td><td>uses characters or strings to represent parameters or mathematical values or to represent logical values</td></tr><tr><td>(λ x. M)</td><td>abstraction</td><td>A complete function definition (M is a lambda term), in which x in the expression is bound to the variable x.</td></tr><tr><td>(M N)</td><td>Apply</td><td>to function M on the parameter N. M and N are lambda terms.</td></tr></tbody></table></div><p>Generates an expression such as: (λ x.λ y. (λ z. (λ x.zx) (λ y.zy)) (x y)). If the expression is unambiguous, the parentheses can be omitted. For some applications, logical and mathematical constants and related operations may be included.</p><p><strong> The λ calculus is Turing complete, that is, it is a general model that can be used to simulate any Turing machine </strong>. λ is also used in λ expressions and λ terms to represent binding a variable to a function.</p><p>The lambda calculus can be typed or untyped. In typed lambda calculus (which is untyped as described above), the function can only be applied when the parameter types and input types match. Typed lambda calculus is weaker than untyped lambda calculus - the latter is the main part of this entry - because typed lambda operations express less than untyped lambda calculus; at the same time, the former allows more theorems to be proved. For example, in simple typed lambda calculus, the operation can always be stopped, while in untyped lambda calculus this is not necessarily the case (because of the halting problem). One reason there are many typed λ calculus is that they are expected to do more (something that previous typed λ calculus could not do) and at the same time hope to be able to prove more theorems.</p><p>The lambda calculus has many applications in mathematics, philosophy, linguistics, and computer science. It occupies an important position in programming language theory, and function programming implements lambda calculus support. Lambda calculus is also a research hotspot in category theory.</p><p>The lambda formula has three main points:</p><ul><li>Binding relationship. Variables are arbitrary, x, y, and z are fine, it is just a proxy for specific data.</li><li>recursion definition. The λ term recursion definition, M can be a λ term.</li><li>Substitution reduction. The λ term can be applied, and the space-separated representation applies N to M, which can be a λ term.</li></ul><p>By substitution and reduction, we can treat our calculus like a simplification equation.</p><p>For example, we just said ‘ (λ x.λ y. (λ z. (λ x.zx) (λ y.zy)) (x y)) ‘, first ‘ (λ x.zx) ‘ means’ f (x) = zx ‘, then’ (λ x.zx) 3 ‘is’ 3z ‘</p><h3 id="Calculus-Meaning-of-Variables"><a href="#Calculus-Meaning-of-Variables" class="headerlink" title="Calculus: Meaning of Variables"></a>Calculus: Meaning of Variables</h3><p>In λ calculus, our expression has only one parameter, so how can it achieve binary operations on two numbers? For example, addition a + b requires two parameters.</p><p>At this time, we need to treat the function itself as a value. We can save and pass data (or state) by binding a variable to the context and then returning a new function. The bound variable can be referenced from the context when it needs to be actually used.</p><p>For example: ‘λ m.λ n.m + n 5 = λ n.5 + n’, the first function call passes in m = 5, returns a new function, this new function takes a parameter n and returns the result of m + n. The context generated in this case, <strong> is Closure (closure, a common means of state preservation and reference in function programming) </strong>, and we call the variable m the context that is bound to the second function.</p><p>In addition to bound variables, λ calculus also supports free variables, such as this y: ‘λ m.λ n.m + n + y’, where y is a variable that is not bound to the parameter position, called a free variable.</p><p>Bound variables and free variables are two sources of state for a function, one can be substituted and the other cannot. In actual programs, bound variables are usually implemented as local variables or parameters, and free variables are implemented as global variables or environment variables.</p><h3 id="Calculus-Substitution-and-Reduction"><a href="#Calculus-Substitution-and-Reduction" class="headerlink" title="Calculus: Substitution and Reduction"></a>Calculus: Substitution and Reduction</h3><p>The calculus is divided into alpha substitution and beta reduction. We actually covered these two concepts in the previous chapter, so let’s introduce them below.</p><p>Alpha substitution means that the name of the variable is not important, you can write λ m.λ n.m + n, or λ x.λ y.x + y, which represent the same function during the calculation process. That is to say, we only care about the form of the calculation, not the details of what variables to use to implement it. This is convenient for us to modify the variable name without changing the operation result, so as to facilitate simplification operations when the function is more complex. In fact, even the name of the entire lambda calculus is not important, we only need this form of calculation, not the naming of this form.</p><p>Beta reduction means that if you have a function application (function call), then you can substitution the part of the function body that corresponds to the identifier by using parameters (possibly another expression) to replace the identifier. It sounds a bit confusing, but it is actually parameter substitution for a function call. For example: ‘ (λm.λn.m + n) 1 3 = (λn.1 + n) 3 = 1 + 3 = 4’</p><p>You can replace m with 1 and n with 3, then the whole expression can be reduced to 4. This is also in function programming<a href="https://caowenwei.github.io/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/pure-function-rt/">引用透明性</a>The origin of. It should be noted that 1 and 3 here represent the operation values of the expression, which can be replaced by other expressions. For example, replacing 1 with (λ m.λ n.m + n 1 3) requires two reductions</p><h3 id="Lambda-expressions-in-JavaScript-Arrow-functions"><a href="#Lambda-expressions-in-JavaScript-Arrow-functions" class="headerlink" title="Lambda expressions in JavaScript: Arrow functions"></a>Lambda expressions in JavaScript: Arrow functions</h3><p>The ECMAScript 2015 specification introduces arrow functions, which have no this and no arguments. Can only be used as an expression (expression) but not as a statement (statement), the expression produces an arrow function reference, which still has the name and length properties, representing the name of the arrow function and the length of the parameters, respectively. An arrow function is a simple expression, and an arrow function can also be called a lambda function, which is written like a lambda expression.</p><p>Arrow functions can be used to do some simple operations. The following example compares the use of four arrow functions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Const</span> add_1 = (x, y) = &gt; x + y;<span class="comment">//all local variables</span></span><br><span class="line"><span class="title class_">Const</span> add_2 = x = &gt; x + y;<span class="comment">//y is a global variable</span></span><br><span class="line"><span class="title class_">Const</span> add_3 = x = &gt; y = &gt; x + y;<span class="comment">//closure concatenation parameter, curried</span></span><br><span class="line"><span class="title class_">Const</span> add_4 = b = &gt; a = &gt; a + b;<span class="comment">//The parameter name has nothing to do with the expression result</span></span><br></pre></td></tr></table></figure><p>This is the case directly for numbers (primitive data types). If you are doing operations on functions (referring to data types), things become interesting.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn_1</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="title function_">x</span>(y);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn_2</span> = f =&gt; <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(x);</span><br><span class="line"><span class="keyword">const</span> add_1 = (<span class="function"><span class="params">f</span> =&gt;</span> <span class="title function_">f</span>(<span class="number">5</span>))(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> add_2 = (<span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y)(<span class="number">2</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> add_3 = (<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>)(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>fn_x type, indicating that we can use function inside function, when function is passed as data, we can apply function to generate higher-order operations. And x = &gt; y = &gt; x (y) can be understood in two ways, one is that x = &gt; y function passes X = &gt; x (y), and the other is that x passes y = &gt; x (y).</p><p>add_x type indicates that an expression can be implemented in many different paths.</p><h3 id="Function-Programming-Fundamentals-Meta-Currying-and-Point-Free-of-Functions"><a href="#Function-Programming-Fundamentals-Meta-Currying-and-Point-Free-of-Functions" class="headerlink" title="Function Programming Fundamentals: Meta, Currying, and Point-Free of Functions"></a>Function Programming Fundamentals: Meta, Currying, and Point-Free of Functions</h3><p>Going back to JavaScript itself, we need to explore whether function itself can bring us more things. We have many ways to create functions in JavaScript:</p><p>You can use declarations, expressions, arrow functions, new Functions, etc</p><p>Although function has so many definitions, the function keyword declares functions with arguments and this keyword, which makes them look more like object methods than functions.</p><p>Moreover, most functions defined by functions can also be constructed (such as new Array).</p><p>Next we will only study the arrow function, because it is more like a function in the mathematical sense (only performing the calculation process).</p><ul><li>No arguments and this.</li><li>Cannot be constructed new.</li></ul><h4 id="Element-of-function"><a href="#Element-of-function" class="headerlink" title="Element of function"></a>Element of function</h4><p>Regardless of how a function is constructed, the function has two fixed pieces of information that can be obtained.</p><ul><li>name Represents the name of the function to which the current identifier points.</li><li>length Represents the length of the argument list when defining the function to which the current identifier points.</li></ul><p>Mathematically, we define f (x) = x as a unary function and f (x, y) = x + y as a binary function. In JavaScript we can define the element of a function by using its length when defined.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">one</span> = a =&gt; a;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">two</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">three</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br></pre></td></tr></table></figure><p>The significance of defining the meta of a function is that we can classify the function and specify the exact number of parameters a function needs. The meta of a function plays an important role both at compile time (type checking, overloading) and at runtime (exception handling, dynamically generated code).</p><p>If I give you a binary function, you know that you need to pass two parameters. For example, + can be seen as a binary function that takes one parameter on the left and one parameter on the right and returns their sum (or string concatenation).</p><p>In some other languages, + is indeed implemented by abstract classes, such as trait Add in the Rust language.</p><p>But in the λ calculus we saw above, each function has only one element. Why?</p><p>There is only one meta function that is convenient for us to perform algebraic operations. The parameter list of λ calculus is divided in the format of λx.λy.λz, and the return value is generally function. If a binary function is called with only one parameter, it returns an “incomplete call function”. Here, three examples are used to explain “incomplete call”.</p><h4 id="Curried-function-function-element-dimensionality-reduction-technology"><a href="#Curried-function-function-element-dimensionality-reduction-technology" class="headerlink" title="Curried function: function element dimensionality reduction technology"></a>Curried function: function element dimensionality reduction technology</h4><p>Currying a function is a technique for reducing the dimensionality of the elements of a function, a term in honor of the mathematician Alonzo Church we mentioned above.</p><p>Curried function helps us turn a multivariate function into an incomplete call, and use the magic of Closure to turn the function call into a delayed partial function (incomplete function call) call. This is very useful in scenarios such as function composition and to reuse</p><h4 id="Point-Free-No-argument-style-higher-order-combinations-of-functions"><a href="#Point-Free-No-argument-style-higher-order-combinations-of-functions" class="headerlink" title="Point-Free | No-argument style: higher-order combinations of functions"></a>Point-Free | No-argument style: higher-order combinations of functions</h4><p>There is a Point-Free style in function programming. In the Chinese context, point can probably be regarded as a parameter point, corresponding to the function application (Function Apply) in λ calculus, or the function call (Function Call) in JavaScript, so it can be understood that Point-Free refers to a call without parameters.</p><p>Let’s take a daily example of converting binary data to octal data.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strNums = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1110&#x27;</span>];</span><br><span class="line">strNums.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">2</span>)).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>This code runs fine, but in order to handle this transformation, we need to understand the two functions of parseInt (x, 2) and toString (8) (why there are magic numbers 2 and magic numbers 8), and care about the data (function type a - &gt; b) in the shape of each node (care about the flow of data). Is there a way to only care about imported parameters and exported parameters, not about the data flow process?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toBinary</span> = x =&gt; <span class="built_in">parseInt</span>(x,  <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> toString0x =&gt; <span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">...fns</span>) =&gt; <span class="function"><span class="params">x</span> =&gt;</span> fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> <span class="title function_">fn</span>(acc), x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strNums = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1110&#x27;</span>];</span><br><span class="line">strNums.<span class="title function_">map</span>(<span class="title function_">pipe</span>(toBinary, toString0x));</span><br></pre></td></tr></table></figure><h1 id="Functional-component"><a href="#Functional-component" class="headerlink" title="Functional component"></a>Functional component</h1><h2 id="What-is-a-function-component"><a href="#What-is-a-function-component" class="headerlink" title="What is a function component"></a>What is a function component</h2><p>Function-style components are functions are components, and components are functions. Its characteristics are that there is no internal state, no lifecycle hook function, and no this (components that do not need to be instantiated).</p><p>In daily development, we often develop some purely display business components, such as some details page, list interface, etc. They have a common feature:</p><p>As long as you pass in the data, I will display it.</p><p>There is no need for internal state and no need to process it in the lifecycle hook function.</p><p>At this point you can use functional components.</p><h2 id="Why-use-functional-components"><a href="#Why-use-functional-components" class="headerlink" title="Why use functional components?"></a>Why use functional components?</h2><p>Functional components do not require instantiation, are stateless, and have no lifecycle, so rendering performance is better than ordinary components</p><p>Functional component structure is simpler and code structure is clearer</p><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><ol><li><p>Functional components need to specify functional in the declaration component.</p></li><li><p>Function components do not need to be instantiated, so there is no this, this is replaced by the second parameter of the render function.</p></li><li><p>Functional components have no lifecycle hook function, cannot use calculated properties, watch, etc.</p></li><li><p>Function-style components cannot expose events externally through $emit, and calling events can only call external incoming events in a context.listeners.click way.</p></li><li><p>Because function components are not instantiated, when referencing components externally through ref, the actual reference is HTMLElement.</p></li><li><p>The props of a function component can be declared only in part or not at all. All properties not declared in the props will be automatically implicitly parsed as props, while all undeclared properties of ordinary components are parsed into $attrs and automatically mounted to the component root element (which can be disabled by the inheritAttrs attribute).</p></li></ol><p>It has been repeatedly emphasized above that any component that does not require instantiation, is stateless, has no lifecycle, and has no other configuration items except props can be rewritten as a function component.</p><h3 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h3><h4 id="Template-syntax"><a href="#Template-syntax" class="headerlink" title="Template syntax"></a>Template syntax</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">func</span> <span class="attr">text</span>=<span class="string">&quot;aaaaaaaa&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> func <span class="keyword">from</span> <span class="string">&#x27;@/components/func.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    func</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;props.text ? props.text : &#x27;哈哈&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Note that there is no &lt; script &gt;… &lt;/script &gt; section.</p></blockquote><h4 id="JSX-syntax"><a href="#JSX-syntax" class="headerlink" title="JSX syntax"></a>JSX syntax</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Rendering function</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">h</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span> &#123;<span class="type">*</span>&#125; context function component without this, props, slots, etc. all hang on the context</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h, context</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context);</span><br><span class="line">    <span class="keyword">const</span> &#123; props &#125; = context</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">text</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Return</span> &lt; p &gt; haha burp &lt;/p &gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p><a href="https://www.javascriptc.com/vue3js/guide/migration/functional-components.html#%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6">Vue3 函数式组件</a></p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p><a href="https://zh-hans.reactjs.org/docs/components-and-props.html">React 函数式组件</a></p><p>Reference article:</p><p><a href="https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html">https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html</a></p><p><a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html">https://www.ruanyifeng.com/blog/2012/04/functional_programming.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Function programming and function components are a trend in development now. They have been used in the past, but they have not been understood conceptually. This article summarizes the two together and makes a certain comparison.&lt;/p&gt;
&lt;p&gt;Function programming is a programming paradigm, and function components are a product of this paradigm.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Basic concepts of flex layout</title>
    <link href="https://sunra.top/en/posts/40806/"/>
    <id>https://sunra.top/en/posts/40806/</id>
    <published>2022-10-08T02:10:41.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>The traditional solution to layout, based on the box model, relies on the display property + position property + float property. It is very inconvenient for those special layouts, for example, vertical centering is not easy to implement. In 2009, the W3C proposed a new scheme, Flex Layout, which can implement various page layouts simply, completely, and responsively. Currently, it is supported by all browsers, which means that this feature can now be safely used.</p><p>Of course, there is another layout solution is grid layout, but this article will sort out flex first.</p><p>The Flexible Box model, commonly referred to as flexbox, is a one-dimensional layout model. It provides powerful spatial distribution and alignment between the child elements of flexbox. This article gives the main features of flexbox, more details will be explored in other docs.</p><p>We say that a flexbox is a one-dimensional layout because a flexbox can only handle the layout of elements in one dimension at a time, one row or one column. As a contrast, another two-dimensional layout, CSS Grid Layout, can handle both row and column layouts.</p><span id="more"></span><h2 id="The-two-axes-of-the-flexbox"><a href="#The-two-axes-of-the-flexbox" class="headerlink" title="The two axes of the flexbox"></a>The two axes of the flexbox</h2><p>When using a flex layout, the first thing that comes to mind are two axes - the main axis and the cross axis. The main axis is defined by flex-direction, and the other axis is perpendicular to it. All the properties we use with flexbox are related to these two axes, so it is necessary to understand it first at the beginning.</p><h3 id="Spindle"><a href="#Spindle" class="headerlink" title="Spindle"></a>Spindle</h3><p>The spindle is defined by flex-direction and can take 4 values:</p><ul><li>row</li><li>row-reverse</li><li>column</li><li>column-reverse</li></ul><p>If you choose row or row-reverse, your spindle will extend along the inline, that is, horizontally.</p><p>When you choose column or column-reverse, your main axis will extend in the vertical direction - that is, the direction in which the blocks are arranged, that is, the vertical direction.</p><h3 id="Cross-axis"><a href="#Cross-axis" class="headerlink" title="Cross axis"></a>Cross axis</h3><p>The cross axis is perpendicular to the main axis, so if your flex-direction is set to row or row-reverse, the direction of the cross axis is down the column.</p><p>If the main axis direction is set to column or column-reverse, the cross axis is horizontal.</p><h2 id="Start-and-End-Lines"><a href="#Start-and-End-Lines" class="headerlink" title="Start and End Lines"></a>Start and End Lines</h2><p>Another important point to understand is that <strong> flexbox does not provide assumptions about the writing mode of the doc </strong>. In the past, the writing mode of CSS was mainly considered horizontal, from left to right. Modern layouts cover the scope of writing modes, so we no longer assume that a line of text is written from the upper left corner of the doc to the right, and new lines do not have to appear below another line.</p><p>If flex-direction is row and I am writing English, then the start line of the main axis is on the left and the end line is on the right. If I am writing Arabic, the start line of the main axis is on the right and the end line is on the left. In both cases, the start line of the intersection axis is the top of the flex container and the end line is the bottom, because both languages are written horizontally.</p><h2 id="Flex-container"><a href="#Flex-container" class="headerlink" title="Flex container"></a>Flex container</h2><p>The area of the doc that uses flexbox is called a flex container. To create a flex container, we change the display property value of a container to flex or inline-flex. After this step, the immediate child elements in the container will become flex elements. All CSS properties will have an initial value, so all flex elements in the flex container will have the following behavior:</p><p>The elements are arranged in a row (the initial value of the flex-direction property is row).</p><ul><li>Elements start from the start line of the main axis.</li><li>Elements are not stretched in the main dimension, but can be shrunk.</li><li>Elements are stretched to fill the cross axis size.</li><li>The flex-basis property is auto.</li><li>The flex-wrap property is nowrap.</li></ul><p>This will make your elements line up and use their own size as the size on the main axis. If there are too many elements outside the container, they will overflow without wrapping. If some elements are taller than others, the element will be stretched along the intersection axis to fill its size.</p><h2 id="Implement-multi-line-container-with-flex-wrap"><a href="#Implement-multi-line-container-with-flex-wrap" class="headerlink" title="Implement multi-line container with flex-wrap"></a>Implement multi-line container with flex-wrap</h2><p>Although flexbox is a one-dimensional model, it is possible to apply our flex project to multiple rows. <strong> When doing this, you should treat each row as a new flex container </strong>. Any spatial distribution will occur on that row without affecting other rows of that spatial distribution.</p><p>To achieve a multi-line effect, add a property value wrap to the property flex-wrap. Now, if your item is too large to fit in one line, it will wrap.</p><p>For flex containers, the total width of the child elements of the item is greater than the maximum width of the container. Since the value of flex-wrap is set to wrap, the child elements of the item wrap. If you set it to nowrap, which is also the initial value, they will shrink to fit the container because they use the initial Flexbox value that allows for shrinking. If the child elements of the item cannot be shrunk, using nowrap will cause overflow, or the shrunk level is not small enough</p><h2 id="Abbreviated-attribute"><a href="#Abbreviated-attribute" class="headerlink" title="Abbreviated attribute"></a>Abbreviated attribute</h2><p>You can combine two properties flex-direction and flex-wrap into a short property flex-flow. The first specified value is flex-direction and the second specified value is flex-wrap.</p><h2 id="Attributes-on-flex-elements"><a href="#Attributes-on-flex-elements" class="headerlink" title="Attributes on flex elements"></a>Attributes on flex elements</h2><p>To better control flex elements, there are three properties that can be applied to them:</p><ul><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li></ul><p>Before considering the role of these properties, it is necessary to understand the concept of <strong> available space </strong>. The role of these flex properties is to change the behavior of available space in the flex container. At the same time, available space is also important for the alignment behavior of flex elements.</p><p>Assuming that in a 500px container, we have 3 elements that are 100px wide, then these 3 elements need to occupy 300px of width, leaving 200px of free space. By default, flexbox behavior leaves this 200px of space behind the last element.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665368539/origin-of-ray/basics7_vvpola.png" alt=""></p><p>If we expect these elements to automatically expand to fill the remaining space, then we need to control how the available space is allocated among these elements, which is what the flex attribute on the element does.</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>The flex-basis defines the size of that item in terms of the space, and the extra space in the flex container other than the space occupied by the element is available space. The default value of this attribute is auto. At this point, the browser will detect whether the element has a certain size. In the above example, all elements have <strong> set the width to 100px, so the flex-basis value is 100px </strong>.</p><p><strong> If no dimensions are given to the element, the flex-basis value takes the size of the element’s content </strong>. This explains: as long as we declare display: flex to the parent element of the Flex element, all child elements will be lined up and automatically assigned a size to fully display the content of the element.</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>If flex-grow is assigned a positive integer, the flex element will grow in size along the main axis based on flex-basis. This will make the element stretch and occupy the available space on this axis. If other elements are also allowed to stretch, they will each occupy a portion of the available space.</p><p>If we set flex-grow to 1 for all the elements in the example above, the available space in the container will be divided equally between these elements. They will stretch to fill the space in the direction of the container spindle.</p><p>The flex-grow property allocates space proportionally. If the first element has a flex-grow value of 2 and the other elements have a value of 1, the first element will occupy 2/4 (in the above example, 100px out of 200px), and the other two elements will occupy 1/4 each (50px each).</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>The flex-grow property handles the flex element adding space on the spindle, while the flex-shrink property handles the flex element contraction. <strong> If we don’t have enough space in our container to arrange flex elements, we can set the flex-shrink property of the flex element to a positive integer to shrink its space below flex-basis </strong>. As with the flex-grow property, different values can be assigned to control the degree of contraction of the flex element - a larger value can be assigned to the flex-shrink property to a greater degree of contraction than the sibling element assigned a decimal value.</p><p>When calculating the contraction size of the flex element, its minimum size is also taken into account, which means that in fact the flex-shrink property may not behave the same as the flex-grow property.</p><h3 id="Flex-property-abbreviation"><a href="#Flex-property-abbreviation" class="headerlink" title="Flex property abbreviation"></a>Flex property abbreviation</h3><p>You may rarely see the flex-grow, flex-shrink, and flex-basis properties used alone, but mixed in the flex shorthand. The flex shorthand allows you to write three values in this order - flex-grow, flex-shrink, flex-basis.</p><p>In most cases, you can use predefined shorthand forms. You may see this writing frequently in this tutorial, and you can use it in many cases. Here are several predefined values:</p><ul><li>flex: initial</li><li>flex: auto</li><li>flex: none</li><li>flex: <positive-number></li></ul><p>Flex: initial is the initial value for resetting flex elements to Flexbox, which is equivalent to flex: 0 1 auto. Here flex-grow has a value of 0, so flex elements do not exceed their flex-basis size. Flex-shrink has a value of 1, so flex elements can be shrunk to prevent them from overflowing. Flex-basis has a value of auto. Flex element size can be set in the main dimension or automatically obtained based on content.</p><p>Flex: auto is equivalent to flex: 1 1 auto; basically the same as flex: initial above, but in this case the flex element can be stretched or contracted when needed.</p><p>Flex: none sets a flex element to be non-scalable. It is the same as setting flex: 0 0 auto. Elements cannot be stretched or contracted, but elements are laid out as flexbox with flex-basis: auto.</p><p>You often see flex: 1 or flex: 2 in tutorials, etc. It is equivalent to flex: 1 1 0. Elements can be scaled on a flex-basis of 0.</p><h2 id="Alignment-and-space-allocation-of-elements"><a href="#Alignment-and-space-allocation-of-elements" class="headerlink" title="Alignment and space allocation of elements"></a>Alignment and space allocation of elements</h2><p>A key feature of Flexbox is the ability to set the alignment of flex elements along the spindle and cross axes, as well as the allocation of space between them.</p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>The align-items property aligns elements in the cross axis direction.</p><p>The initial value of this attribute is stretch, which is why flex elements are stretched to the height of the tallest element by default. In effect, they are stretched to fill the flex container - the tallest element defines the height of the container.</p><p>You can also set the value of align-items to flex-start, so that flex elements are aligned top of the flex container, flex-end aligns them bottom of the flex container, or center aligns them center. Try it in the example - I gave the height of the flex container so you can see the elements moving through the container.</p><ul><li>stretch</li><li>flex-start</li><li>flex-end</li><li>center</li></ul><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>The justify-content property is used to align elements in the main axis direction, which is the direction set by flex-direction. The initial value is flex-start, and the elements are arranged from the start line of the container. But you can also set the value to flex-end, which is arranged from the end line, or center, which is arranged in the middle.</p><p>You can also set the value to space-between to take out the remaining space after the elements are arranged and distribute it evenly between the elements, so that the spacing between elements is equal. Or use space-around to make the left and right spaces equal for each element.</p><p>The values of the following justify-content attribute:</p><ul><li>stretch</li><li>flex-start</li><li>flex-end</li><li>center</li><li>space-around</li><li>space-between</li></ul><h2 id="Proportion-of-child-elements-on-the-main-axis"><a href="#Proportion-of-child-elements-on-the-main-axis" class="headerlink" title="Proportion of child elements on the main axis"></a>Proportion of child elements on the main axis</h2><p>In HTML, if the CSS of an element is set to display: flex, then the element is a flex container and its child elements are flex items</p><p>We will explore three properties applied to flex child elements that allow us to control the size and scalability of flex child elements in the spindle direction - flex-grow, flex-shrink, and flex-basis. Fully understanding how these properties work with growing and shrinking flex child elements is the key to mastering Flex layout.</p><p>These three properties control the following aspects of a flex child element:</p><ul><li>flex-grow: How much positive free space does this flex child element get?</li><li>flex-shrink: How much negative free space is to be contracted from this flex child element?</li><li>flex-basis: What is the size of the flex child element before it is stretched and contracted?</li></ul><h3 id="Important-concept-of-working-on-the-spindle"><a href="#Important-concept-of-working-on-the-spindle" class="headerlink" title="Important concept of working on the spindle"></a>Important concept of working on the spindle</h3><p>Before considering how the flex property controls the ratio in the spindle direction, there are a few concepts worth exploring. This involves the natural size of flex child elements before any scaling, and the concept of free space</p><h4 id="Size-of-Flex-child-elements"><a href="#Size-of-Flex-child-elements" class="headerlink" title="Size of Flex child elements"></a>Size of Flex child elements</h4><p>In order to figure out how much free space can be laid out in the flex child element, the browser must know how big the item is to start. How does it solve for flex child elements with no width and height applied to absolute units?</p><p>There is a concept in the CSS of min-content and max-content - these keywords are defined in the CSS Intrinsic and Extrinsic Sizing Specification, and can be replaced by a length unit.</p><p>For example, I have two paragraphs that contain a text string. The first paragraph sets the width of the min-content. In browsers that support this keyword you can see that the text has been wrapped as much as possible, as small as possible without overflow. After that is the min-content size of that string. Essentially, the longest word in the string determines the size.</p><p>The second paragraph sets the max-content value, and it is the opposite of min-content. It will become as large as possible, with no automatic line wrapping. If the flex container is too narrow, it will overflow its own box.</p><h4 id="Positive-and-negative-free-space"><a href="#Positive-and-negative-free-space" class="headerlink" title="Positive and negative free space"></a>Positive and negative free space</h4><p>Positive and negative free space literally translates to positive and negative free space. In order for readers to read the following well, the translator will probably say it first.</p><p>There are flex containers and flex child elements in the Flex layout. The flex child elements are contained in the flex container. Then when the sum of the dimensions (sizes) of the flex child elements on the spindle is smaller than the size of the flex container, there will be a flex container. There will be extra space that is not filled, and these spaces are called positive free space. When the sum of the dimensions of the flex child elements on the spindle is greater than the size of the flex container, the space of the flex container is not enough. At this time, the sum of the dimensions of the flex child elements minus the size of the flex container (the size of the overflow of the flex child element) is negative free space, this negative free space plus the size of the flex container is just enough to accommodate the flex child element.</p><p>Before talking about these properties we need to understand the concept of positive free space and negative free space. When a flex container has positive free space, it has more space for displaying flex child elements within the flex container. For example, if I have a 500px wide flex container with a flex-direction property value of row, three 100px wide flex child elements, and I have 200px positive free space, then if I want them (positive free space) to fill the flex container, they can be filled between flex child elements.</p><p>We produce negative free space when the natural size of the flex child elements adds up to more than the available space inside the flex container. If I have a flex container 500px wide like the above, but three flex child elements are each 200px wide, I need a total of 600px wide, so I have 100px negative free space. This can be removed from the flex child element to make it fit into the flex container.</p><h3 id="flex-basis-1"><a href="#flex-basis-1" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>The flex-basis property initializes the size of the flex child element before any space allocation occurs. The initial value of this property is auto. If flex-basis is set to auto, the browser checks whether the main size of the flex child element is set to an absolute value before calculating the initial value of the flex child element. For example, if you have set your flex child element to 200px wide, 200px is the flex-basis of this flex child element.</p><p>If your flex child element is automatically resized, auto will resolve to the size of its content. At this point, the familiar min-content and max-content sizes will become useful, and flexbox will use the max-content size of the flex child element as the flex-basis. The following example can prove this.</p><p>In addition to the keyword auto, you can also use the keyword content as the value of flex-basis. This will cause flex-basis to set the width of even the flex child element based on the content size. This is a new keyword and has less browser support, but you can still achieve the same effect by setting flex-basis: auto and making sure your flex child element has no width set so that it can automatically resize.</p><p>When allocating space, if you want flexbox to completely ignore the size of the flex child element, set the flex-basis to 0. This basically tells flexbox that all space can be preempted and shared proportionally.</p><h3 id="flex-grow-1"><a href="#flex-grow-1" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>The flex-grow property specifies the flex growth value, which determines how much the flex child element grows relative to the rest of the flex child elements in the flex container when positive free space is allocated.</p><p>If all your flex child elements have the same flex-grow property value, then the space will be divided equally among the flex child elements. If you want this to happen, you usually need to use 1 as the value, and if you like you can also set their flex-grow to 88, or 100, or 1.2 - it’s just a ratio. If all flex-grow values are the same, and there is positive free space in the flex container, then it will be equally distributed to all flex child elements</p><h4 id="Combined-flex-grow"><a href="#Combined-flex-grow" class="headerlink" title="Combined flex-grow"></a>Combined flex-grow</h4><p>Some things can get confusing depending on how flex-grow and flex-basis interact. Let’s consider three examples of flex child elements with different content sizes, applied to the following flex rules:</p><p>flex: 1 1 auto;</p><p>In this example, the flex-basis is set to auto and their width is not set, so they are automatically resized. This means that the size of the flexbox depends on the max-content size of all flex child elements. After the flex child elements are laid out, there are some positive free spaces in the flex container, which are displayed in the shaded area of this image:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665370298/origin-of-ray/ratios2_ncusgh.png" alt=""></p><p>We use a flex-basis equal to the content size in order to subtract the available allocation space from the total available space (the width of the flex container), and then the remaining space is evenly distributed among each flex child element. Our larger flex child element ends up being bigger because it starts out with a larger size, even though it has the same amount of allocated space as other flex child elements:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665370341/origin-of-ray/ratios3_ktlfw5.png" alt=""></p><p><strong> If all you really want is three flex child elements of the same size, even if they start out as different sizes </strong>, you should use this:</p><p>flex: 1 1 0;</p><p>What we are saying is that for our space allocation, the flex child element has a size calculation of 0 — all spaces are up for grabs, and all flex child elements have the same flex-grow value, and they (flex child elements) each get equal space allocation. The end result is three scalable flex child elements of equal width.</p><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>Our understanding of how flex-grow and flex-basis work allows us to further control our individual flex child elements by assigning different flex-grow values, sizes. If we set the flex-basis value to 0 then all the space used can be allocated, and we can assign different flex-grow values to each flex child element. In the example below, I will use the following values:</p><p>Set the flex-grow value of the first flex item to 1.</p><ul><li>Set the flex-grow value of the second flex item to 1.</li><li>Set the flex-grow value of the third flex item to 2.</li></ul><p>A flex-basis value of 0 means that the available space will be allocated according to the settings. We need to increase the flex growth value, we need to divide the total size of positive free space in the flex container by the sum of the flex-grow values, in this case 4. We can allocate space based on individual values (flex-basis values) - the first flex child element gets one unit, the second flex child element gets one unit, and the third flex child element gets two units. That is, the third flex child element is twice as large as the first and second flex items.</p><h3 id="Flex-shrink-property"><a href="#Flex-shrink-property" class="headerlink" title="Flex-shrink property"></a>Flex-shrink property</h3><p>The flex-shrink property specifies the flex shrinkage value, which determines the degree of contraction of the flex child element relative to the remaining flex child elements in the flex container when allocating negative free space.</p><p>This property handles situations where the browser calculates flex-basis values for flex child elements and detects that they are too large to fit the flex container. <strong> As long as flex-shrink has a positive value, flex child elements will contract so that they will not overflow the flex container </strong>.</p><p>So flex-grow is used to add free space, and flex-shrink reduces space to fit boxes into their containers without overflowing.</p><p>In one example, my flex container has three flex child elements, and I have set each of them (flex child elements) to be 200px wide and the container (flex container) to be 500px wide. Set flex-shrink to 0 for flex child elements that do not allow contraction such that they overflow the box.</p><p>Change the flex-shrink value to 1 and you will see that each flex child element has a contraction of the same size, and now all flex child elements fit into the box. In doing so they have become smaller than their original width.</p><h4 id="Combining-flex-shrink-and-flex-basis"><a href="#Combining-flex-shrink-and-flex-basis" class="headerlink" title="Combining flex-shrink and flex-basis"></a>Combining flex-shrink and flex-basis</h4><p>You can see that flex-shrink and flex-grow work just as well. But they are not exactly the same for two reasons.</p><p>Even if it is trivial, the definition in the specification is one reason why flex-shrink is not identical to negative space, just as flex-grow is not identical to positive space:</p><blockquote><p>When assigned</p></blockquote><p>The second reason is that flexbox prevents small flex child elements from shrinking to 0 during negative free space elimination. These flex child elements will be laid with the size of min-content - the size they will become after taking advantage of any available automatic line break opportunities.</p><p>In the example below, you will see min-content laid where flex-basis resolves to content size. If you change the width of the flex container - say increase it to 700px wide, and then reduce the width of the flex child element, you will see that the first two flex child elements will wrap, but they will never be smaller than the size of min-content. As the box gets smaller and smaller, the third flex child element then overflows from the space.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &gt; * &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item Three has more content and so has a larger size<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>The key to really understanding how flex child elements work is to understand how many things are involved in influencing flex child elements. Consider the following aspects, which we have discussed in these guides:</p><h4 id="What-settings"><a href="#What-settings" class="headerlink" title="What settings"></a>What settings</h4><ol><li>is lex-basis set to auto, and is the width of this flex child element set? If set, the size of the flex child element will be based on the set width.</li><li>flex-basis set to auto or content (in supported browsers)? If auto, the size of the flex child element is the original size.</li><li>is flex-basis a length unit other than 0? if so this is the size of the flex child element.</li><li>what about setting flex-basis to 0? If so, the size of the flex child element is not considered in the space allocation calculation.</li></ol><h4 id="Do-we-have-space-available"><a href="#Do-we-have-space-available" class="headerlink" title="Do we have space available?"></a>Do we have space available?</h4><p>A flex child element will not grow without positive free space and will not shrink without negative free space.</p><ol><li>If we add up the widths of all the flex child elements (height if working in column direction), is the sum less than the total width (or height) of the flex container? If so, then you have positive free space and flex-grow comes into play.</li><li>If we add up the widths of all the flex child elements (height if working in column direction), is the sum greater than the total width (or height) of the flex container? If so, then you have negative free space and flex-shrink comes into play.</li></ol><h4 id="Other-ways-to-allocate-space"><a href="#Other-ways-to-allocate-space" class="headerlink" title="Other ways to allocate space"></a>Other ways to allocate space</h4><p>If we don’t want to add space to flex child elements, remember that you can use the alignment attribute described in the guide in the flex container to handle free space between or around flex child elements so that you can align flex child elements. The justify-content attribute allocates free space between or around flex child elements. You can also use auto margins on flex child elements to absorb space and create spacing between flex child elements.</p><p>Reference article:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox">flex布局基本概念</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax">控制Flex子元素在主轴上的比例</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The traditional solution to layout, based on the box model, relies on the display property + position property + float property. It is very inconvenient for those special layouts, for example, vertical centering is not easy to implement. In 2009, the W3C proposed a new scheme, Flex Layout, which can implement various page layouts simply, completely, and responsively. Currently, it is supported by all browsers, which means that this feature can now be safely used.&lt;/p&gt;
&lt;p&gt;Of course, there is another layout solution is grid layout, but this article will sort out flex first.&lt;/p&gt;
&lt;p&gt;The Flexible Box model, commonly referred to as flexbox, is a one-dimensional layout model. It provides powerful spatial distribution and alignment between the child elements of flexbox. This article gives the main features of flexbox, more details will be explored in other docs.&lt;/p&gt;
&lt;p&gt;We say that a flexbox is a one-dimensional layout because a flexbox can only handle the layout of elements in one dimension at a time, one row or one column. As a contrast, another two-dimensional layout, CSS Grid Layout, can handle both row and column layouts.&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://sunra.top/en/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>BFC and Box Model for CSS</title>
    <link href="https://sunra.top/en/posts/41258/"/>
    <id>https://sunra.top/en/posts/41258/</id>
    <published>2022-09-25T11:53:52.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>CSS has been used for a long time, but some of the usage is always vague, and there is no systematic and logical understanding. This time, let’s first clarify the BFC and box model in CSS, as well as some related positioning and layout properties.</p><span id="more"></span><h2 id="How-are-elements-laid-out-by-default"><a href="#How-are-elements-laid-out-by-default" class="headerlink" title="How are elements laid out by default?"></a>How are elements laid out by default?</h2><p>First, take the content of the element and place it in a separate element box, then add padding, borders, and margins around it - the box model we saw earlier.</p><p>By default, the content width of a block-level element is 100% of its parent element, and its height is the same as its content height. The height and width of the internal connection element is the same as the content. You cannot set the height and width of the internal connection element —- they are just placed in the content of the block-level element. If you want to control the size of the internal connection element, you need to set display: block; for the element (alternatively, display: inline-block; inline-block mixes the properties of inline and block.)</p><p>This explains the layout of individual elements, but how do elements affect each other? Normal layout flow (mentioned in the introduction to layout) is a system for placing and organizing elements within the browser viewport. By default, block-level elements are placed in <em> block flow direction </em> based on the writing order of their parent elements (default: horizontal-tb) —- each block-level element will have another line below the previous element, they will be separated by a set margin. In English, or other horizontal, top-down modes, block-level elements are organized vertically.</p><p>Internal connection elements behave differently - they don’t start on another line; they are arranged on the same line as other internal connection elements, adjacent text content (or wrapped) as long as there is enough space within the width of their parent block-level element. If there is not enough space, overflowing text or elements will move to a new line.</p><p>If two adjacent elements have margins set and the two margins overlap, the larger setting is preserved and the smaller one disappears - this is called margin overlay, and we’ve seen it before.</p><h2 id="What-is-BFC"><a href="#What-is-BFC" class="headerlink" title="What is BFC?"></a>What is BFC?</h2><p>Block Formatting Context (BFC) is part of the visual CSS rendering of a web page, the area where the layout process of block-level boxes takes place, and the area where floating elements interact with other elements.</p><p>The following methods will create a block formatting context:</p><ul><li>root element (&lt; html &gt;)</li><li>Floating element (float value is not none)<br>Absolutely positioned elements (position value is absolute or fixed)</li><li>Inline block element (display value is inline-block)</li><li>Table cells (display value is table-cell, default value for HTML table cells)</li><li>Table title (display value is table-caption, default value for HTML table title)</li><li>Anonymous table cell elements (display values are table, table-row, table-row-group, table-header-group, table-footer-group (default values for HTML table, tr, tbody, thead, tfoot, respectively) or inline-table)</li><li>block element with overflow value not visible, clip</li><li>display elements with flow-root value<br>Elements containing values of layout, content or paint<br>Elastic elements (immediate children of a flex or inline-flex element with a display value) if they are not themselves flex, grid, or table containers<br>Grid elements (immediate children of a display value grid or inline-grid element) if they are not themselves flex, grid, or table containers</li><li>Multi-column containers (column-count or column-width (en-US) values are not auto, including column-count is 1)<br>An element with a column-span value of all always creates a new BFC, even if the element is not wrapped in a multi-column container (specification changes, Chrome bugs)</li></ul><p>The formatting context affects the layout. Usually, instead of changing the layout, we will create a new BFC for positioning and clearing floats, because it will:</p><ul><li>Includes internal float</li><li>Exclude external float</li><li>Block, margins overlap</li></ul><h3 id="Contains-internal-float"><a href="#Contains-internal-float" class="headerlink" title="Contains internal float"></a>Contains internal float</h3><p>Make the floating content equal to the surrounding content. That is, the display of the inner floating element will not exceed the BFC.</p><p>To better understand BFC, let’s take a look at the following.</p><p>In the example below, we float the &lt; div &gt; element and give it a border effect. The content in &lt; div &gt; is now floating around the floating element. Since the floating element is taller than the element next to it, the border of &lt; div &gt; is pierced through the float. As we explained in In Flow and Out of Flow, floats are separated from the doc flow, so the background and border of &lt; div &gt; only contain the content, not the float.</p><p>Use’overflow: auto ‘</p><p>When creating a BFC containing floating elements, it is common practice to set the parent element to overflow: auto or other values other than the default overflow: visible. ‘&lt; div &gt;’ elements become mini-layouts in layouts, and any child elements are included.</p><p>Use overflow to create a new BFC because the overflow attribute tells the browser how to handle overflow content. If you use it just to create a BFC, you may encounter unwanted scrollbars or shadows, which need to be noted. Also, for subsequent developers, it may not be clear why overflow was used at the time, so it’s best to add some comments to explain why.</p><p>Use’display: flow-root’</p><p>The value of a new display property that can create a BFC without side effects. Use’display: flow-root ‘in the parent block to create a new BFC.</p><p>After setting the display: flow-root attribute to the &lt; div &gt; element, all content in the &lt; div &gt; element will participate in BFC, and floating content will not overflow from the bottom.</p><p>As you can see from the name of the flow-root value, it creates a new context for streaming layout, similar to the browser root (html) element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow:auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the <span class="tag">&lt;<span class="name">code</span>&gt;</span>overflow:auto<span class="tag">&lt;/<span class="name">code</span>&gt;</span> container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the <span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span> container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exclude-external-float"><a href="#Exclude-external-float" class="headerlink" title="Exclude external float"></a>Exclude external float</h3><p>In the following example, we use display: flow-root and float to implement a two-column layout, because the BFC established in the normal doc flow must not overlap the outer margins of any float in the block formatting context where the element itself is located.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>Try to resize this outer float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>Try to resize this outer float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/* required by resize:both */</span></span><br><span class="line">  <span class="attribute">resize</span>: both;</span><br><span class="line">  <span class="attribute">margin-right</span>:<span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">75</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Avoid-overlapping-margins"><a href="#Avoid-overlapping-margins" class="headerlink" title="Avoid overlapping margins"></a>Avoid overlapping margins</h3><p>The top and bottom margins of a block are sometimes combined (folded) into a single margin that is the maximum of the single margin (or only one of them if they are equal), a behavior called margin folding.</p><p>There are three situations where margins overlap:</p><h4 id="Between-adjacent-elements-in-the-same-layer"><a href="#Between-adjacent-elements-in-the-same-layer" class="headerlink" title="Between adjacent elements in the same layer"></a>Between adjacent elements in the same layer</h4><p>The margins overlap between two adjacent elements, unless the latter element plus clear-fix clears the float.</p><h4 id="No-content-separates-parent-elements-from-descendant-elements"><a href="#No-content-separates-parent-elements-from-descendant-elements" class="headerlink" title="No content separates parent elements from descendant elements"></a>No content separates parent elements from descendant elements</h4><p>The parent block element and its inner descendant block appear if there is no border, padding, inline content, or creating a block-level formatting context or clearing floats to separate the upper boundary margin-top of a block-level element from the upper boundary margin-top of one or more descendant block-level elements within it; or no border, inline margin, inline content, height, minimum height min-height or max-height to separate the lower boundary margin-bottom of a block-level element from the lower boundary margin-bottom of one or more descendant block elements within it The outer element boundary overlaps, and the overlapping part will eventually overflow outside the parent block element.</p><h4 id="Empty-block-level-element"><a href="#Empty-block-level-element" class="headerlink" title="Empty block-level element"></a>Empty block-level element</h4><p>Boundary folding also occurs when the boundary margin-top on a block element is directly attached to the boundary margin-bottom under the element. This happens when a block element has no border, padding, height, minimum height min-height, maximum height max-height, content set to inline or clear-fix at all.</p><h2 id="Box-model"><a href="#Box-model" class="headerlink" title="Box model"></a>Box model</h2><p>There are two types of “boxes” that we use extensively in CSS - block boxes and internal connection boxes. These two types of boxes exhibit different behaviors in terms of page flow and the relationships between elements:</p><p>A box defined as a block exhibits the following behavior:</p><ul><li>The box expands in the inline direction and takes up all the free space of the parent container in that direction, meaning in most cases the box will be as wide as the parent container</li><li>Every box wraps</li><li>width and height properties can come into play</li><li>Padding, margin and border will “push” other elements from around the current box</li></ul><p>If a box is displayed as inline, its behavior is as follows:</p><ul><li>The box does not generate a line break.</li><li>The width and height properties will not work.<br>Vertical padding, margins, and borders are applied but do not push other inlined boxes away.</li><li>Horizontal padding, margins, and borders are applied and push other inlined boxes away.</li></ul><blockquote><p>It’s best to also explain the interior here</p><p>Similarly, the box model has an internal display type, which determines how the elements inside the box are laid out. By default, it is in accordance with</p><p>However, we can use similar</p></blockquote><h3 id="What-is-CSS-Box"><a href="#What-is-CSS-Box" class="headerlink" title="What is CSS Box?"></a>What is CSS Box?</h3><p>The full CSS box model applies to block-level boxes, with internal connection boxes using only the parts defined in the box model. The model defines each part of the box - margin, border, padding, and content - which together create the content we see on the page. To add some extra complexity, there is a standard and alternative (IE) box model.</p><p>Parts of the box model<br>To form a block-level box in CSS, you need:</p><p>Content box: This area is used to display content, and the size can be set by setting width and height.<br>Padding box: A blank area enclosed outside the content area; the size is set by the padding related properties.<br>Border box: Border box package content and padding. The size is set by border related properties.<br>Margin box: This is the outermost area, the empty space between the box and other elements. The size is set by the margin-related property.</p><p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model/box-model.png" alt=""></p><h4 id="Standard-box-model"><a href="#Standard-box-model" class="headerlink" title="Standard box model"></a>Standard box model</h4><p>In the standard model, if you set the width and height of the box, you actually set the content box. The padding and border plus the set width and height together determine the size of the entire box. See the image below.</p><p>Assuming width, height, margin, border, and padding are defined:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If using the standard model width = 410px (350 + 25 + 25 + 5 + 5), height = 210px (150 + 25 + 25 + 5 + 5), padding plus border plus content box.</p><h4 id="Alternative-box-model"><a href="#Alternative-box-model" class="headerlink" title="Alternative box model"></a>Alternative box model</h4><p>You might think that adding borders and padding to the size of the box is troublesome, and you’re right! For this reason, css has an alternative box model. Using this model, all widths are visible widths, so the content width is that width minus the border and padding. Use the same style as above to get (width = 350px, height = 150px).</p><p>The default browser will use the standard model. If you need to use an alternative model, you can do so by setting box-sizing: border-box for it. This will tell the browser to use border-box to define the area, thus setting the size you want.</p><p>If you want all elements to use the alternative mode, and it’s really common, set box-sizing on the &lt; html &gt; element, and then set all elements to inherit that property, as in the example below. For a deeper understanding, see the CSS Tricks article on box-sizing.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In simple terms, the box model refers to how the width and height of this element are calculated, while BFC refers to the fact that its internal and external elements will not affect each other</p><p>Whether it is a box model can be set directly through css attributes, such as the display attribute, but whether it is BFC is not a css attribute, but in some cases, a context will be created.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CSS has been used for a long time, but some of the usage is always vague, and there is no systematic and logical understanding. This time, let’s first clarify the BFC and box model in CSS, as well as some related positioning and layout properties.&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://sunra.top/en/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>higher mathematics knowledge point combing summary</title>
    <link href="https://sunra.top/en/posts/29216/"/>
    <id>https://sunra.top/en/posts/29216/</id>
    <published>2022-07-16T12:39:24.000Z</published>
    <updated>2023-06-12T00:06:43.938Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I finally got through the knowledge of higher mathematics, but because the whole process is long and there are many knowledge points, they are all fragmented and not systematic, so I thought I would take this opportunity to generally sort out all the knowledge points once.</p><span id="more"></span><h1 id="Brief-summary"><a href="#Brief-summary" class="headerlink" title="Brief summary"></a>Brief summary</h1><p>In general, the core knowledge of higher data revolves around limits and continuity, so it is important to be proficient in finding limits.</p><p>The derivative of a one-dimensional function is actually defined by the limit. And when the increment of the independent variable tends to 0, the derivative of a unit function multiplied by the increment of the independent variable is the increment of a unit function, which defines the differentiation of a unit function, and the integral of a unit function is defined by differentiation.</p><p>The derivative of a multivariate function, the differentiation and the integral are defined in a similar relationship to that of a univariate function. There are some formulas in multivariate functions that need to be noted, such as the second type of curve integral, which can be changed into a double integral by Green’s formula in the plane, and the second type of curve integral in space can be changed into a second type of surface integral by Stokes’ formula, and then into a triple integral by Gauss’ formula.</p><p>The convergence criterion of the series is also mostly carried out by using the limit, such as the ratio method of the positive series, the root value method, and the Taylor series of the power series is simply the Taylor expansion of the monomial function, which seeks whether the limit of the residue term is 0.</p><p>The last is the differential equation, in fact, to you is the relationship between the function and the derivative, so that you find the expression of the function in line with this relationship</p><h1 id="Higher-Mathematics"><a href="#Higher-Mathematics" class="headerlink" title="Higher Mathematics"></a>Higher Mathematics</h1><h2 id="Functions-Limits-Continuity"><a href="#Functions-Limits-Continuity" class="headerlink" title="Functions, Limits, Continuity"></a>Functions, Limits, Continuity</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul><li><p>function</p></li><li><p>Function Concept</p></li><li>Segmented functions</li><li>Compound Functions</li><li>Inverse Functions</li><li><p>Primary functions</p></li><li><p>Limits</p></li><li><p>Limits of series</p></li><li><p>Limits of functions</p></li><li><p>Limits of a function when the independent variable tends to infinity</p></li><li><p>Limit of a function when the independent variable tends to a finite value</p></li><li><p>The concept of infinitesimal quantities</p></li><li><p>The concept of infinitely large quantities</p></li><li><p>continuity</p></li><li><p>The concept of continuity</p></li><li>Definition of interruption points</li><li><p>Classification of interruption points</p></li><li><p>Type I interruption points</p></li><li><p>Removable interruption points</p></li><li><p>Jumping interruption points</p></li><li><p>Second type of intermittent point</p></li><li><p>Infinite intermittent points</p></li><li><p>Oscillating intermittent point</p></li><li><p>Functional properties</p></li><li><p>Monotonicity</p></li><li>Parity</li><li>Periodicity</li><li>Boundedness</li></ul><h3 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h3><ul><li>A sufficient condition for the existence of the limit of a series: the limit of an odd term is equal to the limit of an even term</li><li><p>Limits of functions exist</p></li><li><p>The limit of a function exists when the independent variable tends to infinity</p></li><li><p>The limit of the function when the independent variable tends to a finite value</p></li><li><p>The relationship between the limit of a series and the limit of a function</p></li><li>Continuity of functions</li><li><p>The operation of continuous functions</p></li><li><p>Quadratic operations</p></li><li>Continuity of complex functions</li><li><p>Continuity of inverse functions</p></li><li><p>Continuity of elementary functions</p></li><li><p>Properties of continuous functions on closed intervals</p></li><li><p>Optimality theorem</p></li><li>Boundedness theorem</li><li>Median theorem</li><li><p>Zero theorem</p></li><li><p>Equivalent infinitesimal substitution theorem</p></li></ul><h3 id="Equation-properties"><a href="#Equation-properties" class="headerlink" title="Equation properties"></a>Equation properties</h3><ul><li><p>Basic primitive functions</p></li><li><p>Power functions</p></li><li>Exponential functions</li><li>Logarithmic functions</li><li>Trigonometric functions</li><li><p>Inverse trigonometric functions</p></li><li><p>Limiting properties</p></li><li><p>boundedness</p></li><li><p>number-preserving</p></li><li><p>Infinitesimal property</p></li><li><p>The sum of finite infinitesimals is still infinitesimal</p></li><li>The product of finite infinitesimals is still infinitesimal</li><li><p>The product of an infinitesimal quantity and a bounded quantity is still infinitesimal</p></li><li><p>Comparison of infinitesimals</p></li><li><p>High-order infinitesimals</p></li><li>low order infinitesimal</li><li>same order infinitesimal</li><li>Equivalent infinitesimal</li><li><p>k-order infinitesimal</p></li><li><p>Relationship between extreme values and infinitesimals:limf(x) = A &lt;=&gt; f(x) = A + α(x)</p></li><li>The nature of infinitesimals</li><li>Relationship between infinitesimal quantities and unbounded variables: infinitesimal quantities require n &gt; N when there is a constant |xn| &gt; M, while unbounded variables do not require</li><li>Relationship between infinitely large and infinitesimal quantities</li><li><p>The method of finding the limit</p></li><li><p>The four rules of limits</p></li><li><p>Two important limits</p></li><li><p>sinx and x are equivalently infinitesimal</p></li><li><p>infinitesimal type of 1</p></li><li><p>Commonly used equivalent infinitesimals</p></li><li>Lopita’s law</li><li>Clipping criterion</li><li><p>Limit criterion for monotone bounded series</p></li><li><p>Monotone bounded function must have limit</p></li><li>Monotonically increasing series with upper bound must have limit</li><li><p>Monotonically decreasing series with lower bound must have limit</p></li><li><p>The nature of infinitesimals: the sum of infinitesimals is still infinitesimal</p></li><li>Functional continuity</li><li><p>Taylor’s formula</p></li><li><p>with pianos remainder term</p></li><li>with Lagrangian remainder term</li><li><p>Commonly used Taylor’s formula (McLaughlin’s formula)</p></li><li><p>can be introduced as equivalent infinitesimal</p></li><li><p>and also Taylor series</p></li><li><p>Use the definition of derivative to find the limit</p></li><li>Differential median theorem</li><li>Definition of definite integrals</li><li>Properties of convergence of series</li></ul><h2 id="Differentiation-of-Unitary-Functions"><a href="#Differentiation-of-Unitary-Functions" class="headerlink" title="Differentiation of Unitary Functions"></a>Differentiation of Unitary Functions</h2><h3 id="The-concept-of-derivatives-and-differentiation"><a href="#The-concept-of-derivatives-and-differentiation" class="headerlink" title="The concept of derivatives and differentiation"></a>The concept of derivatives and differentiation</h3><ul><li><p>Concept and geometric meaning of derivatives</p></li><li><p>The concept of derivative</p></li><li>Derivatives and derivative functions on an interval</li><li><p>Geometric meaning of derivatives</p></li><li><p>The concept and geometric meaning of differentiation</p></li><li><p>Definition</p></li><li><p>The linear principal part of the increment of a function is called the differential</p></li><li><p>dy is the derivative multiplied by the differential of the independent variable dx</p></li><li><p>Geometric meaning: the differential represents the increment of the vertical coordinate of the tangent line of the curve at that point at that point</p></li><li><p>The relationship between continuous, derivable, and differentiable</p></li></ul><h3 id="Calculation-of-derivatives-and-differentiation"><a href="#Calculation-of-derivatives-and-differentiation" class="headerlink" title="Calculation of derivatives and differentiation"></a>Calculation of derivatives and differentiation</h3><ul><li><p>Calculation of derivatives</p></li><li><p>Derivative formula of basic elementary functions</p></li><li>The rule of derivative of the four operations</li><li>Complex function derivative rule</li><li>Inverse function derivative rule: the derivative of the inverse function is the reciprocal of each other</li><li>The method of derivatives of implicit functions</li><li>Logarithmic derivative</li><li>Parametric equation derivative method</li><li>Derivative of segmented functions</li><li><p>Important conclusions about the derivative</p></li><li><p>The derivative of an even function is an odd function</p></li><li>The derivative of a derivable odd function is an even function</li><li><p>The derivative of a derivable periodic function is still a periodic function with constant period</p></li><li><p>Calculation of higher order derivatives</p></li><li><p>direct method, respectively, to find the first-order derivative, second-order derivative, third-order derivative, etc., to find the law</p></li><li>Indirect method: using the known higher order derivative formula, the algorithm, through the function of constant deformation, variable replacement to find the higher order derivative results</li><li><p>Second-order derivatives of several types of functions</p></li><li><p>Abstract composite functions</p></li><li><p>Second-order derivative of implicit functions</p></li><li><p>Differential calculations</p></li><li><p>The four rules of differentiation</p></li><li>Invariance of first-order differential forms</li></ul><h3 id="Median-theorem-inequalities-zero-problems"><a href="#Median-theorem-inequalities-zero-problems" class="headerlink" title="Median theorem, inequalities, zero problems"></a>Median theorem, inequalities, zero problems</h3><ul><li><p>Median theorem</p></li><li><p>Rolle’s theorem</p></li><li>Fermat’s theorem</li><li>Lagrange’s median theorem</li><li>Corsi’s median theorem</li><li><p>Taylor’s theorem</p></li><li><p>Taylor’s formula of order n for Lagrange’s remainder term</p></li><li>Taylor’s formula for Peyano’s remainder term</li><li><p>McLaughlin’s formula</p></li><li><p>Inequality proofs</p></li><li><p>Monotonicity</p></li><li>Maximum value</li><li>Lagrange’s median formula</li><li><p>Lagrangian Remainder Taylor Formula</p></li><li><p>Zero point problem</p></li><li><p>Median theorem or zero theorem for continuous functions</p></li><li>Rolle’s theorem</li></ul><h3 id="Application-of-derivatives"><a href="#Application-of-derivatives" class="headerlink" title="Application of derivatives"></a>Application of derivatives</h3><ul><li>Monotonicity of functions</li><li><p>Extreme values of functions</p></li><li><p>The extreme value point</p></li><li>Stationary points</li><li>Necessary conditions for the existence of extremes</li><li>First Sufficient Condition for Extreme Values</li><li><p>Second sufficient condition for extremes</p></li><li><p>The most value of a function</p></li><li><p>The point of maximum value</p></li><li><p>Convexity of a curve</p></li><li><p>Inflection point</p></li><li>Necessary conditions for an inflection point</li><li>First sufficient condition for inflection point</li><li><p>Second sufficient condition for the point of inflection</p></li><li><p>Asymptote of the curve</p></li><li><p>Horizontal asymptote</p></li><li>Vertical asymptote</li><li><p>Oblique asymptote</p></li><li><p>Arc differentiation and curvature</p></li></ul><h2 id="Integral-of-Unitary-Functions"><a href="#Integral-of-Unitary-Functions" class="headerlink" title="Integral of Unitary Functions"></a>Integral of Unitary Functions</h2><h3 id="Concepts-of-indefinite-and-definite-integrals-properties"><a href="#Concepts-of-indefinite-and-definite-integrals-properties" class="headerlink" title="Concepts of indefinite and definite integrals, properties"></a>Concepts of indefinite and definite integrals, properties</h3><ul><li><p>Principle functions, indefinite and definite integrals</p></li><li><p>Geometric meaning of definite integrals</p></li><li><p>The definite integral is the limit of the sum of integrals</p></li><li><p>Basic properties of integrals</p></li><li><p>Properties of definite integrals</p></li><li><p>Existence theorem of definite integrals</p></li><li><p>If the function is continuous on a closed interval, the definite integral exists</p></li><li><p>The integral exists if the function has only finitely many interrupted points on the closed interval</p></li><li><p>Variable finite integral</p></li><li><p>variable upper integral</p></li><li><p>variable lower integral</p></li><li><p>Variable upper bound indefinite integrals are derived from the upper bound of the integral to obtain the relationship between definite and indefinite integrals</p></li><li>Newton-Leibniz formula</li></ul><h3 id="Calculation-of-definite-and-indefinite-integrals"><a href="#Calculation-of-definite-and-indefinite-integrals" class="headerlink" title="Calculation of definite and indefinite integrals"></a>Calculation of definite and indefinite integrals</h3><ul><li>Basic integral formula</li><li><p>Basic integral method</p></li><li><p>Method of integration by integration (first permutation method)</p></li><li>Commutative integration method (second permutation method)</li><li>Several common permutation methods</li><li>Definite integral reduced integration method</li><li>The method of partial integration</li><li>Several definite integral formulas</li></ul><h3 id="Calculation-of-Inverse-Integrals"><a href="#Calculation-of-Inverse-Integrals" class="headerlink" title="Calculation of Inverse Integrals"></a>Calculation of Inverse Integrals</h3><ul><li><p>Anomalous integrals: limits of variable limit integrals</p></li><li><p>Inverse integrals on infinite intervals</p></li><li><p>Anomalous integrals of unbounded functions</p></li><li><p>Inverse integrals of parity functions on symmetric intervals</p></li><li>An important anomalous integral</li></ul><h3 id="Applications-of-definite-integrals"><a href="#Applications-of-definite-integrals" class="headerlink" title="Applications of definite integrals"></a>Applications of definite integrals</h3><ul><li>Area of a plane figure</li><li>Volume of a rotating body</li><li>Mean value of a function</li><li>Volume of a three-dimensional with known area of parallel sections on an interval</li><li>Arc length of a plane curve</li><li>Area of a rotating surface</li><li>Work done by variable forces</li><li>Hydrostatic pressure of liquid</li><li>Gravitational force</li><li>Center of mass (form center) of an object</li></ul><h2 id="Vector-algebra-and-spatially-analytic-sets"><a href="#Vector-algebra-and-spatially-analytic-sets" class="headerlink" title="Vector algebra and spatially analytic sets"></a>Vector algebra and spatially analytic sets</h2><h3 id="vector-algebra"><a href="#vector-algebra" class="headerlink" title="vector algebra"></a>vector algebra</h3><ul><li>The basic concept of vectors</li><li><p>Vector operations</p></li><li><p>addition and subtraction</p></li><li>Number multiplication</li><li><p>Product of quantities</p></li><li><p>Operation rules</p></li><li><p>Law of commutation</p></li><li><p>Distributive law</p></li><li><p>vector product</p></li><li>Mixed products</li></ul><h3 id="Spatial-analytic-geometry"><a href="#Spatial-analytic-geometry" class="headerlink" title="Spatial analytic geometry"></a>Spatial analytic geometry</h3><ul><li><p>Spatial planes and lines</p></li><li><p>Plane equations</p></li><li><p>General equation</p></li><li>Point method equation</li><li><p>Intercept type</p></li><li><p>Straight line equation</p></li><li><p>General formula</p></li><li>Symmetric</li><li><p>Parametric</p></li><li><p>Plane and line relationship</p></li><li>Plane to plane relationship</li><li>Relationship between a straight line and a line</li><li>Distance from point to surface</li><li><p>Point to line distance</p></li><li><p>Curved surface and space curve</p></li><li><p>Surface equation</p></li><li>Spatial curves</li><li>Common surfaces</li><li>Common quadratic surface equations</li></ul><h2 id="Multifunctional-Differentiation"><a href="#Multifunctional-Differentiation" class="headerlink" title="Multifunctional Differentiation"></a>Multifunctional Differentiation</h2><h2 id="Limits-and-continuity-of-multivariable-functions"><a href="#Limits-and-continuity-of-multivariable-functions" class="headerlink" title="Limits and continuity of multivariable functions"></a>Limits and continuity of multivariable functions</h2><ul><li><p>Concept of binary functions</p></li><li><p>Definition</p></li><li><p>Geometric meaning of a binary function</p></li><li><p>Limits and continuity of binary functions</p></li><li><p>The concept of heavy limit</p></li><li>The concept of continuous binary functions</li><li><p>Properties of multivariate continuous functions</p></li><li><p>sum and difference product quotient of all continuous functions</p></li><li>the most value theorem</li><li>Mediation theorem</li><li>All multi-source elementary functions are continuous everywhere in their defined regions</li></ul><h3 id="Differentiation-of-multifunctions"><a href="#Differentiation-of-multifunctions" class="headerlink" title="Differentiation of multifunctions"></a>Differentiation of multifunctions</h3><ul><li><p>Partial derivatives and full differentiation of binary functions</p></li><li><p>Definition of partial derivative</p></li><li>Geometric meaning of partial derivative</li><li>Full increment</li><li><p>Full differentiation</p></li><li><p>Definition</p></li><li>Necessary condition for the existence of full differentiation: existence of partial derivatives</li><li><p>Sufficient condition for the existence of full differentiation: partial derivatives are continuous</p></li><li><p>Partial derivatives and full differentiation of complex functions</p></li><li><p>Rules of derivatives of composite functions</p></li><li><p>Compound functions and multivariate functions</p></li><li><p>Multifunction and multifunction composite</p></li><li><p>Full differential form invariance</p></li><li><p>Higher order partial derivatives</p></li><li><p>Partial derivatives and full differentiation of implicit functions</p></li><li><p>Derivative of a univariate implicit function determined by an equation</p></li><li>Derivative of a binary implicit function determined by an equation</li><li>The derivative of a one-dimensional implicit function determined by a system of equations</li><li>Derivative of a binary implicit function determined by a system of equations</li></ul><h3 id="Limits-and-maxima"><a href="#Limits-and-maxima" class="headerlink" title="Limits and maxima"></a>Limits and maxima</h3><ul><li><p>Unconditional extrema</p></li><li><p>Extreme value points</p></li><li>Necessary conditions for the existence of extreme values</li><li><p>Sufficient conditions for the existence of extremes</p></li><li><p>Conditional extreme values</p></li><li><p>Lagrange’s multiplier method</p></li><li><p>Maximum value</p></li><li><p>Find the most value on a bounded closed region</p></li><li><p>find the value of the function of the extreme value point in the region</p></li><li>find the most value on the boundary of the region (conditional extrema), for simpler than that bounded function can be brought directly into</li><li><p>Compare all the extreme values in the above two steps</p></li><li><p>application problem, the extreme value point may only have a</p></li></ul><h3 id="Directional-derivatives-gradients-and-geometric-applications"><a href="#Directional-derivatives-gradients-and-geometric-applications" class="headerlink" title="Directional derivatives, gradients and geometric applications"></a>Directional derivatives, gradients and geometric applications</h3><ul><li>Directional derivatives and gradients</li><li>Geometric applications</li></ul><h2 id="Integration-of-multivariate-functions"><a href="#Integration-of-multivariate-functions" class="headerlink" title="Integration of multivariate functions"></a>Integration of multivariate functions</h2><h3 id="Recalculus"><a href="#Recalculus" class="headerlink" title="Recalculus"></a>Recalculus</h3><ul><li><p>double integrals</p></li><li><p>Definition and geometric meaning of double integral</p></li><li><p>Properties of double integrals</p></li><li><p>Comparison theorem</p></li><li>Valuation theorem</li><li><p>Median theorem</p></li><li><p>Calculation of double integrals</p></li><li><p>Calculation in Cartesian coordinates</p></li><li>Calculation in polar coordinates</li><li><p>Calculation using symmetry parity</p></li><li><p>Using symmetry of integral domain and parity of product function</p></li><li><p>Symmetry of variables</p></li><li><p>Definition</p></li><li>Nature: Same as double integral</li><li><p>Calculation</p></li><li><p>Right-angle coordinates</p></li><li><p>First one, then two</p></li><li><p>First two, then one</p></li><li><p>Column Coordinates</p></li><li>Spherical coordinates</li><li>Parity</li><li>Rotational symmetry</li></ul><h3 id="Curve-integral"><a href="#Curve-integral" class="headerlink" title="Curve integral"></a>Curve integral</h3><ul><li><p>Line integrals over arc lengths (first class line integrals)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation method</p></li><li><p>Direct method</p></li><li>Parity</li><li><p>Symmetry</p></li><li><p>Line integral over coordinates (second type of line integral)</p></li><li><p>Definition</p></li><li>Properties</li><li><p>Calculation method (plane)</p></li><li><p>Direct method</p></li><li>Green’s formula (reduced to a double integral)</li><li>Green’s formula for complementary lines</li><li><p>Line integral is independent of path</p></li><li><p>Calculation method (space)</p></li><li><p>Direct method</p></li><li>Stokes formula (reduced to a second class surface integral)</li></ul><h3 id="Surface-integral"><a href="#Surface-integral" class="headerlink" title="Surface integral"></a>Surface integral</h3><ul><li><p>Area fraction over area (first class)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation</p></li><li><p>Direct method</p></li><li>Parity</li><li><p>Symmetry</p></li><li><p>Area score for coordinates (second category)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation</p></li><li><p>Direct method</p></li><li>Gauss’s formula (reduced to triple integral)</li><li>Gauss formula for complementary surfaces</li></ul><h3 id="Application-of-multiple-integrals"><a href="#Application-of-multiple-integrals" class="headerlink" title="Application of multiple integrals"></a>Application of multiple integrals</h3><h3 id="Dispersion-and-rotation"><a href="#Dispersion-and-rotation" class="headerlink" title="Dispersion and rotation"></a>Dispersion and rotation</h3><h2 id="Infinite-series"><a href="#Infinite-series" class="headerlink" title="Infinite series"></a>Infinite series</h2><h3 id="Constant-term-series"><a href="#Constant-term-series" class="headerlink" title="Constant term series"></a>Constant term series</h3><ul><li><p>Concepts and properties of series</p></li><li><p>Infinite series</p></li><li>Parts and series</li><li><p>Convergence, divergence</p></li><li><p>Criterion for convergence of positive series</p></li><li><p>Partial and series bounded</p></li><li>Comparative discriminant</li><li>Ratio discriminant</li><li>Root discriminant</li><li><p>Geometric series (isoperimetric series)</p></li><li><p>Interleaved series discriminant criterion</p></li><li><p>Leibniz discriminant criterion</p></li><li><p>Absolute convergence and properties</p></li></ul><h3 id="Power-series"><a href="#Power-series" class="headerlink" title="Power series"></a>Power series</h3><ul><li>Function term series, convergence domain, function</li><li><p>Power series</p></li><li><p>Abel’s theorem</p></li><li><p>Power series properties</p></li><li><p>Quadratic operations</p></li><li><p>Analytical properties</p></li><li><p>Power series expansion of functions (Taylor series / McLaughlin series)</p></li></ul><h3 id="Fourier-series"><a href="#Fourier-series" class="headerlink" title="Fourier series"></a>Fourier series</h3><ul><li>Fourier coefficients and Fourier series</li><li>Convergence of Fourier series (Direkley’s convergence theorem)</li><li><p>Expansion of a function with period 2l</p></li><li><p>Expansion on [-L. L</p></li><li>expansion of parity functions on [-L. L</li><li>expansion on [0. L] as sine or cosine</li></ul><h2 id="Differential-equations"><a href="#Differential-equations" class="headerlink" title="Differential equations"></a>Differential equations</h2><h3 id="First-order-differential-equation"><a href="#First-order-differential-equation" class="headerlink" title="First order differential equation"></a>First order differential equation</h3><ul><li><p>Differential equation concepts</p></li><li><p>Definition</p></li><li>Order of differential equations</li><li>General and special solutions</li><li><p>Initial conditions</p></li><li><p>Several special classes of first-order differential equations and their solutions</p></li><li><p>Separability of variables</p></li><li>Simultaneous differential equations</li><li>Linear differential equations</li><li>Bernoulli’s equation</li><li>Fully differential equations</li></ul><h3 id="Second-order-and-higher-order"><a href="#Second-order-and-higher-order" class="headerlink" title="Second order and higher order"></a>Second order and higher order</h3><ul><li><p>Linear differential equations</p></li><li><p>Linear chi-square differential equations of order n</p></li><li><p>Linearly correlated and linearly uncorrelated</p></li><li><p>Properties of differential equations</p></li><li><p>Superposition of solutions of linear equations of the chi-square</p></li><li>Generalized solution structure of quadratic linear equations</li><li>Structure of general solutions of non-sublinear equations</li><li>Principle of superposition</li><li>The method and formulas for solving linear chi-square equations with constant coefficients of the second order</li><li>The general solution method and formula for some special free term second-order linear chi-square equations with constant coefficients</li></ul><p>*XMind - Trial Version</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Today, I finally got through the knowledge of higher mathematics, but because the whole process is long and there are many knowledge points, they are all fragmented and not systematic, so I thought I would take this opportunity to generally sort out all the knowledge points once.&lt;/p&gt;</summary>
    
    
    
    <category term="Math" scheme="https://sunra.top/en/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>C</title>
    <link href="https://sunra.top/en/posts/36409/"/>
    <id>https://sunra.top/en/posts/36409/</id>
    <published>2022-03-25T04:14:44.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>With the gradual increase in use, I can’t stand the use of these concepts in the vague situation, so I found some official doc to learn these concepts in C #, mainly to distinguish between delegates and events.</p><p>In fact, I personally have been very vague about these concepts before reading the doc, and even once was confused by various blogs on the Internet, and even confused Action, Func and commission.</p><p>Finally, after I went to read the official doc, I had some understanding of these concepts.</p><p>First of all, the most important conclusion is thrown. Both delegates and events are to provide a way to post-process functions. Events are actually multicast based on delegates, and it is inconvenient to define a new delegate type every time you use a delegate, so it is provided. Two strong types of delegates are Action and Func.</p><span id="more"></span><h1 id="What-is-delegation"><a href="#What-is-delegation" class="headerlink" title="What is delegation"></a>What is delegation</h1><p>A delegate is a reference type that represents a reference to a method with a specific parameter list and return type. When instantiating a delegate, you can associate its instance with any method with a compatible signature and return type. You can call a method through a delegate instance.</p><p>Delegates are used to pass methods as arguments to other methods. Event handlers are methods called through delegates. You can create a custom method that a class (such as a Windows control) can call when a specific event occurs. The following example demonstrates a delegate declaration:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">PerformCalculation</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>;</span><br></pre></td></tr></table></figure><p>You can assign any method in any accessible class or struct that matches the delegate type to the delegate. The method can be a static method or an instance method. This sexual aparteness allows you to programmatically change method calls and insert new code into existing classes.</p><p>The purpose of this code is to declare a new delegate. Note that it is a declaration, which is equivalent to declaring a new type. It can be understood as declaring a new class without instantiation.</p><p>The ability to reference methods as arguments makes delegates ideal for defining callback methods. A method can be written to compare two objects in an application. This method can be used in delegates for sorting algorithms. Since the comparison code is separated from the library, sorting methods may be more common.</p><p>Delegates have the following properties:</p><ul><li><p>Delegates are similar to C++ function pointer, but delegates are fully Object Oriented, unlike C++ pointers that remember function, delegates encapsulate both object instances and methods.</p></li><li><p>Delegates allow methods to be passed as arguments.</p></li><li><p>Delegates can be used to define callback methods.</p></li></ul><p>Delegates can be chained together; for example, multiple methods can be called on one event.</p><ul><li><p>The method does not have to exactly match the delegate type. For more information, see<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates">使用委托中的变体</a>。</p></li><li><p>Use Lambda expressions to write internal connection Code Blocks more concisely. Lambda expressions (in some contexts) can be compiled to delegate types. To learn more about lambda expressions, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda 表达式</a>。</p></li></ul><h1 id="Use-of-delegation"><a href="#Use-of-delegation" class="headerlink" title="Use of delegation"></a>Use of delegation</h1><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/reference-types">委托</a>是安全封装方法的类型，类似于 C 和 C++ 中的函数指针。 与 C 函数指针不同的是，委托是面向对象的、类型安全的和可靠的。 委托的类型由委托的名称确定</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Del</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br></pre></td></tr></table></figure><p>Delegate objects can usually be constructed in two ways, one is to provide a delegate with a method name, and the other is to use <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda 表达式</a>When a delegate is instantiated, the call to the delegate is passed to the methodParameters passed to the delegate by the caller are passed to the method, and the delegate returns the method’s return value, if any, to the callerThis is called an invocation delegateAn instantiated delegate can be called as the encapsulated method itselfFor example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a method for a delegate.public static void DelegateMethod(string message)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DelegateMethod</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Instantiate a delegate</span></span><br><span class="line">Del handler = DelegateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call the delegate.</span></span><br><span class="line">handler( Hello World );</span><br></pre></td></tr></table></figure><p>The delegate type is derived from the <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.delegate">Delegate</a> Class. The delegate type is<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/sealed">密封的</a>, they cannot be derived from, nor can a custom class be derived from them. Since the delegate instantiated is an object, it can be passed as an argument or assigned to a property. This allows the method to accept the delegate as an argument and call the delegate later. This is called an asynchronous callback and is a common method for notifying the caller when a long process completes. When a delegate is used in this way, the code using the delegate does not need to know the implementation method to be used. Functionality is similar to that provided by the wrapper interface.</p><p>When a delegate is constructed to encapsulate an instance method, the delegate will reference both the instance and the method. The delegate does not know an instance type other than the method it encapsulates, so the delegate can reference any type of object as long as there are methods on that object that match the delegate signature. When the delegate is constructed to encapsulate a static method, the delegate only references the method. Consider the following declaration:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MethodClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">string</span> message</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span>(<span class="params"><span class="built_in">string</span> message</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Together with the static DelegateMethod shown earlier, we now have three methods that Del instances can encapsulate.</p><p>When invoked, a delegate can call multiple methods. This is called multicast. To add additional methods to the delegate’s method list (invocation list), simply add two delegates using the addition operator or the addition assignment operator (“+” or “+=”). For example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MethodClass();</span><br><span class="line">Del d1 = obj.Method1;</span><br><span class="line">Del d2 = obj.Method2;</span><br><span class="line">Del d3 = DelegateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Both types of assignment are valid.</span></span><br><span class="line">Del allMethodsDelegate = d1 + d2;</span><br><span class="line">allMethodsDelegate += d3;</span><br></pre></td></tr></table></figure><p>At this point, the invocation list for allMethodsDelegate contains three methods, Method1, Method2, and DelegateMethod. The original three delegates (d1, d2, and d3) remain unchanged. When allMethodsDelegate is called, all three methods are called in order. If the delegate uses reference parameters, references are passed to all three methods in reverse order, and any changes made by one method are seen on the other. When a method throws an exception that is not caught within the method, the exception is passed to the caller of the delegate and subsequent methods in the invocation list are not invoked. If the delegate has a return value and/or output parameters, it will return the return value and parameters of the last called method. To remove a method from the invocation list, use<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/subtraction-operator">减法运算符或减法赋值运算符</a>(Or <code>-=</code>）。 for example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//remove Method1</span><br><span class="line">allMethodsDelegate -= d1;</span><br><span class="line"></span><br><span class="line">// copy AllMethodsDelegate while removing d2</span><br><span class="line">Del oneMethodDelegate = allMethodsDelegate - d2;</span><br></pre></td></tr></table></figure><p>Because the delegate type is derived from System. Delegate, the methods and properties defined by the class can be called on the delegate. For example, to query the number of methods in the delegate invocation list, you can write:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> invocationCount = d1.GetInvocationList().GetLength(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>A delegate with multiple methods in the invocation list is derived from <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.multicastdelegate">MulticastDelegate</a>, which is a subclass of’System. Delegate ‘. Since both classes support’GetInvocationList’, the above code will also work in other cases.</p><p>Multicast delegates are widely used in event handling. An event source object sends an event notification to a receiver object that is registered to receive the event. To register an event, the receiver needs to create a method to handle the event, then create a delegate for that method and pass the delegate to the event source. When the event occurs, the source invokes the delegate. The delegate will then call an event handling method on the receiver, providing event data. The delegate type for a given event is determined by the event source. For more information, see<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/events/">事件</a>。</p><p>For more usage methods, please refer to:<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate">如何声明，实例化和使用委托</a></p><h1 id="Strongly-typed-delegates-Action-Func"><a href="#Strongly-typed-delegates-Action-Func" class="headerlink" title="Strongly typed delegates: Action, Func"></a>Strongly typed delegates: Action, Func</h1><p>The abstract Delegate class provides the infrastructure for loose coupling and invocation. Concrete delegate types become more useful by including and enforcing type safety of methods added to the invocation list of delegate objects. When the delegate keyword is used and concrete delegate types are defined, the compiler will generate these methods.</p><p>In fact, whenever a different method signature is required, this creates a new delegate type. This operation can become cumbersome after a while. Every new feature requires a new delegate type.</p><p>Fortunately, there is no need to do this. The .NET Core framework contains several types that are reusable when delegate types are needed. These are<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/fundamentals/types/generics">泛型</a>Definition, so you can declare a custom when you need a new method declaration.</p><p>First type is <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.action">Action</a> Types and some variations:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;(<span class="params">T arg</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">in</span> <span class="title">T2</span>&gt;(<span class="params">T1 arg1, T2 arg2</span>)</span>;</span><br><span class="line"><span class="comment">// Other variations removed for brevity.</span></span><br></pre></td></tr></table></figure><p>Variants of the Action delegate can contain up to 16 parameters, such as <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.action-16">Action</a>It is important that these definitions use different generic parameters for each delegate parameter: this allows maximum flexibility. Method parameters are not required but may be of the same type.</p><p>Use an Action type for any delegate type that has a void return type.</p><p>This framework also includes several generic delegate types that can be used to return values.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">out</span> <span class="title">TResult</span>&gt;()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">out</span> <span class="title">TResult</span>&gt;(<span class="params">T1 arg</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">in</span> <span class="title">T2</span>, <span class="keyword">out</span> <span class="title">TResult</span>&gt;(<span class="params">T1 arg1, T2 arg2</span>)</span>;</span><br><span class="line"><span class="comment">// Other variations removed for brevity</span></span><br></pre></td></tr></table></figure><p>Variants of the’Func ‘delegate can contain up to 16 input parameters, such as <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.func-17">Func</a>By convention, the type of the result is always the last type parameter in all Func declarations.</p><p>Use a’Func ‘type for any delegate type that returns a value.</p><p>There is also a specialized type of delegation <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.predicate-1">Predicate</a>This type returns the test result of a single value.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">bool</span> <span class="title">Predicate</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;(<span class="params">T obj</span>)</span>;</span><br></pre></td></tr></table></figure><p>You may notice that for any Predicate type, there exists a structurally equivalent Func type, for example</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">string</span>, <span class="built_in">bool</span>&gt; TestForString;</span><br><span class="line">Predicate&lt;<span class="built_in">string</span>&gt; AnotherTestForString;</span><br></pre></td></tr></table></figure><p>You may think that these two types are equivalent. They are not. These two variables cannot be used interchangeably. A variable of one type cannot be assigned to another type. The C #  type system uses the name of a defined type, not its structure.</p><h1 id="What-is-an-event"><a href="#What-is-an-event" class="headerlink" title="What is an event"></a>What is an event</h1><p>Similar to delegates, events are <em> late binding </em> mechanisms. In fact, events are built on language support for delegates.</p><p>Events are a way for objects to broadcast (to all relevant components in the system) what has happened. Any other component can subscribe to events and be notified when they are raised.</p><p>You may have used events in some programming. Many graphics systems have event models for reporting user interactions. These events report mouse movements, button clicks, and similar interactions. This is one of the most common scenarios for using events, but not the only one.</p><p>It is possible to define events that should be raised against classes. One thing to note when using events is that a particular event may not have any registered objects. Code must be written to ensure that events are not raised when listeners are not configured.</p><p>By subscribing to events, you can also create coupling between two objects (event source and event sink). You need to ensure that the event sink will unsubscribe from the event source when you are no longer interested in the event.</p><h2 id="Event-supported-design-goals"><a href="#Event-supported-design-goals" class="headerlink" title="Event-supported design goals"></a>Event-supported design goals</h2><p>The language design of the event addresses these goals:</p><ul><li><p>Enable very small coupling between event source and event sink. These two components may not be written by the same organization and may even be updated through completely different schedules.</p></li><li><p>Subscribing to an event and unsubscribing from the same event should be very simple.</p></li><li><p>Event source should support multiple event subscribers. It should also support not attaching any event subscribers.</p></li></ul><p>You will find that the goal of the event is very similar to the goal of the delegate. Therefore, the event language support is built on the delegate language support.</p><h2 id="Language-support-for-events"><a href="#Language-support-for-events" class="headerlink" title="Language support for events"></a>Language support for events</h2><p>The syntax used to define events and to subscribe or unsubscribe to them is an extension of the delegate syntax.</p><p>Define events that use the keyword’event ‘:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;FileListArgs&gt; Progress;</span><br></pre></td></tr></table></figure><p>The type of the event (in this example, ‘EventHandler &lt; FileListArgs &gt;’) must be a delegate type. When declaring an event, a number of conventions should be followed. Typically, the event delegate type has an invalid return. The event declaration should be a predicate or a predicate phrase. Use the past tense when the event reports something that has already happened. Use the present tense predicate (e.g., ‘Closing’) to report something that will happen. Typically, use the present tense to indicate that the class supports some type of custom behavior. One of the most common scenarios is to support cancellation. For example, the’Closing ‘event may include arguments indicating whether the shutdown operation should continue. Other scenarios may allow the caller to modify the behavior by updating the properties of the event parameter. You can raise an event to indicate the suggested next action that the algorithm will take. Event handlers can authorize different actions by modifying the properties of event parameters.</p><p>When you want to raise an event, invoke the event handler using the delegate invocation syntax:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Progress?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> FileListArgs(file));</span><br></pre></td></tr></table></figure><p>As<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/delegates-patterns">委托</a>As described in the section, the?. operator makes it easy to ensure that the event is not raised if there is no subscriber for the event.</p><p>Subscribe to events by using the ‘+=’ operator:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventHandler&lt;FileListArgs&gt; onProgress = (sender, eventArgs) =&gt;</span><br><span class="line">    Console.WriteLine(eventArgs.FoundFile);</span><br><span class="line"></span><br><span class="line">fileLister.Progress += onProgress;</span><br></pre></td></tr></table></figure><p>Handler methods are usually prefixed with “On” followed by the event name, as shown above.</p><p>Use the ‘- =’ operator to unsubscribe:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileLister.Progress -= onProgress;</span><br></pre></td></tr></table></figure><p>Be sure to declare a local variable for the expression representing the event handler. This will ensure that the handler is unsubscribed. If the body of a lambda expression is used, an attempt will be made to delete the handler that was never attached, which is an invalid operation.</p><p>For more ways to use events, such as how to cancel the execution of events, you can see:<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/event-pattern">标准.NET事件模式</a>And<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/modern-events">新的事件模式</a></p><p>The new event mode mainly liberalizes the restrictions of event parameters, does not have to inherit from EventArgs, and pays attention to asynchronous event handlers</p><h1 id="Distinguish-between-delegates-and-events"><a href="#Distinguish-between-delegates-and-events" class="headerlink" title="Distinguish between delegates and events"></a>Distinguish between delegates and events</h1><p>They both provide a late binding scheme: in this scheme, components communicate by calling methods that are only recognized at runtime. They both support single and multiple subscriber methods. This is called unicast and multicast support. Both support similar syntax for adding and removing handlers. Finally, raising events and calling delegates use exactly the same method call syntax. They even both support the same’Invoke () ‘method syntax for use with the’?. ‘operator.</p><p>Given all these similarities, it can be difficult to determine which grammar to use when</p><h2 id="Listening-for-events-is-optional"><a href="#Listening-for-events-is-optional" class="headerlink" title="Listening for events is optional"></a>Listening for events is optional</h2><p>When determining which language features to use, the most important consideration is whether you must have additional subscribers. If your code must call code provided by the subscriber, you should use a delegate-based design when you need to implement callbacks. If your code can do all its work without calling any subscribers, you should use an event-based design.</p><p>Consider the examples generated in this section. A comparer function must be provided for code generated with List. Sort () to sort elements correctly. A LINQ query must be provided with a delegate to determine which elements to return. Both use the design generated with the delegate.</p><p>Consider the’Progress’ event. It reports the progress of the task. The task will continue with or without a listener. The’FileSearcher ‘is another example. It will still search and find all the files it has found, even if no event subscribers are attached. The UX controls work even if no subscribers are listening for events. They all use an event-based design.</p><h2 id="The-return-value-requires-delegation"><a href="#The-return-value-requires-delegation" class="headerlink" title="The return value requires delegation."></a>The return value requires delegation.</h2><p>Another note is the method prototypes required for delegate methods. As you can see, delegates used for events all have invalid return types. You also see that there is an idiom for creating event handlers that pass information back to the event source by modifying the properties of the event parameter object. While these idioms work, they are not as natural as returning values from methods.</p><p>Note that these two heuristic methods may often coexist: if the delegate method returns a value, it may affect the algorithm in some way.</p><h2 id="Event-has-a-dedicated-call"><a href="#Event-has-a-dedicated-call" class="headerlink" title="Event has a dedicated call"></a>Event has a dedicated call</h2><p>Classes other than the class containing the event can only add and remove event listeners; only the class containing the event can call the event. Events are usually public class members. In contrast, delegates are usually passed as arguments and stored as private class members (if they are all stored).</p><h2 id="Event-listeners-usually-have-a-longer-lifetime"><a href="#Event-listeners-usually-have-a-longer-lifetime" class="headerlink" title="Event listeners usually have a longer lifetime"></a>Event listeners usually have a longer lifetime</h2><p>The reason that event listeners generally have a longer lifetime is not very good. However, you may find that event-based design is more natural when the event source will raise events for a long period of time. Examples of event-based UX control design can be seen on many systems. After subscribing to an event, the event source may raise events for the entire lifetime of the program. (You can unsubscribe from events when they are no longer needed.)</p><p>Compare this to many delegate-based designs where the delegate is used as a parameter to a method and is no longer used after the method is returned.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;With the gradual increase in use, I can’t stand the use of these concepts in the vague situation, so I found some official doc to learn these concepts in C #, mainly to distinguish between delegates and events.&lt;/p&gt;
&lt;p&gt;In fact, I personally have been very vague about these concepts before reading the doc, and even once was confused by various blogs on the Internet, and even confused Action, Func and commission.&lt;/p&gt;
&lt;p&gt;Finally, after I went to read the official doc, I had some understanding of these concepts.&lt;/p&gt;
&lt;p&gt;First of all, the most important conclusion is thrown. Both delegates and events are to provide a way to post-process functions. Events are actually multicast based on delegates, and it is inconvenient to define a new delegate type every time you use a delegate, so it is provided. Two strong types of delegates are Action and Func.&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/en/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>Difference Arrays</title>
    <link href="https://sunra.top/en/posts/54851/"/>
    <id>https://sunra.top/en/posts/54851/</id>
    <published>2022-03-13T07:04:39.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>This week’s question of the day has a difficult level question, using a technique called difference array. This technique is actually not complicated, that is, the reverse operation of prefix and, simply record it.</p><p>Here is the link to the title: <a href="https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/">https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/</a></p><span id="more"></span><p>The simplest way to do this problem is to iterate over each possible k, then calculate the score of the current array, and finally compare the score that is the largest in that case. If there are multiple largest, then take the smaller k value.</p><p>However, in this way, the complexity of the algorithm is the square level of n.</p><p>So we need to find the rule and then simplify the rule.</p><p>First, let’s analyze this problem: let the number with index i be x, then according to the problem conditions, we can know that when x &lt; = i, the element counts as one point.</p><p>Therefore, the array index range of one point of element x is [x, n-1].</p><p>If we rotate the number of times k, then after the rotation, because it is a leftward rotation, the subscript after the rotation is (i - k + n) mod n</p><p>So, the range of (i - k + n) mod n should be [x, n - 1]</p><p>Do the math and you get, k &lt; = (i - x + n) mod n, k &gt; = (i + 1) mod n.</p><p>After removing the modulo operation, when i &lt; x, i + 1 &lt; = k &lt; = i - x + n, when i &gt; = x, k &gt; = i + 1 or k &lt; = i - x</p><p>For each element in the array nums, the rotation index range of 1 point for the element can be calculated according to the element value and the subscript of the element. After traversing all elements, you can get the number of elements corresponding to each rotation index. The rotation index with the most elements with 1 point is the rotation index with the highest score. If there are multiple rotation subscripts with the highest scores, take the smallest one among them.</p><p>Create an array of points of length n, where points [k] represents the score when the rotation index is k. For each element in the array nums, get the rotation index range of 1 point for that element, and then add 1 to all elements in that index range of array points. When the value of the elements in the array points is determined, find the smallest index of the largest element. The time complexity of this approach is still O (n ^ 2), and in order to reduce the time complexity, you need to use a differential array.</p><p>Assume that the initial index of element x is i. Add 1 to all elements in the index range [i + 1, i - x + n] of points when i &lt; x, and add 1 to all elements in the index range [0, i - x] and [i + 1, n - 1] of points when i ≥ x. Since it is adding 1 to the elements within one or two consecutive subscript ranges, it can be implemented using a differential array. Define a difference array diffs of length n, where diffs [k] = points [k] − points [k − 1] (in particular, points [− 1] = 0), by: let low = (i + 1) mod n, high = (i − x + n + 1) mod n, add 1 to the value of diffs [low], subtract 1 from the value of diffs [high], and add 1 to the value of diffs [0] if low ≥ high.</p><p>After traversing all elements of the array nums and updating the difference array, traverse the array diffs and calculate the prefix sum, then the prefix sum at each subscript represents the score at the current rotation subscript. Maintain the minimum rotation subscript of the maximum score and the maximum score during the traversal process, and you can get the result after the traversal.</p><p>Here is the code for the C language version:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bestRotation</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span>* diffs = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    <span class="built_in">memset</span>(diffs, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        <span class="type">int</span> low = (i + <span class="number">1</span>) % numsSize;</span><br><span class="line">        <span class="type">int</span> high = (i - nums[i] + numsSize + <span class="number">1</span>) % numsSize;</span><br><span class="line">        diffs[low]++;</span><br><span class="line">        diffs[high]--;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">            diffs[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> bestIndex = <span class="number">0</span>, maxScore = <span class="number">0</span>, score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        score += diffs[i];</span><br><span class="line">        <span class="keyword">if</span> (maxScore &lt; score) &#123;</span><br><span class="line">            bestIndex = i;</span><br><span class="line">            maxScore = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(diffs);</span><br><span class="line">    <span class="keyword">return</span> bestIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;This week’s question of the day has a difficult level question, using a technique called difference array. This technique is actually not complicated, that is, the reverse operation of prefix and, simply record it.&lt;/p&gt;
&lt;p&gt;Here is the link to the title: &lt;a href=&quot;https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/&quot;&gt;https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Computer Composition (1) Computer Overview</title>
    <link href="https://sunra.top/en/posts/21925/"/>
    <id>https://sunra.top/en/posts/21925/</id>
    <published>2022-02-26T08:22:42.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>The performance of a computer system is largely characterized by the efficiency and role of software, and the performance of software cannot be achieved without the support of hardware. For a certain function, it can be implemented in software or hardware, which is called software and hardware is logically equivalent. When designing a computer system, the functions of software and hardware should be assigned. Generally speaking, if a function is frequently used and the cost of implementing it with hardware is ideal, hardware should be used to implement it, because the efficiency of hardware implementation is generally higher.</p><span id="more"></span><h1 id="Computer-hardware"><a href="#Computer-hardware" class="headerlink" title="Computer hardware"></a>Computer hardware</h1><h2 id="Basic-ideas-of-von-neumann"><a href="#Basic-ideas-of-von-neumann" class="headerlink" title="Basic ideas of von neumann"></a>Basic ideas of von neumann</h2><p>When von Neumann studied EDVAC, he proposed the concept of “stored program”. The idea of “stored program” laid the basic structure of modern operating systems, and all kinds of computers based on this concept are collectively referred to as von Neumann machines. Its characteristics are as follows:</p><ul><li>Adopt the working method of “stored program”.</li><li>The computer hardware system consists of five components: arithmetic unit, controller, memory, input device and output device.<br>Instructions and data are stored in memory in the same position, with no difference in form, while computers can distinguish them by relying on different stages of the instruction cycle.</li><li>Instructions and data are represented in binary. Instructions consist of operation codes and address codes. The operation code indicates the type of operation, and the address code indicates the address of the operand.</li></ul><p>The basic idea of “stored program” is that the pre-prepared program and the original data source can be sent to main memory before execution. Once the program is started and executed, there is no need for operator intervention.</p><p>Its basic working mode is: control flow driven mode.</p><h2 id="Functional-components-of-a-computer"><a href="#Functional-components-of-a-computer" class="headerlink" title="Functional components of a computer"></a>Functional components of a computer</h2><h3 id="Input-device"><a href="#Input-device" class="headerlink" title="Input device"></a>Input device</h3><p>The main function of an input device is to input programs and data into a computer in the form of information that the machine can recognize and accept. The most commonly used and basic input device is the keyboard.</p><h3 id="Output-device"><a href="#Output-device" class="headerlink" title="Output device"></a>Output device</h3><p>The main task of an output device is to output the results of computer processing in a form acceptable to people or in the form of information required by other systems. The most common and commonly used output devices are monitors, printers, etc.</p><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>Memory is divided into main memory (also known as internal memory) and auxiliary memory (also known as external memory). The memory that the CPU can directly access is main memory. Secondary memory is used to help main memory remember more information. Information in secondary memory must be transferred to main memory before it can be accessed by the CPU.</p><p>The working mode of main memory is to access the address of the storage unit, which is called address access.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645864310/origin-of-ray/Flowchart_xh7xl0.jpg" alt="img"><br>The most basic composition of main memory is shown in the figure.</p><p>The memory stores binary data, the address register (MAR) stores the memory access address, and finds the corresponding memory cell after address decoding.</p><p>The Data Register (MDR) is used to temporarily store information to be read or written from memory.</p><p>The timing control logic is used to produce various timing signals required for memory operation.</p><p>A memory bank consists of many storage units, each storage unit contains several storage elements, and each storage element stores one bit of binary code. Therefore, the storage unit can store a string of binary code, which is called a storage word. The storage length of this string of code is the storage word length, which needs to be an integer multiple of 1B (8bits).</p><p>What we usually call a 32-bit machine refers to the word length, also known as the machine word length. The so-called word length usually refers to the width of the data path used for integer operations inside the CPU, that is, the number of bits of binary data that can be processed by a computer for an integer operation (that is, fixed-point integer operation, this concept will be discussed later in the chapter), usually related to the number of registers and adders of the CPU. Therefore, the word length is generally equal to the size of the internal register. The longer the word length, the larger the data representation range and the higher the calculation accuracy.</p><p>The concept of word length is different from that of word. A word is used to represent the unit of information to be processed and is used to measure the width of a data type. For example, x86 defines a word as 16 bits.</p><p>Instruction word length: The number of bits of binary code contained in an instruction word.</p><p>Storage word length: The number of bits of binary code stored in a storage unit.</p><p>They must all be integer multiples of bytes.</p><p>The instruction word usually takes an integer multiple of the storage word length. If the instruction word length is equal to 2 times the storage word length, two memory access cycles are required to retrieve an instruction. If the instruction word length is equal to the storage word length, the instruction fetch cycle is equal to the machine cycle.</p><p>MAR for addressing, the number of bits corresponding to the number of memory cells, such as MAR bit 10, there are 2 ^ 10 = 1024 memory cells, that is, 1k, the information that can be stored is 1k * storage word length.</p><p>The virtual address should not be considered here, and the physical address that goes to the MAR is already converted.</p><p>The length of the MAR is the same as the length of the PC, and both are used to store addresses. It’s just that the content in the memory pointed to by the address stored by the PC must be an instruction.</p><p>The length of MDR is equal to the storage word length, usually an integer multiple of the second power of the byte. Because the role of MDR is to temporarily store the content to be read or written from memory, in general, the length of each read and write from memory is one storage word length.</p><p>So <em> should the constant of the data bus be the same as the length of the MDR? </em></p><p>Note that although MAR and MDR are part of the memory, modern computers generally incorporate them into the CPU.</p><h3 id="Arithmetic-unit"><a href="#Arithmetic-unit" class="headerlink" title="Arithmetic unit"></a>Arithmetic unit</h3><p>An arithmetic unit is an executive part of a computer that performs arithmetic and logical operations.</p><p>The core of the arithmetic unit is the Arithmetic and Logic Unit (ALU). The arithmetic unit contains several general purpose registers for staging operands and intermediate results, such as the accumulator (ACC), multiplier quotient register (MQ), operand register (X), index register (IX), base address register (BR), etc., the first three registers are required.</p><p>There is also a program status register (PSW) inside the arithmetic unit, also known as the flag register, which is used to store some flag information obtained by the ALU operation or the status information of the processor, such as whether the result is overflowing, whether there is a carry or offset, etc.</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>The controller is the command center of the computer, which directs the various components to work automatically and harmoniously.</p><p>The controller consists of a Program Counter (PC), an Instruction Register (IR), and a Control Unit (CU).</p><p>PC is used to store the address of the current instruction to be executed, and can automatically add 1 to form the address of the next instruction, and there is a direct path between it and the main memory MAR.</p><p>IR is used to store the current instruction, and its content comes from the MDR of main memory. The OP (IR) in the instruction is sent to the CU for analyzing the instruction and issuing various micro-operation command sequences; while the address code Ad (IR) is sent to the MAR for fetching the operands.</p><p>As mentioned above, the instruction word length can be an integer multiple of the storage word length, so the length of the IR can be an integer multiple of the MDR, that is, an instruction may be fetched multiple times.</p><p>Generally, the arithmetic unit and controller are integrated into the same chip, called the Central Processor.</p><p>CPU contains ALU, general purpose register group GPRs, PSW, controller, IR, PC, MAR, MDR, etc.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863416/origin-of-ray/流程图_3_m808y3.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863416/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_3_m808y3.jpg"></p><p>The above figure is a simple architecture diagram of a CPU. Through the above figure, we simply analyze the execution process of the next instruction:</p><ul><li>The address of the next instruction is indicated in the PC register and placed on the address bus through the MAR.</li><li>The controller issues a read command to the control bus.</li><li>According to the address indicated by the address bus, obtain instructions from main memory and place them on the data bus.</li><li>Because the control bus indicates that it is now a read command, read instructions from the data bus into the MDR and then into the IR</li><li>IR put the OP (opcode) into the CU to parse, then put the Ad (address code) into the MAR, then get the data from memory, put it in the MDR, and then put the data into GPRs.</li><li>If the instruction parses successfully, the data is also placed in the general purpose register, and the ALU can be used for calculation.</li></ul><h1 id="Computer-software"><a href="#Computer-software" class="headerlink" title="Computer software"></a>Computer software</h1><h2 id="System-software-and-application-software"><a href="#System-software-and-application-software" class="headerlink" title="System software and application software"></a>System software and application software</h2><p>System software is a set of basic software that ensures the efficient and correct operation of a computer system, usually provided to users as system resources.</p><p>The system software mainly includes operating system, database management system (DBMS), language processing system, distributed software system, network software system, standard library program, service program, etc.</p><p>Application software refers to programs developed for users to solve various problems in an Application Area.</p><h2 id="Three-levels-of-language"><a href="#Three-levels-of-language" class="headerlink" title="Three levels of language"></a>Three levels of language</h2><ul><li>Machine language</li><li>Assembly language</li><li>High level language</li></ul><p>Due to the inability of computers to directly understand and execute high-level languages, programs that need to convert high-level languages into machine language are usually called translation programs. Translation programs are divided into three categories:</p><ul><li>Assembly program (assembler). Translate assembly language into machine language.</li><li>Interpreter (interpreter). Translate the statements in the source program into its instructions one by one in the order of execution and execute them immediately.</li><li>compile program (compiler). Translate high-level language into assembly language or machine language.</li></ul><p>The interpreter does not generate a fully translated program in memory.</p><h2 id="Logical-functional-equivalence-of-software-and-hardware"><a href="#Logical-functional-equivalence-of-software-and-hardware" class="headerlink" title="Logical functional equivalence of software and hardware"></a>Logical functional equivalence of software and hardware</h2><p>Hardware often implements the most basic arithmetic and logic functions, while most other functions are augmented by software.</p><p>For a certain function, it can be implemented by both hardware and software. From the user’s point of view, they are functionally equivalent, which is called functional equivalence of software and hardware logic.</p><p>Equivalence is an important basis for computer system design. When designing a computer system, we must consider whether a certain function is implemented in hardware or software from many aspects.</p><h1 id="Hierarchical-structure-of-computer-systems"><a href="#Hierarchical-structure-of-computer-systems" class="headerlink" title="Hierarchical structure of computer systems"></a>Hierarchical structure of computer systems</h1><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863414/origin-of-ray/流程图_1_gwp690.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863414/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_1_gwp690.jpg"></p><p>Level 1 is the microprogrammed machine layer, which is a real hardware layer that executes microinstructions directly from the machine hardware.</p><p>The relationship between machine instructions and microinstructions can be summarized as follows:</p><p>A machine instruction corresponds to a microprogram, which is composed of several microinstructions. Therefore, the function of a machine instruction is realized by a sequence composed of several microinstructions. In short, the operation completed by a machine instruction is divided into several microinstructions to complete, which are interpreted and executed by microinstructions.</p><p>From the one-to-one correspondence between instructions and microinstructions, programs and microprograms, and addresses and microaddresses, the former is related to internal memory, while the latter is related to control memory (which is a part of the microprogram controller. The microprogram controller is mainly composed of three parts: control memory, microinstruction register and address transfer logic. Among them, the microinstruction register is further divided into two parts: the microaddress register and the microcommand register), and there are corresponding hard devices related to this.</p><p>It can be seen from the flowchart of microprogram execution of general instructions. Each CPU cycle is for one microinstruction. This tells us how to design microprograms, and will also allow us to further experience the relationship between machine instructions and microinstructions.</p><p>Level 2 is the traditional machine language layer, which is also an actual machine layer with microprograms interpreting machine instruction systems.</p><ul><li>Level 3 is the operating system layer, which is implemented by operating system programs, which are composed of machine instructions and generalized instructions. These generalized instructions are software instructions defined and interpreted by the operating system for the purpose of extending machine functions, so this layer is also called the hybrid layer.</li></ul><p>The specific content of generalized instructions can be delved into when looking at the operating system.</p><ul><li>The fourth layer is the assembly language layer, which provides users with a symbolic language through which assembly language programs can be written. This layer is supported and executed by the assembly program.</li><li>Level 5 is the high-level language layer, which is user-oriented and set up for the convenience of users writing applications. This layer has support and execution of high-level program compilers.</li></ul><p>Above the high-level language layer, there can also be an application layer.</p><p>Your pure hardware system without soft armor is called bare metal. Layers 3-5 are called virtual machines, which are simply software-implemented machines.</p><p>The relationship between the layers is close, the lower layer is the foundation of the upper layer, and the upper layer is the extension of the lower layer.</p><h1 id="The-working-principle-of-computer-system"><a href="#The-working-principle-of-computer-system" class="headerlink" title="The working principle of computer system"></a>The working principle of computer system</h1><h2 id="How-“stored-program”-works"><a href="#How-“stored-program”-works" class="headerlink" title="How “stored program” works"></a>How “stored program” works</h2><p>This method stipulates that before the program is executed, the instructions or data contained in the program need to be sent to main memory. Once the program is started and executed, there is no need for operator intervention, and the extraction and execution tasks of the instructions are automatically completed one by one.</p><p>The execution process of each instruction includes: accessing the instruction from the main, decoding the instruction, calculating the address of the next instruction, taking the operand and executing it, and sending the execution result back to memory.</p><p>The instructions here are the machine instructions mentioned above. They are divided into multiple steps, and each step is called a microinstruction.</p><p>The time to fetch instructions is generally called a machine cycle, also known as a CPU cycle</p><h2 id="From-source-program-to-executable-file"><a href="#From-source-program-to-executable-file" class="headerlink" title="From source program to executable file"></a>From source program to executable file</h2><p>When writing C language programs in a computer, they must be converted into a series of low-level machine instructions, packaged in a format called an executable object file, and stored as binary disk files.</p><p>Take GCC for UNIX as an example:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863415/origin-of-ray/流程图_2_z9ajc2.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863415/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_2_z9ajc2.jpg"></p><ul><li>Preprocessing stage: The preprocessor (cpp) processes commands starting with #in the source program, such as inserting the contents of the .h file after the #include command into the program file. The output is a source program with an extension of .i.</li><li>compile stage: The compiler (ccl) compiles the preprocessed source program to generate an assembly language source program hello.s. Each statement in the assembly language source program describes a low-level machine language instruction in a text format.</li><li>Assembly stage: The assembler (as) translates hello.s into machine language instructions and packages these instructions into a binary file called hello.s, which is a relocatable object file.<br>Link phase: The linker (ld) merges multiple relocatable object files and standard library functions into a single executable object file, or executable for short.</li></ul><h2 id="Description-of-program-execution-process"><a href="#Description-of-program-execution-process" class="headerlink" title="Description of program execution process"></a>Description of program execution process</h2><p>In UNIX, we can execute the program through the shell command line interpreter. The process of executing the program is explained through the shell command line as follows:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">unix&gt; </span><span class="language-bash">./hello</span></span><br><span class="line"></span><br><span class="line">hello, world!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">unix&gt; </span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863310/origin-of-ray/asynccode_nix9io.png" alt="img"></p><p>The shell program reads each character entered by the user from the keyboard into the CPU register one by one (corresponding to 1), then saves it to the main memory, and forms the string “./hello” (corresponding to 2) in the buffer of the main memory. After receiving Enter, the shell calls up the kernel program of the system, and the kernel loads the executable file hello on the disk to the main memory (corresponding to 3). The kernel loads the code and data in the executable file (here is the string “hello, world! \ N “), the address of the first instruction of hello is sent to the PC, and the CPU then starts executing the hello program, which accesses each character in the string loaded into the main memory from the main memory to the CPU’s register (corresponding to 4), and then sends the characters in the CPU register to the display (corresponding to 5).</p><blockquote><p>It is not so simple to send it directly to the PC here, it will involve the switching of processes.</p></blockquote><h2 id="Description-of-the-instruction-execution-process"><a href="#Description-of-the-instruction-execution-process" class="headerlink" title="Description of the instruction execution process"></a>Description of the instruction execution process</h2><p>The code segment of the executable file is composed of a sequence of machine instructions represented by 0 and 1, which are used to indicate that the CPU completes a specific atomic operation.</p><p>For example, the number fetch instruction takes out a data from the storage unit and sends it to the register of the CPU. The number store instruction writes the contents of the register into a storage unit. The ALU instruction sends the contents of the two registers to some arithmetic or logical operation. In a CPU register. Taking the number fetch instruction as an example, it is sent to the ACC after fetching. The information flow is:</p><ul><li>Instruction fetch: PC - &gt; MAR - &gt; M -MDR - &gt; IR</li><li>Analysis instruction: OP (IR) - &gt; CU</li><li>Execute command: Ad (IR) - &gt; MAR - &gt; M - &gt; MDR -ACC</li></ul><h1 id="Computer-performance-indicators"><a href="#Computer-performance-indicators" class="headerlink" title="Computer performance indicators"></a>Computer performance indicators</h1><h2 id="Word-length"><a href="#Word-length" class="headerlink" title="Word length"></a>Word length</h2><p>This has been mentioned earlier, you can take a look at the previous content.</p><h2 id="Data-path-bandwidth-data-word-length"><a href="#Data-path-bandwidth-data-word-length" class="headerlink" title="Data path bandwidth (data word length)"></a>Data path bandwidth (data word length)</h2><p>Refers to the number of bits of information that the data bus can transmit in parallel at one time. The data path width mentioned here refers to the width of the external data bus, which may be different from the width of the data bus (internal register size) inside the CPU</p><h2 id="Main-memory-capacity"><a href="#Main-memory-capacity" class="headerlink" title="Main memory capacity"></a>Main memory capacity</h2><p>Refers to the maximum capacity of the main memory can store information, usually measured in bytes, can also be used to express the storage capacity of the word <em> word length (such as 512K </em> 16 bits).</p><p>The number of bits in the MAR reflects the maximum addressable range and is not necessarily the actual memory capacity.</p><p>If the MAR length is 16 bits, it means that there are 2 ^ 16 = 65536 memory cells, which is 64K. If the MDR is 32 bits, it means that the storage word length is 32 bits, and the storage capacity is 64K * 32b.</p><h2 id="Operation-speed"><a href="#Operation-speed" class="headerlink" title="Operation speed"></a>Operation speed</h2><ul><li>throughput. Refers to the number of requests processed by the system per unit time. It depends on how quickly information can be entered into memory, how quickly the CPU can fetch instructions, how quickly data can be accessed from memory, and how quickly results can be sent from memory to external devices. Almost every step is related to main memory, so system throughput mainly depends on the access cycle of main memory.</li><li>Response time. Refers to the waiting time from the user sending a request to the computer until the system responds to the request and obtains the desired result. Usually includes CPU time (time spent running a program) and waiting time (time for disk access, memory access, I/O operations, operating system overhead, etc.).</li><li>CPU clock cycle: usually beat pulse or T cycle, is the reciprocal of the main frequency, is the smallest unit of time in the CPU, and each action of executing instructions requires at least one clock cycle.</li></ul><blockquote><p>An instruction (machine instruction) consists of multiple microinstructions. Each microinstruction requires at least one clock cycle. The time to fetch the instruction (according to the first step of the PC executing the machine instruction, fetch the instruction, which is also a microinstruction) is called the machine cycle., also called CPU cycle</p></blockquote><ul><li>Main frequency (CPU clock frequency). Usually in Hertz (Hz). The higher the main frequency of the computer of the same model, the shorter the time it takes to complete an instruction.</li><li>CPI (Clock cycle Per Instruction): The number of clock cycles required to execute an instruction.<br>CPU execution time refers to the time it takes to run a program</li></ul><blockquote><p>CPU execution time</p><p>CPU performance (CPU execution time) is determined by three factors: frequency, CPI, and number of instructions.</p><p>The same instruction, different architectures of CPU implementation may be different, the required CPI may be different.</p><p>The above three may restrict each other.</p></blockquote><ul><li>MIPS (Million Instructions Per Second): how many million instructions are executed per second</li></ul><blockquote><p>MIPS</p><p>Average instruction cycle</p></blockquote><ul><li>MFLOPS, GFLOPS, TFLOPS, PFLOPS, EFLOPS, ZFLOPS: MFLOPS (Millon Floating-point Operations Per Second), i.e. how many millions of floating-point operations per second</li></ul><blockquote><p>MFLOPS</p></blockquote><h2 id="Benchmark-procedure"><a href="#Benchmark-procedure" class="headerlink" title="Benchmark procedure"></a>Benchmark procedure</h2><p>Benchmarks A set of programs specifically designed for performance rating.</p><p>But not necessarily reliable, hardware system designers or compiler developers may be specially optimized for this program.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The performance of a computer system is largely characterized by the efficiency and role of software, and the performance of software cannot be achieved without the support of hardware. For a certain function, it can be implemented in software or hardware, which is called software and hardware is logically equivalent. When designing a computer system, the functions of software and hardware should be assigned. Generally speaking, if a function is frequently used and the cost of implementing it with hardware is ideal, hardware should be used to implement it, because the efficiency of hardware implementation is generally higher.&lt;/p&gt;</summary>
    
    
    
    <category term="ComputerOrganization" scheme="https://sunra.top/en/categories/ComputerOrganization/"/>
    
    
  </entry>
  
  <entry>
    <title>Fundamentals of Linear Algebra (I)  Connections Between Determinants, Matrices, Vectors and Equations(above)</title>
    <link href="https://sunra.top/en/posts/39443/"/>
    <id>https://sunra.top/en/posts/39443/</id>
    <published>2022-01-30T09:14:47.000Z</published>
    <updated>2023-06-12T00:06:43.938Z</updated>
    
    <content type="html"><![CDATA[<p>I recently wanted to look at computer graphics, but I saw that the course requirements have linear algebra as a pre-requisite, so I re-read some of them, and so far I have looked at properties of determinants, matrices, vectors and systems of equations.<br>The main purpose of this blog is not to summarize the properties of matrices one by one, but to sort out a question I have been having during the review process, which is, why these things are spoken together, what is the relationship between them, and to slightly combine some ideas from the rendering principles, how matrices are applied to them.</p><span id="more"></span><h2 id="Some-understanding-of-the-relationship-between-series-matrices-vectors-and-systems-of-equations"><a href="#Some-understanding-of-the-relationship-between-series-matrices-vectors-and-systems-of-equations" class="headerlink" title="Some understanding of the relationship between series, matrices, vectors and systems of equations"></a>Some understanding of the relationship between series, matrices, vectors and systems of equations</h2><ul><li>A row equation is a value, he is a number, a scalar, while a matrix is a table.</li><li>The value of the row equation can be regarded as a property of the matrix, and some properties of the matrix can be judged by the calculation of the value of the row equation.</li><li>A matrix is an m*n table, but if each column is viewed as a column vector, then the entire matrix can be viewed as a row vector, or a vector group.</li><li>Both matrices and vectors can be an expression of a system of equations. By converting a system of equations into a matrix or vector representation, there are many properties that can help us simplify the computation.</li></ul><h2 id="Matrix-vs-rendering-pipeline"><a href="#Matrix-vs-rendering-pipeline" class="headerlink" title="Matrix vs. rendering pipeline"></a>Matrix vs. rendering pipeline</h2><p>During the running of the game, we need to change the points in the model into pixel points on the screen, which involves transforming the coordinates of the points from the model coordinate system to the world coordinate system, and then to the camera’s coordinate system, etc. A series of transformation of the coordinate space, in fact, is the transformation of the coordinates, (x1, y1, z1) into (x2, y2, z2), this transformation is a system of equations three ternary A system of equations consisting of a single equation.<br>That is, we can turn the system of equations for coordinate transformation into the multiplication of matrices.<br>The advantage of this is that one is that it is more convenient to represent matrices, and the second is that we have many means to simplify the multiplication of matrices, while sometimes we need to transform each other between model spaces, and if we use a system of equations, we have to recalculate a system of equations, but if we use a matrix, then it is straightforward to use the inverse matrix, and if you are an orthogonal matrix, then you can even use the transpose matrix directly.</p><h2 id="Some-properties-of-and-relationships-between-series-matrices-vectors-and-systems-of-equations"><a href="#Some-properties-of-and-relationships-between-series-matrices-vectors-and-systems-of-equations" class="headerlink" title="Some properties of and relationships between series, matrices, vectors, and systems of equations"></a>Some properties of and relationships between series, matrices, vectors, and systems of equations</h2><h3 id="Matrix-expressions"><a href="#Matrix-expressions" class="headerlink" title="Matrix expressions"></a>Matrix expressions</h3><p>A row equation is a number that is an algebraic sum of products of elements in different rows and columns.</p><p>One thing to note is that the number of rows and columns of the determinant is the same, both are n. Then the determinant is called the nth order determinant.</p><p>For determinants of order three and below, we can directly use the diagonal method to find the value of the determinant, for determinants of order three and above, we need to apply the formula</p><script type="math/tex; mode=display">\initial{vmatrix}a_{11} & a_{12} & ... & a_{1n} \\a_{21} & a_{22} & ... & a_{2n} \\... & ... & ... & ... \\a_{n1} & a_{n2} & ... & a_{nn} \\\end{vmatrix}=\sum_{r=1}^n(-1)^{r(j_1j_2...j_n)}a_{1j_1}a_{2j_2}...a_{nj_n}</script><p>where <code>r(j1j2..jn)</code> denotes the inverse order of <code>j1j2..jn</code> (a larger number in front of a smaller number is said to constitute an inverse order, and the total number of inverse orders in an arrangement is called the inverse order of the arrangement), and an even inverse order is called an even arrangement, and an odd inverse order is called an odd arrangement.</p><h4 id="properties-of-the-row-equation"><a href="#properties-of-the-row-equation" class="headerlink" title="properties of the row equation"></a>properties of the row equation</h4><ul><li>The value of the transposed determinant remains unchanged</li><li>Two rows (or two columns) swap positions and the value of the determinant is 0.<ul><li>Corollary 1: Two rows or two columns are identical, the determinant value is 0</li></ul></li></ul><blockquote><p>Whether the value of the series is zero is a very important property, which is closely related to whether the system of equations has a solution, whether the system of vectors is linearly independent, etc.</p></blockquote><ul><li>A row or column has a common factor k. You can put k outside the notation of the determinant, i.e., multiplying a number k by a determinant is equivalent to multiplying a row of it by k.<ul><li>Corollary 1: A row or column value is 0, then the determinant value is 0</li><li>Corollary 2: The elements of two rows (or two columns) correspond to each other proportionally, and the value of the determinant is 0</li></ul></li><li>A row or column can be the sum of two elements, then it can be split into two determinants and added together</li></ul><script type="math/tex; mode=display">\initial{vmatrix}a_1 + b_1 & a_2 + b_2 & a_3 + b_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}=\initial{vmatrix}a_1 & a_2 & a_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}+\initial{vmatrix}b_1 & b_2 & b_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}</script><ul><li>k times of a row (or column) is added to another row (or column), the value of the determinant remains unchanged</li></ul><script type="math/tex; mode=display">\initial{vmatrix}a_1 & a_2 & a_3 \\b_1 & b_2 & b_3 \\c_1 & c_2 & c_3\end{vmatrix}=\initial{vmatrix}a_1 & a_2 & a_3 \\b_1 + ka_1 & b_2 + ka_2 & b_3 + ka_3c_1 & c_2 & c_3\end{vmatrix}</script><h4 id="Row-by-row-or-column-by-column-expansion-formula-Laplace-expansion"><a href="#Row-by-row-or-column-by-column-expansion-formula-Laplace-expansion" class="headerlink" title="Row-by-row (or column-by-column) expansion formula (Laplace expansion)"></a>Row-by-row (or column-by-column) expansion formula (Laplace expansion)</h4><p>The nth-order determinant is called the remainder of <code>a_ij</code>, denoted as <code>M_ij</code>, by crossing out all the elements of row i and column j of <code>a_ij</code> in the nth-order determinant.</p><p>Call <code>(-1)^(i+j)M_ij</code> the algebraic remainder equation of <code>a_ij</code>, denoted as <code>A_ij</code>,i.e:</p><script type="math/tex; mode=display">A_{ij} = (-1)^{i + j}M_{ij}</script><p><strong>Theorem 1</strong>: A determinant of order n is equal to the sum of the products of the elements of any row of it and its corresponding algebraic remainder equation</p><script type="math/tex; mode=display">\initial{vmatrix}A\end{vmatrix}=a_{i1}A_{i1} + a_{i2}A_{i2} + ... + a_{ik}A_{ik}=\sum_{k=1}^na_{ik}A_{ik}, i = 1, 2, 3, ..., n</script><script type="math/tex; mode=display">\initial{vmatrix}A\end{vmatrix}=a_{1i}A_{1i} + a_{2i}A_{2i} + ... + a_{ki}A_{ki}=\sum_{k=1}^na_{ki}A_{ki}, i = 1, 2, 3, ..., n</script><p>The first one becomes the row-by-row expansion of the determinant, and the second one is called the column-by-column expansion.</p><p><strong>Theorem 2</strong>: The sum of the algebraic remainder of any row of the determinant with the elements of another row is 0</p><script type="math/tex; mode=display">\sum_{k=1}^na_{ik}A_{jk} = 0, i j</script><p>There are also several special cases:</p><ul><li><p>The value of the upper (lower) trigonometric determinant is the product of the diagonals</p></li><li><p>The value of the determinant of the subdiagonal is then</p></li></ul><script type="math/tex; mode=display">(-1)^{\frac {n(n-1)}2}a_{1n}a_{2,n-1}...a_{an1}</script><ul><li>If A and B are matrices of order m and n, respectively, then<script type="math/tex; mode=display">\initial{vmatrix}A & * \\0 & B\end{vmatrix}=\initial{vmatrix}A & 0 \\* & B\end{vmatrix}=\initial{vmatrix}A\end{vmatrix}*\initial{vmatrix}B\end{vmatrix},\initial{vmatrix}* & A \\B & 0\end{vmatrix}=\initial{vmatrix}0 & A \\B & *\end{vmatrix}=(-1)^{mn}\initial{vmatrix}A\end{vmatrix}*\initial{vmatrix}B\end{vmatrix}</script></li></ul><ul><li>Van der Munn determinant</li></ul><script type="math/tex; mode=display">\initial{vmatrix}1 & 1 & ... & 1 \\x_1 & x_2 & ... & x_n ...x_1^2 & x_2^2 & ... & x_n^2... & ... & ... & ... \\x_1^{n-1} & x_2^{n-1} & .... & x_n^{n-1}\end{vmatrix}= \prod_{1 \le j \le i \le n}(x_i - x_j)</script><h4 id="Kramer’s-Law"><a href="#Kramer’s-Law" class="headerlink" title="Kramer’s Law"></a>Kramer’s Law</h4><p>If the coefficients of a system of non-simultaneous linear equations consisting of n equations with n unknowns have determinant values that are not zero, then the system of equations has a unique solution, and</p><script type="math/tex; mode=display">x_i =\frac{  \initial{vmatrix}  A_i  \end{vmatrix}}{    \initial{vmatrix}  A  \end{vmatrix}},i = 1, 2, 3, ..., n</script><p>where Ai is the determinant formed by replacing the elements of the i<strong> column</strong> in |A| with the constant terms at the right end of the system of equations</p><p><strong>Corollary</strong>: A system of n equations n unknown quantities consisting of a system of linear equations with coefficients determinant|A| ! = 0 is sufficient for the system of equations to have a unique zero solution (since the constants at the right end of the system of equations are all 0, so |Ai| is 0, then all xi is 0).</p><p>Conversely, if there is a non-zero solution, then |A| = 0.</p><h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><h3 id="vectors"><a href="#vectors" class="headerlink" title="vectors"></a>vectors</h3><h3 id="System-of-equations"><a href="#System-of-equations" class="headerlink" title="System of equations"></a>System of equations</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;I recently wanted to look at computer graphics, but I saw that the course requirements have linear algebra as a pre-requisite, so I re-read some of them, and so far I have looked at properties of determinants, matrices, vectors and systems of equations.&lt;br&gt;The main purpose of this blog is not to summarize the properties of matrices one by one, but to sort out a question I have been having during the review process, which is, why these things are spoken together, what is the relationship between them, and to slightly combine some ideas from the rendering principles, how matrices are applied to them.&lt;/p&gt;</summary>
    
    
    
    <category term="Math" scheme="https://sunra.top/en/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>Introduction to DHCP Protocol Workflow</title>
    <link href="https://sunra.top/en/posts/1133/"/>
    <id>https://sunra.top/en/posts/1133/</id>
    <published>2021-11-13T00:47:39.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>Recently read an article introducing the DHCP protocol workflow, here is a brief summary.</p><span id="more"></span><h2 id="How-to-configure-an-IP-Address-for-a-network-interface-card"><a href="#How-to-configure-an-IP-Address-for-a-network-interface-card" class="headerlink" title="How to configure an IP Address for a network interface card"></a>How to configure an IP Address for a network interface card</h2><p>You can configure an address yourself with the command line. You can use ifconfig or ip addr. After setting it up, use these two commands to card up the network interface and start working.</p><p>Use net-tools:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ifconfig eth1 10.0.0.1/24</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ifconfig eth1 up</span></span><br></pre></td></tr></table></figure><p>Using iproute2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ip addr add 10.0.0.1/24 dev eth1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> up eth1</span></span><br></pre></td></tr></table></figure><p>You may ask, configuring this degree of freedom yourself is too much, can I configure anything?</p><p>What if I configure an address that is not related to anyone? For example, the machines next to me are all 192.168.1.x, and I have to configure a 16.158.23.6, what will happen?</p><p>There will be no phenomenon, just that the package cannot be sent out.</p><p>Why not send it? For example. 192.168.1.6 is next to your machine, even on the same switch, and you set the address of the machine to 16.158.23.6. On this machine, you try to ping 192.168.1.6, and you think that as long as you send the packet, another machine on the same switch will receive it right away, right? But Linux system is not like this, it is not as smart as you think. You see the machine next to you with the naked eye, and it needs to process according to its own logic.</p><p>As long as the packet is running on the network, it is complete, there can be no upper layer, absolutely impossible to have no lower layer. So, you look at it has its own source IP address 16.158.23.6, there is also a destination IP address 192.168.1.6, but the packet can not be sent out, this is because the MAC layer has not been filled.</p><p>It’s easy to know your own MAC address. But what should the target MAC fill in? Is 192.168.1.6 fill in the MAC address of this machine? Of course not. Linux will first judge, is the address you want to go to the same network segment as me, or is it the same network segment as one of my network interface cards? ** Only if it is a network segment, it will send an ARP request to obtain the MAC address. What if it is not found? Linux default logic is that if this is a cross-segment call, it does not send the packet directly to the network, but attempts to send the packet to the gateway.</p><blockquote><p>In the same local area network, DHCP requests an IP address for its own MAC, and ARP obtains someone else’s MAC address based on someone else’s IP.</p></blockquote><p>If you configure the gateway, Linux will get the MAC address of the gateway and then send the packet out. For 192.168.1.6 machine, although the packet passing by its door, the target IP is it, but the MAC address is not it, so its network interface card will not receive the packet.</p><p>What if the gateway is not configured? The package can’t be sent at all.</p><p>If the gateway is configured to 192.168.1.6? Impossible, <strong> Linux won’t let you configure it successfully, because the gateway needs to be on the same network segment as at least one network interface card of the current network. How can 16.158.23.6 gateway be 192.168.1.6? </strong></p><p>So, when you need to manually configure the network IP of a machine, be sure to ask your network administrator. If you are in the computer room, go to the network administrator to apply and ask him to assign you a correct IP address. Of course, when the real configuration is done, it must not be configured directly with commands, but in a configuration file. The configuration file format of different systems is different, but it is nothing more than CIDR, subnet mask, broadcast address and gateway address.</p><h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The above method of statically configuring IP is more troublesome and requires manual configuration, and it is also necessary to know which IPs have not been assigned, and once there is no manual release, even if this IP is no longer used, if it is not manually released, the IP is still It cannot be used by other computers in need.</p><p>So we need to have an automatic configuration protocol, that is, Dynamic Host Configuration Protocol (Dynamic Host Configuration Protocol), referred to as DHCP., when a new device accesses, it can automatically assign an IP Address to it, and when it is no longer using the network, it can take back the IP Address.</p><p>With this protocol, network administrators were much more relaxed. He only needed to configure a shared IP address. Each newly connected machine would apply for this shared IP address through the DHCP protocol, and then automatically configure it. Wait for someone to leave, or run out, and return it so that other machines can also use it.</p><p>So, if it is a server in the Data center, once the IP is configured, it will basically not change, which is equivalent to buying a house and decorating it yourself. The DHCP method is equivalent to renting a house. You don’t need to decorate, it’s all configured for you. You can use it temporarily and return the lease after use.</p><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>The new machine sends a broadcast packet using the IP address 0.0.0.0, the destination IP address is 255.255.255.255. The broadcast packet encapsulates UDP, and UDP encapsulates BOOTP. In fact, DHCP is an enhanced version of BOOTP, but if you capture packets, you are likely to see the name of the BOOTP protocol.</p><p>In this broadcast package, the new bee shouted: I am new (Boot request), my MAC address is this, I don’t have an IP yet, who can rent me an IP address!</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221021_vyrmgg.png" alt=""></p><blockquote><p>When the new machine sends the broadcast packet, it has not been assigned an IP address, so it uses a reserved address, 0.0.0.0, and it does not know DHCP.</p><p>In other words, all machines in the network can receive the broadcast packet and respond, which may pose a certain danger to deceive the machine</p></blockquote><p>If a network administrator configures a DHCP Server in the network, he is equivalent to the administrator of these IPs. He can immediately know that a “new bee” has come. At this time, we can appreciate the unique importance of MAC addresses. When a machine joins a network with its own MAC address, the MAC is its unique identity. If even this is repeated, there is no way to configure it. Only when the MAC is unique, the IP administrator can know that this is a new bee and needs to lease an IP address to it. This process is called DHCP Offer. At the same time, the DHCP Server reserves the IP address provided for this customer, so it will not assign this IP address to other DHCP customers.</p><p>The DHCP Offer is formatted like this, with addresses assigned to new bees.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221106_ym8rio.png" alt=""></p><p>The DHCP Server still uses the broadcast address as the destination address because, at this time, the new bee requesting an IP assignment does not have its own IP. The DHCP Server replied, I have assigned an available IP to you, what do you think? In addition, the server also sends information such as subnet mask, gateway, and IP address lease period.</p><p>The new machine was very happy. Its “roar” had been answered, and someone was willing to rent it an IP address, which meant that it could gain a foothold on the Internet.</p><p>Of course, even more pleasantly, if there are multiple DHCP Servers, this new machine will receive multiple IP addresses, which is simply flattering. It will select one of the DHCP Offers, usually the one that arrives first, and will send a DHCP Request broadcast data packet to the network, which contains the MAC address of the client, the IP address in the accepted lease, and the DHCP server that provided this lease. Address, etc., and tell all DHCP Servers which server it will accept the IP address provided by, tell other DHCP servers, thank you for your acceptance, and request to revoke the IP address they provided for the next IP lease requester.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221140_c1zfid.png" alt=""></p><p>When the DHCP Server receives the client’s DHCP request, it will broadcast a DHCP ACK message packet back to the client, indicating that it has accepted the client’s choice, and put the legal lease information and other configuration information of this IP address into the broadcast packet, sent to the client, and welcomed it to the network family. When the final lease is reached, it still needs to be broadcast to let everyone know.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221146_vkuwkg.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently read an article introducing the DHCP protocol workflow, here is a brief summary.&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/en/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Basic knowledge of DDOS</title>
    <link href="https://sunra.top/en/posts/7039/"/>
    <id>https://sunra.top/en/posts/7039/</id>
    <published>2021-10-05T23:38:52.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>This time, learn the basics of DOS (Distributed Denial-of-service) and DDOS (Distributed Denial-of-service).</p><span id="more"></span><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Distributed Denial of Service (DDoS) attacks are malicious behaviors that flood the target server or its surrounding infrastructure with large-scale internet traffic to disrupt the normal traffic of the target server, service, or network.</p><p>DDoS attacks utilize multiple compromised computer systems as a source of attack traffic to achieve attack effect. The machines exploited can include computers or other networked resources (such as IoT devices).</p><p>In general, DDoS attacks are like a traffic jam on a highway that prevents regular vehicles from reaching their intended destination.</p><h2 id="Basic-principles"><a href="#Basic-principles" class="headerlink" title="Basic principles"></a>Basic principles</h2><p>DDoS attacks are carried out through computer networks connected to the internet.</p><p>These networks consist of computers and other devices (such as IoT devices) that are infected with malicious software and can be remotely controlled by attackers. These individual devices are called bots (or bots), and a group of bots is called a botnet.</p><p>Once a botnet is established, attackers can launch attacks by sending remote commands to each robot.</p><p>When a botnet targets a victim’s server or network, each bot sends a request to the target’s IP address, which can overwhelm the server or network, resulting in a denial of service to normal traffic.</p><p>Since each robot is a legitimate internet device, it may be difficult to distinguish attack traffic from normal traffic.</p><h2 id="How-to-Identify-DDoS-Attacks"><a href="#How-to-Identify-DDoS-Attacks" class="headerlink" title="How to Identify DDoS Attacks"></a>How to Identify DDoS Attacks</h2><p>The most obvious symptom of a DDoS attack is when a website or service suddenly slows down or becomes unavailable. However, there are multiple reasons for similar performance issues (such as legitimate traffic surges), so further investigation is usually required. Traffic analysis tools can help you spot some clear signs of a DDoS attack:</p><ul><li>Suspicious traffic from a single IP address or IP range<br>Large volumes of traffic from users who share a single behavioral characteristic, such as device type, geographic location, or web browser version<br>Unexplained spike in the number of requests to a single page or endpoint</li><li>Strange traffic patterns, such as surges at unconventional times of day or seemingly unnatural patterns (e.g. surges every 10 minutes)<br>There are other more specific signs of DDoS attacks, depending on the type of attack.</li></ul><h2 id="DDoS-classification"><a href="#DDoS-classification" class="headerlink" title="DDoS classification"></a>DDoS classification</h2><h3 id="Application-layer-attacks"><a href="#Application-layer-attacks" class="headerlink" title="Application layer attacks"></a>Application layer attacks</h3><p>This type of attack is sometimes referred to as Layer 7 DDoS attack (referring to Layer 7 of the OSI model), and its goal is to exhaust target resources.</p><p>The target of the attack is the server layer that generates web pages and transmits them in response to HTTP requests. The computational cost of executing an HTTP request in the Client is relatively low, but responding to the target server can be very expensive because the server usually has to load multiple files and run database queries to create a web page.</p><p>Layer 7 attacks are difficult to defend against because it is difficult to distinguish between malicious and legitimate traffic.</p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>The HTTP flood attack is similar to pressing refresh again and again in the web browsers of a large number of different computers at the same time - a large number of HTTP requests flood the server, resulting in a denial of service.</p><p>This type of attack is simple and complex.</p><p>Simpler implementations can access a URL with the same range of attack IP addresses, referrers, and user agents. Complex versions may use a large number of attack IP addresses and use random referrers and user agents to target random URLs.</p><h4 id="Slowloris"><a href="#Slowloris" class="headerlink" title="Slowloris"></a>Slowloris</h4><h4 id="HTTP-1"><a href="#HTTP-1" class="headerlink" title="HTTP"></a>HTTP</h4><h3 id="Transport-layer-attack"><a href="#Transport-layer-attack" class="headerlink" title="Transport layer attack"></a>Transport layer attack</h3><h4 id="SYN-attack"><a href="#SYN-attack" class="headerlink" title="SYN attack"></a>SYN attack</h4><p>SYN flooding is like a supply room worker receiving requests from a store counter.</p><p>Staff receive requests, go pick up packages, wait for confirmation, and then deliver packages to the counter. Staff get too many requests for packages but don’t get confirmation until they can’t handle more packages, so overwhelmed that no one can respond to requests.</p><p>This type of attack utilizes the TCP handshake (a series of communications through which two computers initiate a network connection) and is achieved by sending a large number of TCP “initial connection request” SYN data packets with forged source IP addresses to the target.</p><p>The target computer responds to each connection request and then waits for the final step in the handshake, which never happens, thus exhausting the target’s resources in the process.</p><h4 id="ACK-attack"><a href="#ACK-attack" class="headerlink" title="ACK attack"></a>ACK attack</h4><h3 id="Network-layer-attacks"><a href="#Network-layer-attacks" class="headerlink" title="Network layer attacks"></a>Network layer attacks</h3><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>DNS amplification is like someone calling a restaurant and saying, “Order one of each course, please call me back and repeat the entire order,” when the callback number provided actually belongs to the victim. It takes almost no effort to generate a long response and send it to the victim.</p><p>After sending a request to an open DNS server using a forged IP address (the victim’s IP address), the target IP address will receive a response from the server.</p><h4 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h4><h4 id="UDP-attack"><a href="#UDP-attack" class="headerlink" title="UDP attack"></a>UDP attack</h4><h4 id="Memory-cache-attack"><a href="#Memory-cache-attack" class="headerlink" title="Memory cache attack"></a>Memory cache attack</h4><p>Memory Cache Distributed Denial of Service (DDoS) attack is a type of network attack in which the attacker attempts to overload the network traffic of the target victim. The attacker sends deceptive requests to a vulnerable UDP memory cache * server, which then sends Internet traffic to the target victim, potentially overwhelming the victim’s resources. When the target’s Internet infrastructure is overloaded, new requests cannot be processed, and regular traffic cannot access Internet resources, resulting in a denial of service.</p><blockquote><p>In-memory cache is a database caching system used to accelerate websites and networks.</p></blockquote><p>Memory cache attacks work similarly to all DDoS amplification attacks, such as NTP amplification and DNS amplification. This attack spoofs requests sent to a vulnerable server, which then responds with a larger amount of data than the initial request, thus amplifying traffic.</p><p>A memory cache amplification attack is like a malicious teenager calling a restaurant and saying “I want one of everything on the menu, please call me back and tell me the information of the entire order”. When the restaurant asks for the callback number, he gives the phone number of the target victim. The target then gets a call from the restaurant and gets a lot of information they didn’t request.</p><p>This method of amplifying attacks is made possible because the memory cache server can choose to operate using the UDP protocol. UDP is a network protocol that allows data to be sent without first obtaining a so-called handshake - a network process in which both parties agree to communicate. The reason why UDP is used is because large amounts of data can be sent to the target host without consulting whether the target host is willing to receive data or obtaining their consent in advance.</p><p>The memory cache attack is divided into 4 steps.<br>The attacker implanted a large amount of data payload * on the exposed memory cache server.<br>Next, the attacker forges an HTTP GET request using the IP address of the target victim.</p><ul><li>The memory cache server with the vulnerability receives the request, attempts to provide assistance through the response, and therefore sends a large number of responses to the target.</li><li>The target server or its surrounding infrastructure cannot handle the large amount of data sent from the memory cache server, resulting in overload and denial of service for normal requests</li></ul><p>How to protect against memory cache attacks?</p><ul><li>Disable UDP - For memory cache servers, make sure to disable UDP support when not needed. By default, memory cache has UDP support enabled, which may make the server vulnerable.</li><li>Firewall protection for memory cache servers - By adding firewall protection between memory cache servers and the Internet, system admins can use UDP as needed without being exposed to risk.</li><li>Prevent IP spoofing - As long as IP addresses can be spoofed, DDoS attacks can exploit this vulnerability to direct traffic to the victim’s network. Preventing IP spoofing is a larger-scale solution that cannot be implemented by specific system admins and requires transport providers to prohibit any data packets with source IP addresses originating outside the network from leaving their network. In other words, companies such as Internet Service Providers (ISPs) must filter traffic so that data packets leaving their network must not pretend to be from other networks elsewhere. If all major transport providers implemented this screening, spoofing-based attacks would disappear overnight.</li><li>Develop software with reduced UDP response - Another way to eliminate amplification attacks is to remove the amplification factor of any incoming requests; if the response data sent due to the UDP request is less than or equal to the initial request, amplification is no longer possible.</li></ul><h2 id="How-to-Defend-Against-DDoS"><a href="#How-to-Defend-Against-DDoS" class="headerlink" title="How to Defend Against DDoS"></a>How to Defend Against DDoS</h2><h3 id="Black-hole-routing"><a href="#Black-hole-routing" class="headerlink" title="Black hole routing"></a>Black hole routing</h3><p>There is a solution that works for almost all network administrators: create a black hole route and import traffic into that route. In its simplest form, when black hole filtering is implemented without specific restrictions, both legitimate and malicious network traffic will be routed to an empty route or black hole and dropped from the network.</p><p>If an internet device suffers from a DDoS attack, the device’s Internet Service Provider (ISP) may send all traffic from the site into a black hole as a defense. This is not an ideal solution, as it amounts to allowing attackers to achieve their intended goal: making the network inaccessible.</p><h3 id="Rate-limiting"><a href="#Rate-limiting" class="headerlink" title="Rate limiting"></a>Rate limiting</h3><p>Limiting the number of requests the server receives in a certain period of time is also a way to protect Distributed Denial-of-service.</p><p>Although rate limiting is helpful in slowing down web crawlers from stealing content and protecting against brute force attacks, rate limiting alone may not be enough to effectively deal with complex DDoS attacks.</p><p>However, rate limiting can be an effective means in an effective DDoS protection strategy. Learn about Rate Limiting by Cloudflare</p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>Web Application Firewall (WAF) is an effective tool to help mitigate Layer 7 DDoS attacks. After WAF is deployed between the internet and source sites, WAF can act as a reverse proxy, protecting the target server from specific types of malicious traffic intrusion.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This time, learn the basics of DOS (Distributed Denial-of-service) and DDOS (Distributed Denial-of-service).&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://sunra.top/en/categories/Security/"/>
    
    
  </entry>
  
  <entry>
    <title>Linear Table Basics Summary</title>
    <link href="https://sunra.top/en/posts/16728/"/>
    <id>https://sunra.top/en/posts/16728/</id>
    <published>2021-08-25T00:33:01.000Z</published>
    <updated>2023-06-12T00:06:43.938Z</updated>
    
    <content type="html"><![CDATA[<p>These two weeks took out the university’s data structures and algorithms again to look at the second chapter of the linear table part, and some new gains, I think, to summarize.</p><span id="more"></span><h2 id="Basic-concepts-of-data-structures"><a href="#Basic-concepts-of-data-structures" class="headerlink" title="Basic concepts of data structures"></a>Basic concepts of data structures</h2><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>Data is a carrier of information, a collection of numbers, characters and all symbols that can be entered into a computer and recognized and processed by a computer program to describe the properties of objective things. Data is the raw material for computer program processing.</p><h3 id="Data-elements"><a href="#Data-elements" class="headerlink" title="Data elements"></a>Data elements</h3><p>A <strong>data element</strong> is the basic unit of data and is usually considered and treated as a whole. A data element can be composed of several <strong>data items</strong>, and <strong>data items are the smallest indivisible units</strong> that make up a data element. For example, a student record is a data element that consists of data items such as student number, name, etc.</p><h3 id="Data-objects"><a href="#Data-objects" class="headerlink" title="Data objects"></a>Data objects</h3><p>A data object is a collection of data elements with the same properties and is a subset of the data. For example, an integer object is a set N={0,1,2,…}</p><h3 id="Data-type"><a href="#Data-type" class="headerlink" title="Data type"></a>Data type</h3><p>A data type is a generic term for a collection of values and a set of operations defined on this collection.</p><ul><li>Atomic types: Data types whose values are indivisible</li><li>Structure type: A data type whose values can be subdivided into components (components)</li><li>Abstract data types: abstract data organization and the operations associated with them</li></ul><h3 id="Data-structure"><a href="#Data-structure" class="headerlink" title="Data structure"></a>Data structure</h3><p>A data structure is a collection of data elements that have one or more specific relationships with each other. In any problem, data elements do not exist in isolation, they have some relationship with each other, and this relationship between data elements is called structure.</p><p><strong>Data structure consists of three aspects: logical structure, storage structure and operations on data</strong>.</p><p>The logical structure of the data and the storage structure are two inseparable aspects.<strong> The design of an algorithm depends on the chosen logical structure, and the implementation of the algorithm, on the storage structure used</strong>.</p><h4 id="Logical-Structure"><a href="#Logical-Structure" class="headerlink" title="Logical Structure"></a>Logical Structure</h4><p>Logical structure refers to the logical relationship between data elements, i.e., describing the data in terms of logical relationships. It is independent of the storage structure of the data and is computer independent.</p><p>The logical structure of data is divided into linear and non-linear structures. Linear table is a typical linear structure. Sets, trees, and graphs are typical nonlinear structures.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1629936472/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210826080632_xmnhbt.png" alt=""></p><h4 id="storage-structure"><a href="#storage-structure" class="headerlink" title="storage structure"></a>storage structure</h4><p>The storage structure is the representation of the data structure in the computer, which also becomes the physical structure.</p><p>The main ones are sequential storage, chained storage, indexed storage and hash storage.</p><h2 id="Basic-concepts-of-linear-tables"><a href="#Basic-concepts-of-linear-tables" class="headerlink" title="Basic concepts of linear tables"></a>Basic concepts of linear tables</h2><h3 id="Definition-of-linear-table"><a href="#Definition-of-linear-table" class="headerlink" title="Definition of linear table"></a>Definition of linear table</h3><p>A linear table is a <strong>finite sequence</strong> of n data elements with <strong>same data type</strong>.</p><p>Characteristics of linear tables:</p><ul><li>Limited number of elements in the table</li><li>The elements in a table are logically sequential, and the elements in a table have their own order of precedence.</li><li>The elements in the table are all data elements, and each element is a single element.</li><li>The elements in the table all have the same data type, which means that each element occupies the same size of storage space.</li><li>The elements of the table are abstract in nature, i.e., the logical relationships between elements are discussed without regard to what exactly the elements represent.</li></ul><blockquote><p><strong>Linear table is a logical structure that represents one-to-one adjacency between elements. </strong></p><p><strong>Sequential tables and chained tables represent storage structures. </strong></p></blockquote><h2 id="A-few-simple-but-clever-algorithmic-ideas-seen"><a href="#A-few-simple-but-clever-algorithmic-ideas-seen" class="headerlink" title="A few simple but clever algorithmic ideas seen"></a>A few simple but clever algorithmic ideas seen</h2><h3 id="First"><a href="#First" class="headerlink" title="First"></a>First</h3><p>Delete all elements whose values are between the given values s and t (containing s and t, requiring s&lt;t) from the sequence table. If s or t is not reasonable or the sequence table is empty, an error message is displayed and the run is exited.</p><p>Algorithm idea: Scan the order table L from front to back, record the number of elements whose values are between s and t with k (initially k=0), and for the currently scanned element, if its value is no longer between s and t, move forward k positions, otherwise perform k++. Due to this, each element that is not between s and t is moved only once.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Del_s_t</span><span class="params">(SqlList &amp;L, ElemType s, ElemType t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length= <span class="number">0</span> || s &gt;= t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] &gt;= s &amp;&amp; L.data[i] &lt;= t) &#123;</span><br><span class="line">            k++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L.data[i - k] = L.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length -= k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this algorithm, i denotes the nodes currently traversed and k denotes the number of nodes to be deleted between 0 - i. This means that between 0 and (i - k) are the nodes to be kept and between (i - k) and i are the points to be deleted.</p><p>This relationship, using mathematical induction, starts when i equals 0, and in the next traversal to each node the entire relationship is guaranteed, that finally when i is L.length, the final array of reserved nodes should be 0 to L.length-k</p><p>In fact, you can also use k to indicate the number of nodes to be reserved, then this code becomes</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Del_s_t</span><span class="params">(SqlList &amp;L, ElemType s, ElemType t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length= <span class="number">0</span> || s &gt;= t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] &lt; s || L.data[i] &gt; t) &#123;</span><br><span class="line">            L.data[k++] = L.data[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h3><p>Let n integers be stored into a one-bit array R. Design an algorithm that is as efficient as possible in both time and space. Shift the sequence stored in R cyclically left by p positions, i.e., the data in R changes from (X0, X1, … , XR) to (Xp, Xp+1, …. XR, X0, X1, … , Xp - 1)</p><p>Algorithmic idea: Consider this problem as transforming the array ab into ba, then first invert a to get a-inverse b, then invert b to get a-inverse b-inverse, and finally invert the entire a-inverse b-inverse to get ba.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reverse</span><span class="params">(<span class="type">int</span> R[], <span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, temp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (to - from + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        temp = R[from + i];</span><br><span class="line">        R[from + i] = R[to - i];</span><br><span class="line">        R[to - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Converse</span><span class="params">(<span class="type">int</span> R[], <span class="type">int</span> n, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Reverse</span>(R, <span class="number">0</span>, p - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Reverse</span>(R, p, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Reverse</span>(R, <span class="number">0</span>, n - <span class="number">1</span>);h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-third-one"><a href="#The-third-one" class="headerlink" title="The third one"></a>The third one</h3><p>Let an ascending sequence S be of length L. The number at the position [L / 2] is called the median of S. For example, the median of an ascending sequence S1 (11, 13, 15, 17, 19) is 15. For example, if the ascending sequence S1 (11,13,15,17,19), then its median is 15. The median of two sequences is the median of the ascending sequence containing all their elements. For example, if S2 (2,4,6,8,20), then the median of S1 and S2 is 11. There are two equal ascending sequences A and B. Design a time and space efficient algorithm to find the median of A and B.</p><p>Algorithm idea 1: We can easily think of the first algorithm, because A and B are in ascending order, so set two pointers i, j, initially pointing to the first element of A and B. Then each time we compare A[i] and B[j], if A[i] is small, then i++, if B[j] is small, then j++, when comparing to the first A.length times, at this time the smaller is the median of A and B. The time complexity of this algorithm is O(n)</p><p>Algorithm idea 2: You can use the dichotomy method to improve efficiency. The procedure for finding the median of two ascending sequences A and B, set as a and b, respectively, is as follows:</p><ul><li>If a=b, then a or b is the median and the result is returned.</li><li>If a &lt; b, the smaller half of A is discarded, while the larger half of B is discarded, requiring that the two discards be of equal length.</li><li>If a &gt; b, then discard the larger half of A while discarding the smaller half of B. The length of the two discards is required to be equal.</li></ul><p>In retaining the two ascending sequences, the above three processes are repeated until both sequences contain only one element position, and the smaller one is the median sought.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">M_Search</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> B, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s1 = <span class="number">0</span>, d1 = n - <span class="number">1</span>, m1, s2 = <span class="number">0</span>, d2 = n - <span class="number">1</span>, m2;</span><br><span class="line">    <span class="keyword">while</span>(s1 != d1 || s2 != d2) &#123;</span><br><span class="line">        m1 = (s1 + d1) / <span class="number">2</span>;</span><br><span class="line">        m2 = (s2 + d2) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[m1]= B[m2]) &#123;</span><br><span class="line">            <span class="keyword">return</span> A[m1]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (A[m1] &lt; B[m2]) &#123;</span><br><span class="line">            s1 = (s1 + d1) % <span class="number">2</span>= <span class="number">0</span> ? m1 : m1 + <span class="number">1</span>;</span><br><span class="line">            d2 = m2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            d1 = m1;</span><br><span class="line">            s2 = (s2 + d2) % <span class="number">2</span>= <span class="number">0</span> ? m2 : m2 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> A[s1] &lt; B[s2] ? A[s1] : B[s2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;These two weeks took out the university’s data structures and algorithms again to look at the second chapter of the linear table part, and some new gains, I think, to summarize.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>In-depth Babel Principle Series (II) Parser Code Structure Introduction</title>
    <link href="https://sunra.top/en/posts/5517/"/>
    <id>https://sunra.top/en/posts/5517/</id>
    <published>2021-06-28T00:09:12.000Z</published>
    <updated>2023-06-12T00:06:43.938Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous article, when analyzing the Babel compilation process, we mentioned that Babel converts JS code into ASTs (Abstract Syntax Trees). This behavior is a generic one, no matter what programming language parses the source code into an AST, <strong>AST is not specific to Babel, let alone to JS</strong>.</p><p>Why do we need to do this? The original JS file is incomprehensible to the computer, and it is difficult for the computer to modify the JS code directly, but by converting it to an AST, which is essentially a set of objects that represent the structure of the program, we can indirectly modify the code by modifying the objects. AST to generate bytecode.</p><p>Parser’s process is divided into two steps, the first step, lexical analysis, which is the finite state machine in the compilation principle, to split a piece of code into individual Tokens, and the second step, syntax analysis, to convert the Token array, into an AST tree.</p><p>This time I’ll look at<a href="https://github.com/babel/babel/tree/main/packages/babel-parser">源码</a>The process is briefly analyzed.</p><span id="more"></span><p>First, take a look at the directory structure of Babel-Parser</p><p>There are four main folders, util, plugins, tokeinzer, parser</p><h2 id="Entrance"><a href="#Entrance" class="headerlink" title="Entrance"></a>Entrance</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">input: string, options?: Options</span>): <span class="title class_">File</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (options?.<span class="property">sourceType</span>= <span class="string">&quot;unambiguous&quot;</span>) &#123;</span><br><span class="line">    options = &#123;</span><br><span class="line">      ...options,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      options.<span class="property">sourceType</span> = <span class="string">&quot;module&quot;</span>;</span><br><span class="line">      <span class="keyword">const</span> parser = <span class="title function_">getParser</span>(options, input);</span><br><span class="line">      <span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//Omit some other codes</span></span><br><span class="line">        </span><br><span class="line">      <span class="keyword">return</span> ast;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (moduleError) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        options.<span class="property">sourceType</span> = <span class="string">&quot;script&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getParser</span>(options, input).<span class="title function_">parse</span>();</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> moduleError;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getParser</span>(options, input).<span class="title function_">parse</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The core of this code is to get a parser through the <code>getParser</code> method, and then use the obtained parser to parse.</p><p>Let’s look at this <code>getParser</code> again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getParser</span>(<span class="params">options: ?Options, input: string</span>): <span class="title class_">Parser</span> &#123;</span><br><span class="line">  <span class="comment">// Get Parser</span></span><br><span class="line">  <span class="keyword">let</span> cls = <span class="title class_">Parser</span>;</span><br><span class="line">  <span class="comment">// If a plugin is declared in options, first check whether the way the plugin is declared is reasonable, and if so, enable the plugin function</span></span><br><span class="line">  <span class="comment">// Yes, enable the plug-in function, Parser&#x27;s plug-ins are built-in, and you can only choose whether to enable them through the configuration</span></span><br><span class="line">  <span class="keyword">if</span> (options?.<span class="property">plugins</span>) &#123;</span><br><span class="line">    <span class="title function_">validatePlugins</span>(options.<span class="property">plugins</span>);</span><br><span class="line">    cls = <span class="title function_">getParserClass</span>(options.<span class="property">plugins</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">cls</span>(options, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">parserClassCache</span>: &#123; [<span class="attr">key</span>: string]: <span class="title class_">Class</span>&lt;<span class="title class_">Parser</span>&gt; &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get a Parser class with plugins applied. */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getParserClass</span>(<span class="params">pluginsFromOptions: PluginList</span>): <span class="title class_">Class</span>&lt;<span class="title class_">Parser</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// mixinPluginNames is the name of all built-in plugins</span></span><br><span class="line">  <span class="keyword">const</span> pluginList = mixinPluginNames.<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span></span><br><span class="line">    <span class="title function_">hasPlugin</span>(pluginsFromOptions, name),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache the current portfolio of plugins</span></span><br><span class="line">  <span class="keyword">const</span> key = pluginList.<span class="title function_">join</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> cls = parserClassCache[key];</span><br><span class="line">  <span class="keyword">if</span> (!cls) &#123;</span><br><span class="line">    cls = parser;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> pluginList) &#123;</span><br><span class="line">      cls = mixinPlugins[plugin](cls);</span><br><span class="line">    &#125;</span><br><span class="line">    parserClassCache[key] = cls;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Parser-parsing-process"><a href="#Parser-parsing-process" class="headerlink" title="Parser parsing process"></a>Parser parsing process</h2><p>By now, we figured out the logic of the entry file, which is mainly two parts, the first part declares the Parser, and the second part, if the plug-in is configured, opens the plug-in function for the Parser.</p><p>Then let’s continue to look at Parser’s logic</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parser</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatementParser</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options: ?Options, input: string</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">parse</span>(): <span class="title class_">File</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">enterInitialScopes</span>();</span><br><span class="line">    <span class="keyword">const</span> file = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    <span class="keyword">const</span> program = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">nextToken</span>();</span><br><span class="line">    file.<span class="property">errors</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseTopLevel</span>(file, program);</span><br><span class="line">    file.<span class="property">errors</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">errors</span>;</span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The constructor is all about preparatory work, so don’t pay attention to it first, the main logic is still in this parse function</p><h3 id="1-enterInitialScopes"><a href="#1-enterInitialScopes" class="headerlink" title="1.enterInitialScopes"></a>1.enterInitialScopes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">enterInitialScopes</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> paramFlags = <span class="variable constant_">PARAM</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasPlugin</span>(<span class="string">&quot;topLevelAwait&quot;</span>) &amp;&amp; <span class="variable language_">this</span>.<span class="property">inModule</span>) &#123;</span><br><span class="line">      paramFlags |= <span class="variable constant_">PARAM_AWAIT</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="title function_">enter</span>(<span class="variable constant_">SCOPE_PROGRAM</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prodParam</span>.<span class="title function_">enter</span>(paramFlags);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This step is to initialize the root node at the beginning, along with the corresponding parameters and scopes</p><h3 id="2-startNode"><a href="#2-startNode" class="headerlink" title="2. startNode"></a>2. startNode</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">startNode&lt;<span class="attr">T</span>: <span class="title class_">NodeType</span>&gt;(): T &#123;</span><br><span class="line">    <span class="comment">// $FlowIgnore</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">start</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">startLoc</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-nextToken"><a href="#3-nextToken" class="headerlink" title="3. nextToken"></a>3. nextToken</h3><p>This part is the focus of the parsing, this part of the code will be more complex, the parsing process will have to parse backwards one character at a time, the use of finite state machine state transfer to determine the different states, and finally in reaching a certain state, to produce a token.</p><p>If the number 123456 is read as a 6, a numeric token is generated if it is followed by a space or a semicolon.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">nextToken</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="comment">// curContext = this.state.context[this.state.context.length - 1];</span></span><br><span class="line">    <span class="keyword">const</span> curContext = <span class="variable language_">this</span>.<span class="title function_">curContext</span>();</span><br><span class="line">    <span class="comment">// The internal loop will keep skipping all spaces, such as spaces, tabs, etc.</span></span><br><span class="line">    <span class="keyword">if</span> (!curContext.<span class="property">preserveSpace</span>) <span class="variable language_">this</span>.<span class="title function_">skipSpace</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">start</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isLookahead</span>) <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">startLoc</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">curPosition</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span> &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">eof</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curContext= ct.<span class="property">template</span>) &#123;</span><br><span class="line">      <span class="comment">// Read the template string Token</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">readTmplToken</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Read a normal Token, codePointAtPos returns the ASCII code of the character at the pos position</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getTokenFromCode</span>(<span class="variable language_">this</span>.<span class="title function_">codePointAtPos</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-parseTopLevel"><a href="#4-parseTopLevel" class="headerlink" title="4. parseTopLevel"></a>4. parseTopLevel</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseTopLevel</span>(<span class="attr">file</span>: N.<span class="property">File</span>, <span class="attr">program</span>: N.<span class="property">Program</span>): N.<span class="property">File</span> &#123;</span><br><span class="line">    file.<span class="property">program</span> = <span class="variable language_">this</span>.<span class="title function_">parseProgram</span>(program);</span><br><span class="line">    file.<span class="property">comments</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">comments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">tokens</span>) file.<span class="property">tokens</span> = <span class="title function_">babel7CompatTokens</span>(<span class="variable language_">this</span>.<span class="property">tokens</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">finishNode</span>(file, <span class="string">&quot;File&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Here the call to <code>parseProgram</code> will continue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseProgram</span>(</span><br><span class="line">    <span class="title class_">Program</span>,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span> = tt.<span class="property">eof</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="title class_">SourceType</span> = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">sourceType</span>,</span><br><span class="line">  ): N.<span class="property">Program</span> &#123;</span><br><span class="line">    program.<span class="property">sourceType</span> = sourceType;</span><br><span class="line">    program.<span class="property">interpreter</span> = <span class="variable language_">this</span>.parseInterpreterDirective();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseBlockBody</span>(program, <span class="literal">true</span>, <span class="literal">true</span>, end);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">inModule</span> &amp;&amp;</span><br><span class="line">      !<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">allowUndeclaredExports</span> &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>.<span class="property">size</span> &gt; <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> [name] <span class="keyword">of</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> pos = <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>.<span class="title function_">get</span>(name);</span><br><span class="line">        <span class="comment">// $FlowIssue</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">raise</span>(pos, <span class="title class_">Errors</span>.<span class="property">ModuleExportUndefined</span>, name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">finishNode</span>&lt;N.<span class="property">Program</span>&gt;(program, <span class="string">&quot;Program&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Call <code>parseBlockBody</code> again</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseBlockBody</span>(</span><br><span class="line">    <span class="attr">node</span>: N.<span class="property">BlockStatementLike</span>,</span><br><span class="line">    <span class="attr">allowDirectives</span>: ?boolean,</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = (node.<span class="property">body</span> = []);</span><br><span class="line">    <span class="keyword">const</span> directives = (node.<span class="property">directives</span> = []);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">      body,</span><br><span class="line">      allowDirectives ? directives : <span class="literal">undefined</span>,</span><br><span class="line">      topLevel,</span><br><span class="line">      end,</span><br><span class="line">      afterBlockParse,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Continue to call <code>parseBlockOrModuleBlockBody</code> and eventually enter recursion, calling nextToken recursively through the parserStatement, next and other functions until the string passed in by the parser method at the beginning is completely parsed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">    <span class="attr">body</span>: N.<span class="property">Statement</span>[],</span><br><span class="line">    <span class="attr">directives</span>: ?(N.<span class="property">Directive</span>[]),</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldStrict = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strict</span>;</span><br><span class="line">    <span class="keyword">let</span> hasStrictModeDirective = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> parsedNonDirective = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable language_">this</span>.<span class="title function_">match</span>(end)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stmt = <span class="variable language_">this</span>.<span class="title function_">parseStatement</span>(<span class="literal">null</span>, topLevel);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (directives &amp;&amp; !parsedNonDirective) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidDirective</span>(stmt)) &#123;</span><br><span class="line">          <span class="keyword">const</span> directive = <span class="variable language_">this</span>.<span class="title function_">stmtToDirective</span>(stmt);</span><br><span class="line">          directives.<span class="title function_">push</span>(directive);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            !hasStrictModeDirective &amp;&amp;</span><br><span class="line">            directive.<span class="property">value</span>.<span class="property">value</span>= <span class="string">&quot;use strict&quot;</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            hasStrictModeDirective = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parsedNonDirective = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// clear strict errors since the strict mode will not change within the block</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strictErrors</span>.<span class="title function_">clear</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      body.<span class="title function_">push</span>(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (afterBlockParse) &#123;</span><br><span class="line">      afterBlockParse.<span class="title function_">call</span>(<span class="variable language_">this</span>, hasStrictModeDirective);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldStrict) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>A simple diagram to represent, roughly, is this, omitting many details</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625014272/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210630085034_nq6abs.png" alt=""></p><h2 id="nextToken-method-analysis"><a href="#nextToken-method-analysis" class="headerlink" title="nextToken method analysis"></a>nextToken method analysis</h2><h3 id="readTmplToken-reads-the-template-string"><a href="#readTmplToken-reads-the-template-string" class="headerlink" title="readTmplToken reads the template string"></a>readTmplToken reads the template string</h3><p>This is the state machine I analyzed from the code</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625100732/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085141_jdhpvd.png" alt=""></p><p>Let’s try it and see the results</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625101028/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085657_sxvzrs.png" alt=""></p><h3 id="getTokenFromCode"><a href="#getTokenFromCode" class="headerlink" title="getTokenFromCode"></a>getTokenFromCode</h3><p>This function is not complex in terms of logic, but the conditions are particularly divided, because it is necessary to adapt a variety of different characters to determine, simply show the following:</p><h4 id="charcodes"><a href="#charcodes" class="headerlink" title="charcodes"></a>charcodes</h4><p>The various charCodes used in the code are the contents of another repository, here is the link: <a href="https://github.com/xtuc/charcodes/blob/master/packages/charcodes/src/index.js">https://github.com/xtuc/charcodes/blob/master/packages/charcodes/src/index.js</a></p><h4 id="TokenType"><a href="#TokenType" class="headerlink" title="TokenType"></a>TokenType</h4><p>And the parameters of finishToken are actually a built-in good TokenType, such as <code>tt.parentL</code> which is actually <code>parenL: new TokenType(&quot;(&quot;, &#123; beforeExpr, startsExpr &#125;),</code></p><p>These TokenTypes are all of babel’s built-in token types, and there are two sources of TokenTypes, one is built into the Tokenizer and the other is provided by the parser plugin, but as we said, the parser plugin is just an on/off switch for the user, so essentially, all of the TokenType is essentially built into babel-praser to begin with.</p><p>There are four main categories, one is the variable type, such as number, string, one is the symbol, such as brackets, colon and so on, one is the expression, such as equal to, greater than, and finally is the keyword, such as switch, case, etc.</p><h4 id="Function-Logic"><a href="#Function-Logic" class="headerlink" title="Function Logic"></a>Function Logic</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getTokenFromCode</span>(<span class="attr">code</span>: number): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">      <span class="comment">// The interpretation of a dot depends on whether it is followed</span></span><br><span class="line">      <span class="comment">// by a digit or another two dots.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">dot</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">readToken_dot</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Punctuation tokens.</span></span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">leftParenthesis</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">parenL</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">rightParenthesis</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">parenR</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">semicolon</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">semi</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">comma</span>:</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Dozens of conditions are omitted here</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isIdentifierStart</span>(code)) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">readWord</span>(code);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="variable language_">this</span>.<span class="title function_">raise</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>,</span><br><span class="line">      <span class="title class_">Errors</span>.<span class="property">InvalidOrUnexpectedToken</span>,</span><br><span class="line">      <span class="title class_">String</span>.<span class="title function_">fromCodePoint</span>(code),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="parseTopLevel-method-analysis"><a href="#parseTopLevel-method-analysis" class="headerlink" title="parseTopLevel method analysis"></a>parseTopLevel method analysis</h2><p>At the beginning of the process analysis, we are going to see that the main logic of this function is in the <code>parseBlockOrModuleBlockBody</code> function, so let’s take a look at this function first</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">    <span class="attr">body</span>: N.<span class="property">Statement</span>[],</span><br><span class="line">    <span class="attr">directives</span>: ?(N.<span class="property">Directive</span>[]),</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldStrict = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strict</span>;</span><br><span class="line">    <span class="keyword">let</span> hasStrictModeDirective = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> parsedNonDirective = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable language_">this</span>.<span class="title function_">match</span>(end)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stmt = <span class="variable language_">this</span>.<span class="title function_">parseStatement</span>(<span class="literal">null</span>, topLevel);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (directives &amp;&amp; !parsedNonDirective) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidDirective</span>(stmt)) &#123;</span><br><span class="line">          <span class="keyword">const</span> directive = <span class="variable language_">this</span>.<span class="title function_">stmtToDirective</span>(stmt);</span><br><span class="line">          directives.<span class="title function_">push</span>(directive);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            !hasStrictModeDirective &amp;&amp;</span><br><span class="line">            directive.<span class="property">value</span>.<span class="property">value</span>= <span class="string">&quot;use strict&quot;</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            hasStrictModeDirective = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parsedNonDirective = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// clear strict errors since the strict mode will not change within the block</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strictErrors</span>.<span class="title function_">clear</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      body.<span class="title function_">push</span>(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (afterBlockParse) &#123;</span><br><span class="line">      afterBlockParse.<span class="title function_">call</span>(<span class="variable language_">this</span>, hasStrictModeDirective);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldStrict) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This function does not look short, but the main logic is the while loop, as long as it meets <code>!this.match(end)</code> will always parse, this end is actually tt.eof, that is, we just TokenType in a kind of, said the end of the file.</p><p>loop body The main content is two <code>const stmt = this.parseStatement(null, topLevel);</code> and <code>body.push(stmt);</code>, this stmt is a Node of AST</p><h3 id="parseStatement"><a href="#parseStatement" class="headerlink" title="parseStatement"></a>parseStatement</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseStatement</span>(<span class="attr">context</span>: ?string, topLevel?: boolean): N.<span class="property">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">match</span>(tt.<span class="property">at</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">parseDecorators</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">parseStatementContent</span>(context, topLevel);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>The first line is to determine whether the current is @, if so, that is the decorator, this temporarily regardless of</p><p>Let’s look at this <code>parseStatementContent</code></p><h3 id="parseStatementContent"><a href="#parseStatementContent" class="headerlink" title="parseStatementContent"></a>parseStatementContent</h3><p>This function is very much like <code>getTokenFromCode</code> in the Tokenizer just now. <code>getTokenFromCode</code> generates various types of tokens based on code, while <code>parseStatementContent</code> generates AST Node based on different types of tokens.</p><p>Then, during the parsing process, there are some special cases where the nextToken of the Tokenizer will be called again to continue to generate a new token, such as parsing to import</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseStatementContent</span>(<span class="attr">context</span>: ?string, <span class="attr">topLevel</span>: ?boolean): N.<span class="property">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> starttype = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">type</span>;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    watch child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isLet</span>(context)) &#123;</span><br><span class="line">      starttype = tt.<span class="property">_var</span>;</span><br><span class="line">      kind = <span class="string">&quot;let</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Most types of statements are recognized by the keyword they</span></span><br><span class="line"><span class="string">    // start with. Many are trivial to parse, some require a bit of</span></span><br><span class="line"><span class="string">    // complexity.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    switch (starttype) &#123;</span></span><br><span class="line"><span class="string">      case tt._break:</span></span><br><span class="line"><span class="string">      case tt._continue:</span></span><br><span class="line"><span class="string">        // $FlowFixMe</span></span><br><span class="line"><span class="string">        return this.parseBreakContinueStatement(node, starttype.keyword);</span></span><br><span class="line"><span class="string">      case tt._debugger:</span></span><br><span class="line"><span class="string">        return this.parseDebuggerStatement(node);</span></span><br><span class="line"><span class="string">      case tt._do:</span></span><br><span class="line"><span class="string">        return this.parseDoStatement(node);</span></span><br><span class="line"><span class="string">      case tt._for:</span></span><br><span class="line"><span class="string">        return this.parseForStatement(node);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      // Omit the various tokenType judgments</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      default: &#123;</span></span><br><span class="line"><span class="string">        if (this.isAsyncFunction()) &#123;</span></span><br><span class="line"><span class="string">          if (context) &#123;</span></span><br><span class="line"><span class="string">            this.raise(</span></span><br><span class="line"><span class="string">              this.state.start,</span></span><br><span class="line"><span class="string">              Errors.AsyncFunctionInSingleStatementContext,</span></span><br><span class="line"><span class="string">            );</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          this.next(); // Here again, the nextToken method of the Tokenizer is called</span></span><br><span class="line"><span class="string">          return this.parseFunctionStatement(node, true, !context);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // If the statement does not start with a statement keyword or a</span></span><br><span class="line"><span class="string">    // brace, it&#x27;s an ExpressionStatement or LabeledStatement. We</span></span><br><span class="line"><span class="string">    // simply start parsing an expression, and afterwards, if the</span></span><br><span class="line"><span class="string">    // next token is a colon and the expression was a simple</span></span><br><span class="line"><span class="string">    // Identifier node, we switch to interpreting it as a label.</span></span><br><span class="line"><span class="string">    const maybeName = this.state.value;</span></span><br><span class="line"><span class="string">    const expr = this.parseExpression();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (</span></span><br><span class="line"><span class="string">      start type= tt.name &amp;&amp;</span></span><br><span class="line"><span class="string">      expr.type= &quot;</span><span class="title class_">Identifier</span><span class="string">&quot; &amp;&amp;</span></span><br><span class="line"><span class="string">      this.eat(tt.colon)</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      return this.parseLabeledStatement(node, maybeName, expr, context);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      return this.parseExpressionStatement(node, expr);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;In the previous article, when analyzing the Babel compilation process, we mentioned that Babel converts JS code into ASTs (Abstract Syntax Trees). This behavior is a generic one, no matter what programming language parses the source code into an AST, &lt;strong&gt;AST is not specific to Babel, let alone to JS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why do we need to do this? The original JS file is incomprehensible to the computer, and it is difficult for the computer to modify the JS code directly, but by converting it to an AST, which is essentially a set of objects that represent the structure of the program, we can indirectly modify the code by modifying the objects. AST to generate bytecode.&lt;/p&gt;
&lt;p&gt;Parser’s process is divided into two steps, the first step, lexical analysis, which is the finite state machine in the compilation principle, to split a piece of code into individual Tokens, and the second step, syntax analysis, to convert the Token array, into an AST tree.&lt;/p&gt;
&lt;p&gt;This time I’ll look at&lt;a href=&quot;https://github.com/babel/babel/tree/main/packages/babel-parser&quot;&gt;源码&lt;/a&gt;The process is briefly analyzed.&lt;/p&gt;</summary>
    
    
    
    <category term="Babel" scheme="https://sunra.top/en/categories/Babel/"/>
    
    
  </entry>
  
  <entry>
    <title>In-depth Babel Principles Series (I) Introduction to Babel Workflow and Project Structure</title>
    <link href="https://sunra.top/en/posts/17020/"/>
    <id>https://sunra.top/en/posts/17020/</id>
    <published>2021-06-21T23:53:03.000Z</published>
    <updated>2023-06-12T00:06:43.938Z</updated>
    
    <content type="html"><![CDATA[<p>I recently came across a bit of knowledge about Babel and got some interest in it, so I planned to take a look at the principle of Babel and then summarize it for learning, which is too complicated to write in multiple blogs.</p><span id="more"></span><h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1624407593/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210623081837_ikbdn8.png" alt=""></p><blockquote><p>It is important to mention here that this structure where Traverser calls multiple Transformers in the figure is the microkernel.</p><p>That means that the core code of Babel is actually only the left column, and Parser has built-in support for many syntaxes. For example, JSX, Typescript, Flow, and the latest ECMAScript specification. Currently, for the sake of efficiency, the parser is<a href="https://babeljs.io/docs/en/babel-parser#faq">不支持扩展的</a>。</p><p>Other additional features are implemented in the form of plugins, but Babel implements some built-in transformers to achieve some common functions, such as converting es2015+ code.</p></blockquote><h3 id="Parsing-Tokenizer-Parser"><a href="#Parsing-Tokenizer-Parser" class="headerlink" title="Parsing (Tokenizer + Parser)"></a>Parsing (Tokenizer + Parser)</h3><p>For the source code, at this point we see it as a string, and the first step in its analysis is definitely to convert the source code into an AST first, before the subsequent operation.</p><p>There is a<a href="https://astexplorer.net/">在线AST转换器</a>, we can experiment on this and write the code and it translates it for us into AST::</p><p>I’ll write nothing, and the AST will have a root node: the</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AST</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;end&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125; <span class="comment">// It can be seen as an object with some fields, the root node of this code tree.</span></span><br></pre></td></tr></table></figure><p>Then I write a sentence <code>const text = &#39;Hello World&#39;;</code> and it becomes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;end&quot;</span>: <span class="number">27</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclaration&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="number">27</span>,</span><br><span class="line">      <span class="string">&quot;declarations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclarator&quot;</span>,</span><br><span class="line">          <span class="string">&quot;start&quot;</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="string">&quot;end&quot;</span>: <span class="number">26</span>,</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;init&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Literal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">13</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">26</span>,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">            <span class="string">&quot;raw&quot;</span>: <span class="string">&quot;&#x27;Hello World&#x27;&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;const&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>From this structure we can take a brief look at the structure of the AST node.</p><p>each node has type, start and end. type indicates the type of the node, just like the type of the root node is Program, which is all code, so it has start as 0 and end as last;</p><p>And different types of nodes may have their own different definitions, such as the <code>VariableDeclaration</code> node has the kind attribute, which indicates whether the variable is declared by const or var or let, and the declarations attribute, which indicates the specific content, which is an array, that is to say, a <code>VariableDeclaration</code> can declare more than one node, and the init attribute of each node indicates what data the variable is initialized with.</p><p>To summarize the characteristics of the AST tree:</p><ol><li>Nodes are typed. When we learn a data structure like a tree, the nodes are the simplest, here it’s complicated, there are types.</li><li>The relationship between nodes and children is linked by the attributes of the nodes. We learn the tree structure, are left, right left child right child. But AST tree, different types of nodes, different properties, Program type node’s child node is its body property, VariableDeclaration type of child node, is its declarations, kind property. That is, the properties of the node are seen as the children of the node, and the children may also have types, and nearly form a tree.</li><li>The parent node is the combination of all the child nodes. We can see that the const text = ‘Hello World’ represented by VariableDeclaration is split into the following two child nodes, and the child nodes continue to be split again.</li></ol><p>I hope that the above analysis will give you the most intuitive understanding of AST, which is a tree with types of nodes.</p><p>Then the type system of nodes is necessary to understand, here is<a href="https://github.com/babel/babylon/blob/master/ast/spec.md">Babel的AST类型系统说明</a>. As you can see, you can say that the type system is abstracting the various members of the code, identifiers, literals, declarations, expressions. So having a tree structure of nodes of these types can be used to express our code.</p><h3 id="Crossbar"><a href="#Crossbar" class="headerlink" title="Crossbar"></a>Crossbar</h3><p>Step 2: Convert. Now that you’ve got the ast, it’s time to manipulate it. babel-traverse in Babel is used to do this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Installation</span></span><br><span class="line">npm install --save babel-traverse</span><br><span class="line"></span><br><span class="line"><span class="comment">// Experimental code</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babylon <span class="keyword">from</span> <span class="string">&quot;babylon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;babel-traverse&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`const text = &#x27;Hello World&#x27;;`</span>;</span><br><span class="line"><span class="keyword">const</span> ast = babylon.<span class="title function_">parse</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">  <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;path&#x27;</span>, path);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ast&#x27;</span>, ast);</span><br></pre></td></tr></table></figure><p>The babel-traverse library exposes the traverse method, the first parameter is ast, the second parameter is an object, we wrote an enter method, the parameter of the method is a path, how is it not a node? Let’s look at the output:</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/4/16c5b8506c9e8e8d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>In fact, this path contains the node attribute, but also contains many other attributes used for analysis, such as the scope attribute of the analysis scope.</p><h3 id="Generator-babel-generator"><a href="#Generator-babel-generator" class="headerlink" title="Generator babel-generator"></a>Generator babel-generator</h3><p>Step 3: Generate. The babel-generator in Babel is used to do this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-generator</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入babel-generator</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babylon <span class="keyword">from</span> <span class="string">&quot;babylon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;babel-traverse&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> t <span class="keyword">from</span> <span class="string">&quot;babel-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> generate <span class="keyword">from</span> <span class="string">&quot;babel-generator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`const text = &#x27;Hello World&#x27;;`</span>;</span><br><span class="line"><span class="keyword">const</span> ast = babylon.<span class="title function_">parse</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">  <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="title function_">isIdentifier</span>(path.<span class="property">node</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;text&quot;</span> &#125;)) &#123;</span><br><span class="line">      path.<span class="property">node</span>.<span class="property">name</span> = <span class="string">&#x27;alteredText&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> genCode = <span class="title function_">generate</span>(ast, &#123;&#125;, code);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;genCode&#x27;</span>, genCode);</span><br></pre></td></tr></table></figure><h2 id="Microkernels-and-Plugins"><a href="#Microkernels-and-Plugins" class="headerlink" title="Microkernels and Plugins"></a>Microkernels and Plugins</h2><p>We’ve talked about Babel’s workflow above, and we’ve found that Babel’s core functionality is small. It’s very small, in fact, in four steps: splitting the code into tokens, building the token sequence into an AST, performing some operations on the AST, and finally converting the processed AST into a new code.</p><p>This core functionality is not large, but again, in order to be able to support complex functionality, so in the third step of the processing of the AST provides a plug-in mechanism (this plug-in mechanism is through<a href="https://refactoringguru.cn/design-patterns/visitor">访问者模式</a>implemented), and this architectural approach is called a microkernel.</p><p>A detailed explanation can be found in this blog: <a href="https://bobi.ink/2019/10/01/babel/#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F">https://bobi.ink/2019/10/01/babel/#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F</a></p><p>Reference link:</p><p><a href="https://juejin.cn/post/6844903905961181191">https://juejin.cn/post/6844903905961181191</a></p><p><a href="https://www.babeljs.cn/docs/">https://www.babeljs.cn/docs/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I recently came across a bit of knowledge about Babel and got some interest in it, so I planned to take a look at the principle of Babel and then summarize it for learning, which is too complicated to write in multiple blogs.&lt;/p&gt;</summary>
    
    
    
    <category term="Babel" scheme="https://sunra.top/en/categories/Babel/"/>
    
    
  </entry>
  
  <entry>
    <title>How codesandbox runs the npm module in the browser</title>
    <link href="https://sunra.top/en/posts/19234/"/>
    <id>https://sunra.top/en/posts/19234/</id>
    <published>2021-05-14T00:01:33.000Z</published>
    <updated>2023-06-12T00:06:43.942Z</updated>
    
    <content type="html"><![CDATA[<p>At present, there are more and more web IDE products running on the browser side. According to their functional characteristics, the current web IDE can be divided into two types. One is to migrate the functions of the local IDE basically intact. To the IDE on the web side, such as the most popular front-end IDE VS Code, with the help of cloud + containerization capabilities, VS Code has almost exactly the same functions as the local IDE on the browser side; there is also a web IDE that is more Focus on the presentation of’page development and real-time code parsing, compiling, and previewing ‘, and the implementation of code packaging and construction It is not limited to the implementation at the server level (such as based on Docker containers, etc.). Some products implement the functions of’compile, package, build, and run ‘based on browser-side code, and all of this is only based on our original development system.’ Local IDE + Node local build, local service + browser access preview ‘has the ability. Representatives of such products are CodeSandbox, codepen, StackBlitz, JSFiddle, etc.</p><p>That is to say, the former just puts the code editing on the web segment. In fact, it uses the cloud to store the code, compile the project, package and run it, etc. In this way, what we finally get is no different from local development. The difference is that we don’t have to specially download an editor.</p><p>The latter is a part of the compile packaging function and the final run in the browser, and due to the limitations of the browser, the size of the application it can support is limited (PS: recently encountered a problem, see the error should be Code size exceeds 500K, leave a pit, leave it to be solved later, hehe)</p><span id="more"></span><p>Can be’similar to the ability to build based on local webpack packaging ‘migrated to the browser side seems to be a very incredible thing, the above has also been mentioned, there are often two ways to achieve, one is based on the server side of the webpack packaging build, after the build will build the code and then transferred to the browser side parsing execution, related practices such as:<a href="https://juejin.im/entry/5a372e6a6fb9a0450f220711">基于webpack打造前端在线编译器</a>Another implementation is to provide the code of the dependent package (pulled from the npm installation) at the server level and return it to the Client. The packaging build is completely implemented on the browser side, implementing the’webpack ‘on the browser side. For example, CodeSandbox is the implementation of this pattern. Today we will take a look at the introduction of this article by the author of CodeSandbox, how all this is achieved.</p><blockquote><p>Note here that the implementation of codesandbox has gone through multiple iterations, but only how the server level provides dependencies has changed. After loading dependencies from the server level, they are returned to the client for use.</p></blockquote><h2 id="Content-organization"><a href="#Content-organization" class="headerlink" title="Content organization"></a>Content organization</h2><p>Because many of the contents below are translated from the original text of the codesandbox author, some places are difficult to understand, I will sort out the whole process first</p><ul><li>In the first version, you need to download the dependencies to the local in advance, analyze the required dependencies dynamically at runtime, and then require the required dependencies to be downloaded by the stub local implementation, not only can not support all dependencies, but also the recursion analysis performance has a bottleneck</li><li>With the idea of webpack DllPlugin, first send the dependency to the background, according to the hash of the dependency, find whether there is a cache in the background, if not, analyze the dependency, download it through yarn, and then package it into a dll and send it back to the caller. One problem with this version is that if it is not clearly defined in the dependency relationship, it cannot be packaged, and the cache is based on the dependency relationship. If there is the same package in two different dependency trees, it will not be reused</li><li>In order to solve the first problem of the above version, the author implemented a webpack packer that can add its own entrance</li><li>In order to solve the second problem, the author combines serverless and splits the dependencies. The server caches independent dependencies one by one. The server just returns the downloaded dependencies to the front end. The real responsibility for packaging is the front end, so that the front end can achieve on-demand packaging, which cannot be achieved on the back end because there is no actual code on the back end, so there is no such “need”.</li><li>Then in order to achieve the offline version, the author made another layer of caching on the front end</li><li>At this point, the codesandbox we are currently using is implemented</li></ul><h2 id="First-version"><a href="#First-version" class="headerlink" title="First version"></a>First version</h2><p>This version of codesandbox just implements an algorithm by itself, using a loading method similar to require to load dependencies one by one to the local (I personally think this local should refer to the user’s personal browser). The author of codesandbox personally believes that the first version cannot be regarded as full support for npm.</p><p>That is to say, this version does not load dependencies from the npm repository in real time according to the dependencies in the code, but downloads the dependencies to the local in advance, and then stubs the require in the code, so the author says that this version does not support all npm dependencies.</p><p>And this version should be specifically require a time to analyze what a depends on, and then layer by layer recursion, this kind of recursion if the project depends on complex, performance also has a big bottleneck.</p><blockquote><p>This</p><p>Even</p></blockquote><h2 id="Webpack-version"><a href="#Webpack-version" class="headerlink" title="Webpack version"></a>Webpack version</h2><p>The first version authors thought that full support for npm was impossible until someone actually implemented it.</p><p>So the author is considering how to achieve the general, he began to design an algorithm, but this algorithm is more complex, and ultimately there is no actual use, I will not repeat, interested can see the reference link at the end of the article.</p><p>Then, the author refers to the implementation of the DLLPlugin plugin of webpack.</p><p>Simply put, what DllPlugin does is to package a project into a dll dependency, wrap the dependencies in the project in the dll, and then expose the interface to the outside world. This is the official doc address:<a href="https://webpack.docschina.org/plugins/dll-plugin/#root">DllPlugin文档</a></p><p>Webpack’s<a href="https://webpack.js.org/plugins/dll-plugin/">DLLPlugin</a>Dependencies can be packaged, and a manifest list is used to mark which dependencies are included in the typed js package. The list looks like this:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dll_bundle&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/fbjs/lib/emptyFunction.js&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/fbjs/lib/invariant.js&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/fbjs/lib/warning.js&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/react&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/fbjs/lib/emptyObject.js&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/object-assign/index.js&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/prop-types/checkPropTypes.js&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/prop-types/lib/ReactPropTypesSecret.js&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/react/cjs/react.development.js&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Each path maps a module id. If I wanted to introduce React, I’d just call dll_bundle (3) and I’d have React! This is perfect for requirements,</p><p>So the author started to act, based on the idea of Webpack DllPlugin, and came up with the following system:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621126841/origin-of-ray/1574822062018-7c62e623-e99b-43c1-80a4-a0eba2c3dfdb_ikivwp.png" alt=""></p><p>For each request that is packaged, I will create a new directory under’tmp/: hash ‘, then run’yarn add ${dependencyList}’, and then let’webpack ‘do the packaging process. At the same time, as a caching solution, I will save the new package to gcloud. This looks much simpler than the scheme diagram above, more because I use yarn to install dependencies and use’webpack’ for packaging as an alternative to the previous implementation.</p><blockquote><p>It may be a little difficult to understand here. Let me tell you my opinion. In the previous version, that is, the first version, codesandbox needs to download the dependencies to the local in advance, and then when it really runs to require, it will analyze the dependencies recursively., and then require to stub to the local downloaded dependencies</p><p>And this version, with the help of webpack</p></blockquote><p>However, this system still has a very big limitation, it does not support the introduction of files that are not in the webpack dependency diagram. This means something like the following example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;react-icons/lib/fa/fa-beer&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Will not work properly, because it is not needed from the beginning to the end of the dependency entry, and will not be packaged in it. (The packaging of webpack is based on the dependent modules in package.json and the dependencies of each dependent module. Files that are not included in this system will not be packaged)</p><h2 id="Webpack-with-entrance"><a href="#Webpack-with-entrance" class="headerlink" title="Webpack with entrance"></a>Webpack with entrance</h2><p>In order to solve the limitation just mentioned, that is, files that are not in the webpack dependency cannot be packaged into the final dll.</p><p>Manually added the entry configuration to ensure that’webpack ‘can also pack these files into it. After a lot of adjustments to this scheme, the system can now support any (? Translator’s Note: The author added a question mark here, indicating that he is not sure about supporting any) combination of packaging requirements. So you can also load react-icons, css files are also possible.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621468814/origin-of-ray/packager1_qabrps.png" alt=""></p><h2 id="Access-Serverless"><a href="#Access-Serverless" class="headerlink" title="Access Serverless"></a>Access Serverless</h2><h3 id="What-is-Serverless"><a href="#What-is-Serverless" class="headerlink" title="What is Serverless?"></a>What is Serverless?</h3><p>Based on serverless, you can define a function that will trigger execution when the server is requested: the function will be started first, then process the request, and kill and release itself after a period of time. This also means that you will have very high scalability: if your server has 1000 requests coming at the same time, you can start 1000 services immediately. This also means that you only need to pay for the actual running time.</p><h3 id="How-to-combine-serverless"><a href="#How-to-combine-serverless" class="headerlink" title="How to combine serverless"></a>How to combine serverless</h3><p>Serverless sounds perfect for our service: the service is not always running, and if there are multiple requests at the same time, we need high concurrency. So I started very eagerly using something called<a href="https://serverless.com/">Serverless</a>The framework.</p><p>Thanks to Serverless, our service migration was very smooth, and I had a working version within two days. I created three serverless functions:</p><p>A source data parser: This service is used to parse versions and peerDependencies, and request packaging functions;</p><ul><li><ol><li>A packer: This service is used for the installation and packaging of actual dependencies;</li></ol></li><li><ol><li>An uglifier (compression &amp; obfuscation): responsible for asynchronously uglifying packages generated by packaging.</li></ol></li></ul><p>A few days later I found a limitation: a lambda function can only have a maximum of 500M disk space, which means that some combined dependencies cannot be installed (Translator’s Note: The backend needs to pack all the dependencies when doing the build. The code is loaded into memory). This was really a devastating limitation, and I had to switch the service back to the original implementation.</p><p>A few months later, I released a new builder for CodeSandbox.<a href="https://hackernoon.com/how-i-created-a-parallel-offline-extensible-browser-based-bundler-886db508cc31">I released a new bundler for CodeSandbox</a>). This builder is very powerful and can easily allow us to support more frameworks like Preact or Vue. By supporting these frameworks, our service has received some very interesting requests. For example: If you want to use React in Preact, you need to rename’require (‘react’) ‘to:’ require (‘preact-compat’) ‘. For Vue, you might include’ @/components/App.vue ‘as your sandbox file. Our server-side packager doesn’t handle this kind of thing, but our browser-side bundler does.</p><p>That’s when I started thinking that we might be able to get the browser-side builder to do the actual packaging. If the server level just sends the relevant files to the browser (without doing the server-level packaging and building), and then we use the browser-side builder to actually package the dependencies, this should be faster because we are not handling the entire large package, only part of the package.</p><p>The server level packaged build based on webpack DLLPLugin will recursion traverse all dependencies from the dependency entry and then perform the packaged build, while the packaged build of the browser is only packaged on demand. So there are two reasons for it to be faster. First, the browser-side packaging construction does not require the server level to do the packaging construction. The server level is just a pure recursion acquisition of dependencies, and then sent to the browser side, which saves the server level. The time of packaging and building also saves server overhead; the second is that the packaging and building on the browser side is built on demand rather than in full.</p><p>This solution has a very big advantage: <strong> We can achieve separate installation and caching of dependencies </strong> (remember what the webpack version said, from that version, we cached not one dependency, but all the dependencies in the dependency combination), and then we implement the merge of dependencies on the end. This means that if you request a new dependency on top of all existing dependencies, you only need to collect files for the new dependency! This will solve the limitation of AWS Lambda500M memory limit well, because we will only install a dependent module at the server level. We can also drop’webpack ‘in the packer, because now the packer is solely responsible for finding the relevant files that are dependent and sending them to the browser side.</p><h2 id="Join-browser-cache"><a href="#Join-browser-cache" class="headerlink" title="Join browser cache"></a>Join browser cache</h2><p>The author said that he did not take the scheme of dynamically requesting files directly from the unpkg.com because he wanted to support the offline scheme, that is, even if you do not have a network, you can also implement the compile packaging build preview on the browser side, provided that you have already done the relevant files on the browser side. Based on the server level single dependency packaging implemented by the author, the scheme caches all the files of the entire dependency module in the local browser, while the dynamic request file from the unpkg.com is a single request for a single file in a dependency module, which is prone to A dependency file does not exist.</p><p>That is to say, every time you go to request a separate dependency, you will first check if there is a local cache before going to the background to get the dependency.</p><h2 id="Final-version"><a href="#Final-version" class="headerlink" title="Final version"></a>Final version</h2><p><strong> CodeSandbox packaging and running does not depend on the server, just if you need to rely on the client without caching, you need to go to the server to request </strong></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621128800/origin-of-ray/codesandbox-arch_b64xm7.png" alt=""></p><ul><li><strong> Editor </strong>: Editor. Mainly used to modify files, CodeSandbox integrates’VsCode ‘here, and notifies’Sandbox’ for translation after file changes.</li><li><strong> Sandbox </strong>: Code Runner. <strong> Sandbox runs in a separate iframe, responsible for code translation (Transpiler) and run (Evalation) </strong>. As shown in the top picture, the left side is Editor, the right side is Sandbox</li><li>Packager. Similar to yarn and npm, responsible for pulling and caching npm dependencies</li></ul><p>Author of CodeSandbox <a href="https://twitter.com/CompuIves">Ives van Hoorne</a> I have also tried to port Webpack to the browser to run, because almost all CLIs are now built using Webpack. If you can port Webpack to the browser, you can take advantage of Webpack’s powerful ecosystem and translation mechanism (loader/plugin), low cost compatible with various CLIs.</p><p>However, Webpack is too heavy 😱, and the compressed size is 3.5MB, which is barely acceptable; the bigger problem is to simulate the Node runtime environment on the browser side, which costs too much and outweighs the gains.</p><p>So CodeSandbox decided to build its own packager, which is lighter and optimized for the CodeSandbox platform. For example, CodeSandbox only cares about the code building of the Development Environment, and the goal is to run it. Compared with Webpack, the following features have been cut out:</p><ul><li>Production mode. CodeSandbox only considers the development mode, and does not need to consider some features of production, such as<ul><li>Code compression, optimization</li><li>Tree-shaking</li><li>Performance optimization</li><li>Code Splitting</li></ul></li><li>File output. No need to pack into chunks</li><li>Server communication. Sandbox translates and runs directly in situ, while Webpack needs to establish a long connection with the development server to receive instructions, such as HMR.</li><li>Static file processing (such as images). These images need to be uploaded to CodeSandbox’s server</li><li>Plugin mechanisms and more.</li></ul><p>So it can be considered that CodeSandbox is a simplified version of Webpack, and optimized for the browser environment, such as using workers for parallel translation.</p><h3 id="Project-build-process"><a href="#Project-build-process" class="headerlink" title="Project build process"></a>Project build process</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">packager -&gt; transpilation -&gt; evaluation</span><br></pre></td></tr></table></figure><p>Sandbox construction is divided into three stages:</p><p>Packager loading phase, download and handle all npm module dependencies</p><ul><li><strong> Transpilation </strong> Transpilation phase, translates all changed code, constructs modeling block dependencies</li><li><strong> Evaluation </strong> Execution phase, run module code with’eval ‘for preview</li></ul><h4 id="Packer"><a href="#Packer" class="headerlink" title="Packer"></a>Packer</h4><p>Since CodeSandbox already covers the code building part, we don’t need’devDependencies’, that is to say <strong> in CodeSandbox we only need to install all the dependencies needed for the actual code to run, which can reduce hundreds of dependency downloads. So don’t worry about the browser being overwhelmed for the time being </strong>.</p><p>Before Packer downloads dependencies, it actually goes through the Transpilation transfer phase to analyze dependencies on demand, and then takes the analysis product to Packer.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621469497/origin-of-ray/packager2_pk7goe.png" alt=""></p><h4 id="Transpilation"><a href="#Transpilation" class="headerlink" title="Transpilation"></a>Transpilation</h4><p> This stage starts from the application’s entry file, translates the source code, parses the AST, finds the subordinate dependency modules, and then recursion translation, and finally forms a’dependency graph ‘.</p><p>The entire transpiler of CodeSandbox runs in a separate iframe.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621469683/origin-of-ray/editor-vs-compiler_m9eo6p.png" alt="img"></p><p>The Editor is responsible for changing the source code. The source code changes will be passed to the Compiler through postmessage, which will carry’Module + template ‘.</p><ul><li><strong> Module </strong> contains all source code content and module path, which also contains package.json, Compiler will read npm dependencies according to package.json;</li><li><strong> template </strong> represents the Preset of the Compiler, such as’create-react-app ‘,’ vue-cli ‘, which defines some loader rules for translating different types of files, and the preset also determines the template and entry file of the application. From the above we know that these templates are currently predefined.</li></ul><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621469733/origin-of-ray/compiler_cgbsyb.png" alt=""></p><p>The overall situation can be basically divided into the following four stages:</p><ul><li><strong> Configuration phase </strong>: The configuration phase creates Preset objects, determines entry files, etc. CodeSandbox currently only supports limited application templates, such as vue-cli and create-react-app. The directory structure convention between different templates is different, such as entry files and html template files. In addition, the rules for file processing are different, for example, vue-cli needs to handle ‘.vue’ files.</li><li><strong> Dependency download phase </strong>: Packager phase, download all dependencies of the project and generate Manifest objects</li><li><strong> Change calculation stage </strong>: Calculate the added, updated, and removed modules according to the source code passed by the Editor.</li><li><strong> The translation stage </strong>: When the translation really starts, first re-translate the modules that need to be updated calculated in the previous stage. Then from the entry file as a starting point, translate and build a new dependency graph. Modules and their submodules that have not changed will not be translated repeatedly here</li></ul><h4 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h4><p>Although it is called a bundler, CodeSandbox does not package, which means it does not package all modules into chunks files like Webpack.</p><p>Transpilation starts from the entry file, then analyzes the module import rules of the file, and recursion translates the dependent modules. By the Evaluation stage, CodeSandbox has built a complete dependency graph. Now it’s time to run the application</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621470036/origin-of-ray/evaluation_gseiqz.png" alt=""></p><p>Reference link:</p><p><a href="https://www.yuque.com/wangxiangzhong/aob8up/uf99c5?language=en-us">https://www.yuque.com/wangxiangzhong/aob8up/uf99c5?language=en-us</a></p><p><a href="https://hackernoon.com/how-we-make-npm-packages-work-in-the-browser-announcing-the-new-packager-6ce16aa4cee6">codesandbox作者解读</a></p><p><a href="https://segmentfault.com/a/1190000019679430">https://segmentfault.com/a/1190000019679430</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;At present, there are more and more web IDE products running on the browser side. According to their functional characteristics, the current web IDE can be divided into two types. One is to migrate the functions of the local IDE basically intact. To the IDE on the web side, such as the most popular front-end IDE VS Code, with the help of cloud + containerization capabilities, VS Code has almost exactly the same functions as the local IDE on the browser side; there is also a web IDE that is more Focus on the presentation of’page development and real-time code parsing, compiling, and previewing ‘, and the implementation of code packaging and construction It is not limited to the implementation at the server level (such as based on Docker containers, etc.). Some products implement the functions of’compile, package, build, and run ‘based on browser-side code, and all of this is only based on our original development system.’ Local IDE + Node local build, local service + browser access preview ‘has the ability. Representatives of such products are CodeSandbox, codepen, StackBlitz, JSFiddle, etc.&lt;/p&gt;
&lt;p&gt;That is to say, the former just puts the code editing on the web segment. In fact, it uses the cloud to store the code, compile the project, package and run it, etc. In this way, what we finally get is no different from local development. The difference is that we don’t have to specially download an editor.&lt;/p&gt;
&lt;p&gt;The latter is a part of the compile packaging function and the final run in the browser, and due to the limitations of the browser, the size of the application it can support is limited (PS: recently encountered a problem, see the error should be Code size exceeds 500K, leave a pit, leave it to be solved later, hehe)&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
</feed>
