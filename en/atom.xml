<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>Lift the fog of the Internet together</subtitle>
  <link href="https://sunra.top/en/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/en/"/>
  <updated>2023-06-07T12:40:51.466Z</updated>
  <id>https://sunra.top/en/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10 times programmer work method</title>
    <link href="https://sunra.top/en/posts/37760/"/>
    <id>https://sunra.top/en/posts/37760/</id>
    <published>2023-02-11T10:01:01.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>The recent chatgpt fire has made many people think that many jobs, including programmers, will be replaced. Other positions I do not know much about, but for the programmer career, I think but in fact this shows that the perception of programmers in dealing with the problem is that programmers deal with a particular independent problem on, or a separate very specific problem on, of course, this and programmer interview questions, after all, programmer interview questions is actually this, interview questions, to say the least, is to do the paper, do the paper how you may have the back of the Internet robot than, and those badly measured seem to be empty words, in an interview, people really do not necessarily perform than the back is all the interview experience post robot superior.</p><p>But in fact this is already forgetting what programmers exist for. The technology that programmers master is called information technology, and its purpose is to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI actually brings to us.</p><span id="more"></span><h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>In fact, it is now considered the fourth industrial revolution.</p><ol><li>The first was the age of steam, when mankind mastered great physical power, and machinery gave mankind the power to transform the physical world more powerfully</li><li>The second is the electrical age, which is a continuation of the first, allowing people to transform the world more quickly, while accelerating the efficiency of people’s material cooperation</li><li>The third is the information age, which is the age that most of us experience. Many people may not understand why information is important, after all, this thing is vague, and the Internet looks like an explosion of information, simply worthless. But in fact, for society, information is the most valuable thing, because, <strong> money is actually information, and even the entire human society exists on the basis of information, as stated in “A Brief History of Humanity”, without a common imagination, the largest human can only be maintained into a small tribe, just like the animals, it is a common imagination, so that humans have a cooperative </strong>. And the role of the market is to exchange information, no one person can handle all the information in human society, even if he has access to all information. Then there are luxury goods, such as jade, diamonds, gold, what makes you say that the price between them is different, is information, his physical nature is not expensive, so there is no need to ask why luxury goods are expensive, there is no reason.</li><li>the fourth is artificial intelligence, which is considered a continuation of the third. Why there is this thing is because of the explosion of information, too much, <strong> individuals can not handle it, the speed of processing information is too low, and many people cooperate will bring new information to deal with, these are the management to do up</strong>. There are many positions that acted as artificial intelligence in the past, such as low-end consulting positions, they actually help integrate information, because there is too much information, such as buying a house, unless you recently want to buy a house, you can not collect every day, to deal with, so it gave birth to people who specialize in processing this information it.</li></ol><p>So if the third industrial revolution is allowing people to collect and process information faster, then the fourth, chatgpt including artificial intelligence in my personal opinion, is giving everyone stronger tools to filter and process information.</p><p>This may not seem like an essential change, still improving the speed of processing information, but don’t forget that any complex problem is caused by simple problems coupled together <strong>quantitative change produces qualitative change. When there are enough problems and enough people involved, it’s not really a problem anymore</strong>.</p><p><strong> complexity is the biggest problem, capital all efforts to improve efficiency, efforts to understand the laws of the world, management science, etc., are designed to reduce complexity, of course, the overall efficiency improvement does not mean individual happiness, because the overall want to be efficient, in which each individual can not have a personality </strong>. Conversely, if a tool can improve the efficiency of enough, is the industrial revolution, the industrial revolution is actually a tool to bring great efficiency improvements.</p><p>All this to say, is to express a point of view, programmers deal with things is actually to reduce the complexity of information, the analysis and processing of information to the machine, the first thing to do the programmer itself to understand this information, and then transformed into a program, so the value of the programmer’s work does not lie mainly in programming, if not to help deal with information, reduce the complexity of the complexity to the machine, the more brilliant technology is useless. After all, it is never the capital that determines the direction of technological development.</p><p>So the focus of improving programmer productivity shouldn’t just be on how to knock out code faster, except of course for the very few people who make tools for programmers.</p><h1 id="10x-programmer-work-method"><a href="#10x-programmer-work-method" class="headerlink" title="10x programmer work method"></a>10x programmer work method</h1><p>The following content comes from the column of the same name in the geek time, here is just a summary of my personal notes, we recommend you to see the column</p><h2 id="Thinking-Framework"><a href="#Thinking-Framework" class="headerlink" title="Thinking Framework"></a>Thinking Framework</h2><p><strong>Essential and Contingent Complexity</strong><br>There is a famous book in the software industry called “The Myth of the Human Moon”, which mentions two very important concepts: Essential Complexity and Accidental Complexity.<br>Simply put, essential complexity is what must be done to solve a problem no matter how it is done, while accidental complexity is what has to be done more because of the improper choice of the way to do things.<br>For example, if you want to make a website, the content of the website is something you have to write anyway, and this is the “essential complexity”. If you are still writing a website in assembly today, it is impossible to be more efficient because you have chosen the wrong tool. This kind of problem caused by choosing the wrong method or tool is the “accidental complexity”.<br><strong>Four principles of best practice</strong></p><ul><li>Begin with the end in mind;</li><li>Task breakdown;</li><li>Communication feedback;</li><li>Automation.</li></ul><p><strong>Thinking Framework:</strong></p><ul><li>Where are we?</li><li>Where are we going?</li><li>How can we get there?</li></ul><p><strong>Linkage between the Four Principles and the Thinking Framework</strong><br>In practice, this thinking framework will help me better understand my work. For example, when a product manager gives me an explanation of a feature to be developed, I usually ask him questions such as</p><ul><li>Why this feature and what value it will bring to users?</li><li>What kind of users will use this feature, in what scenarios will they use it, and how will they use it?</li><li>Are there other means to achieve this? Is it necessary to develop a system?</li><li>After this feature goes live, how do you measure its effectiveness?</li></ul><p>If the product manager can answer these questions well, it means that he has basically thought this job through more clearly, and at this time, I will feel comfortable to understand the details of the follow-up.<br><strong>Begin with the end in mind</strong> means setting your goals at the beginning of your work. <strong>We need to see the real goal, not the work that others have explained to us as the goal</strong>. You can see that this principle is helping us to answer the question in the Thinking Framework, Where are we going? This question.<br><strong>Task decomposition</strong> is to break down the big goal into feasible tasks. The more detailed the work is broken down, the better we can control the work. It is a way to help us answer the question of how can we get there?<br>If the first two principles are to be done before the hands-on analysis, then the last two principles are on the road to the goal, to escort us, because in practice, we can not help but deal with people and machines.<br><strong>Communication Feedback</strong> is about unblocking the channels of interaction with others. On the one hand, we ensure that information can be communicated to reduce work omissions caused by misunderstanding; on the other hand, we must also ensure that we can accurately receive external information so that we do not feel good about ourselves and hinder progress.<br><strong>Automation</strong> is the automation of tedious work to be performed by machines, which is part of our job as programmers. We are good at building automation for others, but we don’t apply it enough for our own work, and this is the part of our job that deserves optimization.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112035/origin-of-ray/1667091571184-7dee658b-ff37-4377-b884-6d18b4d80736.png_averageHue_23d1c4bc_clientId_ua2b346c7-a2c6-4_from_paste_height_457_id_u7555d25b_name_image_jub744.png" alt="image.png"></p><h2 id="Begin-with-the-end-in-mind"><a href="#Begin-with-the-end-in-mind" class="headerlink" title="Begin with the end in mind"></a>Begin with the end in mind</h2><p><strong>Begin with the end in mind: how to make the effort not in vain</strong><br>We face real work scenarios on a daily basis: many of us just hear about a feature that someone has asked to do and start brainstorming everything that comes next. The result is that the effort put in is meaningless.<br>“Beginning with the end in mind” is a counter-intuitive way of thinking that most people do not possess. Therefore, in our daily life, we see many interesting phenomena. For example, when you graduate from college, there are many people who want to go to graduate school. If you ask them why they want to go to graduate school, the reason they get is usually to find a good job. But can studying really help him find a good job? Not necessarily, because finding a job and going to graduate school are not even the same skill tree. If you really want to find a good job, then you should understand what the job requires and how you can acquire the skills required for the job.<br>The example of “designing a login function”, compared with the thinking of “beginning with the end”, you may be unfair for my colleagues, they may also have the thinking of “beginning with the end”, only that Their “end” and I, the customer’s “end” is not the same. This brings us to <strong> do software, is essentially building a “collective imagination”. </strong><br><strong>Imagined Community</strong><br>We do software is actually a community of imagination, the “collective imagination” is the software we want to do, any imagination needs a carrier to show it, we write software is the process of the “collective imagination” to implement the process.<br>Since it is a “collective imagination”, it is difficult to unify our imaginations before the carrier presents them, and they all differ to a greater or lesser extent.<br>So, <strong>everything is created twice: once in the mind, which is the intellectual or first creation (Mental/First Creation), and then only when it is put into practice, which is the actual construction or second creation (Physical/Second Creation)</strong>.<br>Going back to the “designing a login” example, my colleagues were building their own imagination, not ours.<br>One of the biggest differences is that no one will pay for their own imagination. So, <strong> they see the “end” is not the real end, but only an ego “end”, as to see what kind of “end”, it depends on each person’s insight </strong>.<br>For those who do software, we should position the “end” to do a valuable software for users, to bring value to others, their value can be reflected.<br><strong>Planning and Discovery</strong><br>With the “end in mind” mindset, we think about how others will use our platform. We designed it in such a way that users would go to our website, read the documentation, and then follow the documentation step by step. One of the key points is that the documentation, especially the “Getting Started” documentation, is the first step for the user to get in touch with our platform and determines his first impression of our product.<br>So, we decided to start by writing the “Getting Started” document, which depicts how users can use our development platform step by step to complete their first “Hello World” level application. Note that at this point, we hadn’t written a single line of code.<br>Human beings are a group of people who are good at brainstorming. Once someone sees the document, he can already conceive the platform as it already exists, and then give all kinds of feedback: “I think this place can be done like this” “I think that place can be changed “.<br><strong>All of this feedback is real because they have “seen” a real thing. It was this real feedback that allowed us to gradually lock in our target. </strong>After that, we started to write the code.<br>An “end-to-end” approach not only helps us plan our work, but also helps us identify problems in our work.<br>Amazon CTO describes how Amazon develops a product, in short, they use a backwards working approach, the sequence of developing a product is</p><ol><li>writing press releases;</li><li>write FAQ (Frequently Asked Questions);</li><li>writing user documentation;</li><li>write code.</li></ol><p><strong>Chasm of Understanding</strong><br>The topic of our discussion is “Begin with the end in mind”. Our first question is, what exactly is “the end”? In the previous example, the “end” is “finished”, but Li thinks his work is done, but Zhang thinks he is not done.<br>There are many ways to bridge the gap, but there is a best practice called <strong>DoD (Definition of Done)</strong>, and it is easy to see from the name of this concept that it was created to solve the common problem of “completion” in software development.<br>How to make DoD work better.</p><ul><li><strong>DoD is a checklist of check items that are used to check how well our work is done</strong>. A DoD check item is a set of valuable activities that we need to develop a product. For example: writing code, writing test code, passing acceptance by testers, etc. What kind of activities are valuable may be perceived differently by each team. But if your team perceives nothing but functional code as valuable, perhaps this is a sign that your team as a whole is lacking in professionalism and the prospects of working in such a team are not good.</li><li><strong>DoD’s check items should be actually checkable</strong>. You say the code is written, where is the code; you say the test coverage is up to par, how do you see it; you say you have the functionality done, demonstrate it.</li><li><strong>DoD is a mechanism for team members to report back to each other</strong>. Don’t think of “reporting” as complicated. The simplest way to report is to say “this feature is done”. When we have a DoD, there are only two states of doing things, “done” and “not done”. In teamwork, we often hear people say “this thing is 80% done”, sorry, that is called not done, there is no 80% done.</li></ul><p>If you can think outside the box, you will find that DoD thinking is very versatile in your work. For example, when we need to work with other teams to develop an interface, we all know that the first step is to get the interface defined.<br><strong>Once the DoD is established in collaboration, we can even solidify it through a process to get the job done more efficiently and with high quality. </strong>Of course, we inevitably have ad hoc tasks in our work lives that are not complex enough to require a process, but can be solved efficiently with a DoD mindset. For example, I often have people come over and ask me to help with something. Using DoD thinking, I first ask the person exactly what I need to do, confirm the details (equivalent to defining the “checklist”), and then I know how far I can go with the favor. When I ask someone for a favor, I tell them exactly what I need them to do to minimize unnecessary misunderstandings.<br>DoD is a mindset, a way to eliminate as much uncertainty as possible and reach consensus. We do things in a way that “the end is the beginning” and DoD allows us to clearly define the “end” at the beginning.<br>The root cause of all the problems that often arise in human collaboration is that there are too many misunderstandings caused by differences in understanding that waste a lot of time, and DoD is a way to put ideas that are prone to ambiguity into practice.<br><strong>Define the criteria for completion before you do anything. </strong><br><strong>What is the first thing to do when you receive a requirement assignment? </strong><br>In software development, what programmers do is generally defined by requirements. We all know that requirements are an important part of software development, but you may not have thought carefully about the different ways of describing requirements that may affect our programmers’ understanding of them.<br><strong>Because the transmission of information decays, you cannot transmit 100% of what you understand to another person</strong>, and in between, how it is transmitted, i.e. how it is described, will directly determine the percentage of decay.<br>Many companies have a software development model based on a feature list that “defines” what programmers will do, and each group gets the list from the product manager and starts writing the code “as is”. However, often this feature list is just a simple description and you don’t see the big picture.<br>One of the states of many teams is that the programmers know what the feature to be developed is, but many of them can’t answer who is using this feature in what scenario. If you ask him why he is developing this feature, he usually says: it is specified in the feature list.<br><strong> This feature list style of requirements description knocks a complete requirement into pieces. </strong> Only when all the features are developed and dovetailed together is it time to “break the mirror”.<br>Based on this feature list-based requirement description, each group schedules its work with the features as it understands them. So, when your group finishes a feature, that feature may not make it to the line because you have to depend on the work of another group that, not coincidentally, happens to have the related feature development scheduled. This is just the case where there are dependencies between two groups, so imagine how bad the situation would be if multiple groups need to collaborate.<br>As a result, new ways of describing requirements have emerged, of which User Story is one of my favorites. It describes a user’s desired functionality from the user’s point of view, focusing on the path the user needs to take to complete an action in the system. Since it is a “story”, it needs to be a complete scenario that can be told.<br><strong>It’s good if your team uses a user story format for requirements description, but if not, supplementing the feature list with acceptance criteria will greatly improve the efficiency of collaboration between the two parties. </strong><br>The implementation details given in the acceptance criteria should be business, and it is really a waste of time for programmers to think about such issues, and our space to play should be in the technical implementation.<br>Although you are nominally a programmer, when you get a requirement, the thing you have to do is not to write code immediately, but to play the role of a product manager, analyze the requirement and circle the scope of the task. Trust me, analyzing beforehand is definitely much better than taking a written system to your boss and him telling you it’s not what he wants.<br>If there is only one thing you can remember from today, remember this:<strong> Set acceptance criteria before you do any requirements or tasks</strong>.<br><strong>Lean Startup</strong><br>What Lean Startup provides us is a framework for thinking about making products, and most of the products we can come across can be put into this framework.<br>With the framework structure, our life is simple. When a product manager wants to make a new product or a new feature of a product, we can use these concepts of Lean Startup to check whether the product manager has thought it through.<br>For example, <strong> you want to do this product feature, what is the thing that you want to validate? Is there data available to measure the goal he is trying to validate? Is this problem to be solved the most important thing at the moment, and are there other more important problems? </strong><br>If the above questions are answered in the affirmative, is there a simpler solution to validate this goal, and does it have to be achieved by developing a product feature?<br><strong>Expanding the work context</strong><br>Programmers always like to use technology to solve all problems, but many of the problems that make people sleepy are not problems at all. The reason why they can’t find a simpler solution is that many times programmers are limited by their own thinking.<br><strong>The real difference between working in different roles is the difference in context. Problems that are difficult to solve in one local context can even be left unsolved by switching to another context. So no matter how hard a single point is worked on it is only a local optimization, and it is difficult to achieve optimal results. </strong><br>If you want to do your job well, you need to constantly expand the context of your work, learn more about what the logic of other people’s work looks like, and recognize the full lifecycle of software development.<br>Expanding your context can be good for your career, in addition to helping you to be more productive at the moment. As you see a wider world, you get more and more opportunities.<br>If there’s only one thing you remember from today, remember this: <strong>Expand the context of your work and don’t limit yourself to the role of a “programmer”. Don’t limit yourself to the role of a “programmer.” </strong><br><strong>Path to Results</strong><br>With regard to “beginning with the end”, what we have been talking about is seeing results, and results are important. However, it is the path to the result that is more important.<br>In contrast to our work, in most cases, even if the goal is clear, the path is blurred. So, different people have different ways of dealing with it. Some people go where they go and then look at it; others project the path first and see how far they can go. In our process of making software, the differences brought by these two paths have been reflected in the previous short story. One is the first period of its happiness, the later hand to hand; one is the front of thinking ahead, the back of the four stable. I personally respect the latter approach.<br>This idea is not difficult to understand, and we can easily apply it to many aspects of our work. For example:</p><ul><li>before making a product, to deduce how this product will be promoted and to what kind of people by what means;</li><li>Before making technical improvements, consider how going live is a process and prepare a plan for possible problems;</li><li>Before designing a product feature, let’s consider who provides the data and what the complete process looks like.</li></ul><p><strong>Make the results of your work digitally available</strong><br><strong>Iteration 0</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112080/origin-of-ray/1667388901396-30a76c14-7687-4f11-b4ff-3a85fb08be48.png_averageHue_23fefefe_clientId_u6d7a8eac-a85f-4_from_paste_height_772_id_u1823cf52_name_image_fsji0l.png" alt="image.png"><br>Compare this list to the fact that most new projects are under-prepared on one or more items. Even if you are not doing a project from scratch, comparing this list will reveal that the project is lacking in some items and you can make some targeted additions. If there’s only one thing you remember from today, remember this: design your Iteration 0 list and give your project a medical checkup.</p><h2 id="Task-Breakdown"><a href="#Task-Breakdown" class="headerlink" title="Task Breakdown"></a>Task Breakdown</h2><p>Well, sharing these two examples with you is just to warm up and show that human problem solving solutions are pretty much the same. When a complex problem is presented to us, one of the main ideas we have to solve it is to divide and conquer.<br>A big question is one that we all struggle to give answers to, but answering small questions is something we excel at. So, when we learn to break down a problem, it is a big step toward its solution.<br><strong> So, what is the difficulty in solving problems with this mindset? Give an executable decomposition. </strong><br>However, in practice, most people overestimate their executable granularity and underestimate the degree of task decomposition. In other words, if you haven’t done the practice of task decomposition, most of the tasks you decompose will be on the large side of granularity.<br>Only if you can break down the task very small, you can have a clearer understanding of your ability to perform, the real masters are very strong decomposition ability. This difference is equivalent to, the same observation of an item, you use the eyes, while the master is using a microscope. In your opinion, the masters are all micro-operations.<br><strong>The software industry today is all about embracing change, and task decomposition is a prerequisite for us to embrace change. </strong><br><strong>In fact, the main reason why many people can’t write tests well is that they don’t understand task decomposition. </strong><br>Small things have a short feedback cycle, while big things have a long feedback cycle. Small things are easy to do well, while big things are much more difficult. So, with this criterion, it is easier to write good tests at the bottom level. In addition, because there are too many modules involved, any module that is adjusted may break the high-level test, so the high-level test is usually relatively fragile.<br><strong>Test Driven Development TDD</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112098/origin-of-ray/1668079382524-b25c0e83-faac-4d58-89d5-ea262f5837fc.png_averageHue_23fdfbfa_clientId_u4873b967-c53e-4_from_paste_height_652_id_u38c9e075_name_image_kctirp.png" alt="image.png"><br>In test-driven development, refactoring and testing go hand in hand: without testing, you can only refactor in fear; without refactoring, the code is progressively more confusing and the tests become worse and worse to write. Because refactoring and testing work together, it drives you to write better and better code. This is the crudest understanding of the word “drive”.<br><strong>Test Driven Design</strong><br>There are two main reasons why many people resist testing:<br>First, testing requires an “extra” amount of work. I put extra in quotes here because, while you might instinctively think that testing is extra work, it should actually be part of the programmer’s job, as I mentioned in the previous article.<br>Second, many people will feel that there is too much code to test. The reason why these people think that the code is not good to test, which implies an assumption: the code has been written, and then, then write tests to test it.<br>If we reverse the thinking, I have a test, how do I write code that will pass it. <strong>Once you think about the test first, the design thinking changes completely: how do I write my code so that it is testable, that is, we have to write code that has testability. </strong>With this perspective, doesn’t testing become easier?<br>Let’s take one of the most common problems in writing code: static methods<br>The Mock object approach doesn’t work with static anymore. Because it is outside the object system, <strong>static methods cannot be inherited, i.e., they cannot be handled in a series of object-oriented ways</strong>.<br>You don’t have a way to use the Mock object, and you can’t set the corresponding method return value. To get the method to return the corresponding value, you have to open the static method, understand its implementation details, carefully follow the path inside, and carefully set the corresponding parameters before you can get it to give you the expected result. Worse yet, because the method is maintained by someone else, one day he modifies the implementation on a whim and your carefully set parameters fall apart. And to do the setup again you have to reread the code all over again.<br><strong>In this way, your work reverts to its original state. What’s more, it’s not what you should be focusing on, and it doesn’t add to your KPIs.</strong><br>Obviously, you’ve gotten off track. By this point in the discussion you already know that static methods are not test friendly. So, if you want to make your code more testable, <strong>a good solution is to try not to write static methods</strong>.<br>static is a convenient but evil thing. So, limit its use. Unless your static method does not involve any state and has simple behavior, for example, determining whether a string is null. Otherwise, don’t write a static method. As you can see, such static methods are better suited for library functions. So, when we write applications on a daily basis, we try not to use them if we can.<br>What if you encounter a third-party static method in your own code? It’s simple, just wrap the third-party code so that your business code is facing your own wrapper.<br><strong>How to do a good task breakdown</strong><br>Finally, I want to emphasize one thing in particular, all the tasks that are broken out, are independent. That is to say, <strong>for every task done, the code is committable</strong>. Only in this way can we achieve a real sense of small step commits.<br>If there is only one thing you can remember from today, remember this:<strong> Arrange the decomposed tasks in the order of complete implementation of a requirement. </strong><br><strong>Why are your tests not good enough? </strong><br>I have seen many teams that have had a variety of problems with testing, such as</p><ul><li>Inconsistent testing, passing this time but not the next;</li><li>sometimes it is a test to test something very simple, test around a lot of dependencies, build the environment will take a long time;</li><li>For this test to run, it must wait until the other test has finished running; ……</li></ul><p>If you have encountered similar problems in your work, then what you understand by writing tests and what I understand by writing tests may not be the same thing, so where does the problem lie? Why are your tests not good enough? Mainly because these tests are not simple enough.<br><strong> Testing can only be done well if complex tests are broken down into simple tests. </strong><br>Why should testing be simple? There is an interesting logic, I don’t know if you have thought about it, what is the role of testing? Obviously, it is used to ensure the correctness of the code. An ensuing question is, who guarantees the correctness of the tests?<br>Since it is impossible to write a program in a way that guarantees the correctness of a test, we have only one solution: <strong> Write the test simple, so simple that it is easy to understand at a glance and does not need to prove its correctness. </strong>So if you see any test written in a complicated way, it must not be a good test.<br><strong>Test for bad taste</strong><br><strong> Many people always want to do many things in one test, for example, there are several different method calls. May I ask, who exactly is your code testing? </strong> Once this test goes wrong, you need to look at all the several methods involved, which definitely adds complexity to the work.<br>Another area of high incidence of typical “bad taste” is in assertions, and remember, <strong>tests must have assertions</strong>.<br>There is another common “bad taste”: complexity. The most typical scenario is that <strong>when you see all kinds of judgments and loops in the test code, there is basically something wrong with the test</strong>. For example, testing a function, your assertion is written in a bunch of if statements, and the name is that it executes according to the condition. How do you guarantee that the test function is written correctly? Unless you use debugging means, you can not even tell whether your conditional branch is executed to. You may wonder, I have a whole bunch of different data to test, without loops or judgments, what do I do? What you should really be doing is writing several more tests, each covering one scenario.<br><strong>A journey (A-TRIP)</strong><br>How about a test that is considered a good test?<br>Someone made a summary A-TRIP, which is an acronym for five words, are</p><ul><li><strong>Automatic, automated; </strong>leave the tests to be executed by machines as much as possible, the less human involvement the better.</li><li><strong>Thorough, comprehensively; </strong> you should cover as many scenarios as possible with tests. There are two perspectives to understand this. One is to consider various scenarios before writing the code: normal, abnormal, various boundary conditions; the other perspective is that after writing the code, we have to see if the tests covered all the code and all the branches, and this is the scenario where various test coverage tools come into play.</li><li><strong>Repeatable; </strong>There are two perspectives in this: a particular test should be run repeatedly and the result should be the same, which says that each test itself should not depend on any environment that is not under control; there is another perspective that a bunch of tests should be run repeatedly and the result should be the same. This shows that there is no dependency between tests and tests, which is another feature of tests that we will talk about next.</li><li><strong>Independent; </strong>There should not be any dependency between tests and tests. For example, if a test depends on an external database or a third-party service, and Test A writes some values in the database when it runs, and Test B has to use those values in the database, Test B must run after Test A. This is called having a dependency.</li><li><strong>Professional, professional. </strong></li></ul><p><strong>How to cut the demand? </strong><br>If I ask you what this requirement is, for example, most people’s first instinct is still username password login.<br>Basically, the requirement description that pops into your head is the topic (epic), which in agile development some call the master story.<br>If the granularity of your management of requirements is the subject, then so many things can not be talked about. For example, when time is short and I want to cut requirements, you ask the product manager if it’s okay if I don’t do logins, and you wait for the rejection.<br>However, if you say time is tight, can I put the login captcha to the back, or the email address verification function to the back, this kind of suggestion product manager is able to talk to you.<br>The difference lies in the fact that the latter breaks down the requirements.<br><strong>Needs to be broken down</strong><br><strong>“Themes” only help you remember the general direction, but the real use of requirements management relies on further decomposition of requirements</strong>. For this discussion, we’ll continue with the requirements description we’ve already described in the previous column: the user story, which will be the basic unit of our requirements management discussion here.<br><strong>Evaluating user stories has an “ INVEST Principle “</strong>, which is an acronym for six words, namely:</p><ul><li>Independent, standalone. A user story should accomplish a separate function and not depend on other user stories as much as possible, because user stories that depend on each other make it more difficult to manage priorities and estimate workloads. If dependencies do exist, a good practice is to break out the dependent parts and realign them.</li><li>Negotiable. It is a prerequisite for working together. We can’t guarantee that all the details will be 100% implemented in the user story, so the best way to do this is to negotiate. It is also a prerequisite for meeting other judging criteria, as mentioned earlier, a user story is not independent and needs to be broken down, which also needs to be discussed together.</li><li>Valuable, valuable. A user story should have its own value, this item should be the easiest to understand, no value of things not done. But as we have been saying, before doing any of these things, ask where the value lies.</li><li>Estimatable. We will use the results of user story estimation to arrange the subsequent work plan. User stories that cannot be estimated are either because there are many uncertainties or because the requirements are still too large, such stories are not yet in a state where they can be developed and need further analysis by the product manager.</li><li>Small, small. Big steps, no. User stories that can’t be completed in a certain amount of time should only have one result, split. A small user story is easy to schedule, so you can organize your work. testable. Who knows if you’re doing it right if you can’t test it. This is what we have emphasized earlier, that is, the acceptance criteria, you have to know how to be considered work done.</li></ul><p>The first concern is negotiability. As implementers, we have to ask questions. Programmers who are just passive recipients are worth half as much, and as soon as you start asking questions, you’ll find a lot of things that the people who wrote the requirements didn’t think through.<br>Countless times in my career I’ve blocked requirements back, not because I wasn’t cooperative, but because I didn’t want to do something muddled. The reason I can ask questions is partly out of common sense, and partly whether the user stories described here are valuable. User stories, the reason they are stories, are to be told and communicated.<br>There is a more important concern, and one that is at the heart of this module: smallness. Whether it’s independent or estimable, the premise is small. Only when the user story is small enough, our subsequent room for maneuvering will be large. The next important question is, how to be considered small? This brings us to another important aspect of user stories: estimation.<br>Usually, it is the two sides that have a deviation in understanding the requirements, and then the colleague responsible for writing the user story has to step up and help clarify the requirements. So, in general, the estimation process is also a process for everyone to deepen their understanding of the requirements. Estimation has another important role: to discover particularly large user stories. In general, a user story should be completed within one iteration.<br>The real dilemma for many teams is the lack of requirements decomposition in the development process. In this case, the basic unit of requirements management is a theme, and since it is the basic unit, it is an indivisible whole. The team is then tied alive to a huge requirement with no room for maneuvering. If the team can decompose the requirements, the basic unit of requirements will be reduced, and everyone will no longer see the “ironclad” piece, so they can adjust more easily and have more room to move.<br><strong>Demand Management</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112146/origin-of-ray/1669688919178-f48fc53b-2a0f-432e-997b-35ebe0be2265.png_averageHue_23fefefc_clientId_u496d162f-a4d1-4_from_paste_height_653_id_ue8a35552_name_image_qktkqz.png" alt="image.png"><br>Use a few examples from the life of a programmer to help you understand. Let the system can not run properly online failure, it belongs to important and urgent things, do not rush to solve, it will affect the normal operation of the company. The team to upgrade the system transformation is important not urgent: transformation is good, performance is also good, maintainability is also improved; not transformation, a moment can also be used. Some temporary tasks are urgent and unimportant, while the brush of friends is neither urgent nor important.<br>According to the concept of time management, important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible. <strong>The biggest change this matrix brings to our thinking is the realization that things and things are not equivalent. If one does not focus on the important things, in the end they may all become urgent things</strong>.<br>Bringing this idea back to our reality of requirements management, you will find that <strong>in fact, the priority ranking used for the various requirements faced by the team is basically in order of urgency</strong>, but are they really important?<br>If you throw this question at the person who created the requirement, I’m almost certain that the answer they give you is that the requirement they created is important. One possibility is that they can’t tell the difference between important and urgent, just as we are sometimes confused.<br>Imagine two product managers show up in front of you, one tells you that the company wants to expand in a new direction and this feature has to be done, while the other says that the company wants to further profitability and that feature has to be done. To you, they both say the right thing, and both sound pretty important. But the bone-chilling reality is that you put both things next, and what awaits you is an exhausting task that can’t be completed. What can we do at this point? Jump out of this context and into a larger context. <strong> You can’t judge which need is more important, so ask a higher level boss to do so. </strong><br>A few more words of divergence, for people to do the same to constantly expand their own context, which is what we often say to increase knowledge. Many so-called life problems are caused by limited insight. For example, if you feel that there are always people in the company and you than the technology, such as the long-term vision, put yourself on the level of the whole industry to compare. Because you are working for your own career, not a company.<br>After the decomposition of the requirements, the most important thing is, to arrange the priority of the requirements. There are many ways to prioritize, we can take a cue from time management and divide things according to the dimensions of importance and urgency to get four quadrants. We need to focus on the important things as much as possible, rather than the urgent things as a way to prioritize.<br><strong>Breaking down requirements into smaller pieces actually breaks down the context</strong> that was originally unified. If you want to manage requirements effectively, especially to determine how important things are,<strong> one way is to retrieve the lost context</strong>. If we can’t determine the context ourselves, a good way to do that is to <strong>bring in a larger external context</strong>.<br><strong>How to make a product with minimum cost? </strong><br>Our instinct, of course, is to implement everything and then test it, but the world doesn’t stop and wait for us. Time and time again, we have been taught that “hold back” waterfall software development has become an anachronism. So how do we achieve our vision? The only way is to break it down.<br>As we mentioned earlier, Lean Startup is about validating product ideas in the real world through continuous experimentation, and one of the key practices is Minimum Viable Product (MVP), which we will discuss this time.<br>Let’s start with “minimal”. Here the “minimum” refers to the minimum cost. How to call the minimum cost, is not to do what can not do, can simplify things to simplify.<br>First of all, we must be clear about one thing, what we want to do is to verify the feasibility of an idea, not even to develop a software, developing software is just a means of verification.<br>Many programmers have a misconception that it is easy to treat the solution as a problem. We develop software for the purpose of solving problems, wouldn’t it be better if we solved the problem without writing the software.<br>The first step was to verify whether such an idea was feasible. We made a product document, as if we already had the product, and asked our sales colleagues to take the document to the customer to see how the customer reflected on the idea. In the process, we validated the basic idea that the need for IoT transformation of existing devices existed, and when customers saw such a thing, all kinds of ideas and requirements popped up. In addition, we gained an additional benefit, we knew the price range that customers would accept for such a product, which helped the team to price the product appropriately. Having validated the directional ideas, we moved on to the specific product design phase. What we wanted to verify in this phase was whether the product design we gave was acceptable to the users. So, we decided to make the interaction of this product. Thanks to the rapid development of prototyping tools, we made a relatively complete user interface with a prototyping tool and made all kinds of interaction flows. To the user, this is almost complete software.<br>After “minimal”, let’s look at “feasible”. <strong> Feasible is to find a path to give the user a complete experience. People who come from a programmer’s background always know software systems module by module, and the relatively weak aspect is the lack of a complete picture</strong>. But from the perspective of product viability, we need to shift our thinking, not a module to do how complete, and a user path is smooth<br>When time is limited, we need to learn to find a viable path to find a balance between a complete user experience and a complete system.<br>Step by step, we launched a relatively complete P2P platform. In this process, we put new features on line at each stage, and from the user’s visible point of view, what he sees is always a complete platform, the changes of which can only be seen clearly from the perspective of the internal implementer. (For example, the repayment function, although it is one of the complete life cycle, no user will use it in the first month, so the scheduling can be a bit later)<br>To use the concept of minimum viable product well in practice is to find a viable path at minimal cost. <strong>Minimal cost means not doing what can be done and simplifying what can be simplified. </strong><br>Programmers are usually willing to solve problems with their own code, and writing code is usually a very costly solution, which should be the final product solution. The path that works is a complete user experience path, at least in the eyes of the user.<br>We often want to give our clients a complete system, but with limited time, we must learn to break it down.<br>If there’s only one thing you can remember from today, remember this: the most viable way to do good product development is to use MVP.</p><p>In this module, we learned some best practices:<br>Test Pyramid<br>— Best practices for testing portfolios in the industry.<br>— Writing more unit tests is key.<br>Test Driven Development<br>— The rhythm of test-driven development is: red - green - refactoring, refactoring is the key to test-driven development area different from test first.<br>— Some people understand test-driven development as test-driven design, and it brings a change in thinking to the industry to write testable code.<br>Eisenhower Matrix (Eisenhower Matrix)<br>— Divide things according to importance and urgency.<br>— The important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible.<br>Minimum Viable Product<br>— products that are “just right” for our customers’ needs.<br>— in practice, to find a viable path at minimal cost.<br>In addition, I mentioned a number of practices and rubrics that can be applied directly in the workplace:</p><ul><li>Try not to write static methods;</li><li>A master branch development model as a better development branch model;</li><li>Good user stories should conform to the INVEST principles;</li><li>Estimation is a process of deepening understanding of requirements, and good estimation is based on task decomposition;</li><li>A good test should comply with A-TRIP.</li></ul><p>I’ve also taken you through some important ideas to help you better improve your own development work::</p><ul><li>Divide and conquer, a basic human problem-solving tool;</li><li>Software change costs, which increase over time and in development phases;</li><li>Testing frameworks that introduce automated testing as a best practice into the development process, allowing testing actions to be fixed by standardized means;</li><li>Extreme programming is called “extreme” because the idea behind it is to push good practice to its limits;</li><li>The secret of the master programmer’s work is task decomposition, down to the micro-operations that can be performed; arranging development tasks in the order of complete implementation of a requirement.</li></ul><h2 id="Communication-Feedback"><a href="#Communication-Feedback" class="headerlink" title="Communication Feedback"></a>Communication Feedback</h2><p>We work hard to learn all kinds of knowledge in order to better understand how the world works, and communicating feedback is the best way for us to interact with the real world.<br>When several people discuss a problem together, someone else often just starts a conversation, he thinks he has understood the idea of others, and then starts to express his own point of view. The information is incomplete, so how can we talk about decoding. So, development team discussions often involve one person talking about something but getting off topic. We have to accept feedback from the real world if we want to make our work life better, and accepting feedback from the real world requires us to, first, open our own receiver to accept the signal in and let the feedback in, which is the premise of decoding; second, expand our insight and improve the effect of our decoder to better understand what others want to express in the end. Having said that the encoder and decoder may have problems, let’s look at another problem that may cause impact: codec algorithm, that is, how to coordinate the two sides of communication to communicate more effectively.<br>Life is not as good as it should be. A big reason why many people have so many bad things is that we have a lot of unrealistic fantasies about the real world, and good intentions do not drive the world, and this is also true in software development. Although people and people live in one world, their understanding of the world is very different.<br>Improving codecs requires several perspectives: encoders, which allow for more accurate information output; decoders, which reduce signal filtering and improve decoding capabilities; and codec algorithms, which are various “best practices” from the industry that coordinate both sides of the communication.<br>Write code in the language of the business, one is highly readable, the other is able to identify the constant and changeable parts of the code, better practice design patterns, and achieve domain-driven design<br><strong>Lightweight Communication</strong><br>The meeting is to solve the problem, but the real situation is to open the meeting and did not solve many problems, this is a strange contradiction. Thinking back, have you ever attended a meeting that worked particularly well? In my career, where the effect of the meeting is particularly good, basically used to do information synchronization. For example, the leader announces a thing, this kind of meeting will hardly waste time. The message is announced, everyone receives it, and it ends. And what is a bad meeting like? Almost all of those discussions, you say one thing and I say another, each meeting almost without exception, there are a few good at interrupting, this meeting will basically run out of time, the time will be so minute by minute.<br><strong>The first action item to improve the meeting is to reduce the number of people involved in the discussion</strong>. Some people will say, “I have several topics for this discussion, and each topic requires different people to participate, so what you need to do is to find these people separately to discuss specifically, instead of putting everyone together. Compared to the meeting format, face-to-face communication is not possible because of the limited attention span and the number of participants is not too large. Also because the number of participants is relatively small, each person’s input will be a little more.<br><strong>The second action item is, if you want to discuss, find people to communicate face to face. </strong>If there is an issue that needs to be discussed, what I want to do is to find the relevant people to discuss it separately for the topic of concern, and then, I will summarize the results of the discussion and then go back to seek everyone’s opinion. If everyone agrees, I will choose to meet only. This time, <strong> the purpose of the meeting is no longer a discussion, but a synchronization of information </strong>: I am ready to do so, the relevant parties have agreed, to inform everyone, end.<br>Try to communicate in a more visual way.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112178/origin-of-ray/1669902990925-8a11e407-496a-4218-b2ad-770dd8554be1.png_averageHue_23edeeee_clientId_u496d162f-a4d1-4_from_paste_height_1168_id_ud3c871f5_name_image_aakl9n.png" alt="image.png"><br>The birth of continuous integration is the result of people trying to shorten the integration cycle. Why shorten the cycle time? Because we want to get feedback as early as possible to know if the results of our work are working. So, to do continuous integration well, you need to go along with the essence of <strong>continuous integration: getting feedback on your work as soon as possible</strong>.<br>From there, we get to the key point of <strong>continuous integration, you just have to remember the phrase, quick feedback</strong>.<br>Quick feedback, this sentence is divided into two parts, quick and feedback, which leads to two important goals of <strong>continuous integration: how to get feedback quickly, and what kind of feedback is effective</strong>.<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670545816448-b0372507-d4ed-4351-8b1b-278b49a0797a.png#averageHue=%23fdfdfd&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=595&amp;id=u656beaf1&amp;name=image.png&amp;originHeight=1190&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244883&amp;status=done&amp;style=none&amp;taskId=uf9db3aa5-fa20-4d6f-8e7e-2c758351358&amp;title=&amp;width=1142" alt="image.png"><br>What is replay? A replay is a Go term that means that after a player has played a game, he replayed the game to see what went well, what didn’t go well, what could have been played differently or even better, etc. <strong>This way of restoring the process and discussing and analyzing it is a replay</strong>. <strong>This way of restoring the process, discussing and analyzing it, is replay</strong>.<br>Nowadays, the concept of review has been used in many aspects, such as stock market review, business management review, and it has become the most important tool for many people to help individuals and enterprises to continuously improve. The most famous one is Liu Chuanzhi, the founder of Lenovo, who even wrote “review” into the core values of Lenovo. Why is it so useful to review? In my opinion, there is an important reason, lies in the <strong>objectification</strong>. As the saying goes, the authorities are confused, the onlookers are clear. Using our software development as an example, when solving a problem, we focus more on the problem itself and rarely think about how the problem was caused. <strong>When you review the problem, you will stand in a different perspective to think about what caused the problem. At this time, you are no longer the person involved, but have become a bystander. </strong>You observe the process of how that original thing happened, as if someone else was doing it. You go from a subjective perspective to an objective one. Seeing things from someone else’s perspective is objectification.<br>If your team can see the root cause at once is good, but if not, then it is best to ask more why. How to ask, there is a common practice is: 5 Whys (5 Whys). This practice was introduced by Saji Toyoda, the founder of the Toyota Group, and has since become widely known with the Toyota Production System. Why do you need to ask more whys? Because the initial question, you can get only the surface reason, only a few more whys, you can find the root cause. Let me give you an example. The server often returns 504, so we can use the “5 Whys” approach to ask.</p><ol><li>Why is there a 504? Because the server takes longer time to process and timeout.</li><li>Why does it time out? Because the Redis behind the server query is stuck.</li><li>Why is accessing Redis stuck? Because another service updating Redis deleted a large amount of data and then, when it was reinserted, the server blocked.</li><li>Why does it delete data in bulk and reinsert it? Because the update algorithm is not designed properly.</li><li>Why does an ill-designed algorithm go live? Because this design was not reviewed according to the process.</li></ol><p>More close to the user, in order to understand what their code is used to do, but also in the discussion of requirements to better understand which needs are necessary<br>As a programmer, overcoming technical challenges is an important part of our job, so we subconsciously throw ourselves into them as soon as they arise. But is this really the best approach? Not really, <strong>not all problems are technical challenges worth solving. </strong><br>There is an important principle of writing programs called Fail Fast, what does this mean? It means that if you encounter a problem, report the error as early as possible.<br>What are you going to do if the configuration file is missing an important parameter, for example, the maximum number of database connections? Many people will choose to give a default value, which is not a Fail Fast approach. Since it is an important parameter, reporting an error if it is missing is called Fail Fast.<br>In fact, <strong>Fail Fast also smacks of something counter-intuitive; many people are compatible with a lot of weird problems on the grounds of building robust systems, rather than exposing it. Instead, they hide the bugs in the system</strong>. We all know that relying on debug to locate problems is one of the most time-consuming and costly practices. So, don’t be afraid to report problems with the system early.</p><h2 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h2><p>In my opinion, it is important to do what is valuable, not just what is “done”, but also what is valuable in terms of time and cost savings by “not doing”. Two of my colleagues prevented the client from wasting money, so I view this project as a success.<br>For development, the same reasoning is followed. Programmers as a group are so technically competent that it is simply too intuitive to make a technical solution, we just faithfully make one requirement after another and automate “the world”. <strong>But the truth is, too much of the world’s waste is doing things that shouldn’t be done. </strong>In our column, I repeatedly say that we need to ask more questions in order not to do things that we shouldn’t do.<br><strong>Beware of NIH syndrome</strong><br>You can judge from the perspective of the requirements of which work can not be done, but we also want to prevent programmers themselves “add drama”, I will tell you a common problem of technical personnel: NIH syndrome (Not Invented Here Syndrome).<br>For example, this kind of chaos in the field of front-end also appeared, a variety of frameworks, so many front-end programmers cry, really can not learn. Another example is that I once interviewed a programmer who had contact with Go earlier, and he just couldn’t wait to write all the frameworks himself.<br>Having said that, it’s just to illustrate one thing<strong> Before writing code, ask yourself if you really want to do it? Don’t do it if you can, until you have enough reason to do it. </strong> Corresponds to Larry Wall’s statement that you have to be lazy and put a lot of effort into circumventing the energy drain.<br>In general, there are several different environments when building an infrastructure for continuous delivery, as described below.</p><ol><li>Continuous integration environment, continuous integration is a prerequisite for continuous delivery, this process is mainly to perform basic checks and hit a package that can be released.</li><li>Test environment (Test), this environment is often stand-alone, mainly responsible for functional verification, where the tests run are basically acceptance test level, and generally put the unit tests and integration tests and other tests that are executed faster into the continuous integration environment to execute.</li><li>pre-production environment (Staging), this environment is usually the same as the production environment configuration, for example, load balancing, clustering and so on should have, but the number of machines will be less, is mainly responsible for verification of the deployment environment, for example, can be used to find some problems brought about by the concurrency of multiple machines.</li><li>production environment (Production), which is the real online environment.</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112199/origin-of-ray/1670548946042-82f31fce-91f5-49a5-9e76-a8981ec76fe9.png_averageHue_23f8f7f7_clientId_u3a9da171-cf06-4_from_paste_height_551_id_u8619be65_name_image_keqa8u.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112216/origin-of-ray/1670548966490-daed7c11-d337-4904-9721-51cc1be48350.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_737_id_u62feb077_name_image_x6u6xh.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112236/origin-of-ray/1670549025670-7d994107-12f6-412d-9007-62cf3d1a161b.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_734_id_u59f6a867_name_image_xvvqi1.png" alt="image.png"><br>Ensure your code is not too confusing: the SOLID principle</p><p>Today, we start with a segment of the software industry. Party A wants to do an e-commerce website, as party B programmer asked: “What kind do you want to do?” Party A said, “Like Taobao is good.” The programmer asked, “How much are you going to pay?” Party A thought about it, “50,000 yuan is about right!”<br>This is, of course, a flirtation with the customer does not understand the requirements of the paragraph, but have you ever thought, <strong> Why in the A does not seem to be a complex system, you find it difficult? Because what you want is simply not a thing</strong>.<br>In the customer’s opinion, what I want is a website where I can buy things. As long as the product can be online, the user can see and buy it, 50,000 yuan is almost enough.<br>And what you think in your head is, “Taobao ah, that has to be a big technical challenge ah, every year to the ‘double 11’, that will have to consider all kinds of concurrent snapping. Taobao has to have how many programmers, 50,000 you want to do a, the door is not.”</p><p><strong>When doing a new project, it is not necessary to consider too many imaginary needs, the most important thing is to do two things well</strong></p><ol><li><strong>analysis of requirements, good domain division and abstraction (</strong>the higher level of abstraction the more stable, the more detailed things are easy to change<strong>), to ensure the scalability of the architecture </strong></li><li><strong> Minimize the introduction of various frameworks, or to ensure that the framework is pluggable and can be quickly replaced </strong></li></ol><p>Reviewing the above process, you can see that each time the original technology cannot meet the needs as the business volume grows, so it is necessary to solve the problem with new technology. The key point here is: different business volumes.</p><p>A system that serves only a few people, a single machine is enough, and a programmer just starting out can implement this system very well. When the volume of business reaches the point where a single machine cannot resist, it needs to be handled by multiple machines, and this time the problem of distributed systems must be considered, and middleware may have to be introduced appropriately. And when the system becomes to provide services for a huge amount of business, there is no which has been built to help the middleware, need to solve the problem from the bottom themselves. Although these systems seem to be the same in business, in technical terms, a system faces different problems at different stages, because it faces different levels of business. To be more precise, systems of different magnitudes are not a system at all.<br>In the previous example, the real driver for Taobao’s engineers to improve the system is not the technology, but the complexity of the problem due to the escalating business volume. Therefore, assessing the current stage of the system and using the appropriate technology to solve it is the most important thing we should consider.<br><strong>Then remember: use simple techniques to solve problems until they become complex. </strong><br>Maybe you’ll say, what if I make a system that doesn’t have that much business and I still want to improve my skills? The answer is to go to a place where there are good problems. Nowadays, the IT industry offers many opportunities for programmers, and it is not difficult to find a place with good problems, but of course, the prerequisite is that you have the basic ability to solve problems yourself.</p><p><strong>How to do microservices</strong><br>Let’s start by answering the question, why do we want to do microservices? The standard answer to this question is that microservices are small enough, easier to understand in code, easier to test, and simpler to deploy compared to monolithic services (Monolithic). All of this makes sense, but it is the result of doing microservices well.<br>How can we get to this state? There is a key factor, how to divide microservices, that is, how to decompose a huge system in a way. This is the most lacking in many discussions about microservices, and is the fundamental reason why many teams do “microservices” but die hard.<br>Without understanding this, write services that either call each other from service to service, causing the whole system to execute very inefficiently, or you need to spend a lot of effort to solve the data consistency between the various services.<br><strong>In other words, a poorly delineated service awaits the team in an endless quagmire of contingent complexity. Only when microservices are delineated correctly will it be what you have in mind to aspire to. </strong><br><strong> And how should you divide microservices? You need to understand domain-driven design. </strong><br>Domain Driven Design (DDD) is a methodology proposed by Eric Evans for moving from systems analysis to software modeling. What is the problem it is trying to solve? It is to transform business concepts and business rules into concepts and rules in software systems, so as to reduce or hide business complexity and make the system more scalable to cope with complex and changing real business problems.<br><strong>What exactly does DDD say? It pulls your starting point of thinking from a technical perspective to the business. </strong><br>We’ve mentioned this many times in this column. DDD is based on the Ubiquitous Language, which allows business people to speak the same language as programmers. This is something I mentioned in “21 | Who do you write code for? I’ve already mentioned this in 21 | Who do you write code for? Using a universal language is the same as pulling the level of thinking from the code details to the business level. The higher the level of abstraction the more stable it is, and the more detailed it is the more likely something will change.<br>With a common language as the foundation, it is time to move on to the practical aspects of DDD. <strong>DDD is divided into Strategic Design and Tactical Design. </strong>DDD is divided into Strategic Design and Tactical Design.<br>Strategic design is the high-level design that helps us divide the system into different domains and deal with the relationships between them. I gave you the example of “orders” and “users” in the previous section. This is the fundamental solution to the problem, otherwise, no matter how well you write your code, confusion is inevitable. And this way of thinking in terms of business is what DDD strategic design brings to me. Tactical design, usually refers to how to organize different domain objects within a domain at the technical level. As an example, domestic programmers like to use myBatis for data access instead of JPA, the common reason is that JPA has too poor performance in case of association. But the real reason is that the associations are not designed well.<br>After all, what does this have to do with microservices? The real difficulty of microservices is not the technical implementation, but the business segmentation, which happens to be the strong point of Bounded Context in DDD strategic design.<br>Although a common language bridges the gap between business and technology, computers are not good at dealing with ambiguous human language, so a common language must be expressed in a specific context to be clear. Like the “order” example we talked about, the “order” of a transaction is different from the “order” of logistics, and they both have their own contexts, and that context is the bounding Context.<br>It delimits the boundaries of the free use of the common language, and once outside the boundaries, the meaning is not guaranteed. It is because of the boundary that a bounded context can become just a separate deployment unit, and that deployment unit can then become a service.<br><strong> So to do microservices well, the first step should be to identify the bounding context. </strong><br>As you can see, each bounding context should be independent, and there should not be a lot of coupling between each context.<strong> The large number of mutual invocations between microservices that plague many people is itself a pseudo-proposition brought about by a failure to delineate the boundaries, relying on technology to solve business problems</strong>, with half the effort.<br>With a bounded context you can do microservices, right? Wait a minute!<br>In my humble opinion, it is not very easy to draw the boundaries clearly at once. It is much easier to adjust when everyone is in one process. Then, let the different bounding contexts evolve independently on their own first. Wait for it to evolve to the point where it’s worth deploying independently, and then think about microservice splitting. By then, you’ve also learned all sorts of techniques about microservices that should come in handy!</p><p>DDD and lean startup, microservices division is similar, both need to delineate the contextual boundaries, cut with the simplest way to achieve the needs of the moment, and then gradually expand (need good design to ensure scalability) lean startup is actually a continuous validation, verify the validity of the idea, to obtain the validated knowledge (Validated Learning).</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112260/origin-of-ray/1670740142955-ce3186d8-a3eb-425b-bc3f-d4f14ed071fe.png_averageHue_23f6f6f6_clientId_uec93d73b-3fc1-4_from_paste_height_1592_id_u97ed25ef_name_image_jwyysc.png" alt="image.png"></p><p>If you understand the business, you can deduce the basic code structure yourself. But conversely, if you are asked to look at the code and deduce the business from it, it is almost impossible.<br>In fact, every time I learn about a business, I go over in my head how I would do it if I were doing it. This way, I will have a preconception on the whole first, and then correspond to the actual code later, so it will not be so strange. To understand the business, I usually ask someone to tell me what the business does, what kind of problem it solves, what the specific business process is like, and so on.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112273/origin-of-ray/1670740542457-15af9ad4-a2e9-402f-9cc0-e6c51d46db57.png_averageHue_23f2f2f2_clientId_uec93d73b-3fc1-4_from_paste_height_429_id_u4aff8d90_name_image_ihfmvt.png" alt="image.png"><br>To revamp the legacy system, I will give you a few suggestions:</p><ol><li>building a test protection network to ensure consistent functionality of old and new modules;</li><li>divided into small pieces and gradually replaced;</li><li>constructing a good domain model;</li><li>Find the latest understanding of system building in the industry.</li></ol>]]></content>
    
    
    <summary type="html">The technology that programmers master is called information technology and is designed to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI has brought us in the end</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Implementation of AVL Tree</title>
    <link href="https://sunra.top/en/posts/5250/"/>
    <id>https://sunra.top/en/posts/5250/</id>
    <published>2023-02-02T02:56:03.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.</p><p>An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.</p><span id="more"></span><h1 id="Fundamentals"><a href="#Fundamentals" class="headerlink" title="Fundamentals"></a>Fundamentals</h1><p>Not much to say about BST, it is relatively simple, that is, the left child of each node is smaller than the root node, the right child is larger than the root node, just pay attention when inserting.</p><p>But there is a problem with BST, for example, inserting 1, 2, 3, 4, 5, 6 in sequence, then we will end up with a tree with only right children, in fact, this BST has degenerated into an ordinary chain table, so we need some way to keep this tree balanced, and the way to keep it balanced is as follows:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1675307019/origin-of-ray/912c7f2fdaf3490689db1a7144775b11_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0_qzoplx.webp" alt=""></p><h1 id="Specific-implementation"><a href="#Specific-implementation" class="headerlink" title="Specific implementation"></a>Specific implementation</h1><h2 id="Four-types-of-imbalance"><a href="#Four-types-of-imbalance" class="headerlink" title="Four types of imbalance"></a>Four types of imbalance</h2><h3 id="Left-right-situation"><a href="#Left-right-situation" class="headerlink" title="Left-right situation"></a>Left-right situation</h3><p>In this case to rotate right and then return the new root node after the rotation, the code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">    node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">    avlNode.<span class="property">right</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Right-right-situation"><a href="#Right-right-situation" class="headerlink" title="Right-right situation"></a>Right-right situation</h3><p>In this case to rotate left and then return the new root node after the rotation, the code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">    node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">    avlNode.<span class="property">left</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Circumstances"><a href="#Circumstances" class="headerlink" title="Circumstances"></a>Circumstances</h3><p>In this case, the left child node of the root node should first be left rotated to become the left-left case, then the root node should be right rotated, and then the new root node should be returned after the rotation, with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Right-left-case"><a href="#Right-left-case" class="headerlink" title="Right-left case"></a>Right-left case</h3><p>In this case, the right child node of the root node should first be rotated right to become the right-right case, then the root node should be rotated left, and then the new root node should be returned after the rotation, with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fix-the-imbalance"><a href="#Fix-the-imbalance" class="headerlink" title="Fix the imbalance"></a>Fix the imbalance</h2><h3 id="Get-the-height-of-the-node"><a href="#Get-the-height-of-the-node" class="headerlink" title="Get the height of the node"></a>Get the height of the node</h3><p>When we do balancing, we need to determine whether we need to balance and what kind of imbalance is the case so that we can choose a different rotation method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// The height of the empty node is 0</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Post-order traversal is used here, because the result of each recursion requires the result of the child node recursion</span></span><br><span class="line">    <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The node height is the greater of the left and right subtree heights plus 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Balance"><a href="#Balance" class="headerlink" title="Balance"></a>Balance</h3><p>Balances the subtree with node as the root node and returns the new root node.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// Empty nodes do not need to be balanced, return empty nodes directly</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the height of the left and right subtrees</span></span><br><span class="line">    <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the height of the left subtree is greater than the height of the right subtree by more than 1, it is unbalanced and there is an implied logic that the left subtree of the left subtree must not be empty</span></span><br><span class="line">    <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Left-left situation, direct right rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Left and right situation, first left rotation then right rotation</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Right-right situation, direct left rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Right-left situation, first right, then left</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the new root node of the balanced subtree</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Basic-operation"><a href="#Basic-operation" class="headerlink" title="Basic operation"></a>Basic operation</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>Inserts a new node and returns the new root node</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The most important thing to understand about this code is that this recursive function returns the root of a new subtree each time a newNode is inserted and balanced on a tree with a node node as the root node.</span></span><br><span class="line">#<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// If the root node is empty, return the newNode directly as the root node</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If the value of the new node is smaller than the current node</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the left node is empty, then the new node will be treated as the left child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the left child node is not empty, then insert a new node into the left subtree and use the root node of the new subtree returned after the insertion as the left subtree</span></span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the right node is empty, then the new node is treated as the right child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">right</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the right child node is not empty, then insert a new node into the right subtree and use the root node of the new subtree returned after the insertion as the right subtree</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Balance after insertion and return the root node of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// Insert the newNode from the root, and reassign the root to ensure the next call is correct</span></span><br><span class="line">    <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h3><p>This is relatively simple, and not much different from BST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Delete the node with the value val from the subtree with node as the root and return the root of the new tree after balancing</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="comment">// If node is null, the tree is empty and does not need to be deleted, and the root node of the new tree is also null</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// If the node to be deleted is found</span></span><br><span class="line">    <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// The node to be deleted has both left and right subtrees</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">            <span class="comment">// Then find the right subtree of the node</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">            <span class="comment">// Then look for the left subtree all the way down the right subtree</span></span><br><span class="line">            <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                p = p.<span class="property">left</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Then replace the result in the current node, because the leftmost child node in the right subtree must be smaller than the rest of the nodes in the right subtree, while raining all the nodes in the left subtree</span></span><br><span class="line">            node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">            <span class="comment">// The previous step just replaces the node value, but the node is still there. We need to remove the node from the right subtree and return the new right subtree as the right subtree of the node after balancing.</span></span><br><span class="line">            <span class="comment">// And remember, at this point we are deleting p.val, not val, because we have already put p.val into node.val, and this p has the property that it has no left child node at least, and the next time the seat will enter the immediately following else logic</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If you don&#x27;t have both left and right subtrees, just replace them and delete the original ones</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">            node = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is smaller than the current one, go to the left subtree and delete it</span></span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is larger than the current one, go to the right subtree and delete it</span></span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the root of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Complete-code-and-tests"><a href="#Complete-code-and-tests" class="headerlink" title="Complete code and tests"></a>Complete code and tests</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AvlTree</span>&#123;</span><br><span class="line">    #<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">        node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">        avlNode.<span class="property">left</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">        node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">        avlNode.<span class="property">right</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">left</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">right</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_inOrder</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> stack = [node];</span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line">        <span class="keyword">while</span>(stack.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (current ! <span class="literal">null</span>) &#123;</span><br><span class="line">                current.<span class="property">right</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">                stack.<span class="title function_">push</span>(current, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                current.<span class="property">left</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = stack.<span class="title function_">pop</span>();</span><br><span class="line">                result.<span class="title function_">push</span>(current.<span class="property">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#_root= <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">_inOrder</span>(<span class="variable language_">this</span>.#_root);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">left</span>))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">                <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                    p = p.<span class="property">left</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> avlTree = <span class="keyword">new</span> <span class="title class_">AvlTree</span>();</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">8</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">9</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">14</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">15</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">16</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">17</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">18</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">19</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">20</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">21</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">11</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">31</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">61</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">111</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">221</span>));</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">20</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">1</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">11</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">221</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">8</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">4</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.&lt;/p&gt;
&lt;p&gt;An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Analysis Patterns - Reusable Object Model</title>
    <link href="https://sunra.top/en/posts/29283/"/>
    <id>https://sunra.top/en/posts/29283/</id>
    <published>2023-01-26T03:10:44.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>Recently read the book “Analysis Patterns - Reusable Object Model”, this book is considered an enlightening book on DDD, read the completion or benefit a lot, on the one hand, many points and the usual work of mutual evidence, very inspired, on the other hand, learned some business modeling patterns, this article mainly summarizes the inspiration received This article mainly summarizes the inspiration received and modeling principles, specific modeling approach to give an example to experience it.</p><p>Here are a few of my most rewarding points in brief:</p><ul><li>An important principle of object development is that the structure of the software reflects the structure of the problem.</li><li>The coupling caused by the problem not sorted out clearly is not solved by design patterns, such as logistics and orders, they use the same data table, they need to sense each other, then they must be coupled together in some way, belonging to the essential complexity, this coupling is not decoupled by a good design pattern, even if they are two systems, they have to be together alteration.</li><li>The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of other business areas of knowledge, then in fact, or coupling.</li><li>If there have to be connections between different domains, try to minimize two-way connections, each of which introduces higher complexity into the system.</li><li>In the beginning of the system to minimize the complexity of the system at the same time, keep open to changes, that is, the principle of open and closed, unless very necessary, do not come up to introduce a lot of third-party tools, to consider the introduction cost of these tools, maintenance costs, upgrade costs, and even opportunity costs, and do not come up to engage in any microservices, microservices are best from a mature system after verification of stable business areas Microservices are best incubated from a proven and stable business area in a mature system, otherwise, microservices on pure technical architecture will only increase the overall complexity and risk of the system.</li></ul><span id="more"></span><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>We can simply divide the architecture design into horizontal and vertical divisions. The horizontal division, which addresses the business architecture, is to reduce the essential complexity of business logic and reduce the coupling between business domains, while the vertical architecture addresses non-functional requirements, such as improving stability, throughput rates, etc. through technologies such as caching layers, message queues, etc. </strong></p><p>Our focus in this paper is to address some of the principles of horizontal architectural design.</p><p>The purpose of analysis is to understand the problem, which, in my opinion, can be more than just a process of using use cases to enumerate requirements. Use cases are valuable, if not essential, in the system development process, but capturing such use cases does not mean the end of the analysis. Analysis also involves looking beyond the surface requirements to propose a mental model that reflects the underlying mechanisms of the problem.</p><p>Consider writing software that simulates a billiard game, which can be evaluated by describing the use case of a surface feature: “The player hits the white ball, causing it to move at a certain speed, and then the white ball hits the red ball at a certain angle, causing the red ball to move a certain distance in a certain direction.” One could shoot such an event hundreds of times and measure the speed, angle and distance the ball moved. However, I am afraid that this alone is not enough to write a good simulation program. To write a good program, one needs to look beyond the surface phenomenon to understand the underlying laws of motion, including mass, velocity, momentum, etc.</p><p>Problems like the game of billiards are not rare because the laws of these sports are widely known. Then in many companies, the basic mechanisms at this level are not well understood and need to be diligently discovered.</p><p>There is no right or wrong model, the key is which model is more suitable.</p><p>The choice of model may affect the flexibility and reusability of the developed software. For software like a billiards tournament, you might advocate using the Einstein model because the developed software can be flexible enough to handle atomic collision problems. But this is a more dangerous way to handle it, because <strong>introducing too much flexibility may lead to an overly complex system, which is a bad engineering practice</strong>.</p><p>One of the main reasons for using analysis and design techniques is to involve domain experts, which is essential for conceptual modeling. Effective models can only be built by people who really understand the domain, people who work full time in the field. it skills neither help nor hinder modeling skills.</p><p>Analytical techniques should be independent of each other and software techniques, and ideally, conceptual modeling should be completely independent of software techniques, as in the case of the laws of motion described above. This independence prevents the technology from hindering one’s understanding of the problem, and the resulting model is equally valid for all software technologies.</p><p>Closely related to the conceptual model is the software interface rather than the software implementation.</p><h1 id="Some-modeling-principles"><a href="#Some-modeling-principles" class="headerlink" title="Some modeling principles"></a>Some modeling principles</h1><p>Here is a list of some modeling principles in the book, in fact, these principles and the principles of design patterns are similar, they just focus on different points.</p><ol><li>The modeling should minimize the number of types affected by the part of the model that changes most frequently. (This point is actually related to the design pattern’s separation of parts that are prone to change from those that are not.)</li><li>When defining characteristics for types with supertypes, consider whether it makes sense to place these characteristics on the supertype.</li><li>The model should be explicitly divided into an operational layer and a knowledge layer. For example, the configuration class files or some custom semantics that we can parse are the knowledge layer, which defines the relationships between classes and certain principles of program operation, while the specifics of how to instantiate classes belong to the operational layer.</li><li>When multiple attributes interact through behaviors that can be used in several types, these attributes should be combined into a new basic type. For example, if our system involves a large number of different units of data, we can combine units and values from these data into a quantity type.</li><li>The operational layer contains those concepts that change on a daily basis and whose configuration is bounded by the knowledge layer, which will change much less frequently. The frequency of change here refers to runtime changes.</li><li>If a type has very many similar associations, then abstract these associated objects into a new type and then create a knowledge layer to distinguish them.</li><li>To record the change history of a value, an account should be created for that value.</li><li>When using the account, the following conservation principle should be followed: the recorded items cannot be created or destroyed, and can only be transferred from one place to another, which makes it easier to find and avoid vulnerabilities.</li><li>To understand how a calculation is performed, you can represent the result of the calculation as an object that is used to remember the calculation that created it and the input values that were used.</li><li>When there are multiple equivalent feature sets to choose from, pick the one that the domain expert thinks is most appropriate, and if the domain expert thinks both are very valuable, then extract both and mark one of them as a derivation.</li><li>Marking a feature as derived is only a constraint on the interface and does not affect the underlying data structure.</li><li>If a collection of objects can be created by different conditions, then a combination should be used.</li><li>When treating a process as a feature of a type, an abstract interface should be provided for the process so that its implementation can be easily changed through subclassing. For example, purely hard-coded implementations are one subclass, and various parameter-driven methods are other subclasses.</li><li>When multiple attributes interact in a behavior that may be used in more than one type, the attributes should be combined into a new basic type.</li><li>If the supertype applies to a narrower domain and the subtype applies to a wider domain, then generalization should not be used.</li><li>If the difference between two similar types is usually negligible, then use the abstract supertype. If the difference between the two is important, then do not use the abstract supertype.</li><li>If using an abstract supertype does not cause more work for the client, then this abstract type should be provided.</li><li>When some information may be both obtained directly from a source and calculated from other available data, an abstract interface should be provided with the two ways of obtaining and calculating information from the source as their respective subclasses.</li><li>When faced with several alternative methods, first choose the simplest method and then change to a more complex method as needed.</li><li>Follow the intuition of domain experts when it is difficult to choose among immediate modeling solutions.</li><li>Subtyping should only be used if all the characteristics of the supertype apply to the subtype and it is conceptually reasonable to say that every instance of the subtype is an instance of the supertype.</li><li>When the customer perspective sees that a single transaction can be divided into multiple transactions by the trader, the product and the contract should be separated. The key to the product-contract distinction is that the product represents the client’s intent, while the contract refers to the content of the actual transaction between the counterparty and the principal.</li><li>Do not repeat basic associations that have the same meaning. By following this principle, it is possible to obtain well-defined types of responsibilities.</li><li>There should be consistency in the assignment of responsibilities. Beware of the types who sometimes take responsibility for something and sometimes delegate that responsibility. (This behavior may be correct, but it should always be viewed with suspicion)</li><li>The choice between one-way and two-way associations requires a trade-off between low workload for type development staff (reduced coupling between types) on the one hand, and ease of use for type users on the other.</li><li>If a package only needs to see part of another package, consider splitting the latter package into two mutually visible packages.</li><li>The essence of subtyping is that it can be extended without the supertype knowing anything about it. It is often necessary to design some subtypes to gain experience and then abstract them.</li></ol><h1 id="Two-examples-of-analysis-patterns"><a href="#Two-examples-of-analysis-patterns" class="headerlink" title="Two examples of analysis patterns"></a>Two examples of analysis patterns</h1><p>Each box in the diagram represents a type.</p><h2 id="Responsibility-mode"><a href="#Responsibility-mode" class="headerlink" title="Responsibility mode"></a>Responsibility mode</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220145_aun9wt.jpg" alt=""></p><ul><li>The responsibility type is defined in the knowledge layer, and the responsibility type defines what kind of delegates can be selected by the responsible party which mapping relationship</li><li>Then the operational layer is to instantiate a responsibility, and to follow the specification in the responsibility type of the knowledge layer when re-selecting the participants in a specific responsibility</li><li>Each responsibility may have a time period that corresponds to an activity.</li></ul><h2 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220202_mjg72s.jpg" alt=""></p><ul><li>Each observation has its own participant</li><li>Observations can be subtyped as hypothetical, speculative and valid observations</li><li>Observations can also be subtyped as measurements and categorical observations, where the result of a measurement is a quantity (value + unit) and the result of a categorical observation is the presence or absence of it. As an example, blood pressure is a measurement, while high blood pressure is a categorical observation. Blood pressure, a measurement, can be inferred from blood pressure high, a categorical observation, and once the blood pressure measurement is wrong, this chain of inference should be directly negated by the chain.</li><li>At the knowledge level, observation has its own protocols, that is, how it is carried out</li><li>The type of phenomenon in the knowledge layer, phenomenon and observation concept, specifies what the observation in the operational layer can be, e.g. blood pressure is a type of phenomenon, increase is a phenomenon, and increase in blood pressure is an observation concept, while observation concepts are inferred from each other.</li></ul>]]></content>
    
    
    <summary type="html">The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of knowledge of other business areas, then in fact, or coupling</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>higher mathematics knowledge point combing summary</title>
    <link href="https://sunra.top/en/posts/29216/"/>
    <id>https://sunra.top/en/posts/29216/</id>
    <published>2022-07-16T12:39:24.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I finally got through the knowledge of higher mathematics, but because the whole process is long and there are many knowledge points, they are all fragmented and not systematic, so I thought I would take this opportunity to generally sort out all the knowledge points once.</p><span id="more"></span><h1 id="Brief-summary"><a href="#Brief-summary" class="headerlink" title="Brief summary"></a>Brief summary</h1><p>In general, the core knowledge of higher data revolves around limits and continuity, so it is important to be proficient in finding limits.</p><p>The derivative of a one-dimensional function is actually defined by the limit. And when the increment of the independent variable tends to 0, the derivative of a unit function multiplied by the increment of the independent variable is the increment of a unit function, which defines the differentiation of a unit function, and the integral of a unit function is defined by differentiation.</p><p>The derivative of a multivariate function, the differentiation and the integral are defined in a similar relationship to that of a univariate function. There are some formulas in multivariate functions that need to be noted, such as the second type of curve integral, which can be changed into a double integral by Green’s formula in the plane, and the second type of curve integral in space can be changed into a second type of surface integral by Stokes’ formula, and then into a triple integral by Gauss’ formula.</p><p>The convergence criterion of the series is also mostly carried out by using the limit, such as the ratio method of the positive series, the root value method, and the Taylor series of the power series is simply the Taylor expansion of the monomial function, which seeks whether the limit of the residue term is 0.</p><p>The last is the differential equation, in fact, to you is the relationship between the function and the derivative, so that you find the expression of the function in line with this relationship</p><h1 id="Higher-Mathematics"><a href="#Higher-Mathematics" class="headerlink" title="Higher Mathematics"></a>Higher Mathematics</h1><h2 id="Functions-Limits-Continuity"><a href="#Functions-Limits-Continuity" class="headerlink" title="Functions, Limits, Continuity"></a>Functions, Limits, Continuity</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul><li><p>function</p></li><li><p>Function Concept</p></li><li>Segmented functions</li><li>Compound Functions</li><li>Inverse Functions</li><li><p>Primary functions</p></li><li><p>Limits</p></li><li><p>Limits of series</p></li><li><p>Limits of functions</p></li><li><p>Limits of a function when the independent variable tends to infinity</p></li><li><p>Limit of a function when the independent variable tends to a finite value</p></li><li><p>The concept of infinitesimal quantities</p></li><li><p>The concept of infinitely large quantities</p></li><li><p>continuity</p></li><li><p>The concept of continuity</p></li><li>Definition of interruption points</li><li><p>Classification of interruption points</p></li><li><p>Type I interruption points</p></li><li><p>Removable interruption points</p></li><li><p>Jumping interruption points</p></li><li><p>Second type of intermittent point</p></li><li><p>Infinite intermittent points</p></li><li><p>Oscillating intermittent point</p></li><li><p>Functional properties</p></li><li><p>Monotonicity</p></li><li>Parity</li><li>Periodicity</li><li>Boundedness</li></ul><h3 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h3><ul><li>A sufficient condition for the existence of the limit of a series: the limit of an odd term is equal to the limit of an even term</li><li><p>Limits of functions exist</p></li><li><p>The limit of a function exists when the independent variable tends to infinity</p></li><li><p>The limit of the function when the independent variable tends to a finite value</p></li><li><p>The relationship between the limit of a series and the limit of a function</p></li><li>Continuity of functions</li><li><p>The operation of continuous functions</p></li><li><p>Quadratic operations</p></li><li>Continuity of complex functions</li><li><p>Continuity of inverse functions</p></li><li><p>Continuity of elementary functions</p></li><li><p>Properties of continuous functions on closed intervals</p></li><li><p>Optimality theorem</p></li><li>Boundedness theorem</li><li>Median theorem</li><li><p>Zero theorem</p></li><li><p>Equivalent infinitesimal substitution theorem</p></li></ul><h3 id="Equation-properties"><a href="#Equation-properties" class="headerlink" title="Equation properties"></a>Equation properties</h3><ul><li><p>Basic primitive functions</p></li><li><p>Power functions</p></li><li>Exponential functions</li><li>Logarithmic functions</li><li>Trigonometric functions</li><li><p>Inverse trigonometric functions</p></li><li><p>Limiting properties</p></li><li><p>boundedness</p></li><li><p>number-preserving</p></li><li><p>Infinitesimal property</p></li><li><p>The sum of finite infinitesimals is still infinitesimal</p></li><li>The product of finite infinitesimals is still infinitesimal</li><li><p>The product of an infinitesimal quantity and a bounded quantity is still infinitesimal</p></li><li><p>Comparison of infinitesimals</p></li><li><p>High-order infinitesimals</p></li><li>low order infinitesimal</li><li>same order infinitesimal</li><li>Equivalent infinitesimal</li><li><p>k-order infinitesimal</p></li><li><p>Relationship between extreme values and infinitesimals:limf(x) = A &lt;=&gt; f(x) = A + α(x)</p></li><li>The nature of infinitesimals</li><li>Relationship between infinitesimal quantities and unbounded variables: infinitesimal quantities require n &gt; N when there is a constant |xn| &gt; M, while unbounded variables do not require</li><li>Relationship between infinitely large and infinitesimal quantities</li><li><p>The method of finding the limit</p></li><li><p>The four rules of limits</p></li><li><p>Two important limits</p></li><li><p>sinx and x are equivalently infinitesimal</p></li><li><p>infinitesimal type of 1</p></li><li><p>Commonly used equivalent infinitesimals</p></li><li>Lopita’s law</li><li>Clipping criterion</li><li><p>Limit criterion for monotone bounded series</p></li><li><p>Monotone bounded function must have limit</p></li><li>Monotonically increasing series with upper bound must have limit</li><li><p>Monotonically decreasing series with lower bound must have limit</p></li><li><p>The nature of infinitesimals: the sum of infinitesimals is still infinitesimal</p></li><li>Functional continuity</li><li><p>Taylor’s formula</p></li><li><p>with pianos remainder term</p></li><li>with Lagrangian remainder term</li><li><p>Commonly used Taylor’s formula (McLaughlin’s formula)</p></li><li><p>can be introduced as equivalent infinitesimal</p></li><li><p>and also Taylor series</p></li><li><p>Use the definition of derivative to find the limit</p></li><li>Differential median theorem</li><li>Definition of definite integrals</li><li>Properties of convergence of series</li></ul><h2 id="Differentiation-of-Unitary-Functions"><a href="#Differentiation-of-Unitary-Functions" class="headerlink" title="Differentiation of Unitary Functions"></a>Differentiation of Unitary Functions</h2><h3 id="The-concept-of-derivatives-and-differentiation"><a href="#The-concept-of-derivatives-and-differentiation" class="headerlink" title="The concept of derivatives and differentiation"></a>The concept of derivatives and differentiation</h3><ul><li><p>Concept and geometric meaning of derivatives</p></li><li><p>The concept of derivative</p></li><li>Derivatives and derivative functions on an interval</li><li><p>Geometric meaning of derivatives</p></li><li><p>The concept and geometric meaning of differentiation</p></li><li><p>Definition</p></li><li><p>The linear principal part of the increment of a function is called the differential</p></li><li><p>dy is the derivative multiplied by the differential of the independent variable dx</p></li><li><p>Geometric meaning: the differential represents the increment of the vertical coordinate of the tangent line of the curve at that point at that point</p></li><li><p>The relationship between continuous, derivable, and differentiable</p></li></ul><h3 id="Calculation-of-derivatives-and-differentiation"><a href="#Calculation-of-derivatives-and-differentiation" class="headerlink" title="Calculation of derivatives and differentiation"></a>Calculation of derivatives and differentiation</h3><ul><li><p>Calculation of derivatives</p></li><li><p>Derivative formula of basic elementary functions</p></li><li>The rule of derivative of the four operations</li><li>Complex function derivative rule</li><li>Inverse function derivative rule: the derivative of the inverse function is the reciprocal of each other</li><li>The method of derivatives of implicit functions</li><li>Logarithmic derivative</li><li>Parametric equation derivative method</li><li>Derivative of segmented functions</li><li><p>Important conclusions about the derivative</p></li><li><p>The derivative of an even function is an odd function</p></li><li>The derivative of a derivable odd function is an even function</li><li><p>The derivative of a derivable periodic function is still a periodic function with constant period</p></li><li><p>Calculation of higher order derivatives</p></li><li><p>direct method, respectively, to find the first-order derivative, second-order derivative, third-order derivative, etc., to find the law</p></li><li>Indirect method: using the known higher order derivative formula, the algorithm, through the function of constant deformation, variable replacement to find the higher order derivative results</li><li><p>Second-order derivatives of several types of functions</p></li><li><p>Abstract composite functions</p></li><li><p>Second-order derivative of implicit functions</p></li><li><p>Differential calculations</p></li><li><p>The four rules of differentiation</p></li><li>Invariance of first-order differential forms</li></ul><h3 id="Median-theorem-inequalities-zero-problems"><a href="#Median-theorem-inequalities-zero-problems" class="headerlink" title="Median theorem, inequalities, zero problems"></a>Median theorem, inequalities, zero problems</h3><ul><li><p>Median theorem</p></li><li><p>Rolle’s theorem</p></li><li>Fermat’s theorem</li><li>Lagrange’s median theorem</li><li>Corsi’s median theorem</li><li><p>Taylor’s theorem</p></li><li><p>Taylor’s formula of order n for Lagrange’s remainder term</p></li><li>Taylor’s formula for Peyano’s remainder term</li><li><p>McLaughlin’s formula</p></li><li><p>Inequality proofs</p></li><li><p>Monotonicity</p></li><li>Maximum value</li><li>Lagrange’s median formula</li><li><p>Lagrangian Remainder Taylor Formula</p></li><li><p>Zero point problem</p></li><li><p>Median theorem or zero theorem for continuous functions</p></li><li>Rolle’s theorem</li></ul><h3 id="Application-of-derivatives"><a href="#Application-of-derivatives" class="headerlink" title="Application of derivatives"></a>Application of derivatives</h3><ul><li>Monotonicity of functions</li><li><p>Extreme values of functions</p></li><li><p>The extreme value point</p></li><li>Stationary points</li><li>Necessary conditions for the existence of extremes</li><li>First Sufficient Condition for Extreme Values</li><li><p>Second sufficient condition for extremes</p></li><li><p>The most value of a function</p></li><li><p>The point of maximum value</p></li><li><p>Convexity of a curve</p></li><li><p>Inflection point</p></li><li>Necessary conditions for an inflection point</li><li>First sufficient condition for inflection point</li><li><p>Second sufficient condition for the point of inflection</p></li><li><p>Asymptote of the curve</p></li><li><p>Horizontal asymptote</p></li><li>Vertical asymptote</li><li><p>Oblique asymptote</p></li><li><p>Arc differentiation and curvature</p></li></ul><h2 id="Integral-of-Unitary-Functions"><a href="#Integral-of-Unitary-Functions" class="headerlink" title="Integral of Unitary Functions"></a>Integral of Unitary Functions</h2><h3 id="Concepts-of-indefinite-and-definite-integrals-properties"><a href="#Concepts-of-indefinite-and-definite-integrals-properties" class="headerlink" title="Concepts of indefinite and definite integrals, properties"></a>Concepts of indefinite and definite integrals, properties</h3><ul><li><p>Principle functions, indefinite and definite integrals</p></li><li><p>Geometric meaning of definite integrals</p></li><li><p>The definite integral is the limit of the sum of integrals</p></li><li><p>Basic properties of integrals</p></li><li><p>Properties of definite integrals</p></li><li><p>Existence theorem of definite integrals</p></li><li><p>If the function is continuous on a closed interval, the definite integral exists</p></li><li><p>The integral exists if the function has only finitely many interrupted points on the closed interval</p></li><li><p>Variable finite integral</p></li><li><p>variable upper integral</p></li><li><p>variable lower integral</p></li><li><p>Variable upper bound indefinite integrals are derived from the upper bound of the integral to obtain the relationship between definite and indefinite integrals</p></li><li>Newton-Leibniz formula</li></ul><h3 id="Calculation-of-definite-and-indefinite-integrals"><a href="#Calculation-of-definite-and-indefinite-integrals" class="headerlink" title="Calculation of definite and indefinite integrals"></a>Calculation of definite and indefinite integrals</h3><ul><li>Basic integral formula</li><li><p>Basic integral method</p></li><li><p>Method of integration by integration (first permutation method)</p></li><li>Commutative integration method (second permutation method)</li><li>Several common permutation methods</li><li>Definite integral reduced integration method</li><li>The method of partial integration</li><li>Several definite integral formulas</li></ul><h3 id="Calculation-of-Inverse-Integrals"><a href="#Calculation-of-Inverse-Integrals" class="headerlink" title="Calculation of Inverse Integrals"></a>Calculation of Inverse Integrals</h3><ul><li><p>Anomalous integrals: limits of variable limit integrals</p></li><li><p>Inverse integrals on infinite intervals</p></li><li><p>Anomalous integrals of unbounded functions</p></li><li><p>Inverse integrals of parity functions on symmetric intervals</p></li><li>An important anomalous integral</li></ul><h3 id="Applications-of-definite-integrals"><a href="#Applications-of-definite-integrals" class="headerlink" title="Applications of definite integrals"></a>Applications of definite integrals</h3><ul><li>Area of a plane figure</li><li>Volume of a rotating body</li><li>Mean value of a function</li><li>Volume of a three-dimensional with known area of parallel sections on an interval</li><li>Arc length of a plane curve</li><li>Area of a rotating surface</li><li>Work done by variable forces</li><li>Hydrostatic pressure of liquid</li><li>Gravitational force</li><li>Center of mass (form center) of an object</li></ul><h2 id="Vector-algebra-and-spatially-analytic-sets"><a href="#Vector-algebra-and-spatially-analytic-sets" class="headerlink" title="Vector algebra and spatially analytic sets"></a>Vector algebra and spatially analytic sets</h2><h3 id="vector-algebra"><a href="#vector-algebra" class="headerlink" title="vector algebra"></a>vector algebra</h3><ul><li>The basic concept of vectors</li><li><p>Vector operations</p></li><li><p>addition and subtraction</p></li><li>Number multiplication</li><li><p>Product of quantities</p></li><li><p>Operation rules</p></li><li><p>Law of commutation</p></li><li><p>Distributive law</p></li><li><p>vector product</p></li><li>Mixed products</li></ul><h3 id="Spatial-analytic-geometry"><a href="#Spatial-analytic-geometry" class="headerlink" title="Spatial analytic geometry"></a>Spatial analytic geometry</h3><ul><li><p>Spatial planes and lines</p></li><li><p>Plane equations</p></li><li><p>General equation</p></li><li>Point method equation</li><li><p>Intercept type</p></li><li><p>Straight line equation</p></li><li><p>General formula</p></li><li>Symmetric</li><li><p>Parametric</p></li><li><p>Plane and line relationship</p></li><li>Plane to plane relationship</li><li>Relationship between a straight line and a line</li><li>Distance from point to surface</li><li><p>Point to line distance</p></li><li><p>Curved surface and space curve</p></li><li><p>Surface equation</p></li><li>Spatial curves</li><li>Common surfaces</li><li>Common quadratic surface equations</li></ul><h2 id="Multifunctional-Differentiation"><a href="#Multifunctional-Differentiation" class="headerlink" title="Multifunctional Differentiation"></a>Multifunctional Differentiation</h2><h2 id="Limits-and-continuity-of-multivariable-functions"><a href="#Limits-and-continuity-of-multivariable-functions" class="headerlink" title="Limits and continuity of multivariable functions"></a>Limits and continuity of multivariable functions</h2><ul><li><p>Concept of binary functions</p></li><li><p>Definition</p></li><li><p>Geometric meaning of a binary function</p></li><li><p>Limits and continuity of binary functions</p></li><li><p>The concept of heavy limit</p></li><li>The concept of continuous binary functions</li><li><p>Properties of multivariate continuous functions</p></li><li><p>sum and difference product quotient of all continuous functions</p></li><li>the most value theorem</li><li>Mediation theorem</li><li>All multi-source elementary functions are continuous everywhere in their defined regions</li></ul><h3 id="Differentiation-of-multifunctions"><a href="#Differentiation-of-multifunctions" class="headerlink" title="Differentiation of multifunctions"></a>Differentiation of multifunctions</h3><ul><li><p>Partial derivatives and full differentiation of binary functions</p></li><li><p>Definition of partial derivative</p></li><li>Geometric meaning of partial derivative</li><li>Full increment</li><li><p>Full differentiation</p></li><li><p>Definition</p></li><li>Necessary condition for the existence of full differentiation: existence of partial derivatives</li><li><p>Sufficient condition for the existence of full differentiation: partial derivatives are continuous</p></li><li><p>Partial derivatives and full differentiation of complex functions</p></li><li><p>Rules of derivatives of composite functions</p></li><li><p>Compound functions and multivariate functions</p></li><li><p>Multifunction and multifunction composite</p></li><li><p>Full differential form invariance</p></li><li><p>Higher order partial derivatives</p></li><li><p>Partial derivatives and full differentiation of implicit functions</p></li><li><p>Derivative of a univariate implicit function determined by an equation</p></li><li>Derivative of a binary implicit function determined by an equation</li><li>The derivative of a one-dimensional implicit function determined by a system of equations</li><li>Derivative of a binary implicit function determined by a system of equations</li></ul><h3 id="Limits-and-maxima"><a href="#Limits-and-maxima" class="headerlink" title="Limits and maxima"></a>Limits and maxima</h3><ul><li><p>Unconditional extrema</p></li><li><p>Extreme value points</p></li><li>Necessary conditions for the existence of extreme values</li><li><p>Sufficient conditions for the existence of extremes</p></li><li><p>Conditional extreme values</p></li><li><p>Lagrange’s multiplier method</p></li><li><p>Maximum value</p></li><li><p>Find the most value on a bounded closed region</p></li><li><p>find the value of the function of the extreme value point in the region</p></li><li>find the most value on the boundary of the region (conditional extrema), for simpler than that bounded function can be brought directly into</li><li><p>Compare all the extreme values in the above two steps</p></li><li><p>application problem, the extreme value point may only have a</p></li></ul><h3 id="Directional-derivatives-gradients-and-geometric-applications"><a href="#Directional-derivatives-gradients-and-geometric-applications" class="headerlink" title="Directional derivatives, gradients and geometric applications"></a>Directional derivatives, gradients and geometric applications</h3><ul><li>Directional derivatives and gradients</li><li>Geometric applications</li></ul><h2 id="Integration-of-multivariate-functions"><a href="#Integration-of-multivariate-functions" class="headerlink" title="Integration of multivariate functions"></a>Integration of multivariate functions</h2><h3 id="Recalculus"><a href="#Recalculus" class="headerlink" title="Recalculus"></a>Recalculus</h3><ul><li><p>double integrals</p></li><li><p>Definition and geometric meaning of double integral</p></li><li><p>Properties of double integrals</p></li><li><p>Comparison theorem</p></li><li>Valuation theorem</li><li><p>Median theorem</p></li><li><p>Calculation of double integrals</p></li><li><p>Calculation in Cartesian coordinates</p></li><li>Calculation in polar coordinates</li><li><p>Calculation using symmetry parity</p></li><li><p>Using symmetry of integral domain and parity of product function</p></li><li><p>Symmetry of variables</p></li><li><p>Definition</p></li><li>Nature: Same as double integral</li><li><p>Calculation</p></li><li><p>Right-angle coordinates</p></li><li><p>First one, then two</p></li><li><p>First two, then one</p></li><li><p>Column Coordinates</p></li><li>Spherical coordinates</li><li>Parity</li><li>Rotational symmetry</li></ul><h3 id="Curve-integral"><a href="#Curve-integral" class="headerlink" title="Curve integral"></a>Curve integral</h3><ul><li><p>Line integrals over arc lengths (first class line integrals)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation method</p></li><li><p>Direct method</p></li><li>Parity</li><li><p>Symmetry</p></li><li><p>Line integral over coordinates (second type of line integral)</p></li><li><p>Definition</p></li><li>Properties</li><li><p>Calculation method (plane)</p></li><li><p>Direct method</p></li><li>Green’s formula (reduced to a double integral)</li><li>Green’s formula for complementary lines</li><li><p>Line integral is independent of path</p></li><li><p>Calculation method (space)</p></li><li><p>Direct method</p></li><li>Stokes formula (reduced to a second class surface integral)</li></ul><h3 id="Surface-integral"><a href="#Surface-integral" class="headerlink" title="Surface integral"></a>Surface integral</h3><ul><li><p>Area fraction over area (first class)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation</p></li><li><p>Direct method</p></li><li>Parity</li><li><p>Symmetry</p></li><li><p>Area score for coordinates (second category)</p></li><li><p>Definition</p></li><li>Nature</li><li><p>Calculation</p></li><li><p>Direct method</p></li><li>Gauss’s formula (reduced to triple integral)</li><li>Gauss formula for complementary surfaces</li></ul><h3 id="Application-of-multiple-integrals"><a href="#Application-of-multiple-integrals" class="headerlink" title="Application of multiple integrals"></a>Application of multiple integrals</h3><h3 id="Dispersion-and-rotation"><a href="#Dispersion-and-rotation" class="headerlink" title="Dispersion and rotation"></a>Dispersion and rotation</h3><h2 id="Infinite-series"><a href="#Infinite-series" class="headerlink" title="Infinite series"></a>Infinite series</h2><h3 id="Constant-term-series"><a href="#Constant-term-series" class="headerlink" title="Constant term series"></a>Constant term series</h3><ul><li><p>Concepts and properties of series</p></li><li><p>Infinite series</p></li><li>Parts and series</li><li><p>Convergence, divergence</p></li><li><p>Criterion for convergence of positive series</p></li><li><p>Partial and series bounded</p></li><li>Comparative discriminant</li><li>Ratio discriminant</li><li>Root discriminant</li><li><p>Geometric series (isoperimetric series)</p></li><li><p>Interleaved series discriminant criterion</p></li><li><p>Leibniz discriminant criterion</p></li><li><p>Absolute convergence and properties</p></li></ul><h3 id="Power-series"><a href="#Power-series" class="headerlink" title="Power series"></a>Power series</h3><ul><li>Function term series, convergence domain, function</li><li><p>Power series</p></li><li><p>Abel’s theorem</p></li><li><p>Power series properties</p></li><li><p>Quadratic operations</p></li><li><p>Analytical properties</p></li><li><p>Power series expansion of functions (Taylor series / McLaughlin series)</p></li></ul><h3 id="Fourier-series"><a href="#Fourier-series" class="headerlink" title="Fourier series"></a>Fourier series</h3><ul><li>Fourier coefficients and Fourier series</li><li>Convergence of Fourier series (Direkley’s convergence theorem)</li><li><p>Expansion of a function with period 2l</p></li><li><p>Expansion on [-L. L</p></li><li>expansion of parity functions on [-L. L</li><li>expansion on [0. L] as sine or cosine</li></ul><h2 id="Differential-equations"><a href="#Differential-equations" class="headerlink" title="Differential equations"></a>Differential equations</h2><h3 id="First-order-differential-equation"><a href="#First-order-differential-equation" class="headerlink" title="First order differential equation"></a>First order differential equation</h3><ul><li><p>Differential equation concepts</p></li><li><p>Definition</p></li><li>Order of differential equations</li><li>General and special solutions</li><li><p>Initial conditions</p></li><li><p>Several special classes of first-order differential equations and their solutions</p></li><li><p>Separability of variables</p></li><li>Simultaneous differential equations</li><li>Linear differential equations</li><li>Bernoulli’s equation</li><li>Fully differential equations</li></ul><h3 id="Second-order-and-higher-order"><a href="#Second-order-and-higher-order" class="headerlink" title="Second order and higher order"></a>Second order and higher order</h3><ul><li><p>Linear differential equations</p></li><li><p>Linear chi-square differential equations of order n</p></li><li><p>Linearly correlated and linearly uncorrelated</p></li><li><p>Properties of differential equations</p></li><li><p>Superposition of solutions of linear equations of the chi-square</p></li><li>Generalized solution structure of quadratic linear equations</li><li>Structure of general solutions of non-sublinear equations</li><li>Principle of superposition</li><li>The method and formulas for solving linear chi-square equations with constant coefficients of the second order</li><li>The general solution method and formula for some special free term second-order linear chi-square equations with constant coefficients</li></ul><p>*XMind - Trial Version</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Today, I finally got through the knowledge of higher mathematics, but because the whole process is long and there are many knowledge points, they are all fragmented and not systematic, so I thought I would take this opportunity to generally sort out all the knowledge points once.&lt;/p&gt;</summary>
    
    
    
    <category term="Math" scheme="https://sunra.top/en/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sunra.top/en/posts/39443/"/>
    <id>https://sunra.top/en/posts/39443/</id>
    <published>2022-01-30T09:14:47.000Z</published>
    <updated>2023-06-07T12:40:51.470Z</updated>
    
    <content type="html"><![CDATA[<p>I recently wanted to look at computer graphics, but I saw that the course requirements have linear algebra as a pre-requisite, so I re-read some of them, and so far I have looked at properties of determinants, matrices, vectors and systems of equations.<br>The main purpose of this blog is not to summarize the properties of matrices one by one, but to sort out a question I have been having during the review process, which is, why these things are spoken together, what is the relationship between them, and to slightly combine some ideas from the rendering principles, how matrices are applied to them.</p><span id="more"></span><h2 id="Some-understanding-of-the-relationship-between-series-matrices-vectors-and-systems-of-equations"><a href="#Some-understanding-of-the-relationship-between-series-matrices-vectors-and-systems-of-equations" class="headerlink" title="Some understanding of the relationship between series, matrices, vectors and systems of equations"></a>Some understanding of the relationship between series, matrices, vectors and systems of equations</h2><ul><li>A row equation is a value, he is a number, a scalar, while a matrix is a table.</li><li>The value of the row equation can be regarded as a property of the matrix, and some properties of the matrix can be judged by the calculation of the value of the row equation.</li><li>A matrix is an m*n table, but if each column is viewed as a column vector, then the entire matrix can be viewed as a row vector, or a vector group.</li><li>Both matrices and vectors can be an expression of a system of equations. By converting a system of equations into a matrix or vector representation, there are many properties that can help us simplify the computation.</li></ul><h2 id="Matrix-vs-rendering-pipeline"><a href="#Matrix-vs-rendering-pipeline" class="headerlink" title="Matrix vs. rendering pipeline"></a>Matrix vs. rendering pipeline</h2><p>During the running of the game, we need to change the points in the model into pixel points on the screen, which involves transforming the coordinates of the points from the model coordinate system to the world coordinate system, and then to the camera’s coordinate system, etc. A series of transformation of the coordinate space, in fact, is the transformation of the coordinates, (x1, y1, z1) into (x2, y2, z2), this transformation is a system of equations three ternary A system of equations consisting of a single equation.<br>That is, we can turn the system of equations for coordinate transformation into the multiplication of matrices.<br>The advantage of this is that one is that it is more convenient to represent matrices, and the second is that we have many means to simplify the multiplication of matrices, while sometimes we need to transform each other between model spaces, and if we use a system of equations, we have to recalculate a system of equations, but if we use a matrix, then it is straightforward to use the inverse matrix, and if you are an orthogonal matrix, then you can even use the transpose matrix directly.</p><h2 id="Some-properties-of-and-relationships-between-series-matrices-vectors-and-systems-of-equations"><a href="#Some-properties-of-and-relationships-between-series-matrices-vectors-and-systems-of-equations" class="headerlink" title="Some properties of and relationships between series, matrices, vectors, and systems of equations"></a>Some properties of and relationships between series, matrices, vectors, and systems of equations</h2><h3 id="Matrix-expressions"><a href="#Matrix-expressions" class="headerlink" title="Matrix expressions"></a>Matrix expressions</h3><p>A row equation is a number that is an algebraic sum of products of elements in different rows and columns.</p><p>One thing to note is that the number of rows and columns of the determinant is the same, both are n. Then the determinant is called the nth order determinant.</p><p>For determinants of order three and below, we can directly use the diagonal method to find the value of the determinant, for determinants of order three and above, we need to apply the formula</p><script type="math/tex; mode=display">\initial{vmatrix}a_{11} & a_{12} & ... & a_{1n} \\a_{21} & a_{22} & ... & a_{2n} \\... & ... & ... & ... \\a_{n1} & a_{n2} & ... & a_{nn} \\\end{vmatrix}=\sum_{r=1}^n(-1)^{r(j_1j_2...j_n)}a_{1j_1}a_{2j_2}...a_{nj_n}</script><p>where <code>r(j1j2..jn)</code> denotes the inverse order of <code>j1j2..jn</code> (a larger number in front of a smaller number is said to constitute an inverse order, and the total number of inverse orders in an arrangement is called the inverse order of the arrangement), and an even inverse order is called an even arrangement, and an odd inverse order is called an odd arrangement.</p><h4 id="properties-of-the-row-equation"><a href="#properties-of-the-row-equation" class="headerlink" title="properties of the row equation"></a>properties of the row equation</h4><ul><li>The value of the transposed determinant remains unchanged</li><li>Two rows (or two columns) swap positions and the value of the determinant is 0.<ul><li>Corollary 1: Two rows or two columns are identical, the determinant value is 0</li></ul></li></ul><blockquote><p>Whether the value of the series is zero is a very important property, which is closely related to whether the system of equations has a solution, whether the system of vectors is linearly independent, etc.</p></blockquote><ul><li>A row or column has a common factor k. You can put k outside the notation of the determinant, i.e., multiplying a number k by a determinant is equivalent to multiplying a row of it by k.<ul><li>Corollary 1: A row or column value is 0, then the determinant value is 0</li><li>Corollary 2: The elements of two rows (or two columns) correspond to each other proportionally, and the value of the determinant is 0</li></ul></li><li>A row or column can be the sum of two elements, then it can be split into two determinants and added together</li></ul><script type="math/tex; mode=display">\initial{vmatrix}a_1 + b_1 & a_2 + b_2 & a_3 + b_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}=\initial{vmatrix}a_1 & a_2 & a_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}+\initial{vmatrix}b_1 & b_2 & b_3 \\c_1 & c_2 & c_3 \\d_1 & d_2 & d_3\end{vmatrix}</script><ul><li>k times of a row (or column) is added to another row (or column), the value of the determinant remains unchanged</li></ul><script type="math/tex; mode=display">\initial{vmatrix}a_1 & a_2 & a_3 \\b_1 & b_2 & b_3 \\c_1 & c_2 & c_3\end{vmatrix}=\initial{vmatrix}a_1 & a_2 & a_3 \\b_1 + ka_1 & b_2 + ka_2 & b_3 + ka_3c_1 & c_2 & c_3\end{vmatrix}</script><h4 id="Row-by-row-or-column-by-column-expansion-formula-Laplace-expansion"><a href="#Row-by-row-or-column-by-column-expansion-formula-Laplace-expansion" class="headerlink" title="Row-by-row (or column-by-column) expansion formula (Laplace expansion)"></a>Row-by-row (or column-by-column) expansion formula (Laplace expansion)</h4><p>The nth-order determinant is called the remainder of <code>a_ij</code>, denoted as <code>M_ij</code>, by crossing out all the elements of row i and column j of <code>a_ij</code> in the nth-order determinant.</p><p>Call <code>(-1)^(i+j)M_ij</code> the algebraic remainder equation of <code>a_ij</code>, denoted as <code>A_ij</code>,i.e:</p><script type="math/tex; mode=display">A_{ij} = (-1)^{i + j}M_{ij}</script><p><strong>Theorem 1</strong>: A determinant of order n is equal to the sum of the products of the elements of any row of it and its corresponding algebraic remainder equation</p><script type="math/tex; mode=display">\initial{vmatrix}A\end{vmatrix}=a_{i1}A_{i1} + a_{i2}A_{i2} + ... + a_{ik}A_{ik}=\sum_{k=1}^na_{ik}A_{ik}, i = 1, 2, 3, ..., n</script><script type="math/tex; mode=display">\initial{vmatrix}A\end{vmatrix}=a_{1i}A_{1i} + a_{2i}A_{2i} + ... + a_{ki}A_{ki}=\sum_{k=1}^na_{ki}A_{ki}, i = 1, 2, 3, ..., n</script><p>The first one becomes the row-by-row expansion of the determinant, and the second one is called the column-by-column expansion.</p><p><strong>Theorem 2</strong>: The sum of the algebraic remainder of any row of the determinant with the elements of another row is 0</p><script type="math/tex; mode=display">\sum_{k=1}^na_{ik}A_{jk} = 0, i j</script><p>There are also several special cases:</p><ul><li><p>The value of the upper (lower) trigonometric determinant is the product of the diagonals</p></li><li><p>The value of the determinant of the subdiagonal is then</p></li></ul><script type="math/tex; mode=display">(-1)^{\frac {n(n-1)}2}a_{1n}a_{2,n-1}...a_{an1}</script><ul><li>If A and B are matrices of order m and n, respectively, then<script type="math/tex; mode=display">\initial{vmatrix}A & * \\0 & B\end{vmatrix}=\initial{vmatrix}A & 0 \\* & B\end{vmatrix}=\initial{vmatrix}A\end{vmatrix}*\initial{vmatrix}B\end{vmatrix},\initial{vmatrix}* & A \\B & 0\end{vmatrix}=\initial{vmatrix}0 & A \\B & *\end{vmatrix}=(-1)^{mn}\initial{vmatrix}A\end{vmatrix}*\initial{vmatrix}B\end{vmatrix}</script></li></ul><ul><li>Van der Munn determinant</li></ul><script type="math/tex; mode=display">\initial{vmatrix}1 & 1 & ... & 1 \\x_1 & x_2 & ... & x_n ...x_1^2 & x_2^2 & ... & x_n^2... & ... & ... & ... \\x_1^{n-1} & x_2^{n-1} & .... & x_n^{n-1}\end{vmatrix}= \prod_{1 \le j \le i \le n}(x_i - x_j)</script><h4 id="Kramer’s-Law"><a href="#Kramer’s-Law" class="headerlink" title="Kramer’s Law"></a>Kramer’s Law</h4><p>If the coefficients of a system of non-simultaneous linear equations consisting of n equations with n unknowns have determinant values that are not zero, then the system of equations has a unique solution, and</p><script type="math/tex; mode=display">x_i =\frac{  \initial{vmatrix}  A_i  \end{vmatrix}}{    \initial{vmatrix}  A  \end{vmatrix}},i = 1, 2, 3, ..., n</script><p>where Ai is the determinant formed by replacing the elements of the i<strong> column</strong> in |A| with the constant terms at the right end of the system of equations</p><p><strong>Corollary</strong>: A system of n equations n unknown quantities consisting of a system of linear equations with coefficients determinant|A| ! = 0 is sufficient for the system of equations to have a unique zero solution (since the constants at the right end of the system of equations are all 0, so |Ai| is 0, then all xi is 0).</p><p>Conversely, if there is a non-zero solution, then |A| = 0.</p><h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><h3 id="vectors"><a href="#vectors" class="headerlink" title="vectors"></a>vectors</h3><h3 id="System-of-equations"><a href="#System-of-equations" class="headerlink" title="System of equations"></a>System of equations</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;I recently wanted to look at computer graphics, but I saw that the course requirements have linear algebra as a pre-requisite, so I re-read some of them, and so far I have looked at properties of determinants, matrices, vectors and systems of equations.&lt;br&gt;The main purpose of this blog is not to summarize the properties of matrices one by one, but to sort out a question I have been having during the review process, which is, why these things are spoken together, what is the relationship between them, and to slightly combine some ideas from the rendering principles, how matrices are applied to them.&lt;/p&gt;</summary>
    
    
    
    <category term="Math" scheme="https://sunra.top/en/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>Linear Table Basics Summary</title>
    <link href="https://sunra.top/en/posts/16728/"/>
    <id>https://sunra.top/en/posts/16728/</id>
    <published>2021-08-25T00:33:01.000Z</published>
    <updated>2023-06-07T12:40:51.470Z</updated>
    
    <content type="html"><![CDATA[<p>These two weeks took out the university’s data structures and algorithms again to look at the second chapter of the linear table part, and some new gains, I think, to summarize.</p><span id="more"></span><h2 id="Basic-concepts-of-data-structures"><a href="#Basic-concepts-of-data-structures" class="headerlink" title="Basic concepts of data structures"></a>Basic concepts of data structures</h2><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>Data is a carrier of information, a collection of numbers, characters and all symbols that can be entered into a computer and recognized and processed by a computer program to describe the properties of objective things. Data is the raw material for computer program processing.</p><h3 id="Data-elements"><a href="#Data-elements" class="headerlink" title="Data elements"></a>Data elements</h3><p>A <strong>data element</strong> is the basic unit of data and is usually considered and treated as a whole. A data element can be composed of several <strong>data items</strong>, and <strong>data items are the smallest indivisible units</strong> that make up a data element. For example, a student record is a data element that consists of data items such as student number, name, etc.</p><h3 id="Data-objects"><a href="#Data-objects" class="headerlink" title="Data objects"></a>Data objects</h3><p>A data object is a collection of data elements with the same properties and is a subset of the data. For example, an integer object is a set N={0,1,2,…}</p><h3 id="Data-type"><a href="#Data-type" class="headerlink" title="Data type"></a>Data type</h3><p>A data type is a generic term for a collection of values and a set of operations defined on this collection.</p><ul><li>Atomic types: Data types whose values are indivisible</li><li>Structure type: A data type whose values can be subdivided into components (components)</li><li>Abstract data types: abstract data organization and the operations associated with them</li></ul><h3 id="Data-structure"><a href="#Data-structure" class="headerlink" title="Data structure"></a>Data structure</h3><p>A data structure is a collection of data elements that have one or more specific relationships with each other. In any problem, data elements do not exist in isolation, they have some relationship with each other, and this relationship between data elements is called structure.</p><p><strong>Data structure consists of three aspects: logical structure, storage structure and operations on data</strong>.</p><p>The logical structure of the data and the storage structure are two inseparable aspects.<strong> The design of an algorithm depends on the chosen logical structure, and the implementation of the algorithm, on the storage structure used</strong>.</p><h4 id="Logical-Structure"><a href="#Logical-Structure" class="headerlink" title="Logical Structure"></a>Logical Structure</h4><p>Logical structure refers to the logical relationship between data elements, i.e., describing the data in terms of logical relationships. It is independent of the storage structure of the data and is computer independent.</p><p>The logical structure of data is divided into linear and non-linear structures. Linear table is a typical linear structure. Sets, trees, and graphs are typical nonlinear structures.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1629936472/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210826080632_xmnhbt.png" alt=""></p><h4 id="storage-structure"><a href="#storage-structure" class="headerlink" title="storage structure"></a>storage structure</h4><p>The storage structure is the representation of the data structure in the computer, which also becomes the physical structure.</p><p>The main ones are sequential storage, chained storage, indexed storage and hash storage.</p><h2 id="Basic-concepts-of-linear-tables"><a href="#Basic-concepts-of-linear-tables" class="headerlink" title="Basic concepts of linear tables"></a>Basic concepts of linear tables</h2><h3 id="Definition-of-linear-table"><a href="#Definition-of-linear-table" class="headerlink" title="Definition of linear table"></a>Definition of linear table</h3><p>A linear table is a <strong>finite sequence</strong> of n data elements with <strong>same data type</strong>.</p><p>Characteristics of linear tables:</p><ul><li>Limited number of elements in the table</li><li>The elements in a table are logically sequential, and the elements in a table have their own order of precedence.</li><li>The elements in the table are all data elements, and each element is a single element.</li><li>The elements in the table all have the same data type, which means that each element occupies the same size of storage space.</li><li>The elements of the table are abstract in nature, i.e., the logical relationships between elements are discussed without regard to what exactly the elements represent.</li></ul><blockquote><p><strong>Linear table is a logical structure that represents one-to-one adjacency between elements. </strong></p><p><strong>Sequential tables and chained tables represent storage structures. </strong></p></blockquote><h2 id="A-few-simple-but-clever-algorithmic-ideas-seen"><a href="#A-few-simple-but-clever-algorithmic-ideas-seen" class="headerlink" title="A few simple but clever algorithmic ideas seen"></a>A few simple but clever algorithmic ideas seen</h2><h3 id="First"><a href="#First" class="headerlink" title="First"></a>First</h3><p>Delete all elements whose values are between the given values s and t (containing s and t, requiring s&lt;t) from the sequence table. If s or t is not reasonable or the sequence table is empty, an error message is displayed and the run is exited.</p><p>Algorithm idea: Scan the order table L from front to back, record the number of elements whose values are between s and t with k (initially k=0), and for the currently scanned element, if its value is no longer between s and t, move forward k positions, otherwise perform k++. Due to this, each element that is not between s and t is moved only once.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Del_s_t</span><span class="params">(SqlList &amp;L, ElemType s, ElemType t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length= <span class="number">0</span> || s &gt;= t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] &gt;= s &amp;&amp; L.data[i] &lt;= t) &#123;</span><br><span class="line">            k++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L.data[i - k] = L.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length -= k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this algorithm, i denotes the nodes currently traversed and k denotes the number of nodes to be deleted between 0 - i. This means that between 0 and (i - k) are the nodes to be kept and between (i - k) and i are the points to be deleted.</p><p>This relationship, using mathematical induction, starts when i equals 0, and in the next traversal to each node the entire relationship is guaranteed, that finally when i is L.length, the final array of reserved nodes should be 0 to L.length-k</p><p>In fact, you can also use k to indicate the number of nodes to be reserved, then this code becomes</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Del_s_t</span><span class="params">(SqlList &amp;L, ElemType s, ElemType t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length= <span class="number">0</span> || s &gt;= t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] &lt; s || L.data[i] &gt; t) &#123;</span><br><span class="line">            L.data[k++] = L.data[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h3><p>Let n integers be stored into a one-bit array R. Design an algorithm that is as efficient as possible in both time and space. Shift the sequence stored in R cyclically left by p positions, i.e., the data in R changes from (X0, X1, … , XR) to (Xp, Xp+1, …. XR, X0, X1, … , Xp - 1)</p><p>Algorithmic idea: Consider this problem as transforming the array ab into ba, then first invert a to get a-inverse b, then invert b to get a-inverse b-inverse, and finally invert the entire a-inverse b-inverse to get ba.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reverse</span><span class="params">(<span class="type">int</span> R[], <span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, temp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (to - from + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        temp = R[from + i];</span><br><span class="line">        R[from + i] = R[to - i];</span><br><span class="line">        R[to - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Converse</span><span class="params">(<span class="type">int</span> R[], <span class="type">int</span> n, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Reverse</span>(R, <span class="number">0</span>, p - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Reverse</span>(R, p, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Reverse</span>(R, <span class="number">0</span>, n - <span class="number">1</span>);h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-third-one"><a href="#The-third-one" class="headerlink" title="The third one"></a>The third one</h3><p>Let an ascending sequence S be of length L. The number at the position [L / 2] is called the median of S. For example, the median of an ascending sequence S1 (11, 13, 15, 17, 19) is 15. For example, if the ascending sequence S1 (11,13,15,17,19), then its median is 15. The median of two sequences is the median of the ascending sequence containing all their elements. For example, if S2 (2,4,6,8,20), then the median of S1 and S2 is 11. There are two equal ascending sequences A and B. Design a time and space efficient algorithm to find the median of A and B.</p><p>Algorithm idea 1: We can easily think of the first algorithm, because A and B are in ascending order, so set two pointers i, j, initially pointing to the first element of A and B. Then each time we compare A[i] and B[j], if A[i] is small, then i++, if B[j] is small, then j++, when comparing to the first A.length times, at this time the smaller is the median of A and B. The time complexity of this algorithm is O(n)</p><p>Algorithm idea 2: You can use the dichotomy method to improve efficiency. The procedure for finding the median of two ascending sequences A and B, set as a and b, respectively, is as follows:</p><ul><li>If a=b, then a or b is the median and the result is returned.</li><li>If a &lt; b, the smaller half of A is discarded, while the larger half of B is discarded, requiring that the two discards be of equal length.</li><li>If a &gt; b, then discard the larger half of A while discarding the smaller half of B. The length of the two discards is required to be equal.</li></ul><p>In retaining the two ascending sequences, the above three processes are repeated until both sequences contain only one element position, and the smaller one is the median sought.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">M_Search</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> B, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s1 = <span class="number">0</span>, d1 = n - <span class="number">1</span>, m1, s2 = <span class="number">0</span>, d2 = n - <span class="number">1</span>, m2;</span><br><span class="line">    <span class="keyword">while</span>(s1 != d1 || s2 != d2) &#123;</span><br><span class="line">        m1 = (s1 + d1) / <span class="number">2</span>;</span><br><span class="line">        m2 = (s2 + d2) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[m1]= B[m2]) &#123;</span><br><span class="line">            <span class="keyword">return</span> A[m1]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (A[m1] &lt; B[m2]) &#123;</span><br><span class="line">            s1 = (s1 + d1) % <span class="number">2</span>= <span class="number">0</span> ? m1 : m1 + <span class="number">1</span>;</span><br><span class="line">            d2 = m2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            d1 = m1;</span><br><span class="line">            s2 = (s2 + d2) % <span class="number">2</span>= <span class="number">0</span> ? m2 : m2 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> A[s1] &lt; B[s2] ? A[s1] : B[s2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;These two weeks took out the university’s data structures and algorithms again to look at the second chapter of the linear table part, and some new gains, I think, to summarize.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>In-depth Babel Principle Series (II) Parser Code Structure Introduction</title>
    <link href="https://sunra.top/en/posts/5517/"/>
    <id>https://sunra.top/en/posts/5517/</id>
    <published>2021-06-28T00:09:12.000Z</published>
    <updated>2023-06-07T12:40:51.470Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous article, when analyzing the Babel compilation process, we mentioned that Babel converts JS code into ASTs (Abstract Syntax Trees). This behavior is a generic one, no matter what programming language parses the source code into an AST, <strong>AST is not specific to Babel, let alone to JS</strong>.</p><p>Why do we need to do this? The original JS file is incomprehensible to the computer, and it is difficult for the computer to modify the JS code directly, but by converting it to an AST, which is essentially a set of objects that represent the structure of the program, we can indirectly modify the code by modifying the objects. AST to generate bytecode.</p><p>Parser’s process is divided into two steps, the first step, lexical analysis, which is the finite state machine in the compilation principle, to split a piece of code into individual Tokens, and the second step, syntax analysis, to convert the Token array, into an AST tree.</p><p>This time I’ll look at<a href="https://github.com/babel/babel/tree/main/packages/babel-parser">源码</a>The process is briefly analyzed.</p><span id="more"></span><p>First, take a look at the directory structure of Babel-Parser</p><p>There are four main folders, util, plugins, tokeinzer, parser</p><h2 id="Entrance"><a href="#Entrance" class="headerlink" title="Entrance"></a>Entrance</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">input: string, options?: Options</span>): <span class="title class_">File</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (options?.<span class="property">sourceType</span>= <span class="string">&quot;unambiguous&quot;</span>) &#123;</span><br><span class="line">    options = &#123;</span><br><span class="line">      ...options,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      options.<span class="property">sourceType</span> = <span class="string">&quot;module&quot;</span>;</span><br><span class="line">      <span class="keyword">const</span> parser = <span class="title function_">getParser</span>(options, input);</span><br><span class="line">      <span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//Omit some other codes</span></span><br><span class="line">        </span><br><span class="line">      <span class="keyword">return</span> ast;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (moduleError) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        options.<span class="property">sourceType</span> = <span class="string">&quot;script&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getParser</span>(options, input).<span class="title function_">parse</span>();</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> moduleError;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getParser</span>(options, input).<span class="title function_">parse</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The core of this code is to get a parser through the <code>getParser</code> method, and then use the obtained parser to parse.</p><p>Let’s look at this <code>getParser</code> again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getParser</span>(<span class="params">options: ?Options, input: string</span>): <span class="title class_">Parser</span> &#123;</span><br><span class="line">  <span class="comment">// Get Parser</span></span><br><span class="line">  <span class="keyword">let</span> cls = <span class="title class_">Parser</span>;</span><br><span class="line">  <span class="comment">// If a plugin is declared in options, first check whether the way the plugin is declared is reasonable, and if so, enable the plugin function</span></span><br><span class="line">  <span class="comment">// Yes, enable the plug-in function, Parser&#x27;s plug-ins are built-in, and you can only choose whether to enable them through the configuration</span></span><br><span class="line">  <span class="keyword">if</span> (options?.<span class="property">plugins</span>) &#123;</span><br><span class="line">    <span class="title function_">validatePlugins</span>(options.<span class="property">plugins</span>);</span><br><span class="line">    cls = <span class="title function_">getParserClass</span>(options.<span class="property">plugins</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">cls</span>(options, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">parserClassCache</span>: &#123; [<span class="attr">key</span>: string]: <span class="title class_">Class</span>&lt;<span class="title class_">Parser</span>&gt; &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get a Parser class with plugins applied. */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getParserClass</span>(<span class="params">pluginsFromOptions: PluginList</span>): <span class="title class_">Class</span>&lt;<span class="title class_">Parser</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// mixinPluginNames is the name of all built-in plugins</span></span><br><span class="line">  <span class="keyword">const</span> pluginList = mixinPluginNames.<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span></span><br><span class="line">    <span class="title function_">hasPlugin</span>(pluginsFromOptions, name),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache the current portfolio of plugins</span></span><br><span class="line">  <span class="keyword">const</span> key = pluginList.<span class="title function_">join</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> cls = parserClassCache[key];</span><br><span class="line">  <span class="keyword">if</span> (!cls) &#123;</span><br><span class="line">    cls = parser;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> pluginList) &#123;</span><br><span class="line">      cls = mixinPlugins[plugin](cls);</span><br><span class="line">    &#125;</span><br><span class="line">    parserClassCache[key] = cls;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Parser-parsing-process"><a href="#Parser-parsing-process" class="headerlink" title="Parser parsing process"></a>Parser parsing process</h2><p>By now, we figured out the logic of the entry file, which is mainly two parts, the first part declares the Parser, and the second part, if the plug-in is configured, opens the plug-in function for the Parser.</p><p>Then let’s continue to look at Parser’s logic</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parser</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatementParser</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options: ?Options, input: string</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">parse</span>(): <span class="title class_">File</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">enterInitialScopes</span>();</span><br><span class="line">    <span class="keyword">const</span> file = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    <span class="keyword">const</span> program = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">nextToken</span>();</span><br><span class="line">    file.<span class="property">errors</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseTopLevel</span>(file, program);</span><br><span class="line">    file.<span class="property">errors</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">errors</span>;</span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The constructor is all about preparatory work, so don’t pay attention to it first, the main logic is still in this parse function</p><h3 id="1-enterInitialScopes"><a href="#1-enterInitialScopes" class="headerlink" title="1.enterInitialScopes"></a>1.enterInitialScopes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">enterInitialScopes</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> paramFlags = <span class="variable constant_">PARAM</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasPlugin</span>(<span class="string">&quot;topLevelAwait&quot;</span>) &amp;&amp; <span class="variable language_">this</span>.<span class="property">inModule</span>) &#123;</span><br><span class="line">      paramFlags |= <span class="variable constant_">PARAM_AWAIT</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="title function_">enter</span>(<span class="variable constant_">SCOPE_PROGRAM</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prodParam</span>.<span class="title function_">enter</span>(paramFlags);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This step is to initialize the root node at the beginning, along with the corresponding parameters and scopes</p><h3 id="2-startNode"><a href="#2-startNode" class="headerlink" title="2. startNode"></a>2. startNode</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">startNode&lt;<span class="attr">T</span>: <span class="title class_">NodeType</span>&gt;(): T &#123;</span><br><span class="line">    <span class="comment">// $FlowIgnore</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">start</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">startLoc</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-nextToken"><a href="#3-nextToken" class="headerlink" title="3. nextToken"></a>3. nextToken</h3><p>This part is the focus of the parsing, this part of the code will be more complex, the parsing process will have to parse backwards one character at a time, the use of finite state machine state transfer to determine the different states, and finally in reaching a certain state, to produce a token.</p><p>If the number 123456 is read as a 6, a numeric token is generated if it is followed by a space or a semicolon.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">nextToken</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="comment">// curContext = this.state.context[this.state.context.length - 1];</span></span><br><span class="line">    <span class="keyword">const</span> curContext = <span class="variable language_">this</span>.<span class="title function_">curContext</span>();</span><br><span class="line">    <span class="comment">// The internal loop will keep skipping all spaces, such as spaces, tabs, etc.</span></span><br><span class="line">    <span class="keyword">if</span> (!curContext.<span class="property">preserveSpace</span>) <span class="variable language_">this</span>.<span class="title function_">skipSpace</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">start</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isLookahead</span>) <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">startLoc</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">curPosition</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span> &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">eof</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curContext= ct.<span class="property">template</span>) &#123;</span><br><span class="line">      <span class="comment">// Read the template string Token</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">readTmplToken</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Read a normal Token, codePointAtPos returns the ASCII code of the character at the pos position</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getTokenFromCode</span>(<span class="variable language_">this</span>.<span class="title function_">codePointAtPos</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-parseTopLevel"><a href="#4-parseTopLevel" class="headerlink" title="4. parseTopLevel"></a>4. parseTopLevel</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseTopLevel</span>(<span class="attr">file</span>: N.<span class="property">File</span>, <span class="attr">program</span>: N.<span class="property">Program</span>): N.<span class="property">File</span> &#123;</span><br><span class="line">    file.<span class="property">program</span> = <span class="variable language_">this</span>.<span class="title function_">parseProgram</span>(program);</span><br><span class="line">    file.<span class="property">comments</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">comments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">tokens</span>) file.<span class="property">tokens</span> = <span class="title function_">babel7CompatTokens</span>(<span class="variable language_">this</span>.<span class="property">tokens</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">finishNode</span>(file, <span class="string">&quot;File&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Here the call to <code>parseProgram</code> will continue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseProgram</span>(</span><br><span class="line">    <span class="title class_">Program</span>,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span> = tt.<span class="property">eof</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="title class_">SourceType</span> = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">sourceType</span>,</span><br><span class="line">  ): N.<span class="property">Program</span> &#123;</span><br><span class="line">    program.<span class="property">sourceType</span> = sourceType;</span><br><span class="line">    program.<span class="property">interpreter</span> = <span class="variable language_">this</span>.parseInterpreterDirective();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseBlockBody</span>(program, <span class="literal">true</span>, <span class="literal">true</span>, end);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">inModule</span> &amp;&amp;</span><br><span class="line">      !<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">allowUndeclaredExports</span> &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>.<span class="property">size</span> &gt; <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> [name] <span class="keyword">of</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> pos = <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>.<span class="title function_">get</span>(name);</span><br><span class="line">        <span class="comment">// $FlowIssue</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">raise</span>(pos, <span class="title class_">Errors</span>.<span class="property">ModuleExportUndefined</span>, name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">finishNode</span>&lt;N.<span class="property">Program</span>&gt;(program, <span class="string">&quot;Program&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Call <code>parseBlockBody</code> again</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseBlockBody</span>(</span><br><span class="line">    <span class="attr">node</span>: N.<span class="property">BlockStatementLike</span>,</span><br><span class="line">    <span class="attr">allowDirectives</span>: ?boolean,</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = (node.<span class="property">body</span> = []);</span><br><span class="line">    <span class="keyword">const</span> directives = (node.<span class="property">directives</span> = []);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">      body,</span><br><span class="line">      allowDirectives ? directives : <span class="literal">undefined</span>,</span><br><span class="line">      topLevel,</span><br><span class="line">      end,</span><br><span class="line">      afterBlockParse,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Continue to call <code>parseBlockOrModuleBlockBody</code> and eventually enter recursion, calling nextToken recursively through the parserStatement, next and other functions until the string passed in by the parser method at the beginning is completely parsed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">    <span class="attr">body</span>: N.<span class="property">Statement</span>[],</span><br><span class="line">    <span class="attr">directives</span>: ?(N.<span class="property">Directive</span>[]),</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldStrict = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strict</span>;</span><br><span class="line">    <span class="keyword">let</span> hasStrictModeDirective = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> parsedNonDirective = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable language_">this</span>.<span class="title function_">match</span>(end)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stmt = <span class="variable language_">this</span>.<span class="title function_">parseStatement</span>(<span class="literal">null</span>, topLevel);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (directives &amp;&amp; !parsedNonDirective) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidDirective</span>(stmt)) &#123;</span><br><span class="line">          <span class="keyword">const</span> directive = <span class="variable language_">this</span>.<span class="title function_">stmtToDirective</span>(stmt);</span><br><span class="line">          directives.<span class="title function_">push</span>(directive);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            !hasStrictModeDirective &amp;&amp;</span><br><span class="line">            directive.<span class="property">value</span>.<span class="property">value</span>= <span class="string">&quot;use strict&quot;</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            hasStrictModeDirective = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parsedNonDirective = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// clear strict errors since the strict mode will not change within the block</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strictErrors</span>.<span class="title function_">clear</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      body.<span class="title function_">push</span>(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (afterBlockParse) &#123;</span><br><span class="line">      afterBlockParse.<span class="title function_">call</span>(<span class="variable language_">this</span>, hasStrictModeDirective);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldStrict) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>A simple diagram to represent, roughly, is this, omitting many details</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625014272/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210630085034_nq6abs.png" alt=""></p><h2 id="nextToken-method-analysis"><a href="#nextToken-method-analysis" class="headerlink" title="nextToken method analysis"></a>nextToken method analysis</h2><h3 id="readTmplToken-reads-the-template-string"><a href="#readTmplToken-reads-the-template-string" class="headerlink" title="readTmplToken reads the template string"></a>readTmplToken reads the template string</h3><p>This is the state machine I analyzed from the code</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625100732/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085141_jdhpvd.png" alt=""></p><p>Let’s try it and see the results</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625101028/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085657_sxvzrs.png" alt=""></p><h3 id="getTokenFromCode"><a href="#getTokenFromCode" class="headerlink" title="getTokenFromCode"></a>getTokenFromCode</h3><p>This function is not complex in terms of logic, but the conditions are particularly divided, because it is necessary to adapt a variety of different characters to determine, simply show the following:</p><h4 id="charcodes"><a href="#charcodes" class="headerlink" title="charcodes"></a>charcodes</h4><p>The various charCodes used in the code are the contents of another repository, here is the link: <a href="https://github.com/xtuc/charcodes/blob/master/packages/charcodes/src/index.js">https://github.com/xtuc/charcodes/blob/master/packages/charcodes/src/index.js</a></p><h4 id="TokenType"><a href="#TokenType" class="headerlink" title="TokenType"></a>TokenType</h4><p>And the parameters of finishToken are actually a built-in good TokenType, such as <code>tt.parentL</code> which is actually <code>parenL: new TokenType(&quot;(&quot;, &#123; beforeExpr, startsExpr &#125;),</code></p><p>These TokenTypes are all of babel’s built-in token types, and there are two sources of TokenTypes, one is built into the Tokenizer and the other is provided by the parser plugin, but as we said, the parser plugin is just an on/off switch for the user, so essentially, all of the TokenType is essentially built into babel-praser to begin with.</p><p>There are four main categories, one is the variable type, such as number, string, one is the symbol, such as brackets, colon and so on, one is the expression, such as equal to, greater than, and finally is the keyword, such as switch, case, etc.</p><h4 id="Function-Logic"><a href="#Function-Logic" class="headerlink" title="Function Logic"></a>Function Logic</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getTokenFromCode</span>(<span class="attr">code</span>: number): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">      <span class="comment">// The interpretation of a dot depends on whether it is followed</span></span><br><span class="line">      <span class="comment">// by a digit or another two dots.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">dot</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">readToken_dot</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Punctuation tokens.</span></span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">leftParenthesis</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">parenL</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">rightParenthesis</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">parenR</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">semicolon</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">semi</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">comma</span>:</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Dozens of conditions are omitted here</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isIdentifierStart</span>(code)) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">readWord</span>(code);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="variable language_">this</span>.<span class="title function_">raise</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>,</span><br><span class="line">      <span class="title class_">Errors</span>.<span class="property">InvalidOrUnexpectedToken</span>,</span><br><span class="line">      <span class="title class_">String</span>.<span class="title function_">fromCodePoint</span>(code),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="parseTopLevel-method-analysis"><a href="#parseTopLevel-method-analysis" class="headerlink" title="parseTopLevel method analysis"></a>parseTopLevel method analysis</h2><p>At the beginning of the process analysis, we are going to see that the main logic of this function is in the <code>parseBlockOrModuleBlockBody</code> function, so let’s take a look at this function first</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">    <span class="attr">body</span>: N.<span class="property">Statement</span>[],</span><br><span class="line">    <span class="attr">directives</span>: ?(N.<span class="property">Directive</span>[]),</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldStrict = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strict</span>;</span><br><span class="line">    <span class="keyword">let</span> hasStrictModeDirective = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> parsedNonDirective = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable language_">this</span>.<span class="title function_">match</span>(end)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stmt = <span class="variable language_">this</span>.<span class="title function_">parseStatement</span>(<span class="literal">null</span>, topLevel);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (directives &amp;&amp; !parsedNonDirective) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidDirective</span>(stmt)) &#123;</span><br><span class="line">          <span class="keyword">const</span> directive = <span class="variable language_">this</span>.<span class="title function_">stmtToDirective</span>(stmt);</span><br><span class="line">          directives.<span class="title function_">push</span>(directive);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            !hasStrictModeDirective &amp;&amp;</span><br><span class="line">            directive.<span class="property">value</span>.<span class="property">value</span>= <span class="string">&quot;use strict&quot;</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            hasStrictModeDirective = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parsedNonDirective = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// clear strict errors since the strict mode will not change within the block</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strictErrors</span>.<span class="title function_">clear</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      body.<span class="title function_">push</span>(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (afterBlockParse) &#123;</span><br><span class="line">      afterBlockParse.<span class="title function_">call</span>(<span class="variable language_">this</span>, hasStrictModeDirective);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldStrict) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This function does not look short, but the main logic is the while loop, as long as it meets <code>!this.match(end)</code> will always parse, this end is actually tt.eof, that is, we just TokenType in a kind of, said the end of the file.</p><p>loop body The main content is two <code>const stmt = this.parseStatement(null, topLevel);</code> and <code>body.push(stmt);</code>, this stmt is a Node of AST</p><h3 id="parseStatement"><a href="#parseStatement" class="headerlink" title="parseStatement"></a>parseStatement</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseStatement</span>(<span class="attr">context</span>: ?string, topLevel?: boolean): N.<span class="property">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">match</span>(tt.<span class="property">at</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">parseDecorators</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">parseStatementContent</span>(context, topLevel);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>The first line is to determine whether the current is @, if so, that is the decorator, this temporarily regardless of</p><p>Let’s look at this <code>parseStatementContent</code></p><h3 id="parseStatementContent"><a href="#parseStatementContent" class="headerlink" title="parseStatementContent"></a>parseStatementContent</h3><p>This function is very much like <code>getTokenFromCode</code> in the Tokenizer just now. <code>getTokenFromCode</code> generates various types of tokens based on code, while <code>parseStatementContent</code> generates AST Node based on different types of tokens.</p><p>Then, during the parsing process, there are some special cases where the nextToken of the Tokenizer will be called again to continue to generate a new token, such as parsing to import</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">parseStatementContent</span>(<span class="attr">context</span>: ?string, <span class="attr">topLevel</span>: ?boolean): N.<span class="property">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> starttype = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">type</span>;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    watch child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isLet</span>(context)) &#123;</span><br><span class="line">      starttype = tt.<span class="property">_var</span>;</span><br><span class="line">      kind = <span class="string">&quot;let</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Most types of statements are recognized by the keyword they</span></span><br><span class="line"><span class="string">    // start with. Many are trivial to parse, some require a bit of</span></span><br><span class="line"><span class="string">    // complexity.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    switch (starttype) &#123;</span></span><br><span class="line"><span class="string">      case tt._break:</span></span><br><span class="line"><span class="string">      case tt._continue:</span></span><br><span class="line"><span class="string">        // $FlowFixMe</span></span><br><span class="line"><span class="string">        return this.parseBreakContinueStatement(node, starttype.keyword);</span></span><br><span class="line"><span class="string">      case tt._debugger:</span></span><br><span class="line"><span class="string">        return this.parseDebuggerStatement(node);</span></span><br><span class="line"><span class="string">      case tt._do:</span></span><br><span class="line"><span class="string">        return this.parseDoStatement(node);</span></span><br><span class="line"><span class="string">      case tt._for:</span></span><br><span class="line"><span class="string">        return this.parseForStatement(node);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      // Omit the various tokenType judgments</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      default: &#123;</span></span><br><span class="line"><span class="string">        if (this.isAsyncFunction()) &#123;</span></span><br><span class="line"><span class="string">          if (context) &#123;</span></span><br><span class="line"><span class="string">            this.raise(</span></span><br><span class="line"><span class="string">              this.state.start,</span></span><br><span class="line"><span class="string">              Errors.AsyncFunctionInSingleStatementContext,</span></span><br><span class="line"><span class="string">            );</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          this.next(); // Here again, the nextToken method of the Tokenizer is called</span></span><br><span class="line"><span class="string">          return this.parseFunctionStatement(node, true, !context);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // If the statement does not start with a statement keyword or a</span></span><br><span class="line"><span class="string">    // brace, it&#x27;s an ExpressionStatement or LabeledStatement. We</span></span><br><span class="line"><span class="string">    // simply start parsing an expression, and afterwards, if the</span></span><br><span class="line"><span class="string">    // next token is a colon and the expression was a simple</span></span><br><span class="line"><span class="string">    // Identifier node, we switch to interpreting it as a label.</span></span><br><span class="line"><span class="string">    const maybeName = this.state.value;</span></span><br><span class="line"><span class="string">    const expr = this.parseExpression();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (</span></span><br><span class="line"><span class="string">      start type= tt.name &amp;&amp;</span></span><br><span class="line"><span class="string">      expr.type= &quot;</span><span class="title class_">Identifier</span><span class="string">&quot; &amp;&amp;</span></span><br><span class="line"><span class="string">      this.eat(tt.colon)</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      return this.parseLabeledStatement(node, maybeName, expr, context);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      return this.parseExpressionStatement(node, expr);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;In the previous article, when analyzing the Babel compilation process, we mentioned that Babel converts JS code into ASTs (Abstract Syntax Trees). This behavior is a generic one, no matter what programming language parses the source code into an AST, &lt;strong&gt;AST is not specific to Babel, let alone to JS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why do we need to do this? The original JS file is incomprehensible to the computer, and it is difficult for the computer to modify the JS code directly, but by converting it to an AST, which is essentially a set of objects that represent the structure of the program, we can indirectly modify the code by modifying the objects. AST to generate bytecode.&lt;/p&gt;
&lt;p&gt;Parser’s process is divided into two steps, the first step, lexical analysis, which is the finite state machine in the compilation principle, to split a piece of code into individual Tokens, and the second step, syntax analysis, to convert the Token array, into an AST tree.&lt;/p&gt;
&lt;p&gt;This time I’ll look at&lt;a href=&quot;https://github.com/babel/babel/tree/main/packages/babel-parser&quot;&gt;源码&lt;/a&gt;The process is briefly analyzed.&lt;/p&gt;</summary>
    
    
    
    <category term="Babel" scheme="https://sunra.top/en/categories/Babel/"/>
    
    
  </entry>
  
  <entry>
    <title>In-depth Babel Principles Series (I) Introduction to Babel Workflow and Project Structure</title>
    <link href="https://sunra.top/en/posts/17020/"/>
    <id>https://sunra.top/en/posts/17020/</id>
    <published>2021-06-21T23:53:03.000Z</published>
    <updated>2023-06-07T12:40:51.470Z</updated>
    
    <content type="html"><![CDATA[<p>I recently came across a bit of knowledge about Babel and got some interest in it, so I planned to take a look at the principle of Babel and then summarize it for learning, which is too complicated to write in multiple blogs.</p><span id="more"></span><h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1624407593/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210623081837_ikbdn8.png" alt=""></p><blockquote><p>It is important to mention here that this structure where Traverser calls multiple Transformers in the figure is the microkernel.</p><p>That means that the core code of Babel is actually only the left column, and Parser has built-in support for many syntaxes. For example, JSX, Typescript, Flow, and the latest ECMAScript specification. Currently, for the sake of efficiency, the parser is<a href="https://babeljs.io/docs/en/babel-parser#faq">不支持扩展的</a>。</p><p>Other additional features are implemented in the form of plugins, but Babel implements some built-in transformers to achieve some common functions, such as converting es2015+ code.</p></blockquote><h3 id="Parsing-Tokenizer-Parser"><a href="#Parsing-Tokenizer-Parser" class="headerlink" title="Parsing (Tokenizer + Parser)"></a>Parsing (Tokenizer + Parser)</h3><p>For the source code, at this point we see it as a string, and the first step in its analysis is definitely to convert the source code into an AST first, before the subsequent operation.</p><p>There is a<a href="https://astexplorer.net/">在线AST转换器</a>, we can experiment on this and write the code and it translates it for us into AST::</p><p>I’ll write nothing, and the AST will have a root node: the</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AST</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;end&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125; <span class="comment">// It can be seen as an object with some fields, the root node of this code tree.</span></span><br></pre></td></tr></table></figure><p>Then I write a sentence <code>const text = &#39;Hello World&#39;;</code> and it becomes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;end&quot;</span>: <span class="number">27</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclaration&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="number">27</span>,</span><br><span class="line">      <span class="string">&quot;declarations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclarator&quot;</span>,</span><br><span class="line">          <span class="string">&quot;start&quot;</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="string">&quot;end&quot;</span>: <span class="number">26</span>,</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;init&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Literal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">13</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">26</span>,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">            <span class="string">&quot;raw&quot;</span>: <span class="string">&quot;&#x27;Hello World&#x27;&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;const&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>From this structure we can take a brief look at the structure of the AST node.</p><p>each node has type, start and end. type indicates the type of the node, just like the type of the root node is Program, which is all code, so it has start as 0 and end as last;</p><p>And different types of nodes may have their own different definitions, such as the <code>VariableDeclaration</code> node has the kind attribute, which indicates whether the variable is declared by const or var or let, and the declarations attribute, which indicates the specific content, which is an array, that is to say, a <code>VariableDeclaration</code> can declare more than one node, and the init attribute of each node indicates what data the variable is initialized with.</p><p>To summarize the characteristics of the AST tree:</p><ol><li>Nodes are typed. When we learn a data structure like a tree, the nodes are the simplest, here it’s complicated, there are types.</li><li>The relationship between nodes and children is linked by the attributes of the nodes. We learn the tree structure, are left, right left child right child. But AST tree, different types of nodes, different properties, Program type node’s child node is its body property, VariableDeclaration type of child node, is its declarations, kind property. That is, the properties of the node are seen as the children of the node, and the children may also have types, and nearly form a tree.</li><li>The parent node is the combination of all the child nodes. We can see that the const text = ‘Hello World’ represented by VariableDeclaration is split into the following two child nodes, and the child nodes continue to be split again.</li></ol><p>I hope that the above analysis will give you the most intuitive understanding of AST, which is a tree with types of nodes.</p><p>Then the type system of nodes is necessary to understand, here is<a href="https://github.com/babel/babylon/blob/master/ast/spec.md">Babel的AST类型系统说明</a>. As you can see, you can say that the type system is abstracting the various members of the code, identifiers, literals, declarations, expressions. So having a tree structure of nodes of these types can be used to express our code.</p><h3 id="Crossbar"><a href="#Crossbar" class="headerlink" title="Crossbar"></a>Crossbar</h3><p>Step 2: Convert. Now that you’ve got the ast, it’s time to manipulate it. babel-traverse in Babel is used to do this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Installation</span></span><br><span class="line">npm install --save babel-traverse</span><br><span class="line"></span><br><span class="line"><span class="comment">// Experimental code</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babylon <span class="keyword">from</span> <span class="string">&quot;babylon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;babel-traverse&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`const text = &#x27;Hello World&#x27;;`</span>;</span><br><span class="line"><span class="keyword">const</span> ast = babylon.<span class="title function_">parse</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">  <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;path&#x27;</span>, path);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ast&#x27;</span>, ast);</span><br></pre></td></tr></table></figure><p>The babel-traverse library exposes the traverse method, the first parameter is ast, the second parameter is an object, we wrote an enter method, the parameter of the method is a path, how is it not a node? Let’s look at the output:</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/4/16c5b8506c9e8e8d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>In fact, this path contains the node attribute, but also contains many other attributes used for analysis, such as the scope attribute of the analysis scope.</p><h3 id="Generator-babel-generator"><a href="#Generator-babel-generator" class="headerlink" title="Generator babel-generator"></a>Generator babel-generator</h3><p>Step 3: Generate. The babel-generator in Babel is used to do this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-generator</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入babel-generator</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babylon <span class="keyword">from</span> <span class="string">&quot;babylon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;babel-traverse&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> t <span class="keyword">from</span> <span class="string">&quot;babel-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> generate <span class="keyword">from</span> <span class="string">&quot;babel-generator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`const text = &#x27;Hello World&#x27;;`</span>;</span><br><span class="line"><span class="keyword">const</span> ast = babylon.<span class="title function_">parse</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">  <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="title function_">isIdentifier</span>(path.<span class="property">node</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;text&quot;</span> &#125;)) &#123;</span><br><span class="line">      path.<span class="property">node</span>.<span class="property">name</span> = <span class="string">&#x27;alteredText&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> genCode = <span class="title function_">generate</span>(ast, &#123;&#125;, code);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;genCode&#x27;</span>, genCode);</span><br></pre></td></tr></table></figure><h2 id="Microkernels-and-Plugins"><a href="#Microkernels-and-Plugins" class="headerlink" title="Microkernels and Plugins"></a>Microkernels and Plugins</h2><p>We’ve talked about Babel’s workflow above, and we’ve found that Babel’s core functionality is small. It’s very small, in fact, in four steps: splitting the code into tokens, building the token sequence into an AST, performing some operations on the AST, and finally converting the processed AST into a new code.</p><p>This core functionality is not large, but again, in order to be able to support complex functionality, so in the third step of the processing of the AST provides a plug-in mechanism (this plug-in mechanism is through<a href="https://refactoringguru.cn/design-patterns/visitor">访问者模式</a>implemented), and this architectural approach is called a microkernel.</p><p>A detailed explanation can be found in this blog: <a href="https://bobi.ink/2019/10/01/babel/#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F">https://bobi.ink/2019/10/01/babel/#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F</a></p><p>Reference link:</p><p><a href="https://juejin.cn/post/6844903905961181191">https://juejin.cn/post/6844903905961181191</a></p><p><a href="https://www.babeljs.cn/docs/">https://www.babeljs.cn/docs/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I recently came across a bit of knowledge about Babel and got some interest in it, so I planned to take a look at the principle of Babel and then summarize it for learning, which is too complicated to write in multiple blogs.&lt;/p&gt;</summary>
    
    
    
    <category term="Babel" scheme="https://sunra.top/en/categories/Babel/"/>
    
    
  </entry>
  
  <entry>
    <title>Azure Basic Concepts Compendium</title>
    <link href="https://sunra.top/en/posts/1bcc6f4f/"/>
    <id>https://sunra.top/en/posts/1bcc6f4f/</id>
    <published>2020-06-24T23:15:56.000Z</published>
    <updated>2023-06-07T12:40:51.470Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, while reading the Azure documentation, I was very confused by many of the concepts in the documentation, so I went through some of the official documentation, which is a temporary understanding and summary.</p><span id="more"></span><p>First of all, I would like to start with the paragraph that I think best solves my doubts<a href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/fundamental-concepts">原文档</a>：</p><h2 id="Azure-terminology"><a href="#Azure-terminology" class="headerlink" title="Azure terminology"></a>Azure terminology</h2><p>It’s helpful to know the following definitions as you begin your Azure cloud adoption efforts:</p><ul><li><strong>Resource:</strong> An entity that’s managed by Azure. Examples include Azure Virtual Machines, virtual networks, and storage accounts.</li><li><strong>Subscription:</strong> A logical container for your resources. Each Azure resource is associated with only one subscription. Creating a subscription is the first step in adopting Azure.</li><li><strong>Azure account:</strong> The email address that you provide when you create an Azure subscription is the Azure account for the subscription. The party that’s associated with the email account is responsible for the monthly costs that are incurred by the resources in the subscription. When you create an Azure account, you provide contact information and billing details, like a credit card. You can use the same Azure account (email address) for multiple subscriptions. Each subscription is associated with only one Azure account.</li><li><strong>Account administrator:</strong> The party associated with the email address that’s used to create an Azure subscription. The account administrator is responsible for paying for all costs that are incurred by the subscription’s resources.</li><li><strong>Azure Active Directory (Azure AD):</strong> The Microsoft cloud-based identity and access management service. Azure AD allows your employees to sign in and access resources.</li><li><strong>Azure AD tenant:</strong> A dedicated and trusted instance of Azure AD. An Azure AD tenant is automatically created when your organization first signs up for a Microsoft cloud service subscription like Microsoft Azure, Microsoft Intune, or Office 365. An Azure tenant represents a single organization.</li><li><strong>Azure AD directory:</strong> Each Azure AD tenant has a single, dedicated, and trusted directory. The directory includes the tenant’s users, groups, and apps. The directory is used to perform identity and access management functions for tenant resources. A directory can be associated with multiple subscriptions, but each subscription is associated with only one directory.</li><li><strong>Resource groups:</strong> Logical containers that you use to group related resources in a subscription. Each resource can exist in only one resource group. Resource groups allow for more granular grouping within a subscription, and are commonly used to represent a collection of assets required to support a workload, application, or specific function within a subscription.</li><li><strong>Management groups:</strong> Logical containers that you use for one or more subscriptions. You can define a hierarchy of management groups, subscriptions, resource groups, and resources to efficiently manage access, policies, and compliance through inheritance.</li><li><strong>Region:</strong> A set of Azure datacenters that are deployed inside a latency-defined perimeter. The datacenters are connected through a dedicated, regional, low-latency network. Most Azure resources run in a specific Azure region.</li></ul><h2 id="Azure-administrative-roles"><a href="#Azure-administrative-roles" class="headerlink" title="Azure administrative roles"></a>Azure administrative roles</h2><p>Azure defines three types of roles for administering subscriptions, identities, and resources:</p><ul><li>Classic subscription administrator roles.</li><li>Azure role-based access control (RBAC) roles.</li><li>Azure Active Directory (Azure AD) administrator roles.</li></ul><p>The account administrator role for an Azure subscription is assigned to the email account that’s used to create the Azure subscription. The account administrator is the billing owner of the subscription. The account administrator can manage the subscription details in the<a href="https://account.azure.com/subscriptions">Azure account center</a>.</p><p>By default, the service administrator role for a subscription also is assigned to the email account that’s used to create the Azure subscription. The service administrator has permissions to the subscription equivalent to the RBAC-based Owner role. The service administrator also has full access to the Azure portal. The account administrator can change the service administrator to a different email account.</p><p>When you create an Azure subscription, you can associate it with an existing Azure AD tenant. Otherwise, a new Azure AD tenant with an associated directory is created. The role of global administrator in the Azure AD directory is assigned to the email account that’s used to create the Azure AD subscription.</p><p>An email account can be associated with multiple Azure subscriptions. The account administrator can transfer a subscription to another account.</p><p>For a detailed description of the roles defined in Azure, see<a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/rbac-and-directory-admin-roles">Classic subscription administrator roles, Azure RBAC roles, and Azure AD administrator roles</a>.</p><h2 id="Subscriptions-and-regions"><a href="#Subscriptions-and-regions" class="headerlink" title="Subscriptions and regions"></a>Subscriptions and regions</h2><p>Every Azure resource is logically associated with only one subscription. When you create a resource, you choose which Azure subscription to deploy that resource to. You can move a resource to another subscription later.</p><p>While a subscription isn’t tied to a specific Azure region, each Azure resource is deployed to only one region. You can have resources in multiple regions that are associated with the same subscription.</p><p>It means that resources in the same subscription can be in different regions, e.g. resources in East Asia and Northern Europe servers can be in the same resource group.</p><h2 id="Tenancy-in-Azure-Active-Directory"><a href="#Tenancy-in-Azure-Active-Directory" class="headerlink" title="Tenancy in Azure Active Directory"></a>Tenancy in Azure Active Directory</h2><p>Azure Active Directory (Azure AD) organizes objects like users and apps into groups called <em>tenants</em>. Tenants allow an administrator to set policies on the users within the organization and the apps that the organization owns to meet their security and operational policies.</p><h3 id="Who-can-sign-in-to-your-app"><a href="#Who-can-sign-in-to-your-app" class="headerlink" title="Who can sign in to your app?"></a>Who can sign in to your app?</h3><p>When it comes to developing apps, developers can choose to configure their app to be either single-tenant or multi-tenant during app registration in the<a href="https://portal.azure.com/">Azure portal</a>.</p><ul><li>Single-tenant apps are only available in the tenant they were registered in, also known as their home tenant.</li><li>Multi-tenant apps are available to users in both their home tenant and other tenants.</li></ul><p>In the Azure portal, you can configure your app to be single-tenant or multi-tenant by setting the audience as follows.</p><div class="table-container"><table><thead><tr><th style="text-align:left">Audience</th><th style="text-align:left">Single/multi-tenant</th><th style="text-align:left">Who can sign in</th></tr></thead><tbody><tr><td style="text-align:left">Accounts in this directory only</td><td style="text-align:left">Single tenant</td><td style="text-align:left">All user and guest accounts in your directory can use your application or API. <em>Use this option if your target audience is internal to your organization.</em></td></tr><tr><td style="text-align:left">Accounts in any Azure AD directory</td><td style="text-align:left">Multi-tenant</td><td style="text-align:left">All users and guests with a work or school account from Microsoft can use your application or API. This includes schools and businesses that use Office 365. <em>Use this option if your target audience is business or educational customers.</em></td></tr><tr><td style="text-align:left">Accounts in any Azure AD directory and personal Microsoft accounts (such as Skype, Xbox, Outlook.com)</td><td style="text-align:left">Multi-tenant</td><td style="text-align:left">All users with a work or school, or personal Microsoft account can use your application or API. It includes schools and businesses that use Office 365 as well as personal accounts that are used to sign in to services like Xbox and Skype. <em>Use this option to target the widest set of Microsoft accounts.</em></td></tr></tbody></table></div><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>These documents roughly explain the definitions of these concepts and the general relationships, which can give us a general and vague idea.</p><p>In a nutshell, it means that Azure AD is an authentication service from Microsoft, and each organization can use it to create tenants (an instance of Azure AD), or tenants, each of which has its own unique Azure AD directory, and each of which can have multiple subscriptions. Resources in subscriptions can be logically grouped by resource groups.</p><p>Azure Active Directory (Azure AD) organizes objects such as users and applications into <em>groups called “</em>tenants”. Tenants allow administrators to set policies for users within an organization and for applications owned by the organization to meet their security and operational policies.</p><p>Each application can be set up as multi-tenant or single-tenant. Single-tenant applications can only be accessed by users in this tenant.</p><p>Reference Document:</p><p><a href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/fundamental-concepts">https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/fundamental-concepts</a></p><p><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/accounts-overview">https://docs.microsoft.com/en-us/azure/active-directory/develop/accounts-overview</a></p><p><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-create-new-tenant">https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-create-new-tenant</a></p><p><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/single-and-multi-tenant-apps">https://docs.microsoft.com/en-us/azure/active-directory/develop/single-and-multi-tenant-apps</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, while reading the Azure documentation, I was very confused by many of the concepts in the documentation, so I went through some of the official documentation, which is a temporary understanding and summary.&lt;/p&gt;</summary>
    
    
    
    <category term="Cloud" scheme="https://sunra.top/en/categories/Cloud/"/>
    
    
  </entry>
  
  <entry>
    <title>HSTS</title>
    <link href="https://sunra.top/en/posts/3daba739/"/>
    <id>https://sunra.top/en/posts/3daba739/</id>
    <published>2020-06-17T22:38:51.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Origin-HTTPS-enabled-is-not-secure-enough-either"><a href="#Origin-HTTPS-enabled-is-not-secure-enough-either" class="headerlink" title="Origin: HTTPS enabled is not secure enough either"></a>Origin: HTTPS enabled is not secure enough either</h3><p>There are a number of websites that are only served externally via HTTPS, but when users visit a website, they often type the website domain name (e.g. <a href="https://link.zhihu.com/?target=http%3A//www.example.com">Example Domain</a>) directly into their browser instead of the The full URL (e.g., <a href="https://link.zhihu.com/?target=https%3A//www.example.com">Example Domain</a>), but the browser can still make the request correctly using HTTPS. This is possible thanks to the collaboration between the server and the browser, as shown in the figure below.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034077/origin-of-ray/微信截图_20201215200744_st7ygu.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034077/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215200744_st7ygu.png"></p><p>Figure 1: The server and browser do a lot of work for the user behind the scenes</p><p>In simple terms, the browser makes an HTTP request to the website, and after getting a redirect response, initiates an HTTPS request and gets the final response content. All of this is completely transparent to the user, so it is a nice user experience for the user to enter the domain name directly into the browser and still be able to communicate securely with the website using the HTTPS protocol.</p><p>Everything looks so perfect, but it is not. Since there is an explicit HTTP request and redirect (steps 1 and 2 in the above diagram) before an HTTPS connection is established, it allows an attacker to hijack this request in a man-in-the-middle manner to carry out subsequent attacks, such as eavesdropping on data, tampering with requests and responses, jumping to phishing sites, etc.</p><span id="more"></span><p>Take the example of hijacking a request and jumping to a phishing site, the general approach is shown in the following figure:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034304/origin-of-ray/微信截图_20201215201136_l7n9kr.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034304/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215201136_l7n9kr.png"></p><p>Figure 2: Hijacking HTTP requests, blocking HTTPS connections, and conducting phishing attacks</p><ul><li>Step 1: The browser initiates an explicit HTTP request, but it will actually be intercepted by the attacker</li><li>Step 2: The attacker acts as a proxy and forwards the current request to the phishing site</li><li>Step 3: Phishing website returns fake web content</li><li>Step 4: The attacker returns the fake web content to the browser</li></ul><p>The subtlety of this attack is that the attacker directly hijacks the HTTP request and returns the content to the browser without giving the browser the opportunity to establish an HTTPS connection with the real website, so the browser will mistakenly believe that the real website provides services to the outside world via HTTP, and naturally will not report to the user that the current connection is not secure. So the attacker can almost unknowingly do something to the request and response.</p><h3 id="Solution-Use-HSTS"><a href="#Solution-Use-HSTS" class="headerlink" title="Solution: Use HSTS"></a>Solution: Use HSTS</h3><p>Since it is possible that this HTTP explicit request and redirect before establishing an HTTPS connection could be hijacked by an attacker, the natural idea to solve this problem becomes how to avoid such an HTTP request. Our desired browser behavior is that when the user tells the browser to initiate an HTTP request, the browser converts it to an HTTPS request, directly skipping the above HTTP request and redirect, thus rendering the man-in-the-middle attack ineffective to avoid the risk. The general flow is as follows:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034428/origin-of-ray/微信截图_20201215201341_n2jssi.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034428/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215201341_n2jssi.png"></p><p>Figure 3: Skip HTTP requests and redirects, send HTTPS requests directly</p><ul><li>Step 1: The user enters the website domain name in the browser address bar and the browser learns that the domain name should use HTTPS for communication</li><li>Step 2: The browser initiates an HTTPS request directly to the website</li><li>Step 3: The website returns the appropriate content</li></ul><p>So the question arises, how does the browser do this? How does it know which site should send HTTPS requests and which site should use HTTP requests? At this point it’s time for HSTS to shine.</p><h4 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h4><p>The full name of HSTS is HTTP Strict-Transport-Security, which is a Web security policy mechanism (web security policy mechanism).</p><p>HSTS was first included in the ThoughtWorks Technology Radar in 2015, and in the latest edition of the Technology Radar in 2016, it moved directly from the “Trial” phase to the “Adopt” phase, meaning that ThoughtWorks is strongly advocating for the industry to actively adopt this security defense and that ThoughtWorks has already applied it to its own projects. “This means that ThoughtWorks is a strong advocate for the industry’s active adoption of this security defense and that ThoughtWorks is already applying it to its own projects.</p><p>At the very core of HSTS is an HTTP Response Header (HSTS). It is what lets the browser know that the current domain can only be accessed via HTTPS for the next period of time, and forcibly denies the user subsequent access requests if the browser finds the current connection insecure.</p><p>The syntax of the HSTS Header is as follows:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Strict-Transport-Security: &lt;max-age=&gt;[; includeSubDomains][; preload]</span><br></pre></td></tr></table></figure><p>Among them:</p><ul><li>max-age is a mandatory parameter, it is a value in seconds, it represents the expiration time of HSTS Header, usually set to 1 year, i.e. 31536000 seconds.</li><li>includeSubDomains is an optional parameter, if it is included, it means that both the current domain and its subdomains have HSTS protection enabled.</li><li>preload is an optional parameter and is only needed when you request to add your domain name to the browser built-in list. More details about the browser built-in list are described below.</li></ul><h4 id="lets-browsers-initiate-HTTPS-requests-directly"><a href="#lets-browsers-initiate-HTTPS-requests-directly" class="headerlink" title="lets browsers initiate HTTPS requests directly"></a>lets browsers initiate HTTPS requests directly</h4><p>Just add the HTTP Header Strict-Transport-Security (hereinafter referred to as HSTS Header) to the response header returned by the server to the browser, e.g:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Strict-Transport-Security: max-age=31536000; includeSubDomains</span><br></pre></td></tr></table></figure><p>It will tell the browser that for the next 31536000 seconds (1 year), it should be mandatory to use only HTTPS for subsequent communications for the current domain and its subdomains until the expiration date is exceeded.</p><p>The complete process is shown in the following diagram:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034571/origin-of-ray/微信截图_20201215201603_mijchx.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034571/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215201603_mijchx.png"></p><p>Figure 4: The complete HSTS process</p><p>As long as it is within the validity period, the browser will be directly mandatory to initiate HTTPS requests, but the question arises again, how to do after the validity period? In fact, do not worry too much about this, because HSTS Header exists in each response, with the user and the site’s interaction, this effective time is always refreshing, plus the validity period is usually set to 1 year, so as long as the user’s before and after the time between the two requests does not exceed 1 year, there is basically no security risk. What’s more, even if the expiration date is exceeded, as long as the user interacts with the website once again, the user’s browser will turn on the HSTS protection which is valid for 1 year again.</p><h4 id="Force-rejection-of-unsafe-links-without-giving-users-a-choice"><a href="#Force-rejection-of-unsafe-links-without-giving-users-a-choice" class="headerlink" title="Force rejection of unsafe links, without giving users a choice"></a>Force rejection of unsafe links, without giving users a choice</h4><p>In the absence of HSTS protection, when the browser finds that the certificate of the current website is wrong, or that the communication between the browser and the server is insecure and an HTTPS connection cannot be established, the browser will usually warn the user, but then allow the user to continue with the insecure access. As shown in the figure below, the user can click on the link in the red box in the figure to continue accessing under an insecure connection.</p><p><img src="https://pic4.zhimg.com/80/v2-b69590c9522f75bbd8ef0c73382e0a57_720w.jpg" alt="img"></p><p>Figure 5: Browser still allows users to make unsafe access</p><p>In theory, after seeing this warning, users should be more alert and realize that the communication between themselves and the website is not safe, and may be hijacked or eavesdropped, and if the website they visit happens to be a bank or financial website, the consequences are even worse, so they should terminate the follow-up operation. However, the reality is cruel, as far as my actual observation, many users still choose to continue to visit after encountering such a warning.</p><p>But with the advent of HSTS, things have taken a turn for the better. For websites with browser HSTS protection enabled, if the browser finds that the current connection is not secure, it will simply warn the user and no longer give the user the option of whether to continue accessing, thus avoiding subsequent security issues. For example, when accessing the Google search engine, if the current communication connection has security issues, the browser will completely block the user from continuing to access Google, as shown in the figure below.</p><p><img src="https://pic4.zhimg.com/80/v2-b9df0eb3dcc8da972eec57f0051c2f3b_720w.jpg" alt="img"></p><p>Figure 6: The browser completely blocks the user from continuing unsafe access</p><h3 id="The-devil-is-high-attackers-still-have-a-chance-to-take-advantage-of"><a href="#The-devil-is-high-attackers-still-have-a-chance-to-take-advantage-of" class="headerlink" title="The devil is high: attackers still have a chance to take advantage of"></a>The devil is high: attackers still have a chance to take advantage of</h3><p>Careful you may have found, HSTS there is a weak link, that is, when the browser does not have the current site HSTS information, or the first visit to the site, still need an explicit HTTP request and redirect to switch to HTTPS, as well as refresh the HSTS information. And it is such a moment but leaves an opportunity for attackers to take advantage of, so that they can hijack this HTTP request down and continue the man-in-the-middle attack.</p><h4 id="Preload-List-Making-Defense-More-Thorough"><a href="#Preload-List-Making-Defense-More-Thorough" class="headerlink" title="Preload List: Making Defense More Thorough"></a>Preload List: Making Defense More Thorough</h4><p>For the above attack, HSTS also has a countermeasure, that is, a list is built into the browser, and as long as the domain name is in this list, the browser will only use HTTPS to initiate a connection, no matter when or what the situation is. This list is maintained by Google Chromium, which is used by FireFox, Safari, IE and other mainstream browsers.</p><h3 id="Some-Tips"><a href="#Some-Tips" class="headerlink" title="Some Tips"></a>Some Tips</h3><p><strong>Tip 1: How to configure HSTS</strong></p><p>There are many places where you can configure HSTS, such as reverse proxy servers, application servers, application frameworks, and custom Header in applications. you can choose according to the actual situation.<br>It is common to configure this in a proxy server, in the case of Nginx, by simply adding the following directive to the configuration file:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;</span><br></pre></td></tr></table></figure><p>However, special attention should be paid to the use of HSTS in a production environment, because once the browser receives the HSTS Header (if it is valid for 1 year), but there happens to be a problem with the website’s certificate, the user will not be able to access your website for the next 1 year until the certificate error is fixed, or the user actively clears the browser cache.</p><p>Therefore, it is recommended that when HSTS is turned on in the production environment, the value of max-age should be set smaller first, for example, 5 minutes, and then check whether HSTS can work properly and whether the website can be accessed normally, and then gradually extend the time, for example, 1 week or 1 month, and continue to check whether HSTS works properly within this time frame before finally changing to 1 year.</p><p><strong>Tip 2: How to Add to HSTS Preload List</strong></p><p>According to the official instructions, your website can make a request to be added to this list after having the following conditions</p><ul><li>Have a valid certificate</li><li>Provide redirected responses on the same host, as well as receive redirected HTTPS requests</li><li>All subdomains use HTTPS</li><li>In the HTTP response header for the root domain, include the HSTS Header with the following conditions:<ul><li>The minimum expiration time must not be less than 18 weeks (10,886,400 seconds)</li><li>The includeSubDomains parameter must be included</li><li>The preload parameter must be included<br>Once you are ready for these, you can submit your application on the official website of HSTS Preload List (<a href="https://link.zhihu.com/?target=https%3A//hstspreload.org">https://hstspreload.org</a>), or learn more details about content.</li></ul></li></ul><p><strong>Tip 3: How to check if a domain name is added to the Preload List</strong></p><p>There may be a wait time ranging from a few days to a few weeks between submitting the application and completing the review and successful addition to the built-in list. You can check the status through the official website <a href="https://link.zhihu.com/?target=https%3A//hstspreload.org">https://hstspreload.org</a> or by typing chrome://net-internals/#hsts in the Chrome address bar Check the status.</p><h3 id="The-pitfalls-of-HSTS"><a href="#The-pitfalls-of-HSTS" class="headerlink" title="The pitfalls of HSTS"></a>The pitfalls of HSTS</h3><ul><li>HSTS can’t handle pure IP requests, like <code>http://2.2.2.2</code>, even if STS is set in the response header (not tested)</li><li>HSTS can only switch between ports 80 and 443, if the service is port 8080, even if STS is set, it is not valid (not tested)</li><li>If the browser certificate is wrong, the general situation will remind the existence of security risks, but is still given a link to enter the target page, while HSTS is no target page entrance, so once the certificate configuration error, is a big failure</li><li>If the server’s HTTPS is not configured properly and the STS response header is turned on, and a long expiration time is set, then until your server’s HTTPS is configured properly, users will not be able to connect to your server unless the max-age has expired.</li><li>HSTS can get your site to A+ on ssllab (which is not the pits)</li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>As more and more websites start to use HTTPS, or even turn on full-site HTTPS, the security of data during transmission can be greatly guaranteed. At the same time, with the help of HSTS, data communication can be made more secure by avoiding SSL Stripping or man-in-the-middle attacks. This article hopes that through the analysis of HSTS, more development teams will apply HSTS to their own projects.</p><p>Reprinted article from:</p><p><a href="https://zhuanlan.zhihu.com/p/63674248">https://zhuanlan.zhihu.com/p/63674248</a></p><p><a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">https://www.barretlee.com/blog/2015/10/22/hsts-intro/</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Origin-HTTPS-enabled-is-not-secure-enough-either&quot;&gt;&lt;a href=&quot;#Origin-HTTPS-enabled-is-not-secure-enough-either&quot; class=&quot;headerlink&quot; title=&quot;Origin: HTTPS enabled is not secure enough either&quot;&gt;&lt;/a&gt;Origin: HTTPS enabled is not secure enough either&lt;/h3&gt;&lt;p&gt;There are a number of websites that are only served externally via HTTPS, but when users visit a website, they often type the website domain name (e.g. &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.example.com&quot;&gt;Example Domain&lt;/a&gt;) directly into their browser instead of the The full URL (e.g., &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.example.com&quot;&gt;Example Domain&lt;/a&gt;), but the browser can still make the request correctly using HTTPS. This is possible thanks to the collaboration between the server and the browser, as shown in the figure below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034077/origin-of-ray/微信截图_20201215200744_st7ygu.png&quot; alt=&quot;https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034077/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215200744_st7ygu.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Figure 1: The server and browser do a lot of work for the user behind the scenes&lt;/p&gt;
&lt;p&gt;In simple terms, the browser makes an HTTP request to the website, and after getting a redirect response, initiates an HTTPS request and gets the final response content. All of this is completely transparent to the user, so it is a nice user experience for the user to enter the domain name directly into the browser and still be able to communicate securely with the website using the HTTPS protocol.&lt;/p&gt;
&lt;p&gt;Everything looks so perfect, but it is not. Since there is an explicit HTTP request and redirect (steps 1 and 2 in the above diagram) before an HTTPS connection is established, it allows an attacker to hijack this request in a man-in-the-middle manner to carry out subsequent attacks, such as eavesdropping on data, tampering with requests and responses, jumping to phishing sites, etc.&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://sunra.top/en/categories/Security/"/>
    
    
  </entry>
  
  <entry>
    <title>TamperMonkey</title>
    <link href="https://sunra.top/en/posts/e438c689/"/>
    <id>https://sunra.top/en/posts/e438c689/</id>
    <published>2020-05-22T23:47:53.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>The Chrome extensions are an important reason why many people choose Chrome, and after years of development, Chrome has a wide variety of extensions.</p><span id="more"></span><p>“Grease Monkey also allows you to customize your website by installing various scripts. But it can customize more than just the style of the site, it can also implement more and more powerful features, such as</p><ul><li>Direct download of Baidu.com files</li><li>Re-customize the complicated Weibo page</li><li>Removing video playback ads</li><li>Changing the default “QR code login” back to “account password login”</li><li>Bypass the search engine jump prompt</li><li>Returned the fresh novel reading mode</li><li>Douban and IMDb show each other’s ratings</li></ul><h2 id="TamperMonkey-Introduction"><a href="#TamperMonkey-Introduction" class="headerlink" title="TamperMonkey Introduction"></a>TamperMonkey Introduction</h2><p>TamperMonkey allows us to write some js scripts to help us do some specific work. It’s scripting is no different from normal js code, but still has some features of its own.</p><p>For the full list of features, you can go directly to the official documentation: <a href="https://www.tampermonkey.net/documentation.php?ext=dhdg">https://www.tampermonkey.net/documentation.php?ext=dhdg</a></p><p>Here is a brief description of a few common ones:</p><h3 id="Commonly-used-properties"><a href="#Commonly-used-properties" class="headerlink" title="Commonly used properties"></a>Commonly used properties</h3><div class="table-container"><table><thead><tr><th>Property Name</th><th>Function</th><th></th><th></th></tr></thead><tbody><tr><td>name</td><td>The name of the Grease Monkey script</td><td></td></tr><tr><td>namespace</td><td>Namespace, similar to Java package name, used to distinguish scripts with the same name, usually written as author name or URL.</td></tr><tr><td>version</td><td>version of the script, updates to the Grease Monkey script will read this version number</td></tr></tbody></table></div><p>description | description | The description of the script, used to tell the user what the script is for | |<br>| author | author’s name | |<br>| match | Only matching URLs will execute the corresponding script, e.g. <code>*</code>, <code>http://*</code>, <code>http://www.baidu.com/*</code>, etc., see <a href="https://developer.chrome.com/extensions/match_">Google Developer Documentation</a> patterns) | | grant<br>| grant | specify the permission required to run the script, if the script has the corresponding permission, it can use the API provided by the Grease Monkey extension to interact with the browser. If set to <code>none</code>, the script will not use the sandbox environment, and will run directly in the web environment, so it will not be able to use most of Grease Monkey’s APIs.<br>| require | If the script depends on other js libraries, you can use the require directive to load the other libraries before running the script, commonly used to load jquery | |<br>| connect | When the user uses <a href="https://www.tampermonkey.net/documentation.php?version=4.9&amp;ext=dhdg&amp;show=dhdg#GM_xmlhttpRequest">GM_xmlhttpRequest</a> When requesting remote data, you need to use connect to specify the allowed domain names, supporting domain names, subdomains, IP addresses and <code>*</code> wildcards | |<br>| updateURL | The script update URL, when Grease Monkey extension checks for updates, it will try to download the script from this URL, and then compare the version number to confirm if it is updated.</p><h2 id="Example-Timekeeper"><a href="#Example-Timekeeper" class="headerlink" title="Example: Timekeeper"></a>Example: Timekeeper</h2><p>There is a very hot script on tamperMonkey called Time Controller, which can play videos at any speed, so let’s briefly analyze how it works</p><p>First of all, some header features</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @name timer|video-ad-skipping|video-ad-accelerator</span></span><br><span class="line"><span class="comment">// @name:en TimerHooker</span></span><br><span class="line"><span class="comment">// @name:zh-CN TimerHooker|Video Ad Skip|Video Ad Accelerator</span></span><br><span class="line"><span class="comment">// @namespace https://gitee.com/HGJing/everthing-hook/</span></span><br><span class="line"><span class="comment">// @version 1.0.39</span></span><br><span class="line"><span class="comment">// @description control web timer speed|accelerate skip page timer ads|video fast forward(slow play)|skip ads|support almost all web pages.</span></span><br><span class="line"><span class="comment">// @description:en it can hook the timer speed to change.</span></span><br><span class="line"><span class="comment">// @description:zh-CN control web timer speed|accelerate skip page timer ads|skip ads|support almost all web pages.</span></span><br><span class="line"><span class="comment">// @include *</span></span><br><span class="line"><span class="comment">// @require https://greasyfork.org/scripts/372672-everything-hook/code/Everything-Hook.js?version=784972</span></span><br><span class="line"><span class="comment">// @author Cangshi</span></span><br><span class="line"><span class="comment">// @match http://*/*</span></span><br><span class="line"><span class="comment">// @run-at document-start</span></span><br><span class="line"><span class="comment">// @grant none</span></span><br><span class="line"><span class="comment">// @license GPL-3.0-or-later</span></span><br></pre></td></tr></table></figure><p>The main one is the require feature, which introduces a plugin called everything-hook that can hijack all browser methods</p><p>Most of the code in this component is used to insert a few buttons in the page, or register some shortcuts, and also to hijack the setTimeout and setInterval methods with everything-hook.</p><p>But the most important one, the last one that works, is</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">changeVideoSpeed</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> rate = <span class="number">1</span> / <span class="variable language_">this</span>.<span class="property">_percentage</span>.</span><br><span class="line">                    rate &gt; <span class="number">16</span> &amp;&amp; (rate = <span class="number">16</span>).</span><br><span class="line">                    rate &lt; <span class="number">0.065</span> &amp;&amp; (rate = <span class="number">0.065</span>).</span><br><span class="line">                    <span class="keyword">var</span> videos = <span class="title function_">querySelectorAll</span>(<span class="variable language_">document</span>, <span class="string">&#x27;video&#x27;</span>, <span class="literal">true</span>) || [].</span><br><span class="line">                    <span class="keyword">if</span> (videos.<span class="property">length</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; videos.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                            videos[i].<span class="property">playbackRate</span> = rate.</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>Get all the video tags in the page and change their playbackRate to modify their playback rate.</p><h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><p>Now that we understand how to write a grease monkey script, let’s simply try it out.</p><p>As a programmer, we usually develop and test different platforms in different environments at the same time, and we usually find a place to store these large amounts of URLs, either locally or in the browser, so can we write a plugin to configure all the URLs, open the plugin each time we need it, and then go directly to open it according to the configuration name.</p><p>Directly on the code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name URL Manager</span></span><br><span class="line"><span class="comment">// @namespace https://sunra.top/</span></span><br><span class="line"><span class="comment">// @version 0.1</span></span><br><span class="line"><span class="comment">// @description Manage URL!</span></span><br><span class="line"><span class="comment">// @author You</span></span><br><span class="line"><span class="comment">// @match http://*/*</span></span><br><span class="line"><span class="comment">// @grant none</span></span><br><span class="line"><span class="comment">// @require https://res.cloudinary.com/dvtfhjxi4/raw/upload/v1590135992/url_rpyrxm.js</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = event || <span class="variable language_">window</span>.<span class="property">event</span>.</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">key</span> == <span class="string">&#x27;q&#x27;</span> &amp;&amp; e.<span class="property">ctrlKey</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gsbn_urls&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span>.</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">addEnvironmentFormToBody</span>().</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">generateForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">``</span>&lt;form id=<span class="string">&quot;gsbn_urls&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Platform:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;openPlatform&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    $&#123;Object.keys(urls).map((platform) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return ``<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;platform&#125;&quot;</span>&gt;</span>$&#123;platform&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span>`</span></span><br><span class="line"><span class="language-xml">    &#125;).join(&#x27;\n&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Environment:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;openUrl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;/select</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;openBtn&quot;</span>&gt;</span>open&lt;/button</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span>`.</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    function addEnvironmentFormToBody() &#123;</span></span><br><span class="line"><span class="language-xml">        var form = document.createElement(&#x27;div&#x27;).</span></span><br><span class="line"><span class="language-xml">        form.style = &quot;position:absolute;width:600px;height:100px;top:200px;&quot;</span></span><br><span class="line"><span class="language-xml">        form.innerHTML = generateForm().</span></span><br><span class="line"><span class="language-xml">        document.body.appendChild(form).</span></span><br><span class="line"><span class="language-xml">        addChangeEventListenerToPlatformSelect().</span></span><br><span class="line"><span class="language-xml">        addClickEventListenerToOpenButton().</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    function addClickEventListenerToOpenButton () &#123;</span></span><br><span class="line"><span class="language-xml">        document.getElementById(&#x27;openBtn&#x27;).onclick = function () &#123;</span></span><br><span class="line"><span class="language-xml">            var urlSelect = document.getElementById(&quot;openUrl&quot;).</span></span><br><span class="line"><span class="language-xml">            var index = urlSelect.selectedIndex.</span></span><br><span class="line"><span class="language-xml">            window.open(urlSelect.options[index].value).</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    function addChangeEventListenerToPlatformSelect() &#123;</span></span><br><span class="line"><span class="language-xml">        var platformSelect = document.getElementById(&#x27;openPlatform&#x27;).</span></span><br><span class="line"><span class="language-xml">        var urlSelect = document.getElementById(&quot;openUrl&quot;).</span></span><br><span class="line"><span class="language-xml">        platformSelect.onchange = function () &#123;</span></span><br><span class="line"><span class="language-xml">            var index = platformSelect.selectedIndex.</span></span><br><span class="line"><span class="language-xml">            urlSelect.innerHTML = &quot;&quot;.</span></span><br><span class="line"><span class="language-xml">            var urlOptions = urls[platformSelect.options[index].value].</span></span><br><span class="line"><span class="language-xml">            urlSelect.innerHTML = Object.keys(urlOptions).map((env) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                return ``<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;$&#123;urlOptions[env]&#125;&#x27;</span>&gt;</span>$&#123;env&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span>`.</span></span><br><span class="line"><span class="language-xml">            &#125;).join(&#x27;\n&#x27;).</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        fireChange(platformSelect).</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    function fireChange(element) &#123;</span></span><br><span class="line"><span class="language-xml">        if (&quot;createEvent&quot; in document) &#123;</span></span><br><span class="line"><span class="language-xml">            var evt = document.createEvent(&quot;HTMLEvents&quot;).</span></span><br><span class="line"><span class="language-xml">            evt.initEvent(&quot;change&quot;, false, true).</span></span><br><span class="line"><span class="language-xml">            element.dispatchEvent(evt).</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        else &#123;</span></span><br><span class="line"><span class="language-xml">            element.fireEvent(&quot;onchange&quot;).</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;)().</span></span><br></pre></td></tr></table></figure><p>The url in the above code is defined in the script imported from the cdn through the require attribute, and the general format is this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urls = &#123;</span><br><span class="line"><span class="attr">pm_console</span>: &#123;</span><br><span class="line"><span class="attr">dev2</span>: <span class="string">&quot;&quot;</span>.</span><br><span class="line"><span class="attr">dev</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;.</span><br><span class="line"><span class="attr">hm_console</span>: &#123;</span><br><span class="line"><span class="attr">dev2</span>: <span class="string">&quot;&quot;</span>.</span><br><span class="line"><span class="attr">prod</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The end result is that typing the shortcut Ctrl + Q on any page will bring up the following rudimentary interface, which can be selected on the left</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1590193109/Devtools/WeChat_Screenshot_20200523081809_llx9zu.png" alt=""></p><h3 id="Some-minor-pitfalls"><a href="#Some-minor-pitfalls" class="headerlink" title="Some minor pitfalls"></a>Some minor pitfalls</h3><ul><li>Restart the browser every time you modify the script if you want it to take effect immediately.</li><li>fireEvent does not work well in Google Chrome, you need to use dispatchEvent.</li><li>You need to set which sites don’t use this script or which do in the script’s settings page, and the script will only take effect if it meets the rules.</li></ul><p>There are also a large number of excellent plug-ins waiting for us to discover, the largest plug-in sharing site: <a href="https://greasyfork.org/zh-CN">https://greasyfork.org/zh-CN</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The Chrome extensions are an important reason why many people choose Chrome, and after years of development, Chrome has a wide variety of extensions.&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Introduction to TCP Protocol</title>
    <link href="https://sunra.top/en/posts/4f2bae2e/"/>
    <id>https://sunra.top/en/posts/4f2bae2e/</id>
    <published>2020-04-18T00:15:46.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>TCP is a <strong>connection-oriented</strong> transport layer protocol. That is, a TCP connection must be established before an application can use it. After the data is transferred, the TCP connection must be released.</li><li>Each TCP connection can only have two endpoints, and each TCP connection is <strong>point-to-point</strong>.</li><li>TCP provides <strong>reliable delivery service</strong>, which means that data is error-free, not lost, not duplicated, and arrives in order.</li><li>TCP provides <strong>full-duplex communication</strong>, allowing both sides of the communication to send data at any time.<strong> Both sides of TCP have a send cache and a receive cache</strong>, which are used to temporarily store data for both sides of the communication.</li><li><strong>Byte-stream-oriented</strong> The term <strong>“stream “</strong> in TCP refers to the sequence of bytes<strong> flowing into and out of a process. Byte-stream oriented means that although the application and TCP interact one block at a time, TCP sees the data handed off by the application as just a sequence of </strong>unstructured byte streams**. TCP does not know the meaning of the byte stream being transmitted, nor does it guarantee that the size of the block received by the receiver corresponds to the size of the block sent by the sender. It is possible to send and send 10 blocks of data to the upper layer and have it organized into 4 blocks on the receiving side.</li></ul><span id="more"></span><p>TCP and udp use a completely different approach when sending messages. TCP does not care how long messages are sent by the application process to the cache of the TCP connection at a time, but decides how many bytes each message should contain based on the window value given by the other side and the current network congestion (the message length of UDP is given by the application process, and the messages given by the application process, UDP just (simply add the header and pass it to the next layer).</p><p>My current understanding is that <strong>after the upper layer deposits the byte stream into the cache in multiple blocks of different sizes, TCP will re-cut the byte stream to send messages based on window values, congestion conditions, etc., just to ensure that all bytes eventually arrive in order</strong>.</p><h2 id="What-is-a-TCP-connection"><a href="#What-is-a-TCP-connection" class="headerlink" title="What is a TCP connection"></a>What is a TCP connection</h2><p>TCP uses connections as the most basic abstraction, and many of TCP’s features are built on this connection-oriented foundation, so we need to figure out what a TCP connection really is.</p><p>Each TCP connection has two endpoints, also called sockets or sockets, which are actually port numbers spliced together behind an IP address; the endpoint of a TCP connection is a very abstract socket, and the same IP address can have multiple different TCP connections, while the same port number can appear in multiple different TCP connections. A socket-based abstraction.</p><p>My current understanding of why TCP is connection-oriented is this:<strong> A TCP connection requires a port on both sides of the connection, and during that time, the data transmitted on that port belongs only to the TCP connection, so it is like a link for both sides, but it does not mean that all routers between TCP connections have to do anything special for that connection. </strong></p><p><strong>When you read the following content, if you have the question: What makes TCP designed this way to achieve this effect, think about its connection-oriented feature</strong>.</p><h2 id="Principle-of-reliable-transmission"><a href="#Principle-of-reliable-transmission" class="headerlink" title="Principle of reliable transmission"></a>Principle of reliable transmission</h2><p>The network beneath the TCP protocol provides unreliable transport, so TCP must take steps to remedy some of the surprises and make transport between transport layers reliable.</p><h3 id="Stop-waiting-protocol"><a href="#Stop-waiting-protocol" class="headerlink" title="Stop waiting protocol"></a>Stop waiting protocol</h3><p>The Stop and Wait protocol is very simple.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587171346/computer_network/微信图片编辑_20200418085415_bobkzr.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587171346/computer_network/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91_20200418085415_bobkzr.jpg"></p><ul><li><p>A pauses after sending packet M1 and waits for an acknowledgement from B. B sends an acknowledgement to A when it receives M1, and A continues with the next packet M2 after receiving an acknowledgement for M1.</p></li><li><p><strong>There is an error</strong>. B detects an error when it receives M1 and simply discards M1<strong> and then does nothing</strong>. A assumes that the packet just sent is lost as long as no acknowledgement is received for a period of time, and thus retransmits the packet sent earlier. This is called a <strong>timeout retransmission</strong>. To implement timeout retransmission, you must set a <strong>timeout timer</strong> for each completed packet sent, and if an acknowledgement is received before the timer expires, the timer is revoked. There are three points to note here:</p><ul><li>A After a group is sent, a copy of the sent group must <strong>be temporarily stored</strong> until an acknowledgement is received before it can be deleted.</li><li>Both the subgroup and the acknowledgement subgroup must be set up with numbers so that we know which subgroup received the acknowledgement and which did not.</li><li>The timeout timer is set for a <strong>retransmission time that should be slightly longer than the average round trip time of the data during packet transmission</strong>.</li></ul></li><li><p><strong>Lost acknowledgement and late</strong>. If the acknowledgement to M1 sent by B is lost and A does not receive an acknowledgement within the set timeout period, there is no way to know if the packet it sent was in error, lost, or if the acknowledgement sent by B was lost, so after the timeout timer expires A has to retransmit M1, assuming that B receives M1 once again, and takes two actions:</p><ul><li>This duplicate packet M1 is discarded and not delivered to the upper layer.</li><li>Send the delivery confirmation to A again, and you cannot assume that a confirmation that has already been sent will not be sent again.</li></ul></li><li><p>Channel Utilization. The advantage of the stop-wait protocol is its simplicity, but the disadvantage is that the channel utilization is too low</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587195669/computer_network/微信截图_20200418154042_tktoqj.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587195669/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418154042_tktoqj.png"></p><p>Assume that the time required for A to send the packet is TD, which is obviously equal to the packet length divided by the data rate. Further assume that the processing time is negligible after the packet arrives correctly at B, while the acknowledgement is sent immediately. Assume that B takes time TA to send the acknowledgment packet. if A also takes negligible time to process the acknowledgment packet, then A can send the next packet only after time (TD + RTT + TA) has elapsed. Since only useful data is used for transmission within TD, the channel utilization U can be expressed as</p><script type="math/tex; mode=display">U = \frac{T_D}{T_D + RTT + T_A}</script><p>To improve transmission efficiency, instead of using the inefficient stop-and-wait protocol, the sender can use pipelined transmissions. Pipelining means that the sender can send multiple packets in succession without having to stop after each packet to wait for an acknowledgement from the other side.</p><p>When using pipelined transfers, continuous <strong>ARQ protocol</strong> and <strong>sliding window protocol</strong> are used.</p></li></ul><h3 id="Continuous-ARQ-protocol"><a href="#Continuous-ARQ-protocol" class="headerlink" title="Continuous ARQ protocol"></a>Continuous ARQ protocol</h3><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587196595/computer_network/微信截图_20200418155614_iod7dv.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587196595/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418155614_iod7dv.png"></p><p>The above figure indicates the sending window maintained by the sender, which means that all 5 packets located in the sending window can be sent out consecutively without waiting for an acknowledgement from the other party.</p><p>When discussing the sliding window, we should note that there is also a time coordinate in the graph. By convention, forward refers to the direction of increasing time, while backward refers to the direction of decreasing time. Grouped sends are sent from the smallest to the largest group number.</p><p>The continuous ARQ protocol specifies that the sender slides the sending window forward one packet position for each acknowledgment received.</p><p>The receiver generally adopts the <strong>cumulative acknowledgement</strong> method, which means that instead of sending an acknowledgement for each packet received, the receiver receives several packets and <strong>sends an acknowledgement</strong> for the last packet that arrives in order.</p><h2 id="TCP-message-segment-header"><a href="#TCP-message-segment-header" class="headerlink" title="TCP message segment header"></a>TCP message segment header</h2><p>Although TCP is byte-stream oriented, the data unit transmitted by TCP is the message segment. A TCP message segment is divided into two parts, the header and the data, and the entire function of TCP is reflected in the role of the fields in the header. Therefore, only by mastering the role of each field in the TCP header can you master the working principle of TCP.</p><p>The first 20 bytes of the TCP header are fixed, and the next 4n bytes are options to be added as needed.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587197557/computer_network/微信截图_20200418161217_djnuqg.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587197557/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418161217_djnuqg.png"></p><h3 id="Source-and-destination-ports"><a href="#Source-and-destination-ports" class="headerlink" title="Source and destination ports"></a>Source and destination ports</h3><p>Each takes up two bytes and writes the far port number and the destination port number, respectively.</p><h3 id="Serial-number"><a href="#Serial-number" class="headerlink" title="Serial number"></a>Serial number</h3><p>It takes up four bytes, and the range of serial number is [0, 2^32 - 1], and after the serial number increases to the maximum, it is using the modulo operation.</p><p>Each byte in a stream of bytes transferred in a TCP connection is numbered sequentially. The starting serial number of the entire stream of bytes to be transmitted must be set at connection establishment. The sequence number field in the header refers to the first byte sequence number of the data sent in this message segment.</p><h3 id="Confirmation-number"><a href="#Confirmation-number" class="headerlink" title="Confirmation number"></a>Confirmation number</h3><p>It takes up four bytes and is the <strong>sequence number</strong> of the first data byte of the next message segment expected to be received from the other party. For example, B correctly receives a message segment from A with a sequence number field value of 501 and a data length of 200 bytes, which indicates that B correctly receives the data sent by A up to sequence number 700. Therefore, B expects A’s next data number to be 701, so B sets the acknowledgement number to 701 in the acknowledgement message segment sent to A. In summary, <strong>if the acknowledgment number equals N, then all data up to serial number N-1 has been received correctly</strong>.</p><p>In general, it can be ensured that when the serial number is reused, the data of the old serial number has already reached the end point through the network.</p><h3 id="Data-Offset"><a href="#Data-Offset" class="headerlink" title="Data Offset"></a>Data Offset</h3><p>Occupying 4 bits, it indicates the TCP message segment header length. The data offset is necessary because there are also option fields of indeterminate length in the header. This field unit is <strong>32 bits (4 bytes)</strong>. Since the maximum number of 4-bit binary numbers that can be expressed is 15, the maximum data offset is 60 bytes.</p><h3 id="Reserved"><a href="#Reserved" class="headerlink" title="Reserved"></a>Reserved</h3><p>Occupies 6 bits, reserved for future use, currently set to 0</p><h3 id="Emergency-URG-URGent"><a href="#Emergency-URG-URGent" class="headerlink" title="Emergency URG (URGent)"></a>Emergency URG (URGent)</h3><p>When URG is 1, it indicates that the urgent pointer field is valid, which tells the system that there is urgent data in this message and should be transmitted as soon as possible instead of following the original queue book order. For example, if the user issues Ctrl + C from the keyboard when a remote control program is running and needs to be interrupted, these two characters will be stored at the end of the receiving TCP cache if no urgent data is used. Only after all the data has been processed are these two characters given to the receiving application.</p><p>When URG is set to 1, the sending application process tells the sender’s TCP that it has urgent data to send, so TCP inserts the urgent data at the top of the data in this message segment, which is then paired with another prefix field <strong>The urgent pointer field indicates the length of the urgent data, and then the rest of the data remains as normal data</strong>.</p><h3 id="Confirm-ACK"><a href="#Confirm-ACK" class="headerlink" title="Confirm ACK"></a>Confirm ACK</h3><p>The acknowledgement number field is valid only when ACK = 1, and invalid when ACK = 0. <strong>TCP specifies that all messages transmitted after the connection is established must have ACK set to 1</strong></p><h3 id="Forwarding-PSH-PuSH"><a href="#Forwarding-PSH-PuSH" class="headerlink" title="Forwarding PSH (PuSH)"></a>Forwarding PSH (PuSH)</h3><p>When two application processes communicate interactively, sometimes the application process at one end wants to receive a response from the other immediately after adding a command, and this is when a push operation can be used. In this case, the sender sets PSH to 1 and immediately creates a message segment to send out, and the receiver receives the message with PSH of 1 and hands it to the receiving process as soon as possible, instead of waiting for the cache to fill up before delivering it together.</p><h3 id="Reset-RST"><a href="#Reset-RST" class="headerlink" title="Reset RST"></a>Reset RST</h3><p>When a major error occurs, the connection must be released and a new one established. Or it can be used to reject an illegal message or refuse to open a connection.</p><h3 id="Synchronized-SYN"><a href="#Synchronized-SYN" class="headerlink" title="Synchronized SYN"></a>Synchronized SYN</h3><p>When SYN = 1 and ACK = 0, this is a connection request message, and if the other party agrees to establish a connection, SYN = 1 and ACK = 1 are used in the response message. Therefore, a SYN of 1 indicates that this is a <strong>connection request or a connection establishment message</strong>.</p><h3 id="Terminate-FIN"><a href="#Terminate-FIN" class="headerlink" title="Terminate FIN"></a>Terminate FIN</h3><p>Used to release a connection. When FIN = 1, it indicates that the sender data for this message segment should have been sent and requests the release of the transport connection.</p><p><strong>That means that in theory, the TCP connection will not be broken without sending a message with this field of 1. </strong></p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>Occupies 2 bytes and the window value is an integer between [0, 2^16 - 1]. The window value is the receive window of the party sending this message segment. The window value tells the other party: <strong>The amount of data (in bytes) that the receiver is currently allowing the other party to send, counting from the acknowledgement number at the beginning of this message segment</strong> The window value is used as a basis for the receiver to allow the sender to set its send window.</p><p>The window field specifies the amount of data the other party is allowed to send now, and the window value changes frequently.</p><h3 id="Test-and"><a href="#Test-and" class="headerlink" title="Test and"></a>Test and</h3><p>Occupies 2 bytes, the test and field test range includes the first part and data two parts. How to calculate the specific is more complex, interested in their own search</p><h3 id="Emergency-pointer"><a href="#Emergency-pointer" class="headerlink" title="Emergency pointer"></a>Emergency pointer</h3><p>Occupies 2 bytes, meaningful only when URG = 1, indicates the length of the urgent data in this message segment, <strong> when all urgent data are processed, normal operation will resume for the next normal data in this message segment</strong>.</p><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>Variable length, up to 40 bytes, when no option is used, the length of the first part is 20 bytes.</p><p>Initially, only the <strong>MSS (Maximum Segment Size)</strong> was specified. The MSS should be as large as possible, as long as the IP layer is transmitted without further fragmentation, but of course, because the path experienced by the IP layer is dynamically changing, this MSS is also very difficult to determine.</p><p>During connection establishment, both parties can write their supported MSS into this field and later transmit according to this field, both transmission directions can have different size MSS. if the host does not fill in this field, the default is 536 and all Internet hosts should be able to accept an MSS of 536 + 20 (fixed prefix length) = 556 bytes.</p><h2 id="Principle-of-TCP-reliable-transmission"><a href="#Principle-of-TCP-reliable-transmission" class="headerlink" title="Principle of TCP reliable transmission"></a>Principle of TCP reliable transmission</h2><h3 id="Sliding-window-in-bytes"><a href="#Sliding-window-in-bytes" class="headerlink" title="Sliding window in bytes"></a>Sliding window in bytes</h3><p>TCP’s sliding window is all in bytes. Suppose A receives an acknowledgement message segment from B, where the window value is 20 and the acknowledgement number is 31 (this indicates that the next sequence number B expects to receive is 31, and the data up to sequence number 30 has already been received). Based on these two pieces of data, A constructs its own send window.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587202028/computer_network/微信截图_20200418172540_by140j.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587202028/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418172540_by140j.png"></p><blockquote><p>There may be some people here who are suddenly a bit confused as I am. If you have to wait for B to return an acknowledgement of A each time before you can change the window position and size and then send the window data out, what is the difference between that and the stop-wait protocol? The difference I can see so far is that the window size may be much larger than the MSS, requiring multiple groupings to be sent out, and each acknowledgement does not mean that the entire window is acknowledged.</p></blockquote><p>For A’s send window, A can send all the data in the window continuously until an acknowledgement is received from B. Any data that has been sent must be temporarily stored until an acknowledgement is received, for use in timeout retransmissions.</p><p>The serial number inside the send window indicates the number of allowed sends. Obviously, the larger the window is, the more data the sender can send in succession before receiving an acknowledgement from the other party, thus obtaining higher data transmission efficiency.</p><p>The back part of the trailing edge of the send window means that the data has been sent and an acknowledgement has been received, and this data obviously does not need to be kept any longer. The leading part of the leading edge means that the sending is not allowed because the receiver has not reserved cache space for temporary storage of this data.</p><p>The position of the sending window is determined by both the leading edge and the trailing edge. There are two cases of changes in the trailing edge, i.e. not moving (no new acknowledgement received), and moving forward (new acknowledgement received). It is not possible for the trailing edge to move backward, because it is not possible to revoke an acknowledgement already received. The leading edge can keep moving forward, or it can be immobile. There are two cases of immobility, one is that no new confirmation is received, and the size of the window of more notifications is also unchanged, and the second is that a new confirmation is received, but the window of the other notification shrinks, which just makes the leading edge immobile. Of course the frontier can also shrink backward, but <strong>TCP standard strongly discourages doing so</strong>.</p><p>Now suppose A sends the data of serial numbers 31-41, the position of the sending window does not change at this time, the 11 bytes behind the window means that the acknowledgement has been sent but not received, and the 9 bytes in front means that the sending is allowed but not yet sent.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587203074/computer_network/微信截图_20200418174406_itnljo.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587203074/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418174406_itnljo.png"></p><p>As can be seen from the above figure, to describe the state of a send window requires three pointers, P1,P2,P3, less than P1 is the part that has been sent and received, and greater than P3 is the part that is not allowed to be sent.</p><p>The size of B’s receive window is 20. Outside the receive window, all data up to 30 has been acknowledged as sent and delivered to the host, so B can no longer retain this data. 31-50 is allowed to be received.</p><p>In the above diagram <strong>32,33 has been received by B, but not in order, because 31 has not been received, at this time B can only give an acknowledgement to the highest order number received in order, which means that the acknowledgement number in the message returned by B now is still 31</strong>.</p><p>If B receives number 31 and delivers 31-33 to the host, B deletes these data and moves the receive window forward by three serial numbers while sending an acknowledgement to A. The window value is 20 and the acknowledgement number is 34. After A receives it, P1,P3 move forward by three serial numbers and P2 remains unchanged.</p><p>Next, if A sends 42-53, <strong> pointers P2 and P3 overlap, the data in the window is sent, and no further acknowledgement is received, you need to stop sending</strong>.</p><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>The sender’s application process writes the byte stream to TCP’s send cache, and the receiver’s application reads the byte stream from TCP’s receive cache</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587209077/computer_network/微信截图_20200418192408_lz3rfp.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587209077/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418192408_lz3rfp.png"></p><p>To be clear: both cache space and serial numbers are limited and recycled.</p><p>The send cache is used to temporarily store:</p><ul><li>The sending application transmits to the sender the data that TCP is ready to send.</li><li>The part of TCP that has been sent but not yet acknowledged.</li></ul><p><strong>The send window is usually only part of the send cache and the acknowledged data should be removed from the send cache, so the trailing edges of the send cache and the send window are coincident</strong>. The last byte written to the send cache by the sending application minus the last byte acknowledged is the number of bytes still remaining in the send cache to be written.</p><p>The receive cache is used to temporarily store:</p><ul><li>Sequentially arriving data that has not yet been read by the receiving application</li><li>Data that did not arrive in order.</li></ul><p>If the application does not have time to read the received data, the receive cache will eventually fill up and the receive window will be reduced to 0.</p><p>Three additional points<strong> are emphasized here</strong>:</p><ul><li>Although A’s send window is set according to B’s receive window, <strong>at the same time, the size of A’s send window is not the same size as B’s receive window</strong>. Because there is a delay in the transmission of the network, and A’s sending window is also limited by the network congestion, when congestion occurs, the value of its own sending window should be reduced appropriately.</li><li>For data that arrives out of order, TCP usually stores the data that arrives out of order<strong> in a cache</strong> first, and then delivers it to the upper layer application process<strong> in order when the missing bytes are received in the byte stream</strong>.</li><li>TCP requires the receiver to have cumulative acknowledgements. The receiver can send an acknowledgement when appropriate or piggyback the acknowledgement when it has data to send itself, but the acknowledgement should be delayed no more than 0.5 seconds.</li></ul><h3 id="Selection-of-timeout-retransmission-time"><a href="#Selection-of-timeout-retransmission-time" class="headerlink" title="Selection of timeout retransmission time"></a>Selection of timeout retransmission time</h3><p>TCP’s timeout retransmission time uses an adaptive algorithm. It records the time when a message segment is sent and the time when the corresponding acknowledgement is received. The difference between these two times is the message segment round-trip time RTT, and TCP keeps a weighted average round-trip time RTT<sub>s</sub> , also known as <strong>smoothed round-trip time</strong>.</p><p>When the RTT sample is measured for the first time, the RTT<sub>s</sub> takes the value of the RTT sample value and is recalculated every time the RTT is received next:</p><p><u>New RTT<sub>s</sub> = (1 - α)<em> (old RTT<sub>s</sub>) + α </em> new RTT samples</u></p><p>where the alpha is recommended to be 0.125</p><p>Obviously the timeout retransmission time RTO (RetransmissionTime-Out) should be slightly greater than RTT<sub>s</sub>.</p><p><u>RTO = RTT<sub>s</sub> + 4 * RTT<sub>D</sub></u></p><p>RTT<sub>D</sub> is the weighted average of the deviations from RTT<sub>s</sub>. For the first measurement, RTT<sub>D</sub> takes the value of half of RTT, and the following algorithm is used next:</p><p><u>New RTT<sub>D</sub> = (1 - β)<em>(old RTT<sub>D</sub>) + β </em> |RTT<sub>s</sub> - new RTT samples|</u></p><p>The recommended value of β is 0.25</p><p>Now there is a problem, when the set retransmission time is up, still no acknowledgement is received, so the message is retransmitted and after some time an acknowledgement is received, <strong> how to confirm whether this acknowledgement is for the previously sent message or for the retransmitted message? </strong>, this has a big impact on the RTT<sub>s</sub> calculation.</p><p>For this case, the current approach is to increase the RTO to twice as much for each retransmission of the message</p><h3 id="Select-to-confirm-SACK"><a href="#Select-to-confirm-SACK" class="headerlink" title="Select to confirm SACK"></a>Select to confirm SACK</h3><p>If there is no error in the received message segment, but it just <strong>didn’t arrive in order</strong>, and there is some serial number data missing in the middle, <strong>can we find a way to transmit only the missing data and not the data that has been received correctly? </strong></p><p>The answer is yes, it is SACK, and here is just a brief explanation of the principle.</p><p>Suppose the received message sequence number is 1 - 1000,1501 - 3000,3501 - 4500, the middle is missing two parts, if <strong>these bytes of the sequence number are within the reception window </strong>, then first these data received, but to find a way to notify the sending send I have received.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587211176/computer_network/微信截图_20200418195848_xt17r1.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587211176/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418195848_xt17r1.png"></p><p>From the above figure we can see that every byte block that is not contiguous with the preceding and following bytes has two boundaries, and the figure uses L1, R1, L2,R2 to represent these four boundaries</p><p>We know that the TCP header does not have a field that can be populated with such boundary values.</p><p>If you want to use SACK you have to add <strong>allow SACK option</strong> to the header during the TCP establishment phase. If you confirm the use, the original usage of the acknowledgement number field remains the same, only the SACK option is added to the options. However, a maximum of 4 bytes of information is specified in the option, because the serial number has 32 bits and requires four bytes, a byte block requires two serial numbers and 8 bytes, while two bytes are required to specify which are SACK options, 4 byte blocks will use up 34 bytes, and the maximum option is 40 bytes, so adding another byte block will exceed it.</p><h2 id="TCP-Traffic-Control"><a href="#TCP-Traffic-Control" class="headerlink" title="TCP Traffic Control"></a>TCP Traffic Control</h2><p>So-called flow control is to keep the sender from sending too fast and the receiver from receiving in time.</p><p>Traffic control on the sender side can be easily implemented using sliding windows.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587211807/computer_network/微信截图_20200418200900_kruofd.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587211807/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418200900_kruofd.png"></p><p>The flow of the above diagram can be summarized as follows</p><ul><li>When the connection is established, B tells A: My receive window is rwnd = 400, so <strong>the sender’s send window cannot exceed the receive window given by the receiver</strong>. Note that the TCP window unit is bytes and not message segments.</li><li>Let the length of each message segment be 100 bytes, the initial sequence number be 1, ACK is the acknowledgement bit, and ack is the acknowledgement number.</li><li>B performed three flow controls, the first reducing rwnd to 300, the second to 100, and finally to 0.</li></ul><p>Think about a problem. If A sends a zero-window message segment shortly after B has space in its receive cache again and sends rwnd = 400 to A, but this message is lost, A keeps waiting for B to send a non-zero-window notification, and B keeps waiting for A’s data, a deadlock is created.</p><p>To solve this problem, TCP sets a persistent timer for each connection, and whenever the TCP side receives a zero-window notification, it turns on the timer, sends a probe message when it does, and breaks the deadlock if the result returned is not zero.</p><h3 id="Timing-of-sending-TCP-message-segments"><a href="#Timing-of-sending-TCP-message-segments" class="headerlink" title="Timing of sending TCP message segments"></a>Timing of sending TCP message segments</h3><p>The application process will transfer the data to the TCP send cache and leave the rest of the task to TCP. Different mechanisms can be used to control the timing of sending TCP message segments.</p><ul><li>The first one is to use MSS to encapsulate the data stored in the cache into a message segment and send it out as soon as the MSS is reached.</li><li>The second is the application specifying the send, such as PSH operations</li><li>The third is for the sender to set a timer and send the data in the cache packaged when the time comes.</li></ul><h2 id="Congestion-Control"><a href="#Congestion-Control" class="headerlink" title="Congestion Control"></a>Congestion Control</h2><p>In computer networks, link capacity, caches and processors in switching nodes are resources of the network. When the demand for a resource in the network exceeds the available portion of that resource, the network performance has to change, and this situation is called congestion.</p><p><strong>Congestion control is about preventing too much data from being injected into the network, which keeps the routers or links in the network from being overloaded</strong>.</p><p><strong>Congestion control is a global process</strong> that involves all hosts, routers and all factors related to degrading network transmission performance, while <strong>Traffic control</strong> often refers to the control of point-to-point traffic and is an <strong>end-to-end problem</strong>.</p><p>There are four congestion control algorithms for TCP, the very familiar <strong>slow start, congestion avoidance, fast retransmission, and fast recovery</strong>.</p><p>The sender maintains a value called the congestion window cwnd. The size of the congestion window depends on the congestion level of the network and is dynamically changing. The <strong>sender makes its sending window equal to the congestion window</strong>.</p><p>The principle of cwnd control on the sender side is to expand cwnd a bit as long as there is no congestion, and to reduce cwnd as long as there is congestion or the possibility of congestion, and <strong>the basis for determining that the network is congested is that there is a timeout</strong>.</p><h3 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h3><p>We also use this classic diagram to illustrate:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587214008/computer_network/微信截图_20200418204614_kprnwt.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587214008/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418204614_kprnwt.png"></p><p><strong>The idea of </strong>slow start** is this: when the host starts to send data, it is not clear about the load of the network, and if a large amount of data is injected into the network immediately, congestion may occur, so it increases the cwnd from small to large.</p><ul><li><p>When the messages are first sent, the congestion window cwnd is first set to 2 to 4 sender maximum message segments SMSS.</p></li><li><p>If no acknowledgement is received, cwnd is increased by up to one SMSS.</p><p>cwnd per increment = min(N, SMSS), N is the number of bytes of messages that were originally unacknowledged and just received in the acknowledgment segment of the acknowledgment message.</p></li></ul><p>We use the following example to illustrate the principle of slow start. For the sake of illustration , we use the number of message segments as the unit of cwnd, which should actually be the number of bytes.</p><ul><li><p>At the beginning, the sender sets cwnd to 1, sends the first message M1, and the receiver receives M1 and returns an acknowledgement. After the sender receives an acknowledgement from M1, it increases cwnd from 1 to 2. Then it sends M2 and M3, and after receiving an acknowledgement from both, cwnd increases from 2 to 4, which means that the slow start algorithm, <strong>with each transmission round elapsed, cwnd doubles</strong>. The elapsed time of one transmission round is actually an RTT</p></li><li><p>To prevent cwnd from growing too fast, a <strong>slow start threshold ssthresh</strong> also needs to be set.</p><ul><li>When cwnd &lt; ssthresh, the slow start algorithm is used.</li><li>When cwnd &gt; ssthresh, use congestion avoidance algorithm</li><li>Both are possible when cwnd = ssthresh.</li></ul><p>The idea of congestion avoidance is to make cwnd grow slower and let cwnd add 1 for every RTT passed. when cwnd grows to ssthresh (point 1 in the figure) change to congestion control algorithm from slow start.</p></li><li><p>After a timeout (point 2 in the figure), the sender determines that the network is congested and adjusts ssthresh = cwnd / 2, cwnd = 1 to re-enter the slow start.</p></li><li><p>Sometimes the sender receives three ACKs in a row (point 4 in the figure). This occurs because it is thought that sometimes, individual message segments are lost in the network, when in fact the network is not congested, and if the sender is late in receiving an acknowledgement, a timeout is generated and it is thought that congestion has occurred, which can lead to a false start of slow start by the sender. The use of the <strong>fast retransmission algorithm allows the sender to know early that individual messages are lost</strong>.</p><p>The fast retransmission algorithm requires the receiver not to wait for its own data to be sent before waiting for an acknowledgement, but to <strong>send an acknowledgement immediately</strong>. Repeat acknowledgements of received messages are sent immediately even if out-of-sequence messages are received. Suppose the receiver receives M1 and M2 and acknowledges them in time, now suppose the receiver does not receive M3 but receives M4, the receiver cumulatively confirms that it can only send an acknowledgement of M2, and then receives M5 and M6, and retransmits two more acknowledgements of M2 respectively, the sender receives a total of four acknowledgements of M2, three of which are duplicates, and knows that the receiver should initiate an immediate retransmission.</p></li><li><p>At point 4 in the figure, the sender, knowing that only individual segments of the message are lost, does not perform a slow start but a fast recovery with ssthresh = cwnd / 2, cwnd = ssthresh.</p></li></ul><p>The above process can constantly adjust the size of cwnd, thus the size of the send window will be controlled by the level of congestion, but in reality the receiver has limited cache space, the receiver sets rwnd (receiver window, aka notification window) according to its receiving capability and writes this value into the window field in the TCP header, from the receiver’s point of view, the sender’s send window cannot exceed rwnd, so <strong>the upper limit of the sender’s sending window should be the smallest of rwnd and cwnd</strong>.</p><h2 id="TCP-connection-management"><a href="#TCP-connection-management" class="headerlink" title="TCP connection management"></a>TCP connection management</h2><p>We’ve said from the beginning that TCP is connection-oriented, and much of its design is based on that premise to function properly, so how does TCP establish and maintain that connection?</p><p>There are three problems to be solved during the establishment of a TCP connection:</p><ul><li>To enable each party to confirm the presence of the other</li><li>To allow both parties to agree on some values, such as the maximum window value</li><li>Ability to allocate resources to the most transportable entities.</li></ul><h3 id="TCP-connection-establishment-three-handshakes"><a href="#TCP-connection-establishment-three-handshakes" class="headerlink" title="TCP connection establishment (three handshakes)"></a>TCP connection establishment (three handshakes)</h3><p>The process of establishing a TCP connection is called handshaking and requires the exchange of three TCP messages between the client and the server</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587215346/computer_network/微信截图_20200418210855_mpcozg.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587215346/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418210855_mpcozg.png"></p><ul><li>Initially both ends are closed, in the above diagram it is A that actively opens the connection and B that passively opens it.</li><li>At the beginning B’s TCP server creates the transport control block TCB, ready to accept connections from client processes, and then the server is in the LISTIN state.</li><li>A’s TCP client creates a TCB, and before establishing a connection, first sends a connection request message to B with synchronization bit SYN = 1, while selecting an initial sequence number seq = x. TCP specifies that SYN messages cannot carry data, but a sequence number is consumed and the TCP client enters the SYN-SENT state</li><li>After receiving the request message, B sends an acknowledgement to A if it agrees to establish a connection, sets both SYN and ACK to 1, ack to x + 1, and chooses an initial sequence number for itself seq = y. This message segment also cannot carry data, but consumes a sequence number.</li><li>The TCP client of A has to give an acknowledgement to B after receiving the acknowledgement from B. ACK is 1, ack = y + 1, seq = x + 1, and at this time, the ACK message segment can carry data. At this time, A has entered the ESTABLISHED state, and B has also entered the ESTABLISHED state after receiving the acknowledgement.</li></ul><p>The above process is called three handshakes, but the message segment sent by B to A can also be split into two message segments by sending an ACK = 1, ack = x + 1, and a synchronization message (SYN = 1, seq = y),<strong> which becomes four handshakes. </strong></p><p><strong>So why does A send an acknowledgement at the end? The main reason is to prevent connection request messages that have failed from suddenly arriving at B again</strong>. This situation generally arises after the first connection request message sent by A timeout, A again sent a request, B received a second request to complete the establishment of the connection and send data, after releasing the connection after the first request again, this time if B did not receive a second confirmation from A, it will not care about the first request.</p><h3 id="TCP-connection-release-four-waves"><a href="#TCP-connection-release-four-waves" class="headerlink" title="TCP connection release (four waves)"></a>TCP connection release (four waves)</h3><p>The release process is similar to the build process, except that it is more complex and uses a header field of FIN</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587216170/computer_network/微信截图_20200418212241_j13fkc.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587216170/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418212241_j13fkc.png"></p><ul><li><p>A’s application process first sends a connection release message to its TCP and stops sending data, actively closing the TCP connection</p></li><li><p>A sets the first field of the connection release message, FIN, to 1, with the sequence number seq = u, which is equal to the sequence number of the last byte of all data transmitted before it plus 1. At this point, A enters the FIN-WAIT-1 (abort-wait-1) state.</p></li><li><p>B receives the connection release message and sends an acknowledgement, ack = u + 1, with its own ordinal number seq = v, equal to the ordinal number of the last byte of data transmitted by B plus 1, and then B enters the CLOSE-WAIT (closed and waiting) state. At this point TCP enters a <strong>semi-closed state</strong>, i.e. A has no more data to send, but if B wants to send data, A can accept it, i.e. the connection from <strong>B to A is not closed</strong>.</p></li><li><p>A receives an acknowledgment hand from B and enters the FIN-WAIT-2 state, waiting for a release message from B.</p></li><li><p>If B has no more data to send, its application process notifies TCP to release the connection, at which point B sends a FIN message, seq = w (assuming B has sent some data in the semi-closed state), and ack remains u + 1.</p></li><li><p>After A receives the connection release message, it must send an acknowledgement for it, ACK = 1, ack = w + 1, seq = u + 1, and then enters the TIME-WAIT state. After the time set by the Time-WAIT timer (TIME-WAIT timer) of 2MSL, A enters the CLOSED state, MSL is called Maximum MSL is called Maximum Segment Lifetime (MSL).</p><p>There are two reasons for waiting this amount of time:</p><ul><li>It is guaranteed that the last ACK message sent by A reaches B. This message may be lost, so B may retransmit the last FIN message, at which time it is necessary for A to retransmit an acknowledgement and then restart the 2MSL timer.</li><li>Preventing the above-mentioned failed connections by waiting for 2MSL ensures that all messages generated during the duration of this connection disappear from the network.</li><li>In addition to the time waiting timer, there is a keepalive timer, the server did not receive a client data, it will reset it, the time is two hours, if two hours did not receive data, it will send a probe message, every 75 seconds to send a, if there is no reply for 10 consecutive, then close the connection.</li></ul></li></ul><h2 id="TCP’s-finite-state-machine"><a href="#TCP’s-finite-state-machine" class="headerlink" title="TCP’s finite state machine"></a>TCP’s finite state machine</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587217099/computer_network/微信截图_20200418213810_lbd6iv.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587217099/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418213810_lbd6iv.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Features&quot;&gt;&lt;a href=&quot;#Features&quot; class=&quot;headerlink&quot; title=&quot;Features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TCP is a &lt;strong&gt;connection-oriented&lt;/strong&gt; transport layer protocol. That is, a TCP connection must be established before an application can use it. After the data is transferred, the TCP connection must be released.&lt;/li&gt;
&lt;li&gt;Each TCP connection can only have two endpoints, and each TCP connection is &lt;strong&gt;point-to-point&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;TCP provides &lt;strong&gt;reliable delivery service&lt;/strong&gt;, which means that data is error-free, not lost, not duplicated, and arrives in order.&lt;/li&gt;
&lt;li&gt;TCP provides &lt;strong&gt;full-duplex communication&lt;/strong&gt;, allowing both sides of the communication to send data at any time.&lt;strong&gt; Both sides of TCP have a send cache and a receive cache&lt;/strong&gt;, which are used to temporarily store data for both sides of the communication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Byte-stream-oriented&lt;/strong&gt; The term &lt;strong&gt;“stream “&lt;/strong&gt; in TCP refers to the sequence of bytes&lt;strong&gt; flowing into and out of a process. Byte-stream oriented means that although the application and TCP interact one block at a time, TCP sees the data handed off by the application as just a sequence of &lt;/strong&gt;unstructured byte streams**. TCP does not know the meaning of the byte stream being transmitted, nor does it guarantee that the size of the block received by the receiver corresponds to the size of the block sent by the sender. It is possible to send and send 10 blocks of data to the upper layer and have it organized into 4 blocks on the receiving side.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/en/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Devil&#39;s Dichotomy Lookup</title>
    <link href="https://sunra.top/en/posts/e421a043/"/>
    <id>https://sunra.top/en/posts/e421a043/</id>
    <published>2020-04-05T01:57:54.000Z</published>
    <updated>2023-06-07T12:40:51.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>Knuth (who invented the KMP algorithm) said that dichotomous lookups are simple, but the details are the devil**. Many people like to talk about the integer overflow bug, but the real pitfall of dichotomous lookup is not that detail at all, but whether to add one or subtract one to <code>mid</code>, and whether to use <code>&lt;=</code> or <code>&lt;</code> in while.</p><p>If you do not have a proper understanding of these details, writing dichotomous is certainly metaphysical programming, there is no bug can only rely on the blessing of God.</p><span id="more"></span><h3 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;<span class="comment">// 可有效防止left + right溢出</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Find-a-number"><a href="#Find-a-number" class="headerlink" title="Find a number"></a>Find a number</h3><p>This scenario is the simplest and probably the most familiar, i.e., search for a number and return its index if it exists, otherwise return -1.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.length - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1. Why is &lt;= in the condition of the while loop instead of &lt;</strong>?</p><p>A: Because the assignment to initialize <code>right</code> is <code>nums.length - 1</code>, which is the index of the last element, not <code>nums.length</code>.</p><p>The difference between these two, which may occur in dichotomous lookups with different functions, is that <strong> the former corresponds to the closed interval <code>[left, right]</code> at both ends, while the latter corresponds to the left-closed, right-open interval <code>[left, right)</code>, since the index size of <code>nums.length</code> is out of bounds. </strong></p><p>We use in this algorithm the interval where the former <code>[left, right]</code> is closed at both ends. <strong>This interval is actually the interval where the search is performed each time</strong>.</p><p>When should I stop the search? Of course, it can be terminated when the target value has been found:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(nums[mid] target)</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br></pre></td></tr></table></figure><p>But if you don’t find it, you need the while loop to terminate and return -1. When should the while loop terminate? <strong>The loop should terminate when the search interval is empty</strong>, which means you have nothing to find, which means you didn’t find it.</p><p>The termination condition of <code>while(left &lt;= right)</code> is <code>left right + 1</code>，写成区间的形式就是 <code>[right + 1, right]</code>，或者带个具体的数字进去 <code>[3, 2]</code>，可见<strong>这时候区间为空</strong>，因为没有数字既大于等于 3 又小于等于 2 的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。</p><p>The termination condition of <code>while(left &lt; right)</code> is <code>left right</code>，写成区间的形式就是 <code>[left, right]</code>，或者带个具体的数字进去 <code>[2, 2]</code>，<strong>这时候区间非空</strong>，还有一个数 2，但此时 while 循环终止了。也就是说这区间 <code>[2, 2]</code> 被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就是错误的。</p><p>Of course, if you have to use <code>while(left &lt; right)</code> that’s fine, we already know what’s going wrong, so let’s just patch it:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[left] target ? left : <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p><strong>In summary, if right is length - 1 at the beginning, then you need to let the case left = right be searched as well. If right is length at the beginning, the critical case left = right is actually out of the valid range of the array</strong></p><p><strong>2. Why <code>left = mid + 1</code>, <code>right = mid - 1</code>? I see some code is <code>right = mid</code> or <code>left = mid</code>, there is no such addition and subtraction, what is going on and how to determine </strong>?</p><p>A: This is also a difficult part of the dichotomous search, but as long as you can understand the previous content, you will be able to easily determine.</p><p>We have just clarified the concept of <code>search interval&#39;, and the search interval of this algorithm is closed at both ends, i.e.,</code>[left, right]<code>. So when we find that the index</code>mid<code>is not the</code>target` we are looking for, where should we search next?</p><p>Of course it goes to search <code>[left, mid-1]</code> or <code>[mid+1, right]</code>, right? <strong>Because <code>mid</code> has already been searched and should be removed from the search interval</strong>.</p><p><strong>3. What are the flaws of this algorithm</strong>?</p><p>A: At this point, you should have all the details of the algorithm and the reasons for treating it this way. However, there are limitations to this algorithm.</p><p>Let’s say you are given the ordered array <code>nums = [1,2,2,2,3]</code> and <code>target</code> is 2, this algorithm returns an index of 2, yes. But if I want to get the left-hand side of <code>target</code>, which is index 1, or if I want to get the right-hand side of <code>target</code>, which is index 3, then this algorithm can’t handle that.</p><p>This is a very common requirement, <strong> you may say, find a target, and then search linearly left or right, can’t you? Yes, but it’s not good, because it’s hard to guarantee the complexity of a dichotomous search on a logarithmic scale</strong>.</p><h3 id="Dichotomous-lookup-to-find-the-left-hand-boundary"><a href="#Dichotomous-lookup-to-find-the-left-hand-boundary" class="headerlink" title="Dichotomous lookup to find the left-hand boundary"></a>Dichotomous lookup to find the left-hand boundary</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">left_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.length; <span class="comment">// 注意</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 注意</span></span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; <span class="comment">// 注意</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1. Why is <code>&lt;</code> in while instead of <code>&lt;=</code></strong>?</p><p>A: The same way, because <code>right = nums.length</code> instead of <code>nums.length - 1</code>. So the <code>search interval</code> of each loop is <code>[left, right)</code> left closed and right open.</p><p><code>while(left &lt; right)</code> terminates with the condition <code>left right</code>，此时搜索区间 <code>[left, left)</code> 为空，所以可以正确终止。</p><p><strong>2. Why is there no operation that returns -1? What if the value <code>target</code> does not exist in <code>nums</code></strong>?</p><p>A: Because we have to take one step at a time, let’s first understand what the special meaning of this “left border” is:</p><p>For this array, the algorithm returns 1. The meaning of this 1 can be interpreted as follows: there is 1 element in <code>nums</code> that is less than 2.</p><p>For example, for the ordered array <code>nums = [2,3,5,7]</code>, <code>target = 1</code>, the algorithm will return 0, meaning that there are 0 elements in <code>nums</code> that are less than 1.</p><p>If we say <code>nums = [2,3,5,7], target = 8</code>, the algorithm will return 4, meaning that there are 4 elements in <code>nums</code> that are less than 8.</p><p>As you can see above, the return value of the function (i.e. the value of the <code>left</code> variable) takes the closed interval <code>[0, nums.length]</code>, so we can simply add two lines of code to return -1 at the right time:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// target is larger than all numbers</span></span><br><span class="line"><span class="keyword">if</span> (left nums.<span class="property">length</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// Similar processing to the previous algorithm</span></span><br><span class="line"><span class="keyword">return</span> nums[left] target ? left : -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>3. Why <code>left = mid + 1</code> and <code>right = mid</code>? is not the same as the previous algorithm</strong>?</p><p>A: This is easy to explain, because our <code>search interval&#39; is</code>[left, right)<code>closed left and open right, so when</code>nums[mid]<code>is detected, the next search interval should be split into two intervals by removing</code>mid<code>, i.e.</code>[left, mid)<code>or</code>[mid + 1, right)`.</p><p><strong>4. Why is the algorithm able to search the left-hand side boundary</strong>?</p><p>A: The key is that for <code>nums[mid] target</code> 这种情况的处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[mid] target)</span><br><span class="line">    right = mid;</span><br></pre></td></tr></table></figure><p>It can be seen that, instead of returning immediately when the target is found, the upper bound <code>right</code> of the <code>search interval</code> is narrowed, and the search continues in the interval <code>[left, mid)</code>, i.e., it keeps shrinking to the left to lock the left boundary.</p><p><strong>5. Why does it return <code>left</code> instead of <code>right</code></strong>?</p><p>A: It’s the same, because the while termination condition is <code>left right</code>。</p><p><strong>6、Can you find a way to turn <code>right</code> into <code>nums.length - 1</code>, that is, continue to use both sides of the closed <code>search interval</code>? This way you can and the first dichotomous search in some way unified </strong>.</p><p>A: Of course you can, as long as you understand the concept of “search interval”, you can effectively avoid missing elements, you can change it any way you want. The following we modify strictly according to the logic:</p><p>Since you have to make both ends of the search interval closed, <code>right</code> should be initialized to <code>nums.length - 1</code> and the terminating condition while should be <code>left right + 1</code>，也就是其中应该用 <code>&lt;=</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int <span class="title function_">left_bound</span>(<span class="params">int[] nums, int target</span>) &#123;</span><br><span class="line">    <span class="comment">// The search interval is [left, right]</span></span><br><span class="line">    int left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        int mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// if else ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because the search interval is closed at both ends and is now searching the left-hand boundary, the update logic for <code>left</code> and <code>right</code> is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">    <span class="comment">// The search interval becomes [mid+1, right]</span></span><br><span class="line">    left = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">    <span class="comment">// The search interval becomes [left, mid-1]</span></span><br><span class="line">    right = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">    <span class="comment">// Shrink the right border</span></span><br><span class="line">    right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since the exit condition of while is <code>left right + 1</code>，所以当 <code>target</code> 比 <code>nums</code> 中所有元素都大时，会存在以下情况使得索引越界：</p><p><a href="https://github.com/Sun668/fucking-algorithm/blob/master/pictures/二分查找/2.jpg"><img src="https://github.com/Sun668/fucking-algorithm/raw/master/pictures/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/2.jpg" alt="img"></a></p><p>Therefore, the code that finally returns the result should check for out-of-bounds:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (left &gt;= nums.<span class="property">length</span> || nums[left] != target)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> left;</span><br></pre></td></tr></table></figure><p>At this point, the entire algorithm is written, and the complete code is as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int <span class="title function_">left_bound</span>(<span class="params">int[] nums, int target</span>) &#123;</span><br><span class="line">    int left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// The search interval is [left, right]</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        int mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            <span class="comment">// The search interval becomes [mid+1, right]</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            <span class="comment">// The search interval becomes [left, mid-1]</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">            <span class="comment">// Shrink the right border</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Check for out-of-bounds conditions</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= nums.<span class="property">length</span> || nums[left] != target)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will be unified with the first dichotomous search algorithm, both ends are closed “search interval”, and the final return is also the value of the <code>left</code> variable. As long as the logic of the dichotomous search, the two forms you see which one you like to remember which it.</p><h3 id="Dichotomous-lookup-to-find-the-right-hand-side-boundary"><a href="#Dichotomous-lookup-to-find-the-right-hand-side-boundary" class="headerlink" title="Dichotomous lookup to find the right-hand side boundary"></a>Dichotomous lookup to find the right-hand side boundary</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int <span class="title function_">right_bound</span>(<span class="params">int[] nums, int target</span>) &#123;</span><br><span class="line">    int left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        int mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">            <span class="comment">// Just change it here to shrink the left border</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Here it is changed to check for right out of bounds, see the figure below</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; <span class="number">0</span> || nums[right] != target)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Link to original article:<a href="https://github.com/labuladong/fucking-algorithm/blob/master/算法思维系列/二分查找详解.md">二分法详解</a></p><h2 id="Dichotomous-variants-updated-2021-04-08"><a href="#Dichotomous-variants-updated-2021-04-08" class="headerlink" title="Dichotomous variants (updated 2021.04.08)"></a>Dichotomous variants (updated 2021.04.08)</h2><p>Today’s leetcode question of the day is a dichotomy question, but different from the above dichotomy, here is an updated record</p><p>这是题目链接：<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/</a></p><p>Here I will use the official solution directly to answer the question, except that it will be explained in more detail</p><p>An ascending array without duplicate elements, after rotation, gives the following visualization of a line graph:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1617885648/origin-of-ray/1_nmfrw2.png" alt=""></p><p>The horizontal axis represents the subscripts of the array elements and the vertical axis represents the values of the array elements. The position of the minimum value is marked in the figure and is the target we need to find.</p><p>We consider the last element of the array xx: the elements to the right of the minimum (excluding the last element itself) must all have values strictly less than xx, while the elements to the left of the minimum must all have values strictly greater than xx. Thus, we can find the minimum by means of a dichotomous lookup based on this property.</p><p>In each step of the dichotomous lookup, the left boundary is low, the right boundary is high, and the midpoint of the interval is pivot, within which the minimum value lies. We compare the middle element nums[pivot] with the right boundary element nums[high], and there are three possible cases:</p><p>The first case is nums[pivot] &lt; nums[high]. As shown in the figure below, this means that nums[pivot] is the element to the right of the minimum, so we can ignore the right half of the dichotomous lookup interval.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1617885675/origin-of-ray/2_anlru2.png" alt=""></p><p>The second case is nums[pivot]&gt;nums[high]. As shown in the figure below, this means that nums[pivot] is the element to the left of the minimum, so we can ignore the left half of the dichotomous lookup interval.</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1617885701/origin-of-ray/3_wizs40.png" alt=""></p><p>Since the array does not contain duplicate elements, and as long as the current interval length is not 1, pivot will not coincide with high; and if the current interval length is 11, this means that we can already end the binary lookup. So there is no case where nums[pivot]=nums[high].</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findMin = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> high = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">const</span> pivot = low + <span class="title class_">Math</span>.<span class="title function_">floor</span>((high - low) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[pivot] &lt; nums[high]) &#123;</span><br><span class="line">            high = pivot;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = pivot + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[low];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="A-few-questions"><a href="#A-few-questions" class="headerlink" title="A few questions"></a>A few questions</h3><p>After reading those explanations above, you may think you understand, but there are still a few issues we need to think about:</p><ul><li><p>What is the search interval</p><blockquote><p>According to the principle part, since high = nums.length - 1, the search interval is [low, high]</p></blockquote></li><li><p>Why is it executed when low &lt; high, i.e. why is it not necessary to determine when low = high?</p><blockquote><p>This is because when low = high, the length of the interval is 1, so the minimum value is this unique value, so just return it</p></blockquote></li><li><p>Why is it comparing pivot and high instead of low</p><blockquote><p>The values at the left, center and right positions are compared in the following ways:</p><p>left &lt; median, median &lt; right : no rotation, the minimum value is on the leftmost side, you can shrink the right boundary</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Right</span><br><span class="line">Medium</span><br><span class="line">Left</span><br></pre></td></tr></table></figure><p>left &gt; median, median &lt; right : there is rotation, the minimum value is on the left half, you can shrink the right boundary</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Left</span><br><span class="line">Right</span><br><span class="line">Medium</span><br></pre></td></tr></table></figure><p>left &lt; median, median &gt; right : there is a rotation, the minimum value is in the right half, you can shrink the left border</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Medium</span><br><span class="line">Left</span><br><span class="line">Right</span><br></pre></td></tr></table></figure><p>left &gt; median, median &gt; right : monotonically decreasing, not possible</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Left</span><br><span class="line">Medium</span><br><span class="line">Right</span><br></pre></td></tr></table></figure><p>We can analyze the above cases and compare the median and right values in just two cases. The median value is greater than the left value has to be divided into two more cases</p></blockquote></li><li><p>Why does high = pivot and low = pivot + 1 when narrowing the interval</p><blockquote><p>Because when <code>nums[pivot] &lt; nums[high]</code>, this <code>nums[pivot]</code> is still possible to be the minimum, so pivot is still in the search interval. And when <code>nums[pivot] &gt; nums[high]</code>, <code>nums[pivot]</code> can’t be the minimum</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Principle&quot;&gt;&lt;a href=&quot;#Principle&quot; class=&quot;headerlink&quot; title=&quot;Principle&quot;&gt;&lt;/a&gt;Principle&lt;/h2&gt;&lt;p&gt;Knuth (who invented the KMP algorithm) said that dichotomous lookups are simple, but the details are the devil**. Many people like to talk about the integer overflow bug, but the real pitfall of dichotomous lookup is not that detail at all, but whether to add one or subtract one to &lt;code&gt;mid&lt;/code&gt;, and whether to use &lt;code&gt;&amp;lt;=&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; in while.&lt;/p&gt;
&lt;p&gt;If you do not have a proper understanding of these details, writing dichotomous is certainly metaphysical programming, there is no bug can only rely on the blessing of God.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Backtracking Algorithm</title>
    <link href="https://sunra.top/en/posts/376d0826/"/>
    <id>https://sunra.top/en/posts/376d0826/</id>
    <published>2020-03-28T01:23:47.000Z</published>
    <updated>2023-06-07T12:40:51.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>Recently, I encountered several backtracking algorithms when I was doing problems, and each time I tried them out slowly, so I went to find out if there was any abstract ideas that I could refer to, so I looked for many articles, and here is an excerpt of the most basic but also the most clear article, the original link is <a href="https://leetcode-cn.com/problems/">this</a> permutations/solution/hui-su-suan-fa-xiang-jie-by-labuladong-2/).</p><p>Solving a backtracking problem is actually a decision tree traversal process. You only need to think about 3 questions:</p><ol><li><p>Path: that is, the choices that have been made.</p></li><li><p>The list of choices: that is, the choices you can currently make.</p></li></ol><p>3, the end condition: that is, the condition that you can no longer make a choice when you reach the bottom of the decision tree.</p><span id="more"></span><p>If you don’t understand the explanation of these three terms, it’s okay, we will use the classic backtracking algorithm problems of “Full Alignment” and “N Queen Problem” later to help you understand what these terms mean, for now you stay impressed.</p><p>In terms of code, the framework of the backtracking algorithm:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">path, <span class="built_in">list</span> of choices</span>).</span><br><span class="line">    <span class="keyword">if</span> end condition <span class="keyword">is</span> met.</span><br><span class="line">        result.add(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> selection <span class="keyword">in</span> selection <span class="built_in">list</span>.</span><br><span class="line">        Make a selection</span><br><span class="line">        backtrack(path, selection <span class="built_in">list</span>)</span><br><span class="line">        Undo selection</span><br></pre></td></tr></table></figure><p>The core of this is the recursion inside the for loop, “do selection” before the recursive call, and “undo selection” after the recursive call, it is very simple.</p><p>What do you mean by “choose” and “undo”, and what is the underlying principle of this framework? Here we will unravel the previous doubts through the problem of “full alignment” and explore the mystery in detail!</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Full-alignment-problem"><a href="#Full-alignment-problem" class="headerlink" title="Full alignment problem"></a>Full alignment problem</h3><p>We have done math problems with permutations in high school, and we know that there are n non-repeating numbers, and there are n!</p><p>PS: For the sake of simplicity and clarity, we are discussing the full permutation problem without repeating numbers.</p><p>So how did we exhaust the full permutations then? Let’s say you are given three numbers [1,2,3], you will not exhaust them in a random way, but generally as follows:</p><p>First fixed the first for 1, then the second can be 2, then the third can only be 3; then you can turn the second into 3, the third can only be 2; then you can only change the first, into 2, and then exhaust the last two ……</p><p>In fact, this is the backtracking algorithm, we will use it in high school without any teacher, or some students directly draw this backtracking tree as follows:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032281/origin-of-ray/微信截图_20201215193732_x2lnqw.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032281/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215193732_ x2lnqw.png"></p><p>Just traverse this tree from the root and record the numbers on the path, which are actually all the full permutations. We might call this tree the “decision tree” of the backtracking algorithm.</p><p>Why do you call this a decision tree? Because you are actually making decisions at each node. Let’s say you are standing on the red node in the following figure:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032359/origin-of-ray/微信截图_20201215193902_cao7zo.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032359/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215193902_ cao7zo.png"></p><p>You’re making a decision right now. You can choose either the 1 branch or the 3 branch. Why can you only choose between 1 and 3? Because the 2 branch is behind you, you’ve done this before, and full alignment doesn’t allow reuse of numbers.</p><p>Now we can answer the first few terms: [2] is the “path”, which records the choices you have already made; [1,3] is the “choice list”, which indicates the choices you can currently make; “end condition” is the traversal to the bottom of the tree, in this case when the choice list is empty.</p><p>If you understand these terms, you can use the “path” and “choice” lists as attributes of each node in the decision tree, for example, the following figure lists the attributes of several nodes:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032609/origin-of-ray/微信截图_20201215194319_ri7upg.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032609/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215194319_ ri7upg.png"></p><p>The backtrack function we defined is actually like a pointer that wanders around the tree while maintaining the properties of each node correctly, and whenever it goes to the bottom of the tree, its “path” is a full alignment.</p><p>Further, how to traverse a tree? This should not be difficult. Recall that the previous “framework for learning data structure thinking” wrote that various search problems are actually tree traversal problems, and the traversal framework of multinomial trees is as follows:</p><p>void traverse(TreeNode root) {<br>    for (TreeNode child : root.child)<br>        // The operations needed for a preorder traversal<br>        traverse(child).<br>        // operation needed for post-order traversal<br>}<br>And the so-called preorder traversal and postorder traversal, they are just two very useful points in time</p><p>Pre-order traversal code is executed at the point in time before entering a node, and post-order traversal code is executed at the point in time after leaving a node.</p><p>To recall what we just said, “path” and “selection” are properties of each node, and for the function to properly maintain the properties of the node as it wanders through the tree, it has to do something at these two special times:</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032818/origin-of-ray/微信截图_20201215194648_rfi3ci.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032818/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215194648_ rfi3ci.png"></p><p>Now, do you understand this core framework of the backtracking algorithm?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for select in Select list.</span><br><span class="line">    # Make a choice</span><br><span class="line">    Remove the selection from the selection list</span><br><span class="line">    path.add(selection)</span><br><span class="line">    backtrack(path, selection list)</span><br><span class="line">    # Undo the selection</span><br><span class="line">    path.remove(selection)</span><br><span class="line">    Add the selection to the selection list again</span><br></pre></td></tr></table></figure><p>We just need to make the selection before the recursion and undo the selection we just made after the recursion to get the correct list of selections and paths for each node.</p><p>Own implementation of the JavaScript code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">swap</span> = (<span class="params">nums, i, j</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = nums[i].</span><br><span class="line">    nums[i] = nums[j].</span><br><span class="line">    nums[j] = temp.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generate</span> = (<span class="params">nums, output, n, first</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (first === n) &#123;</span><br><span class="line">        output.<span class="title function_">push</span>([. .<span class="property">nums</span>]).</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = first; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="title function_">swap</span>(nums, i, first).</span><br><span class="line">        <span class="title function_">generate</span>(nums, output, n, first + <span class="number">1</span>).</span><br><span class="line">        <span class="title function_">swap</span>(nums, i, first).</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permute = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> output = [].</span><br><span class="line">    <span class="title function_">generate</span>(nums, output, nums.<span class="property">length</span>, <span class="number">0</span>).</span><br><span class="line">    <span class="keyword">return</span> output.</span><br><span class="line">&#125;.</span><br></pre></td></tr></table></figure><p>Notes:</p><p>The pictures in this article are from labuladong public</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Principle&quot;&gt;&lt;a href=&quot;#Principle&quot; class=&quot;headerlink&quot; title=&quot;Principle&quot;&gt;&lt;/a&gt;Principle&lt;/h2&gt;&lt;p&gt;Recently, I encountered several backtracking algorithms when I was doing problems, and each time I tried them out slowly, so I went to find out if there was any abstract ideas that I could refer to, so I looked for many articles, and here is an excerpt of the most basic but also the most clear article, the original link is &lt;a href=&quot;https://leetcode-cn.com/problems/&quot;&gt;this&lt;/a&gt; permutations/solution/hui-su-suan-fa-xiang-jie-by-labuladong-2/).&lt;/p&gt;
&lt;p&gt;Solving a backtracking problem is actually a decision tree traversal process. You only need to think about 3 questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Path: that is, the choices that have been made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The list of choices: that is, the choices you can currently make.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3, the end condition: that is, the condition that you can no longer make a choice when you reach the bottom of the decision tree.&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/en/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Azure Key Vault</title>
    <link href="https://sunra.top/en/posts/dfbc1109/"/>
    <id>https://sunra.top/en/posts/dfbc1109/</id>
    <published>2019-11-30T05:08:46.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>Azure Key Vault is a tool for securely storing and accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, or certificates. A vault is logical group of secrets.</p><span id="more"></span><p>The above paragraph is the description of the official Azure documentation. After reading the Microsoft Azure documentation, the author extracted and summarized the basic concepts, and added some of his own understanding to the original text. After reading the Chinese version, you can have a general understanding of key vault. The original English version is a more professional description, which does not affect the understanding.</p><h2 id="What-is-Azure-Key-Vault"><a href="#What-is-Azure-Key-Vault" class="headerlink" title="What is Azure Key Vault"></a>What is Azure Key Vault</h2><p>In simple terms, Azure Key Vault is a place where you can store your sensitive data securely, and you have to pass the identity verification and permission verification to get this data, so we can put sensitive information like certificates, database configuration, etc. here without hard-coding it into the code. When we store the sensitive information on the key vault, we will get the corresponding name, we just need to go to the key vault through the api to get the corresponding information by name (you can also add the version information), this information can be the key (only get public key), certificate information, or some configuration information. Of course, this information is not anyone directly to call the api can get, but you need your Identity information is used to create the Key Vault by the Tenant under the Subscription recognized, there are many ways to get recognized, can be through the id-token, or password, etc..</p><p>Azure Key Vault helps solve the following problems:</p><ul><li><strong>Secret Management</strong> - Azure Key Vault can be used to securely store and tightly control access to tokens, passwords, certificates, API keys and other secrets.</li><li><strong>Key Management</strong> - Azure Key Vault can also be used as a key management solution. Use Azure Key Vault to easily create and control the encryption keys used to encrypt your data.</li><li><strong>Certificate Management</strong> - Azure Key Vault is also a service that enables you to easily provision, manage and deploy public and private Secure Socket Layer / Transport Layer Security (SSL / TLS) certificates for use with Azure and on-premise connected resources.</li><li><strong>Storage is supported by a hardware security module</strong> Confidential-Secret and keys can be protected by software or FIPS 140-2 Level 2 validated HSM.</li></ul><p>With Azure Key Vault, you can centrally store confidential application data and control the distribution of that data. And because developers can eliminate the need to hard-code security information into their applications, they can greatly improve the security of their applications.</p><p>Information stored in Azure Key Vault is preserved with reliable encryption algorithms.</p><p>Azure Key Vault can also control access based on Azure AD, and can record who accessed which data at which time.</p><h2 id="Azure-Key-Vault-basic-concepts"><a href="#Azure-Key-Vault-basic-concepts" class="headerlink" title="Azure Key Vault basic concepts"></a>Azure Key Vault basic concepts</h2><ul><li><strong>Tenant/Tenant</strong> ( <strong>Tenant</strong> ): A tenant is an organization that owns and manages a specific instance of a Microsoft cloud service. Most commonly used to refer to an organization’s Azure and Office 365 service set.</li><li><strong>Vault owner</strong>: The vault owner can create a key vault and gain full access and control over it. The vault owner can also set up auditing to record who has access to the secrets and keys. Administrators can control the key lifecycle. They can roll over to a new version of the key, make backups and perform related tasks.</li><li><strong>Vault consumer</strong> ( <strong>Vault consumer</strong> ): <strong>Vault consumer</strong> can perform operations on the assets in the key vault when the vault owner grants the user access. The available operations depend on the privileges granted.</li><li><strong>Resources</strong> ( <strong>Resource</strong> ): Resources are items that can be managed through Azure. Common examples include virtual machines, storage accounts, web applications, databases, and virtual networks. And many more.</li><li><strong>Resource group</strong> ( <strong>Resource group</strong> ): A resource group is a container that contains the resources associated with an Azure solution. A resource group can contain all the resources of the solution, or it can contain only the resources that you want to manage as a group. You can decide how to assign resources to a resource group based on the decisions that make the most sense for your organization.</li><li><strong>Service principal</strong>: An Azure service principal is a secure identity that is used by user-created applications, services and automation tools to access specific Azure resources. It can be thought of as a “user identity” (username, password, or credentials) with specific roles and tightly controlled permissions. Unlike a general user identity, a service subject only needs to do certain things. Security can be improved if it is granted only the minimum level of privileges needed to perform administrative tasks.</li><li>Azure Active Directory (Azure AD): Azure AD is a tenant’s Active Directory service. Each directory has one or more domains. A directory can have many subscriptions associated with it, but only one tenant. Each organization can have one tenant, which has its own ID to identify itself, and each Tenant has its own one or more SubScriptions, and the Subscriptions are in a many-to-one relationship with the Azure AD directory. Each person can go to Azure to apply for their own account, this account is called Identity on Azure, each Identity can create Azure AD account. if your Azure AD account in a Tenant’s Azure AD directory, and the Tenant granted you If your Azure AD account is in a Tenant’s Azure AD directory, and the Tenant grants you access to a Subscription, you can use the Services under that Subscription. directory-whatis)</li><li><strong>Azure Tenant ID</strong> ( <strong>Azure tenant ID</strong> ): The tenant ID is a unique way to identify an Azure AD instance in an Azure subscription.</li><li><strong>Managed identities</strong> ( <strong>Managed identities</strong> ): Azure Key Vault provides a way to securely store credentials and other keys and secrets, but your code needs to be authenticated through Key Vault to retrieve them. By using a managed identity, you can simplify the steps to resolve this issue by providing an automated managed identity for Azure services in Azure AD. You can use this identity to authenticate against Key Vault or any service that supports Azure AD authentication, without having to include any credentials in your code.</li></ul><p><strong>Anybody with an Azure subscription can create and use key vaults</strong>. Although Key Vault benefits developers and security administrators, it can be implemented and managed by an organization’s administrator who manages other Azure services.</p><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p> This section focuses on how Azure Key Vault ensures that your information can only be seen by those you authorize to see it.</p><p>There are two levels of Key Vault management, which correspond to two access models. The first level is called management plane, and this level of relationship can operate on the Key Vault itself, and can create and delete a Key Vault. However, regardless of the level, the identity verification is achieved through Azure AD, which determines what kind of operations a user can do to the Key Vault through <strong>Role Based Access Control (RBAC)</strong>.</p><p>RBAC made under different levels only applies to users under that level, for example, the RBAC you make under the level of Subscription only applies to users under that Subscription.</p><p>At the same time for the secret, key, certificate permissions management is separate, that is to say, you the same Subscription under the user in the same Key Vault may have access to the secret, but for the key but not.</p><p>You need to protect encryption keys and secrets like certificates, connection strings, and passwords in the cloud so you are using Azure Key Vault. Since you are storing sensitive and business critical data, you need to take steps to maximize the security of your vaults and the data stored in them.</p><h3 id="Identity-and-access-management"><a href="#Identity-and-access-management" class="headerlink" title="Identity and access management"></a>Identity and access management</h3><p>When you create a key vault in an Azure subscription, it’s automatically associated with the Azure AD tenant of the subscription. Anyone trying to manage or retrieve content from a vault must be authenticated by Azure AD.</p><ul><li>Authentication establishes the identity of the caller.</li><li>Authorization determines which operations the caller can perform. Authorization in Key Vault uses a combination of <a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/overview">Role based access control</a> (RBAC) and Azure Key Vault access policies.</li></ul><h4 id="Access-model-overview"><a href="#Access-model-overview" class="headerlink" title="Access model overview"></a>Access model overview</h4><p>Access to vaults takes place through two interfaces or planes. These planes are the management plane and the data plane.</p><ul><li>The <em>management plane</em> is where you manage Key Vault itself and it is the interface used to create and delete vaults. You can also read key vault properties and manage access policies.</li><li>The <em>data plane</em> allows you to work with the data stored in a key vault. You can add, delete, and modify keys, secrets, and certificates.</li></ul><p>To access a key vault in either plane, all callers (users or applications) must be authenticated and authorized. Both planes use Azure Active Directory (Azure AD) for authentication. For authorization, the management plane uses role-based access control (RBAC) and the data plane uses a Key Vault access policy.</p><p>The model of a single mechanism for authentication to both planes has several benefits:</p><ul><li>Organizations can control access centrally to all key vaults in their organization.</li><li>If a user leaves, they instantly lose access to all key vaults in the organization.</li><li>Organizations can customize authentication by using the options in Azure AD, such as to enable multi-factor authentication for added security</li></ul><h4 id="Managing-administrative-access-to-Key-Vault"><a href="#Managing-administrative-access-to-Key-Vault" class="headerlink" title="Managing administrative access to Key Vault"></a>Managing administrative access to Key Vault</h4><p>When you create a key vault in a resource group, you manage access by using Azure AD. You grant users or groups the ability to manage the key vaults in a resource group. You can grant access at a specific scope level by assigning the appropriate RBAC roles. To grant access to a user to manage key vaults, you assign a predefined <code>key vault Contributor</code> role to the user at a specific scope. The following scopes levels can be assigned to an RBAC role:</p><ul><li><strong>Subscription</strong>: An RBAC role assigned at the subscription level applies to all resource groups and resources within that subscription.</li><li><strong>Resource group</strong>: An RBAC role assigned at the resource group level applies to all resources in that resource group.</li><li><strong>Specific resource</strong>: An RBAC role assigned for a specific resource applies to that resource. In this case, the resource is a specific key vault.</li></ul><h4 id="Controlling-access-to-Key-Vault-data"><a href="#Controlling-access-to-Key-Vault-data" class="headerlink" title="Controlling access to Key Vault data"></a>Controlling access to Key Vault data</h4><p>Key Vault access policies grant permissions separately to keys, secrets, or certificate. You can grant a user access only to keys and not to secrets. Access permissions for keys, secrets, and certificates are managed at the vault level.</p><h4 id="Network-access"><a href="#Network-access" class="headerlink" title="Network access"></a>Network access</h4><p>You can reduce the exposure of your vaults by specifying which IP addresses have access to them. The virtual network service endpoints for Azure Key Vault allow you to restrict access to a specified virtual network. The endpoints also allow you to restrict access to a list of IPv4 (internet protocol version 4) address ranges. Any user connecting to your key vault from outside those sources is denied access.</p><p>After firewall rules are in effect, users can only read data from Key Vault when their requests originate from allowed virtual networks or IPv4 address ranges. This also applies to accessing Key Vault from the Azure portal. Although users can browse to a key vault from the Azure portal, they might not be able to list keys, secrets, or certificates if their client machine is not in the allowed list. This also affects the Key Vault Picker by other Azure services. Users might be able to see list of key vaults, but not list keys, if firewall rules prevent their client machine.</p><h3 id="Azure-Key-Vault-security-worlds-and-geographic-boundaries"><a href="#Azure-Key-Vault-security-worlds-and-geographic-boundaries" class="headerlink" title="Azure Key Vault security worlds and geographic boundaries"></a>Azure Key Vault security worlds and geographic boundaries</h3><p>Azure Key Vault is a multi-tenant service where the same Azure Location uses the same HSM and enjoys the same security perimeter, i.e., in the same security world.</p><p>Also Azure Key Vault can back up data, but the backup needs to meet two conditions:</p><ul><li>Two Azure locations in the same geographic location</li><li>Two key vaults belong to the same subscription</li></ul><h3 id="Secure-access-to-a-key-vault"><a href="#Secure-access-to-a-key-vault" class="headerlink" title="Secure access to a key vault"></a>Secure access to a key vault</h3><h4 id="Access-model-overview-1"><a href="#Access-model-overview-1" class="headerlink" title="Access model overview"></a>Access model overview</h4><p>Access to the keystore is controlled through two interfaces: the management plane and the data plane. The management plane is where you manage the key vault itself. Operations in this plane include creating and deleting key vaults, retrieving key vault properties, and updating access policies. The data plane is where you work with the data stored in the key vault. You can add, delete, and modify keys, secrets, and certificates.<br>To access the keystore in either plane, all callers (users or applications) must have proper authentication and authorization. Authentication establishment</p><h4 id="Active-Directory-authentication"><a href="#Active-Directory-authentication" class="headerlink" title="Active Directory authentication"></a>Active Directory authentication</h4><p>When you create a key vault in an Azure subscription, it’s automatically associated with the Azure AD tenant of the subscription. All callers in both planes must register in this tenant and authenticate to access the key vault. In both cases, applications can access Key Vault in two ways:</p><ul><li><strong>User plus application access</strong>: The application accesses Key Vault on behalf of a signed-in user. Examples of this type of access include Azure PowerShell and the Azure portal. User access is granted in two ways. Users can access Key Vault from any application, or they must use a specific application (referred to as <em>compound identity</em>).</li><li><strong>Application-only access</strong>: The application runs as a daemon service or background job. The application identity is granted access to the key vault.</li></ul><p>For both types of access, the application authenticates with Azure AD. The application uses any <a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/authentication-scenarios">supported authentication method</a> based on the application type. The application acquires a token for a resource in the plane to grant access. The resource is an endpoint in the management or data plane, based on the Azure environment. The application uses the token and sends a REST API request to Key Vault. To learn more, review the <a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow">whole authentication flow</a>.</p><p>The model of a single mechanism for authentication to both planes has several benefits:</p><ul><li>Organizations can control access centrally to all key vaults in their organization.</li><li>If a user leaves, they instantly lose access to all key vaults in the organization.</li><li>Organizations can customize authentication by using the options in Azure AD, such as to enable multi-factor authentication for added security.</li></ul><h4 id="Resource-endpoints"><a href="#Resource-endpoints" class="headerlink" title="Resource endpoints"></a>Resource endpoints</h4><p> Applications access both planes through endpoints.</p><p>The access controls for the two planes work independently. To grant an application access to use keys in a key vault, you grant data plane access by using a Key Vault access policy. To grant a user read access to Key Vault properties and tags, but not access to data (keys, secrets, or certificates), you grant management plane access with RBAC. **</p><h2 id="Certificate"><a href="#Certificate" class="headerlink" title="Certificate"></a>Certificate</h2><h3 id="About-keys-secrets-and-certificates"><a href="#About-keys-secrets-and-certificates" class="headerlink" title="About keys, secrets, and certificates"></a>About keys, secrets, and certificates</h3><p>Azure Key Vault enables Microsoft Azure applications and users to store and use several types of secret/key data</p><ul><li>Cryptographic key (Cryptographic key): supports multiple key types and algorithms and allows to use Hardware Security Module (HSM) for high value keys. We can actually only get the public key through the api.</li><li>Confidential (Secrets): Provides confidential and secure storage, such as passwords and database connection strings.</li><li>Certificates (Certificates): Supports certificates built on keys and secrets, and adds auto-renewal functionality.</li><li>Azure Storage (Azure Storage): Enables you to manage keys for your Azure Storage account. Internally, Key Vault can list (synchronize) keys using Azure Storage accounts and regenerate (rotate) keys periodically.</li></ul><h4 id="Key-Vaults-keys"><a href="#Key-Vaults-keys" class="headerlink" title="Key Vaults keys"></a>Key Vaults keys</h4><p>Encryption keys in Key Vault are represented as JSON Web Key [JWK] objects. the JWK / JWA base specification has also been extended to enable key types specific to Key Vault implementations. For example, keys that can only be used in Key Vault HSM can be securely transported using an HSM vendor-specific package import key.</p><ul><li><strong>“Soft” key</strong>: A key that Key Vault processes in software but encrypts at rest using the system key in HSM. Customers can import an existing RSA or EC (elliptic curve) key, or request Key Vault to generate one.</li><li><strong>“Hard” keys</strong>: Keys processed in the HSM (Hardware Security Module). These keys are protected in one of the Key Vault HSM secure worlds (one for each geographic region to maintain isolation). Clients can import RSA or EC keys in soft form or by exporting them from a compatible HSM device. Clients can also request Key Vault to generate keys. This key type adds the key_hsm attribute to the JWK fetch to carry HSM key material.</li></ul><p>After creating a key in the keystore, you can use the key to perform the following encryption operations:</p><ul><li><strong>Sign and verify</strong>: Technically, this operation is a “signed hash” or “verified hash” because Key Vault does not support content hashing as part of signature creation. The application should hash the data to be signed locally and then request Key Vault to sign the hash. For applications that may not have access to [public] key material, support for verification of the signed hash is provided for ease of operation. For best application performance, verify that the operation is performed locally.</li><li><strong>Key Encryption/Packaging</strong>: A key stored in Key Vault can be used to protect another key, usually a symmetric content encryption key (CEK). When the key in the Key Vault is not symmetric, key encryption will be used. For example, RSA-OAEP and WRAPKEY / UNWRAPKEY operations are equivalent to ENCRYPT / DECRYPT. If the key in the Key Vault is symmetric, then key wrapping is used. For example, AES-KW supports WRAPKEY operation for applications that do not have access to [public] key information. For best application performance, WRAPKEY operations should be performed locally.</li><li><strong>Encryption and Decryption</strong>: The key stored in Key Vault can be used to encrypt or decrypt a single block of data. The size of the block is determined by the key type and the selected encryption algorithm. For convenience, the Encrypt operation is provided for applications that may not have access to [public] key information. For best application performance, encryption operations should be performed locally.</li></ul><h4 id="Key-Vault-secrets"><a href="#Key-Vault-secrets" class="headerlink" title="Key Vault secrets"></a>Key Vault secrets</h4><p>From a developer’s perspective, Key Vault APIs accept and return secret values as strings. Internally, Key Vault stores and manages secrets as sequences of octets (8-bit bytes), with a maximum size of 25k bytes each. The Key Vault service doesn’t provide semantics for secrets. It merely accepts the data, encrypts it, stores it, and returns a secret identifier (“id”). The identifier can be used to retrieve the secret at a later time.</p><p>For highly sensitive data, clients should consider additional layers of protection for data. Encrypting data using a separate protection key prior to storage in Key Vault is one example.</p><p>Key Vault also supports a contentType field for secrets. Clients may specify the content type of a secret to assist in interpreting the secret data when it’s retrieved. The maximum length of this field is 255 characters. There are no pre-defined values. The suggested usage is as a hint for interpreting the secret data. For instance, an implementation may store both passwords and certificates as secrets, then use this field to differentiate. There are no predefined values.</p><h4 id="Key-Vault-Certificates"><a href="#Key-Vault-Certificates" class="headerlink" title="Key Vault Certificates"></a>Key Vault Certificates</h4><p>Key Vault certificates support provides for management of your x509 certificates and the following behaviors:</p><ul><li>Allows a certificate owner to create a certificate through a Key Vault creation process or through the import of an existing certificate. Includes both self-signed and Certificate Authority generated certificates.</li><li>Allows a Key Vault certificate owner to implement secure storage and management of X509 certificates without interaction with private key material.</li><li>Allows a certificate owner to create a policy that directs Key Vault to manage the life-cycle of a certificate.</li><li>Allows certificate owners to provide contact information for notification about life-cycle events of expiration and renewal of certificate.</li><li>Supports automatic renewal with selected issuers - Key Vault partner X509 certificate providers / certificate authorities.</li></ul><p>This article is only an introduction to the basic concepts of Azure Key Vault and the relationships between them. For more detailed information, such as how Key Vault monitors, throttles, authentication, request parameters, and other details, please check the official documentation at the end of this article.</p><p>Reference article:</p><p> <a href="https://docs.microsoft.com/en-us/azure/key-vault/">https://docs.microsoft.com/en-us/azure/key-vault/</a></p><p> <a href="https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis">https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis</a></p><p> <a href="https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-subscriptions-associated-directory">https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-subscriptions-associated-directory</a></p><p> <a href="https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-manage-groups">https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-manage-groups</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Azure Key Vault is a tool for securely storing and accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, or certificates. A vault is logical group of secrets.&lt;/p&gt;</summary>
    
    
    
    <category term="Cloud" scheme="https://sunra.top/en/categories/Cloud/"/>
    
    
  </entry>
  
  <entry>
    <title>OAuth and OIDC</title>
    <link href="https://sunra.top/en/posts/46cef286/"/>
    <id>https://sunra.top/en/posts/46cef286/</id>
    <published>2019-11-16T00:08:41.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h2><p>OAuth is an open web standard for authorization that is widely used around the world and is currently available in version 2.0</p><span id="more"></span><h3 id="Explanation-of-terms"><a href="#Explanation-of-terms" class="headerlink" title="Explanation of terms"></a>Explanation of terms</h3><ul><li><p><strong>Third-party application</strong>: Third-party application, also known as “client” in this document.</p></li><li><p><strong>HTTP Service</strong>: HTTP Service Provider, referred to as “Service Provider” in this document.</p></li><li><p><strong>Resource Owner</strong>: The person who owns the resource, also known as the “user” in this document.</p></li><li><p><strong>User Agent</strong>: User agent, in this article, means browser.</p></li><li><p><strong>Authorization server</strong>: Authentication server, i.e., the server dedicated by the service provider to handle authentication.</p></li><li><p><strong>Resource server</strong>: Resource server, i.e., the server where the service provider stores user-generated resources. It can be the same server as the authentication server, or a different server.</p></li></ul><p>OAuth sets up an authorization layer between the “client” and the “service provider”. The “client” cannot log in directly to the “service provider”, but only to the authorization layer, thus distinguishing the user from the client. The token used by the “client” to log in to the authorization layer is different from the user’s password. The user can specify the scope of authority and validity of the authorization token at the time of login.</p><p>After the “client” logs in to the authorization layer, the “service provider” opens the user’s stored data to the “client” according to the scope and validity of the token.</p><h3 id="Authorization-Process"><a href="#Authorization-Process" class="headerlink" title="Authorization Process"></a>Authorization Process</h3><ol><li><p>After the user opens the client, the client asks the user to give authorization.</p></li><li><p>The user agrees to give the client authorization.</p></li><li><p>The client uses the authorization obtained in the previous step to request a token from the authentication server.</p></li><li><p>After the authentication server authenticates the client, it confirms that there is no error and agrees to issue the token.</p></li><li><p>The client uses the token to request access to resources from the resource server.</p></li><li><p>The resource server confirms that the token is correct and agrees to open the resource to the client.</p></li></ol><p>The key in these steps is how the client obtains authorization, OAuth 2.0 defines four different ways to obtain authorization.</p><h3 id="Four-ways-to-get-authorization"><a href="#Four-ways-to-get-authorization" class="headerlink" title="Four ways to get authorization"></a>Four ways to get authorization</h3><p>OAuth 2.0 defines four types of authorization.</p><ul><li>Authorization code mode (authorization code)</li><li>Simplification mode (implicit)</li><li>密码模式（resource owner password credentials）</li><li>Client mode (client credentials)</li></ul><h4 id="Authorization-code-mode"><a href="#Authorization-code-mode" class="headerlink" title="Authorization code mode"></a>Authorization code mode</h4><p>(A) The user accesses the client, which directs the former to the authentication server.</p><p>(B) The user chooses whether to grant authorization to the client.</p><p>(C) Assuming that the user gives authorization, the authentication server directs the user to the redirection URI specified by the client in advance, along with an authorization code.</p><p>(D) The client receives the authorization code, attaches the earlier “redirect URI” and requests a token from the authentication server. This step is done on the server in the backend of the client and is not visible to the user.</p><p>(E) The authentication server verifies the authorization code and redirect URI, and then sends an access token and a refresh token to the client after confirming that there are no errors.</p><p>The URI of the client requesting authentication in step A, contains the following parameters:</p><ul><li>response_type: indicates the authorization type, mandatory, the value here is fixed to “code”</li><li>client_id: the ID of the client, required</li><li>redirect_uri: means redirect URI, optional</li><li>scope: indicates the scope of the requested permission, optional</li><li>state: indicates the current state of the client, you can specify any value, the authentication server will return this value unchanged.</li></ul><p>In step C, the server responds to the client’s URI with the following parameters:</p><ul><li>code: indicates the authorization code, mandatory. The validity of this code should be very short, usually set to 10 minutes, the client can only use this code once, otherwise it will be rejected by the authorization server. The code is in one-to-one correspondence with the client ID and the redirect URI.</li><li>state: If the client’s request contains this parameter, the authentication server’s response must also contain this parameter in exactly the same way.</li></ul><p>In step D, the HTTP request for a token from the client to the authentication server contains the following parameters:</p><ul><li>grant_type: indicates the authorization mode used, mandatory, the value here is fixed to “authorization_code”.</li><li>code: indicates the authorization code obtained in the previous step, mandatory.</li><li>redirect_uri: indicates the redirect URI, mandatory, and must be consistent with the value of this parameter in step A.</li><li>client_id: the client ID, mandatory.</li></ul><p>The HTTP reply sent by the authentication server in step E, contains the following parameters:</p><ul><li>access_token: indicates the access token, mandatory.</li><li>token_type: indicates the token type, the value is case-insensitive, mandatory, can be bearer type or mac type.</li><li>expires_in: indicates the expiration time in seconds. If this parameter is omitted, the expiration time must be set in some other way.</li><li>refresh_token: indicates the refresh token, which is used to get the next access token, optional.</li><li>scope: indicates the scope of the permission, if the scope is the same as the client application, this item can be omitted.</li></ul><h4 id="Simplify-mode"><a href="#Simplify-mode" class="headerlink" title="Simplify mode"></a>Simplify mode</h4><p> The simplicit grant type requests a token directly from the authentication server in the browser without going through the server of the third-party application, skipping the “authorization code” step, hence the name. All steps are done in the browser, the token is visible to the visitor, and the client does not need to authenticate.</p><p>(A) The client directs the user to the authentication server.</p><p>(B) The user decides whether to give authorization to the client.</p><p>(C) Assuming the user gives authorization, the authentication server directs the user to the “redirect URI” specified by the client and includes the access token in the hash portion of the URI.</p><p>(D) The browser sends a request to the resource server, which does not include the Hash value received in the previous step.</p><p>(E) The resource server returns a web page that contains code to get the token in the Hash value.</p><p>(F) The browser executes the script obtained in the previous step and extracts the token.</p><p>(G) The browser sends the token to the client.</p><h4 id="password-mode"><a href="#password-mode" class="headerlink" title="password mode"></a>password mode</h4><p>In password mode (Resource Owner Password Credentials Grant), the user provides the client with his or her username and password. The client uses this information to request authorization from the “service provider”.</p><p>In this model, the user must give his password to the client, but the client must not store it. This is usually used in cases where the user has a high level of trust in the client, such as when the client is part of the operating system or produced by a reputable company. The authentication server should only consider using this mode if other authorization modes cannot be implemented.</p><p>(A) The user provides the user name and password to the client.</p><p>(B) The client sends the user name and password to the authentication server and requests a token from the latter.</p><p>(C) After the authentication server confirms that there is no error, it provides the access token to the client.</p><p>In step B, the client sends an HTTP request with the following parameters:</p><ul><li>grant_type: the authorization type, the value here is fixed to “password”, mandatory.</li><li>username: user name, required.</li><li>password: the password of the user, mandatory.</li><li>scope: the scope of the permission, optional.</li></ul><h4 id="Client-Mode"><a href="#Client-Mode" class="headerlink" title="Client Mode"></a>Client Mode</h4><p> Client mode (Client Credentials Grant) means that the client authenticates to the “service provider” in its own name, rather than in the name of the user. Strictly speaking, the client mode is not part of the OAuth framework to solve the problem. In this model, the user registers directly with the client, and the client asks the “service provider” to provide services in its own name, so there is no authorization problem.</p><h3 id="Update-token"><a href="#Update-token" class="headerlink" title="Update token"></a>Update token</h3><p>If the client’s “access token” has expired when the user accesses, you need to use the “update token” to request a new access token.</p><p>The client sends an HTTP request to update the token, containing the following parameters:</p><ul><li>grant<em>type: indicates the authorization mode used, the value here is fixed to “refresh</em>token”, mandatory.</li><li>refresh_token: indicates the update token received earlier, mandatory.</li><li>scope：Indicates the authorization scope of the application, which cannot exceed the scope of the previous application. If this parameter is omitted, it means the same as the previous one.</li></ul><h2 id="OIDC"><a href="#OIDC" class="headerlink" title="OIDC"></a>OIDC</h2><p>OpenID Connect is an interoperable authentication protocol based on the OAuth 2.0 family of specifications. It is implemented using simple REST / JSON message flows and can be easily integrated by developers compared to any previous authentication protocol.</p><p>OpenID Connect allows developers to authenticate users across websites and applications without the need to own and manage password files. openID Connect allows all types of clients, including browser-based<a href="https://link.jianshu.com?t=http://lib.csdn.net/base/javascript">JavaScript</a>and native mobile applications, start the login flow and receive verifiable assertions about the identity of the logged-in user.</p><p> Briefly, <em>OIDC</em> is a security mechanism for applications to connect to an Identity Service to obtain user information and return that information to the application in a secure and reliable way.</p><h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h3><p> <strong>OpenID</strong> is <em>Authentication</em>, which authenticates the user’s identity and determines whether it is valid, i.e., lets the site know that “you are the user you claim to be”;</p><p><strong>OAuth</strong> is <em>Authorization</em>, which is the authorization of a user to allow certain actions when the user’s identity is known to be legitimate, i.e., to let the site know “you are allowed to do those things”.<br> It is clear from this that authorization is done after authentication, and only if the user’s identity is determined can authorization be granted.</p><p><em>OpenID Connect</em> is a combination of “authentication” and “authorization”, and because it is based on the <em>OAuth</em> protocol, the <em>OpenID-Connect</em> protocol also contains the <strong>client_id</strong>, <strong>client_secret</strong> and <strong>redirect_uri</strong> fields. The <em>OpenID-Connect</em> protocol also contains fields such as <strong>client_id</strong>, <strong>client_secret</strong> and <strong>redirect_uri</strong>. This information is stored in the “authentication server” to ensure that specific clients receive information only from legitimate application platforms. This is done in order to prevent <em>client_id</em> leaks from causing malicious websites to initiate <em>OIDC</em> processes.</p><h3 id="Process-Introduction"><a href="#Process-Introduction" class="headerlink" title="Process Introduction"></a>Process Introduction</h3><p><em>OAuth2</em> provides <em>Access Token</em> to solve the problem of authorizing third-party clients to access protected resources; similarly, <em>OIDC</em> provides <em>ID Token</em> on top of this to solve the problem of identifying user authentication by third-party clients. The core of <em>OIDC</em> is to provide the user’s authentication information (<em>ID-Token</em>) to the third-party client along with the authorization process of <em>OAuth2</em>, <em>ID-Token</em> is wrapped using <strong>JWT</strong> format, thanks to<a href="https://sunra.top/posts/1bb08f7a/">JWT</a>The self-contained, compact, and tamper-proof mechanism of <em>ID-Token</em> allows it to be securely passed to third-party client applications and easily verified. There should be a server that uses the <em>Access-Token</em> interface to <em>UserInfo</em> to exchange more information about the user after verifying that the <em>ID-Token</em> is correct.</p><p>It is clear from the above that <em>OIDC</em> follows the <em>OAuth</em> protocol flow and returns an <em>ID-Token</em> to authenticate the user’s identity while applying for an <em>Access-Token</em>.</p><h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><p><strong>EU</strong>: End User, user.</p><p> <strong>RP</strong>: Relying Party , used to refer to a trusted client in <em>OAuth2</em>, the consumer of authentication and authorization information;</p><p> <strong>OP</strong>: OpenID Provider, a service provider with the ability to provide EU authentication (such as the authorization service in <em>OAuth2</em>), used to provide the RP with EU authentication information;</p><p> <strong>ID-Token</strong>: data in JWT format, containing information about EU identity authentication.</p><p> <strong>UserInfo Endpoint</strong>: user information interface (protected by <em>OAuth2</em>) that returns information about an authorized user when the RP is accessed using <em>Access-Token</em>, this interface must use <em>HTTPS</em>.</p><h3 id="Specific-process"><a href="#Specific-process" class="headerlink" title="Specific process"></a>Specific process</h3><p>If it is a JS application where all its code is exposed by being loaded into the browser and no backend can secure <em>client_secret</em>, then it needs to be using <strong>Default Mode Flow</strong> (Implicit Flow).</p><p>If it is a traditional client-side application, the back-end code and the user are isolated and can ensure that <em>client_secret</em> is not leaked, you can use <strong>Authorization Code Pattern Flow</strong> (Authentication Flow).</p><p>There is also <strong>Hybrid Flow</strong>, which in short is a fusion of the above two.</p><h4 id="Authorization-Code-Process"><a href="#Authorization-Code-Process" class="headerlink" title="Authorization Code Process"></a>Authorization Code Process</h4><p>RP sends an <strong>authentication request</strong> to the OP with a <em>client_id</em> attached;</p><p>The OP authenticates the EU;</p><p>The OP returns a response, sending the authorization code to the RP;</p><p>The RP uses the authorization code to request the ID-Token and Access-Token from the OP, which is verified by the RP and returned to the RP;</p><p>RP sends a request to <em>UserInfo EndPoint</em> using the Access-Token; UserInfo EndPoint returns the EU’s Claims.</p><h5 id="authentication-request"><a href="#authentication-request" class="headerlink" title="authentication request"></a>authentication request</h5><p>RP uses OAuth2’s Authorization-Code approach to complete user authentication, and all Tokens are passed through the OP’s Token EndPoint (<a href="https://link.jianshu.com?t=https://tools.ietf.org/html/rfc6749#section-3.2">OAuth2中定义</a>) to be issued. To construct an Authentication Request for OIDC, the following parameters are required:</p><ul><li>scope: Mandatory. oidc requests must contain the parameter “openid” for the scope.</li><li>response_type: mandatory. Same as OAuth2.</li><li>client_id: mandatory. Same as OAuth2.</li><li>redirect_uri: Required. Same as OAuth2.</li><li>state: Recommended. Same as OAuth2. prevents CSRF, XSRF.</li></ul><p>After the OP receives the authentication request, it needs to do strict validation of the request parameters, and the specific rules are described in<a href="https://link.jianshu.com?t=http://openid.net/specs/openid-connect-core-1_0.html#AuthRequestValidation">http://openid.net/specs/openid-connect-core-1_0.html#AuthRequestValidation</a>After the authentication has passed, the EU is directed to authenticate and agree to the authorization. After this is done, it redirects to the callback address specified by the RP (<em>redirect_uri</em>) and passes the <strong>code</strong> and <strong>state</strong> parameters.</p><p>RP uses the <em>code</em> obtained in the previous step to request Token EndPoint, a step that buckets <em>OAuth2</em> and will not be expanded in detail. The Token EndPoint then returns the response Token, which has an additional <em>id_token</em> field in addition to some of the data specified by <em>OAuth2</em>. The <em>id_token</em> field is the <em>ID Token</em> mentioned above.</p><h6 id="ID-token"><a href="#ID-token" class="headerlink" title="ID token"></a>ID token</h6><p>As mentioned above <em>OIDC</em>‘s most significant extension to <em>OAuth2</em> is the provision of <em>ID-Token</em>. Let’s take a look at the main components of <em>ID-Token</em>:</p><ul><li><strong>iss = Issuer Identifier</strong>: Required. Unique identifier of the person providing the authentication information. Usually the host+path part of the Url;</li><li><strong>sub = Subject Identifier</strong>: must. unique identifier of the EU provided by iss; maximum of 255 ASCII characters;</li><li><strong>aud = Audience(s)</strong>: required. Identifies the audience of the <em>ID-Token</em>. Must contain the client_id of <em>OAuth2</em>;</li><li><strong>exp = Expiration time</strong>: required. Expiration time of <em>ID-Token</em>;</li><li><strong>iat = Issued At Time</strong>: must. time of the JWT build.</li><li><strong>auth_time = AuthenticationTime</strong>: the time when the EU completes authentication. This Claim is required if the RP carries the <em>max_age</em> parameter when sending the authentication request.</li><li><strong>nonce</strong>: random string provided by the RP when sending the request, used to mitigate replay attacks and also to associate the <em>ID-Token</em> with the RP’s own Session information.</li><li><strong>acr = Authentication Context Class Reference</strong>: optional. Indicates an authentication context reference value that can be used to identify an authentication context class.</li><li><strong>amr = Authentication Methods References</strong>: optional. Indicates a set of authentication methods.</li><li><strong>azp = Authorized party</strong>: optional. Used in combination with aud. This value is only used if the authenticated party and the audience (aud) do not agree, and is rarely used in general.</li></ul><h4 id="Default-Process"><a href="#Default-Process" class="headerlink" title="Default Process"></a>Default Process</h4><p>The default process is similar to the one in <em>OAuth</em>, except that it also adds <em>ID-Token</em> related content.</p><p>It is important to note here that the <em>OIDC</em> documentation makes it very clear that all user-related information is to be encoded using the <strong>JWT</strong> form. In <em>JWT</em>, no sensitive data should be included in the load. If the transfer is the User ID of the user, this value is not actually sensitive and is generally safe to be known.</p><h3 id="UserInfo-Endpoint"><a href="#UserInfo-Endpoint" class="headerlink" title="UserInfo Endpoint"></a>UserInfo Endpoint</h3><p>Some readers may have noticed that <em>ID-Token</em> only sub is related to EU, which is not enough in general, other information such as EU username, avatar, etc. must also be needed, <em>OIDC</em> provides a set of public cliams to provide more information about the user, which is - UserIndo EndPoin.</p><p>After RP gets the Access Token, it can request this resource and then get a set of EU-related Claims, which can be said to be an extension of <em>ID-Token</em>, <em>ID-Token</em> only needs to contain the unique identification sub of EU (to avoid the ID Token being too large and exposing the user’s sensitive information), and then after getting the complete EU’s information through this interface. This resource <strong>must be deployed on top of TLS</strong></p><h2 id="A-little-thinking-about-OAuth"><a href="#A-little-thinking-about-OAuth" class="headerlink" title="A little thinking about OAuth"></a>A little thinking about OAuth</h2><p>User: User</p><p>User Agent: User agent, such as a browser</p><p>Consumer: Information consumer, such as Leetcode</p><p>Service Provider: There are two service providers, the Identity Provider (IDP), such as QQ, and the Resource Provider, but they are generally the same.</p><p>OAuth is not designed to solve security or performance problems.</p><p>OAuth also does not save the login state in the Consumer for us.</p><p>The purpose of OAuth appeared is to help us associate multiple application accounts with a third-party account, it is the user who gives the permission to the consumer in SP, not the permission to the user in the consumer. We have not lost one account, but established a one-to-many relationship, similar to if we want to get a driver’s license, we need to use our ID card, and authorize the driving school to use our ID card information to go to the Public Security Bureau to confirm our existence and retrieve some other information. But that’s where it ends, and what happens next has nothing to do with OAuth.</p><p>The IDP cannot and has no responsibility to save any information of the user in the consumer, it just tells the consumer some information in the case of user authorization.</p><p>The first time is for the IDP to set the location in the return 302, you can not verify whether it is set by the consumer, the second time is to verify whether the redirect_uri is set by you in the IDP, and whether it is the same as the first time over, this step must be verified, because this step is the most critical, this step will return the token.</p><p>In the end, I still can’t trust my comrade browser, so I let him be a tool to help my own backend to apply for an authorization code to a third party, and then give this authorization code to my own backend, and then my own backend use this code to apply for a token to a third party, and then I don’t tell my browser afterwards. This token is what, they left, that is to say, the browser comrades from beginning to end have not seen the token.</p><p>What is the use of Secret? The reason is that IDPs don’t believe in anyone, they believe in the secret they give out. because redirect_uri is the domain name, and ultimately where it goes still depends on the IP address, if the domain name is right, but the domain name is pointed to their IP by the attacker, the attacker will receive the token. how to modify this DNS pointing involves DNS pollution, because DNS will cache layers, but then there is time. But then there is time, if you keep broadcasting to tell the router or host I am leetcode, I am leetcode, over time you are considered as leetcode in this piece of LAN. But if you have a secret, even if you come over to IDP with code, without the secret I gave you, IDP will not give token. so client_id shows who you are, only if you give client_secret, IDP will believe what you say and give you token, so this secret is very important, our The backend will not believe the browser comrades, so our browser comrades from the beginning to the end also did not touch the secret.</p><p>And what is the use of State? Similar to the defense of CSRF, to ensure the consistency of the request device, but not like CSRF is to forge the victim’s request, but let the victim login to their own account, if the victim in it to save a bitcoin account would not be beautiful? The specific implementation is the attacker logged in, the normal application, but to the IDP returned 302 after the request to stop, do not allow the browser to send requests to their own background, and then the request link with code to the victim, the victim clicked in to get access_token to successfully log in, if you do not pay attention to this account is not their own upload sensitive information, it is very happy. If there is a state, different devices my background are generated a random string to the front end, the attacker even if the request to the victim, he does not know the state of the victim’s device, the background take a look at your state and just said that the state is not the same, it will directly throw away the request, of course, to say that the attacker to your state from the huge Internet of A certain request to steal to, that is also the absolute, this belongs to the fixed-point blast, is to mess with you, then this person has mostly mixed in your side.</p><p>Why will finally return two token because one represents who you are and one represents what you can do, what you can do can be changed by the administrator at any time, but who you are is fixed, and the general access_token expiration time is relatively short, if I use it expired, can not let the user re-login it, that is not back to the beginning?</p><p>After all, these designs are stuck above the transport layer, so what if I mess with your network layer? I then spread an ARP virus? Engage the link layer is a bit exaggerated.</p><p>Reference article:</p><p><a href="https://sunra.top/posts/46cef286/">https://sunra.top/2019/11/16/OAuth%20and%20OIDC/</a> ：OAuth，OIDC简介</p><p><a href="https://sunra.top/posts/74ee5df7/">https://sunra.top/posts/74ee5df7/</a> : Routing Protocol</p><p><a href="https://sunra.top/posts/dfdf7442/">https://sunra.top/posts/dfdf7442/</a> : ARP principle and defense</p><p><a href="https://www.jianshu.com/p/0db71eb445c8">https://www.jianshu.com/p/0db71eb445c8</a> : Example of OAuth authentication process</p><p><a href="https://www.chrisyue.com/security-issue-about-oauth-2-0-you-should-know.html">https://www.chrisyue.com/security-issue-about-oauth-2-0-you-should-know.html</a> ：OAuth2.0中的安全考虑</p><p><a href="https://www.cnblogs.com/linianhui/p/openid-connect-core.html">https://www.cnblogs.com/linianhui/p/openid-connect-core.html</a> ：OIDC文档</p><p><a href="https://www.zhihu.com/question/19851243">https://www.zhihu.com/question/19851243</a> : OAuth1.0 and 2.0 difference</p><p><a href="https://docs.azure.cn/zh-cn/active-directory/azuread-dev/v1-protocols-openid-connect-code">https://docs.azure.cn/zh-cn/active-directory/azuread-dev/v1-protocols-openid-connect-code</a> ：OIDC + AAD</p><p><a href="https://www.sciencedirect.com/science/article/pii/S2215098617316750">https://www.sciencedirect.com/science/article/pii/S2215098617316750</a> : Security issues faced in cloud services</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a> ：同源策略</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;OAuth-2-0&quot;&gt;&lt;a href=&quot;#OAuth-2-0&quot; class=&quot;headerlink&quot; title=&quot;OAuth 2.0&quot;&gt;&lt;/a&gt;OAuth 2.0&lt;/h2&gt;&lt;p&gt;OAuth is an open web standard for authorization that is widely used around the world and is currently available in version 2.0&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://sunra.top/en/categories/Security/"/>
    
    
  </entry>
  
  <entry>
    <title>InfineScroll 无限加载bug</title>
    <link href="https://sunra.top/en/posts/fd076279/"/>
    <id>https://sunra.top/en/posts/fd076279/</id>
    <published>2019-11-01T03:46:37.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>I recently used the infinite loading component in the latest version of elementUI, and in some cases the loading function may be called infinitely during use, so I went to study the source code.</p><span id="more"></span><p>Before reading the source code, the first two functions to understand a little, respectively, MutationObserver and throttle function</p><h3 id="MutationObserver函数"><a href="#MutationObserver函数" class="headerlink" title="MutationObserver函数"></a>MutationObserver函数</h3><h4 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h4><ul><li><p>Interface for monitoring DOM changes</p><p>The MutationObserver will be notified when the monitored DOM changes and trigger a pre-defined callback function.</p></li><li><p>Similar to events, but triggered asynchronously</p><p>The observer function on the MutationObserver is similar to addEventListener when adding a watch, but unlike the synchronous trigger of the latter, the MutationObserver is triggered asynchronously, which is to avoid frequent DOM changes that cause the callback function to be called frequently and cause browser lag.</p></li></ul><h4 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(callback);</span><br></pre></td></tr></table></figure><p> The first argument is an array of all <code>MutationRecord</code> objects, and the second argument is the MutationObserver instance itself.</p><h4 id="Instance-Method"><a href="#Instance-Method" class="headerlink" title="Instance Method"></a>Instance Method</h4><h5 id="Observe"><a href="#Observe" class="headerlink" title="Observe"></a>Observe</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Observe</span>(<span class="title class_">Node</span> target, optional <span class="title class_">MutationObserverInit</span> options);</span><br></pre></td></tr></table></figure><p>Add DOM nodes to the MutationObserver instance to observe and configure which changes to observe with an optional options parameter, which is an object named <code>MutationObserverInit</code>.</p><p>The following are the properties of the <code>MutationObserverInit</code> object and their descriptions:</p><div class="table-container"><table><thead><tr><th>Properties</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>childList</td><td>Boolean</td><td>Whether to watch for changes in child nodes</td></tr><tr><td>attributes</td><td>Boolean</td><td>Whether to watch for changes in attributes</td></tr><tr><td>characterData</td><td>Boolean</td><td>Whether the node content or node text changes</td></tr><tr><td>subtree</td><td>Boolean</td><td>Whether to observe the changes of all descendant nodes</td></tr><tr><td>attributeOldValue</td><td>Boolean</td><td>Whether to record the value of the attribute before the change when observing changes to attributes</td></tr><tr><td>characterDataOldValue</td><td>Boolean</td><td>If or not the value of the attribute before the change is recorded when observing a change in characterData</td></tr><tr><td>attributeFilter</td><td>Array</td><td>indicates a specific attribute to be observed (e.g. [‘class’,’src’]), attribute changes that are not in this array will be ignored</td></tr></tbody></table></div><p>Notes:</p><ul><li>You cannot observe subtree changes alone; you must specify one or more of childList, attributes, and characterData at the same time.</li><li>Adding the same MutationObserver multiple times for the same DOM node is not valid and the callback function will only be triggered once. However, if different options objects are specified (i.e., different changes are observed), they are treated as different MutationObservers.</li></ul><h5 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h5><p>This method is used to stop the watch. Subsequent changes to the DOM node will not trigger the callback function.</p><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observer.<span class="title function_">disconnect</span>();</span><br></pre></td></tr></table></figure><p>Other more introductions can be found in the links at the end of the article</p><h3 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h3><p> Both debounce and <code>throttle</code> are high-order functions that are commonly used in development to prevent functions from being called too often, in other words, to control how many times a function is executed within a certain period of time.</p><p><strong>Use scenario</strong>: For example, when binding response to mouse movement, window resizing, scrolling and other events, the frequency of binding functions triggered will be very frequent. If the slightly more complex processing function requires more arithmetic execution time and resources, there will often be delays, even leading to false death or a sense of lag. In order to optimize performance, it is necessary to use <code>debounce</code> or <code>throttle</code> at this time.</p><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.throttle(func, [wait=0], [options=&#123;&#125;])</span><br></pre></td></tr></table></figure><p>Throttle function, a function that executes fn at most once in wait seconds.<br>Unlike the difference, there will be a threshold value, and when it is reached, the fn will definitely be executed.</p><h3 id="InfineScroll-source-code-analysis"><a href="#InfineScroll-source-code-analysis" class="headerlink" title="InfineScroll source code analysis"></a>InfineScroll source code analysis</h3><h4 id="Component-Configuration"><a href="#Component-Configuration" class="headerlink" title="Component Configuration"></a>Component Configuration</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> attributes = &#123;</span><br><span class="line">  <span class="attr">delay</span>: &#123; <span class="comment">// delay time, threshold for the throttle function</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">200</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">distance</span>: &#123; <span class="comment">// The load function is triggered only if the distance is greater than this value after each scroll</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">disabled</span>: &#123; <span class="comment">//does not allow new data to be loaded</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">immediate</span>: &#123; <span class="comment">// whether to call a data load immediately upon page initialization</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Get-Configuration-Functions"><a href="#Get-Configuration-Functions" class="headerlink" title="Get Configuration Functions"></a>Get Configuration Functions</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getScrollOptions</span> = (<span class="params">el, vm</span>) =&gt; &#123; <span class="comment">// Get the configuration passed in by the component, if not pass in the default value of the configuration</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isHtmlElement</span>(el)) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">entries</span>(attributes).<span class="title function_">reduce</span>(<span class="function">(<span class="params">map, [key, option]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; type, <span class="attr">default</span>: defaultValue &#125; = option;</span><br><span class="line">    <span class="keyword">let</span> value = el.<span class="title function_">getAttribute</span>(<span class="string">`infinite-scroll-<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">    value = <span class="title function_">isUndefined</span>(vm[value]) ? value : vm[value];</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">Number</span>:</span><br><span class="line">        value = <span class="title class_">Number</span>(value);</span><br><span class="line">        value = <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(value) ? defaultValue : value;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">Boolean</span>:</span><br><span class="line">        value = <span class="title function_">isDefined</span>(value) ? value === <span class="string">&#x27;false&#x27;</span> ? <span class="literal">false</span> : <span class="title class_">Boolean</span>(value) : defaultValue;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        value = <span class="title function_">type</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    map[key] = value;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;InfiniteScroll&#x27;</span>,</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cb = binding.<span class="property">value</span>; <span class="comment">// function to load the data passed in by the component</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vm = vnode.<span class="property">context</span>;</span><br><span class="line">    <span class="comment">// only include vertical scroll</span></span><br><span class="line">    <span class="keyword">const</span> container = <span class="title function_">getScrollContainer</span>(el, <span class="literal">true</span>); <span class="comment">// 获取滚动条的容器</span></span><br><span class="line">    <span class="keyword">const</span> &#123; delay, immediate &#125; = <span class="title function_">getScrollOptions</span>(el, vm); <span class="comment">//get the configuration of the formation, explained next</span></span><br><span class="line">    <span class="keyword">const</span> onScroll = <span class="title function_">throttle</span>(delay, handleScroll.<span class="title function_">bind</span>(el, cb)); <span class="comment">// callback function when scrolling occurs, utilizing throttle, the first parameter of throttle is a threshold value, the second parameter is a function that can control the execution of the second at most once within the threshold time The function passed in the parameter</span></span><br><span class="line"></span><br><span class="line">    el[scope] = &#123; el, vm, container, onScroll &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, onScroll); <span class="comment">// Add a listener for scrolling</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">          <span class="comment">// whether to trigger data loading immediately, it can ensure that the data vertically fill the container, specifically because MutationObserver listens to the container&#x27;s dom change, once the change immediately triggers data loading, and data loading will change the dom, resulting in a circular call to the data loading function, until a certain call to the bottom of the scrollbar, it will call MutationObserver.disconnect(), stop listening to the dom change</span></span><br><span class="line">        <span class="keyword">const</span> observer = el[scope].<span class="property">observer</span> = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(onScroll);</span><br><span class="line">        observer.<span class="title function_">observe</span>(container, &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="title function_">onScroll</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">unbind</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; container, onScroll &#125; = el[scope];</span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      container.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, onScroll);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Callback-function-when-a-scroll-event-is-listened-to"><a href="#Callback-function-when-a-scroll-event-is-listened-to" class="headerlink" title="Callback function when a scroll event is listened to"></a>Callback function when a scroll event is listened to</h4><p>This function is not only called at the start of scrolling, but if immidate is set to true, the component will be called explicitly at the beginning of loading to load data until the container is filled.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scope = <span class="string">&#x27;ElInfiniteScroll&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getElementTop</span> = el =&gt; el.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleScroll = <span class="keyword">function</span>(<span class="params">cb</span>) &#123; <span class="comment">//Data loading function, will first determine whether the scrollbar is at the bottom and whether the disabled parameter allows loading</span></span><br><span class="line">  <span class="keyword">const</span> &#123; el, vm, container, observer &#125; = <span class="variable language_">this</span>[scope];</span><br><span class="line">  <span class="keyword">const</span> &#123; distance, disabled &#125; = <span class="title function_">getScrollOptions</span>(el, vm);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (disabled) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> shouldTrigger = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Determine if scrolling to the bottom</span></span><br><span class="line">  <span class="keyword">if</span> (container === el) &#123;</span><br><span class="line">    <span class="comment">// be aware of difference between clientHeight &amp; offsetHeight &amp; window.getComputedStyle().height</span></span><br><span class="line">    <span class="keyword">const</span> scrollBottom = container.<span class="property">scrollTop</span> + <span class="title function_">getClientHeight</span>(container);</span><br><span class="line">    shouldTrigger = container.<span class="property">scrollHeight</span> - scrollBottom &lt;= distance;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> heightBelowTop = <span class="title function_">getOffsetHeight</span>(el) + <span class="title function_">getElementTop</span>(el) - <span class="title function_">getElementTop</span>(container);</span><br><span class="line">    <span class="keyword">const</span> offsetHeight = <span class="title function_">getOffsetHeight</span>(container);</span><br><span class="line">    <span class="keyword">const</span> borderBottom = <span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="title function_">getStyleComputedProperty</span>(container, <span class="string">&#x27;borderBottomWidth&#x27;</span>));</span><br><span class="line">    shouldTrigger = heightBelowTop - offsetHeight + borderBottom &lt;= distance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (shouldTrigger &amp;&amp; <span class="title function_">isFunction</span>(cb)) &#123;</span><br><span class="line">    cb.<span class="title function_">call</span>(vm);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (observer) &#123;</span><br><span class="line">    <span class="comment">// When a data loading function is called but the scrollbar is not yet at the bottom, and the MutationObserver is used to listen for changes in the component&#x27;s dom, turn off the listener, which will only work if immediate is true and the MutationObserver is registered when the component is registered, resulting in a cyclic call to the data loading function</span></span><br><span class="line">    observer.<span class="title function_">disconnect</span>();</span><br><span class="line">    <span class="variable language_">this</span>[scope].<span class="property">observer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>So that when the container initial no height, and set the IMMEDIATE, will explicitly trigger a scroll callback function, while adding MutationObserver for the container, and this will make the container initialized when the data loaded to fill the container. But because the scrollTop is always 0, there is no way to judge the scroll bar to the bottom, so the logic of disconnect MutationObserver in the data loading function will not be called, and it will be caught in the cycle of calling data loading, container change, call again, and change again.</p><h4 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h4><ol><li>directly set immidate to false, it will not register MutationObserve</li><li>assign a height to the container.</li></ol><p>Reference article:</p><p> <a href="https://juejin.im/entry/5a9d4eea518825556b6c440d">https://juejin.im/entry/5a9d4eea518825556b6c440d</a></p><p> <a href="https://juejin.im/entry/57de3fc30bd1d00057f2ea33">https://juejin.im/entry/57de3fc30bd1d00057f2ea33</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I recently used the infinite loading component in the latest version of elementUI, and in some cases the loading function may be called infinitely during use, so I went to study the source code.&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://sunra.top/en/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>JWT</title>
    <link href="https://sunra.top/en/posts/1bb08f7a/"/>
    <id>https://sunra.top/en/posts/1bb08f7a/</id>
    <published>2019-10-26T04:13:40.000Z</published>
    <updated>2023-06-07T12:40:51.470Z</updated>
    
    <content type="html"><![CDATA[<p> JSON Web Token (abbreviated JWT) is the most popular cross-domain authentication solution available today</p><span id="more"></span><h2 id="JWT-Background"><a href="#JWT-Background" class="headerlink" title="JWT Background"></a>JWT Background</h2><p>Internet services are inseparable from user authentication. The general process is as follows.</p><blockquote><ol><li><p>The user sends the username and password to the server.</p></li><li><p>After server authentication, relevant data is saved inside the current session, such as user role, login time, etc.</p></li><li><p>The server returns a session_id to the user, which is written to the user’s cookie.</p></li><li><p>Each subsequent request from the user will send the session_id back to the server via a cookie.</p></li><li><p>The server receives the session_id, finds the data saved in the previous session, and learns the identity of the user from it.</p></li></ol></blockquote><p>The problem with this model is that scaling is not good. If it is a server cluster, or a cross-domain service-oriented architecture, it requires session data sharing, and each server can read the session.</p><p>For example, site A and site B are affiliated services of the same company. Now, it is required that once a user logs in at one of the sites, he/she will automatically log in when visiting the other site.</p><p>One solution is session data persistence, written to a database or another persistence layer. When various services receive a request, they request data from the persistence layer. The advantage of this solution is that it has a clear architecture, but the disadvantage is that it is a large amount of work. In addition, if the persistence layer hangs, there will be a single point of failure.</p><p>Another option is that the server simply does not store the session data, all data is stored on the client side and sent back to the server for each request. jwt is a representative of this option.</p><h2 id="Structure-of-JWT"><a href="#Structure-of-JWT" class="headerlink" title="Structure of JWT"></a>Structure of JWT</h2><p>jwt is a very long string with three parts separated by a dot.</p><p>The three parts of the JWT are as follows in order.</p><blockquote><ul><li>Header</li><li>Payload</li><li>Signature</li></ul></blockquote><p>Written in one line, it looks like the following.</p><blockquote><p>``javascript<br>Header.Payload.Signature<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Header</span><br><span class="line"></span><br><span class="line">The Header section is a JSON object that describes the metadata of the JWT and usually looks like the following.</span><br><span class="line"></span><br><span class="line">``javascript</span><br><span class="line">&#123;</span><br><span class="line">&quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">&quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>In the above code, the <code>alg</code> attribute indicates the algorithm of the signature (algorithm), the default is HMAC SHA256 (written as HS256); the <code>typ</code> attribute indicates the type of this token (token) (type), JWT tokens are uniformly written as <code>JWT</code>.</p><p>Finally, the JSON object above is converted to a string using the Base64URL algorithm (see later for details).</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>The Payload section is also a JSON object that holds the actual data to be passed. jwt specifies 7 official fields to choose from.</p><blockquote><ul><li>iss (issuer): issuer</li><li>exp (expiration time): expiration time</li><li>sub (subject): subject</li><li>aud (audience)：受众</li><li>nbf (Not Before): effective time</li><li>iat (Issued At): Time of issuance</li><li>jti (JWT ID): No.</li></ul></blockquote><p>In addition to the official fields, you can also define private fields in this section, an example of which is shown below.</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line"><span class="string">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>Note that the JWT is unencrypted by default and can be read by anyone, so don’t put secret information in this section.</p><p>This JSON object is also converted to a string using the Base64URL algorithm.</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>The Signature section is a signature for the first two sections to prevent data tampering.</p><p>First, a key (secret) needs to be specified. This key is known only to the server and cannot be disclosed to the user. Then, using the signature algorithm specified in the Header (the default is HMAC SHA256), the signature is generated according to the following formula.</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">HMACSHA256</span>(</span><br><span class="line"><span class="title function_">base64UrlEncode</span>(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line"><span class="title function_">base64UrlEncode</span>(payload),</span><br><span class="line">secret)</span><br></pre></td></tr></table></figure></blockquote><p>After the signature is calculated, the Header, Payload and Signature are put together into a string, and each part is separated by a <code>.</code>) between each part, and then it can be returned to the user.</p><h2 id="Features-of-JWT"><a href="#Features-of-JWT" class="headerlink" title="Features of JWT"></a>Features of JWT</h2><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><p><strong>1. The solution is more easily scalable horizontally</strong></p><p>In the cookie-session scheme, the cookie contains only a session identifier, and information such as user information and authorization lists are stored in the session on the server side. If the authentication information in the session is stored in the JWT, there is no need for the session to exist on the server side. When the server side scales horizontally, there is no need to deal with session replication / session sticky session or to introduce external session storage.</p><p><strong>2. The solution protects against CSRF attacks</strong></p><h3 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h3><ol><li><p><strong>More space occupation. </strong></p><p>If the various types of information that originally existed in the server-side session are placed in the JWT and stored in the client, it may cause the JWT to occupy a larger space, requiring consideration of factors such as the space limitations of cookies, and if placed in Local Storage, it may be subject to XSS attacks.</p></li><li><p><strong>More insecure. </strong></p><p>This refers specifically to the solution of saving JWT in Local Storage and then sending it to the server as HTTP header using Javascript. Storing sensitive information in Local Storage is not safe and vulnerable to cross-site scripting (xss for short), which is a kind of “HTML injection” and is called “cross-domain scripting” because the attacking scripts are mostly cross-domain. “These scripts can steal cookies or data from Local Storage. You can see the explanation of the principle of <a href="http://www.cnblogs.com/luminji/archive/2012/05/22/2507185.html">XSS attack</a> in this article.</p></li><li><p><strong>It is not possible to void a token that has been issued. </strong></p><p>All authentication information is in the JWT, and since there is no state on the server side, even if you learn that a JWT has been stolen, there is nothing you can do to invalidate it. Until the JWT expires (and you should absolutely set an expiration time), there is nothing you can do about it.</p></li><li><p><strong>It is not easy to cope with data expiration. </strong></p><p>Similar to the previous article, JWT is somewhat like a cache in that you can only live with “expired” data until it expires, since you can’t void the issued token.</p></li></ol><p>Reference article:</p><p> <a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></p><p> <a href="https://juejin.im/entry/5993a030f265da24941202c2">https://juejin.im/entry/5993a030f265da24941202c2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; JSON Web Token (abbreviated JWT) is the most popular cross-domain authentication solution available today&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://sunra.top/en/categories/Security/"/>
    
    
  </entry>
  
  <entry>
    <title>Exploring Asymmetric Encryption Principles</title>
    <link href="https://sunra.top/en/posts/a515898/"/>
    <id>https://sunra.top/en/posts/a515898/</id>
    <published>2019-10-19T13:28:36.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>While reading about the principles of https today, I found that it uses the knowledge of asymmetric encryption, so I went to explore the basic principles of asymmetric encryption.<br><span id="more"></span></p><h2 id="Asymmetric-encryption"><a href="#Asymmetric-encryption" class="headerlink" title="Asymmetric encryption"></a>Asymmetric encryption</h2><p>In asymmetric encryption algorithm, there are two kinds of keys, public and private, where the public key is public and does not need to be kept secret and the private key is held by individuals and must be kept secure and confidential. The use of two different keys for encryption and decryption is the reason for its name.</p><p>Each public key corresponds to a private key.<br>In the key pair, the one that makes everyone know is the public key, and the one that is not told to everyone and only known to you is the private key.</p><p>If the data is encrypted with one of the keys, only the corresponding one can be decrypted.<br>If it is possible to decrypt the data with one of the keys, the data must be encrypted with the corresponding one.</p><p>A and B communicate with each other, and if they do not want the content of the communication to be known by others, they can encrypt the content of the communication asymmetrically.</p><p>For example, in the BC architecture, the data communication between the browser and the server, the server can send its public key to the browser, the browser can encrypt the information it wants to send to the server using the public key, and when the server receives the information, it can decrypt the information using its own private key to obtain the content before encryption, while ensuring that no one else can break the information. At the same time, it is guaranteed that no one else can crack the information.</p><p>The server can also encrypt the returned information with its own private key, and the browser can then decrypt it with the public key sent to it by the server.</p><h2 id="Public-Key-Authentication"><a href="#Public-Key-Authentication" class="headerlink" title="Public Key Authentication"></a>Public Key Authentication</h2><h3 id="Digital-signature"><a href="#Digital-signature" class="headerlink" title="Digital signature"></a>Digital signature</h3><p> The communication process described inside the public key encryption and decryption may seem simple, but think about this problem: In the above process, how does A know if B’s reply letter to him has been modified during the transmission process? This brings us to the concept of digital signature.</p><p>To achieve this, a hash calculation is generally done on the message to get a hash value. Note that this process is irreversible, which means that the original message content cannot be recovered through the hash value. When the message is sent out, the hash value is encrypted and sent out as a signature together with the message. After receiving the message, the receiver will recalculate the hash value of the message and compare it with the hash value attached to the message (after decryption), if it is the same, it means that the content of the message has not been modified, because here the hash calculation can guarantee that different contents will definitely get different hash values, so as soon as the content is modified, the hash value calculated according to the content of the message will change. Of course, an unsuspecting person can modify the message content and also modify the hash value so that they can match. To prevent this, the hash value is usually encrypted (i.e., signed) and then sent together with the message.</p><p>The process is illustrated by the following example:<br>B replied to A with a digital signature<br>1, B first use the hash function, to generate a summary of the letter (digest)</p><ol><li>B uses his private key to encrypt this digest, so that a digital signature is generated (signature)<br>3, B will be attached to this signature to reply to the message, together with the message sent to A<br>4、A receives B’s message, takes down the digital signature and decrypts it by B’s public key to get the summary information of the letter<br>5, A uses the hash function specified by B in the message sent by B itself, and compares the result with the digest obtained by decryption in the previous step, if they are consistent, it means that the message sent by B has not been modified.</li></ol><p>Is this the end of the problem? Far from it. Imagine that although A is sure that the message sent back to him by B is unmodified, how can he be sure that it is B who sent him the message back? What if an unsuspecting C secretly replaces B’s public key saved by A with his own and sends a message to A under B’s name?<br>To solve this problem, A just needs to be able to determine whether the public key he holds is B’s or not, which requires the use of a digital certificate.</p><h3 id="Digital-certificate"><a href="#Digital-certificate" class="headerlink" title="Digital certificate"></a>Digital certificate</h3><p>A digital certificate is used to verify the identity of the user to whom the public key belongs. In our daily life, if we want to verify a person’s identity, the usual practice is to check his ID card. We trust the credibility of the ID card issuer, i.e., the government agency, so as long as we verify that a person’s ID card is not forged, we believe that the person’s identity is consistent with what is described on the ID card.<br>A digital certificate is a person’s or organization’s ID card in the network world, and its issuing authority is the certificate authority (CA), which uses its own private key to sign the user’s identity information (mainly the user name and the user’s public key), and the signature and the user’s identity information together form the certificate.</p><p>Digital certificates are generally issued by digital certificate certification authorities and require</p><ul><li>The applicant generates a pair of <strong>public key</strong> and <strong>key</strong> through <strong>asymmetric encryption algorithm (RSA)</strong>, and then sends the required application information (country, domain name, etc.) together with the public key to <strong>certificate authority (CA)</strong>.</li><li>The CA structure confirms that the message is correct and then generates a digest signature M of the entire application message using <strong> message digest algorithm</strong> (MD5, SHA), and then encrypts the <strong>signature M and the digest algorithm used</strong> with <strong>CA’s own private key</strong>.</li></ul><h4 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h4><ol><li>The issuing authority of the certificate (Issuer)<br>Indicate what authority issued the certificate, that is, specify which certificate center (certificate authority, or CA) issued the certificate (only the creation of the certificate, not the user of the certificate).</li><li>the validity of the certificate (Valid from , Valid to)<br>That is, the validity of the certificate, or the period of use of the certificate. After the validity period, the certificate will be invalidated and can not be used.</li><li>public key<br>This was introduced earlier when we introduced the public key cryptosystem. The public key is used to encrypt and decrypt the message and is a long string of numbers.</li><li>certificate owner (Subject)<br>To whom this certificate is issued, or the owner of the certificate, is usually a person or a company name, the name of an organization, the URL of a company website, etc.</li><li>the algorithm used for the signature (Signature algorithm)<br>This refers to the encryption algorithm used for the digital signature of this digital certificate, so that the public key inside the certificate of the certificate issuing authority can be used to decrypt the fingerprint according to this algorithm. The encryption result of the fingerprint is the digital signature</li><li>fingerprint and fingerprint algorithm (Thumbprint, Thumbprint algorithm)<br>This is used to ensure the integrity of the certificate, that is, to ensure that the certificate has not been modified. The principle is that when issuing a certificate, the issuer calculates the hash value (fingerprint) of the whole certificate according to the fingerprint algorithm (a hash algorithm) and puts it together with the certificate, and when the user opens the certificate, he/she also calculates the hash value (fingerprint) of the certificate according to the fingerprint algorithm, and if it is correct with the initial value, it means that the certificate has not been modified, because after the content of the certificate is modified, the hash value (fingerprint) calculated according to the content of the certificate will change. The hash value (fingerprint) calculated according to the content of the certificate will be changed after the content of the certificate is modified.</li></ol><p>In fact, any individual/organization can become a CA (self-signed certificate), but the certificate client you issue is not trusted, also on the aforementioned need for authority. For example <strong>Symantec, Comodo, Godaddy, Digicert</strong>.</p><p>Clients trusting these CAs keep the <strong>root certificate</strong> (<strong>root certificate</strong>) of these CAs locally, <strong>root certificate is the CA’s own certificate</strong>, which is the beginning of the certificate verification chain. The root certificate has no authority (which is already an authority) to do digital signatures for it again, so it is all self-signed.</p><p>The CA will use <strong>intermediate-certificate</strong> to sign the server-side certificate instead of the root certificate, ensuring that the root certificate key is absolutely inaccessible.</p><h4 id="Certificate-Trust-Chain"><a href="#Certificate-Trust-Chain" class="headerlink" title="Certificate Trust Chain"></a>Certificate Trust Chain</h4><p>As mentioned before, when applying for a certificate from CA, we need <strong>CA’s private key</strong> to do asymmetric encryption on the signature digest of the whole certificate, that is, the certificate can be decrypted by <strong>CA’s public key</strong> to get <strong>signature digest</strong> of the certificate. When we sign the whole certificate again with <strong>the same digest algorithm</strong> (the algorithm used is stored inside the certificate), if the obtained signature is consistent with the signature on the certificate, it means that the certificate is trustworthy.</p><p>Similarly, intermediary certificates can be proven to be trustworthy in this way. Such a whole process is called <strong>Chain of trust</strong>.</p><p>It is I <strong>absolutely</strong> believe in you (A&gt;B); you <strong>absolutely</strong> believe in him (B&gt;C); equal to I <strong>absolutely</strong> believe in him (A&gt;C)</p><p>The client gets the certificate returned by the server, and by reading it, it gets <strong>the issuing authority (Issuer) of the server-side certificate</strong></p><p>The client goes to the OS to find the certificate of this publisher, and if it is not the root certificate it continues recursively <strong>until it gets the root certificate</strong> (usually stored in a more secure place, such as the source code of the framework, etc.).</p><p>Use the public key of the <strong>root certificate</strong> to <strong>decrypt and verify</strong> the <strong>legitimacy</strong> of the certificate on the previous layer, and then take the public key of the certificate on the previous layer to verify the legitimacy of the certificate on a higher layer; recursive backtracking.</p><p>Finally, verify that the server-side certificate is <strong>trusted</strong>.</p><h2 id="Introduction-to-RSA-principles"><a href="#Introduction-to-RSA-principles" class="headerlink" title="Introduction to RSA principles"></a>Introduction to RSA principles</h2><div class="table-container"><table><thead><tr><th>1</th><th>Find the prime numbers</th><th>P, Q</th><th>-</th></tr></thead><tbody><tr><td>2</td><td>Calculate the common modulus</td><td>N = P * Q</td><td>-</td></tr><tr><td>3</td><td>Euler function</td><td>φ(N) = (P-1)(Q-1)</td><td>-</td></tr><tr><td>4</td><td>Compute the public key E</td><td>1 &lt; E &lt; φ(N)</td><td>E must be an integer E and φ(N) must be mutually prime</td></tr><tr><td>5</td><td>Compute the private key D</td><td>E * D % φ(N) = 1</td><td>-</td></tr><tr><td>6</td><td>Encryption</td><td>C = M E mod N</td><td>C: ciphertext M: plaintext</td></tr><tr><td>7</td><td>Decryption</td><td>M = C D mod N</td><td>C: ciphertext M: plaintext</td></tr></tbody></table></div><p>Reference article:</p><p><a href="https://blog.csdn.net/wzzvictory/article/details/9015155">https://blog.csdn.net/wzzvictory/article/details/9015155</a></p><p><a href="https://cloud.tencent.com/developer/article/1130051">https://cloud.tencent.com/developer/article/1130051</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;While reading about the principles of https today, I found that it uses the knowledge of asymmetric encryption, so I went to explore the basic principles of asymmetric encryption.&lt;br&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/en/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>ARP virus principle and defense</title>
    <link href="https://sunra.top/en/posts/dfdf7442/"/>
    <id>https://sunra.top/en/posts/dfdf7442/</id>
    <published>2019-09-15T00:08:41.000Z</published>
    <updated>2023-06-07T12:40:51.466Z</updated>
    
    <content type="html"><![CDATA[<p>ARP virus principle and defense and how to quickly locate the source of ARP virus.</p><span id="more"></span><h2 id="ARP-protocol"><a href="#ARP-protocol" class="headerlink" title="ARP protocol"></a>ARP protocol</h2><p> ARP protocol (address resolution protocol)</p><p>A host communicates with another host to know the IP address of the target, but the network card that transmits data in the LAN cannot recognize the IP address directly, so the ARP resolution protocol is used to decode the IP address</p><p>The basic function of ARP protocol is to query the mac address of the target device by the IP address of the target device.</p><p>In any host on the LAN, there is an ARP cache table, which stores the IP addresses and MAC addresses of the hosts and routers on the LAN that are known to this machine.</p><p>The life cycle of the table is time-bound (typically no more than 20 minutes).</p><p>Suppose there are four hosts A,B,C,D in the LAN</p><p>Host A wants to communicate with Host B</p><p>Host A will first check its ARP cache table for B’s contact information, and if so, it will encapsulate the mac-b address outside the packet and send it out. If not, A will send a network-wide</p><p>ARP broadcast packet, asking aloud: My IP address is 192.168.0.2 and my hardware address is mac-a. I want to know what is the hardware address of IP address 192.168.0.3.   At this moment, all the</p><p>Hosts are received, B will receive a separate private response: I am 192.168.0.3, my hardware address is mac-b, other hosts will not care about A</p><p>At this point, A knows the information of B, and also dynamically updates its own cache table</p><h3 id="Defects"><a href="#Defects" class="headerlink" title="Defects"></a>Defects</h3><p>ARP protocol is based on trusting all nodes in the LAN and he is very efficient. But it is not secure. It is stateless protocol. He does not check whether he has sent the request packet or not.</p><p>Nor does he know if he has sent a request packet. He also doesn’t care if it’s a legitimate reply, as long as he receives an ARP reply or ARP broadcast packet (both ARP reply and ARP request) whose destination mac address is his own.</p><p>All will be accepted and cached.</p><h2 id="ARP-attack-principle"><a href="#ARP-attack-principle" class="headerlink" title="ARP attack principle"></a>ARP attack principle</h2><p>ARP spoofing attacks build on mutual trust between LAN hosts</p><p>When A sends a broadcast asking: I want to know what is the hardware address of the IP is 192.168.0.3?</p><p>At this point B will of course talk back: I am IP 192.168.0.3 my hardware address is mac-b.</p><p>But at this time, the IP address is 192.168.0.4 C is also illegal back: I am IP 192.168.0.3, my hardware address is mac-c. And it is a lot of.</p><p>So A will mistakenly believe that the hardware address of 192.168.0.3 is mac-c, and dynamically update the cache table</p><p>This way host C hijacks the data sent by host A to host B. This is the process of ARP spoofing.</p><p>If C impersonates the gateway directly, at this time, host C will keep sending ARP spoofing broadcasts, saying loudly: my IP is 192.168.0.1, my hardware address is mac-c</p><p>At this time, all hosts on the LAN are tricked into changing their own cache tables, at which point C will listen to datagrams sent to the Internet from the entire LAN.</p><h2 id="How-to-find-the-source-of-the-virus-quickly"><a href="#How-to-find-the-source-of-the-virus-quickly" class="headerlink" title="How to find the source of the virus quickly"></a>How to find the source of the virus quickly</h2><h3 id="Use-Sniffer-to-capture-packets"><a href="#Use-Sniffer-to-capture-packets" class="headerlink" title="Use Sniffer to capture packets"></a>Use Sniffer to capture packets</h3><p>Run packet capture software on any host within the network to capture all packets arriving on this machine. If a certain IP is found to be constantly sending request packets, then this computer is generally the source of the virus. Principle: No matter what kind of ARP virus variants, there are two ways to behave, one is to deceive the gateway, and the other is to deceive all hosts in the network.</p><h3 id="Use-the-arp-a-command"><a href="#Use-the-arp-a-command" class="headerlink" title="Use the arp -a command"></a>Use the arp -a command</h3><p>Arbitrarily select two hosts that can not access the Internet, run the arp -a command under the DOS command window. For example, in the results, the two computers in addition to the IP of the gateway, MAC address corresponding items, both contain 192.168.0.186 of this IP, then you can conclude that 192.168.0.186 this host is the source of the virus. Principle: In general, the hosts in the network only communicate with the gateway.</p><h3 id="Use-the-tracert-command"><a href="#Use-the-tracert-command" class="headerlink" title="Use the tracert command"></a>Use the tracert command</h3><p>On any of the affected hosts, run the following command in a DOS command window: tracert 61.135.179.148. Assuming that the default gateway is set to 10.8.6.1, when tracing an external address, the first hop is 10.8.6.186, then 10.8.6.186 is the source of the virus. Principle: The poisoned host plays the role of a “middleman” between the affected host and the gateway. All the packets that should have reached the gateway were sent to the poisoned host because of the wrong MAC address. At this point, the poisoned host oversteps its role and plays the role of the default gateway.</p><h2 id="ARP-Defense"><a href="#ARP-Defense" class="headerlink" title="ARP Defense"></a>ARP Defense</h2><h3 id="ARP-bi-directional-binding"><a href="#ARP-bi-directional-binding" class="headerlink" title="ARP bi-directional binding"></a>ARP bi-directional binding</h3><p> IP+mac binding on the PC side</p><p> Use ip+mac+port binding on network devices (switch routing)</p><p>The gateway also performs static binding of IP and mac</p><h3 id="Establish-DHCP-server"><a href="#Establish-DHCP-server" class="headerlink" title="Establish DHCP server"></a>Establish DHCP server</h3><p>ARP attacks generally attack the gateway first, setting up the DHCP server on the gateway</p><h3 id="Delineate-safe-areas"><a href="#Delineate-safe-areas" class="headerlink" title="Delineate safe areas"></a>Delineate safe areas</h3><p>ARP broadcast packets cannot be propagated across subnets or network segments, and network segments can isolate broadcast packets; VLAN is a logical broadcast domain, and multiple subnets can be created in the LAN through VLAN technology, which can isolate the broadcast in the LAN and reduce the scope of infection.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ARP virus principle and defense and how to quickly locate the source of ARP virus.&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/en/categories/Network/"/>
    
    
  </entry>
  
</feed>
