<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARP virus principle and defense</title>
    <url>/en/posts/dfdf7442/</url>
    <content><![CDATA[<p>ARP virus principle and defense and how to quickly locate the source of ARP virus.</p>
<span id="more"></span>
<h2 id="ARP-protocol"><a href="#ARP-protocol" class="headerlink" title="ARP protocol"></a>ARP protocol</h2><p> ARP protocol (address resolution protocol)</p>
<p>A host communicates with another host to know the IP address of the target, but the network card that transmits data in the LAN cannot recognize the IP address directly, so the ARP resolution protocol is used to decode the IP address</p>
<p>The basic function of ARP protocol is to query the mac address of the target device by the IP address of the target device.</p>
<p>In any host on the LAN, there is an ARP cache table, which stores the IP addresses and MAC addresses of the hosts and routers on the LAN that are known to this machine.</p>
<p>The life cycle of the table is time-bound (typically no more than 20 minutes).</p>
<p>Suppose there are four hosts A,B,C,D in the LAN</p>
<p>Host A wants to communicate with Host B</p>
<p>Host A will first check its ARP cache table for B’s contact information, and if so, it will encapsulate the mac-b address outside the packet and send it out. If not, A will send a network-wide</p>
<p>ARP broadcast packet, asking aloud: My IP address is 192.168.0.2 and my hardware address is mac-a. I want to know what is the hardware address of IP address 192.168.0.3.   At this moment, all the</p>
<p>Hosts are received, B will receive a separate private response: I am 192.168.0.3, my hardware address is mac-b, other hosts will not care about A</p>
<p>At this point, A knows the information of B, and also dynamically updates its own cache table</p>
<h3 id="Defects"><a href="#Defects" class="headerlink" title="Defects"></a>Defects</h3><p>ARP protocol is based on trusting all nodes in the LAN and he is very efficient. But it is not secure. It is stateless protocol. He does not check whether he has sent the request packet or not.</p>
<p>Nor does he know if he has sent a request packet. He also doesn’t care if it’s a legitimate reply, as long as he receives an ARP reply or ARP broadcast packet (both ARP reply and ARP request) whose destination mac address is his own.</p>
<p>All will be accepted and cached.</p>
<h2 id="ARP-attack-principle"><a href="#ARP-attack-principle" class="headerlink" title="ARP attack principle"></a>ARP attack principle</h2><p>ARP spoofing attacks build on mutual trust between LAN hosts</p>
<p>When A sends a broadcast asking: I want to know what is the hardware address of the IP is 192.168.0.3?</p>
<p>At this point B will of course talk back: I am IP 192.168.0.3 my hardware address is mac-b.</p>
<p>But at this time, the IP address is 192.168.0.4 C is also illegal back: I am IP 192.168.0.3, my hardware address is mac-c. And it is a lot of.</p>
<p>So A will mistakenly believe that the hardware address of 192.168.0.3 is mac-c, and dynamically update the cache table</p>
<p>This way host C hijacks the data sent by host A to host B. This is the process of ARP spoofing.</p>
<p>If C impersonates the gateway directly, at this time, host C will keep sending ARP spoofing broadcasts, saying loudly: my IP is 192.168.0.1, my hardware address is mac-c</p>
<p>At this time, all hosts on the LAN are tricked into changing their own cache tables, at which point C will listen to datagrams sent to the Internet from the entire LAN.</p>
<h2 id="How-to-find-the-source-of-the-virus-quickly"><a href="#How-to-find-the-source-of-the-virus-quickly" class="headerlink" title="How to find the source of the virus quickly"></a>How to find the source of the virus quickly</h2><h3 id="Use-Sniffer-to-capture-packets"><a href="#Use-Sniffer-to-capture-packets" class="headerlink" title="Use Sniffer to capture packets"></a>Use Sniffer to capture packets</h3><p>Run packet capture software on any host within the network to capture all packets arriving on this machine. If a certain IP is found to be constantly sending request packets, then this computer is generally the source of the virus. Principle: No matter what kind of ARP virus variants, there are two ways to behave, one is to deceive the gateway, and the other is to deceive all hosts in the network.</p>
<h3 id="Use-the-arp-a-command"><a href="#Use-the-arp-a-command" class="headerlink" title="Use the arp -a command"></a>Use the arp -a command</h3><p>Arbitrarily select two hosts that can not access the Internet, run the arp -a command under the DOS command window. For example, in the results, the two computers in addition to the IP of the gateway, MAC address corresponding items, both contain 192.168.0.186 of this IP, then you can conclude that 192.168.0.186 this host is the source of the virus. Principle: In general, the hosts in the network only communicate with the gateway.</p>
<h3 id="Use-the-tracert-command"><a href="#Use-the-tracert-command" class="headerlink" title="Use the tracert command"></a>Use the tracert command</h3><p>On any of the affected hosts, run the following command in a DOS command window: tracert 61.135.179.148. Assuming that the default gateway is set to 10.8.6.1, when tracing an external address, the first hop is 10.8.6.186, then 10.8.6.186 is the source of the virus. Principle: The poisoned host plays the role of a “middleman” between the affected host and the gateway. All the packets that should have reached the gateway were sent to the poisoned host because of the wrong MAC address. At this point, the poisoned host oversteps its role and plays the role of the default gateway.</p>
<h2 id="ARP-Defense"><a href="#ARP-Defense" class="headerlink" title="ARP Defense"></a>ARP Defense</h2><h3 id="ARP-bi-directional-binding"><a href="#ARP-bi-directional-binding" class="headerlink" title="ARP bi-directional binding"></a>ARP bi-directional binding</h3><p> IP+mac binding on the PC side</p>
<p> Use ip+mac+port binding on network devices (switch routing)</p>
<p>The gateway also performs static binding of IP and mac</p>
<h3 id="Establish-DHCP-server"><a href="#Establish-DHCP-server" class="headerlink" title="Establish DHCP server"></a>Establish DHCP server</h3><p>ARP attacks generally attack the gateway first, setting up the DHCP server on the gateway</p>
<h3 id="Delineate-safe-areas"><a href="#Delineate-safe-areas" class="headerlink" title="Delineate safe areas"></a>Delineate safe areas</h3><p>ARP broadcast packets cannot be propagated across subnets or network segments, and network segments can isolate broadcast packets; VLAN is a logical broadcast domain, and multiple subnets can be created in the LAN through VLAN technology, which can isolate the broadcast in the LAN and reduce the scope of infection.</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
  </entry>
  <entry>
    <title>Exploring Asymmetric Encryption Principles</title>
    <url>/en/posts/a515898/</url>
    <content><![CDATA[<p>While reading about the principles of https today, I found that it uses the knowledge of asymmetric encryption, so I went to explore the basic principles of asymmetric encryption.<br><span id="more"></span></p>
<h2 id="Asymmetric-encryption"><a href="#Asymmetric-encryption" class="headerlink" title="Asymmetric encryption"></a>Asymmetric encryption</h2><p>In asymmetric encryption algorithm, there are two kinds of keys, public and private, where the public key is public and does not need to be kept secret and the private key is held by individuals and must be kept secure and confidential. The use of two different keys for encryption and decryption is the reason for its name.</p>
<p>Each public key corresponds to a private key.<br>In the key pair, the one that makes everyone know is the public key, and the one that is not told to everyone and only known to you is the private key.</p>
<p>If the data is encrypted with one of the keys, only the corresponding one can be decrypted.<br>If it is possible to decrypt the data with one of the keys, the data must be encrypted with the corresponding one.</p>
<p>A and B communicate with each other, and if they do not want the content of the communication to be known by others, they can encrypt the content of the communication asymmetrically.</p>
<p>For example, in the BC architecture, the data communication between the browser and the server, the server can send its public key to the browser, the browser can encrypt the information it wants to send to the server using the public key, and when the server receives the information, it can decrypt the information using its own private key to obtain the content before encryption, while ensuring that no one else can break the information. At the same time, it is guaranteed that no one else can crack the information.</p>
<p>The server can also encrypt the returned information with its own private key, and the browser can then decrypt it with the public key sent to it by the server.</p>
<h2 id="Public-Key-Authentication"><a href="#Public-Key-Authentication" class="headerlink" title="Public Key Authentication"></a>Public Key Authentication</h2><h3 id="Digital-signature"><a href="#Digital-signature" class="headerlink" title="Digital signature"></a>Digital signature</h3><p> The communication process described inside the public key encryption and decryption may seem simple, but think about this problem: In the above process, how does A know if B’s reply letter to him has been modified during the transmission process? This brings us to the concept of digital signature.</p>
<p>To achieve this, a hash calculation is generally done on the message to get a hash value. Note that this process is irreversible, which means that the original message content cannot be recovered through the hash value. When the message is sent out, the hash value is encrypted and sent out as a signature together with the message. After receiving the message, the receiver will recalculate the hash value of the message and compare it with the hash value attached to the message (after decryption), if it is the same, it means that the content of the message has not been modified, because here the hash calculation can guarantee that different contents will definitely get different hash values, so as soon as the content is modified, the hash value calculated according to the content of the message will change. Of course, an unsuspecting person can modify the message content and also modify the hash value so that they can match. To prevent this, the hash value is usually encrypted (i.e., signed) and then sent together with the message.</p>
<p>The process is illustrated by the following example:<br>B replied to A with a digital signature<br>1, B first use the hash function, to generate a summary of the letter (digest)</p>
<ol>
<li>B uses his private key to encrypt this digest, so that a digital signature is generated (signature)<br>3, B will be attached to this signature to reply to the message, together with the message sent to A<br>4、A receives B’s message, takes down the digital signature and decrypts it by B’s public key to get the summary information of the letter<br>5, A uses the hash function specified by B in the message sent by B itself, and compares the result with the digest obtained by decryption in the previous step, if they are consistent, it means that the message sent by B has not been modified.</li>
</ol>
<p>Is this the end of the problem? Far from it. Imagine that although A is sure that the message sent back to him by B is unmodified, how can he be sure that it is B who sent him the message back? What if an unsuspecting C secretly replaces B’s public key saved by A with his own and sends a message to A under B’s name?<br>To solve this problem, A just needs to be able to determine whether the public key he holds is B’s or not, which requires the use of a digital certificate.</p>
<h3 id="Digital-certificate"><a href="#Digital-certificate" class="headerlink" title="Digital certificate"></a>Digital certificate</h3><p>A digital certificate is used to verify the identity of the user to whom the public key belongs. In our daily life, if we want to verify a person’s identity, the usual practice is to check his ID card. We trust the credibility of the ID card issuer, i.e., the government agency, so as long as we verify that a person’s ID card is not forged, we believe that the person’s identity is consistent with what is described on the ID card.<br>A digital certificate is a person’s or organization’s ID card in the network world, and its issuing authority is the certificate authority (CA), which uses its own private key to sign the user’s identity information (mainly the user name and the user’s public key), and the signature and the user’s identity information together form the certificate.</p>
<p>Digital certificates are generally issued by digital certificate certification authorities and require</p>
<ul>
<li>The applicant generates a pair of <strong>public key</strong> and <strong>key</strong> through <strong>asymmetric encryption algorithm (RSA)</strong>, and then sends the required application information (country, domain name, etc.) together with the public key to <strong>certificate authority (CA)</strong>.</li>
<li>The CA structure confirms that the message is correct and then generates a digest signature M of the entire application message using <strong> message digest algorithm</strong> (MD5, SHA), and then encrypts the <strong>signature M and the digest algorithm used</strong> with <strong>CA’s own private key</strong>.</li>
</ul>
<h4 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h4><ol>
<li>The issuing authority of the certificate (Issuer)<br>Indicate what authority issued the certificate, that is, specify which certificate center (certificate authority, or CA) issued the certificate (only the creation of the certificate, not the user of the certificate).</li>
<li>the validity of the certificate (Valid from , Valid to)<br>That is, the validity of the certificate, or the period of use of the certificate. After the validity period, the certificate will be invalidated and can not be used.</li>
<li>public key<br>This was introduced earlier when we introduced the public key cryptosystem. The public key is used to encrypt and decrypt the message and is a long string of numbers.</li>
<li>certificate owner (Subject)<br>To whom this certificate is issued, or the owner of the certificate, is usually a person or a company name, the name of an organization, the URL of a company website, etc.</li>
<li>the algorithm used for the signature (Signature algorithm)<br>This refers to the encryption algorithm used for the digital signature of this digital certificate, so that the public key inside the certificate of the certificate issuing authority can be used to decrypt the fingerprint according to this algorithm. The encryption result of the fingerprint is the digital signature</li>
<li>fingerprint and fingerprint algorithm (Thumbprint, Thumbprint algorithm)<br>This is used to ensure the integrity of the certificate, that is, to ensure that the certificate has not been modified. The principle is that when issuing a certificate, the issuer calculates the hash value (fingerprint) of the whole certificate according to the fingerprint algorithm (a hash algorithm) and puts it together with the certificate, and when the user opens the certificate, he/she also calculates the hash value (fingerprint) of the certificate according to the fingerprint algorithm, and if it is correct with the initial value, it means that the certificate has not been modified, because after the content of the certificate is modified, the hash value (fingerprint) calculated according to the content of the certificate will change. The hash value (fingerprint) calculated according to the content of the certificate will be changed after the content of the certificate is modified.</li>
</ol>
<p>In fact, any individual/organization can become a CA (self-signed certificate), but the certificate client you issue is not trusted, also on the aforementioned need for authority. For example <strong>Symantec, Comodo, Godaddy, Digicert</strong>.</p>
<p>Clients trusting these CAs keep the <strong>root certificate</strong> (<strong>root certificate</strong>) of these CAs locally, <strong>root certificate is the CA’s own certificate</strong>, which is the beginning of the certificate verification chain. The root certificate has no authority (which is already an authority) to do digital signatures for it again, so it is all self-signed.</p>
<p>The CA will use <strong>intermediate-certificate</strong> to sign the server-side certificate instead of the root certificate, ensuring that the root certificate key is absolutely inaccessible.</p>
<h4 id="Certificate-Trust-Chain"><a href="#Certificate-Trust-Chain" class="headerlink" title="Certificate Trust Chain"></a>Certificate Trust Chain</h4><p>As mentioned before, when applying for a certificate from CA, we need <strong>CA’s private key</strong> to do asymmetric encryption on the signature digest of the whole certificate, that is, the certificate can be decrypted by <strong>CA’s public key</strong> to get <strong>signature digest</strong> of the certificate. When we sign the whole certificate again with <strong>the same digest algorithm</strong> (the algorithm used is stored inside the certificate), if the obtained signature is consistent with the signature on the certificate, it means that the certificate is trustworthy.</p>
<p>Similarly, intermediary certificates can be proven to be trustworthy in this way. Such a whole process is called <strong>Chain of trust</strong>.</p>
<p>It is I <strong>absolutely</strong> believe in you (A&gt;B); you <strong>absolutely</strong> believe in him (B&gt;C); equal to I <strong>absolutely</strong> believe in him (A&gt;C)</p>
<p>The client gets the certificate returned by the server, and by reading it, it gets <strong>the issuing authority (Issuer) of the server-side certificate</strong></p>
<p>The client goes to the OS to find the certificate of this publisher, and if it is not the root certificate it continues recursively <strong>until it gets the root certificate</strong> (usually stored in a more secure place, such as the source code of the framework, etc.).</p>
<p>Use the public key of the <strong>root certificate</strong> to <strong>decrypt and verify</strong> the <strong>legitimacy</strong> of the certificate on the previous layer, and then take the public key of the certificate on the previous layer to verify the legitimacy of the certificate on a higher layer; recursive backtracking.</p>
<p>Finally, verify that the server-side certificate is <strong>trusted</strong>.</p>
<h2 id="Introduction-to-RSA-principles"><a href="#Introduction-to-RSA-principles" class="headerlink" title="Introduction to RSA principles"></a>Introduction to RSA principles</h2><div class="table-container">
<table>
<thead>
<tr>
<th>1</th>
<th>Find the prime numbers</th>
<th>P, Q</th>
<th>-</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>Calculate the common modulus</td>
<td>N = P * Q</td>
<td>-</td>
</tr>
<tr>
<td>3</td>
<td>Euler function</td>
<td>φ(N) = (P-1)(Q-1)</td>
<td>-</td>
</tr>
<tr>
<td>4</td>
<td>Compute the public key E</td>
<td>1 &lt; E &lt; φ(N)</td>
<td>E must be an integer E and φ(N) must be mutually prime</td>
</tr>
<tr>
<td>5</td>
<td>Compute the private key D</td>
<td>E * D % φ(N) = 1</td>
<td>-</td>
</tr>
<tr>
<td>6</td>
<td>Encryption</td>
<td>C = M E mod N</td>
<td>C: ciphertext M: plaintext</td>
</tr>
<tr>
<td>7</td>
<td>Decryption</td>
<td>M = C D mod N</td>
<td>C: ciphertext M: plaintext</td>
</tr>
</tbody>
</table>
</div>
<p>Reference article:</p>
<p><a href="https://blog.csdn.net/wzzvictory/article/details/9015155">https://blog.csdn.net/wzzvictory/article/details/9015155</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1130051">https://cloud.tencent.com/developer/article/1130051</a></p>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>HSTS</title>
    <url>/en/posts/3daba739/</url>
    <content><![CDATA[<h3 id="Origin-HTTPS-enabled-is-not-secure-enough-either"><a href="#Origin-HTTPS-enabled-is-not-secure-enough-either" class="headerlink" title="Origin: HTTPS enabled is not secure enough either"></a>Origin: HTTPS enabled is not secure enough either</h3><p>There are a number of websites that are only served externally via HTTPS, but when users visit a website, they often type the website domain name (e.g. <a href="https://link.zhihu.com/?target=http%3A//www.example.com">Example Domain</a>) directly into their browser instead of the The full URL (e.g., <a href="https://link.zhihu.com/?target=https%3A//www.example.com">Example Domain</a>), but the browser can still make the request correctly using HTTPS. This is possible thanks to the collaboration between the server and the browser, as shown in the figure below.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034077/origin-of-ray/微信截图_20201215200744_st7ygu.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034077/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215200744_st7ygu.png"></p>
<p>Figure 1: The server and browser do a lot of work for the user behind the scenes</p>
<p>In simple terms, the browser makes an HTTP request to the website, and after getting a redirect response, initiates an HTTPS request and gets the final response content. All of this is completely transparent to the user, so it is a nice user experience for the user to enter the domain name directly into the browser and still be able to communicate securely with the website using the HTTPS protocol.</p>
<p>Everything looks so perfect, but it is not. Since there is an explicit HTTP request and redirect (steps 1 and 2 in the above diagram) before an HTTPS connection is established, it allows an attacker to hijack this request in a man-in-the-middle manner to carry out subsequent attacks, such as eavesdropping on data, tampering with requests and responses, jumping to phishing sites, etc.</p>
<span id="more"></span>
<p>Take the example of hijacking a request and jumping to a phishing site, the general approach is shown in the following figure:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034304/origin-of-ray/微信截图_20201215201136_l7n9kr.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034304/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215201136_l7n9kr.png"></p>
<p>Figure 2: Hijacking HTTP requests, blocking HTTPS connections, and conducting phishing attacks</p>
<ul>
<li>Step 1: The browser initiates an explicit HTTP request, but it will actually be intercepted by the attacker</li>
<li>Step 2: The attacker acts as a proxy and forwards the current request to the phishing site</li>
<li>Step 3: Phishing website returns fake web content</li>
<li>Step 4: The attacker returns the fake web content to the browser</li>
</ul>
<p>The subtlety of this attack is that the attacker directly hijacks the HTTP request and returns the content to the browser without giving the browser the opportunity to establish an HTTPS connection with the real website, so the browser will mistakenly believe that the real website provides services to the outside world via HTTP, and naturally will not report to the user that the current connection is not secure. So the attacker can almost unknowingly do something to the request and response.</p>
<h3 id="Solution-Use-HSTS"><a href="#Solution-Use-HSTS" class="headerlink" title="Solution: Use HSTS"></a>Solution: Use HSTS</h3><p>Since it is possible that this HTTP explicit request and redirect before establishing an HTTPS connection could be hijacked by an attacker, the natural idea to solve this problem becomes how to avoid such an HTTP request. Our desired browser behavior is that when the user tells the browser to initiate an HTTP request, the browser converts it to an HTTPS request, directly skipping the above HTTP request and redirect, thus rendering the man-in-the-middle attack ineffective to avoid the risk. The general flow is as follows:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034428/origin-of-ray/微信截图_20201215201341_n2jssi.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034428/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215201341_n2jssi.png"></p>
<p>Figure 3: Skip HTTP requests and redirects, send HTTPS requests directly</p>
<ul>
<li>Step 1: The user enters the website domain name in the browser address bar and the browser learns that the domain name should use HTTPS for communication</li>
<li>Step 2: The browser initiates an HTTPS request directly to the website</li>
<li>Step 3: The website returns the appropriate content</li>
</ul>
<p>So the question arises, how does the browser do this? How does it know which site should send HTTPS requests and which site should use HTTP requests? At this point it’s time for HSTS to shine.</p>
<h4 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h4><p>The full name of HSTS is HTTP Strict-Transport-Security, which is a Web security policy mechanism (web security policy mechanism).</p>
<p>HSTS was first included in the ThoughtWorks Technology Radar in 2015, and in the latest edition of the Technology Radar in 2016, it moved directly from the “Trial” phase to the “Adopt” phase, meaning that ThoughtWorks is strongly advocating for the industry to actively adopt this security defense and that ThoughtWorks has already applied it to its own projects. “This means that ThoughtWorks is a strong advocate for the industry’s active adoption of this security defense and that ThoughtWorks is already applying it to its own projects.</p>
<p>At the very core of HSTS is an HTTP Response Header (HSTS). It is what lets the browser know that the current domain can only be accessed via HTTPS for the next period of time, and forcibly denies the user subsequent access requests if the browser finds the current connection insecure.</p>
<p>The syntax of the HSTS Header is as follows:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Strict-Transport-Security: &lt;max-age=&gt;[; includeSubDomains][; preload]</span><br></pre></td></tr></table></figure>
<p>Among them:</p>
<ul>
<li>max-age is a mandatory parameter, it is a value in seconds, it represents the expiration time of HSTS Header, usually set to 1 year, i.e. 31536000 seconds.</li>
<li>includeSubDomains is an optional parameter, if it is included, it means that both the current domain and its subdomains have HSTS protection enabled.</li>
<li>preload is an optional parameter and is only needed when you request to add your domain name to the browser built-in list. More details about the browser built-in list are described below.</li>
</ul>
<h4 id="lets-browsers-initiate-HTTPS-requests-directly"><a href="#lets-browsers-initiate-HTTPS-requests-directly" class="headerlink" title="lets browsers initiate HTTPS requests directly"></a>lets browsers initiate HTTPS requests directly</h4><p>Just add the HTTP Header Strict-Transport-Security (hereinafter referred to as HSTS Header) to the response header returned by the server to the browser, e.g:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Strict-Transport-Security: max-age=31536000; includeSubDomains</span><br></pre></td></tr></table></figure>
<p>It will tell the browser that for the next 31536000 seconds (1 year), it should be mandatory to use only HTTPS for subsequent communications for the current domain and its subdomains until the expiration date is exceeded.</p>
<p>The complete process is shown in the following diagram:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034571/origin-of-ray/微信截图_20201215201603_mijchx.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608034571/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215201603_mijchx.png"></p>
<p>Figure 4: The complete HSTS process</p>
<p>As long as it is within the validity period, the browser will be directly mandatory to initiate HTTPS requests, but the question arises again, how to do after the validity period? In fact, do not worry too much about this, because HSTS Header exists in each response, with the user and the site’s interaction, this effective time is always refreshing, plus the validity period is usually set to 1 year, so as long as the user’s before and after the time between the two requests does not exceed 1 year, there is basically no security risk. What’s more, even if the expiration date is exceeded, as long as the user interacts with the website once again, the user’s browser will turn on the HSTS protection which is valid for 1 year again.</p>
<h4 id="Force-rejection-of-unsafe-links-without-giving-users-a-choice"><a href="#Force-rejection-of-unsafe-links-without-giving-users-a-choice" class="headerlink" title="Force rejection of unsafe links, without giving users a choice"></a>Force rejection of unsafe links, without giving users a choice</h4><p>In the absence of HSTS protection, when the browser finds that the certificate of the current website is wrong, or that the communication between the browser and the server is insecure and an HTTPS connection cannot be established, the browser will usually warn the user, but then allow the user to continue with the insecure access. As shown in the figure below, the user can click on the link in the red box in the figure to continue accessing under an insecure connection.</p>
<p><img src="https://pic4.zhimg.com/80/v2-b69590c9522f75bbd8ef0c73382e0a57_720w.jpg" alt="img"></p>
<p>Figure 5: Browser still allows users to make unsafe access</p>
<p>In theory, after seeing this warning, users should be more alert and realize that the communication between themselves and the website is not safe, and may be hijacked or eavesdropped, and if the website they visit happens to be a bank or financial website, the consequences are even worse, so they should terminate the follow-up operation. However, the reality is cruel, as far as my actual observation, many users still choose to continue to visit after encountering such a warning.</p>
<p>But with the advent of HSTS, things have taken a turn for the better. For websites with browser HSTS protection enabled, if the browser finds that the current connection is not secure, it will simply warn the user and no longer give the user the option of whether to continue accessing, thus avoiding subsequent security issues. For example, when accessing the Google search engine, if the current communication connection has security issues, the browser will completely block the user from continuing to access Google, as shown in the figure below.</p>
<p><img src="https://pic4.zhimg.com/80/v2-b9df0eb3dcc8da972eec57f0051c2f3b_720w.jpg" alt="img"></p>
<p>Figure 6: The browser completely blocks the user from continuing unsafe access</p>
<h3 id="The-devil-is-high-attackers-still-have-a-chance-to-take-advantage-of"><a href="#The-devil-is-high-attackers-still-have-a-chance-to-take-advantage-of" class="headerlink" title="The devil is high: attackers still have a chance to take advantage of"></a>The devil is high: attackers still have a chance to take advantage of</h3><p>Careful you may have found, HSTS there is a weak link, that is, when the browser does not have the current site HSTS information, or the first visit to the site, still need an explicit HTTP request and redirect to switch to HTTPS, as well as refresh the HSTS information. And it is such a moment but leaves an opportunity for attackers to take advantage of, so that they can hijack this HTTP request down and continue the man-in-the-middle attack.</p>
<h4 id="Preload-List-Making-Defense-More-Thorough"><a href="#Preload-List-Making-Defense-More-Thorough" class="headerlink" title="Preload List: Making Defense More Thorough"></a>Preload List: Making Defense More Thorough</h4><p>For the above attack, HSTS also has a countermeasure, that is, a list is built into the browser, and as long as the domain name is in this list, the browser will only use HTTPS to initiate a connection, no matter when or what the situation is. This list is maintained by Google Chromium, which is used by FireFox, Safari, IE and other mainstream browsers.</p>
<h3 id="Some-Tips"><a href="#Some-Tips" class="headerlink" title="Some Tips"></a>Some Tips</h3><p><strong>Tip 1: How to configure HSTS</strong></p>
<p>There are many places where you can configure HSTS, such as reverse proxy servers, application servers, application frameworks, and custom Header in applications. you can choose according to the actual situation.<br>It is common to configure this in a proxy server, in the case of Nginx, by simply adding the following directive to the configuration file:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;</span><br></pre></td></tr></table></figure>
<p>However, special attention should be paid to the use of HSTS in a production environment, because once the browser receives the HSTS Header (if it is valid for 1 year), but there happens to be a problem with the website’s certificate, the user will not be able to access your website for the next 1 year until the certificate error is fixed, or the user actively clears the browser cache.</p>
<p>Therefore, it is recommended that when HSTS is turned on in the production environment, the value of max-age should be set smaller first, for example, 5 minutes, and then check whether HSTS can work properly and whether the website can be accessed normally, and then gradually extend the time, for example, 1 week or 1 month, and continue to check whether HSTS works properly within this time frame before finally changing to 1 year.</p>
<p><strong>Tip 2: How to Add to HSTS Preload List</strong></p>
<p>According to the official instructions, your website can make a request to be added to this list after having the following conditions</p>
<ul>
<li>Have a valid certificate</li>
<li>Provide redirected responses on the same host, as well as receive redirected HTTPS requests</li>
<li>All subdomains use HTTPS</li>
<li>In the HTTP response header for the root domain, include the HSTS Header with the following conditions:<ul>
<li>The minimum expiration time must not be less than 18 weeks (10,886,400 seconds)</li>
<li>The includeSubDomains parameter must be included</li>
<li>The preload parameter must be included<br>Once you are ready for these, you can submit your application on the official website of HSTS Preload List (<a href="https://link.zhihu.com/?target=https%3A//hstspreload.org">https://hstspreload.org</a>), or learn more details about content.</li>
</ul>
</li>
</ul>
<p><strong>Tip 3: How to check if a domain name is added to the Preload List</strong></p>
<p>There may be a wait time ranging from a few days to a few weeks between submitting the application and completing the review and successful addition to the built-in list. You can check the status through the official website <a href="https://link.zhihu.com/?target=https%3A//hstspreload.org">https://hstspreload.org</a> or by typing chrome://net-internals/#hsts in the Chrome address bar Check the status.</p>
<h3 id="The-pitfalls-of-HSTS"><a href="#The-pitfalls-of-HSTS" class="headerlink" title="The pitfalls of HSTS"></a>The pitfalls of HSTS</h3><ul>
<li>HSTS can’t handle pure IP requests, like <code>http://2.2.2.2</code>, even if STS is set in the response header (not tested)</li>
<li>HSTS can only switch between ports 80 and 443, if the service is port 8080, even if STS is set, it is not valid (not tested)</li>
<li>If the browser certificate is wrong, the general situation will remind the existence of security risks, but is still given a link to enter the target page, while HSTS is no target page entrance, so once the certificate configuration error, is a big failure</li>
<li>If the server’s HTTPS is not configured properly and the STS response header is turned on, and a long expiration time is set, then until your server’s HTTPS is configured properly, users will not be able to connect to your server unless the max-age has expired.</li>
<li>HSTS can get your site to A+ on ssllab (which is not the pits)</li>
</ul>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>As more and more websites start to use HTTPS, or even turn on full-site HTTPS, the security of data during transmission can be greatly guaranteed. At the same time, with the help of HSTS, data communication can be made more secure by avoiding SSL Stripping or man-in-the-middle attacks. This article hopes that through the analysis of HSTS, more development teams will apply HSTS to their own projects.</p>
<p>Reprinted article from:</p>
<p><a href="https://zhuanlan.zhihu.com/p/63674248">https://zhuanlan.zhihu.com/p/63674248</a></p>
<p><a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">https://www.barretlee.com/blog/2015/10/22/hsts-intro/</a></p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>InfineScroll 无限加载bug</title>
    <url>/en/posts/fd076279/</url>
    <content><![CDATA[<p>I recently used the infinite loading component in the latest version of elementUI, and in some cases the loading function may be called infinitely during use, so I went to study the source code.</p>
<span id="more"></span>
<p>Before reading the source code, the first two functions to understand a little, respectively, MutationObserver and throttle function</p>
<h3 id="MutationObserver函数"><a href="#MutationObserver函数" class="headerlink" title="MutationObserver函数"></a>MutationObserver函数</h3><h4 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h4><ul>
<li><p>Interface for monitoring DOM changes</p>
<p>The MutationObserver will be notified when the monitored DOM changes and trigger a pre-defined callback function.</p>
</li>
<li><p>Similar to events, but triggered asynchronously</p>
<p>The observer function on the MutationObserver is similar to addEventListener when adding a watch, but unlike the synchronous trigger of the latter, the MutationObserver is triggered asynchronously, which is to avoid frequent DOM changes that cause the callback function to be called frequently and cause browser lag.</p>
</li>
</ul>
<h4 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(callback);</span><br></pre></td></tr></table></figure>
<p> The first argument is an array of all <code>MutationRecord</code> objects, and the second argument is the MutationObserver instance itself.</p>
<h4 id="Instance-Method"><a href="#Instance-Method" class="headerlink" title="Instance Method"></a>Instance Method</h4><h5 id="Observe"><a href="#Observe" class="headerlink" title="Observe"></a>Observe</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Observe</span>(<span class="title class_">Node</span> target, optional <span class="title class_">MutationObserverInit</span> options);</span><br></pre></td></tr></table></figure>
<p>Add DOM nodes to the MutationObserver instance to observe and configure which changes to observe with an optional options parameter, which is an object named <code>MutationObserverInit</code>.</p>
<p>The following are the properties of the <code>MutationObserverInit</code> object and their descriptions:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Properties</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>childList</td>
<td>Boolean</td>
<td>Whether to watch for changes in child nodes</td>
</tr>
<tr>
<td>attributes</td>
<td>Boolean</td>
<td>Whether to watch for changes in attributes</td>
</tr>
<tr>
<td>characterData</td>
<td>Boolean</td>
<td>Whether the node content or node text changes</td>
</tr>
<tr>
<td>subtree</td>
<td>Boolean</td>
<td>Whether to observe the changes of all descendant nodes</td>
</tr>
<tr>
<td>attributeOldValue</td>
<td>Boolean</td>
<td>Whether to record the value of the attribute before the change when observing changes to attributes</td>
</tr>
<tr>
<td>characterDataOldValue</td>
<td>Boolean</td>
<td>If or not the value of the attribute before the change is recorded when observing a change in characterData</td>
</tr>
<tr>
<td>attributeFilter</td>
<td>Array</td>
<td>indicates a specific attribute to be observed (e.g. [‘class’,’src’]), attribute changes that are not in this array will be ignored</td>
</tr>
</tbody>
</table>
</div>
<p>Notes:</p>
<ul>
<li>You cannot observe subtree changes alone; you must specify one or more of childList, attributes, and characterData at the same time.</li>
<li>Adding the same MutationObserver multiple times for the same DOM node is not valid and the callback function will only be triggered once. However, if different options objects are specified (i.e., different changes are observed), they are treated as different MutationObservers.</li>
</ul>
<h5 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h5><p>This method is used to stop the watch. Subsequent changes to the DOM node will not trigger the callback function.</p>
<p>JavaScript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">observer.<span class="title function_">disconnect</span>();</span><br></pre></td></tr></table></figure>
<p>Other more introductions can be found in the links at the end of the article</p>
<h3 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h3><p> Both debounce and <code>throttle</code> are high-order functions that are commonly used in development to prevent functions from being called too often, in other words, to control how many times a function is executed within a certain period of time.</p>
<p><strong>Use scenario</strong>: For example, when binding response to mouse movement, window resizing, scrolling and other events, the frequency of binding functions triggered will be very frequent. If the slightly more complex processing function requires more arithmetic execution time and resources, there will often be delays, even leading to false death or a sense of lag. In order to optimize performance, it is necessary to use <code>debounce</code> or <code>throttle</code> at this time.</p>
<h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_.throttle(func, [wait=0], [options=&#123;&#125;])</span><br></pre></td></tr></table></figure>
<p>Throttle function, a function that executes fn at most once in wait seconds.<br>Unlike the difference, there will be a threshold value, and when it is reached, the fn will definitely be executed.</p>
<h3 id="InfineScroll-source-code-analysis"><a href="#InfineScroll-source-code-analysis" class="headerlink" title="InfineScroll source code analysis"></a>InfineScroll source code analysis</h3><h4 id="Component-Configuration"><a href="#Component-Configuration" class="headerlink" title="Component Configuration"></a>Component Configuration</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> attributes = &#123;</span><br><span class="line">  <span class="attr">delay</span>: &#123; <span class="comment">// delay time, threshold for the throttle function</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">200</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">distance</span>: &#123; <span class="comment">// The load function is triggered only if the distance is greater than this value after each scroll</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">disabled</span>: &#123; <span class="comment">//does not allow new data to be loaded</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">immediate</span>: &#123; <span class="comment">// whether to call a data load immediately upon page initialization</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Get-Configuration-Functions"><a href="#Get-Configuration-Functions" class="headerlink" title="Get Configuration Functions"></a>Get Configuration Functions</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getScrollOptions</span> = (<span class="params">el, vm</span>) =&gt; &#123; <span class="comment">// Get the configuration passed in by the component, if not pass in the default value of the configuration</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isHtmlElement</span>(el)) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">entries</span>(attributes).<span class="title function_">reduce</span>(<span class="function">(<span class="params">map, [key, option]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; type, <span class="attr">default</span>: defaultValue &#125; = option;</span><br><span class="line">    <span class="keyword">let</span> value = el.<span class="title function_">getAttribute</span>(<span class="string">`infinite-scroll-<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">    value = <span class="title function_">isUndefined</span>(vm[value]) ? value : vm[value];</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">Number</span>:</span><br><span class="line">        value = <span class="title class_">Number</span>(value);</span><br><span class="line">        value = <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(value) ? defaultValue : value;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">Boolean</span>:</span><br><span class="line">        value = <span class="title function_">isDefined</span>(value) ? value === <span class="string">&#x27;false&#x27;</span> ? <span class="literal">false</span> : <span class="title class_">Boolean</span>(value) : defaultValue;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        value = <span class="title function_">type</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    map[key] = value;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;InfiniteScroll&#x27;</span>,</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cb = binding.<span class="property">value</span>; <span class="comment">// function to load the data passed in by the component</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vm = vnode.<span class="property">context</span>;</span><br><span class="line">    <span class="comment">// only include vertical scroll</span></span><br><span class="line">    <span class="keyword">const</span> container = <span class="title function_">getScrollContainer</span>(el, <span class="literal">true</span>); <span class="comment">// 获取滚动条的容器</span></span><br><span class="line">    <span class="keyword">const</span> &#123; delay, immediate &#125; = <span class="title function_">getScrollOptions</span>(el, vm); <span class="comment">//get the configuration of the formation, explained next</span></span><br><span class="line">    <span class="keyword">const</span> onScroll = <span class="title function_">throttle</span>(delay, handleScroll.<span class="title function_">bind</span>(el, cb)); <span class="comment">// callback function when scrolling occurs, utilizing throttle, the first parameter of throttle is a threshold value, the second parameter is a function that can control the execution of the second at most once within the threshold time The function passed in the parameter</span></span><br><span class="line"></span><br><span class="line">    el[scope] = &#123; el, vm, container, onScroll &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, onScroll); <span class="comment">// Add a listener for scrolling</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">          <span class="comment">// whether to trigger data loading immediately, it can ensure that the data vertically fill the container, specifically because MutationObserver listens to the container&#x27;s dom change, once the change immediately triggers data loading, and data loading will change the dom, resulting in a circular call to the data loading function, until a certain call to the bottom of the scrollbar, it will call MutationObserver.disconnect(), stop listening to the dom change</span></span><br><span class="line">        <span class="keyword">const</span> observer = el[scope].<span class="property">observer</span> = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(onScroll);</span><br><span class="line">        observer.<span class="title function_">observe</span>(container, &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="title function_">onScroll</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">unbind</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; container, onScroll &#125; = el[scope];</span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      container.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, onScroll);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Callback-function-when-a-scroll-event-is-listened-to"><a href="#Callback-function-when-a-scroll-event-is-listened-to" class="headerlink" title="Callback function when a scroll event is listened to"></a>Callback function when a scroll event is listened to</h4><p>This function is not only called at the start of scrolling, but if immidate is set to true, the component will be called explicitly at the beginning of loading to load data until the container is filled.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scope = <span class="string">&#x27;ElInfiniteScroll&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getElementTop</span> = el =&gt; el.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleScroll = <span class="keyword">function</span>(<span class="params">cb</span>) &#123; <span class="comment">//Data loading function, will first determine whether the scrollbar is at the bottom and whether the disabled parameter allows loading</span></span><br><span class="line">  <span class="keyword">const</span> &#123; el, vm, container, observer &#125; = <span class="variable language_">this</span>[scope];</span><br><span class="line">  <span class="keyword">const</span> &#123; distance, disabled &#125; = <span class="title function_">getScrollOptions</span>(el, vm);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (disabled) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> shouldTrigger = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Determine if scrolling to the bottom</span></span><br><span class="line">  <span class="keyword">if</span> (container === el) &#123;</span><br><span class="line">    <span class="comment">// be aware of difference between clientHeight &amp; offsetHeight &amp; window.getComputedStyle().height</span></span><br><span class="line">    <span class="keyword">const</span> scrollBottom = container.<span class="property">scrollTop</span> + <span class="title function_">getClientHeight</span>(container);</span><br><span class="line">    shouldTrigger = container.<span class="property">scrollHeight</span> - scrollBottom &lt;= distance;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> heightBelowTop = <span class="title function_">getOffsetHeight</span>(el) + <span class="title function_">getElementTop</span>(el) - <span class="title function_">getElementTop</span>(container);</span><br><span class="line">    <span class="keyword">const</span> offsetHeight = <span class="title function_">getOffsetHeight</span>(container);</span><br><span class="line">    <span class="keyword">const</span> borderBottom = <span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="title function_">getStyleComputedProperty</span>(container, <span class="string">&#x27;borderBottomWidth&#x27;</span>));</span><br><span class="line">    shouldTrigger = heightBelowTop - offsetHeight + borderBottom &lt;= distance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (shouldTrigger &amp;&amp; <span class="title function_">isFunction</span>(cb)) &#123;</span><br><span class="line">    cb.<span class="title function_">call</span>(vm);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (observer) &#123;</span><br><span class="line">    <span class="comment">// When a data loading function is called but the scrollbar is not yet at the bottom, and the MutationObserver is used to listen for changes in the component&#x27;s dom, turn off the listener, which will only work if immediate is true and the MutationObserver is registered when the component is registered, resulting in a cyclic call to the data loading function</span></span><br><span class="line">    observer.<span class="title function_">disconnect</span>();</span><br><span class="line">    <span class="variable language_">this</span>[scope].<span class="property">observer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>So that when the container initial no height, and set the IMMEDIATE, will explicitly trigger a scroll callback function, while adding MutationObserver for the container, and this will make the container initialized when the data loaded to fill the container. But because the scrollTop is always 0, there is no way to judge the scroll bar to the bottom, so the logic of disconnect MutationObserver in the data loading function will not be called, and it will be caught in the cycle of calling data loading, container change, call again, and change again.</p>
<h4 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h4><ol>
<li>directly set immidate to false, it will not register MutationObserve</li>
<li>assign a height to the container.</li>
</ol>
<p>Reference article:</p>
<p> <a href="https://juejin.im/entry/5a9d4eea518825556b6c440d">https://juejin.im/entry/5a9d4eea518825556b6c440d</a></p>
<p> <a href="https://juejin.im/entry/57de3fc30bd1d00057f2ea33">https://juejin.im/entry/57de3fc30bd1d00057f2ea33</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>TamperMonkey</title>
    <url>/en/posts/e438c689/</url>
    <content><![CDATA[<p>The Chrome extensions are an important reason why many people choose Chrome, and after years of development, Chrome has a wide variety of extensions.</p>
<span id="more"></span>
<p>“Grease Monkey also allows you to customize your website by installing various scripts. But it can customize more than just the style of the site, it can also implement more and more powerful features, such as</p>
<ul>
<li>Direct download of Baidu.com files</li>
<li>Re-customize the complicated Weibo page</li>
<li>Removing video playback ads</li>
<li>Changing the default “QR code login” back to “account password login”</li>
<li>Bypass the search engine jump prompt</li>
<li>Returned the fresh novel reading mode</li>
<li>Douban and IMDb show each other’s ratings</li>
</ul>
<h2 id="TamperMonkey-Introduction"><a href="#TamperMonkey-Introduction" class="headerlink" title="TamperMonkey Introduction"></a>TamperMonkey Introduction</h2><p>TamperMonkey allows us to write some js scripts to help us do some specific work. It’s scripting is no different from normal js code, but still has some features of its own.</p>
<p>For the full list of features, you can go directly to the official documentation: <a href="https://www.tampermonkey.net/documentation.php?ext=dhdg">https://www.tampermonkey.net/documentation.php?ext=dhdg</a></p>
<p>Here is a brief description of a few common ones:</p>
<h3 id="Commonly-used-properties"><a href="#Commonly-used-properties" class="headerlink" title="Commonly used properties"></a>Commonly used properties</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Property Name</th>
<th>Function</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>The name of the Grease Monkey script</td>
<td></td>
</tr>
<tr>
<td>namespace</td>
<td>Namespace, similar to Java package name, used to distinguish scripts with the same name, usually written as author name or URL.</td>
</tr>
<tr>
<td>version</td>
<td>version of the script, updates to the Grease Monkey script will read this version number</td>
</tr>
</tbody>
</table>
</div>
<p>description | description | The description of the script, used to tell the user what the script is for | |<br>| author | author’s name | |<br>| match | Only matching URLs will execute the corresponding script, e.g. <code>*</code>, <code>http://*</code>, <code>http://www.baidu.com/*</code>, etc., see <a href="https://developer.chrome.com/extensions/match_">Google Developer Documentation</a> patterns) | | grant<br>| grant | specify the permission required to run the script, if the script has the corresponding permission, it can use the API provided by the Grease Monkey extension to interact with the browser. If set to <code>none</code>, the script will not use the sandbox environment, and will run directly in the web environment, so it will not be able to use most of Grease Monkey’s APIs.<br>| require | If the script depends on other js libraries, you can use the require directive to load the other libraries before running the script, commonly used to load jquery | |<br>| connect | When the user uses <a href="https://www.tampermonkey.net/documentation.php?version=4.9&amp;ext=dhdg&amp;show=dhdg#GM_xmlhttpRequest">GM_xmlhttpRequest</a> When requesting remote data, you need to use connect to specify the allowed domain names, supporting domain names, subdomains, IP addresses and <code>*</code> wildcards | |<br>| updateURL | The script update URL, when Grease Monkey extension checks for updates, it will try to download the script from this URL, and then compare the version number to confirm if it is updated.</p>
<h2 id="Example-Timekeeper"><a href="#Example-Timekeeper" class="headerlink" title="Example: Timekeeper"></a>Example: Timekeeper</h2><p>There is a very hot script on tamperMonkey called Time Controller, which can play videos at any speed, so let’s briefly analyze how it works</p>
<p>First of all, some header features</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @name timer|video-ad-skipping|video-ad-accelerator</span></span><br><span class="line"><span class="comment">// @name:en TimerHooker</span></span><br><span class="line"><span class="comment">// @name:zh-CN TimerHooker|Video Ad Skip|Video Ad Accelerator</span></span><br><span class="line"><span class="comment">// @namespace https://gitee.com/HGJing/everthing-hook/</span></span><br><span class="line"><span class="comment">// @version 1.0.39</span></span><br><span class="line"><span class="comment">// @description control web timer speed|accelerate skip page timer ads|video fast forward(slow play)|skip ads|support almost all web pages.</span></span><br><span class="line"><span class="comment">// @description:en it can hook the timer speed to change.</span></span><br><span class="line"><span class="comment">// @description:zh-CN control web timer speed|accelerate skip page timer ads|skip ads|support almost all web pages.</span></span><br><span class="line"><span class="comment">// @include *</span></span><br><span class="line"><span class="comment">// @require https://greasyfork.org/scripts/372672-everything-hook/code/Everything-Hook.js?version=784972</span></span><br><span class="line"><span class="comment">// @author Cangshi</span></span><br><span class="line"><span class="comment">// @match http://*/*</span></span><br><span class="line"><span class="comment">// @run-at document-start</span></span><br><span class="line"><span class="comment">// @grant none</span></span><br><span class="line"><span class="comment">// @license GPL-3.0-or-later</span></span><br></pre></td></tr></table></figure>
<p>The main one is the require feature, which introduces a plugin called everything-hook that can hijack all browser methods</p>
<p>Most of the code in this component is used to insert a few buttons in the page, or register some shortcuts, and also to hijack the setTimeout and setInterval methods with everything-hook.</p>
<p>But the most important one, the last one that works, is</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">changeVideoSpeed</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> rate = <span class="number">1</span> / <span class="variable language_">this</span>.<span class="property">_percentage</span>.</span><br><span class="line">                    rate &gt; <span class="number">16</span> &amp;&amp; (rate = <span class="number">16</span>).</span><br><span class="line">                    rate &lt; <span class="number">0.065</span> &amp;&amp; (rate = <span class="number">0.065</span>).</span><br><span class="line">                    <span class="keyword">var</span> videos = <span class="title function_">querySelectorAll</span>(<span class="variable language_">document</span>, <span class="string">&#x27;video&#x27;</span>, <span class="literal">true</span>) || [].</span><br><span class="line">                    <span class="keyword">if</span> (videos.<span class="property">length</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; videos.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                            videos[i].<span class="property">playbackRate</span> = rate.</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>
<p>Get all the video tags in the page and change their playbackRate to modify their playback rate.</p>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><p>Now that we understand how to write a grease monkey script, let’s simply try it out.</p>
<p>As a programmer, we usually develop and test different platforms in different environments at the same time, and we usually find a place to store these large amounts of URLs, either locally or in the browser, so can we write a plugin to configure all the URLs, open the plugin each time we need it, and then go directly to open it according to the configuration name.</p>
<p>Directly on the code</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name URL Manager</span></span><br><span class="line"><span class="comment">// @namespace https://sunra.top/</span></span><br><span class="line"><span class="comment">// @version 0.1</span></span><br><span class="line"><span class="comment">// @description Manage URL!</span></span><br><span class="line"><span class="comment">// @author You</span></span><br><span class="line"><span class="comment">// @match http://*/*</span></span><br><span class="line"><span class="comment">// @grant none</span></span><br><span class="line"><span class="comment">// @require https://res.cloudinary.com/dvtfhjxi4/raw/upload/v1590135992/url_rpyrxm.js</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = event || <span class="variable language_">window</span>.<span class="property">event</span>.</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">key</span> == <span class="string">&#x27;q&#x27;</span> &amp;&amp; e.<span class="property">ctrlKey</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gsbn_urls&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span>.</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">addEnvironmentFormToBody</span>().</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">generateForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">``</span>&lt;form id=<span class="string">&quot;gsbn_urls&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Platform:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;openPlatform&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    $&#123;Object.keys(urls).map((platform) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return ``<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;platform&#125;&quot;</span>&gt;</span>$&#123;platform&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span>`</span></span><br><span class="line"><span class="language-xml">    &#125;).join(&#x27;\n&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Environment:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;openUrl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;/select</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;openBtn&quot;</span>&gt;</span>open&lt;/button</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span>`.</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    function addEnvironmentFormToBody() &#123;</span></span><br><span class="line"><span class="language-xml">        var form = document.createElement(&#x27;div&#x27;).</span></span><br><span class="line"><span class="language-xml">        form.style = &quot;position:absolute;width:600px;height:100px;top:200px;&quot;</span></span><br><span class="line"><span class="language-xml">        form.innerHTML = generateForm().</span></span><br><span class="line"><span class="language-xml">        document.body.appendChild(form).</span></span><br><span class="line"><span class="language-xml">        addChangeEventListenerToPlatformSelect().</span></span><br><span class="line"><span class="language-xml">        addClickEventListenerToOpenButton().</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    function addClickEventListenerToOpenButton () &#123;</span></span><br><span class="line"><span class="language-xml">        document.getElementById(&#x27;openBtn&#x27;).onclick = function () &#123;</span></span><br><span class="line"><span class="language-xml">            var urlSelect = document.getElementById(&quot;openUrl&quot;).</span></span><br><span class="line"><span class="language-xml">            var index = urlSelect.selectedIndex.</span></span><br><span class="line"><span class="language-xml">            window.open(urlSelect.options[index].value).</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    function addChangeEventListenerToPlatformSelect() &#123;</span></span><br><span class="line"><span class="language-xml">        var platformSelect = document.getElementById(&#x27;openPlatform&#x27;).</span></span><br><span class="line"><span class="language-xml">        var urlSelect = document.getElementById(&quot;openUrl&quot;).</span></span><br><span class="line"><span class="language-xml">        platformSelect.onchange = function () &#123;</span></span><br><span class="line"><span class="language-xml">            var index = platformSelect.selectedIndex.</span></span><br><span class="line"><span class="language-xml">            urlSelect.innerHTML = &quot;&quot;.</span></span><br><span class="line"><span class="language-xml">            var urlOptions = urls[platformSelect.options[index].value].</span></span><br><span class="line"><span class="language-xml">            urlSelect.innerHTML = Object.keys(urlOptions).map((env) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                return ``<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;$&#123;urlOptions[env]&#125;&#x27;</span>&gt;</span>$&#123;env&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span>`.</span></span><br><span class="line"><span class="language-xml">            &#125;).join(&#x27;\n&#x27;).</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        fireChange(platformSelect).</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    function fireChange(element) &#123;</span></span><br><span class="line"><span class="language-xml">        if (&quot;createEvent&quot; in document) &#123;</span></span><br><span class="line"><span class="language-xml">            var evt = document.createEvent(&quot;HTMLEvents&quot;).</span></span><br><span class="line"><span class="language-xml">            evt.initEvent(&quot;change&quot;, false, true).</span></span><br><span class="line"><span class="language-xml">            element.dispatchEvent(evt).</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        else &#123;</span></span><br><span class="line"><span class="language-xml">            element.fireEvent(&quot;onchange&quot;).</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;)().</span></span><br></pre></td></tr></table></figure>
<p>The url in the above code is defined in the script imported from the cdn through the require attribute, and the general format is this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> urls = &#123;</span><br><span class="line"><span class="attr">pm_console</span>: &#123;</span><br><span class="line"><span class="attr">dev2</span>: <span class="string">&quot;&quot;</span>.</span><br><span class="line"><span class="attr">dev</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;.</span><br><span class="line"><span class="attr">hm_console</span>: &#123;</span><br><span class="line"><span class="attr">dev2</span>: <span class="string">&quot;&quot;</span>.</span><br><span class="line"><span class="attr">prod</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The end result is that typing the shortcut Ctrl + Q on any page will bring up the following rudimentary interface, which can be selected on the left</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1590193109/Devtools/WeChat_Screenshot_20200523081809_llx9zu.png" alt=""></p>
<h3 id="Some-minor-pitfalls"><a href="#Some-minor-pitfalls" class="headerlink" title="Some minor pitfalls"></a>Some minor pitfalls</h3><ul>
<li>Restart the browser every time you modify the script if you want it to take effect immediately.</li>
<li>fireEvent does not work well in Google Chrome, you need to use dispatchEvent.</li>
<li>You need to set which sites don’t use this script or which do in the script’s settings page, and the script will only take effect if it meets the rules.</li>
</ul>
<p>There are also a large number of excellent plug-ins waiting for us to discover, the largest plug-in sharing site: <a href="https://greasyfork.org/zh-CN">https://greasyfork.org/zh-CN</a></p>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>Analysis Patterns - Reusable Object Model</title>
    <url>/en/posts/29283/</url>
    <content><![CDATA[<p>Recently read the book “Analysis Patterns - Reusable Object Model”, this book is considered an enlightening book on DDD, read the completion or benefit a lot, on the one hand, many points and the usual work of mutual evidence, very inspired, on the other hand, learned some business modeling patterns, this article mainly summarizes the inspiration received This article mainly summarizes the inspiration received and modeling principles, specific modeling approach to give an example to experience it.</p>
<p>Here are a few of my most rewarding points in brief:</p>
<ul>
<li>An important principle of object development is that the structure of the software reflects the structure of the problem.</li>
<li>The coupling caused by the problem not sorted out clearly is not solved by design patterns, such as logistics and orders, they use the same data table, they need to sense each other, then they must be coupled together in some way, belonging to the essential complexity, this coupling is not decoupled by a good design pattern, even if they are two systems, they have to be together alteration.</li>
<li>The division of business areas should also achieve high cohesion, low coupling, the principle of least knowledge, if each business area needs to know a lot of other business areas of knowledge, then in fact, or coupling.</li>
<li>If there have to be connections between different domains, try to minimize two-way connections, each of which introduces higher complexity into the system.</li>
<li>In the beginning of the system to minimize the complexity of the system at the same time, keep open to changes, that is, the principle of open and closed, unless very necessary, do not come up to introduce a lot of third-party tools, to consider the introduction cost of these tools, maintenance costs, upgrade costs, and even opportunity costs, and do not come up to engage in any microservices, microservices are best from a mature system after verification of stable business areas Microservices are best incubated from a proven and stable business area in a mature system, otherwise, microservices on pure technical architecture will only increase the overall complexity and risk of the system.</li>
</ul>
<span id="more"></span>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>We can simply divide the architecture design into horizontal and vertical divisions. The horizontal division, which addresses the business architecture, is to reduce the essential complexity of business logic and reduce the coupling between business domains, while the vertical architecture addresses non-functional requirements, such as improving stability, throughput rates, etc. through technologies such as caching layers, message queues, etc. </strong></p>
<p>Our focus in this paper is to address some of the principles of horizontal architectural design.</p>
<p>The purpose of analysis is to understand the problem, which, in my opinion, can be more than just a process of using use cases to enumerate requirements. Use cases are valuable, if not essential, in the system development process, but capturing such use cases does not mean the end of the analysis. Analysis also involves looking beyond the surface requirements to propose a mental model that reflects the underlying mechanisms of the problem.</p>
<p>Consider writing software that simulates a billiard game, which can be evaluated by describing the use case of a surface feature: “The player hits the white ball, causing it to move at a certain speed, and then the white ball hits the red ball at a certain angle, causing the red ball to move a certain distance in a certain direction.” One could shoot such an event hundreds of times and measure the speed, angle and distance the ball moved. However, I am afraid that this alone is not enough to write a good simulation program. To write a good program, one needs to look beyond the surface phenomenon to understand the underlying laws of motion, including mass, velocity, momentum, etc.</p>
<p>Problems like the game of billiards are not rare because the laws of these sports are widely known. Then in many companies, the basic mechanisms at this level are not well understood and need to be diligently discovered.</p>
<p>There is no right or wrong model, the key is which model is more suitable.</p>
<p>The choice of model may affect the flexibility and reusability of the developed software. For software like a billiards tournament, you might advocate using the Einstein model because the developed software can be flexible enough to handle atomic collision problems. But this is a more dangerous way to handle it, because <strong>introducing too much flexibility may lead to an overly complex system, which is a bad engineering practice</strong>.</p>
<p>One of the main reasons for using analysis and design techniques is to involve domain experts, which is essential for conceptual modeling. Effective models can only be built by people who really understand the domain, people who work full time in the field. it skills neither help nor hinder modeling skills.</p>
<p>Analytical techniques should be independent of each other and software techniques, and ideally, conceptual modeling should be completely independent of software techniques, as in the case of the laws of motion described above. This independence prevents the technology from hindering one’s understanding of the problem, and the resulting model is equally valid for all software technologies.</p>
<p>Closely related to the conceptual model is the software interface rather than the software implementation.</p>
<h1 id="Some-modeling-principles"><a href="#Some-modeling-principles" class="headerlink" title="Some modeling principles"></a>Some modeling principles</h1><p>Here is a list of some modeling principles in the book, in fact, these principles and the principles of design patterns are similar, they just focus on different points.</p>
<ol>
<li>The modeling should minimize the number of types affected by the part of the model that changes most frequently. (This point is actually related to the design pattern’s separation of parts that are prone to change from those that are not.)</li>
<li>When defining characteristics for types with supertypes, consider whether it makes sense to place these characteristics on the supertype.</li>
<li>The model should be explicitly divided into an operational layer and a knowledge layer. For example, the configuration class files or some custom semantics that we can parse are the knowledge layer, which defines the relationships between classes and certain principles of program operation, while the specifics of how to instantiate classes belong to the operational layer.</li>
<li>When multiple attributes interact through behaviors that can be used in several types, these attributes should be combined into a new basic type. For example, if our system involves a large number of different units of data, we can combine units and values from these data into a quantity type.</li>
<li>The operational layer contains those concepts that change on a daily basis and whose configuration is bounded by the knowledge layer, which will change much less frequently. The frequency of change here refers to runtime changes.</li>
<li>If a type has very many similar associations, then abstract these associated objects into a new type and then create a knowledge layer to distinguish them.</li>
<li>To record the change history of a value, an account should be created for that value.</li>
<li>When using the account, the following conservation principle should be followed: the recorded items cannot be created or destroyed, and can only be transferred from one place to another, which makes it easier to find and avoid vulnerabilities.</li>
<li>To understand how a calculation is performed, you can represent the result of the calculation as an object that is used to remember the calculation that created it and the input values that were used.</li>
<li>When there are multiple equivalent feature sets to choose from, pick the one that the domain expert thinks is most appropriate, and if the domain expert thinks both are very valuable, then extract both and mark one of them as a derivation.</li>
<li>Marking a feature as derived is only a constraint on the interface and does not affect the underlying data structure.</li>
<li>If a collection of objects can be created by different conditions, then a combination should be used.</li>
<li>When treating a process as a feature of a type, an abstract interface should be provided for the process so that its implementation can be easily changed through subclassing. For example, purely hard-coded implementations are one subclass, and various parameter-driven methods are other subclasses.</li>
<li>When multiple attributes interact in a behavior that may be used in more than one type, the attributes should be combined into a new basic type.</li>
<li>If the supertype applies to a narrower domain and the subtype applies to a wider domain, then generalization should not be used.</li>
<li>If the difference between two similar types is usually negligible, then use the abstract supertype. If the difference between the two is important, then do not use the abstract supertype.</li>
<li>If using an abstract supertype does not cause more work for the client, then this abstract type should be provided.</li>
<li>When some information may be both obtained directly from a source and calculated from other available data, an abstract interface should be provided with the two ways of obtaining and calculating information from the source as their respective subclasses.</li>
<li>When faced with several alternative methods, first choose the simplest method and then change to a more complex method as needed.</li>
<li>Follow the intuition of domain experts when it is difficult to choose among immediate modeling solutions.</li>
<li>Subtyping should only be used if all the characteristics of the supertype apply to the subtype and it is conceptually reasonable to say that every instance of the subtype is an instance of the supertype.</li>
<li>When the customer perspective sees that a single transaction can be divided into multiple transactions by the trader, the product and the contract should be separated. The key to the product-contract distinction is that the product represents the client’s intent, while the contract refers to the content of the actual transaction between the counterparty and the principal.</li>
<li>Do not repeat basic associations that have the same meaning. By following this principle, it is possible to obtain well-defined types of responsibilities.</li>
<li>There should be consistency in the assignment of responsibilities. Beware of the types who sometimes take responsibility for something and sometimes delegate that responsibility. (This behavior may be correct, but it should always be viewed with suspicion)</li>
<li>The choice between one-way and two-way associations requires a trade-off between low workload for type development staff (reduced coupling between types) on the one hand, and ease of use for type users on the other.</li>
<li>If a package only needs to see part of another package, consider splitting the latter package into two mutually visible packages.</li>
<li>The essence of subtyping is that it can be extended without the supertype knowing anything about it. It is often necessary to design some subtypes to gain experience and then abstract them.</li>
</ol>
<h1 id="Two-examples-of-analysis-patterns"><a href="#Two-examples-of-analysis-patterns" class="headerlink" title="Two examples of analysis patterns"></a>Two examples of analysis patterns</h1><p>Each box in the diagram represents a type.</p>
<h2 id="Responsibility-mode"><a href="#Responsibility-mode" class="headerlink" title="Responsibility mode"></a>Responsibility mode</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220145_aun9wt.jpg" alt=""></p>
<ul>
<li>The responsibility type is defined in the knowledge layer, and the responsibility type defines what kind of delegates can be selected by the responsible party which mapping relationship</li>
<li>Then the operational layer is to instantiate a responsibility, and to follow the specification in the responsibility type of the knowledge layer when re-selecting the participants in a specific responsibility</li>
<li>Each responsibility may have a time period that corresponds to an activity.</li>
</ul>
<h2 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220202_mjg72s.jpg" alt=""></p>
<ul>
<li>Each observation has its own participant</li>
<li>Observations can be subtyped as hypothetical, speculative and valid observations</li>
<li>Observations can also be subtyped as measurements and categorical observations, where the result of a measurement is a quantity (value + unit) and the result of a categorical observation is the presence or absence of it. As an example, blood pressure is a measurement, while high blood pressure is a categorical observation. Blood pressure, a measurement, can be inferred from blood pressure high, a categorical observation, and once the blood pressure measurement is wrong, this chain of inference should be directly negated by the chain.</li>
<li>At the knowledge level, observation has its own protocols, that is, how it is carried out</li>
<li>The type of phenomenon in the knowledge layer, phenomenon and observation concept, specifies what the observation in the operational layer can be, e.g. blood pressure is a type of phenomenon, increase is a phenomenon, and increase in blood pressure is an observation concept, while observation concepts are inferred from each other.</li>
</ul>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript Implementation of AVL Tree</title>
    <url>/en/posts/5250/</url>
    <content><![CDATA[<p>Recently tried to implement the AVL tree, found that this thing to write up or a lot of details, messed up half a day, so here to record.</p>
<p>An AVL tree is a balanced binary search tree. On the one hand, it is a BST, i.e., a binary search tree, and on the other hand, it is balanced, i.e., the difference between the height of the left and right subtrees of any subtree whose node is the root node is less than one.</p>
<span id="more"></span>
<h1 id="Fundamentals"><a href="#Fundamentals" class="headerlink" title="Fundamentals"></a>Fundamentals</h1><p>Not much to say about BST, it is relatively simple, that is, the left child of each node is smaller than the root node, the right child is larger than the root node, just pay attention when inserting.</p>
<p>But there is a problem with BST, for example, inserting 1, 2, 3, 4, 5, 6 in sequence, then we will end up with a tree with only right children, in fact, this BST has degenerated into an ordinary chain table, so we need some way to keep this tree balanced, and the way to keep it balanced is as follows:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1675307019/origin-of-ray/912c7f2fdaf3490689db1a7144775b11_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0_qzoplx.webp" alt=""></p>
<h1 id="Specific-implementation"><a href="#Specific-implementation" class="headerlink" title="Specific implementation"></a>Specific implementation</h1><h2 id="Four-types-of-imbalance"><a href="#Four-types-of-imbalance" class="headerlink" title="Four types of imbalance"></a>Four types of imbalance</h2><h3 id="Left-right-situation"><a href="#Left-right-situation" class="headerlink" title="Left-right situation"></a>Left-right situation</h3><p>In this case to rotate right and then return the new root node after the rotation, the code is as follows:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">    node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">    avlNode.<span class="property">right</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Right-right-situation"><a href="#Right-right-situation" class="headerlink" title="Right-right situation"></a>Right-right situation</h3><p>In this case to rotate left and then return the new root node after the rotation, the code is as follows:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">    node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">    avlNode.<span class="property">left</span> = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Circumstances"><a href="#Circumstances" class="headerlink" title="Circumstances"></a>Circumstances</h3><p>In this case, the left child node of the root node should first be left rotated to become the left-left case, then the root node should be right rotated, and then the new root node should be returned after the rotation, with the following code:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Right-left-case"><a href="#Right-left-case" class="headerlink" title="Right-left case"></a>Right-left case</h3><p>In this case, the right child node of the root node should first be rotated right to become the right-right case, then the root node should be rotated left, and then the new root node should be returned after the rotation, with the following code:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Fix-the-imbalance"><a href="#Fix-the-imbalance" class="headerlink" title="Fix the imbalance"></a>Fix the imbalance</h2><h3 id="Get-the-height-of-the-node"><a href="#Get-the-height-of-the-node" class="headerlink" title="Get the height of the node"></a>Get the height of the node</h3><p>When we do balancing, we need to determine whether we need to balance and what kind of imbalance is the case so that we can choose a different rotation method</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// The height of the empty node is 0</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Post-order traversal is used here, because the result of each recursion requires the result of the child node recursion</span></span><br><span class="line">    <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The node height is the greater of the left and right subtree heights plus 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Balance"><a href="#Balance" class="headerlink" title="Balance"></a>Balance</h3><p>Balances the subtree with node as the root node and returns the new root node.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// Empty nodes do not need to be balanced, return empty nodes directly</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the height of the left and right subtrees</span></span><br><span class="line">    <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the height of the left subtree is greater than the height of the right subtree by more than 1, it is unbalanced and there is an implied logic that the left subtree of the left subtree must not be empty</span></span><br><span class="line">    <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Left-left situation, direct right rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Left and right situation, first left rotation then right rotation</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Right-right situation, direct left rotation</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Right-left situation, first right, then left</span></span><br><span class="line">            node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the new root node of the balanced subtree</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Basic-operation"><a href="#Basic-operation" class="headerlink" title="Basic operation"></a>Basic operation</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>Inserts a new node and returns the new root node</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The most important thing to understand about this code is that this recursive function returns the root of a new subtree each time a newNode is inserted and balanced on a tree with a node node as the root node.</span></span><br><span class="line">#<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// If the root node is empty, return the newNode directly as the root node</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If the value of the new node is smaller than the current node</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the left node is empty, then the new node will be treated as the left child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the left child node is not empty, then insert a new node into the left subtree and use the root node of the new subtree returned after the insertion as the left subtree</span></span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the right node is empty, then the new node is treated as the right child node directly</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">            node.<span class="property">right</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the right child node is not empty, then insert a new node into the right subtree and use the root node of the new subtree returned after the insertion as the right subtree</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Balance after insertion and return the root node of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">    <span class="comment">// Insert the newNode from the root, and reassign the root to ensure the next call is correct</span></span><br><span class="line">    <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h3><p>This is relatively simple, and not much different from BST</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Delete the node with the value val from the subtree with node as the root and return the root of the new tree after balancing</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">    <span class="comment">// If node is null, the tree is empty and does not need to be deleted, and the root node of the new tree is also null</span></span><br><span class="line">    <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// If the node to be deleted is found</span></span><br><span class="line">    <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// The node to be deleted has both left and right subtrees</span></span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">            <span class="comment">// Then find the right subtree of the node</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">            <span class="comment">// Then look for the left subtree all the way down the right subtree</span></span><br><span class="line">            <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                p = p.<span class="property">left</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Then replace the result in the current node, because the leftmost child node in the right subtree must be smaller than the rest of the nodes in the right subtree, while raining all the nodes in the left subtree</span></span><br><span class="line">            node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">            <span class="comment">// The previous step just replaces the node value, but the node is still there. We need to remove the node from the right subtree and return the new right subtree as the right subtree of the node after balancing.</span></span><br><span class="line">            <span class="comment">// And remember, at this point we are deleting p.val, not val, because we have already put p.val into node.val, and this p has the property that it has no left child node at least, and the next time the seat will enter the immediately following else logic</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If you don&#x27;t have both left and right subtrees, just replace them and delete the original ones</span></span><br><span class="line">            <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">            node = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is smaller than the current one, go to the left subtree and delete it</span></span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If the value to be deleted is larger than the current one, go to the right subtree and delete it</span></span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the root of the new subtree after balancing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Complete-code-and-tests"><a href="#Complete-code-and-tests" class="headerlink" title="Complete code and tests"></a>Complete code and tests</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AvlTree</span>&#123;</span><br><span class="line">    #<span class="title function_">_rotateLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">right</span>;</span><br><span class="line">        node.<span class="property">right</span> = avlNode.<span class="property">left</span>;</span><br><span class="line">        avlNode.<span class="property">left</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.<span class="property">left</span>;</span><br><span class="line">        node.<span class="property">left</span> = avlNode.<span class="property">right</span>;</span><br><span class="line">        avlNode.<span class="property">right</span> = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateLeftRight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_rotateRightLeft</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_getAvlTreeHeight</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_balance</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightSubTreeHeight = <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">left</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">left</span>.<span class="property">right</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRight</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeftRight</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">right</span>) &gt;= <span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(node.<span class="property">right</span>.<span class="property">left</span>)) &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateLeft</span>(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = <span class="variable language_">this</span>.#<span class="title function_">_rotateRightLeft</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_insertHelper</span>(<span class="params">node, newNode</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newNode.<span class="property">val</span> &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">left</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">left</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">right</span> = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(node.<span class="property">right</span>, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">newNode</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#_root = <span class="variable language_">this</span>.#<span class="title function_">_insertHelper</span>(<span class="variable language_">this</span>.#_root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_inOrder</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> stack = [node];</span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line">        <span class="keyword">while</span>(stack.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (current ! <span class="literal">null</span>) &#123;</span><br><span class="line">                current.<span class="property">right</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">                stack.<span class="title function_">push</span>(current, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                current.<span class="property">left</span> &amp;&amp; stack.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = stack.<span class="title function_">pop</span>();</span><br><span class="line">                result.<span class="title function_">push</span>(current.<span class="property">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#_root= <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">_inOrder</span>(<span class="variable language_">this</span>.#_root);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">left</span>))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#<span class="title function_">_getAvlTreeHeight</span>(<span class="variable language_">this</span>.#_root.<span class="property">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_searchHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">val</span>= val) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">search</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_searchHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">_removeHelper</span>(<span class="params">node, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node= <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (trap= node.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">right</span>;</span><br><span class="line">                <span class="keyword">while</span>(p.<span class="property">left</span>) &#123;</span><br><span class="line">                    p = p.<span class="property">left</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node.<span class="property">val</span> = p.<span class="property">val</span>;</span><br><span class="line">                node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, p.<span class="property">val</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.<span class="property">left</span> ! <span class="literal">null</span> ? node.<span class="property">left</span> : node.<span class="property">right</span>;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.<span class="property">val</span>) &#123;</span><br><span class="line">            node.<span class="property">left</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">left</span>, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(node.<span class="property">right</span>, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_balance</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#<span class="title function_">_removeHelper</span>(<span class="variable language_">this</span>.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> avlTree = <span class="keyword">new</span> <span class="title class_">AvlTree</span>();</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">8</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">9</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">14</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">15</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">16</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">17</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">18</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">19</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">20</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">21</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">11</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">31</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">61</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">111</span>));</span><br><span class="line">avlTree.<span class="title function_">insert</span>(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">221</span>));</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">20</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">1</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">11</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">221</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">8</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">avlTree.<span class="title function_">remove</span>(<span class="number">4</span>);</span><br><span class="line">avlTree.<span class="title function_">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Azure Basic Concepts Compendium</title>
    <url>/en/posts/1bcc6f4f/</url>
    <content><![CDATA[<p>Recently, while reading the Azure documentation, I was very confused by many of the concepts in the documentation, so I went through some of the official documentation, which is a temporary understanding and summary.</p>
<span id="more"></span>
<p>First of all, I would like to start with the paragraph that I think best solves my doubts<a href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/fundamental-concepts">原文档</a>：</p>
<h2 id="Azure-terminology"><a href="#Azure-terminology" class="headerlink" title="Azure terminology"></a>Azure terminology</h2><p>It’s helpful to know the following definitions as you begin your Azure cloud adoption efforts:</p>
<ul>
<li><strong>Resource:</strong> An entity that’s managed by Azure. Examples include Azure Virtual Machines, virtual networks, and storage accounts.</li>
<li><strong>Subscription:</strong> A logical container for your resources. Each Azure resource is associated with only one subscription. Creating a subscription is the first step in adopting Azure.</li>
<li><strong>Azure account:</strong> The email address that you provide when you create an Azure subscription is the Azure account for the subscription. The party that’s associated with the email account is responsible for the monthly costs that are incurred by the resources in the subscription. When you create an Azure account, you provide contact information and billing details, like a credit card. You can use the same Azure account (email address) for multiple subscriptions. Each subscription is associated with only one Azure account.</li>
<li><strong>Account administrator:</strong> The party associated with the email address that’s used to create an Azure subscription. The account administrator is responsible for paying for all costs that are incurred by the subscription’s resources.</li>
<li><strong>Azure Active Directory (Azure AD):</strong> The Microsoft cloud-based identity and access management service. Azure AD allows your employees to sign in and access resources.</li>
<li><strong>Azure AD tenant:</strong> A dedicated and trusted instance of Azure AD. An Azure AD tenant is automatically created when your organization first signs up for a Microsoft cloud service subscription like Microsoft Azure, Microsoft Intune, or Office 365. An Azure tenant represents a single organization.</li>
<li><strong>Azure AD directory:</strong> Each Azure AD tenant has a single, dedicated, and trusted directory. The directory includes the tenant’s users, groups, and apps. The directory is used to perform identity and access management functions for tenant resources. A directory can be associated with multiple subscriptions, but each subscription is associated with only one directory.</li>
<li><strong>Resource groups:</strong> Logical containers that you use to group related resources in a subscription. Each resource can exist in only one resource group. Resource groups allow for more granular grouping within a subscription, and are commonly used to represent a collection of assets required to support a workload, application, or specific function within a subscription.</li>
<li><strong>Management groups:</strong> Logical containers that you use for one or more subscriptions. You can define a hierarchy of management groups, subscriptions, resource groups, and resources to efficiently manage access, policies, and compliance through inheritance.</li>
<li><strong>Region:</strong> A set of Azure datacenters that are deployed inside a latency-defined perimeter. The datacenters are connected through a dedicated, regional, low-latency network. Most Azure resources run in a specific Azure region.</li>
</ul>
<h2 id="Azure-administrative-roles"><a href="#Azure-administrative-roles" class="headerlink" title="Azure administrative roles"></a>Azure administrative roles</h2><p>Azure defines three types of roles for administering subscriptions, identities, and resources:</p>
<ul>
<li>Classic subscription administrator roles.</li>
<li>Azure role-based access control (RBAC) roles.</li>
<li>Azure Active Directory (Azure AD) administrator roles.</li>
</ul>
<p>The account administrator role for an Azure subscription is assigned to the email account that’s used to create the Azure subscription. The account administrator is the billing owner of the subscription. The account administrator can manage the subscription details in the<a href="https://account.azure.com/subscriptions">Azure account center</a>.</p>
<p>By default, the service administrator role for a subscription also is assigned to the email account that’s used to create the Azure subscription. The service administrator has permissions to the subscription equivalent to the RBAC-based Owner role. The service administrator also has full access to the Azure portal. The account administrator can change the service administrator to a different email account.</p>
<p>When you create an Azure subscription, you can associate it with an existing Azure AD tenant. Otherwise, a new Azure AD tenant with an associated directory is created. The role of global administrator in the Azure AD directory is assigned to the email account that’s used to create the Azure AD subscription.</p>
<p>An email account can be associated with multiple Azure subscriptions. The account administrator can transfer a subscription to another account.</p>
<p>For a detailed description of the roles defined in Azure, see<a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/rbac-and-directory-admin-roles">Classic subscription administrator roles, Azure RBAC roles, and Azure AD administrator roles</a>.</p>
<h2 id="Subscriptions-and-regions"><a href="#Subscriptions-and-regions" class="headerlink" title="Subscriptions and regions"></a>Subscriptions and regions</h2><p>Every Azure resource is logically associated with only one subscription. When you create a resource, you choose which Azure subscription to deploy that resource to. You can move a resource to another subscription later.</p>
<p>While a subscription isn’t tied to a specific Azure region, each Azure resource is deployed to only one region. You can have resources in multiple regions that are associated with the same subscription.</p>
<p>It means that resources in the same subscription can be in different regions, e.g. resources in East Asia and Northern Europe servers can be in the same resource group.</p>
<h2 id="Tenancy-in-Azure-Active-Directory"><a href="#Tenancy-in-Azure-Active-Directory" class="headerlink" title="Tenancy in Azure Active Directory"></a>Tenancy in Azure Active Directory</h2><p>Azure Active Directory (Azure AD) organizes objects like users and apps into groups called <em>tenants</em>. Tenants allow an administrator to set policies on the users within the organization and the apps that the organization owns to meet their security and operational policies.</p>
<h3 id="Who-can-sign-in-to-your-app"><a href="#Who-can-sign-in-to-your-app" class="headerlink" title="Who can sign in to your app?"></a>Who can sign in to your app?</h3><p>When it comes to developing apps, developers can choose to configure their app to be either single-tenant or multi-tenant during app registration in the<a href="https://portal.azure.com/">Azure portal</a>.</p>
<ul>
<li>Single-tenant apps are only available in the tenant they were registered in, also known as their home tenant.</li>
<li>Multi-tenant apps are available to users in both their home tenant and other tenants.</li>
</ul>
<p>In the Azure portal, you can configure your app to be single-tenant or multi-tenant by setting the audience as follows.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Audience</th>
<th style="text-align:left">Single/multi-tenant</th>
<th style="text-align:left">Who can sign in</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Accounts in this directory only</td>
<td style="text-align:left">Single tenant</td>
<td style="text-align:left">All user and guest accounts in your directory can use your application or API. <em>Use this option if your target audience is internal to your organization.</em></td>
</tr>
<tr>
<td style="text-align:left">Accounts in any Azure AD directory</td>
<td style="text-align:left">Multi-tenant</td>
<td style="text-align:left">All users and guests with a work or school account from Microsoft can use your application or API. This includes schools and businesses that use Office 365. <em>Use this option if your target audience is business or educational customers.</em></td>
</tr>
<tr>
<td style="text-align:left">Accounts in any Azure AD directory and personal Microsoft accounts (such as Skype, Xbox, Outlook.com)</td>
<td style="text-align:left">Multi-tenant</td>
<td style="text-align:left">All users with a work or school, or personal Microsoft account can use your application or API. It includes schools and businesses that use Office 365 as well as personal accounts that are used to sign in to services like Xbox and Skype. <em>Use this option to target the widest set of Microsoft accounts.</em></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>These documents roughly explain the definitions of these concepts and the general relationships, which can give us a general and vague idea.</p>
<p>In a nutshell, it means that Azure AD is an authentication service from Microsoft, and each organization can use it to create tenants (an instance of Azure AD), or tenants, each of which has its own unique Azure AD directory, and each of which can have multiple subscriptions. Resources in subscriptions can be logically grouped by resource groups.</p>
<p>Azure Active Directory (Azure AD) organizes objects such as users and applications into <em>groups called “</em>tenants”. Tenants allow administrators to set policies for users within an organization and for applications owned by the organization to meet their security and operational policies.</p>
<p>Each application can be set up as multi-tenant or single-tenant. Single-tenant applications can only be accessed by users in this tenant.</p>
<p>Reference Document:</p>
<p><a href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/fundamental-concepts">https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/fundamental-concepts</a></p>
<p><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/accounts-overview">https://docs.microsoft.com/en-us/azure/active-directory/develop/accounts-overview</a></p>
<p><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-create-new-tenant">https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-create-new-tenant</a></p>
<p><a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/single-and-multi-tenant-apps">https://docs.microsoft.com/en-us/azure/active-directory/develop/single-and-multi-tenant-apps</a></p>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
  </entry>
  <entry>
    <title>In-depth Babel Principles Series (I) Introduction to Babel Workflow and Project Structure</title>
    <url>/en/posts/17020/</url>
    <content><![CDATA[<p>I recently came across a bit of knowledge about Babel and got some interest in it, so I planned to take a look at the principle of Babel and then summarize it for learning, which is too complicated to write in multiple blogs.</p>
<span id="more"></span>
<h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1624407593/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210623081837_ikbdn8.png" alt=""></p>
<blockquote>
<p>It is important to mention here that this structure where Traverser calls multiple Transformers in the figure is the microkernel.</p>
<p>That means that the core code of Babel is actually only the left column, and Parser has built-in support for many syntaxes. For example, JSX, Typescript, Flow, and the latest ECMAScript specification. Currently, for the sake of efficiency, the parser is<a href="https://babeljs.io/docs/en/babel-parser#faq">不支持扩展的</a>。</p>
<p>Other additional features are implemented in the form of plugins, but Babel implements some built-in transformers to achieve some common functions, such as converting es2015+ code.</p>
</blockquote>
<h3 id="Parsing-Tokenizer-Parser"><a href="#Parsing-Tokenizer-Parser" class="headerlink" title="Parsing (Tokenizer + Parser)"></a>Parsing (Tokenizer + Parser)</h3><p>For the source code, at this point we see it as a string, and the first step in its analysis is definitely to convert the source code into an AST first, before the subsequent operation.</p>
<p>There is a<a href="https://astexplorer.net/">在线AST转换器</a>, we can experiment on this and write the code and it translates it for us into AST::</p>
<p>I’ll write nothing, and the AST will have a root node: the</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AST</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;end&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125; <span class="comment">// It can be seen as an object with some fields, the root node of this code tree.</span></span><br></pre></td></tr></table></figure>
<p>Then I write a sentence <code>const text = &#39;Hello World&#39;;</code> and it becomes</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;end&quot;</span>: <span class="number">27</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclaration&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="number">27</span>,</span><br><span class="line">      <span class="string">&quot;declarations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;VariableDeclarator&quot;</span>,</span><br><span class="line">          <span class="string">&quot;start&quot;</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="string">&quot;end&quot;</span>: <span class="number">26</span>,</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;init&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Literal&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start&quot;</span>: <span class="number">13</span>,</span><br><span class="line">            <span class="string">&quot;end&quot;</span>: <span class="number">26</span>,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">            <span class="string">&quot;raw&quot;</span>: <span class="string">&quot;&#x27;Hello World&#x27;&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;const&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>From this structure we can take a brief look at the structure of the AST node.</p>
<p>each node has type, start and end. type indicates the type of the node, just like the type of the root node is Program, which is all code, so it has start as 0 and end as last;</p>
<p>And different types of nodes may have their own different definitions, such as the <code>VariableDeclaration</code> node has the kind attribute, which indicates whether the variable is declared by const or var or let, and the declarations attribute, which indicates the specific content, which is an array, that is to say, a <code>VariableDeclaration</code> can declare more than one node, and the init attribute of each node indicates what data the variable is initialized with.</p>
<p>To summarize the characteristics of the AST tree:</p>
<ol>
<li>Nodes are typed. When we learn a data structure like a tree, the nodes are the simplest, here it’s complicated, there are types.</li>
<li>The relationship between nodes and children is linked by the attributes of the nodes. We learn the tree structure, are left, right left child right child. But AST tree, different types of nodes, different properties, Program type node’s child node is its body property, VariableDeclaration type of child node, is its declarations, kind property. That is, the properties of the node are seen as the children of the node, and the children may also have types, and nearly form a tree.</li>
<li>The parent node is the combination of all the child nodes. We can see that the const text = ‘Hello World’ represented by VariableDeclaration is split into the following two child nodes, and the child nodes continue to be split again.</li>
</ol>
<p>I hope that the above analysis will give you the most intuitive understanding of AST, which is a tree with types of nodes.</p>
<p>Then the type system of nodes is necessary to understand, here is<a href="https://github.com/babel/babylon/blob/master/ast/spec.md">Babel的AST类型系统说明</a>. As you can see, you can say that the type system is abstracting the various members of the code, identifiers, literals, declarations, expressions. So having a tree structure of nodes of these types can be used to express our code.</p>
<h3 id="Crossbar"><a href="#Crossbar" class="headerlink" title="Crossbar"></a>Crossbar</h3><p>Step 2: Convert. Now that you’ve got the ast, it’s time to manipulate it. babel-traverse in Babel is used to do this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Installation</span></span><br><span class="line">npm install --save babel-traverse</span><br><span class="line"></span><br><span class="line"><span class="comment">// Experimental code</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babylon <span class="keyword">from</span> <span class="string">&quot;babylon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;babel-traverse&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`const text = &#x27;Hello World&#x27;;`</span>;</span><br><span class="line"><span class="keyword">const</span> ast = babylon.<span class="title function_">parse</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">  <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;path&#x27;</span>, path);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ast&#x27;</span>, ast);</span><br></pre></td></tr></table></figure>
<p>The babel-traverse library exposes the traverse method, the first parameter is ast, the second parameter is an object, we wrote an enter method, the parameter of the method is a path, how is it not a node? Let’s look at the output:</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/4/16c5b8506c9e8e8d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
<p>In fact, this path contains the node attribute, but also contains many other attributes used for analysis, such as the scope attribute of the analysis scope.</p>
<h3 id="Generator-babel-generator"><a href="#Generator-babel-generator" class="headerlink" title="Generator babel-generator"></a>Generator babel-generator</h3><p>Step 3: Generate. The babel-generator in Babel is used to do this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save babel-generator</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入babel-generator</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babylon <span class="keyword">from</span> <span class="string">&quot;babylon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;babel-traverse&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> t <span class="keyword">from</span> <span class="string">&quot;babel-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> generate <span class="keyword">from</span> <span class="string">&quot;babel-generator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`const text = &#x27;Hello World&#x27;;`</span>;</span><br><span class="line"><span class="keyword">const</span> ast = babylon.<span class="title function_">parse</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">  <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="title function_">isIdentifier</span>(path.<span class="property">node</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;text&quot;</span> &#125;)) &#123;</span><br><span class="line">      path.<span class="property">node</span>.<span class="property">name</span> = <span class="string">&#x27;alteredText&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> genCode = <span class="title function_">generate</span>(ast, &#123;&#125;, code);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;genCode&#x27;</span>, genCode);</span><br></pre></td></tr></table></figure>
<h2 id="Microkernels-and-Plugins"><a href="#Microkernels-and-Plugins" class="headerlink" title="Microkernels and Plugins"></a>Microkernels and Plugins</h2><p>We’ve talked about Babel’s workflow above, and we’ve found that Babel’s core functionality is small. It’s very small, in fact, in four steps: splitting the code into tokens, building the token sequence into an AST, performing some operations on the AST, and finally converting the processed AST into a new code.</p>
<p>This core functionality is not large, but again, in order to be able to support complex functionality, so in the third step of the processing of the AST provides a plug-in mechanism (this plug-in mechanism is through<a href="https://refactoringguru.cn/design-patterns/visitor">访问者模式</a>implemented), and this architectural approach is called a microkernel.</p>
<p>A detailed explanation can be found in this blog: <a href="https://bobi.ink/2019/10/01/babel/#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F">https://bobi.ink/2019/10/01/babel/#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F</a></p>
<p>Reference link:</p>
<p><a href="https://juejin.cn/post/6844903905961181191">https://juejin.cn/post/6844903905961181191</a></p>
<p><a href="https://www.babeljs.cn/docs/">https://www.babeljs.cn/docs/</a></p>
]]></content>
      <categories>
        <category>Babel</category>
      </categories>
  </entry>
  <entry>
    <title>In-depth Babel Principle Series (II) Parser Code Structure Introduction</title>
    <url>/en/posts/5517/</url>
    <content><![CDATA[<p>In the previous article, when analyzing the Babel compilation process, we mentioned that Babel converts JS code into ASTs (Abstract Syntax Trees). This behavior is a generic one, no matter what programming language parses the source code into an AST, <strong>AST is not specific to Babel, let alone to JS</strong>.</p>
<p>Why do we need to do this? The original JS file is incomprehensible to the computer, and it is difficult for the computer to modify the JS code directly, but by converting it to an AST, which is essentially a set of objects that represent the structure of the program, we can indirectly modify the code by modifying the objects. AST to generate bytecode.</p>
<p>Parser’s process is divided into two steps, the first step, lexical analysis, which is the finite state machine in the compilation principle, to split a piece of code into individual Tokens, and the second step, syntax analysis, to convert the Token array, into an AST tree.</p>
<p>This time I’ll look at<a href="https://github.com/babel/babel/tree/main/packages/babel-parser">源码</a>The process is briefly analyzed.</p>
<span id="more"></span>
<p>First, take a look at the directory structure of Babel-Parser</p>
<p>There are four main folders, util, plugins, tokeinzer, parser</p>
<h2 id="Entrance"><a href="#Entrance" class="headerlink" title="Entrance"></a>Entrance</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">input: string, options?: Options</span>): <span class="title class_">File</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (options?.<span class="property">sourceType</span>= <span class="string">&quot;unambiguous&quot;</span>) &#123;</span><br><span class="line">    options = &#123;</span><br><span class="line">      ...options,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      options.<span class="property">sourceType</span> = <span class="string">&quot;module&quot;</span>;</span><br><span class="line">      <span class="keyword">const</span> parser = <span class="title function_">getParser</span>(options, input);</span><br><span class="line">      <span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//Omit some other codes</span></span><br><span class="line">        </span><br><span class="line">      <span class="keyword">return</span> ast;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (moduleError) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        options.<span class="property">sourceType</span> = <span class="string">&quot;script&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getParser</span>(options, input).<span class="title function_">parse</span>();</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> moduleError;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getParser</span>(options, input).<span class="title function_">parse</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The core of this code is to get a parser through the <code>getParser</code> method, and then use the obtained parser to parse.</p>
<p>Let’s look at this <code>getParser</code> again:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getParser</span>(<span class="params">options: ?Options, input: string</span>): <span class="title class_">Parser</span> &#123;</span><br><span class="line">  <span class="comment">// Get Parser</span></span><br><span class="line">  <span class="keyword">let</span> cls = <span class="title class_">Parser</span>;</span><br><span class="line">  <span class="comment">// If a plugin is declared in options, first check whether the way the plugin is declared is reasonable, and if so, enable the plugin function</span></span><br><span class="line">  <span class="comment">// Yes, enable the plug-in function, Parser&#x27;s plug-ins are built-in, and you can only choose whether to enable them through the configuration</span></span><br><span class="line">  <span class="keyword">if</span> (options?.<span class="property">plugins</span>) &#123;</span><br><span class="line">    <span class="title function_">validatePlugins</span>(options.<span class="property">plugins</span>);</span><br><span class="line">    cls = <span class="title function_">getParserClass</span>(options.<span class="property">plugins</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">cls</span>(options, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">parserClassCache</span>: &#123; [<span class="attr">key</span>: string]: <span class="title class_">Class</span>&lt;<span class="title class_">Parser</span>&gt; &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get a Parser class with plugins applied. */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getParserClass</span>(<span class="params">pluginsFromOptions: PluginList</span>): <span class="title class_">Class</span>&lt;<span class="title class_">Parser</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// mixinPluginNames is the name of all built-in plugins</span></span><br><span class="line">  <span class="keyword">const</span> pluginList = mixinPluginNames.<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span></span><br><span class="line">    <span class="title function_">hasPlugin</span>(pluginsFromOptions, name),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache the current portfolio of plugins</span></span><br><span class="line">  <span class="keyword">const</span> key = pluginList.<span class="title function_">join</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> cls = parserClassCache[key];</span><br><span class="line">  <span class="keyword">if</span> (!cls) &#123;</span><br><span class="line">    cls = parser;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> pluginList) &#123;</span><br><span class="line">      cls = mixinPlugins[plugin](cls);</span><br><span class="line">    &#125;</span><br><span class="line">    parserClassCache[key] = cls;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Parser-parsing-process"><a href="#Parser-parsing-process" class="headerlink" title="Parser parsing process"></a>Parser parsing process</h2><p>By now, we figured out the logic of the entry file, which is mainly two parts, the first part declares the Parser, and the second part, if the plug-in is configured, opens the plug-in function for the Parser.</p>
<p>Then let’s continue to look at Parser’s logic</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parser</span> <span class="keyword">extends</span> <span class="title class_ inherited__">StatementParser</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options: ?Options, input: string</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">parse</span>(): <span class="title class_">File</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">enterInitialScopes</span>();</span><br><span class="line">    <span class="keyword">const</span> file = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    <span class="keyword">const</span> program = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">nextToken</span>();</span><br><span class="line">    file.<span class="property">errors</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseTopLevel</span>(file, program);</span><br><span class="line">    file.<span class="property">errors</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">errors</span>;</span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The constructor is all about preparatory work, so don’t pay attention to it first, the main logic is still in this parse function</p>
<h3 id="1-enterInitialScopes"><a href="#1-enterInitialScopes" class="headerlink" title="1.enterInitialScopes"></a>1.enterInitialScopes</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">enterInitialScopes</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> paramFlags = <span class="variable constant_">PARAM</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasPlugin</span>(<span class="string">&quot;topLevelAwait&quot;</span>) &amp;&amp; <span class="variable language_">this</span>.<span class="property">inModule</span>) &#123;</span><br><span class="line">      paramFlags |= <span class="variable constant_">PARAM_AWAIT</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="title function_">enter</span>(<span class="variable constant_">SCOPE_PROGRAM</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prodParam</span>.<span class="title function_">enter</span>(paramFlags);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>This step is to initialize the root node at the beginning, along with the corresponding parameters and scopes</p>
<h3 id="2-startNode"><a href="#2-startNode" class="headerlink" title="2. startNode"></a>2. startNode</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">startNode&lt;<span class="attr">T</span>: <span class="title class_">NodeType</span>&gt;(): T &#123;</span><br><span class="line">    <span class="comment">// $FlowIgnore</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">start</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">startLoc</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-nextToken"><a href="#3-nextToken" class="headerlink" title="3. nextToken"></a>3. nextToken</h3><p>This part is the focus of the parsing, this part of the code will be more complex, the parsing process will have to parse backwards one character at a time, the use of finite state machine state transfer to determine the different states, and finally in reaching a certain state, to produce a token.</p>
<p>If the number 123456 is read as a 6, a numeric token is generated if it is followed by a space or a semicolon.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">nextToken</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="comment">// curContext = this.state.context[this.state.context.length - 1];</span></span><br><span class="line">    <span class="keyword">const</span> curContext = <span class="variable language_">this</span>.<span class="title function_">curContext</span>();</span><br><span class="line">    <span class="comment">// The internal loop will keep skipping all spaces, such as spaces, tabs, etc.</span></span><br><span class="line">    <span class="keyword">if</span> (!curContext.<span class="property">preserveSpace</span>) <span class="variable language_">this</span>.<span class="title function_">skipSpace</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">start</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isLookahead</span>) <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">startLoc</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">curPosition</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span> &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">eof</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curContext= ct.<span class="property">template</span>) &#123;</span><br><span class="line">      <span class="comment">// Read the template string Token</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">readTmplToken</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Read a normal Token, codePointAtPos returns the ASCII code of the character at the pos position</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getTokenFromCode</span>(<span class="variable language_">this</span>.<span class="title function_">codePointAtPos</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-parseTopLevel"><a href="#4-parseTopLevel" class="headerlink" title="4. parseTopLevel"></a>4. parseTopLevel</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">parseTopLevel</span>(<span class="attr">file</span>: N.<span class="property">File</span>, <span class="attr">program</span>: N.<span class="property">Program</span>): N.<span class="property">File</span> &#123;</span><br><span class="line">    file.<span class="property">program</span> = <span class="variable language_">this</span>.<span class="title function_">parseProgram</span>(program);</span><br><span class="line">    file.<span class="property">comments</span> = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">comments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">tokens</span>) file.<span class="property">tokens</span> = <span class="title function_">babel7CompatTokens</span>(<span class="variable language_">this</span>.<span class="property">tokens</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">finishNode</span>(file, <span class="string">&quot;File&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Here the call to <code>parseProgram</code> will continue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">parseProgram</span>(</span><br><span class="line">    <span class="title class_">Program</span>,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span> = tt.<span class="property">eof</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="title class_">SourceType</span> = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">sourceType</span>,</span><br><span class="line">  ): N.<span class="property">Program</span> &#123;</span><br><span class="line">    program.<span class="property">sourceType</span> = sourceType;</span><br><span class="line">    program.<span class="property">interpreter</span> = <span class="variable language_">this</span>.parseInterpreterDirective();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseBlockBody</span>(program, <span class="literal">true</span>, <span class="literal">true</span>, end);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">inModule</span> &amp;&amp;</span><br><span class="line">      !<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">allowUndeclaredExports</span> &amp;&amp;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>.<span class="property">size</span> &gt; <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> [name] <span class="keyword">of</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> pos = <span class="variable language_">this</span>.<span class="property">scope</span>.<span class="property">undefinedExports</span>.<span class="title function_">get</span>(name);</span><br><span class="line">        <span class="comment">// $FlowIssue</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">raise</span>(pos, <span class="title class_">Errors</span>.<span class="property">ModuleExportUndefined</span>, name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">finishNode</span>&lt;N.<span class="property">Program</span>&gt;(program, <span class="string">&quot;Program&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Call <code>parseBlockBody</code> again</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">parseBlockBody</span>(</span><br><span class="line">    <span class="attr">node</span>: N.<span class="property">BlockStatementLike</span>,</span><br><span class="line">    <span class="attr">allowDirectives</span>: ?boolean,</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = (node.<span class="property">body</span> = []);</span><br><span class="line">    <span class="keyword">const</span> directives = (node.<span class="property">directives</span> = []);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">      body,</span><br><span class="line">      allowDirectives ? directives : <span class="literal">undefined</span>,</span><br><span class="line">      topLevel,</span><br><span class="line">      end,</span><br><span class="line">      afterBlockParse,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Continue to call <code>parseBlockOrModuleBlockBody</code> and eventually enter recursion, calling nextToken recursively through the parserStatement, next and other functions until the string passed in by the parser method at the beginning is completely parsed.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">    <span class="attr">body</span>: N.<span class="property">Statement</span>[],</span><br><span class="line">    <span class="attr">directives</span>: ?(N.<span class="property">Directive</span>[]),</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldStrict = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strict</span>;</span><br><span class="line">    <span class="keyword">let</span> hasStrictModeDirective = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> parsedNonDirective = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable language_">this</span>.<span class="title function_">match</span>(end)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stmt = <span class="variable language_">this</span>.<span class="title function_">parseStatement</span>(<span class="literal">null</span>, topLevel);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (directives &amp;&amp; !parsedNonDirective) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidDirective</span>(stmt)) &#123;</span><br><span class="line">          <span class="keyword">const</span> directive = <span class="variable language_">this</span>.<span class="title function_">stmtToDirective</span>(stmt);</span><br><span class="line">          directives.<span class="title function_">push</span>(directive);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            !hasStrictModeDirective &amp;&amp;</span><br><span class="line">            directive.<span class="property">value</span>.<span class="property">value</span>= <span class="string">&quot;use strict&quot;</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            hasStrictModeDirective = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parsedNonDirective = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// clear strict errors since the strict mode will not change within the block</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strictErrors</span>.<span class="title function_">clear</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      body.<span class="title function_">push</span>(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (afterBlockParse) &#123;</span><br><span class="line">      afterBlockParse.<span class="title function_">call</span>(<span class="variable language_">this</span>, hasStrictModeDirective);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldStrict) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>A simple diagram to represent, roughly, is this, omitting many details</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625014272/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210630085034_nq6abs.png" alt=""></p>
<h2 id="nextToken-method-analysis"><a href="#nextToken-method-analysis" class="headerlink" title="nextToken method analysis"></a>nextToken method analysis</h2><h3 id="readTmplToken-reads-the-template-string"><a href="#readTmplToken-reads-the-template-string" class="headerlink" title="readTmplToken reads the template string"></a>readTmplToken reads the template string</h3><p>This is the state machine I analyzed from the code</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625100732/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085141_jdhpvd.png" alt=""></p>
<p>Let’s try it and see the results</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625101028/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085657_sxvzrs.png" alt=""></p>
<h3 id="getTokenFromCode"><a href="#getTokenFromCode" class="headerlink" title="getTokenFromCode"></a>getTokenFromCode</h3><p>This function is not complex in terms of logic, but the conditions are particularly divided, because it is necessary to adapt a variety of different characters to determine, simply show the following:</p>
<h4 id="charcodes"><a href="#charcodes" class="headerlink" title="charcodes"></a>charcodes</h4><p>The various charCodes used in the code are the contents of another repository, here is the link: <a href="https://github.com/xtuc/charcodes/blob/master/packages/charcodes/src/index.js">https://github.com/xtuc/charcodes/blob/master/packages/charcodes/src/index.js</a></p>
<h4 id="TokenType"><a href="#TokenType" class="headerlink" title="TokenType"></a>TokenType</h4><p>And the parameters of finishToken are actually a built-in good TokenType, such as <code>tt.parentL</code> which is actually <code>parenL: new TokenType(&quot;(&quot;, &#123; beforeExpr, startsExpr &#125;),</code></p>
<p>These TokenTypes are all of babel’s built-in token types, and there are two sources of TokenTypes, one is built into the Tokenizer and the other is provided by the parser plugin, but as we said, the parser plugin is just an on/off switch for the user, so essentially, all of the TokenType is essentially built into babel-praser to begin with.</p>
<p>There are four main categories, one is the variable type, such as number, string, one is the symbol, such as brackets, colon and so on, one is the expression, such as equal to, greater than, and finally is the keyword, such as switch, case, etc.</p>
<h4 id="Function-Logic"><a href="#Function-Logic" class="headerlink" title="Function Logic"></a>Function Logic</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getTokenFromCode</span>(<span class="attr">code</span>: number): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">      <span class="comment">// The interpretation of a dot depends on whether it is followed</span></span><br><span class="line">      <span class="comment">// by a digit or another two dots.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">dot</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">readToken_dot</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Punctuation tokens.</span></span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">leftParenthesis</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">parenL</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">rightParenthesis</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">parenR</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">semicolon</span>:</span><br><span class="line">        ++<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">finishToken</span>(tt.<span class="property">semi</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.<span class="property">comma</span>:</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Dozens of conditions are omitted here</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isIdentifierStart</span>(code)) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">readWord</span>(code);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="variable language_">this</span>.<span class="title function_">raise</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">pos</span>,</span><br><span class="line">      <span class="title class_">Errors</span>.<span class="property">InvalidOrUnexpectedToken</span>,</span><br><span class="line">      <span class="title class_">String</span>.<span class="title function_">fromCodePoint</span>(code),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="parseTopLevel-method-analysis"><a href="#parseTopLevel-method-analysis" class="headerlink" title="parseTopLevel method analysis"></a>parseTopLevel method analysis</h2><p>At the beginning of the process analysis, we are going to see that the main logic of this function is in the <code>parseBlockOrModuleBlockBody</code> function, so let’s take a look at this function first</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">parseBlockOrModuleBlockBody</span>(</span><br><span class="line">    <span class="attr">body</span>: N.<span class="property">Statement</span>[],</span><br><span class="line">    <span class="attr">directives</span>: ?(N.<span class="property">Directive</span>[]),</span><br><span class="line">    <span class="attr">topLevel</span>: boolean,</span><br><span class="line">    <span class="attr">end</span>:<span class="title class_">TokenType</span>,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldStrict = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strict</span>;</span><br><span class="line">    <span class="keyword">let</span> hasStrictModeDirective = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> parsedNonDirective = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable language_">this</span>.<span class="title function_">match</span>(end)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stmt = <span class="variable language_">this</span>.<span class="title function_">parseStatement</span>(<span class="literal">null</span>, topLevel);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (directives &amp;&amp; !parsedNonDirective) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidDirective</span>(stmt)) &#123;</span><br><span class="line">          <span class="keyword">const</span> directive = <span class="variable language_">this</span>.<span class="title function_">stmtToDirective</span>(stmt);</span><br><span class="line">          directives.<span class="title function_">push</span>(directive);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            !hasStrictModeDirective &amp;&amp;</span><br><span class="line">            directive.<span class="property">value</span>.<span class="property">value</span>= <span class="string">&quot;use strict&quot;</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            hasStrictModeDirective = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parsedNonDirective = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// clear strict errors since the strict mode will not change within the block</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">strictErrors</span>.<span class="title function_">clear</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      body.<span class="title function_">push</span>(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (afterBlockParse) &#123;</span><br><span class="line">      afterBlockParse.<span class="title function_">call</span>(<span class="variable language_">this</span>, hasStrictModeDirective);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldStrict) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setStrict</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>This function does not look short, but the main logic is the while loop, as long as it meets <code>!this.match(end)</code> will always parse, this end is actually tt.eof, that is, we just TokenType in a kind of, said the end of the file.</p>
<p>loop body The main content is two <code>const stmt = this.parseStatement(null, topLevel);</code> and <code>body.push(stmt);</code>, this stmt is a Node of AST</p>
<h3 id="parseStatement"><a href="#parseStatement" class="headerlink" title="parseStatement"></a>parseStatement</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">parseStatement</span>(<span class="attr">context</span>: ?string, topLevel?: boolean): N.<span class="property">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">match</span>(tt.<span class="property">at</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">parseDecorators</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">parseStatementContent</span>(context, topLevel);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>The first line is to determine whether the current is @, if so, that is the decorator, this temporarily regardless of</p>
<p>Let’s look at this <code>parseStatementContent</code></p>
<h3 id="parseStatementContent"><a href="#parseStatementContent" class="headerlink" title="parseStatementContent"></a>parseStatementContent</h3><p>This function is very much like <code>getTokenFromCode</code> in the Tokenizer just now. <code>getTokenFromCode</code> generates various types of tokens based on code, while <code>parseStatementContent</code> generates AST Node based on different types of tokens.</p>
<p>Then, during the parsing process, there are some special cases where the nextToken of the Tokenizer will be called again to continue to generate a new token, such as parsing to import</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">parseStatementContent</span>(<span class="attr">context</span>: ?string, <span class="attr">topLevel</span>: ?boolean): N.<span class="property">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> starttype = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">type</span>;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="title function_">startNode</span>();</span><br><span class="line">    watch child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isLet</span>(context)) &#123;</span><br><span class="line">      starttype = tt.<span class="property">_var</span>;</span><br><span class="line">      kind = <span class="string">&quot;let</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Most types of statements are recognized by the keyword they</span></span><br><span class="line"><span class="string">    // start with. Many are trivial to parse, some require a bit of</span></span><br><span class="line"><span class="string">    // complexity.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    switch (starttype) &#123;</span></span><br><span class="line"><span class="string">      case tt._break:</span></span><br><span class="line"><span class="string">      case tt._continue:</span></span><br><span class="line"><span class="string">        // $FlowFixMe</span></span><br><span class="line"><span class="string">        return this.parseBreakContinueStatement(node, starttype.keyword);</span></span><br><span class="line"><span class="string">      case tt._debugger:</span></span><br><span class="line"><span class="string">        return this.parseDebuggerStatement(node);</span></span><br><span class="line"><span class="string">      case tt._do:</span></span><br><span class="line"><span class="string">        return this.parseDoStatement(node);</span></span><br><span class="line"><span class="string">      case tt._for:</span></span><br><span class="line"><span class="string">        return this.parseForStatement(node);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      // Omit the various tokenType judgments</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      default: &#123;</span></span><br><span class="line"><span class="string">        if (this.isAsyncFunction()) &#123;</span></span><br><span class="line"><span class="string">          if (context) &#123;</span></span><br><span class="line"><span class="string">            this.raise(</span></span><br><span class="line"><span class="string">              this.state.start,</span></span><br><span class="line"><span class="string">              Errors.AsyncFunctionInSingleStatementContext,</span></span><br><span class="line"><span class="string">            );</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          this.next(); // Here again, the nextToken method of the Tokenizer is called</span></span><br><span class="line"><span class="string">          return this.parseFunctionStatement(node, true, !context);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // If the statement does not start with a statement keyword or a</span></span><br><span class="line"><span class="string">    // brace, it&#x27;s an ExpressionStatement or LabeledStatement. We</span></span><br><span class="line"><span class="string">    // simply start parsing an expression, and afterwards, if the</span></span><br><span class="line"><span class="string">    // next token is a colon and the expression was a simple</span></span><br><span class="line"><span class="string">    // Identifier node, we switch to interpreting it as a label.</span></span><br><span class="line"><span class="string">    const maybeName = this.state.value;</span></span><br><span class="line"><span class="string">    const expr = this.parseExpression();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (</span></span><br><span class="line"><span class="string">      start type= tt.name &amp;&amp;</span></span><br><span class="line"><span class="string">      expr.type= &quot;</span><span class="title class_">Identifier</span><span class="string">&quot; &amp;&amp;</span></span><br><span class="line"><span class="string">      this.eat(tt.colon)</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      return this.parseLabeledStatement(node, maybeName, expr, context);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      return this.parseExpressionStatement(node, expr);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Babel</category>
      </categories>
  </entry>
  <entry>
    <title>Backtracking Algorithm</title>
    <url>/en/posts/376d0826/</url>
    <content><![CDATA[<h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>Recently, I encountered several backtracking algorithms when I was doing problems, and each time I tried them out slowly, so I went to find out if there was any abstract ideas that I could refer to, so I looked for many articles, and here is an excerpt of the most basic but also the most clear article, the original link is <a href="https://leetcode-cn.com/problems/">this</a> permutations/solution/hui-su-suan-fa-xiang-jie-by-labuladong-2/).</p>
<p>Solving a backtracking problem is actually a decision tree traversal process. You only need to think about 3 questions:</p>
<ol>
<li><p>Path: that is, the choices that have been made.</p>
</li>
<li><p>The list of choices: that is, the choices you can currently make.</p>
</li>
</ol>
<p>3, the end condition: that is, the condition that you can no longer make a choice when you reach the bottom of the decision tree.</p>
<span id="more"></span>
<p>If you don’t understand the explanation of these three terms, it’s okay, we will use the classic backtracking algorithm problems of “Full Alignment” and “N Queen Problem” later to help you understand what these terms mean, for now you stay impressed.</p>
<p>In terms of code, the framework of the backtracking algorithm:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">path, <span class="built_in">list</span> of choices</span>).</span><br><span class="line">    <span class="keyword">if</span> end condition <span class="keyword">is</span> met.</span><br><span class="line">        result.add(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> selection <span class="keyword">in</span> selection <span class="built_in">list</span>.</span><br><span class="line">        Make a selection</span><br><span class="line">        backtrack(path, selection <span class="built_in">list</span>)</span><br><span class="line">        Undo selection</span><br></pre></td></tr></table></figure>
<p>The core of this is the recursion inside the for loop, “do selection” before the recursive call, and “undo selection” after the recursive call, it is very simple.</p>
<p>What do you mean by “choose” and “undo”, and what is the underlying principle of this framework? Here we will unravel the previous doubts through the problem of “full alignment” and explore the mystery in detail!</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Full-alignment-problem"><a href="#Full-alignment-problem" class="headerlink" title="Full alignment problem"></a>Full alignment problem</h3><p>We have done math problems with permutations in high school, and we know that there are n non-repeating numbers, and there are n!</p>
<p>PS: For the sake of simplicity and clarity, we are discussing the full permutation problem without repeating numbers.</p>
<p>So how did we exhaust the full permutations then? Let’s say you are given three numbers [1,2,3], you will not exhaust them in a random way, but generally as follows:</p>
<p>First fixed the first for 1, then the second can be 2, then the third can only be 3; then you can turn the second into 3, the third can only be 2; then you can only change the first, into 2, and then exhaust the last two ……</p>
<p>In fact, this is the backtracking algorithm, we will use it in high school without any teacher, or some students directly draw this backtracking tree as follows:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032281/origin-of-ray/微信截图_20201215193732_x2lnqw.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032281/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215193732_ x2lnqw.png"></p>
<p>Just traverse this tree from the root and record the numbers on the path, which are actually all the full permutations. We might call this tree the “decision tree” of the backtracking algorithm.</p>
<p>Why do you call this a decision tree? Because you are actually making decisions at each node. Let’s say you are standing on the red node in the following figure:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032359/origin-of-ray/微信截图_20201215193902_cao7zo.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032359/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215193902_ cao7zo.png"></p>
<p>You’re making a decision right now. You can choose either the 1 branch or the 3 branch. Why can you only choose between 1 and 3? Because the 2 branch is behind you, you’ve done this before, and full alignment doesn’t allow reuse of numbers.</p>
<p>Now we can answer the first few terms: [2] is the “path”, which records the choices you have already made; [1,3] is the “choice list”, which indicates the choices you can currently make; “end condition” is the traversal to the bottom of the tree, in this case when the choice list is empty.</p>
<p>If you understand these terms, you can use the “path” and “choice” lists as attributes of each node in the decision tree, for example, the following figure lists the attributes of several nodes:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032609/origin-of-ray/微信截图_20201215194319_ri7upg.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032609/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215194319_ ri7upg.png"></p>
<p>The backtrack function we defined is actually like a pointer that wanders around the tree while maintaining the properties of each node correctly, and whenever it goes to the bottom of the tree, its “path” is a full alignment.</p>
<p>Further, how to traverse a tree? This should not be difficult. Recall that the previous “framework for learning data structure thinking” wrote that various search problems are actually tree traversal problems, and the traversal framework of multinomial trees is as follows:</p>
<p>void traverse(TreeNode root) {<br>    for (TreeNode child : root.child)<br>        // The operations needed for a preorder traversal<br>        traverse(child).<br>        // operation needed for post-order traversal<br>}<br>And the so-called preorder traversal and postorder traversal, they are just two very useful points in time</p>
<p>Pre-order traversal code is executed at the point in time before entering a node, and post-order traversal code is executed at the point in time after leaving a node.</p>
<p>To recall what we just said, “path” and “selection” are properties of each node, and for the function to properly maintain the properties of the node as it wanders through the tree, it has to do something at these two special times:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032818/origin-of-ray/微信截图_20201215194648_rfi3ci.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608032818/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215194648_ rfi3ci.png"></p>
<p>Now, do you understand this core framework of the backtracking algorithm?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for select in Select list.</span><br><span class="line">    # Make a choice</span><br><span class="line">    Remove the selection from the selection list</span><br><span class="line">    path.add(selection)</span><br><span class="line">    backtrack(path, selection list)</span><br><span class="line">    # Undo the selection</span><br><span class="line">    path.remove(selection)</span><br><span class="line">    Add the selection to the selection list again</span><br></pre></td></tr></table></figure>
<p>We just need to make the selection before the recursion and undo the selection we just made after the recursion to get the correct list of selections and paths for each node.</p>
<p>Own implementation of the JavaScript code:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">swap</span> = (<span class="params">nums, i, j</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = nums[i].</span><br><span class="line">    nums[i] = nums[j].</span><br><span class="line">    nums[j] = temp.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generate</span> = (<span class="params">nums, output, n, first</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (first === n) &#123;</span><br><span class="line">        output.<span class="title function_">push</span>([. .<span class="property">nums</span>]).</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = first; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="title function_">swap</span>(nums, i, first).</span><br><span class="line">        <span class="title function_">generate</span>(nums, output, n, first + <span class="number">1</span>).</span><br><span class="line">        <span class="title function_">swap</span>(nums, i, first).</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permute = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> output = [].</span><br><span class="line">    <span class="title function_">generate</span>(nums, output, nums.<span class="property">length</span>, <span class="number">0</span>).</span><br><span class="line">    <span class="keyword">return</span> output.</span><br><span class="line">&#125;.</span><br></pre></td></tr></table></figure>
<p>Notes:</p>
<p>The pictures in this article are from labuladong public</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Fundamentals of Linear Algebra (I)  Connections Between Determinants, Matrices, Vectors and Equations(above)</title>
    <url>/en/posts/39443/</url>
    <content><![CDATA[<p>I recently wanted to look at computer graphics, but I saw that the course requirements have linear algebra as a pre-requisite, so I re-read some of them, and so far I have looked at properties of determinants, matrices, vectors and systems of equations.<br>The main purpose of this blog is not to summarize the properties of matrices one by one, but to sort out a question I have been having during the review process, which is, why these things are spoken together, what is the relationship between them, and to slightly combine some ideas from the rendering principles, how matrices are applied to them.</p>
<span id="more"></span>
<h2 id="Some-understanding-of-the-relationship-between-series-matrices-vectors-and-systems-of-equations"><a href="#Some-understanding-of-the-relationship-between-series-matrices-vectors-and-systems-of-equations" class="headerlink" title="Some understanding of the relationship between series, matrices, vectors and systems of equations"></a>Some understanding of the relationship between series, matrices, vectors and systems of equations</h2><ul>
<li>A row equation is a value, he is a number, a scalar, while a matrix is a table.</li>
<li>The value of the row equation can be regarded as a property of the matrix, and some properties of the matrix can be judged by the calculation of the value of the row equation.</li>
<li>A matrix is an m*n table, but if each column is viewed as a column vector, then the entire matrix can be viewed as a row vector, or a vector group.</li>
<li>Both matrices and vectors can be an expression of a system of equations. By converting a system of equations into a matrix or vector representation, there are many properties that can help us simplify the computation.</li>
</ul>
<h2 id="Matrix-vs-rendering-pipeline"><a href="#Matrix-vs-rendering-pipeline" class="headerlink" title="Matrix vs. rendering pipeline"></a>Matrix vs. rendering pipeline</h2><p>During the running of the game, we need to change the points in the model into pixel points on the screen, which involves transforming the coordinates of the points from the model coordinate system to the world coordinate system, and then to the camera’s coordinate system, etc. A series of transformation of the coordinate space, in fact, is the transformation of the coordinates, (x1, y1, z1) into (x2, y2, z2), this transformation is a system of equations three ternary A system of equations consisting of a single equation.<br>That is, we can turn the system of equations for coordinate transformation into the multiplication of matrices.<br>The advantage of this is that one is that it is more convenient to represent matrices, and the second is that we have many means to simplify the multiplication of matrices, while sometimes we need to transform each other between model spaces, and if we use a system of equations, we have to recalculate a system of equations, but if we use a matrix, then it is straightforward to use the inverse matrix, and if you are an orthogonal matrix, then you can even use the transpose matrix directly.</p>
<h2 id="Some-properties-of-and-relationships-between-series-matrices-vectors-and-systems-of-equations"><a href="#Some-properties-of-and-relationships-between-series-matrices-vectors-and-systems-of-equations" class="headerlink" title="Some properties of and relationships between series, matrices, vectors, and systems of equations"></a>Some properties of and relationships between series, matrices, vectors, and systems of equations</h2><h3 id="Matrix-expressions"><a href="#Matrix-expressions" class="headerlink" title="Matrix expressions"></a>Matrix expressions</h3><p>A row equation is a number that is an algebraic sum of products of elements in different rows and columns.</p>
<p>One thing to note is that the number of rows and columns of the determinant is the same, both are n. Then the determinant is called the nth order determinant.</p>
<p>For determinants of order three and below, we can directly use the diagonal method to find the value of the determinant, for determinants of order three and above, we need to apply the formula</p>
<script type="math/tex; mode=display">
\initial{vmatrix}
a_{11} & a_{12} & ... & a_{1n} \\
a_{21} & a_{22} & ... & a_{2n} \\
... & ... & ... & ... \\
a_{n1} & a_{n2} & ... & a_{nn} \\
\end{vmatrix}
=
\sum_{r=1}^n(-1)^{r(j_1j_2...j_n)}a_{1j_1}a_{2j_2}...a_{nj_n}</script><p>where <code>r(j1j2..jn)</code> denotes the inverse order of <code>j1j2..jn</code> (a larger number in front of a smaller number is said to constitute an inverse order, and the total number of inverse orders in an arrangement is called the inverse order of the arrangement), and an even inverse order is called an even arrangement, and an odd inverse order is called an odd arrangement.</p>
<h4 id="properties-of-the-row-equation"><a href="#properties-of-the-row-equation" class="headerlink" title="properties of the row equation"></a>properties of the row equation</h4><ul>
<li>The value of the transposed determinant remains unchanged</li>
<li>Two rows (or two columns) swap positions and the value of the determinant is 0.<ul>
<li>Corollary 1: Two rows or two columns are identical, the determinant value is 0</li>
</ul>
</li>
</ul>
<blockquote>
<p>Whether the value of the series is zero is a very important property, which is closely related to whether the system of equations has a solution, whether the system of vectors is linearly independent, etc.</p>
</blockquote>
<ul>
<li>A row or column has a common factor k. You can put k outside the notation of the determinant, i.e., multiplying a number k by a determinant is equivalent to multiplying a row of it by k.<ul>
<li>Corollary 1: A row or column value is 0, then the determinant value is 0</li>
<li>Corollary 2: The elements of two rows (or two columns) correspond to each other proportionally, and the value of the determinant is 0</li>
</ul>
</li>
<li>A row or column can be the sum of two elements, then it can be split into two determinants and added together</li>
</ul>
<script type="math/tex; mode=display">
\initial{vmatrix}
a_1 + b_1 & a_2 + b_2 & a_3 + b_3 \\
c_1 & c_2 & c_3 \\
d_1 & d_2 & d_3
\end{vmatrix}
=
\initial{vmatrix}
a_1 & a_2 & a_3 \\
c_1 & c_2 & c_3 \\
d_1 & d_2 & d_3
\end{vmatrix}
+
\initial{vmatrix}
b_1 & b_2 & b_3 \\
c_1 & c_2 & c_3 \\
d_1 & d_2 & d_3
\end{vmatrix}</script><ul>
<li>k times of a row (or column) is added to another row (or column), the value of the determinant remains unchanged</li>
</ul>
<script type="math/tex; mode=display">
\initial{vmatrix}
a_1 & a_2 & a_3 \\
b_1 & b_2 & b_3 \\
c_1 & c_2 & c_3
\end{vmatrix}
=
\initial{vmatrix}
a_1 & a_2 & a_3 \\
b_1 + ka_1 & b_2 + ka_2 & b_3 + ka_3
c_1 & c_2 & c_3
\end{vmatrix}</script><h4 id="Row-by-row-or-column-by-column-expansion-formula-Laplace-expansion"><a href="#Row-by-row-or-column-by-column-expansion-formula-Laplace-expansion" class="headerlink" title="Row-by-row (or column-by-column) expansion formula (Laplace expansion)"></a>Row-by-row (or column-by-column) expansion formula (Laplace expansion)</h4><p>The nth-order determinant is called the remainder of <code>a_ij</code>, denoted as <code>M_ij</code>, by crossing out all the elements of row i and column j of <code>a_ij</code> in the nth-order determinant.</p>
<p>Call <code>(-1)^(i+j)M_ij</code> the algebraic remainder equation of <code>a_ij</code>, denoted as <code>A_ij</code>,i.e:</p>
<script type="math/tex; mode=display">
A_{ij} = (-1)^{i + j}M_{ij}</script><p><strong>Theorem 1</strong>: A determinant of order n is equal to the sum of the products of the elements of any row of it and its corresponding algebraic remainder equation</p>
<script type="math/tex; mode=display">
\initial{vmatrix}
A
\end{vmatrix}
=
a_{i1}A_{i1} + a_{i2}A_{i2} + ... + a_{ik}A_{ik}
=
\sum_{k=1}^na_{ik}A_{ik}, i = 1, 2, 3, ..., n</script><script type="math/tex; mode=display">
\initial{vmatrix}
A
\end{vmatrix}
=
a_{1i}A_{1i} + a_{2i}A_{2i} + ... + a_{ki}A_{ki}
=
\sum_{k=1}^na_{ki}A_{ki}, i = 1, 2, 3, ..., n</script><p>The first one becomes the row-by-row expansion of the determinant, and the second one is called the column-by-column expansion.</p>
<p><strong>Theorem 2</strong>: The sum of the algebraic remainder of any row of the determinant with the elements of another row is 0</p>
<script type="math/tex; mode=display">
\sum_{k=1}^na_{ik}A_{jk} = 0, i j</script><p>There are also several special cases:</p>
<ul>
<li><p>The value of the upper (lower) trigonometric determinant is the product of the diagonals</p>
</li>
<li><p>The value of the determinant of the subdiagonal is then</p>
</li>
</ul>
<script type="math/tex; mode=display">
(-1)^{\frac {n(n-1)}2}a_{1n}a_{2,n-1}...a_{an1}</script><ul>
<li>If A and B are matrices of order m and n, respectively, then<script type="math/tex; mode=display">
\initial{vmatrix}
A & * \\
0 & B
\end{vmatrix}
=
\initial{vmatrix}
A & 0 \\
* & B
\end{vmatrix}
=
\initial{vmatrix}
A
\end{vmatrix}
*
\initial{vmatrix}
B
\end{vmatrix}
,
\initial{vmatrix}
* & A \\
B & 0
\end{vmatrix}
=
\initial{vmatrix}
0 & A \\
B & *
\end{vmatrix}
=
(-1)^{mn}
\initial{vmatrix}
A
\end{vmatrix}
*
\initial{vmatrix}
B
\end{vmatrix}</script></li>
</ul>
<ul>
<li>Van der Munn determinant</li>
</ul>
<script type="math/tex; mode=display">
\initial{vmatrix}
1 & 1 & ... & 1 \\
x_1 & x_2 & ... & x_n ...
x_1^2 & x_2^2 & ... & x_n^2
... & ... & ... & ... \\
x_1^{n-1} & x_2^{n-1} & .... & x_n^{n-1}
\end{vmatrix}
= \prod_{1 \le j \le i \le n}(x_i - x_j)</script><h4 id="Kramer’s-Law"><a href="#Kramer’s-Law" class="headerlink" title="Kramer’s Law"></a>Kramer’s Law</h4><p>If the coefficients of a system of non-simultaneous linear equations consisting of n equations with n unknowns have determinant values that are not zero, then the system of equations has a unique solution, and</p>
<script type="math/tex; mode=display">
x_i =
\frac
{
  \initial{vmatrix}
  A_i
  \end{vmatrix}
}
{
    \initial{vmatrix}
  A
  \end{vmatrix}
}
,
i = 1, 2, 3, ..., n</script><p>where Ai is the determinant formed by replacing the elements of the i<strong> column</strong> in |A| with the constant terms at the right end of the system of equations</p>
<p><strong>Corollary</strong>: A system of n equations n unknown quantities consisting of a system of linear equations with coefficients determinant|A| ! = 0 is sufficient for the system of equations to have a unique zero solution (since the constants at the right end of the system of equations are all 0, so |Ai| is 0, then all xi is 0).</p>
<p>Conversely, if there is a non-zero solution, then |A| = 0.</p>
<h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><h3 id="vectors"><a href="#vectors" class="headerlink" title="vectors"></a>vectors</h3><h3 id="System-of-equations"><a href="#System-of-equations" class="headerlink" title="System of equations"></a>System of equations</h3>]]></content>
      <categories>
        <category>Math</category>
      </categories>
  </entry>
  <entry>
    <title>Linear Table Basics Summary</title>
    <url>/en/posts/16728/</url>
    <content><![CDATA[<p>These two weeks took out the university’s data structures and algorithms again to look at the second chapter of the linear table part, and some new gains, I think, to summarize.</p>
<span id="more"></span>
<h2 id="Basic-concepts-of-data-structures"><a href="#Basic-concepts-of-data-structures" class="headerlink" title="Basic concepts of data structures"></a>Basic concepts of data structures</h2><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>Data is a carrier of information, a collection of numbers, characters and all symbols that can be entered into a computer and recognized and processed by a computer program to describe the properties of objective things. Data is the raw material for computer program processing.</p>
<h3 id="Data-elements"><a href="#Data-elements" class="headerlink" title="Data elements"></a>Data elements</h3><p>A <strong>data element</strong> is the basic unit of data and is usually considered and treated as a whole. A data element can be composed of several <strong>data items</strong>, and <strong>data items are the smallest indivisible units</strong> that make up a data element. For example, a student record is a data element that consists of data items such as student number, name, etc.</p>
<h3 id="Data-objects"><a href="#Data-objects" class="headerlink" title="Data objects"></a>Data objects</h3><p>A data object is a collection of data elements with the same properties and is a subset of the data. For example, an integer object is a set N={0,1,2,…}</p>
<h3 id="Data-type"><a href="#Data-type" class="headerlink" title="Data type"></a>Data type</h3><p>A data type is a generic term for a collection of values and a set of operations defined on this collection.</p>
<ul>
<li>Atomic types: Data types whose values are indivisible</li>
<li>Structure type: A data type whose values can be subdivided into components (components)</li>
<li>Abstract data types: abstract data organization and the operations associated with them</li>
</ul>
<h3 id="Data-structure"><a href="#Data-structure" class="headerlink" title="Data structure"></a>Data structure</h3><p>A data structure is a collection of data elements that have one or more specific relationships with each other. In any problem, data elements do not exist in isolation, they have some relationship with each other, and this relationship between data elements is called structure.</p>
<p><strong>Data structure consists of three aspects: logical structure, storage structure and operations on data</strong>.</p>
<p>The logical structure of the data and the storage structure are two inseparable aspects.<strong> The design of an algorithm depends on the chosen logical structure, and the implementation of the algorithm, on the storage structure used</strong>.</p>
<h4 id="Logical-Structure"><a href="#Logical-Structure" class="headerlink" title="Logical Structure"></a>Logical Structure</h4><p>Logical structure refers to the logical relationship between data elements, i.e., describing the data in terms of logical relationships. It is independent of the storage structure of the data and is computer independent.</p>
<p>The logical structure of data is divided into linear and non-linear structures. Linear table is a typical linear structure. Sets, trees, and graphs are typical nonlinear structures.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1629936472/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210826080632_xmnhbt.png" alt=""></p>
<h4 id="storage-structure"><a href="#storage-structure" class="headerlink" title="storage structure"></a>storage structure</h4><p>The storage structure is the representation of the data structure in the computer, which also becomes the physical structure.</p>
<p>The main ones are sequential storage, chained storage, indexed storage and hash storage.</p>
<h2 id="Basic-concepts-of-linear-tables"><a href="#Basic-concepts-of-linear-tables" class="headerlink" title="Basic concepts of linear tables"></a>Basic concepts of linear tables</h2><h3 id="Definition-of-linear-table"><a href="#Definition-of-linear-table" class="headerlink" title="Definition of linear table"></a>Definition of linear table</h3><p>A linear table is a <strong>finite sequence</strong> of n data elements with <strong>same data type</strong>.</p>
<p>Characteristics of linear tables:</p>
<ul>
<li>Limited number of elements in the table</li>
<li>The elements in a table are logically sequential, and the elements in a table have their own order of precedence.</li>
<li>The elements in the table are all data elements, and each element is a single element.</li>
<li>The elements in the table all have the same data type, which means that each element occupies the same size of storage space.</li>
<li>The elements of the table are abstract in nature, i.e., the logical relationships between elements are discussed without regard to what exactly the elements represent.</li>
</ul>
<blockquote>
<p><strong>Linear table is a logical structure that represents one-to-one adjacency between elements. </strong></p>
<p><strong>Sequential tables and chained tables represent storage structures. </strong></p>
</blockquote>
<h2 id="A-few-simple-but-clever-algorithmic-ideas-seen"><a href="#A-few-simple-but-clever-algorithmic-ideas-seen" class="headerlink" title="A few simple but clever algorithmic ideas seen"></a>A few simple but clever algorithmic ideas seen</h2><h3 id="First"><a href="#First" class="headerlink" title="First"></a>First</h3><p>Delete all elements whose values are between the given values s and t (containing s and t, requiring s&lt;t) from the sequence table. If s or t is not reasonable or the sequence table is empty, an error message is displayed and the run is exited.</p>
<p>Algorithm idea: Scan the order table L from front to back, record the number of elements whose values are between s and t with k (initially k=0), and for the currently scanned element, if its value is no longer between s and t, move forward k positions, otherwise perform k++. Due to this, each element that is not between s and t is moved only once.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Del_s_t</span><span class="params">(SqlList &amp;L, ElemType s, ElemType t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length= <span class="number">0</span> || s &gt;= t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] &gt;= s &amp;&amp; L.data[i] &lt;= t) &#123;</span><br><span class="line">            k++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L.data[i - k] = L.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length -= k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this algorithm, i denotes the nodes currently traversed and k denotes the number of nodes to be deleted between 0 - i. This means that between 0 and (i - k) are the nodes to be kept and between (i - k) and i are the points to be deleted.</p>
<p>This relationship, using mathematical induction, starts when i equals 0, and in the next traversal to each node the entire relationship is guaranteed, that finally when i is L.length, the final array of reserved nodes should be 0 to L.length-k</p>
<p>In fact, you can also use k to indicate the number of nodes to be reserved, then this code becomes</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Del_s_t</span><span class="params">(SqlList &amp;L, ElemType s, ElemType t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length= <span class="number">0</span> || s &gt;= t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] &lt; s || L.data[i] &gt; t) &#123;</span><br><span class="line">            L.data[k++] = L.data[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h3><p>Let n integers be stored into a one-bit array R. Design an algorithm that is as efficient as possible in both time and space. Shift the sequence stored in R cyclically left by p positions, i.e., the data in R changes from (X0, X1, … , XR) to (Xp, Xp+1, …. XR, X0, X1, … , Xp - 1)</p>
<p>Algorithmic idea: Consider this problem as transforming the array ab into ba, then first invert a to get a-inverse b, then invert b to get a-inverse b-inverse, and finally invert the entire a-inverse b-inverse to get ba.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reverse</span><span class="params">(<span class="type">int</span> R[], <span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, temp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (to - from + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        temp = R[from + i];</span><br><span class="line">        R[from + i] = R[to - i];</span><br><span class="line">        R[to - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Converse</span><span class="params">(<span class="type">int</span> R[], <span class="type">int</span> n, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Reverse</span>(R, <span class="number">0</span>, p - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Reverse</span>(R, p, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Reverse</span>(R, <span class="number">0</span>, n - <span class="number">1</span>);h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="The-third-one"><a href="#The-third-one" class="headerlink" title="The third one"></a>The third one</h3><p>Let an ascending sequence S be of length L. The number at the position [L / 2] is called the median of S. For example, the median of an ascending sequence S1 (11, 13, 15, 17, 19) is 15. For example, if the ascending sequence S1 (11,13,15,17,19), then its median is 15. The median of two sequences is the median of the ascending sequence containing all their elements. For example, if S2 (2,4,6,8,20), then the median of S1 and S2 is 11. There are two equal ascending sequences A and B. Design a time and space efficient algorithm to find the median of A and B.</p>
<p>Algorithm idea 1: We can easily think of the first algorithm, because A and B are in ascending order, so set two pointers i, j, initially pointing to the first element of A and B. Then each time we compare A[i] and B[j], if A[i] is small, then i++, if B[j] is small, then j++, when comparing to the first A.length times, at this time the smaller is the median of A and B. The time complexity of this algorithm is O(n)</p>
<p>Algorithm idea 2: You can use the dichotomy method to improve efficiency. The procedure for finding the median of two ascending sequences A and B, set as a and b, respectively, is as follows:</p>
<ul>
<li>If a=b, then a or b is the median and the result is returned.</li>
<li>If a &lt; b, the smaller half of A is discarded, while the larger half of B is discarded, requiring that the two discards be of equal length.</li>
<li>If a &gt; b, then discard the larger half of A while discarding the smaller half of B. The length of the two discards is required to be equal.</li>
</ul>
<p>In retaining the two ascending sequences, the above three processes are repeated until both sequences contain only one element position, and the smaller one is the median sought.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">M_Search</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> B, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s1 = <span class="number">0</span>, d1 = n - <span class="number">1</span>, m1, s2 = <span class="number">0</span>, d2 = n - <span class="number">1</span>, m2;</span><br><span class="line">    <span class="keyword">while</span>(s1 != d1 || s2 != d2) &#123;</span><br><span class="line">        m1 = (s1 + d1) / <span class="number">2</span>;</span><br><span class="line">        m2 = (s2 + d2) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[m1]= B[m2]) &#123;</span><br><span class="line">            <span class="keyword">return</span> A[m1]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (A[m1] &lt; B[m2]) &#123;</span><br><span class="line">            s1 = (s1 + d1) % <span class="number">2</span>= <span class="number">0</span> ? m1 : m1 + <span class="number">1</span>;</span><br><span class="line">            d2 = m2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            d1 = m1;</span><br><span class="line">            s2 = (s2 + d2) % <span class="number">2</span>= <span class="number">0</span> ? m2 : m2 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> A[s1] &lt; B[s2] ? A[s1] : B[s2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Browser Architecture</title>
    <url>/en/posts/bbe10e1c/</url>
    <content><![CDATA[<p>Whether you want to design high-performance web applications or optimize existing web applications, you need to understand network processes in browsers, page rendering processes, JavaScript execution processes, and web security theory.</p>
<p>This article briefly introduces the architectural evolution of browsers.<br><span id="more"></span></p>
<h2 id="What-is-a-browser"><a href="#What-is-a-browser" class="headerlink" title="What is a browser"></a>What is a browser</h2><p>When it comes to browsers, everyone is very familiar with them, but what does a browser do?</p>
<p>In fact, we can know this problem from another name of the browser: <strong> World Wide Web Client </strong>.</p>
<p>Yes, the browser is actually a client that helps us browse the information of the World Wide Web.</p>
<p>So what is the World Wide Web? What is the information on the World Wide Web?</p>
<p>Simply put, the information on the World Wide Web is HTML doc, and the communication on the World Wide Web is through the http protocol. One of the two is called Hypertext Markup Language and the other is called Hypertext Transfer Protocol.</p>
<p>The most essential role of the browser is to help us get the HTML doc through the http protocol and display it.</p>
<h2 id="Architecture-of-the-browser"><a href="#Architecture-of-the-browser" class="headerlink" title="Architecture of the browser"></a>Architecture of the browser</h2><h3 id="Single-process-browser"><a href="#Single-process-browser" class="headerlink" title="Single-process browser"></a>Single-process browser</h3><p>As the name suggests, a single-process browser means that all functional modules of the browser run in the same process, including networks, plugins, JavaScript runtime environments, rendering engines, and pages. In fact, as early as 2007, browsers on the market were single-process. The architecture of a single-process browser is shown in the figure below:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1607950533/origin-of-ray/微信截图_20201214205124_zhp4vc.png" alt=""></p>
<p>So many functional modules running in a single process is a major factor that causes single-process browsers to be unstable, unsmooth, and insecure.</p>
<h4 id="Unstable"><a href="#Unstable" class="headerlink" title="Unstable"></a>Unstable</h4><p>Early browsers need to use plug-ins to achieve various powerful functions such as Web videos, Web games, etc., but plug-ins are the most problematic modules and also run in the browser process, so an accidental crash of a plug-in will cause the crash of the entire browser.</p>
<p>In addition to plugins, the rendering engine module is also unstable. Usually, some complex JavaScript code may cause the rendering engine module to crash. Like plugins, the crash of the rendering engine will also cause the entire browser to crash.</p>
<h4 id="Not-smooth"><a href="#Not-smooth" class="headerlink" title="Not smooth"></a>Not smooth</h4><p>As can be seen from the “single-process browser architecture diagram” above, all page rendering modules, JavaScript execution environment, and plugins run in the same thread, which means that only one module can be executed at a time. For example, a script with this infinite loop</p>
<p>What do you think would happen if you let this script run on a page in a Single-Process Browser? Because this script is in an infinite loop, when it executes, it will monopolize the entire thread, resulting in no chance for other modules running in that thread to be executed. Because all pages in the Browser run in this thread, none of these pages have a chance to execute tasks, which will cause the entire Browser to become unresponsive and slow down.</p>
<h4 id="Not-safe"><a href="#Not-safe" class="headerlink" title="Not safe"></a>Not safe</h4><p>Plugins can be written using C/C++ and other code, through the plug-in can get any resources of the operating system, when you run a plug-in page also means that the plug-in can fully operate your computer. If it is a malicious plug-in, then it can release viruses, steal your account password, causing security problems.</p>
<p>As for page scripts, it can obtain system permissions through browser vulnerabilities. After these scripts obtain system permissions, they can also do some malicious things to your computer, which will also cause security problems.</p>
<h3 id="Multi-process-browser"><a href="#Multi-process-browser" class="headerlink" title="Multi-process browser"></a>Multi-process browser</h3><h4 id="Early-multiprocess-browser"><a href="#Early-multiprocess-browser" class="headerlink" title="Early multiprocess browser"></a>Early multiprocess browser</h4><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1607951301/origin-of-ray/微信截图_20201214210808_qtiudk.png" alt=""></p>
<p>As can be seen from the figure, the Chrome page is running in a separate rendering process, and the plug-in in the page is also running in a separate plug-in process, and the process communicates through the IPC mechanism (as shown in the figure). dashed line part)</p>
<p><strong> Let’s first take a look at how to solve the instability problem </strong>. Since the processes are isolated from each other, when a page or plugin crashes, it only affects the current page process or plugin process, and will not affect the browser and other pages. This perfectly solves the problem that the crash of the page or plugin will cause the entire browser to crash, which is unstable.</p>
<p><strong> Next let’s see how to solve the problem of non-fluency </strong>. Similarly, JavaScript also runs in the rendering process, so even if JavaScript blocks the rendering process, it only affects the current rendering page, not the browser and other pages, because the scripts of other pages run in their own rendering process. So when we run the above endless loop script in the Chrome again, it is only the current page that does not respond.</p>
<p>For the solution to memory leaks, it is even simpler, because when a page is closed, the entire rendering process will be closed, and then the memory occupied by the process will be recycled by the system, which easily solves the problem of browser pages.</p>
<p>Finally, let’s take a look at how the above two security problems are solved. An added benefit of using a multi-process architecture is the use of a security sandbox. You can think of the sandbox as a lock placed on the process by the operating system. The programs in the sandbox can run, but they cannot write any data on your hard drive or read any data in sensitive locations, such as your doc and desktop. Chrome lock the plug-in process and the rendering process in the sandbox, so that even if malicious programs are executed in the rendering process or plug-in process, malicious programs cannot break through the sandbox to gain system privileges.</p>
<h4 id="Current-multi-process-browser"><a href="#Current-multi-process-browser" class="headerlink" title="Current multi-process browser"></a>Current multi-process browser</h4><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1607951570/origin-of-ray/微信截图_20201214211245_onevmr.png" alt=""></p>
<p>Let’s analyze the functions of these processes one by one.</p>
<ul>
<li><p>Browser process. Mainly responsible for interface display, user interaction, child process management, and storage and other functions.</p>
</li>
<li><p>Renderer process. The core task is to convert HTML, CSS and JavaScript into web pages that users can interact with. Both the layout engine Blink and the JavaScript engine V8 run in this process. By default, the Chrome creates a render process for each Tab tag. For security reasons, the rendering process runs in sandbox mode.</p>
</li>
<li><p>GPU process. In fact, when Chrome first released, there was no GPU process. The original intention of using GPU was to achieve the effect of 3D CSS, but then web pages, Chrome UI interfaces were chosen to be drawn with GPU, which made GPU a common requirement for browsers. Finally, Chrome also introduced GPU processes on its multi-process architecture.</p>
</li>
<li><p>Network process. Mainly responsible for loading network resources of the page. It used to run as a module in the browser process, but it was only recently independent and became a separate process. Plugin process. Mainly responsible for the operation of the plugin, because the plugin is prone to crash, it needs to be isolated by the plugin process to ensure that the crash of the plugin process will not affect the browser and the page.</p>
</li>
</ul>
<h2 id="Browser-navigation-process"><a href="#Browser-navigation-process" class="headerlink" title="Browser navigation process"></a>Browser navigation process</h2><p>“In the browser, from entering the URL to displaying the page, what happens in between?” This was a classic interview question that could comprehensively examine the candidate’s knowledge, which involved a series of knowledge such as networks, operating systems, and the Web.</p>
<p>So today let’s explore this process together</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1607952407/origin-of-ray/微信截图_20201214212637_nqv6vr.png" alt=""></p>
<p>This process can be roughly described as follows.</p>
<ul>
<li><p>First, the browser process receives the URL request input by the user, and the browser process forwards the URL to the network process.</p>
</li>
<li><p>Then, initiate a real URL request in the network process.</p>
</li>
<li><p>Then the network process receives the response header data, parses the response header data, and forwards the data to the browser process.</p>
</li>
<li><p>After the browser process receives the response header data of the network process, it sends a “CommitNavigation” message to the rendering process;</p>
</li>
<li><p>After the rendering process receives the “Submit Navigation” message, it begins to prepare to receive HTML data. The way to receive data is to directly establish a data pipeline with the network process;</p>
</li>
<li><p>Finally, the renderer process will “confirm the submission” to the browser process, which is to tell the browser process: “Ready to accept and parse page data”.</p>
</li>
<li><p>After the browser process receives the “submit doc” message from the rendering process, it starts to remove the old doc and then updates the page state in the browser process.</p>
</li>
</ul>
<blockquote>
<p>If you are interested in the content of the rendering process, you can see my [another blog about the rendering process] (<a href="https://sunra.top/posts/29f9a977/">https://sunra.top/posts/29f9a977/</a>)</p>
</blockquote>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>Browser Cache</title>
    <url>/en/posts/be7c79f7/</url>
    <content><![CDATA[<p>Some time ago, I encountered a problem with browser caching. I didn’t have any ideas at the time. Later, I checked back and found that I had contacted many things, but I didn’t systematically sort them out. I used this blog to sort them out.</p>
<p>The main content is the browser’s strong cache, the mechanism for negotiating the cache, and the corresponding HTTP headers.</p>
<p>In addition, the content related to the browser’s Cache API may be sorted out in the future.</p>
<span id="more"></span>
<h2 id="Strong-cache-and-negotiation-cache"><a href="#Strong-cache-and-negotiation-cache" class="headerlink" title="Strong cache and negotiation cache"></a>Strong cache and negotiation cache</h2><p>Browser cache is divided into strong cache and negotiation cache, and there are two obvious differences between the two:</p>
<ol>
<li>If the browser hits a strong cache, there is no need to send a request to the server; and the negotiation cache is ultimately decided by the server whether to use the cache, that is, there is a communication between the Client and the server.</li>
<li>The request status code returned by the strong cache in’chrome ‘ (although no real’http’ request was made) is’ 200 (from cache) ‘; while the negotiation cache if it hits the cache, the request status code is’ 304 (not modified) ‘. The strategy of different browsers is different, in’Fire Fox’, the’from cache ‘status code is 304.</li>
</ol>
<blockquote>
<p>Of which</p>
</blockquote>
<h2 id="Caching-mechanism"><a href="#Caching-mechanism" class="headerlink" title="Caching mechanism"></a>Caching mechanism</h2><p>First, let’s take a general perception of its matching process, as follows: </p>
<ol>
<li>Before the browser sends the request, determine whether it hits (including whether it expires) according to the expires and cache-control of the request header. If it hits, the resource is directly obtained from the cache and the request will not be sent. If there is no hit, go to the next step.</li>
<li>If the strong cache rule is not hit, the browser will send a request and judge whether it hits the negotiation cache according to the last-modified and etag of the request header. If it hits, the resource is directly obtained from the cache. If there is no hit, proceed to the next step.</li>
<li>If the first two steps are not hit, directly from the server level to get resources.</li>
</ol>
<h2 id="Request-flow"><a href="#Request-flow" class="headerlink" title="Request flow"></a>Request flow</h2><p>The browser caches the resource after the first request, and when the request is made again, it will perform the following two steps:</p>
<ol>
<li>The browser will get the information in the’header ‘of the cache resource, and judge whether it hits a strong cache according to the’expires’ and’cache-control ‘in the’response header’. If it hits, it will directly obtain the resource from the cache.</li>
<li>If there is no strong cache hit, the browser will send a request to the server, the request will bring “IF-Modified-Since” or “IF-One-Match”, their values are the first request returns “Last-Modified” or “Etag”, by the server to compare this pair of fields to determine whether a hit. If it hits, the server returns a 304 status code and does not return the resource content, the browser will directly retrieve it from the cache; otherwise, the server will eventually return the actual content of the resource and update the relevant cache fields in the header.</li>
</ol>
<h3 id="Strong-cache"><a href="#Strong-cache" class="headerlink" title="Strong cache"></a>Strong cache</h3><p>Strong caching is controlled by the’Expires’ or’Cache-Control ‘fields in the return header, both of which represent the cache effective time of the resource.</p>
<ul>
<li>‘Expires’ is the specification of’http 1.0 ‘, and the value is a time point string in’GMT’ format, such as’Expires: Mon, 18 Oct 2066 23:59:59 GMT ‘. This time point represents the time when the resource expires. If the current timestamp is before this time, it is determined that the cache hit. One drawback is that the expiration time is an absolute time, and if the server time deviates from the Client time by a large margin, it will cause cache confusion. It is normal that the time of the server is different from the actual time of the user, so’Expires’ will bring some trouble in actual use.</li>
<li>‘Cache-Control’ field is the specification of’http 1.1 ‘. Generally, the value of’max-age’ of this field is often used to judge. It is a relative time, for example. ‘Cache-Control: max-age = 3600’ represents the valid period of the resource is 3600 seconds. And the’Date ‘in the return header indicates the time when the message was sent, indicating that the current resource is valid during the period of’Date~ Date + 3600s’. However, I often encounter in actual use after setting’max-age ‘, in the’max-age’ time to revisit the resource will return ‘304 not modified’, which is due to the server time and the local time different caused. Of course, there are several other values of’Cache-Control ‘can be set, but relatively rarely used:<ul>
<li>‘No-cache’ does not use local cache. Negotiation cache is required.</li>
<li>‘No-store’ directly prohibits the browser from caching data, and every time a resource is requested, the server will be asked for the complete resource, similar to’disabled cache ‘in’network’.</li>
<li>‘public’ can be cached by all users, including end users and Middleware proxy servers such as cdn.</li>
<li>‘Private’ can only be cached by the end users’ browsers.</li>
</ul>
</li>
</ul>
<p>If’Cache-Control ‘and’Expires’ exist at the same time, ‘Cache-Control’ takes precedence over’Expires’.</p>
<h3 id="Negotiation-cache"><a href="#Negotiation-cache" class="headerlink" title="Negotiation cache"></a>Negotiation cache</h3><p>Negotiated caching is determined by the server whether cache resources are available. It mainly involves two pairs of attribute fields, both of which appear in pairs, that is, the response header of the first request contains a certain word, ‘Last-Modified’ or’Etag ‘, and subsequent requests will bring the corresponding request field’If-Modified-Since’ or’If-One-Match ‘, if there is no’Last-Modified’ or’Etag ‘field in the response header, there will be no corresponding field in the request header.</p>
<ul>
<li>‘Last-Modified/If-Modified-Since’ The values of both are time strings in GMT format, and’Last-Modified ‘marks the last file modification time. When the next request is made, the request header will be marked with’If-Modified-Since’ The value is’ Last-Modified ‘, which tells the server the last modification time of my locally cached file. On the server, according to the last modification time of the file, it is judged whether the resource has changed. If the file has not changed, it will return’ 304 Not Modified ‘. The request does not return the resource content, and the browser directly uses Local cache. When the server returns a response of 304 Not Modified, the response header will not add the Last-Modified to attempt to update the local cache of Last-Modified, because since the resource has not changed, the Last-Modified will not change; if the resource has changed, it will return the resource content normally, the new Last-Modified will return in the response header, and update the local cache of Last-Modified before the next request, The next request, ‘If-Modified-Since’ will Enable the updated Last-Modified.</li>
<li>‘Etag/If-One-Match’, the value is a unique identification string generated by the server for each resource, and the value will change as long as the resource changes. The server calculates a hash value based on the file itself and returns it to the browser through the’ETag ‘field. After receiving the’If-One-Match’ field, the server determines whether the file content is changed by comparing whether the two are consistent. Unlike’Last-Modified ‘, when the server returns a response of’ 304 Not Modified ‘, the’ETag’ will be returned in the’response header ‘because the’ETag’ has been recalculated on the server, even if the’ETag ‘has not changed from the previous one.</li>
</ul>
<blockquote>
<p>HTTP</p>
</blockquote>
<h3 id="Why-have"><a href="#Why-have" class="headerlink" title="Why have"></a>Why have</h3><p>The emergence of Etag in HTTP1.1 is mainly to solve several difficult problems of Last-Modified:</p>
<ul>
<li>Some files may change periodically, but the content does not change (only the modification time of the change). At this time, we do not want the Client to think that the file has been modified and re-GET;</li>
<li>Some files are modified very frequently, such as modifying within seconds, (for example, modifying N times within 1s), the granularity that can be checked by If-Modified-Since is second-level, and the use of Etag can ensure that the client can refresh the cache N times within 1 second under this requirement.</li>
<li>Some servers cannot accurately obtain the last modification time of the file.</li>
</ul>
<h3 id="Cache-control"><a href="#Cache-control" class="headerlink" title="Cache-control"></a>Cache-control</h3><h4 id="Cacheability"><a href="#Cacheability" class="headerlink" title="Cacheability"></a>Cacheability</h4><ul>
<li><p><code>public</code></p>
<p>Indicates that the response can be cached by any object (including: the client sending the request, the proxy server, etc.), even content that is not normally cacheable. (For example: 1. The response does not have a’max-age ‘directive or an’Expires’ header; 2. The request method corresponding to the response is <a href="https://wiki.developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST">POST</a> 。）</p>
</li>
<li><p><code>private</code></p>
<p>Indicates that the response can only be cached by a single user and cannot be used as a shared cache (that is, the proxy server cannot cache it). Private caches can cache the response content, such as the local browser of the corresponding user.</p>
</li>
<li><p><code>no-cache</code></p>
<p>Before releasing the cached copy, it is mandatory for the cache to submit the request to the origin server for verification (negotiated cache verification).</p>
</li>
<li><p><code>no-store</code></p>
<p>The cache should not store anything about client requests or server responses, i.e. no cache is used.</p>
</li>
</ul>
<h4 id="Due"><a href="#Due" class="headerlink" title="Due"></a>Due</h4><ul>
<li><p><code>max-age=&lt;seconds&gt;</code></p>
<p>Sets the maximum period of cache storage, beyond which the cache is considered expired (in seconds). In contrast to’Expires’, the time is relative to the requested time.</p>
</li>
<li><p><code>s-maxage=&lt;seconds&gt;</code></p>
<p>Override the max-age or Expires header, but only for shared caches (such as individual proxies), private caches ignore it.</p>
</li>
<li><p><code>max-stale[=&lt;seconds&gt;]</code></p>
<p>Indicates that the Client is willing to receive a resource that has expired. An optional number of seconds can be set to indicate that the response cannot be outdated beyond this given time.</p>
</li>
<li><p><code>min-fresh=&lt;seconds&gt;</code></p>
<p>Indicates that the Client wants to get a response that keeps it up to date for a specified number of seconds.</p>
</li>
<li><p><code>stale-while-revalidate=&lt;seconds&gt;</code> </p>
<p>Indicates that the client is willing to accept stale responses while checking for new ones asynchronously in the background. The second value indicates the length of time the client is willing to accept stale responses.</p>
</li>
<li><p><code>stale-if-error=&lt;seconds&gt;</code> </p>
<p>Indicates that the customer is willing to accept the stale response if the new check fails. The second value indicates the time the customer is willing to accept the stale response after the initial expiration.</p>
</li>
</ul>
<h4 id="Re-verify-and-reload"><a href="#Re-verify-and-reload" class="headerlink" title="Re-verify and reload"></a>Re-verify and reload</h4><ul>
<li><p><code>must-revalidate</code></p>
<p>Once a resource has expired (for example, it has passed max-age), the cache cannot use it to respond to subsequent requests until it has successfully authenticated to the origin server.</p>
</li>
<li><p><code>proxy-revalidate</code></p>
<p>Same effect as must-revalidate, but it only applies to shared caches (such as proxies) and is ignored by private caches.</p>
</li>
<li><p><code>immutable</code> </p>
<p>Indicates that the response body does not change over time. The resource (if not expired) does not change on the server, so the Client should not send a revalidation request header (such as’If-One-Match ‘or’I f-Modified-Since’) to check for updates, even if the user explicitly refreshes the page. In Firefox, immutable can only be used in’<a href="https://&#39;transactions">https://&#39;transactions</a>. For more information, see<a href="http://bitsup.blogspot.de/2016/05/cache-control-immutable.html">这里</a>。</p>
</li>
</ul>
<h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><ul>
<li><p><code>no-transform</code></p>
<p>Resources must not be transformed or transformed. HTTP headers such as’Content-Encoding ‘,’ Content-Range ‘,’ Content-Type ‘cannot be modified by proxies. For example, non-transparent proxies or<a href="https://support.google.com/webmasters/answer/6211428?hl=en">Google’s Light Mode</a>It is possible to convert image formats to save cache space or reduce traffic on slow links. The’no-transform ‘directive does not allow this.</p>
</li>
<li><p><code>only-if-cached</code></p>
<p>Indicates that the Client only accepts cached responses and does not check with the origin server for updated copies.</p>
</li>
</ul>
<h3 id="Priority"><a href="#Priority" class="headerlink" title="Priority"></a>Priority</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cache-Control &gt; expires &gt; Etag &gt; Last-Modified</span><br></pre></td></tr></table></figure>
<h3 id="Three-level-cache-principle"><a href="#Three-level-cache-principle" class="headerlink" title="Three-level cache principle"></a>Three-level cache principle</h3><p>Finally, summarize the browser’s three-level caching principle:</p>
<ol>
<li>Go to the memory first to see, if there is, load it directly.</li>
<li>If the memory is not available, go to the hard disk to get it. If there is, load it directly.</li>
<li>If the hard disk is not available, then make a network request</li>
<li>Load resources into cache to hard disk and memory</li>
</ol>
<p>Reference article: <a href="https://segmentfault.com/a/1190000021661656">https://segmentfault.com/a/1190000021661656</a></p>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>How to Convert Canvas to SVG</title>
    <url>/en/posts/4708/</url>
    <content><![CDATA[<p>Before, I made a request for a relational graph. Because exporting png and other images will be distorted when enlarged, I hope to export them as vector graphs. However, the export graph function that comes with G6 cannot be exported as SVG in Canvas mode, and SVG mode has many features that are not supported, so I tried to find a way to export Canvas as SVG.</p>
<span id="more"></span>
<p>This code uses an old library called canvas-to-svg</p>
<p>This library simulates canvas and exposes some canvas apis, which can finally be exported as svg</p>
<p>It should be noted that some canvas APIs do not support, such as setTransform, resetTransform, etc. If you need to use these two APIs, you can split them into translate and rotate, etc</p>
<p>Directly upload the code:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CanvasToSVG</span> <span class="keyword">from</span> <span class="string">&#x27;canvas-to-svg&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTextWaterMaskToCanvas</span>(<span class="params"></span></span><br><span class="line"><span class="params">  context: CanvasRenderingContext2D,</span></span><br><span class="line"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  context.<span class="property">font</span> = <span class="string">&#x27;16px Microsoft YaHei&#x27;</span>;</span><br><span class="line">  context.<span class="property">fillStyle</span> = <span class="string">&#x27;#F2F3F5&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width, height &#125; = context.<span class="property">canvas</span>;</span><br><span class="line">  <span class="keyword">const</span> textMaskCountHorizontal = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, width / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> textMaskCountVertical = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, height / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> fwidth = width / textMaskCountHorizontal;</span><br><span class="line">  <span class="keyword">const</span> fheight = height / textMaskCountVertical;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> hh = <span class="number">0</span>; hh &lt; height; hh += fheight) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ww = <span class="number">0</span>; ww &lt; width; ww += fwidth) &#123;</span><br><span class="line">      context.<span class="title function_">translate</span>(ww, hh);</span><br><span class="line">      context.<span class="title function_">rotate</span>(-<span class="title class_">Math</span>.<span class="title function_">atan</span>(height / width));</span><br><span class="line">      context.<span class="title function_">fillText</span>(textWaterMask, -fwidth / <span class="number">2</span>, fheight / <span class="number">2</span>);</span><br><span class="line">      context.<span class="title function_">rotate</span>(<span class="title class_">Math</span>.<span class="title function_">atan</span>(height / width));</span><br><span class="line">      context.<span class="title function_">translate</span>(-ww, -hh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadFullImageWithWaterMaskCreator</span>(<span class="params"></span></span><br><span class="line"><span class="params">  graphInstance: IGraph | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    name?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">type</span>?: DataUrlType,</span></span><br><span class="line"><span class="params">    imageConfig?: &#123;</span></span><br><span class="line"><span class="params">      backgroundColor?: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="params">      padding?: <span class="built_in">number</span> | <span class="built_in">number</span>[];</span></span><br><span class="line"><span class="params">    &#125;,</span></span><br><span class="line"><span class="params">    callback?: (success: <span class="built_in">boolean</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    graphInstance?.<span class="title function_">toFullDataURL</span>(</span><br><span class="line">      <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        image.<span class="property">src</span> = res;</span><br><span class="line">        image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// const canvas = document.createElement(&#x27;canvas&#x27;);</span></span><br><span class="line">            <span class="comment">// canvas.width = image.width;</span></span><br><span class="line">            <span class="comment">// canvas.height = image.height;</span></span><br><span class="line">            <span class="comment">// const context = canvas.getContext(&#x27;2d&#x27;);</span></span><br><span class="line">            <span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">CanvasToSVG</span>(image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line">            <span class="keyword">if</span> (context &amp;&amp; name) &#123;</span><br><span class="line">              context.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line">              context.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>, image.<span class="property">width</span>, image.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">              <span class="title function_">addTextWaterMaskToCanvas</span>(context, textWaterMask);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// downloadCanvasImage(canvas, name, type);</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> svg = context.<span class="title function_">getSerializedSvg</span>(<span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">const</span> svgData = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Blob</span>([svg], &#123; <span class="attr">type</span>: <span class="string">&#x27;image/svg&#x27;</span> &#125;),</span><br><span class="line">              );</span><br><span class="line">              <span class="keyword">const</span> downloadLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">              downloadLink.<span class="property">download</span> = <span class="string">`<span class="subst">$&#123;name&#125;</span>.svg`</span>;</span><br><span class="line">              downloadLink.<span class="property">href</span> = svgData;</span><br><span class="line">              downloadLink.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">              callback?.(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            callback?.(<span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        image.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          callback?.(<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">type</span>,</span><br><span class="line">      imageConfig,</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>Front-end performance analysis tool</title>
    <url>/en/posts/a8b43915/</url>
    <content><![CDATA[<p>When we develop a Website, there may be many reasons for our page Caton, so we can use Google Devtools to quickly locate the main reasons for page Caton. This article summarizes the two main and most direct tools on the Chrome official doc.</p>
<span id="more"></span>
<h2 id="Leverage-the-Developer-Tools-Performance-tab"><a href="#Leverage-the-Developer-Tools-Performance-tab" class="headerlink" title="Leverage the Developer Tools Performance tab"></a>Leverage the Developer Tools Performance tab</h2><h3 id="Open-Developer-Tools"><a href="#Open-Developer-Tools" class="headerlink" title="Open Developer Tools"></a>Open Developer Tools</h3><p>Press Command + Option + I (Mac) or Control + Shift + I (Windows, Linux) to open DevTools.</p>
<h3 id="Record-actions-with-the-Performance-tab"><a href="#Record-actions-with-the-Performance-tab" class="headerlink" title="Record actions with the Performance tab"></a>Record actions with the Performance tab</h3><ol>
<li><p>Select the Performance tab</p>
</li>
<li><p>Click the dot in the upper left corner (Start Recording button).</p>
</li>
<li><p>Operate on the page</p>
</li>
<li>After the operation is completed, click the stop button</li>
</ol>
<h3 id="Analyze-recording-results"><a href="#Analyze-recording-results" class="headerlink" title="Analyze recording results"></a>Analyze recording results</h3><h4 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h4><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612008/Devtools/fps_ju7mvq.png" alt=""></p>
<p>The place circled by the red box above the figure shows the FPS change of the page during the recording process. When the FPS shows the green bar, it means that the page is relatively smooth, and the higher the green bar, the higher the FPS, and the better the User Experience.</p>
<p>However, when the FPS red bar appears, it means that the page has a more serious Caton, which may affect the user experience.</p>
<p>When you put the mouse over a certain point on the FPS, a snapshot of the page at that point will be displayed. (You need to check the screenshot option when recording here)</p>
<h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612007/Devtools/CPU_yv1izl.png" alt=""></p>
<p>Below the FPS chart is the CPU chart, and the colors in this chart correspond to the Summary tab below.</p>
<p>When the CPU chart in your recording results is not full of a lot of color, and the Summary below is mostly colored, you should analyze what occupies a lot of CPU and find ways to reduce this type of operation or optimize this type of operation.</p>
<p>For example, when rendering occupies a large proportion, you should find a way to reduce the dom element, because the process of rendering is actually the process of converting html statements into dom trees. If this process occupies a large amount of CPU, you should consider how to optimize your dom structure.</p>
<h4 id="FPS-instrument-panel"><a href="#FPS-instrument-panel" class="headerlink" title="FPS instrument panel"></a>FPS instrument panel</h4><ol>
<li>We can enter shortcut Command + Shift + P (Mac) or Control + Shift + P (Windows, Linux) in the developer tools to open the command menu.</li>
<li>Enter Show Render and select the corresponding command for Rendering.</li>
<li>A real-time FPS monitor will appear in the upper left corner of the page</li>
</ol>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612008/Devtools/fps2_fhp16u.png" alt=""></p>
<h2 id="Analyze-performance-with-the-Audits-tab"><a href="#Analyze-performance-with-the-Audits-tab" class="headerlink" title="Analyze performance with the Audits tab"></a>Analyze performance with the Audits tab</h2><h3 id="Run-audit"><a href="#Run-audit" class="headerlink" title="Run audit"></a>Run audit</h3><ol>
<li>Open the Audits tab</li>
<li>Click Run Audit and wait for 10-30 seconds before the audit results will appear (Tips: Note here that this feature needs to bypass the wall, otherwise it will be stuck in LightHouse is warming up, LightHouse is a component that this tab depends on)</li>
</ol>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612007/Devtools/Audits_tfnnf2.png" alt=""></p>
<h3 id="Analyze-operation-results"><a href="#Analyze-operation-results" class="headerlink" title="Analyze operation results"></a>Analyze operation results</h3><p>The running result is very long, we analyze it in blocks from top to bottom.</p>
<h4 id="Overview-module"><a href="#Overview-module" class="headerlink" title="Overview module"></a>Overview module</h4><p>This section summarizes the scores of several dimensions of this audit</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612007/Devtools/audits1_opabc0.png" alt=""></p>
<h4 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h4><ol>
<li>The number in the upper right corner is the overall rating for this metric. The higher the rating, the better the performance. When you optimize your website, the rating will go up</li>
<li>First Contentful Paint: The time to draw the content to the page for the first time, the shorter the time, the better</li>
<li>Time to Interactice: Mark the time when the page is ready to handle user interaction</li>
<li>We can hover the mouse over the mark on the right side of any indicator to view detailed information.</li>
</ol>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612007/Devtools/audits2_zyuvmj.png" alt=""></p>
<h4 id="Opportunities"><a href="#Opportunities" class="headerlink" title="Opportunities"></a>Opportunities</h4><p>This section provides suggestions on how to improve loading performance</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612008/Devtools/opportunity_xvzdpm.png" alt=""></p>
<h4 id="Diagnostics"><a href="#Diagnostics" class="headerlink" title="Diagnostics"></a>Diagnostics</h4><p>This section provides information about the factors that cause page loading problems. You can expand each item to view detailed information</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612008/Devtools/Diag_hqaivt.png" alt=""></p>
<h4 id="Passed"><a href="#Passed" class="headerlink" title="Passed"></a>Passed</h4><p>The section shows you which part of your website is done correctly</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566612008/Devtools/Passed_ijjuxq.png" alt=""></p>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>Comparison of ESModule and CommonJS and Precautions</title>
    <url>/en/posts/16555/</url>
    <content><![CDATA[<p>In ES6, we know that import and export replace require and module.exports to import and export modules, but if you don’t understand the characteristics of ES6 modules, the code may run with some unimaginable results. I will use this article. Uncover the features of the ES6 module mechanism for you.</p>
<p>I will not introduce the use of the two in detail. If you are interested, you can take a look at my previous blog:<a href="https://sunra.top/posts/d3bc7e1c/">JavaScript Module使用语法</a></p>
<p>This article mainly addresses the following issues:</p>
<ul>
<li>Do these two output a copy or a reference, and if you copy it, is it a deep copy or a shallow copy?</li>
<li>What is the difference between the loading and running times of the two?</li>
<li>How do they solve circular dependencies and repeated loading problems?</li>
<li>What are the differences between the operating environments of the two, when can they be mixed and why?</li>
</ul>
<span id="more"></span>
<h2 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h2><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>Let’s take a look at the following code and its running result.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  foo = <span class="number">2</span>;</span><br><span class="line">  bar.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">  bar</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">foo</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">bar</span>.<span class="property">a</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">foo</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">bar</span>.<span class="property">a</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//node a.js result</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>After a introduces b, this code modifies foo and bar inside b, and then prints foo and bar again. You can see that the value of foo has not changed, but bar has changed.</p>
<p>module.exports.foo is not a variable with the internal foo, module.exports.bar is a variable with the internal bar.</p>
<p>But does this mean that CommonJS is a copy or a reference?</p>
<blockquote>
<p>Here is a simple explanation, module.exports is exports at the beginning, that is, there is an exports variable, and then we assign module.exports to this exports, so exports.a</p>
<p>The difference is that we require module.exports, not exports, and if we directly modify the module.exports reference, the properties we mount on exports are completely useless.</p>
<p>For example:</p>
<p>exports.a</p>
<p>exports.b</p>
<p>module.exports</p>
<p>If there are only the first two lines, we will get it when we require it.</p>
</blockquote>
<p>Let me give you another example, let’s think about the result:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">foo</span> = <span class="number">2</span>;<span class="comment">//difference</span></span><br><span class="line">  bar.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">  bar</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">foo</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">bar</span>.<span class="property">a</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">foo</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">bar</span>.<span class="property">a</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//node a.js result</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span><span class="comment">//This is 2, why?</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>From the above example, we can see that the result of ** require is actually a reference to module.exports.</p>
<ul>
<li>Why is foo unchanged in the first example and changed in the second one? Because when generating module.exports, foo is a primitive type and is deeply copied to the module.exports.foo, we require module.exports.foo instead of foo inside the inner b.</li>
<li>Why is bar always changed, because when generating module.exports, bar is an object, and the address of bar is stored in the module.exports.bar, not a deep copy, so the module.exports.bar we require is the internal bar, and the two of them point to the same memory address</li>
</ul>
<blockquote>
<p>You can also understand it this way:</p>
<p>When we construct module.exports, we are actually a shallow copy, which copies the values to the properties in module.exports.</p>
<p>But when we require, we introduce a reference to module.exports.</p>
</blockquote>
<h3 id="ESModule"><a href="#ESModule" class="headerlink" title="ESModule"></a>ESModule</h3><blockquote>
<p>ESModule was introduced in ES6, so without babel, node cannot be recognized, so we use the browser to execute it.</p>
<p>But if you directly use HTML to import JS, there are two points to note:</p>
<p>1.<br>2.</p>
</blockquote>
<p>Old rules, look at the code</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  foo = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./b.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./b.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; foo &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//result</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>From this result, the ES6 module is dynamically associating the values in the module, that is, it looks like a reference to the</p>
<blockquote>
<p>The reason why I say it seems is because I haven’t seen the specific implementation yet, just from the appearance point of view, it is a quote</p>
</blockquote>
<h2 id="What-is-the-difference-between-the-loading-and-running-timing-of-the-two"><a href="#What-is-the-difference-between-the-loading-and-running-timing-of-the-two" class="headerlink" title="What is the difference between the loading and running timing of the two?"></a>What is the difference between the loading and running timing of the two?</h2><p>ES6 modules are executed at compile time, while CommonJS modules are always loaded at runtime, that is</p>
<p>CommonJS is only introduced when required.</p>
<p>Execution of an ES6 module during compile results in the following two characteristics:</p>
<ol>
<li>The import command will be statically analyzed by the JavaScript engine and executed before other content within the module.</li>
<li>The export command will have the effect of advancing variable declaration.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a.js&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;b.js execute first&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Execution result:</span></span><br><span class="line"><span class="comment">//b.js execute first</span></span><br><span class="line"><span class="comment">// a.js</span></span><br></pre></td></tr></table></figure>
<h2 id="Repeated-loading-problem"><a href="#Repeated-loading-problem" class="headerlink" title="Repeated loading problem"></a>Repeated loading problem</h2><h3 id="CommonJS-1"><a href="#CommonJS-1" class="headerlink" title="CommonJS"></a>CommonJS</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">foo</span> = <span class="number">2</span>;</span><br><span class="line">  bar.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">  bar</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">foo</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">bar</span>.<span class="property">a</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">foo</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">bar</span>.<span class="property">a</span>);</span><br><span class="line"></span><br><span class="line">  b.<span class="property">foo</span> = <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>).<span class="property">foo</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// node a.js</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>This example shows that each module will only be loaded once, and each time require returns the same reference.</p>
<h3 id="ESModule-1"><a href="#ESModule-1" class="headerlink" title="ESModule"></a>ESModule</h3><p>This is easy to understand. Regardless of ES6 module, when you repeatedly introduce the same module, the module will only execute once.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;will only be executed once&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Execution result:</span></span><br><span class="line"><span class="comment">//will only be executed once</span></span><br></pre></td></tr></table></figure>
<h2 id="Cyclic-dependency-problem"><a href="#Cyclic-dependency-problem" class="headerlink" title="Cyclic dependency problem"></a>Cyclic dependency problem</h2><p>Solve the problem of repeated references, then the problem of circular dependencies can be explained</p>
<h3 id="CommonJS-2"><a href="#CommonJS-2" class="headerlink" title="CommonJS"></a>CommonJS</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a starting&#x27;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in a, b.done =&#x27;</span>, b.<span class="property">done</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a done&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b starting&#x27;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in b, a.done =&#x27;</span>, a.<span class="property">done</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b done&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// node a.js</span></span><br><span class="line"><span class="comment">//Execution result:</span></span><br><span class="line"><span class="comment">// a starting</span></span><br><span class="line"><span class="comment">// b starting</span></span><br><span class="line"><span class="comment">// in b, a.done = false</span></span><br><span class="line"><span class="comment">// b done</span></span><br><span class="line"><span class="comment">// in a, b.done = true</span></span><br><span class="line"><span class="comment">// a done</span></span><br></pre></td></tr></table></figure>
<p>Combined with the previous characteristics, it is easy to understand. When you want to introduce a module from b, because node has loaded a module before, it will not repeat the execution of a module, but directly generate the current a module. The module.exports object spit out, because a module introduces b module before reassigning done, the value done in the module.exports output from the current a module is still false. When the done value of the b module is output from the a module, the b module has been executed, so the done value in the b module is true.</p>
<p>From the above execution process, we can see that in the CommonJS specification, when encountering a require () statement, the code in the require module will be executed and the result of execution will be cached. It will not be executed repeatedly the next time it is loaded again, but directly take the cached result. Because of this, there will be no infinite loop call when there is a circular dependency. Although this module loading mechanism can avoid the situation that the circular dependency times are wrong, a little carelessness is likely to make the code not execute as we imagined. Therefore, careful planning is still required when writing code to ensure that the dependencies of loop modules work correctly.</p>
<h3 id="ESModule-2"><a href="#ESModule-2" class="headerlink" title="ESModule"></a>ESModule</h3><p>Like CommonJS modules, ES6 will no longer execute repeatedly loaded modules, and due to the characteristics of ES6 dynamic output binding, it can ensure that ES6 can obtain the current latest values of other modules at any time.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a starting&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in b, foo:&#x27;</span>, foo);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a done&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b starting&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in a, bar:&#x27;</span>, bar);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in a, setTimeout bar:&#x27;</span>, bar);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b done&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel-node a.js</span></span><br><span class="line"><span class="comment">//Execution result:</span></span><br><span class="line"><span class="comment">// b starting</span></span><br><span class="line"><span class="comment">// in a, bar: undefined</span></span><br><span class="line"><span class="comment">// b done</span></span><br><span class="line"><span class="comment">// a starting</span></span><br><span class="line"><span class="comment">// in b, foo: foo</span></span><br><span class="line"><span class="comment">// a done</span></span><br><span class="line"><span class="comment">// in a, setTimeout bar: 2</span></span><br></pre></td></tr></table></figure>
<h3 id="Dynamic"><a href="#Dynamic" class="headerlink" title="** Dynamic"></a>** Dynamic</h3><p>The ES6 module will be statically analyzed during compile, which takes precedence over other content within the module, so we cannot write code like the following:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(some condition) &#123;</span><br><span class="line">  <span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or </span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> (str + <span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>Because of static analysis during compile, we cannot use conditional statements or concatenate string modules, because these are results that need to be determined at runtime. ES6 modules are not allowed, so the dynamic introduction of import () came into being.</p>
<p>Import () allows you to dynamically import ES6 modules at runtime. You may also think of the syntax requirement.ensure, but their purposes are very different.</p>
<p>The emergence of requirem.ensure is a product of webpack. It is because the browser needs an asynchronous mechanism that can be used to load modules asynchronously, thereby reducing the size of the initial loaded file, so requirem.ensure is useless at the server level. Because there is no asynchronous loading of modules at the server level, the modules can be loaded synchronously to meet the usage scenarios. CommonJS modules can confirm module loading at runtime.</p>
<ul>
<li>and import () is different, it is mainly to solve the ES6 module can not determine the reference relationship of the module at runtime, so it is necessary to introduce import ()</li>
</ul>
<p>Let’s first look at its usage:</p>
<ol>
<li>Dynamic import () provides a Promise-based API</li>
<li>Dynamic import () can be used anywhere in the script</li>
<li>import () accepts string literals, you can construct specifiers according to your needs</li>
</ol>
<p>Here’s a simple usage example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./b&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;foo&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span>(str).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;foo&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel-node a.js</span></span><br><span class="line"><span class="comment">//Execution result</span></span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// foo</span></span><br></pre></td></tr></table></figure>
<p>Of course, if the use of import () on the browser side will become more extensive, such as asynchronous loading of modules on demand, then it is similar to the requirement.ensure function.</p>
<h2 id="Under-what-circumstances-can-the-two-be-mixed"><a href="#Under-what-circumstances-can-the-two-be-mixed" class="headerlink" title="Under what circumstances can the two be mixed?"></a>Under what circumstances can the two be mixed?</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Node.js requires ES6 modules to use the .mjs suffix file name. That is, as long as the’import ‘or’export’ command is used in the script file, the ‘.mjs’ suffix must be used. Node.js encounters a ‘.mjs’ file and considers it an ES6 module. Strict mode is enabled by default. It is not necessary to specify ‘“use strict”‘ at the top of each module file.</p>
<p>If you do not want to change the suffix to ‘.mjs’, you can specify the’type ‘field as’module’ in the’package.json ‘file of the project.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;type&quot;</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Once set, the JS scripts in this directory are interpreted using ES6 modules.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>If you still want to use the CommonJS module at this time, you need to change the suffix of the CommonJS script to ‘.cjs’. If there is no’type ‘field, or if the’type’ field is’commonjs’, the ‘.js’ script will be interpreted as a CommonJS module.</p>
<p>Summarized in one sentence: ‘.mjs’ files are always loaded as ES6 modules, ‘.cjs’ files are always loaded as CommonJS modules, and the loading of ‘.js’ files depends on the setting of the’type ‘field in’package.json’.</p>
<p>Note that the ES6 module and CommonJS module should not be mixed as much as possible. The require command cannot load the .mjs file and will report an error. Only the import command can load the .mjs file. Conversely, the require command cannot be used in the .mjs file, and the import command must be used.</p>
<h3 id="CommonJS-3"><a href="#CommonJS-3" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>CommonJS ‘require () ‘ command cannot load ES6 modules and will report an error. You can only use the’import () ‘method to load.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span></span><br><span class="line"><span class="keyword">await</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</blockquote>
<p>The above code can be run in the CommonJS module.</p>
<p>One reason’require () ‘does not support ES6 modules is that it is loaded synchronously, and ES6 modules can use the top-level’await’ command internally, which cannot be loaded synchronously.</p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>The’import ‘command of the ES6 module can load CommonJS modules, but only as a whole, not just a single output item.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>This is because ES6 modules need to support static code analysis, while the output interface of CommonJS modules is module.exports, which is an object that cannot be statically analyzed, so it can only be loaded as a whole.</p>
<p>Loading a single output item can be written as follows.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span></span><br><span class="line"><span class="keyword">const</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Supports-modules-in-two-formats-at-the-same-time"><a href="#Supports-modules-in-two-formats-at-the-same-time" class="headerlink" title="Supports modules in two formats at the same time"></a>Supports modules in two formats at the same time</h3><p>It is also easy for a module to support both CommonJS and ES6 formats.</p>
<p>If the original module is in ES6 format, then you need to give an overall output interface, such as’export default obj ‘, so that CommonJS can be loaded with’import () ‘.</p>
<p>If the original module is in CommonJS format, a wrapper layer can be added.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span></span><br><span class="line"><span class="keyword">export</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>The above code first inputs the CommonJS module as a whole, and then outputs the named interface as needed.</p>
<p>You can change the suffix of this file to ‘.mjs’, or put it in a subdirectory, and then put a separate’package.json ‘file in this subdirectory, specifying’ {type: “module”} ‘.</p>
<p>Another approach is to specify the respective load entry points for the two format modules in the exports field of the package.json file.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;exports&quot;</span>：&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>The above code specifies’require () ‘and’import’. Loading this module will automatically switch to a different entry file.</p>
<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>Webpack itself can support its own way to ‘<em> </em> webpack <em> exports <strong><code>，</code></strong> webpack </em> require <em> </em>‘ to replace CommonJS, ESModule, etc.</p>
<p>Babel converts ES6 import and export into CommonJS, which means that the converted code does not have import and export.</p>
<p>We will open another blog to analyze the specific source code, and there is already a lot of content at present.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Comparison of Several Basic Data Structures</title>
    <url>/en/posts/803d8247/</url>
    <content><![CDATA[<p>** For a computer, it only knows how to use memory addresses to access variables in memory. We have artificially separated two storage forms, one is continuous storage (that is, arrays), and the other is chained storage (linked lists). As for other data structures, they are actually the use of these two storage forms. Any data structure can be implemented in two storage forms, only the question of whether it is suitable or not, and there is no question of whether it is possible or not, because in the end, the memory address is used to access the memory. Queue, stack we usually use arrays to achieve, but can also use linked lists, such as trees we use linked lists in most cases, but in fact, like a complete binary tree array to achieve no problem.</p>
<p>This blog is mainly to analyze what features of data structures we need in these cases through some examples. In order to better meet these features, we need to use arrays or linked lists to implement. ** For all the content, I will not go into detail, let alone the specific implementation, because they are very basic, but if we really want to develop it, it will become a long talk. We mainly look at them from a higher level. some features.</p>
<span id="more"></span>
<h2 id="What-is-Data-Structure"><a href="#What-is-Data-Structure" class="headerlink" title="What is Data Structure?"></a>What is Data Structure?</h2><p>I personally believe that data structures can be divided into two parts.</p>
<p>One is the storage structure of data, that is, sequential storage or chain storage.</p>
<p>One is the logical structure of data, the special relationship between a set of data of the same type, and a series of special additions, deletions, and changes defined to maintain this relationship.</p>
<h2 id="How-to-choose-to-design-a-data-structure"><a href="#How-to-choose-to-design-a-data-structure" class="headerlink" title="How to choose to design a data structure"></a>How to choose to design a data structure</h2><p>Different data structures are suitable for different scenarios. The continuity of arrays allows us to efficiently access randomly, but insertion and deletion are time-consuming and troublesome to expand. Although linked lists cannot be efficiently accessed randomly, insertion and deletion are very simple. There is no such thing as expansion. When we design data structures, we repeatedly use these two points to make a fuss.</p>
<p>For example, zipped hash tables use hash functions to quickly obtain array subscripts, and then use linked lists to achieve quick insertion and deletion.</p>
<p>For example, using the heap (a complete binary tree) to simplify the O (n) of the linked list search to O (logn) and so on.</p>
<p>Our usual thinking process for choosing a data structure should be like this:</p>
<ul>
<li>What kind of algorithm do we need to choose in this scenario? For example, anti-Poland requires first-in and then-out</li>
</ul>
<ul>
<li>What characteristics of the data structure does this algorithm need? If you only need to push and exit the stack, then choose the stack.</li>
</ul>
<ul>
<li>According to our specific needs, whether we need frequent expansion and contraction, whether we have high requirements on access time, etc. <strong> Choose the appropriate storage method for data structure </strong>.</li>
</ul>
<p>In fact, this process is the opposite of the process of data structure generation.</p>
<p><strong> Whether it is an array or a linked list, for the computer, the memory address is used to access the data in the memory </strong>, but the memory address of the array is continuous, so we can directly calculate the first address plus the offset The memory address of the data to be accessed, while the memory address of the linked list is discontinuous, each node in the linked list needs to record the memory address of the next node, rather than calculating the offset.</p>
<p>Therefore, array or linked list is actually a different form of utilization of computer storage space.</p>
<p>And <strong> different data structures can be said that we give some special relationships between these same types of data, these relationships can help our algorithm execute more efficiently, so special insertion and deletion methods are needed to maintain this relationship </strong>. For example, an array that can only be FIFO is called a queue, and the left sub-node must be less than the parent node, and the right child node is greater than the parent node, we call it a binary search tree.</p>
<h2 id="Arrays-and-linked-lists"><a href="#Arrays-and-linked-lists" class="headerlink" title="Arrays and linked lists"></a>Arrays and linked lists</h2><p>Arrays and linked lists are not only two ways to store data in computer memory, but also the most basic data structures used for the most basic data storage.</p>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>The characteristic of the queue is first-in, first-out (FIFO). Its operation is to enter and leave the queue. Entering the queue is to add an item at the end of the queue, and leaving the queue is to pop up an item from the head of the queue.</p>
<p>For example, EventLoop in our JavaScript or nextTick in Vue are all in this form.</p>
<p>After each event is triggered, the callback function is put into a queue, and then the loop is continuously traversed from the beginning of the queue, and the callback function is taken out from the head to execute.</p>
<p>When we need to apply the first-in-first-out feature, we can use the data structure of queues.</p>
<p>The implementation of queues, using arrays and linked lists, is no problem. Normally, its insertion and deletion only require O (1).</p>
<p>However, if the array is used to achieve, due to the characteristics of the continuous memory of the array, we must specify the size of the array in advance, and then apply for a continuous memory, so if the length of the queue needs to exceed the initial queue length, then there is an expansion problem, we need to apply for a larger piece of memory, then copy the data, and then go back to release this piece of memory, this time the time complexity of insertion will become O (n).</p>
<p>If a linked list is used, there will be no expansion problem, because its memory is discontinuous, and we can apply for memory for the enlisted data separately when enqueuing. But because its memory is discontinuous, there is no way to calculate the address of each node by adding the first address and offset, so we need extra space to record the address of each node, that is, each node has to record the address of the next node.</p>
<p>So whether to use an array or a linked list depends on the specific needs. If the queue length is fixed or does not change much, it is better to use an array, because the continuous Memory Space is more friendly for caching, but if the queue length will continue to change, the data that needs to be stored It also requires much more space than a pointer. In fact, a linked list is better.</p>
<p>For other content about the queue, you can go to my other article<a href="https://sunra.top/posts/8a7b9568/">关于队列的文章</a></p>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>The characteristic of the stack is that it is first in and then out. Its operation is to enter and exit the stack. Entering the stack can also be called pushing the stack, which is to push an item from the stack top, and leaving the stack is to pop an item from the stack top, that is, entering the stack and leaving the stack. The stack is from the same head.</p>
<p>For example, the one above leetcode<a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">逆波兰表达式求值</a>Its solution idea is the application of a very classic stack.</p>
<p>Similarly, the implementation of the stack can also be implemented with arrays or linked lists.</p>
<p>There is no more analysis about the stack. In fact, it is similar to the queue.</p>
<h2 id="Jump-table"><a href="#Jump-table" class="headerlink" title="Jump table"></a>Jump table</h2><p>We also said above that the problem with chaining is that the time complexity for random access is O (n).</p>
<p>Even if the data in the linked list is already sorted from small to large, it is impossible to use dichotomy to find the required data in O (logn) time complexity like arrays.</p>
<p>In response to this problem, the classic space-for-time in the computer field has come. We can extract the first node up every k nodes to form a new linked list, and save a new pointer pointing to the original node in the extracted node.</p>
<p>In this way, we extract layer by layer until there is only one node left in a certain layer.</p>
<p>This time we go to find a data, you can first compare from the top, if greater than the current node value, put the pointer down one layer, and then compare back to find the last node is less than it, and then sink, until the last layer.</p>
<p>In this way, the time complexity of the search will drop to the logarithm of n with base k.</p>
<p>We often say that the Redis database uses jump tables.</p>
<h2 id="Hash-table"><a href="#Hash-table" class="headerlink" title="Hash table"></a>Hash table</h2><p>About the introduction of hash tables, you can take a look at my article first.<a href="https://sunra.top/posts/9f1a9cb/">关于散列表的文章</a></p>
<p>After reading, we can probably summarize that the hash table can be just an array. The most important feature it utilizes is that the array can perform random access in O (1) time complexity according to the subscript, and calculate the data through the hash function. The subscript position of storage, but due to the pigeon cage principle (n + 1 pigeons are placed in n cages, there must be more than one pigeon in a cage), even if your hash function is well designed, hash conflicts are inevitable.</p>
<p>Then we have to find a way to solve the hash conflict, one is open addressing method, find another vacancy in the hash table through other methods, and the other is to use the characteristics of the linked list, use the zipper method, each item in the hash table is actually It is the head node of a linked list, and every time data is inserted in the linked list.</p>
<p>The zipper method combines the characteristics of arrays and linked lists well. First, the hash function is used to calculate the hash table subscript that the data should exist, and the advantage of random access in the array is used to quickly find the linked list that should exist, and then find or insert it in the linked list. As long as our hash function is well designed, the average length of this zipper will not be too long, and the time complexity can also be considered O (1).</p>
<h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><p>So far, we may feel that the hash table has been able to support our needs very well. Why do we still need trees?</p>
<p>Here we will talk about a few limitations of hash tables:</p>
<ul>
<li>The data in the hash is unordered, which means that if we want to find a specific value, the hash works well, but if we want to find all the data in a range, the hash table will not work</li>
<li>The hash function is difficult to design, so the performance of the hash table is very unstable, and if it involves expansion and contraction, it is more troublesome.</li>
<li>In order to avoid hash conflicts as much as possible, the load factor cannot be too large, so there will be some wasted space.</li>
</ul>
<h3 id="Binary-search-tree"><a href="#Binary-search-tree" class="headerlink" title="Binary search tree"></a>Binary search tree</h3><p>For the first limitation just mentioned, we can use binary search tree (BST) to achieve</p>
<p>Binary Search Tree is born to achieve fast search. However, it not only supports fast search of a data, but also supports fast insertion and deletion of a data. How does it do this? These all depend on the special structure of Binary Search Tree. Binary Search Tree requires that any node in the tree, the value of each node in its left subtree is less than the value of this node, while the value of the right subtree node is greater than the value of this node.</p>
<p>In addition to insert, delete, and find operations, Binary Search Tree also supports fast search for the largest and smallest nodes, precursor nodes, and successor nodes. I won’t show these operations one by one. I will put the corresponding code on GitHub, you can implement it yourself first, and then go to it to see. In addition to supporting the above operations, Binary Search Tree has an important feature, which is to traverse the Binary Search Tree in order, which can output an ordered data series with O (n) time complexity, which is very efficient. Therefore, Binary Search Tree is also called binary sorted tree.</p>
<h3 id="Balanced-binary-search-tree"><a href="#Balanced-binary-search-tree" class="headerlink" title="Balanced binary search tree"></a>Balanced binary search tree</h3><p>The binary search tree mentioned above also looks good, but there are still problems. Suppose we have 1-9 nine trees, it is very likely that through a series of insert and delete operations, it will become a left sub-node from the root node to 0, then at this time the binary search tree will become a linked list, and the efficiency will be drastically degraded to O (n).</p>
<p>So we need to try to ensure that the height difference between the left and right subtrees is not too large, which leads to a balanced binary tree: the height difference between the left and right subtrees of any node in the binary tree cannot be greater than 1.</p>
<p>If our BST is still a balanced binary tree, it can solve the above problem very well.</p>
<p>Of course, what we may use in practice is <strong> Red-Black Tree </strong>, an approximately balanced binary tree.</p>
<h3 id="Heap-complete-binary-tree"><a href="#Heap-complete-binary-tree" class="headerlink" title="Heap (complete binary tree)"></a>Heap (complete binary tree)</h3><p>A heap is a special kind of tree. Let’s take a look now, what kind of tree is a heap.</p>
<p>I listed two requirements, as long as these two points are met, it is a heap.</p>
<ul>
<li><p>The heap is a complete binary tree;</p>
</li>
<li><p>The value of each node in the heap must be greater than or equal to (or less than or equal to) the value of each node in its child tree.</p>
</li>
</ul>
<p>The first point is that the heap must be a complete binary tree. Remember the definition of a complete binary tree we talked about before? A complete binary tree requires that, except for the last layer, the number of nodes in all layers is full, and the nodes in the last layer are aligned to the left.</p>
<p>Second, each node in the heap must have a value greater than or equal to (or less than or equal to) the value of each node in its subtree. In fact, we can also put it another way, the value of each node in the heap is greater than or equal to (or less than or equal to) the values of its left and right sub-nodes. These two statements are equivalent.</p>
<p>For the heap where the value of each node is greater than or equal to the value of each node in the subtree, we call it “big top heap”. For the heap where the value of each node is less than or equal to the value of each node in the subtree, we call it “small top heap”.</p>
<p>For heap applications, it is very common to recommend keywords for TopK.</p>
<p>For this requirement, we can maintain a small top heap with a node number of K, and then traverse the number of keyword occurrences in turn. If the number of occurrences is less than the root node, it will continue, and if it is greater than the heap operation.</p>
<h2 id="Figure"><a href="#Figure" class="headerlink" title="Figure"></a>Figure</h2><p>Since a new data structure has emerged, there must be some problems that the above data structure cannot support well.</p>
<p>As another nonlinear data structure besides trees, the relationships that can be expressed in graphs are intersecting, and the relationships between nodes are not necessarily parent-child relationships.</p>
<p>For example, in our social network, everyone is a node. If there is a relationship between the two, they will be connected. This relationship cannot be expressed by trees.</p>
<p>Of course, the storage of the graph can also use arrays or linked lists. For arrays, we can use adjacency matrices, and for linked lists, we can use adjacency lists</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Cookies and the Same Site</title>
    <url>/en/posts/586529c7/</url>
    <content><![CDATA[<p>Recently, when reviewing the configuration of cookies, I found a new configuration called sameSite.</p>
<p>The Chinese translation of this sameSite is same site.</p>
<p>Let’s take a look today at what this same site is, what is the difference between it and the same origin, and why cookies clearly have domain and path to specify the scope and need the sameSite attribute.</p>
<span id="more"></span>
<h2 id="Same-origin-and-same-station"><a href="#Same-origin-and-same-station" class="headerlink" title="Same origin and same station"></a>Same origin and same station</h2><ul>
<li>Same origin: Protocol (scheme) + hostname (hostname) + Port Number (port) are exactly the same.</li>
<li>Same site: ‘eTLD + 1’ is exactly the same.</li>
</ul>
<p>TLD means top-level domain name, such as .com, .org, .cn, etc. However, top-level domain names are not static and will increase over time.</p>
<p>‘TLD + 1 ‘represents a combination of a Top-Level Domain name and the second-level domain name preceding it, for example, the URL is:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.example.com:443/foo</span><br></pre></td></tr></table></figure>
<p>So:</p>
<ul>
<li>‘TLD’ is’ .com ‘</li>
<li><code>TLD+1</code> 是 <code>example.com</code></li>
</ul>
<p>However, this representation is flawed, for example for the following URL:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.example.com.cn</span><br></pre></td></tr></table></figure>
<p>If according to the above rules, its’ TLD + 1 ‘is’ com.cn ‘, which does not represent this site. What really represents this site should be’ example.com.cn ‘, so the concept of’eTLD’ is derived, that is, <strong> effective top-level domain name </strong>:</p>
<ul>
<li>‘eTLD’:’ com.cn ‘</li>
<li><code>eTLD+1</code>：<code>example.com.cn</code></li>
</ul>
<blockquote>
<p>注意，同源与跨域同级的概念 </p>
<p>同站与跨站是相同的概念，比如著名的XSS和CSRF，都是跨站攻击 </p>
</blockquote>
<h2 id="Scope-of-cookies"><a href="#Scope-of-cookies" class="headerlink" title="Scope of cookies"></a>Scope of cookies</h2><p><strong> Cookies have two important attributes: Domain and Path, which indicate the scope of this cookie: </strong></p>
<p>　 Domain tells the browser the domain name ownership of the current cookie to be added. If it is not clearly specified, it defaults to the current domain name. For example, the domain name of the cookie added by visiting www.baidu.com defaults to www.baidu.com, and the domain name of the cookie generated by visiting [www.baidu.com is www.baidu.com</p>
<p>　　Path tells the browser the path attribution of the current cookie to be added, and defaults to the current path if not explicitly specified, such as by visiting <a href="https://link.zhihu.com/?target=http%3A//www.baidu.com/java/hotspot.html">www.baidu.com/java/hotspot.html</a> The default path for added cookies is/java/, via <a href="https://link.zhihu.com/?target=http%3A//www.baidu.com/java/hotspot.html">www.baidu.com/java/hotspot.html</a> The path of the generated cookie is also /java/</p>
<p><strong> The cookies submitted by the browser need to meet the following two points: </strong></p>
<ul>
<li><p>Cookies under the current domain name or parent domain name;</p>
</li>
<li><p>Cookies under current path or parent path</p>
</li>
</ul>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>After understanding the scope of the same site and cookie, let’s take a look at the attack method of CSRF.</p>
<p>Cookies are a solution we use to deal with HTTP statelessness. They achieve the purpose of making HTTP requests carry state by storing some user information in the browser and automatically carrying cookies in subsequent requests.</p>
<p>Cookies are often used to store user identity information. Malicious websites can manage to forge HTTP requests with the correct cookies. This is called a CSRF attack.</p>
<p>For example, when a user logs into the your-bank.com, the bank server sends a cookie.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-Cookie:<span class="built_in">id</span>=afasdfafa;</span><br></pre></td></tr></table></figure>
<p>The user later visited the malicious website evil.com, which had a form on it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;your-bank.com/transfer&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Once the user is tricked into sending this form, <strong> since the target of the request is the bank, the content of the cookie in the bank’s domain and path will be automatically carried </strong>, and the bank website will receive the request with the correct cookie. In order to prevent this attack, the form generally has a random token to tell the server that this is a real request.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;your-bank.com/transfer&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dad3weg34&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This type of cookie guided by a third-party website is called a third-party cookie. In addition to being used for CSRF attacks, it can also be used for user tracking.</p>
<p>For example, Facebook inserts an invisible image on a third-party website.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;facebook.com&quot;</span> <span class="attr">style</span>=<span class="string">&quot;visibility:hidden;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When the browser loads the above code, it will send a request to Facebook with cookies, so that Facebook will know who you are and what websites you have visited.</p>
<h2 id="SameSite-Properties"><a href="#SameSite-Properties" class="headerlink" title="SameSite Properties"></a>SameSite Properties</h2><p>Starting Chrome 51, browser cookies have added a SameSite property to prevent CSRF attacks and user tracking.</p>
<p>But since cookies already have domain and path, why do you need a sameSite?</p>
<p><strong> Actually, it’s because sameSite restricts the scope of cookies. The scope restricts what cookies can be obtained when I want to carry cookies in a request. This is called scope, and sameSite restricts whether I allow it to carry cookies if I send a request from my page. </strong></p>
<p>For example, my own blog page has a link to Taobao, whether this link is posted by myself or injected by XSS, anyway there is such a link, if I click on this link in my blog, Since my blog and Taobao are different stations, the restrictions of sameSite will not allow this request to carry cookies at all. If there is no restriction of sameSite, it will further go to see what cookies are allowed according to the scope.</p>
<p>The’SameSite ‘attribute of cookies is used to restrict third-party cookies, thereby reducing security risks.</p>
<p>It can set three values.</p>
<ul>
<li>Strict</li>
<li>Lax</li>
<li>None</li>
</ul>
<h3 id="Strict"><a href="#Strict" class="headerlink" title="Strict"></a>Strict</h3><p>‘Strict ‘is the strictest, completely prohibits third-party cookies, and will not send cookies under any circumstances when crossing sites. In other words, <strong> Cookies will only be brought if the URL of the current webpage matches the request target </strong>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-Cookie: CookieName=CookieValue; SameSite=Strict;</span><br></pre></td></tr></table></figure>
<p>This rule is too strict and may result in a very bad User Experience. For example, if the current webpage has a GitHub link, the user will not have GitHub cookies when clicking the jump, and the jump is always not logged in.</p>
<h3 id="Lax"><a href="#Lax" class="headerlink" title="Lax"></a>Lax</h3><p>Lax rules are slightly relaxed, and in most cases third-party cookies are not sent, except for Get requests that navigate to the target URL.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: CookieName=CookieValue; SameSite=Lax;</span><br></pre></td></tr></table></figure>
<p>The GET request for navigating to the target URL only includes three cases: link, preload request, and GET form. See the table below for details.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Request Type</th>
<th style="text-align:center">Examples</th>
<th style="text-align:right">Normal</th>
<th style="text-align:left">Lax</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Links</td>
<td style="text-align:center">‘&lt; a href = “…” &gt;&lt;/a&gt;’</td>
<td style="text-align:right">Send Cookies</td>
<td style="text-align:left">Send Cookies</td>
</tr>
<tr>
<td style="text-align:left">preload</td>
<td style="text-align:center">‘&lt; link rel = “prerender” href = “…”/&gt;’</td>
<td style="text-align:right">send cookies</td>
<td style="text-align:left">send cookies</td>
</tr>
<tr>
<td style="text-align:left">GET form</td>
<td style="text-align:center">‘&lt; form method = “GET” action = “…” &gt;’</td>
<td style="text-align:right">Send Cookies</td>
<td style="text-align:left">Send Cookies</td>
</tr>
<tr>
<td style="text-align:left">POST form</td>
<td style="text-align:center">‘&lt; form method = “POST” action = “…” &gt;’</td>
<td style="text-align:right">send cookies</td>
<td style="text-align:left">do not send</td>
</tr>
<tr>
<td style="text-align:left">iframe</td>
<td style="text-align:center">‘&lt; iframe src = “…” &gt; &lt;/iframe &gt;’</td>
<td style="text-align:right">Send Cookies</td>
<td style="text-align:left">Do Not Send</td>
</tr>
<tr>
<td style="text-align:left">AJAX</td>
<td style="text-align:center">‘$.get (“…”) ‘</td>
<td style="text-align:right">Send Cookies</td>
<td style="text-align:left">Do Not Send</td>
</tr>
<tr>
<td style="text-align:left">Image</td>
<td style="text-align:center">‘&lt; img src = “…” &gt;’</td>
<td style="text-align:right">Send cookies</td>
<td style="text-align:left">Do not send</td>
</tr>
</tbody>
</table>
</div>
<p>After setting’Strict ‘or’Lax’, CSRF attacks are basically eliminated. Of course, the premise is that the user’s browser supports the SameSite attribute.</p>
<h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><p>Chrome plan to make’Lax ‘the default setting. At this time, websites can choose to explicitly turn off the’SameSite’ attribute and set it to’None ‘. However, the premise is that the’Secure’ attribute must also be set (cookies can only be sent over the HTTPS protocol), otherwise it will be invalid.</p>
<p>The following settings are invalid.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-Cookie: widget_session=abc123; SameSite=None</span><br></pre></td></tr></table></figure>
<p>The following settings are valid.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-Cookie: widget_session=abc123; SameSite=None; Secure</span><br></pre></td></tr></table></figure>
<p>Reference link:</p>
<p><a href="https://juejin.cn/post/6877496781505200142">https://juejin.cn/post/6877496781505200142</a></p>
<p><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html">https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html</a></p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>BFC and Box Model for CSS</title>
    <url>/en/posts/41258/</url>
    <content><![CDATA[<p>CSS has been used for a long time, but some of the usage is always vague, and there is no systematic and logical understanding. This time, let’s first clarify the BFC and box model in CSS, as well as some related positioning and layout properties.</p>
<span id="more"></span>
<h2 id="How-are-elements-laid-out-by-default"><a href="#How-are-elements-laid-out-by-default" class="headerlink" title="How are elements laid out by default?"></a>How are elements laid out by default?</h2><p>First, take the content of the element and place it in a separate element box, then add padding, borders, and margins around it - the box model we saw earlier.</p>
<p>By default, the content width of a block-level element is 100% of its parent element, and its height is the same as its content height. The height and width of the internal connection element is the same as the content. You cannot set the height and width of the internal connection element —- they are just placed in the content of the block-level element. If you want to control the size of the internal connection element, you need to set display: block; for the element (alternatively, display: inline-block; inline-block mixes the properties of inline and block.)</p>
<p>This explains the layout of individual elements, but how do elements affect each other? Normal layout flow (mentioned in the introduction to layout) is a system for placing and organizing elements within the browser viewport. By default, block-level elements are placed in <em> block flow direction </em> based on the writing order of their parent elements (default: horizontal-tb) —- each block-level element will have another line below the previous element, they will be separated by a set margin. In English, or other horizontal, top-down modes, block-level elements are organized vertically.</p>
<p>Internal connection elements behave differently - they don’t start on another line; they are arranged on the same line as other internal connection elements, adjacent text content (or wrapped) as long as there is enough space within the width of their parent block-level element. If there is not enough space, overflowing text or elements will move to a new line.</p>
<p>If two adjacent elements have margins set and the two margins overlap, the larger setting is preserved and the smaller one disappears - this is called margin overlay, and we’ve seen it before.</p>
<h2 id="What-is-BFC"><a href="#What-is-BFC" class="headerlink" title="What is BFC?"></a>What is BFC?</h2><p>Block Formatting Context (BFC) is part of the visual CSS rendering of a web page, the area where the layout process of block-level boxes takes place, and the area where floating elements interact with other elements.</p>
<p>The following methods will create a block formatting context:</p>
<ul>
<li>root element (&lt; html &gt;)</li>
<li>Floating element (float value is not none)<br>Absolutely positioned elements (position value is absolute or fixed)</li>
<li>Inline block element (display value is inline-block)</li>
<li>Table cells (display value is table-cell, default value for HTML table cells)</li>
<li>Table title (display value is table-caption, default value for HTML table title)</li>
<li>Anonymous table cell elements (display values are table, table-row, table-row-group, table-header-group, table-footer-group (default values for HTML table, tr, tbody, thead, tfoot, respectively) or inline-table)</li>
<li>block element with overflow value not visible, clip</li>
<li>display elements with flow-root value<br>Elements containing values of layout, content or paint<br>Elastic elements (immediate children of a flex or inline-flex element with a display value) if they are not themselves flex, grid, or table containers<br>Grid elements (immediate children of a display value grid or inline-grid element) if they are not themselves flex, grid, or table containers</li>
<li>Multi-column containers (column-count or column-width (en-US) values are not auto, including column-count is 1)<br>An element with a column-span value of all always creates a new BFC, even if the element is not wrapped in a multi-column container (specification changes, Chrome bugs)</li>
</ul>
<p>The formatting context affects the layout. Usually, instead of changing the layout, we will create a new BFC for positioning and clearing floats, because it will:</p>
<ul>
<li>Includes internal float</li>
<li>Exclude external float</li>
<li>Block, margins overlap</li>
</ul>
<h3 id="Contains-internal-float"><a href="#Contains-internal-float" class="headerlink" title="Contains internal float"></a>Contains internal float</h3><p>Make the floating content equal to the surrounding content. That is, the display of the inner floating element will not exceed the BFC.</p>
<p>To better understand BFC, let’s take a look at the following.</p>
<p>In the example below, we float the &lt; div &gt; element and give it a border effect. The content in &lt; div &gt; is now floating around the floating element. Since the floating element is taller than the element next to it, the border of &lt; div &gt; is pierced through the float. As we explained in In Flow and Out of Flow, floats are separated from the doc flow, so the background and border of &lt; div &gt; only contain the content, not the float.</p>
<p>Use’overflow: auto ‘</p>
<p>When creating a BFC containing floating elements, it is common practice to set the parent element to overflow: auto or other values other than the default overflow: visible. ‘&lt; div &gt;’ elements become mini-layouts in layouts, and any child elements are included.</p>
<p>Use overflow to create a new BFC because the overflow attribute tells the browser how to handle overflow content. If you use it just to create a BFC, you may encounter unwanted scrollbars or shadows, which need to be noted. Also, for subsequent developers, it may not be clear why overflow was used at the time, so it’s best to add some comments to explain why.</p>
<p>Use’display: flow-root’</p>
<p>The value of a new display property that can create a BFC without side effects. Use’display: flow-root ‘in the parent block to create a new BFC.</p>
<p>After setting the display: flow-root attribute to the &lt; div &gt; element, all content in the &lt; div &gt; element will participate in BFC, and floating content will not overflow from the bottom.</p>
<p>As you can see from the name of the flow-root value, it creates a new context for streaming layout, similar to the browser root (html) element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow:auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the <span class="tag">&lt;<span class="name">code</span>&gt;</span>overflow:auto<span class="tag">&lt;/<span class="name">code</span>&gt;</span> container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the <span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span> container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Exclude-external-float"><a href="#Exclude-external-float" class="headerlink" title="Exclude external float"></a>Exclude external float</h3><p>In the following example, we use display: flow-root and float to implement a two-column layout, because the BFC established in the normal doc flow must not overlap the outer margins of any float in the block formatting context where the element itself is located.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>Try to resize this outer float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>Try to resize this outer float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/* required by resize:both */</span></span><br><span class="line">  <span class="attribute">resize</span>: both;</span><br><span class="line">  <span class="attribute">margin-right</span>:<span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">75</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Avoid-overlapping-margins"><a href="#Avoid-overlapping-margins" class="headerlink" title="Avoid overlapping margins"></a>Avoid overlapping margins</h3><p>The top and bottom margins of a block are sometimes combined (folded) into a single margin that is the maximum of the single margin (or only one of them if they are equal), a behavior called margin folding.</p>
<p>There are three situations where margins overlap:</p>
<h4 id="Between-adjacent-elements-in-the-same-layer"><a href="#Between-adjacent-elements-in-the-same-layer" class="headerlink" title="Between adjacent elements in the same layer"></a>Between adjacent elements in the same layer</h4><p>The margins overlap between two adjacent elements, unless the latter element plus clear-fix clears the float.</p>
<h4 id="No-content-separates-parent-elements-from-descendant-elements"><a href="#No-content-separates-parent-elements-from-descendant-elements" class="headerlink" title="No content separates parent elements from descendant elements"></a>No content separates parent elements from descendant elements</h4><p>The parent block element and its inner descendant block appear if there is no border, padding, inline content, or creating a block-level formatting context or clearing floats to separate the upper boundary margin-top of a block-level element from the upper boundary margin-top of one or more descendant block-level elements within it; or no border, inline margin, inline content, height, minimum height min-height or max-height to separate the lower boundary margin-bottom of a block-level element from the lower boundary margin-bottom of one or more descendant block elements within it The outer element boundary overlaps, and the overlapping part will eventually overflow outside the parent block element.</p>
<h4 id="Empty-block-level-element"><a href="#Empty-block-level-element" class="headerlink" title="Empty block-level element"></a>Empty block-level element</h4><p>Boundary folding also occurs when the boundary margin-top on a block element is directly attached to the boundary margin-bottom under the element. This happens when a block element has no border, padding, height, minimum height min-height, maximum height max-height, content set to inline or clear-fix at all.</p>
<h2 id="Box-model"><a href="#Box-model" class="headerlink" title="Box model"></a>Box model</h2><p>There are two types of “boxes” that we use extensively in CSS - block boxes and internal connection boxes. These two types of boxes exhibit different behaviors in terms of page flow and the relationships between elements:</p>
<p>A box defined as a block exhibits the following behavior:</p>
<ul>
<li>The box expands in the inline direction and takes up all the free space of the parent container in that direction, meaning in most cases the box will be as wide as the parent container</li>
<li>Every box wraps</li>
<li>width and height properties can come into play</li>
<li>Padding, margin and border will “push” other elements from around the current box</li>
</ul>
<p>If a box is displayed as inline, its behavior is as follows:</p>
<ul>
<li>The box does not generate a line break.</li>
<li>The width and height properties will not work.<br>Vertical padding, margins, and borders are applied but do not push other inlined boxes away.</li>
<li>Horizontal padding, margins, and borders are applied and push other inlined boxes away.</li>
</ul>
<blockquote>
<p>It’s best to also explain the interior here</p>
<p>Similarly, the box model has an internal display type, which determines how the elements inside the box are laid out. By default, it is in accordance with</p>
<p>However, we can use similar</p>
</blockquote>
<h3 id="What-is-CSS-Box"><a href="#What-is-CSS-Box" class="headerlink" title="What is CSS Box?"></a>What is CSS Box?</h3><p>The full CSS box model applies to block-level boxes, with internal connection boxes using only the parts defined in the box model. The model defines each part of the box - margin, border, padding, and content - which together create the content we see on the page. To add some extra complexity, there is a standard and alternative (IE) box model.</p>
<p>Parts of the box model<br>To form a block-level box in CSS, you need:</p>
<p>Content box: This area is used to display content, and the size can be set by setting width and height.<br>Padding box: A blank area enclosed outside the content area; the size is set by the padding related properties.<br>Border box: Border box package content and padding. The size is set by border related properties.<br>Margin box: This is the outermost area, the empty space between the box and other elements. The size is set by the margin-related property.</p>
<p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model/box-model.png" alt=""></p>
<h4 id="Standard-box-model"><a href="#Standard-box-model" class="headerlink" title="Standard box model"></a>Standard box model</h4><p>In the standard model, if you set the width and height of the box, you actually set the content box. The padding and border plus the set width and height together determine the size of the entire box. See the image below.</p>
<p>Assuming width, height, margin, border, and padding are defined:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If using the standard model width = 410px (350 + 25 + 25 + 5 + 5), height = 210px (150 + 25 + 25 + 5 + 5), padding plus border plus content box.</p>
<h4 id="Alternative-box-model"><a href="#Alternative-box-model" class="headerlink" title="Alternative box model"></a>Alternative box model</h4><p>You might think that adding borders and padding to the size of the box is troublesome, and you’re right! For this reason, css has an alternative box model. Using this model, all widths are visible widths, so the content width is that width minus the border and padding. Use the same style as above to get (width = 350px, height = 150px).</p>
<p>The default browser will use the standard model. If you need to use an alternative model, you can do so by setting box-sizing: border-box for it. This will tell the browser to use border-box to define the area, thus setting the size you want.</p>
<p>If you want all elements to use the alternative mode, and it’s really common, set box-sizing on the &lt; html &gt; element, and then set all elements to inherit that property, as in the example below. For a deeper understanding, see the CSS Tricks article on box-sizing.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In simple terms, the box model refers to how the width and height of this element are calculated, while BFC refers to the fact that its internal and external elements will not affect each other</p>
<p>Whether it is a box model can be set directly through css attributes, such as the display attribute, but whether it is BFC is not a css attribute, but in some cases, a context will be created.</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Summary and Comparison of CSS Mainstream Layouts (4) Holy Grail Layout</title>
    <url>/en/posts/64900/</url>
    <content><![CDATA[<p>The previous blog summarized the horizontal vertical centering and two column layout.</p>
<p>This time we will continue to look at the Holy Grail layout, which is the three-row and three-column layout.</p>
<span id="more"></span>
<p>First take a look at the rendering of the Holy Grail layout:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1619407434/origin-of-ray/微信截图_20210426111418_oly7qh.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1619407434/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210426111418_oly7qh.png"></p>
<p>This layout is actually divided into two parts, the first is a simple three-line layout, head, middle and bottom.</p>
<p>Secondly, the middle part is a three-column layout, and this three-column layout is the core of the Holy Grail layout.</p>
<p>Let’s take a look at how to implement this three-column layout.</p>
<h2 id="How-to-achieve-a-three-column-layout"><a href="#How-to-achieve-a-three-column-layout" class="headerlink" title="How to achieve a three-column layout"></a>How to achieve a three-column layout</h2><h3 id="Option-one"><a href="#Option-one" class="headerlink" title="Option one"></a>Option one</h3><p>After reading my previous blog about the two-column layout, everyone should have a feeling for this three-column layout.</p>
<p>Let’s first transform it into a three-column layout based on the float + margin method in the two-column layout. The code is as follows:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span>, <span class="selector-id">#right</span>, <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: grey;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>You can try this code yourself and find that there is a problem, it is right to the next line.</p>
<p>Why is this? Because float elements cannot exceed the previous non-float element.</p>
<p>The solution is also simple, move the center to the end.</p>
<h3 id="Option-two"><a href="#Option-two" class="headerlink" title="Option two"></a>Option two</h3><p>The above scheme is the center at the end, although the effect can be achieved, but our main content is generally placed in the center, so for SEO is not very friendly, we can find a way to put the center in the front.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#parent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* This is to prevent height collapse, because the child elements are all floating, separated from the doc stream */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* The margin-left value is the same as the left width, and the margin-right value is the same as the right width */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span>, <span class="selector-id">#right</span>, <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* auto expands to the same width as parent */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: grey;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This implementation doesn’t really work because all three are floating, and center fills the entire parent, so left and right will be squeezed to the next line.</p>
<p>Then we need to move left, and because the three are floating, moving left can bring left to the previous line.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#parent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* This is to prevent height collapse, because the child elements are all floating, separated from the doc stream */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* The margin-left value is the same as the left width, and the margin-right value is the same as the right width */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span>, <span class="selector-id">#right</span>, <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* move the width of the parent element to the left */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* Move its own width to the left, combine the two and add three child elements that are floating, you can put left in the correct position */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* auto expands to the same width as parent */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: grey;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Summary and Comparison of CSS Mainstream Layouts (3) Two-column Layout</title>
    <url>/en/posts/36778/</url>
    <content><![CDATA[<p>This time we continue to summarize the way and principle of the two-column layout in the mainstream layout of CSS.</p>
<p>First, let’s talk about what a two-column layout is.</p>
<p>The two-column layout generally specifies the width and Self-Adaptation layout. The left column of the two columns determines the width, and the right column is a layout effect that automatically fills all the remaining space.</p>
<span id="more"></span>
<h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        &lt; div class = &quot;left&quot; &gt; left: fixed width &lt;/div &gt;</span><br><span class="line">        &lt; div class = &quot;right&quot; &gt; right, Self-Adaptation &lt;/div &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h3><h4 id="float-1"><a href="#float-1" class="headerlink" title="float"></a>float</h4><p>The float CSS property specifies that an element should be placed along the left or right side of its container, allowing text and internal connection elements to wrap around it. The element is removed from the normal flow of web pages (doc flow), although still partially liquid (as opposed to<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#absolute_positioning">绝对定位</a>On the contrary).</p>
<blockquote>
<p><strong> Floating element </strong> Yes</p>
<p>Since float implies using block layout, it modifies [‘display’] in some cases (<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display">https://developer.mozilla.org/zh-CN/docs/Web/CSS/display</a>)</p>
<p>What will be modified specifically can be referred to: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float">https://developer.mozilla.org/zh-CN/docs/Web/CSS/float</a></p>
</blockquote>
<h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><p>Implementation is simple</p>
<h3 id="Disadvantage"><a href="#Disadvantage" class="headerlink" title="Disadvantage"></a>Disadvantage</h3><p>The self-adaptation margin must be the same as the width of the fixed-width element.</p>
<p>Floating fixed-width elements and not floating Self-Adaptation elements can cause display problems in older browsers.</p>
<p>Display problems can occur when child elements in floating elements use clear to clear the float.</p>
<h3 id="Improve"><a href="#Improve" class="headerlink" title="Improve"></a>Improve</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* This is to raise the level of left, otherwise rigth-fix will override left */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right-fix</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: -<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        &lt; div class = &quot;left&quot; &gt; left: fixed width &lt;/div &gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-fix&quot;</span>&gt;</span></span><br><span class="line">            &lt; div class = &quot;right&quot; &gt; right, Self-Adaptation &lt;/div &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The improved version can solve the second and third shortcomings</p>
<h2 id="float-2"><a href="#float-2" class="headerlink" title="float"></a>float</h2><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* In order to enable BFC mode */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        &lt; div class = &quot;left&quot; &gt; left: fixed width &lt;/div &gt;</span><br><span class="line">        &lt; div class = &quot;right&quot; &gt; right, Self-Adaptation &lt;/div &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Principle-1"><a href="#Principle-1" class="headerlink" title="Principle"></a>Principle</h3><h4 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h4><p>The CSS property overflow is defined when the content of an element is too large to fit <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">块级格式化上下文</a> Time to do. It is <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow-x"><code>overflow-x</code></a> And<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow-y"><code>overflow-y</code></a>Of <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties">简写属性 </a>。</p>
<p>This option includes cutting, displaying scrollbars, or displaying content that spills out of the container into the surrounding area.</p>
<p>Specifying a value other than visible (the default) will create a new <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">块级格式化上下文</a>This is technically necessary - if a floating element intersects the scrollbar, it will forcibly repackage the content after each scroll step, resulting in a slow scrolling experience.</p>
<p>For’overflow ‘to be effective, the block-level container must have a specified height (‘ height ‘or’max-height’) or set’white-space ‘to’nowrap’.</p>
<h3 id="Advantages-1"><a href="#Advantages-1" class="headerlink" title="Advantages"></a>Advantages</h3><p>None of the problems in the first plan</p>
<h3 id="Disadvantage-1"><a href="#Disadvantage-1" class="headerlink" title="Disadvantage"></a>Disadvantage</h3><p>The overflow attribute not only enables BFC mode, but also sets the out of memory condition</p>
<h2 id="display：table"><a href="#display：table" class="headerlink" title="display：table"></a>display：table</h2><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        &lt; div class = &quot;left&quot; &gt; left: fixed width &lt;/div &gt;</span><br><span class="line">        &lt; div class = &quot;right&quot; &gt; right, Self-Adaptation &lt;/div &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Principle-2"><a href="#Principle-2" class="headerlink" title="Principle"></a>Principle</h3><h4 id="display：table-1"><a href="#display：table-1" class="headerlink" title="display：table"></a>display：table</h4><p>These elements behave like HTML <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table"><code>table</code></a> elements. It defines a block-level box.</p>
<h4 id="table-layout"><a href="#table-layout" class="headerlink" title="table-layout"></a>table-layout</h4><p>The table-layout CSS property defines the algorithm used to layout the table cells, rows, and columns.</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/width"><code>auto</code> (en-US)</a></li>
</ul>
<p>Most browsers use automatic table layout algorithms to layout tables. The width of tables and cells depends on the content they contain.</p>
<ul>
<li>fixed</li>
</ul>
<p>The width of the table and columns is set by the width of the table, and the width of a column is only determined by the cell in the first row of the column. In the current column, the row after the row where the cell is located does not affect the entire column width.</p>
<p>When using “fixed” layout mode, the entire table can be parsed and rendered after the first row is downloaded. This can speed up rendering for “automatic” automatic layout mode, but the contents of subsequent cells will not Self-Adaptation the current column width. Any cell containing overflow content can use <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow"><code>overflow</code></a> Property controls whether out of memory is allowed.</p>
<h3 id="Advantages-2"><a href="#Advantages-2" class="headerlink" title="Advantages"></a>Advantages</h3><p>Good compatibility</p>
<h3 id="Disadvantage-2"><a href="#Disadvantage-2" class="headerlink" title="Disadvantage"></a>Disadvantage</h3><p>Will be subject to table constraints</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Summary and Comparison of CSS Mainstream Layouts (2) Vertical Center Alignment</title>
    <url>/en/posts/15552/</url>
    <content><![CDATA[<p>Summarize the different implementations of vertical center alignment in several mainstream layouts and the comparisons between them.</p>
<span id="more"></span>
<h2 id="Father"><a href="#Father" class="headerlink" title="Father"></a>Father</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#parent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h3><h4 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h4><p><a href="https://developer.mozilla.org/en-US/docs/CSS">CSS</a> 的属性 <strong><code>vertical-align</code></strong> 用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。</p>
<p>Note that’vertical-align ‘only works for inline elements and table cell elements: it cannot be used for vertical alignment<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements">块级元素</a>。</p>
<p>You can see the specific value of vertical-align.<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align">MDN</a>, just to mention one point here, that is, for inline elements and table cells, their value ranges are not exactly the same, even if the same value will have different meanings.</p>
<h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p>This property was introduced in the previous blog, this time we are using its table-cell value</p>
<p>This value will make the current element behave like a td. The content of td can be centered text or vertically centered.</p>
<h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><p>Good compatibility</p>
<h3 id="Disadvantage"><a href="#Disadvantage" class="headerlink" title="Disadvantage"></a>Disadvantage</h3><p>Vertical-align is inherited</p>
<h2 id="子posititon-absolute"><a href="#子posititon-absolute" class="headerlink" title="子posititon:absolute"></a>子posititon:absolute</h2><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&lt; html long = &quot;and&quot; &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#parent</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Principle-Advantages-Disadvantages"><a href="#Principle-Advantages-Disadvantages" class="headerlink" title="Principle, Advantages, Disadvantages"></a>Principle, Advantages, Disadvantages</h3><p>You can check mine for this principle.<a href="https://sunra.top/posts/11330/">上一篇博客</a>The second plan of the centered text is the same.</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Basic knowledge of DDOS</title>
    <url>/en/posts/7039/</url>
    <content><![CDATA[<p>This time, learn the basics of DOS (Distributed Denial-of-service) and DDOS (Distributed Denial-of-service).</p>
<span id="more"></span>
<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Distributed Denial of Service (DDoS) attacks are malicious behaviors that flood the target server or its surrounding infrastructure with large-scale internet traffic to disrupt the normal traffic of the target server, service, or network.</p>
<p>DDoS attacks utilize multiple compromised computer systems as a source of attack traffic to achieve attack effect. The machines exploited can include computers or other networked resources (such as IoT devices).</p>
<p>In general, DDoS attacks are like a traffic jam on a highway that prevents regular vehicles from reaching their intended destination.</p>
<h2 id="Basic-principles"><a href="#Basic-principles" class="headerlink" title="Basic principles"></a>Basic principles</h2><p>DDoS attacks are carried out through computer networks connected to the internet.</p>
<p>These networks consist of computers and other devices (such as IoT devices) that are infected with malicious software and can be remotely controlled by attackers. These individual devices are called bots (or bots), and a group of bots is called a botnet.</p>
<p>Once a botnet is established, attackers can launch attacks by sending remote commands to each robot.</p>
<p>When a botnet targets a victim’s server or network, each bot sends a request to the target’s IP address, which can overwhelm the server or network, resulting in a denial of service to normal traffic.</p>
<p>Since each robot is a legitimate internet device, it may be difficult to distinguish attack traffic from normal traffic.</p>
<h2 id="How-to-Identify-DDoS-Attacks"><a href="#How-to-Identify-DDoS-Attacks" class="headerlink" title="How to Identify DDoS Attacks"></a>How to Identify DDoS Attacks</h2><p>The most obvious symptom of a DDoS attack is when a website or service suddenly slows down or becomes unavailable. However, there are multiple reasons for similar performance issues (such as legitimate traffic surges), so further investigation is usually required. Traffic analysis tools can help you spot some clear signs of a DDoS attack:</p>
<ul>
<li>Suspicious traffic from a single IP address or IP range<br>Large volumes of traffic from users who share a single behavioral characteristic, such as device type, geographic location, or web browser version<br>Unexplained spike in the number of requests to a single page or endpoint</li>
<li>Strange traffic patterns, such as surges at unconventional times of day or seemingly unnatural patterns (e.g. surges every 10 minutes)<br>There are other more specific signs of DDoS attacks, depending on the type of attack.</li>
</ul>
<h2 id="DDoS-classification"><a href="#DDoS-classification" class="headerlink" title="DDoS classification"></a>DDoS classification</h2><h3 id="Application-layer-attacks"><a href="#Application-layer-attacks" class="headerlink" title="Application layer attacks"></a>Application layer attacks</h3><p>This type of attack is sometimes referred to as Layer 7 DDoS attack (referring to Layer 7 of the OSI model), and its goal is to exhaust target resources.</p>
<p>The target of the attack is the server layer that generates web pages and transmits them in response to HTTP requests. The computational cost of executing an HTTP request in the Client is relatively low, but responding to the target server can be very expensive because the server usually has to load multiple files and run database queries to create a web page.</p>
<p>Layer 7 attacks are difficult to defend against because it is difficult to distinguish between malicious and legitimate traffic.</p>
<h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>The HTTP flood attack is similar to pressing refresh again and again in the web browsers of a large number of different computers at the same time - a large number of HTTP requests flood the server, resulting in a denial of service.</p>
<p>This type of attack is simple and complex.</p>
<p>Simpler implementations can access a URL with the same range of attack IP addresses, referrers, and user agents. Complex versions may use a large number of attack IP addresses and use random referrers and user agents to target random URLs.</p>
<h4 id="Slowloris"><a href="#Slowloris" class="headerlink" title="Slowloris"></a>Slowloris</h4><h4 id="HTTP-1"><a href="#HTTP-1" class="headerlink" title="HTTP"></a>HTTP</h4><h3 id="Transport-layer-attack"><a href="#Transport-layer-attack" class="headerlink" title="Transport layer attack"></a>Transport layer attack</h3><h4 id="SYN-attack"><a href="#SYN-attack" class="headerlink" title="SYN attack"></a>SYN attack</h4><p>SYN flooding is like a supply room worker receiving requests from a store counter.</p>
<p>Staff receive requests, go pick up packages, wait for confirmation, and then deliver packages to the counter. Staff get too many requests for packages but don’t get confirmation until they can’t handle more packages, so overwhelmed that no one can respond to requests.</p>
<p>This type of attack utilizes the TCP handshake (a series of communications through which two computers initiate a network connection) and is achieved by sending a large number of TCP “initial connection request” SYN data packets with forged source IP addresses to the target.</p>
<p>The target computer responds to each connection request and then waits for the final step in the handshake, which never happens, thus exhausting the target’s resources in the process.</p>
<h4 id="ACK-attack"><a href="#ACK-attack" class="headerlink" title="ACK attack"></a>ACK attack</h4><h3 id="Network-layer-attacks"><a href="#Network-layer-attacks" class="headerlink" title="Network layer attacks"></a>Network layer attacks</h3><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>DNS amplification is like someone calling a restaurant and saying, “Order one of each course, please call me back and repeat the entire order,” when the callback number provided actually belongs to the victim. It takes almost no effort to generate a long response and send it to the victim.</p>
<p>After sending a request to an open DNS server using a forged IP address (the victim’s IP address), the target IP address will receive a response from the server.</p>
<h4 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h4><h4 id="UDP-attack"><a href="#UDP-attack" class="headerlink" title="UDP attack"></a>UDP attack</h4><h4 id="Memory-cache-attack"><a href="#Memory-cache-attack" class="headerlink" title="Memory cache attack"></a>Memory cache attack</h4><p>Memory Cache Distributed Denial of Service (DDoS) attack is a type of network attack in which the attacker attempts to overload the network traffic of the target victim. The attacker sends deceptive requests to a vulnerable UDP memory cache * server, which then sends Internet traffic to the target victim, potentially overwhelming the victim’s resources. When the target’s Internet infrastructure is overloaded, new requests cannot be processed, and regular traffic cannot access Internet resources, resulting in a denial of service.</p>
<blockquote>
<p>In-memory cache is a database caching system used to accelerate websites and networks.</p>
</blockquote>
<p>Memory cache attacks work similarly to all DDoS amplification attacks, such as NTP amplification and DNS amplification. This attack spoofs requests sent to a vulnerable server, which then responds with a larger amount of data than the initial request, thus amplifying traffic.</p>
<p>A memory cache amplification attack is like a malicious teenager calling a restaurant and saying “I want one of everything on the menu, please call me back and tell me the information of the entire order”. When the restaurant asks for the callback number, he gives the phone number of the target victim. The target then gets a call from the restaurant and gets a lot of information they didn’t request.</p>
<p>This method of amplifying attacks is made possible because the memory cache server can choose to operate using the UDP protocol. UDP is a network protocol that allows data to be sent without first obtaining a so-called handshake - a network process in which both parties agree to communicate. The reason why UDP is used is because large amounts of data can be sent to the target host without consulting whether the target host is willing to receive data or obtaining their consent in advance.</p>
<p>The memory cache attack is divided into 4 steps.<br>The attacker implanted a large amount of data payload * on the exposed memory cache server.<br>Next, the attacker forges an HTTP GET request using the IP address of the target victim.</p>
<ul>
<li>The memory cache server with the vulnerability receives the request, attempts to provide assistance through the response, and therefore sends a large number of responses to the target.</li>
<li>The target server or its surrounding infrastructure cannot handle the large amount of data sent from the memory cache server, resulting in overload and denial of service for normal requests</li>
</ul>
<p>How to protect against memory cache attacks?</p>
<ul>
<li>Disable UDP - For memory cache servers, make sure to disable UDP support when not needed. By default, memory cache has UDP support enabled, which may make the server vulnerable.</li>
<li>Firewall protection for memory cache servers - By adding firewall protection between memory cache servers and the Internet, system admins can use UDP as needed without being exposed to risk.</li>
<li>Prevent IP spoofing - As long as IP addresses can be spoofed, DDoS attacks can exploit this vulnerability to direct traffic to the victim’s network. Preventing IP spoofing is a larger-scale solution that cannot be implemented by specific system admins and requires transport providers to prohibit any data packets with source IP addresses originating outside the network from leaving their network. In other words, companies such as Internet Service Providers (ISPs) must filter traffic so that data packets leaving their network must not pretend to be from other networks elsewhere. If all major transport providers implemented this screening, spoofing-based attacks would disappear overnight.</li>
<li>Develop software with reduced UDP response - Another way to eliminate amplification attacks is to remove the amplification factor of any incoming requests; if the response data sent due to the UDP request is less than or equal to the initial request, amplification is no longer possible.</li>
</ul>
<h2 id="How-to-Defend-Against-DDoS"><a href="#How-to-Defend-Against-DDoS" class="headerlink" title="How to Defend Against DDoS"></a>How to Defend Against DDoS</h2><h3 id="Black-hole-routing"><a href="#Black-hole-routing" class="headerlink" title="Black hole routing"></a>Black hole routing</h3><p>There is a solution that works for almost all network administrators: create a black hole route and import traffic into that route. In its simplest form, when black hole filtering is implemented without specific restrictions, both legitimate and malicious network traffic will be routed to an empty route or black hole and dropped from the network.</p>
<p>If an internet device suffers from a DDoS attack, the device’s Internet Service Provider (ISP) may send all traffic from the site into a black hole as a defense. This is not an ideal solution, as it amounts to allowing attackers to achieve their intended goal: making the network inaccessible.</p>
<h3 id="Rate-limiting"><a href="#Rate-limiting" class="headerlink" title="Rate limiting"></a>Rate limiting</h3><p>Limiting the number of requests the server receives in a certain period of time is also a way to protect Distributed Denial-of-service.</p>
<p>Although rate limiting is helpful in slowing down web crawlers from stealing content and protecting against brute force attacks, rate limiting alone may not be enough to effectively deal with complex DDoS attacks.</p>
<p>However, rate limiting can be an effective means in an effective DDoS protection strategy. Learn about Rate Limiting by Cloudflare</p>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>Web Application Firewall (WAF) is an effective tool to help mitigate Layer 7 DDoS attacks. After WAF is deployed between the internet and source sites, WAF can act as a reverse proxy, protecting the target server from specific types of malicious traffic intrusion.</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>Introduction to DHCP Protocol Workflow</title>
    <url>/en/posts/1133/</url>
    <content><![CDATA[<p>Recently read an article introducing the DHCP protocol workflow, here is a brief summary.</p>
<span id="more"></span>
<h2 id="How-to-configure-an-IP-Address-for-a-network-interface-card"><a href="#How-to-configure-an-IP-Address-for-a-network-interface-card" class="headerlink" title="How to configure an IP Address for a network interface card"></a>How to configure an IP Address for a network interface card</h2><p>You can configure an address yourself with the command line. You can use ifconfig or ip addr. After setting it up, use these two commands to card up the network interface and start working.</p>
<p>Use net-tools:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ifconfig eth1 10.0.0.1/24</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ifconfig eth1 up</span></span><br></pre></td></tr></table></figure>
<p>Using iproute2:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ip addr add 10.0.0.1/24 dev eth1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> up eth1</span></span><br></pre></td></tr></table></figure>
<p>You may ask, configuring this degree of freedom yourself is too much, can I configure anything?</p>
<p>What if I configure an address that is not related to anyone? For example, the machines next to me are all 192.168.1.x, and I have to configure a 16.158.23.6, what will happen?</p>
<p>There will be no phenomenon, just that the package cannot be sent out.</p>
<p>Why not send it? For example. 192.168.1.6 is next to your machine, even on the same switch, and you set the address of the machine to 16.158.23.6. On this machine, you try to ping 192.168.1.6, and you think that as long as you send the packet, another machine on the same switch will receive it right away, right? But Linux system is not like this, it is not as smart as you think. You see the machine next to you with the naked eye, and it needs to process according to its own logic.</p>
<p>As long as the packet is running on the network, it is complete, there can be no upper layer, absolutely impossible to have no lower layer. So, you look at it has its own source IP address 16.158.23.6, there is also a destination IP address 192.168.1.6, but the packet can not be sent out, this is because the MAC layer has not been filled.</p>
<p>It’s easy to know your own MAC address. But what should the target MAC fill in? Is 192.168.1.6 fill in the MAC address of this machine? Of course not. Linux will first judge, is the address you want to go to the same network segment as me, or is it the same network segment as one of my network interface cards? ** Only if it is a network segment, it will send an ARP request to obtain the MAC address. What if it is not found? Linux default logic is that if this is a cross-segment call, it does not send the packet directly to the network, but attempts to send the packet to the gateway.</p>
<blockquote>
<p>In the same local area network, DHCP requests an IP address for its own MAC, and ARP obtains someone else’s MAC address based on someone else’s IP.</p>
</blockquote>
<p>If you configure the gateway, Linux will get the MAC address of the gateway and then send the packet out. For 192.168.1.6 machine, although the packet passing by its door, the target IP is it, but the MAC address is not it, so its network interface card will not receive the packet.</p>
<p>What if the gateway is not configured? The package can’t be sent at all.</p>
<p>If the gateway is configured to 192.168.1.6? Impossible, <strong> Linux won’t let you configure it successfully, because the gateway needs to be on the same network segment as at least one network interface card of the current network. How can 16.158.23.6 gateway be 192.168.1.6? </strong></p>
<p>So, when you need to manually configure the network IP of a machine, be sure to ask your network administrator. If you are in the computer room, go to the network administrator to apply and ask him to assign you a correct IP address. Of course, when the real configuration is done, it must not be configured directly with commands, but in a configuration file. The configuration file format of different systems is different, but it is nothing more than CIDR, subnet mask, broadcast address and gateway address.</p>
<h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The above method of statically configuring IP is more troublesome and requires manual configuration, and it is also necessary to know which IPs have not been assigned, and once there is no manual release, even if this IP is no longer used, if it is not manually released, the IP is still It cannot be used by other computers in need.</p>
<p>So we need to have an automatic configuration protocol, that is, Dynamic Host Configuration Protocol (Dynamic Host Configuration Protocol), referred to as DHCP., when a new device accesses, it can automatically assign an IP Address to it, and when it is no longer using the network, it can take back the IP Address.</p>
<p>With this protocol, network administrators were much more relaxed. He only needed to configure a shared IP address. Each newly connected machine would apply for this shared IP address through the DHCP protocol, and then automatically configure it. Wait for someone to leave, or run out, and return it so that other machines can also use it.</p>
<p>So, if it is a server in the Data center, once the IP is configured, it will basically not change, which is equivalent to buying a house and decorating it yourself. The DHCP method is equivalent to renting a house. You don’t need to decorate, it’s all configured for you. You can use it temporarily and return the lease after use.</p>
<h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>The new machine sends a broadcast packet using the IP address 0.0.0.0, the destination IP address is 255.255.255.255. The broadcast packet encapsulates UDP, and UDP encapsulates BOOTP. In fact, DHCP is an enhanced version of BOOTP, but if you capture packets, you are likely to see the name of the BOOTP protocol.</p>
<p>In this broadcast package, the new bee shouted: I am new (Boot request), my MAC address is this, I don’t have an IP yet, who can rent me an IP address!</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221021_vyrmgg.png" alt=""></p>
<blockquote>
<p>When the new machine sends the broadcast packet, it has not been assigned an IP address, so it uses a reserved address, 0.0.0.0, and it does not know DHCP.</p>
<p>In other words, all machines in the network can receive the broadcast packet and respond, which may pose a certain danger to deceive the machine</p>
</blockquote>
<p>If a network administrator configures a DHCP Server in the network, he is equivalent to the administrator of these IPs. He can immediately know that a “new bee” has come. At this time, we can appreciate the unique importance of MAC addresses. When a machine joins a network with its own MAC address, the MAC is its unique identity. If even this is repeated, there is no way to configure it. Only when the MAC is unique, the IP administrator can know that this is a new bee and needs to lease an IP address to it. This process is called DHCP Offer. At the same time, the DHCP Server reserves the IP address provided for this customer, so it will not assign this IP address to other DHCP customers.</p>
<p>The DHCP Offer is formatted like this, with addresses assigned to new bees.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221106_ym8rio.png" alt=""></p>
<p>The DHCP Server still uses the broadcast address as the destination address because, at this time, the new bee requesting an IP assignment does not have its own IP. The DHCP Server replied, I have assigned an available IP to you, what do you think? In addition, the server also sends information such as subnet mask, gateway, and IP address lease period.</p>
<p>The new machine was very happy. Its “roar” had been answered, and someone was willing to rent it an IP address, which meant that it could gain a foothold on the Internet.</p>
<p>Of course, even more pleasantly, if there are multiple DHCP Servers, this new machine will receive multiple IP addresses, which is simply flattering. It will select one of the DHCP Offers, usually the one that arrives first, and will send a DHCP Request broadcast data packet to the network, which contains the MAC address of the client, the IP address in the accepted lease, and the DHCP server that provided this lease. Address, etc., and tell all DHCP Servers which server it will accept the IP address provided by, tell other DHCP servers, thank you for your acceptance, and request to revoke the IP address they provided for the next IP lease requester.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221140_c1zfid.png" alt=""></p>
<p>When the DHCP Server receives the client’s DHCP request, it will broadcast a DHCP ACK message packet back to the client, indicating that it has accepted the client’s choice, and put the legal lease information and other configuration information of this IP address into the broadcast packet, sent to the client, and welcomed it to the network family. When the final lease is reached, it still needs to be broadcast to let everyone know.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1637158337/origin-of-ray/QQ%E6%88%AA%E5%9B%BE20211117221146_vkuwkg.png" alt=""></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
  </entry>
  <entry>
    <title>Difference Arrays</title>
    <url>/en/posts/54851/</url>
    <content><![CDATA[<p>This week’s question of the day has a difficult level question, using a technique called difference array. This technique is actually not complicated, that is, the reverse operation of prefix and, simply record it.</p>
<p>Here is the link to the title: <a href="https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/">https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/</a></p>
<span id="more"></span>
<p>The simplest way to do this problem is to iterate over each possible k, then calculate the score of the current array, and finally compare the score that is the largest in that case. If there are multiple largest, then take the smaller k value.</p>
<p>However, in this way, the complexity of the algorithm is the square level of n.</p>
<p>So we need to find the rule and then simplify the rule.</p>
<p>First, let’s analyze this problem: let the number with index i be x, then according to the problem conditions, we can know that when x &lt; = i, the element counts as one point.</p>
<p>Therefore, the array index range of one point of element x is [x, n-1].</p>
<p>If we rotate the number of times k, then after the rotation, because it is a leftward rotation, the subscript after the rotation is (i - k + n) mod n</p>
<p>So, the range of (i - k + n) mod n should be [x, n - 1]</p>
<p>Do the math and you get, k &lt; = (i - x + n) mod n, k &gt; = (i + 1) mod n.</p>
<p>After removing the modulo operation, when i &lt; x, i + 1 &lt; = k &lt; = i - x + n, when i &gt; = x, k &gt; = i + 1 or k &lt; = i - x</p>
<p>For each element in the array nums, the rotation index range of 1 point for the element can be calculated according to the element value and the subscript of the element. After traversing all elements, you can get the number of elements corresponding to each rotation index. The rotation index with the most elements with 1 point is the rotation index with the highest score. If there are multiple rotation subscripts with the highest scores, take the smallest one among them.</p>
<p>Create an array of points of length n, where points [k] represents the score when the rotation index is k. For each element in the array nums, get the rotation index range of 1 point for that element, and then add 1 to all elements in that index range of array points. When the value of the elements in the array points is determined, find the smallest index of the largest element. The time complexity of this approach is still O (n ^ 2), and in order to reduce the time complexity, you need to use a differential array.</p>
<p>Assume that the initial index of element x is i. Add 1 to all elements in the index range [i + 1, i - x + n] of points when i &lt; x, and add 1 to all elements in the index range [0, i - x] and [i + 1, n - 1] of points when i ≥ x. Since it is adding 1 to the elements within one or two consecutive subscript ranges, it can be implemented using a differential array. Define a difference array diffs of length n, where diffs [k] = points [k] − points [k − 1] (in particular, points [− 1] = 0), by: let low = (i + 1) mod n, high = (i − x + n + 1) mod n, add 1 to the value of diffs [low], subtract 1 from the value of diffs [high], and add 1 to the value of diffs [0] if low ≥ high.</p>
<p>After traversing all elements of the array nums and updating the difference array, traverse the array diffs and calculate the prefix sum, then the prefix sum at each subscript represents the score at the current rotation subscript. Maintain the minimum rotation subscript of the maximum score and the maximum score during the traversal process, and you can get the result after the traversal.</p>
<p>Here is the code for the C language version:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bestRotation</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span>* diffs = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    <span class="built_in">memset</span>(diffs, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        <span class="type">int</span> low = (i + <span class="number">1</span>) % numsSize;</span><br><span class="line">        <span class="type">int</span> high = (i - nums[i] + numsSize + <span class="number">1</span>) % numsSize;</span><br><span class="line">        diffs[low]++;</span><br><span class="line">        diffs[high]--;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">            diffs[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> bestIndex = <span class="number">0</span>, maxScore = <span class="number">0</span>, score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        score += diffs[i];</span><br><span class="line">        <span class="keyword">if</span> (maxScore &lt; score) &#123;</span><br><span class="line">            bestIndex = i;</span><br><span class="line">            maxScore = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(diffs);</span><br><span class="line">    <span class="keyword">return</span> bestIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>divide and conquer algorithm</title>
    <url>/en/posts/7474c898/</url>
    <content><![CDATA[<h2 id="Basic-concepts"><a href="#Basic-concepts" class="headerlink" title="Basic concepts"></a>Basic concepts</h2><p>  In computer science, divide and conquer is a very important algorithm. The literal interpretation is “divide and conquer”, which is to divide a complex problem into two or more identical or similar sub-problems, and then divide the sub-problems into smaller sub-problems… Until the final sub-problem can be simply solved directly, the solution of the original problem is the combination of the solutions of the sub-problems. This technique is the basis of many efficient algorithms, such as sorting algorithms (Quick Sort, Merge Sort), Fourier Transform (Fast Fourier Transform)…</p>
<span id="more"></span>
<p>  The computation time required for any problem that can be solved by a computer is related to its size. The smaller the size of the problem, the easier it is to solve directly, and the less computation time it takes to solve the problem. For example, for the ordering problem of n elements, when n = 1, no computation is required. When n = 2, you only need to make one comparison to sort the order. When n = 3, you only need to make 3 comparisons,…. When n is large, the problem is not so easy to deal with. It is sometimes quite difficult to directly solve a large-scale problem.</p>
<h2 id="Basic-Ideas-and-Strategies"><a href="#Basic-Ideas-and-Strategies" class="headerlink" title="Basic Ideas and Strategies"></a>Basic Ideas and Strategies</h2><p>  The design idea of the divide and rule method is to divide a big problem that is difficult to solve directly into some smaller-scale identical problems, so that each can be broken and divided and conquered.</p>
<p>  The divide-and-conquer strategy is: for a problem of scale n, if the problem can be easily solved (for example, the scale n is small), it will be solved directly, otherwise it will be decomposed into k small-scale sub-problems, which are independent of each other. And in the same form as the original problem, solve these sub-problems recursively, and then combine the solutions of each sub-problem to obtain the solution of the original problem. This algorithm design strategy is called divide and conquer.</p>
<p>  If the original problem can be divided into k sub-problems, 1 &lt; k ≤ n, and these sub-problems can be solved and the solutions of these sub-problems can be used to obtain the solutions of the original problem, then this divide-and-conquer method is feasible. The sub-problems generated by the divide-and-conquer method are often smaller modes of the original problem, which provides convenience for the use of recursion technology. In this case, repeated application of the divide-and-conquer method can make the sub-problem consistent with the original problem type but its scale continues to shrink, and finally reduce the sub-problem to the point where it is easy to find its solution directly. This naturally leads to the recursion process. Like a pair of twin brothers, divide and conquer and recursion are often used in algorithm design at the same time, resulting in many efficient algorithms.</p>
<h2 id="Circumstances-in-which-the-law-of-partition-applies"><a href="#Circumstances-in-which-the-law-of-partition-applies" class="headerlink" title="Circumstances in which the law of partition applies"></a>Circumstances in which the law of partition applies</h2><p>   The problems that can be solved by the partition and rule method generally have the following characteristics:</p>
<p>  1) The problem can be easily solved by reducing the scale to a certain extent</p>
<p>  2) The problem can be decomposed into several smaller-scale identical problems, that is, the problem has optimal substructure properties.</p>
<p>  3) The solutions of the sub-problems decomposed by the problem can be combined into the solutions of the problem;</p>
<p>  4) The sub-problems decomposed by this problem are independent of each other, that is, there are no common sub-sub-problems among the sub-problems.</p>
<p>The first feature is that most problems can be satisfied, because the computational complexity of the problem generally increases with the increase of the problem scale;</p>
<p><strong> The second feature is the premise of applying the divide and rule method </strong> It is also satisfying for most problems, and this feature reflects the application of recursion thinking;,</p>
<p><strong> The third feature is the key, whether to use the divide and rule method depends entirely on whether the problem has the third feature </strong>, if <strong> has the first and second features, but does not have the third feature, you can Consider using the greedy method or the Dynamic Programming method </strong>.</p>
<p><strong> The fourth feature involves the efficiency of the partition and rule method </strong>. If each sub-problem is not independent, the partition and rule method has to do a lot of unnecessary work and repeatedly solve the common sub-problems. At this time, although the partition and rule method is available, but <strong> Dynamic Programming is generally better </strong>.</p>
<p>Divide and conquer and Dynamic Programming have similarities and differences. Let’s look at the following two definitions.</p>
<blockquote>
<p>Optimal substructure: If an optimal solution of a problem contains the optimal solution of a subproblem, then the problem has an optimal substructure.</p>
<p>Overlapping subproblems: The recursion algorithm used to solve the original problem repeatedly solves the same subproblem, rather than always generating new subproblems. For two subproblems, if they are indeed the same subproblem, but only appear as subproblems of different problems, they overlap.</p>
</blockquote>
<p>When sub-problems are independent of each other, divide and conquer can be used and only. Dynamic Programming is a better algorithm when there are overlapping sub-problems. In a word, divide and conquer - each sub-problem is independent; Dynamic Programming - each sub-problem overlaps.</p>
<blockquote>
<p>Introduction to Algorithms:</p>
</blockquote>
<h2 id="The-Basic-Steps-of-Partition"><a href="#The-Basic-Steps-of-Partition" class="headerlink" title="The Basic Steps of Partition"></a>The Basic Steps of Partition</h2><p>The divide-and-conquer method has three steps at each level of recursion:</p>
<p>   Step 1 Decomposition: Decompose the original problem into several small-scale, independent sub-problems with the same form as the original problem;</p>
<p>   Step2 solution: If the sub-problem is small and easy to solve, solve it directly, otherwise solve each sub-problem recursion</p>
<p>   Step 3 Merge: Merge the solutions of each sub-problem into the solution of the original problem.</p>
<p>Its general algorithm Design pattern is as follows:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Divide-and-Conquer(P)</span><br><span class="line"></span><br><span class="line">　　1. if |P|≤n0</span><br><span class="line"></span><br><span class="line">　　2. then return(ADHOC(P))</span><br><span class="line"></span><br><span class="line">　　3. Decompose P into smaller subproblems P1, P2,..., Pk</span><br><span class="line"></span><br><span class="line">　　4. for i←1 to k</span><br><span class="line"></span><br><span class="line">　　5. do yi ← Divideo-and-Conquer (Pi) Δrecursion solution Pi</span><br><span class="line"></span><br><span class="line">　　6. T ← MERGE (y1, y2,..., yk) ΔMerge subproblems</span><br><span class="line"></span><br><span class="line">　　7. return(T)</span><br><span class="line"></span><br><span class="line">　　Where | P | represents the size of the problem P; n0 is a threshold value, which means that when the size of the problem P does not exceed n0, the problem is easy to be solved directly without further decomposition. ADHOC (P) is the basic sub-algorithm in the divide-and-conquer method, which is used to directly solve small-scale problems P. Therefore, when the scale of P does not exceed n0, the algorithm ADHOC (P) is directly used to solve it. The algorithm MERGE (y1, y2,..., yk) is a merging subalgorithm in the divide-and-conquer method, used to merge the corresponding solutions y1, y2,..., yk of the subproblems P1, P2,..., Pk of P into the solution of P.</span><br></pre></td></tr></table></figure>
<h2 id="Merge-sort"><a href="#Merge-sort" class="headerlink" title="Merge sort"></a>Merge sort</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">//First look at the function body, the part that implements the split</span><br><span class="line">void mergesort(int a[],int n,int left,int right)</span><br><span class="line">&#123;</span><br><span class="line">    if(left+1&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid=(left+right)/2;</span><br><span class="line">        mergesort(a,n,left,mid);</span><br><span class="line">        mergesort(a,n,mid,right);</span><br><span class="line">        merge(a,n,left,mid,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Now let&#x27;s write our own merge function!</span><br><span class="line">//L, R are auxiliary arrays!</span><br><span class="line">void merge(int a[],int n,int left,int mid,int right)</span><br><span class="line">&#123;</span><br><span class="line">    int n1=mid-left,n2=right-mid;</span><br><span class="line">    for(int i=0;i&lt;n1;i++)</span><br><span class="line">        L [i] = a [left + i];//store the left sequence</span><br><span class="line">    for(int i=0;i&lt;n2;i++)</span><br><span class="line">        R [i] = a [mid + i];//store the right sequence</span><br><span class="line">    L[n1]=R[n2]=INF;</span><br><span class="line">    int i=0,j=0;</span><br><span class="line">    for(int k=left;k&lt;right;k++)//合并</span><br><span class="line">    &#123;</span><br><span class="line">        if(L[i]&lt;=R[j])</span><br><span class="line">            a[k]=L[i++];</span><br><span class="line">        else</span><br><span class="line">            a[k]=R[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Divide-and-conquer-example"><a href="#Divide-and-conquer-example" class="headerlink" title="Divide and conquer example"></a>Divide and conquer example</h2><p>Link to question and answer: <a href="https://leetcode-cn.com/problems/maximum-subarray/">https://leetcode-cn.com/problems/maximum-subarray/</a></p>
<p>For an interval [l, r], we can maintain four quantities:</p>
<p>LSum represents the sum of the largest subsegment with l as the left endpoint in [l, r]<br>RSum represents the sum of the largest subsegment with r as the right endpoint in [l, r]<br>MSum represents the sum of the largest subsegment in [l, r]<br>ISum represents the sum of the interval of [l, r]<br>Hereinafter, [l, m] is the “left subinterval” of [l, r], and [m + 1, r] is the “right subinterval” of [l, r]. We consider how to maintain these quantities (how to combine the information of [l, r] through the information of the left and right subintervals)? For the interval [i, i] of length 1, the values of the four quantities are equal to $a_i $. For intervals of length greater than 1:</p>
<p>The first thing that is best maintained is the iSum. The iSum of the interval [l, r] is equal to the iSum of the “left subinterval” plus the iSum of the “right subinterval”.<br>For the lSum of [l, r], there are two possibilities, it is either equal to the lSum of the “left subinterval”, or equal to the iSum of the “left subinterval” plus the lSum of the “right subinterval”, whichever is greater.<br>For the rSum of [l, r], in the same way, it is either equal to the rSum of the “right subinterval”, or equal to the iSum of the “right subinterval” plus the rSum of the “left subinterval”, whichever is greater.<br>After calculating the above three quantities, it is easy to calculate the mSum of [l, r]. We can consider whether the interval corresponding to the mSum of [l, r] spans m - it may not span m, that is, the mSum of [l, r] may be one of the mSum of the “left subinterval” and the mSum of the “right subinterval”; it may also span m, it may be the sum of the rSum of the “left subinterval” and the lSum of the “right subinterval”. The greater of the three.<br>This way the problem is solved.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">status</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (lSum, rSum, mSum, iSum) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lSum</span> = lSum;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rSum</span> = rSum;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mSum</span> = mSum;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">iSum</span> = iSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pushUp</span> = (<span class="params">l, r</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> iSum = l.<span class="property">iSum</span> + r.<span class="property">iSum</span>;</span><br><span class="line">    <span class="keyword">const</span> lSum = <span class="title class_">Math</span>.<span class="title function_">max</span>(l.<span class="property">iSum</span> + r.<span class="property">lSum</span>, l.<span class="property">lSum</span>);</span><br><span class="line">    <span class="keyword">const</span> rSum = <span class="title class_">Math</span>.<span class="title function_">max</span>(r.<span class="property">iSum</span> + l.<span class="property">rSum</span>, r.<span class="property">rSum</span>);</span><br><span class="line">    <span class="keyword">const</span> mSum = <span class="title class_">Math</span>.<span class="title function_">max</span>(l.<span class="property">mSum</span>, r.<span class="property">mSum</span>, l.<span class="property">rSum</span> + r.<span class="property">lSum</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">status</span>(lSum, rSum, mSum, iSum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params">nums, l, r</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (l = r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">status</span>(nums[l], nums[l], nums[l], nums[l]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> m = <span class="title class_">Math</span>.<span class="title function_">floor</span>((l + r) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> lsub = <span class="title function_">get</span>(nums, l, m);</span><br><span class="line">    <span class="keyword">const</span> rsub = <span class="title function_">get</span>(nums, m + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">pushUp</span>(lsub, rsub);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">get</span>(nums, <span class="number">0</span>, nums.<span class="property">length</span> - <span class="number">1</span>).<span class="property">mSum</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Kinematic-solution"><a href="#Kinematic-solution" class="headerlink" title="Kinematic solution"></a>Kinematic solution</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        pre = <span class="title class_">Math</span>.<span class="title function_">max</span>(pre + nums[i], nums[i]);</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(pre, max)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Reference article:</p>
<p><a href="https://zhuanlan.zhihu.com/p/45986027">https://zhuanlan.zhihu.com/p/45986027</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Docker Introduction Notes</title>
    <url>/en/posts/6b3a9e14/</url>
    <content><![CDATA[<p>Recently, I want to use Docker, and I found a few entry-level blogs in the evening, summarizing and practicing.<br><span id="more"></span></p>
<h2 id="Basic-concepts"><a href="#Basic-concepts" class="headerlink" title="Basic concepts"></a>Basic concepts</h2><h3 id="The-problem-of-environment-configuration"><a href="#The-problem-of-environment-configuration" class="headerlink" title="The problem of environment configuration"></a>The problem of environment configuration</h3><p>One of the biggest hassles in software development is environment configuration. The environments of users’ computers are different. How do you know which machines your software will run on?</p>
<p>Users must ensure two things: the settings of the operating system, and the installation of various libraries and components. Only if they are correct can the software run. For example, to install a Python application, the computer must have a Python engine, various dependencies, and possibly configure environment variables.</p>
<p>If some old modules are not compatible with the current environment, it will be troublesome. Developers often say “It works on my machine”, which means that other machines are likely not to run.</p>
<p>Configuring the environment was so troublesome that it would take time to do it all over again when changing a machine. Many people thought, can the problem be fundamentally solved, and the software can be installed with the environment? That is to say, when installing, copy the original environment exactly.</p>
<h3 id="Virtual-machine"><a href="#Virtual-machine" class="headerlink" title="Virtual machine"></a>Virtual machine</h3><p>Virtual machine (virtual machine) is a solution with environment installation. It can run another operating system within one operating system, such as Windows system running Linux system. The application has no awareness of this, because the virtual machine looks exactly like the real system, while for the underlying system, the virtual machine is just an ordinary file that can be deleted without any effect on other parts.</p>
<p>Although users can restore the original environment of the software through virtual machines. However, this solution has several drawbacks.</p>
<p><strong> (1) Too much resource occupation </strong></p>
<p>The virtual machine monopolizes a portion of memory and hard disk space. When it runs, other programs cannot use these resources. Even if the applications in the virtual machine actually use only 1MB of memory, the virtual machine still needs several hundred MB of memory to run.</p>
<p><strong> (2) Multiple redundant steps </strong></p>
<p>Virtual machines are complete operating systems, and some system-level operation steps often cannot be skipped, such as user login.</p>
<p><strong> (3) Slow startup </strong></p>
<p>As long as it takes to start the operating system, it takes to start the virtual machine. It may take several minutes for the application to actually run.</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Because of these shortcomings, Linux developed another virtualization technology: Linux Containers (LXC).</p>
<p><strong> Linux container does not simulate a complete operating system, but isolates processes. </strong> In other words, it sets a<a href="https://opensource.com/article/18/1/history-low-level-container-runtimes">保护层</a>For the process inside the container, the various resources it touches are virtual, thus achieving isolation from the underlying system.</p>
<p>Since containers are process-level, they have many advantages over virtual machines.</p>
<p><strong> (1) Start fast </strong></p>
<p>The application inside the container is directly a process of the underlying system, not a process inside the virtual machine. Therefore, starting the container is equivalent to starting a process on the local machine, instead of starting an operating system, which is much faster.</p>
<p><strong> (2) Low resource usage </strong></p>
<p>Containers only occupy the resources they need, not those that are not used; Since virtual machines are complete operating systems, they inevitably occupy all resources. In addition, multiple containers can share resources, and virtual machines are exclusive resources.</p>
<p><strong> (3) Small size </strong></p>
<p>The container only needs to contain the components used, and the virtual machine is the packaging of the entire operating system, so the container file is much smaller than the virtual machine file.</p>
<p>In short, containers are a bit like lightweight virtual machines that can provide a virtualized environment, but at a much lower cost.</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p><strong> Docker is an encapsulation of Linux containers, providing a simple and easy-to-use container interface. </strong> It is currently the most popular Linux container solution.</p>
<p>Docker packages the application and its dependencies in a file. Running this file will generate a virtual container. The program runs in this virtual container as if it were running on a real physical machine. With Docker, there is no need to worry about environmental issues.</p>
<p>Overall, Docker’s interface is quite simple. Users can easily create and use containers and put their own applications into containers. Containers can also be version managed, copied, shared, and modified, just like managing ordinary code.</p>
<h3 id="Docker-1"><a href="#Docker-1" class="headerlink" title="Docker"></a>Docker</h3><p>There are currently three main categories of Docker’s main uses.</p>
<p><strong> (1) Provide a one-time environment. </strong> For example, provide Unit Test and build environments when testing other people’s software locally and continuous integration.</p>
<p><strong> (2) Provide elastic Cloud as a Service. </strong> Because Docker containers can be turned on and off, they are very suitable for dynamic scaling and shrinking.</p>
<p><strong> (3) Set up a micro-service structure. </strong> Through multiple containers, a machine can run multiple services, so the micro-service structure can be simulated locally.</p>
<h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p><strong> Docker packages the application and its dependencies in an image file. </strong> Only through this file can a Docker container be generated. The image file can be seen as a template for the container. Docker generates container instances from the image file. The same image file can generate multiple container instances running simultaneously.</p>
<p>Image is a binary file. In actual development, an image file is often generated by inheriting another image file and adding some personalized settings. For example, you can add an Apache server to it on the basis of Ubuntu image to form your image.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Image files are universal, and the image files from one machine are copied to another machine and can still be used. Generally speaking, in order to save time, we should try to use image files made by others instead of making them ourselves. Even if you want to customize, you should process based on other people’s image files instead of making them from scratch.</p>
<p>In order to facilitate sharing, after the image file is created, it can be uploaded to the online repository. Docker’s official repository <a href="https://hub.docker.com/">Docker Hub</a> It is the most important and commonly used image repository. In addition, it is possible to sell image files made by yourself.</p>
<h3 id="Example-hello"><a href="#Example-hello" class="headerlink" title="Example: hello"></a>Example: hello</h3><p>Below we go through the simplest image file “<a href="https://hub.docker.com/r/library/hello-world/">hello world”</a>Get a feel for Docker.</p>
<p>It should be noted that the domestic official repository connected to Docker is very slow and will be disconnected. You need to change the default repository to the domestic mirroring website. The specific modification method is in<a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html">下一篇文章</a>The first section of. Friends in need, you can take a look first.</p>
<p>First, run the following command to grab the image file from the repository to local.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>In the above code, ‘docker image pull’ is the command to grab the image file. ‘library/hello-world’ is the location of the image file in the repository, where’library ‘is the group where the image file is located, and’hello-world’ is the name of the image file.</p>
<p>Due to the image files officially provided by Docker, they are all placed in<a href="https://hub.docker.com/r/library/"><code>library</code></a>Group, so it’s the default group and can be omitted. Therefore, the above command can be written like this.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>After the capture is successful, you can see the image file locally.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Now run this image file.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>The docker container run command generates a running container instance from the image file.</p>
<p>Note that the’docker container run ‘command has the function of automatically crawling image files. If no image file is found locally, it will be automatically crawled from the repository. Therefore, the previous’docker image pull’ command is not a necessary step.</p>
<p>If it runs successfully, you will read the following output on the screen.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">This</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</blockquote>
<p>After outputting this prompt, ‘hello world’ will stop running and the container will automatically terminate.</p>
<p>Some containers do not automatically terminate because they provide services. For example, installing and running Ubuntu image can experience the Ubuntu system from the command line.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>For those containers that do not automatically terminate, you must use<a href="https://docs.docker.com/engine/reference/commandline/container_kill/"><code>docker container kill</code></a> Command to terminate manually.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Container-file"><a href="#Container-file" class="headerlink" title="Container file"></a>Container file</h3><p><strong> The container instance generated by the image file is itself a file, called the container file. </strong> That is to say, once the container is generated, there will be two files at the same time: the image file and the container file. And closing the container does not delete the container file, it just stops running.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>The output of the above command includes the ID of the container. This ID needs to be provided in many places, such as the’docker container kill ‘command to terminate the container operation in the previous section.</p>
<p>The terminated container file will still occupy hard disk space and can be used<a href="https://docs.docker.com/engine/reference/commandline/container_rm/"><code>docker container rm</code></a>Command to delete.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>After running the above command, using the command’docker container ls —all ‘, you will find that the deleted container file has disappeared.</p>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>After learning to use image files, the next question is, how can you generate image files? If you want to promote your own software, it is necessary to make your own image files.</p>
<p>This requires the use of the Dockerfile. It is a text file used to configure image. Docker generates a binary image file from this file.</p>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><h3 id="Building-web-services"><a href="#Building-web-services" class="headerlink" title="Building web services"></a>Building web services</h3><p>First, we need to pull centos mirroring.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 80 --name web -i -t centos /bin/bash</span><br><span class="line">Copy the code</span><br></pre></td></tr></table></figure>
<p>Next, we install the nginx server and execute the following command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">Copy the code</span><br></pre></td></tr></table></figure>
<p>After installing the Nginx source, you can officially install Nginx.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br><span class="line">Copy the code</span><br></pre></td></tr></table></figure>
<p>At this point, we can enter the command’whereis nginx ‘to see the installation path. Finally, we also need to run Nginx.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx</span><br><span class="line">Copy the code</span><br></pre></td></tr></table></figure>
<p>Now, we do’ctrl + P + Q ‘to switch to the background. Then, use’docker ps -a’ to see the randomly assigned ports.</p>
<p>Then access <a href="http://127.0.0.1">http://127.0.0.1</a>: Random Port Number through the browser.</p>
<h3 id="Build-mirroring"><a href="#Build-mirroring" class="headerlink" title="Build mirroring"></a>Build mirroring</h3><p>There are two ways to build mirroring in Docker. One way is to use the’docker commit ‘command, and the other way is to use the’docker build’ command and the’Dockerfile ‘file. Among them, it is not recommended to use the’docker commit’ command for building because it does not standardize the whole process. Therefore, it is more recommended to use the’docker build ‘command and the’Dockerfile’ file to build our mirroring in enterprises. We use the’Dockerfile ‘file to make building mirroring more repeatable, while ensuring standardization of startup scripts and running programs.</p>
<h3 id="Build-the-first"><a href="#Build-the-first" class="headerlink" title="Build the first"></a>Build the first</h3><p>Now, let’s move on to the actual combat. Here, we build a mirroring from the web server we set up at the beginning. First, we need to create an empty Dokcerfile file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir dockerfile_test</span><br><span class="line">cd dockerfile_test/</span><br><span class="line">touch Dockerfile</span><br><span class="line">nano Dockerfile</span><br><span class="line">Copy the code</span><br></pre></td></tr></table></figure>
<p>Next, we need to write a Dockerfile with the following code listing</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER LiangGzone &quot;lianggzone@163.com&quot;</span><br><span class="line">RUN rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">RUN yum install -y nginx</span><br><span class="line">EXPOSE 80</span><br><span class="line">Copy the code</span><br></pre></td></tr></table></figure>
<p>Finally, we build with the’docker build ‘command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t=&quot;lianggzone/nginx_demo:v1&quot; .</span><br><span class="line">Copy the code</span><br></pre></td></tr></table></figure>
<p>We can take a look at our new mirroring with docker images.</p>
<p>Now, let’s understand the whole process. First, ‘FROM centos: 7’ is the first step that Dockerfile must take. It will run a container from an existing mirroring. In other words, Docker needs to rely on a base mirroring for building. Here, we specify centos as the base mirroring, and its version is 7 (CentOS 7). Then, we specify the author of the mirroring as LiangGzone and the mailbox as lianggzone@163.com through’MAINTAINER LiangGzone “lianggzone@163.com”. This helps to tell the user its author and contact information. Next, we execute two RUN commands to download and install Nginx, and finally expose port 80 of the Dokcer container through’EXPOSE 80 ‘. Note that the execution order of Docker is executed from top to bottom, so we need to clarify the execution order of the entire process. In addition, Docker creates a new mirroring layer and commits after each instruction.</p>
<p>We use the’docker build ‘command to build, specifying’ -t ‘to tell Docker the name and version of mirroring. Note that if no tag is specified, Docker will automatically set a lastest tag for mirroring. Another point, we have a final’. ‘to let Docker go to the current local directory to find the Dockerfile file. Note that Docker commits the result as mirroring at each build step, and then treats the previous mirroring layer as a cache, so when we rebuild a similar mirroring layer, we will directly reuse the previous mirroring. If we need to skip, we can use the ‘—no-cache’ option to tell Docker not to cache.</p>
<h3 id="Command-discrimination-1-RUN-CMD-ENTRYPOINT"><a href="#Command-discrimination-1-RUN-CMD-ENTRYPOINT" class="headerlink" title="Command discrimination 1: RUN, CMD, ENTRYPOINT"></a>Command discrimination 1: RUN, CMD, ENTRYPOINT</h3><p>The purposes of the three instructions’RUN ‘,’ CMD ‘, and’ENTRYPOINT’ are very familiar. The difference is that the’RUN ‘instruction is a command to run when the container is built, while’CMD’ and’ENTRYPOINT ‘execute shell commands when the container is started, and’RUN’ will be overwritten by the’docker run ‘command, but’ENTRYPOINT’ will not be overwritten. In fact, any arguments specified by the’docker run ‘command will be passed to the’ENTRYPOINT’ instruction again as arguments. The’CMD ‘and’ENTRYPOINT’ directives can also be used together. For example, we can use the exec form of’ENTRYPOINT ‘to set fixed default commands and parameters, and then use either form of’CMD’ to set other default values that may change.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]</span><br><span class="line">CMD [&quot;-c&quot;]</span><br><span class="line">Copy the code</span><br></pre></td></tr></table></figure>
<h3 id="Command-discrimination-2-ADD-COPY"><a href="#Command-discrimination-2-ADD-COPY" class="headerlink" title="Command discrimination 2: ADD, COPY"></a>Command discrimination 2: ADD, COPY</h3><p>The’ADD ‘and’COPY’ directives are used in the same way, the only difference is that’ADD ‘supports extracting and decompressing archive files (tar, gzip, bzip2, etc.). Note that the directory that the’COPY’ directive needs to copy must be placed in the same directory as the Dockerfile file.</p>
<h3 id="More-docker-commands"><a href="#More-docker-commands" class="headerlink" title="More docker commands"></a>More docker commands</h3><p><a href="https://docs.docker.com/engine/reference/commandline/docker/">https://docs.docker.com/engine/reference/commandline/docker/</a></p>
<p>Reference link:</p>
<p><a href="https://juejin.im/post/5cacbfd7e51d456e8833390c">https://juejin.im/post/5cacbfd7e51d456e8833390c</a></p>
<p><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>Double pointer algorithm</title>
    <url>/en/posts/9fba193f/</url>
    <content><![CDATA[<h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><h3 id="Fast-and-slow-pointer"><a href="#Fast-and-slow-pointer" class="headerlink" title="Fast and slow pointer"></a>Fast and slow pointer</h3><p>The two-pointer technique is further divided into two categories, one is “fast and slow pointers”, and the other is “left and right pointers”. The former mainly solves problems in linked lists, such as typically determining whether a linked list contains a ring; the latter mainly solves problems in arrays (or strings), such as binary search.</p>
<span id="more"></span>
<p>The fast and slow pointers are generally initialized to point to the head node of the linked list. When advancing, the fast pointer is fast in front and the slow pointer is slow in the back, which skillfully solves some problems in the linked list.</p>
<p>Determine whether the linked list contains a ring.</p>
<p>This should belong to the most basic operation of linked lists. If readers already know this technique, they can skip it.</p>
<p>The characteristic of a single linked list is that each node only knows the next node, so a pointer cannot determine whether the linked list contains a ring.</p>
<p>If there is no ring in the linked list, then this pointer will eventually encounter a null pointer to indicate that the linked list is at the end, which is good to say, it can be judged that the linked list does not contain rings.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">boolean <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (head != null)</span><br><span class="line">        head = head.next;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, if the linked list contains a ring, then the pointer will fall into an infinite loop, because there is no null pointer as the tail node in the ring array.</p>
<p>The classic solution is to use two pointers, one running fast and the other running slow. If it does not contain a ring, the fast pointer will eventually encounter null, indicating that the linked list does not contain rings; if it contains rings, the fast pointer will eventually exceed the slow pointer once and meet the slow pointer, indicating that the linked list contains rings.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">boolean <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    ListNode fast, slow;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (fast  slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Knowing that the linked list contains a ring, return the starting position of this ring.</p>
<p>This problem is not difficult at all. It is a bit like a brain teaser. Let’s look directly at the code first.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    ListNode fast, slow;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span> (fast  slow) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//The above code is similar to the hasCycle function</span></span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can see that when the fast and slow pointers meet, let either pointer point to the head node, and then let them both move forward at the same speed. When they meet again, the node position is the position where the ring starts. Why is this?</p>
<p>At the first encounter, if the slow pointer slow took k steps, then the fast pointer fast must have taken 2k steps, that is, k steps more than slow (that is, the length of the ring).</p>
<p>Let the distance between the meeting point and the starting point of the ring be m, then the distance between the starting point of the ring and the head node head is k - m, that is, if you advance k - m steps from head, you can reach the starting point of the ring.</p>
<p>Coincidentally, if you continue to advance k - m steps from the meeting point, you also happen to reach the starting point of the ring.</p>
<p>So, as long as we point either of the fast or slow pointers back to head, and then the two pointers move forward at the same speed, they will meet after k - m steps, and the place where they meet is the starting point of the ring.</p>
<p>Find the middle point of the linked list.</p>
<p>Similar to the above idea, we can also make the fast pointer advance two steps at a time, and the slow pointer advance one step at a time. When the fast pointer reaches the end of the linked list, the slow pointer is in the middle of the linked list.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//slow is in the middle</span></span><br><span class="line"><span class="keyword">return</span> slow;</span><br></pre></td></tr></table></figure>
<p>When the length of the linked list is odd, slow happens to stop at the midpoint; if the length is even, the final position of slow is right-of-center:</p>
<p>An important function of finding points in a linked list is to merge and sort the linked list.</p>
<p>Recall the merging sort of arrays: find the midpoint index recursion divides the array into two parts, and finally merges two ordered arrays. For linked lists, merging two ordered linked lists is very simple, and the difficulty lies in binary.</p>
<p>But now you have learned to find the midpoint of the linked list, you can achieve the two points of the linked list. The specific content of merging and sorting is not specifically expanded in this article.</p>
<p><strong> 4. Find the k-th element from the bottom of the linked list </strong></p>
<p>Our idea is to use the fast and slow pointer, let the fast pointer take k steps first, and then the fast and slow pointers start to advance at the same speed. In this way, when the fast pointer reaches null at the end of the linked list, the position of the slow pointer is the k-th penultimate linked list node (for simplicity, assuming k does not exceed the length of the linked list):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ListNode slow, fast;</span><br><span class="line">slow = fast = head;</span><br><span class="line"><span class="keyword">while</span> (k-- &gt; <span class="number">0</span>) </span><br><span class="line">    fast = fast.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fast != null) &#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slow;</span><br></pre></td></tr></table></figure>
<h3 id="Left-and-right-pointers"><a href="#Left-and-right-pointers" class="headerlink" title="Left and right pointers"></a>Left and right pointers</h3><p>The left and right pointers in the array actually refer to two index values, usually initialized as left = 0, right = nums.length - 1.</p>
<p><strong> 1, binary search </strong></p>
<p>The previous “binary search” has a detailed explanation, here only write the simplest binary algorithm, designed to highlight its double pointer characteristics:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]  target)</span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong> 2, the sum of two numbers </strong></p>
<p>Let’s take a look at a LeetCode topic directly: <a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p>
<p>As long as the array is ordered, you should think of the double-pointer trick. The solution to this problem is somewhat similar to binary search. By adjusting left and right, you can adjust the size of sum:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] <span class="built_in">twoSum</span>(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> sum = nums[left] + nums[right];</span><br><span class="line">        <span class="keyword">if</span> (sum  target) &#123;</span><br><span class="line">            The required index <span class="keyword">for</span> the topic starts from <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">int</span>[]&#123;left + <span class="number">1</span>, right + <span class="number">1</span>&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            Left ++; <span class="comment">// make the sum bigger</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">            Right --; <span class="comment">// make the sum smaller</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">int</span>[]&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong> 3. Reverse array </strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// swap(nums[left], nums[right])</span></span><br><span class="line">        <span class="type">int</span> temp = nums[left];</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        nums[right] = temp;</span><br><span class="line">        left++; right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong> 4, sliding window algorithm </strong></p>
<p>This may be the highest state of the two-pointer technique. If you master this algorithm, you can solve a large class of substring matching problems, but the “sliding window” is slightly more complex than the above algorithms.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Sum of three numbers:</p>
<p><a href="https://leetcode-cn.com/problems/3sum/">https://leetcode-cn.com/problems/3sum/</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> a - b &#125;)</span><br><span class="line">  <span class="comment">//Sort first before clamping left and right</span></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; nums.<span class="property">length</span>; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[k] &gt; <span class="number">0</span>) <span class="keyword">break</span></span><br><span class="line">    <span class="comment">//If the current number is greater than 0, no loop is needed, because k is the smallest number, the smallest number is already greater than 0, and the sum of three numbers cannot be equal to 0.</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k] = nums[k - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">    <span class="comment">//deduplicate</span></span><br><span class="line">    <span class="keyword">let</span> i = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> j = nums.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="comment">//Pinch condition, if both boundaries are next to each other, there is no need to loop</span></span><br><span class="line">      <span class="keyword">let</span> sum = nums[k] + nums[i] + nums[j]</span><br><span class="line">      <span class="keyword">if</span> (sum = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//push to the return array if the condition is met</span></span><br><span class="line">        res.<span class="title function_">push</span>([nums[k], nums[i], nums[j]])</span><br><span class="line">        <span class="keyword">while</span> (nums[i] = nums[++i]) &#123; &#125;</span><br><span class="line">        <span class="keyword">while</span> (nums[j] = nums[--j]) &#123; &#125;</span><br><span class="line">        <span class="comment">//deduplicate, equivalent to the following four sentences, after deduplicate, it also points to the one that is not repeated</span></span><br><span class="line">        <span class="comment">// while (nums[i] = nums[i + 1]) &#123; i++ &#125;</span></span><br><span class="line">        <span class="comment">// while (nums[j] = nums[j - 1]) &#123; j-- &#125;</span></span><br><span class="line">        <span class="comment">// i++</span></span><br><span class="line">        <span class="comment">// j--</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//less than 0 means that the number on the left margin is small, move to the right, because the whole number is sorted</span></span><br><span class="line">        <span class="comment">//k &gt; i + j, move i to the right to make i + j bigger</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        i++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//left clip</span></span><br><span class="line">        j--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Link to the original text of the principle part:<a href="[https://github.com/labuladong/fucking-algorithm/blob/master/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7.md](https://github.com/labuladong/fucking-algorithm/blob/master/算法思维系列/双指针技巧.md">双指针技巧</a>) </p>
<p>Thanks to God Labuladong for his series of blogs, which really inspired me a lot.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Electron Multi-Process Scheme</title>
    <url>/en/posts/954dea55/</url>
    <content><![CDATA[<p>Most of this week has been spent developing an Electron-based client.</p>
<p>Electron has a built-in chrome kernel, so it allows us to develop clients like a website.</p>
<p>During the development process, we encountered a problem that our project needed to load AI models locally and perform calculations.</p>
<p>Have seen my introduction<a href="https://sunra.top/posts/bbe10e1c/">浏览器结构那篇文章</a>You should know that under the current chrome structure, the network process and the rendering process are completely separate, so loading the model will not pend the rendering process, so I don’t care.</p>
<p>But it turns out that my page still has cards.</p>
<p>So I recorded it with the Performance panel of the developer tools, and it was found that it was the recognition function after the model was loaded. It was a Promise, a microtask, and actually a coroutine, and it was a CPU-intensive coroutine.</p>
<span id="more"></span>
<p>So here comes my first question:</p>
<h2 id="Will-the-coroutine-pending-the-process"><a href="#Will-the-coroutine-pending-the-process" class="headerlink" title="Will the coroutine pending the process?"></a>Will the coroutine pending the process?</h2><p>To solve this problem, we must first understand what a coroutine is.</p>
<h3 id="What-is-the-process"><a href="#What-is-the-process" class="headerlink" title="What is the process"></a>What is the process</h3><p>Process is the smallest unit of system quota, the system consists of a process (program), in general, including text area (text region), data area (data region) and stack (stack region).</p>
<ul>
<li>Text area stores code executed by the processor<br>The data area stores variables and dynamically allocated memory used during process execution.</li>
<li>The stack area stores the instructions and local variables for the active procedure call.</li>
</ul>
<p>Therefore, the creation and destruction of processes are relative to system resources, so it is a relatively expensive operation. Processes have three states:</p>
<ol>
<li>Waiting state: waiting for the completion of an event;</li>
<li>Ready state: waiting for the system to allocate a processor to run;</li>
<li>Running state: occupies that the processor is running.</li>
</ol>
<p>Processes compete preemptively for the CPU to run itself, while in the case of CPU core solo, only one process can execute the code at the same time, but the implementation of multi-process is to switch between different processes quickly through the CPU, so it looks like multiple Processes are running at the same time.</p>
<blockquote>
<p>Communication issues:</p>
</blockquote>
<h3 id="What-is-a-thread"><a href="#What-is-a-thread" class="headerlink" title="What is a thread"></a>What is a thread</h3><ul>
<li>Threads belong to processes</li>
<li>Threads share the memory address space of the process</li>
<li>Threads hardly occupy system resources, communication problems: the process is equivalent to a container, and the thread runs in the container, so for the things in the container, the thread is shared, so the communication between threads can be directly through global variables Communication, but the resulting results, such as when multiple threads read and write the same address variable, will bring unexpected consequences, so the role of various locks is introduced at this time, such as mutual exclusion.</li>
</ul>
<p>At the same time, multi-threading is unsafe. When one thread crashes, it will cause the entire process to crash, that is, other threads also hang up, but multi-process will not. If one process hangs up, another process will still run as usual.</p>
<ul>
<li><strong><em> Process is the smallest unit of system allocation of resources </em></strong></li>
<li><strong><em> Thread is the smallest unit of CPU scheduling </em></strong></li>
<li><ul>
<li>Since there is only one thread in the default process, multi-core CPUs handle multiple processes like one process with one core *</li>
</ul>
</li>
</ul>
<h3 id="What-is-a-coroutine"><a href="#What-is-a-coroutine" class="headerlink" title="What is a coroutine"></a>What is a coroutine</h3><p>The concept of coroutine is relative to multi-process or multi-threading. It is a collaborative User Mode thread</p>
<ol>
<li>In contrast, threads and processes are preemptively executed, which means that the system helps us automatically switch threads and processes quickly to make us feel synchronized. This switching action is automatically completed by the system</li>
<li>Cooperative execution means that if you want to switch threads, you must have the user switch manually. The reason why the coroutine is so fast is because there is no need for automatic system switching (automatic system switching will waste a lot of resources), and <strong> coroutine It is our user’s manual switching </strong>, and it is executed on the same stack, which will be very fast and save resources.</li>
</ol>
<p>However, coroutines have their own problems: coroutines can only have one process, one thread running, and once IO blocking occurs, the program will get stuck.</p>
<p>So before we use coroutines, we must ensure that all of our IO must be non-blocking. That is, asynchronous.</p>
<p>It means that multiple threads cooperate with each other to complete Asynchronous Tasks.</p>
<h3 id="What-does-multi-core-and-multi-threading-of-CPU-mean"><a href="#What-does-multi-core-and-multi-threading-of-CPU-mean" class="headerlink" title="What does multi-core and multi-threading of CPU mean?"></a>What does multi-core and multi-threading of CPU mean?</h3><p>The number of cpu physical cores of a computer is the number of threads that can be parallel at the same time (cpu can only see threads, threads are the smallest unit of cpu scheduling allocation). Due to hyperthreading technology, the number of threads that can actually be parallel is usually twice the number of physical cores, which is also the number of cores seen by the operating system. We only care about the number of threads that can be parallel, so the number of cores mentioned later is the number of cores seen by the operating system, and the core referred to is also the core (not the physical core) after hyperthreading technology.</p>
<p>If the computer has multiple cpu cores, and the total number of threads in the computer is less than the number of cores, threads can run in parallel in different cores. If it is core solo multithreading, then the multithreads are not parallel, but Concurrency, that is, in order to balance the load, the cpu scheduler will constantly switch different threads on the core solo for execution, but we have said that a core can only run one thread, so although concurrency makes us look like tasks between different threads are executed in parallel, but in fact it is more expensive due to the increased overhead of thread switching If it is multi-core multi-threading, and the number of threads is greater than the number of cores, some of them will continue to switch and execute concurrently, but in fact the maximum number of parallel or the number of cores in the current process, so blindly increasing the number of threads will not only make your program faster, but will add extra overhead to your program.</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>From this perspective, coroutines actually give the right to switch threads to the code, that is, the user.</p>
<p>Only one thread can execute the same process at the same time, so a single thread in JavaScript will pend the rendering process, so the coroutine will actually pend the process.</p>
<h2 id="How-to-solve-it"><a href="#How-to-solve-it" class="headerlink" title="How to solve it?"></a>How to solve it?</h2><p>Since I have a CPU-intensive coroutine that needs to be executed regularly, it may pause my current JavaScript thread and then pause the rendering process, why don’t I find a way to open a separate process to perform this task?</p>
<p>How does Electron handle multiple processes?</p>
<p>If you go to read the official doc, you will not find a special multi-process solution. There is only a multi-threaded solution called <strong> Web Worker </strong>. This is the first time I have seen it. If you are interested, you can check the information yourself. It is not difficult to use, nor is it the interface of Electron, but provided by JavaScript.</p>
<p>But this does not solve our problem, because it is to open another thread, if our CPU is core solo single-threaded, and there is no use, we need to open another process.</p>
<p>Although we rarely have computers that are core solo single-threaded, the use of Web Workers requires deep copying of parameters, and the imported parameters of this detection tool require video streaming, which cannot be deeply copied and will throw exceptions, so Not suitable.</p>
<p>So how do we solve our problem?</p>
<p>In fact, Electron itself is a multi-process architecture, just like Chrome will be a separate rendering process for each web page of different stations, Electron can also do it, we only need a new BrowserWindow on it, and then let Our detection task works in a separate rendering process, and the results are sent to the main rendering process through the IPC communication interface provided by Electron.</p>
<p>Reference link:</p>
<p><a href="https://juejin.cn/post/6844903607892967432">https://juejin.cn/post/6844903607892967432</a></p>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>Element UI Notes</title>
    <url>/en/posts/76e9bea4/</url>
    <content><![CDATA[<p>Take note of the pitfalls you encounter while using elementUI.</p>
<p>Some event names in elementUI are confusing, such as handleSizeChange, handleCLose, etc.</p>
<span id="more"></span>
<h2 id="Paging-component"><a href="#Paging-component" class="headerlink" title="Paging component"></a>Paging component</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">      @size-change=<span class="string">&quot;handleSizeChange&quot;</span></span><br><span class="line">      @current-change=<span class="string">&quot;handleCurrentChange&quot;</span></span><br><span class="line">      :current-page.<span class="property">sync</span>=<span class="string">&quot;currentPage1&quot;</span></span><br><span class="line">      :page-size=<span class="string">&quot;100&quot;</span></span><br><span class="line">      layout=<span class="string">&quot;total, prev, pager, next&quot;</span></span><br><span class="line">      :total=<span class="string">&quot;1000&quot;</span>&gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br></pre></td></tr></table></figure>
<p>The handleSizeChange in this component sounds like it is triggered when the pageSize changes. It feels like the pageSize has been changed when it is triggered. In fact, you need to reassign it in the function to be useful.</p>
<h2 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog</span><br><span class="line">  title=<span class="string">&quot;Tips&quot;</span></span><br><span class="line">  :visible.<span class="property">sync</span>=<span class="string">&quot;dialogVisible&quot;</span></span><br><span class="line">  width=<span class="string">&quot;30%&quot;</span></span><br><span class="line">  @close=<span class="string">&quot;handleClose&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a message<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>Confirm<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure>
<p>The display and hide of the dialog in the above code is determined by “dialogVisible”. At this time, it is invalid for you to directly click the close button. We must set “dialogVisible” to false in handleClose to be effective.</p>
<h2 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h2><p>If the time returned by the element-ui time selector is directly spelled into the url, it will be converted to GMT + 8 time, which is the local time, not UTC time.</p>
<p>So if you want to use UTC time, you need to convert it first.</p>
<p>If you are using moment conversion, please note that the time converted by the utc function of moment has no milliseconds.</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Element UI Table tree component lazy loading problem fix</title>
    <url>/en/posts/7a981791/</url>
    <content><![CDATA[<p>Last week, when using an elementUI table, I found that every time I click on the checkbox of the table, the page will be stuck for close to two seconds, so I used vue’s devtools to record where the operation time is consumed each time. It was found that the main reason is that although the elementUI table provides tree data and lazy loading functions, although the child nodes are not expanded, they have already been rendered.</p>
<p>Therefore, the elementUI table provides the function of lazy loading, but this lazy loading function is problematic, because the lazy loading function will only be called once, and no matter how the data is changed in the future, the sub-node will not change.</p>
<p>After analyzing the source code of vue and elementUI, I found the reason and fixed it appropriately. I will record it here.</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:data</span>=<span class="string">&quot;parentResourceList&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">border</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;list-resource-table-wrapper&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:height</span>=<span class="string">&quot;tableHeight&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">row-key</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">lazy</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:load</span>=<span class="string">&quot;lazyLoadChildren&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:tree-props</span>=<span class="string">&quot;&#123;children: &#x27;children&#x27;, hasChildren: &#x27;hasChildren&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">stripe</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">selection-change</span>=<span class="string">&quot;onSelectionChange&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:default-sort</span>=<span class="string">&quot;&#123; prop: &#x27;assetId&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">&quot;listResourceTableRef&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">loadResources</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">let</span> response = <span class="keyword">await</span> resourceGateway.<span class="title function_">getAssets</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isSuccessResponse</span>(response)) &#123;</span><br><span class="line">          <span class="keyword">let</span> rows = response.<span class="property">data</span>;</span><br><span class="line">          <span class="keyword">let</span> newResource = &#123;&#125;;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">childrenResourceMap</span> = &#123;&#125;;</span><br><span class="line">          rows.<span class="title function_">forEach</span>(<span class="function">(<span class="params">row</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (newResource[row.<span class="property">assetId</span>]) &#123;</span><br><span class="line">              newResource[row.<span class="property">assetId</span>].<span class="property">hasChildren</span> = <span class="literal">true</span>;</span><br><span class="line">              (<span class="variable language_">this</span>.<span class="property">childrenResourceMap</span>[row.<span class="property">assetId</span>] || (<span class="variable language_">this</span>.<span class="property">childrenResourceMap</span>[row.<span class="property">assetId</span>] = [])).<span class="title function_">push</span>(row);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              newResource[row.<span class="property">assetId</span>] = row;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">let</span> result = [];</span><br><span class="line">          _.<span class="title function_">keys</span>(newResource).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> resource = newResource[key];</span><br><span class="line">            result.<span class="title function_">push</span>(resource);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">refreshLazyRows</span>(resource);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">parentResourceList</span> = result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.$_error(<span class="variable language_">this</span>.$t(<span class="string">&#x27;message.loadResourceFail&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$_error(<span class="variable language_">this</span>.$t(<span class="string">&#x27;message.loadResourceFail&#x27;</span>));</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">lazyLoadChildren</span>(<span class="params">tree, treeNode, resolve</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">childrenResourceMap</span>[tree.<span class="property">assetId</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">refreshLazyRows</span>(<span class="params">resource</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> lazyTreeNodeMap = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">listResourceTableRef</span>.<span class="property">store</span>.<span class="property">states</span>.<span class="property">lazyTreeNodeMap</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">childrenResourceMap</span>[resource.<span class="property">assetId</span>]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">childrenResourceMap</span>[resource.<span class="property">assetId</span>].<span class="title function_">some</span>(<span class="function">(<span class="params">childResource</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (_.<span class="title function_">get</span>(lazyTreeNodeMap, childResource.<span class="property">id</span>)) &#123;</span><br><span class="line">            _.<span class="title function_">set</span>(lazyTreeNodeMap, childResource.<span class="property">id</span>, []);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (_.<span class="title function_">get</span>(lazyTreeNodeMap, resource.<span class="property">id</span>)) &#123;</span><br><span class="line">        _.<span class="title function_">set</span>(lazyTreeNodeMap, resource.<span class="property">id</span>, <span class="variable language_">this</span>.<span class="property">childrenResourceMap</span>[resource.<span class="property">assetId</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>The main purpose of the refreshLazyRows () function is to update’this. $refs.listResourceTableRef.store states.lazyTreeNodeMap ‘, which is the object that the child node listens to</p>
<p>As for why the existing mapping should be deleted first, it is because if the old one is not deleted, a new mapping will be added directly, and we will add a new node as the parent node, which will cause the node to be nested layer by layer, and It will cause elementUI to report a duplicate key error.</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>ES6 Class Source Code Analysis</title>
    <url>/en/posts/30718/</url>
    <content><![CDATA[<p>The last blog about React left a pit about Es6 class, about the relationship between class and function, we will discuss this blog.</p>
<p>We come to this blog with two questions:</p>
<ul>
<li>how classes are implemented with functions<br>What is the difference between new class and new function?</li>
</ul>
<span id="more"></span>
<h2 id="How-to-implement-class-with-function"><a href="#How-to-implement-class-with-function" class="headerlink" title="How to implement class with function"></a>How to implement class with function</h2><h3 id="Prototype-chain"><a href="#Prototype-chain" class="headerlink" title="Prototype chain"></a>Prototype chain</h3><p>As we all know, class is actually a syntactic sugar of function, which is based on the prototype chain, so if you want to understand this blog, I suggest you to take a look at my previous blog about prototype chain:<a href="https://kingworker.cn/javascript%e6%89%a7%e8%a1%8c%e6%9c%ba%e5%88%b6%ef%bc%88%e4%ba%94%ef%bc%89%e7%94%a8%e5%85%ac%e5%bc%8f%e8%ae%b2%e6%b8%85%e6%a5%9a%e5%8e%9f%e5%9e%8b%e9%93%be/">用公式讲清楚原型链</a></p>
<h3 id="Using-babel-to-convert-classes-into-es5-code"><a href="#Using-babel-to-convert-classes-into-es5-code" class="headerlink" title="Using babel to convert classes into es5 code"></a>Using babel to convert classes into es5 code</h3><p>We can write a piece of class code and then use<a href="https://babeljs.io/repl/#?browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=MYGwhgzhAEAKCmAnCB7AdgbwFDV8dEALogK7CEqIAUaYAtvADTRgDm8AlNrj4QBYBLCADpaDaAF5oY-Dh7R-Q4W3iSW7ObgC-WTdCJhCA4AoCeAB1VSA5ACN4AtK2u7cEMKYBy9VVS57EeEISRDQFQREZPR05AyMTR2IUP24efDRUEHhhEBRWKgAiAo5orBjQSBgAWXgw-AAPQlqAExgEZHRUvAJiMgpqGWYVf3l5CBJLahLR8KV2NGakNWs6MCyXeR0tIA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=env%2Creact%2Cstage-2&amp;prettier=true&amp;targets=&amp;version=7.13.13&amp;externalPlugins=">babel在线工具</a>Convert it into es5 code, and then analyze it step by step.</p>
<p>First, let’s write a piece of class code</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> type = <span class="string">&#x27;being&#x27;</span></span><br><span class="line"></span><br><span class="line">  sayName ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">intro</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Men</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">gender</span> = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The function after conversion is too long, I will not completely paste here, want to see the full version can go to the above link to see for yourself, we now begin to analyze the transformation of the function step by step.</p>
<h3 id="Auxiliary-function"><a href="#Auxiliary-function" class="headerlink" title="Auxiliary function"></a>Auxiliary function</h3><h4 id="inherits"><a href="#inherits" class="headerlink" title="_inherits"></a>_inherits</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_inherits</span>(<span class="params">subClass, superClass</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass ! <span class="string">&quot;function&quot;</span> &amp;&amp; superClass ! <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Super expression must either be null or a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  subClass.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(superClass &amp;&amp; superClass.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="attr">constructor</span>: &#123; <span class="attr">value</span>: subClass, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (superClass) <span class="title function_">_setPrototypeOf</span>(subClass, superClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The name of this function is used for inheritance, that is, the function will be called when extends.</p>
<p>This function first comes up to determine whether the parent class meets the conditions, if not, directly throw an exception.</p>
<p>This is followed by a call to the Object.create method, which does this:</p>
<p>The Object.create () method creates a new object, using the existing object to provide the <strong>proto</strong> of the newly created object.</p>
<p>That is to say:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">subClass.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(superClass &amp;&amp; superClass.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="attr">constructor</span>: &#123; <span class="attr">value</span>: subClass, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>This code completes inheritance based on the prototype chain. The result of this code is that a new object is created through superClass.prototype, the <strong>proto</strong> of the new object points to superClass.prototype, and then the object is assigned to subClass.prototype.</p>
<p>That is, subClass.prototype. ‘<strong>proto</strong>‘ = superClass.prototype</p>
<p>In this way, the subclass prototype chain has superclass prototypes.</p>
<p>Then there is the last step of _setPrototypeOf, we continue to see what this function does</p>
<h4 id="setPrototypeOf"><a href="#setPrototypeOf" class="headerlink" title="_setPrototypeOf"></a>_setPrototypeOf</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_setPrototypeOf</span>(<span class="params">o, p</span>) &#123;</span><br><span class="line">  _setPrototypeOf =</span><br><span class="line">    <span class="title class_">Object</span>.<span class="property">setPrototypeOf</span> ||</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_setPrototypeOf</span>(<span class="params">o, p</span>) &#123;</span><br><span class="line">      o. _ _ proto _ _ = p;</span><br><span class="line">      <span class="keyword">return</span> o;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_setPrototypeOf</span>(o, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The role of this function is also to construct a prototype chain, and its core purpose is this sentence</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">o. _ _ proto _ _ = p</span><br></pre></td></tr></table></figure>
<p>Combined with the previous auxiliary function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_setPrototypeOf</span>(subClass, superClass)</span><br></pre></td></tr></table></figure>
<p>The result is subClass. ‘<strong>proto</strong>‘ = superClass</p>
<h4 id="isNativeReflectConstruct"><a href="#isNativeReflectConstruct" class="headerlink" title="_isNativeReflectConstruct"></a>_isNativeReflectConstruct</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_isNativeReflectConstruct</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Reflect</span> = <span class="string">&quot;undefined&quot;</span> || !<span class="title class_">Reflect</span>.<span class="property">construct</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Reflect</span>.<span class="property">construct</span>.<span class="property">sham</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Proxy</span> = <span class="string">&quot;function&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span>.<span class="title function_">call</span>(</span><br><span class="line">      <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(<span class="title class_">Boolean</span>, [], <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To understand this code, it is necessary to understand what Reflect is and what Reflect.construct is</p>
<p>First of all, Reflect is actually a new syntax of ES6. You can see what you can do<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">MDN</a>, is not our current focus, we will only focus on one of them for the time being:</p>
<blockquote>
<p>[`Reflect.construct(target,</p>
<p>Construct the function</p>
</blockquote>
<p>Then the role of this function is more obvious, that is, to see if the current execution environment can use Reflect.construct to create new objects.</p>
<h4 id="getPrototypeOf"><a href="#getPrototypeOf" class="headerlink" title="_getPrototypeOf"></a>_getPrototypeOf</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_getPrototypeOf</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  _getPrototypeOf = <span class="title class_">Object</span>.<span class="property">setPrototypeOf</span></span><br><span class="line">    ? <span class="title class_">Object</span>.<span class="property">getPrototypeOf</span></span><br><span class="line">    : <span class="keyword">function</span> <span class="title function_">_getPrototypeOf</span>(<span class="params">o</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> o.<span class="property">__proto__</span> || <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(o);</span><br><span class="line">      &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_getPrototypeOf</span>(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This function is the next prototype in the prototype chain that gets passed parameters, which can also be understood as the object it directly inherits.</p>
<h4 id="typeof"><a href="#typeof" class="headerlink" title="_typeof"></a>_typeof</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_typeof</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="string">&quot;@babel/helpers - typeof&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Symbol</span> = <span class="string">&quot;function&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Symbol</span>.<span class="property">iterator</span> = <span class="string">&quot;symbol&quot;</span>) &#123;</span><br><span class="line">    _typeof = <span class="keyword">function</span> <span class="title function_">_typeof</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _typeof = <span class="keyword">function</span> <span class="title function_">_typeof</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj &amp;&amp;</span><br><span class="line">        <span class="keyword">typeof</span> <span class="title class_">Symbol</span> = <span class="string">&quot;function&quot;</span> &amp;&amp;</span><br><span class="line">        obj.<span class="property">constructor</span> = <span class="title class_">Symbol</span> &amp;&amp;</span><br><span class="line">        obj ! <span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">        ? <span class="string">&quot;symbol&quot;</span></span><br><span class="line">        : <span class="keyword">typeof</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_typeof</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>This code first creates the function variable _typeof through if-else. Since it is es5 code, there is no const and let. This direct variable assignment method is actually the same as var, so it will exist<a href="https://kingworker.cn/javascript%e6%89%a7%e8%a1%8c%e6%9c%ba%e5%88%b6%ef%bc%88%e4%b8%80%ef%bc%89%e5%8f%98%e9%87%8f%e6%8f%90%e5%8d%87/">变量提升</a></p>
<p>The result is that a function is declared in the function scope, assigned to _typeof, and then called to return the result.</p>
<p>Putting why there is this judgment, I should leave a pit here again, we temporarily ignore it, just as it is for browser compatibility.</p>
<h4 id="possibleConstructorReturn"><a href="#possibleConstructorReturn" class="headerlink" title="_possibleConstructorReturn"></a>_possibleConstructorReturn</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_possibleConstructorReturn</span>(<span class="params">self, call</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (call &amp;&amp; (<span class="title function_">_typeof</span>(call) = <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> call = <span class="string">&quot;function&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_assertThisInitialized</span>(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_assertThisInitialized</span>(<span class="params">self</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (self = <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(</span><br><span class="line">      <span class="string">&quot;this hasn&#x27;t been initialised - super() hasn&#x27;t been called&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>First of all, we need to know’void 0 ‘ = undefined` 是 true.</p>
<p>Looking back at this code again, that is, if the call is an object or function, return the call directly.</p>
<p>If not, then see if self is undefined. If so, throw an exception. If not, return self.</p>
<h4 id="createSuper"><a href="#createSuper" class="headerlink" title="_createSuper"></a>_createSuper</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_createSuper</span>(<span class="params">Derived</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> hasNativeReflectConstruct = <span class="title function_">_isNativeReflectConstruct</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">_createSuperInternal</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Super</span> = <span class="title function_">_getPrototypeOf</span>(<span class="title class_">Derived</span>),</span><br><span class="line">      result;</span><br><span class="line">    <span class="keyword">if</span> (hasNativeReflectConstruct) &#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="title class_">NewTarget</span> = <span class="title function_">_getPrototypeOf</span>(<span class="variable language_">this</span>).<span class="property">constructor</span>;</span><br><span class="line">      result = <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(<span class="title class_">Super</span>, <span class="variable language_">arguments</span>, <span class="title class_">NewTarget</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="title class_">Super</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_possibleConstructorReturn</span>(<span class="variable language_">this</span>, result);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Well, after seeing so many auxiliary functions above, they are finally used here.</p>
<p>Let’s take a good look at what this function does:</p>
<ul>
<li>First determine whether the current execution environment can call Reflect.construct, if you can hasNativeReflectConstruct is true.<br>Then the result of this function execution actually returns the _createSuperInternal of another function, which uses the outer parameters, so this is a closure.<br>Let’s see what happens in this closure:<ul>
<li>Get Derived Prototype as Super</li>
<li>if the current environment can call Reflect.construct (hasNativeReflectConstruct is true)</li>
<li>var NewTarget = _getPrototypeOf (this).constructor; Gets the constructor up the prototype chain of the current function executor and assigns it to NewTarget.</li>
<li>result = Reflect.construct (Super, arguments, NewTarget); call new Super with arguments, the constructor of the created object is NewTarget</li>
<li>If hasNativeReflectConstruct is false, call apply directly on this, this inheritance method is actually <strong> borrowing constructor function inheritance </strong> this inheritance method, there are many other inheritance methods, interested can go to my other blog: <a href="https://kingworker.cn/javascript-%e7%bb%a7%e6%89%bf/">https://kingworker.cn/javascript-%e7%bb%a7%e6%89%bf/</a></li>
<li>Finally call _possibleConstructorReturn (this, result), the result is, if result is an object or function, then return result, otherwise if this is not undefined, then return this, do not meet the throw error.</li>
</ul>
</li>
</ul>
<h4 id="classCallCheck"><a href="#classCallCheck" class="headerlink" title="_classCallCheck"></a>_classCallCheck</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_classCallCheck</span>(<span class="params">instance, Constructor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> <span class="title class_">Constructor</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This function is very simple, it is used to detect that the class cannot be called like a normal function, such as class Persion. You cannot directly Persion ()</p>
<h4 id="defineProperties"><a href="#defineProperties" class="headerlink" title="_defineProperties"></a>_defineProperties</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_defineProperties</span>(<span class="params">target, props</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">    descriptor.<span class="property">enumerable</span> = descriptor.<span class="property">enumerable</span> || <span class="literal">false</span>;</span><br><span class="line">    descriptor.<span class="property">configurable</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;value&quot;</span> <span class="keyword">in</span> descriptor) descriptor.<span class="property">writable</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, descriptor.<span class="property">key</span>, descriptor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_defineProperty</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">      <span class="attr">value</span>: value,</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The function of these two functions together is to continuously define new properties on the target</p>
<h4 id="createClass"><a href="#createClass" class="headerlink" title="_createClass"></a>_createClass</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_createClass</span>(<span class="params">Constructor, protoProps, staticProps</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (protoProps) <span class="title function_">_defineProperties</span>(<span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>, protoProps);</span><br><span class="line">  <span class="keyword">if</span> (staticProps) <span class="title function_">_defineProperties</span>(<span class="title class_">Constructor</span>, staticProps);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Constructor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Combined with the above _defineProperties function, this function has three parameters, the first parameter is the constructor function, the second parameter is an array of all common properties, and the third is an array of all static properties, so the function is actually:</p>
<p>Define the ordinary properties of the class on the prototype of the constructor function, so that when we create a new instance, we can find these ordinary properties on the prototype chain of the instance</p>
<blockquote>
<p>Those who have read my previous blog about prototype chains should be impressed with my formula:</p>
<p>a = new A() =&gt; a.<code>__proto__</code> = A.prototype </p>
</blockquote>
<ul>
<li>Defines static properties in the class on the constructor function, so that we can directly point out static methods on the constructor function.</li>
</ul>
<h3 id="Dynamically-generated-code"><a href="#Dynamically-generated-code" class="headerlink" title="Dynamically generated code"></a>Dynamically generated code</h3><p>Okay, with these auxiliary functions above, I can see how the class we defined at the beginning uses these auxiliary functions to achieve</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="comment">/*#__PURE__*/</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">Person</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_createClass</span>(</span><br><span class="line">    <span class="title class_">Person</span>,</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&quot;sayName&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&quot;intro&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">intro</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Person</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">_defineProperty</span>(<span class="title class_">Person</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;being&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Men</span> = <span class="comment">/*#__PURE__*/</span> (<span class="keyword">function</span> (<span class="params">_Person</span>) &#123;</span><br><span class="line">  <span class="title function_">_inherits</span>(<span class="title class_">Men</span>, _Person);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _super = <span class="title function_">_createSuper</span>(<span class="title class_">Men</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Men</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _this;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">Men</span>);</span><br><span class="line"></span><br><span class="line">    _this = _super.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">    _this.<span class="property">gender</span> = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> _this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Men</span>;</span><br><span class="line">&#125;)(<span class="title class_">Person</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>First of all, Persion is defined as the return result of an immediately executed function, which is still a function, so we can know that in the end Persion is actually a function, and we still call this function Constructor Persion.</li>
</ul>
<p>What does the Constructor Persion function do?</p>
<ul>
<li>First, call _classCallCheck (this, Person);, this is the auxiliary function we just analyzed, to ensure that our Constructor Persion function is not called directly, but placed after new as a constructor function.</li>
<li>then add two properties on the instance, name and age</li>
</ul>
<ul>
<li><p>Call _createClass, we just analyzed, the three parameters of this function are constructor function, array of normal properties, array of static properties, so after this step, Persion.prototype has a new property called sayName, Persion There is a new static property called intro.</p>
</li>
<li><p>Finally back to Constructor Persion</p>
</li>
<li><p>Because type is a static property of Class Persion, define type on Constructor Persion so that it can be found directly on the constructor function.</p>
</li>
<li><p>Men is also defined as the result of an immediately executed function, which is also a function. We call this function Constructor Men.</p>
</li>
<li><p>First call _inherits (Men, _Person), through the “_inherits” function we just analyzed, its function is</p>
<blockquote>
<p>subClass.prototype.<code>__proto__</code> = superClass.prototype</p>
<p>subClass.<code>__proto__</code> = superClass</p>
<p>put it here, that is to say</p>
<p>Men.prototype.<code>__proto__</code> = _Person.prototype</p>
<p>Men.<code>__proto__</code> = _Person</p>
</blockquote>
<p>This completes the inheritance of the prototype chain</p>
<p>One thing to note here is that <strong> this Men is the function Men of the following declaration, not the outer Men, because the function declaration promotes </strong></p>
</li>
<li><p><code>var _super = _createSuper(Men)</code></p>
<p>We just analyzed this <em>createSuper function, it will return another function, the role of this function is to get’Men.<strong>proto</strong> ‘as Super, and then call Super with the function caller as the context, and the above _inherits (Men, _Person) ‘ has made Men. ‘</em> <em> pro to __` = </em> Person.</p>
<p>So the result of this step is a function that will call the Persion function in the context of the caller</p>
</li>
<li><p>Second, define Constructor Men (although the code order is not like this, but the function declaration will raise the variable), so what does this Constructor Men do?</p>
<ul>
<li>Also check if the Men are called directly.<br>Invoking _super, that is, calling Persion on an instance of Men, is typical of borrowing constructor function inheritance.</li>
<li>Mount the gender attribute on the Men instance.</li>
</ul>
</li>
<li><p>返回Constructor Men</p>
</li>
</ul>
<p>We finally analyzed the results:</p>
<ul>
<li>First we get two functions Persion and Men, both of which can only be called by new, otherwise an exception will be thrown.<br>Secondly, both constructor functions themselves define the declared static properties, and the constructor function prototype defines the normal properties.</li>
<li>Men.prototype.<code>__proto__</code> = _Person.prototype</li>
<li>Men.<code>__proto__</code> = _Person</li>
<li>The constructor function of Men inherits by calling the method of the Persion constructor function on the Men instance.</li>
</ul>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p>See here and understand the small partners should understand, there is no difference, just more built-in checks to help you do the inheritance of the prototype chain.</p>
<p>The class essence returns a function.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>ES6 Symbol</title>
    <url>/en/posts/67f282b/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>ES5 object property names are all strings, which is prone to property name conflicts. For example, if you use an object provided by someone else, but want to add a new method (mixin mode) to this object, the name of the new method may conflict with the existing method. It would be nice if there was a mechanism to ensure that the name of each property is unique, which fundamentally prevents property name conflicts. This is why Symbols were introduced in ES6.</p>
<p>ES6 introduces a new original data source type Symbol that represents a unique value. It is the seventh data type in the JavaScript language, after the first six: undefined, null, Boolean, string, number, and object.</p>
<p>Symbol values are generated by the Symbol function. This means that object property names can now have two types, one is the original string, and the other is the new Symbol type. Any property name that belongs to the Symbol type is unique and can be guaranteed not to conflict with other property names.</p>
<span id="more"></span>
<h2 id="Features-and-applications"><a href="#Features-and-applications" class="headerlink" title="Features and applications"></a>Features and applications</h2><h3 id="Unique"><a href="#Unique" class="headerlink" title="Unique"></a>Unique</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"><span class="comment">// &quot;symbol&quot;</span></span><br></pre></td></tr></table></figure>
<p>In the above code, the variable s is a unique value. The result of the typeof operator indicates that the variable s is a Symbol data type, not some other type such as string.</p>
<p>Note that the’new ‘command cannot be used before the’Symbol’ function, otherwise an error will be reported. This is because the generated Symbol is a primitive type value, not an object. That is, since the Symbol value is not an object, properties cannot be added. Basically, it is a data type similar to string.</p>
<p>The’Symbol ‘function can accept a string as a parameter, representing a description of the Symbol instance, mainly for display in the Console, or when converted to string, it is easier to distinguish.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s1 <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2 <span class="comment">// Symbol(bar)</span></span><br><span class="line"></span><br><span class="line">s1.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line">s2.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(bar)&quot;</span></span><br></pre></td></tr></table></figure>
<p>In the above code, ‘s1’ and’s2 ‘are two Symbol values. If no parameters are added, their output in the Console is’Symbol () ‘, which is not conducive to distinction. After having parameters, it is equivalent to adding a description to them, and when outputting, it can be distinguished which value it is.</p>
<p>If the parameter of the symbol is an object, the’toString ‘method of the object will be called, converted to a string, and then a symbol value will be generated.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(obj);</span><br><span class="line">sym <span class="comment">// Symbol(abc)</span></span><br></pre></td></tr></table></figure>
<p><strong> Note that the parameters of’Symbol ‘function only represent a description of the current symbol value, so the return value of’Symbol’ function with the same parameter is not equal. </strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">If</span> there are no parameters</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">s1 = s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//In the case of parameters</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s1 = s2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>In the above code, ‘s1’ and’s2 ‘are both return values of’Symbol’ function and have the same parameters, but they are not equal.</p>
<p>Symbol values cannot be calculated with values of other types and an error will be reported.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;My symbol&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;your symbol is &quot;</span> + sym</span><br><span class="line"><span class="comment">// TypeError: can&#x27;t convert symbol to string</span></span><br><span class="line"><span class="string">`your symbol is <span class="subst">$&#123;sym&#125;</span>`</span></span><br><span class="line"><span class="comment">// TypeError: can&#x27;t convert symbol to string</span></span><br></pre></td></tr></table></figure>
<p>Symbol values, however, can be explicitly converted to strings.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;My symbol&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>(sym) <span class="comment">// &#x27;Symbol(My symbol)&#x27;</span></span><br><span class="line">sym.<span class="title function_">toString</span>() <span class="comment">// &#x27;Symbol(My symbol)&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Symbol values can also be converted to Boolean values, but not to numeric values.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="title class_">Boolean</span>(sym) <span class="comment">// true</span></span><br><span class="line">!sym  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sym) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>(sym) <span class="comment">// TypeError</span></span><br><span class="line">sym + <span class="number">2</span> <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure>
<h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><p>Since each symbol value is not equal, this means that the symbol value can be used as an identifier for the property name of the object, ensuring that no property with the same name will appear. This is very useful in cases where an object consists of multiple modules, preventing a key from being accidentally overwritten or overwritten.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//The first way of writing</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The second way of writing</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The third way of writing</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, mySymbol, &#123; <span class="attr">value</span>: <span class="string">&#x27;Hello!&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//The above writing methods all get the same result</span></span><br><span class="line">a[mySymbol] <span class="comment">// &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure>
<p>The above code specifies the property name of the object as a Symbol value through the square bracket structure and’Object.defineProperty ‘.</p>
<p>Note that the dot operator cannot be used when a Symbol value is used as an object property name.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mySymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">a.<span class="property">mySymbol</span> = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line">a[mySymbol] <span class="comment">// undefined</span></span><br><span class="line">a[<span class="string">&#x27;mySymbol&#x27;</span>] <span class="comment">// &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure>
<p>In the above code, because the dot operator is always followed by a string, the value referred to by’mySymbol ‘as the identifier is not read, resulting in the attribute name of’a’ actually being a string instead of a Symbol value.</p>
<p>Similarly, inside an object, when defining a property with a Symbol value, the Symbol value must be enclosed in square brackets.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [s]: <span class="keyword">function</span> (<span class="params">arg</span>) &#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[s](<span class="number">123</span>);</span><br></pre></td></tr></table></figure>
<p>In the above code, if s is not placed in square brackets, the key name of the property is the string s, not the Symbol value represented by s.</p>
<h4 id="Application-1"><a href="#Application-1" class="headerlink" title="Application"></a>Application</h4><p>Symbol types can also be used to define a set of constants whose values are guaranteed to be unequal.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> log = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">log.<span class="property">levels</span> = &#123;</span><br><span class="line">  <span class="attr">DEBUG</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;debug&#x27;</span>),</span><br><span class="line">  <span class="attr">INFO</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;info&#x27;</span>),</span><br><span class="line">  <span class="attr">WARN</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;warn&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(log.<span class="property">levels</span>.<span class="property">DEBUG</span>, <span class="string">&#x27;debug message&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(log.<span class="property">levels</span>.<span class="property">INFO</span>, <span class="string">&#x27;info message&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>Here’s another example.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_RED</span>    = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_GREEN</span>  = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getComplement</span>(<span class="params">color</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">COLOR_RED</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">COLOR_GREEN</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">COLOR_GREEN</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">COLOR_RED</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Undefined color&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The biggest benefit of using symbol values for constants is that no other value can have the same value, so you can guarantee that the’switch ‘statement above will work as designed.</p>
<h3 id="Cannot-be-traversed"><a href="#Cannot-be-traversed" class="headerlink" title="Cannot be traversed"></a>Cannot be traversed</h3><p>Symbol as a property name, when traversing the object, the property will not appear in the for… in, for… of loops, nor will it be returned by Object.keys (), Object.getOwnPropertyNames (), JSON.stringify ().</p>
<p>However, it is also not a private property, there is a’Object.getOwnPropertySymbols () ‘method that can get all the Symbol property names of the specified object. This method returns an array of all Symbol values used as property names for the current object.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">Symbol</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">obj[b] = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectSymbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols</span><br><span class="line"><span class="comment">// [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure>
<p>The above code is an example of the Object.getOwnPropertySymbols () method, which can obtain all Symbol property names.</p>
<p>Here is another example of how the Object.getOwnPropertySymbols () method compares to the for… in loop and the Object.getOwnPropertyNames method.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">obj[foo] = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="title class_">Console</span>.<span class="property">log</span> (i);<span class="comment">//no output</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj) <span class="comment">// []</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj) <span class="comment">// [Symbol(foo)]</span></span><br></pre></td></tr></table></figure>
<p>In the above code, using the “for… in” loop and the “Object.getOwnPropertyNames () “ method do not get the Symbol key name, you need to use the “Object.getOwnPropertySymbols () “ method.</p>
<p>Another new API, the Reflect.ownKeys () method can return all types of key names, including regular key names and Symbol key names.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;my_key&#x27;</span>)]: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">enum</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">nonEnum</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line"><span class="comment">//  [&quot;enum&quot;, &quot;nonEnum&quot;, Symbol(my_key)]</span></span><br></pre></td></tr></table></figure>
<h4 id="Application-2"><a href="#Application-2" class="headerlink" title="Application"></a>Application</h4><p>Due to the Symbol value as the key name, it will not be traversed by regular methods. We can take advantage of this feature to define some non-private methods for objects that we want to use only internally.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> size = <span class="title class_">Symbol</span>(<span class="string">&#x27;size&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Collection</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[size] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="variable language_">this</span>[size]] = item;</span><br><span class="line">    <span class="variable language_">this</span>[size]++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sizeOf</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance[size];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">Collection</span>();</span><br><span class="line"><span class="title class_">Collection</span>.<span class="title function_">sizeOf</span>(x) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">x.<span class="title function_">add</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="title class_">Collection</span>.<span class="title function_">sizeOf</span>(x) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(x) <span class="comment">// [&#x27;0&#x27;]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(x) <span class="comment">// [&#x27;0&#x27;]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(x) <span class="comment">// [Symbol(size)]</span></span><br></pre></td></tr></table></figure>
<p>In the above code, the size property of the object x is a Symbol value, so neither Object.keys (x) nor Object.getOwnPropertyNames (x) can get it. This creates the effect of a non-private internal method.</p>
<h2 id="Creating-the-Same-Symbol"><a href="#Creating-the-Same-Symbol" class="headerlink" title="Creating the Same Symbol"></a>Creating the Same Symbol</h2><p>Sometimes, we want to reuse the same symbol value, and the’Symbol.for () ‘method can do this. It takes a string as a parameter and searches for a symbol value with that parameter as its name. If there is, return the Symbol value, otherwise create a new Symbol value with that string name and register it globally.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s1 = s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>In the above code, ‘s1’ and’s2 ‘are both Symbol values, but they are both generated by the’Symbol.for’ method with the same parameters, so they are actually the same value.</p>
<p>Both’Symbol.for () ‘and’Symbol () ‘ will generate new symbols. The difference between them is that the former will be registered for search in the global environment, while the latter will not. ‘Symbol.for () ‘ does not return a new value of type Symbol every time it is called, but will first check if the given’key ‘already exists, and if not, will create a new value. For example, if you call’Symbol.for (“cat”) ‘30 times, it will return the same symbol value each time, but calling’Symbol (“cat”) ‘ 30 times will return 30 different symbol values.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;bar&quot;</span>) = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Symbol</span>(<span class="string">&quot;bar&quot;</span>) = <span class="title class_">Symbol</span>(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>In the above code, since there is no registration mechanism for’Symbol () ‘writing, each call will return a different value.</p>
<p>The Symbol.keyFor () method returns the key of a registered Symbol value.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s1) <span class="comment">// &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>In the above code, the variable’s2 ‘belongs to an unregistered Symbol value, so it returns’undefined’.</p>
<p>Note that Symbol.for () registers names for Symbol values that are global, regardless of whether they are running globally.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">const</span> y = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x = y); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>In the above code, ‘Symbol.for (‘ bar ‘) ‘ is run internally by function, but the generated symbol value is registered in the global environment. Therefore, the second run of’Symbol.for (‘bar’) ‘can get this Symbol value.</p>
<p>This global registration feature of Symbol.for () can be used to retrieve the same value in different iframes or service workers.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">iframe.<span class="property">src</span> = <span class="title class_">String</span>(<span class="variable language_">window</span>.<span class="property">location</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line"></span><br><span class="line">iframe.<span class="property">contentWindow</span>.<span class="property">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>) = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>In the above code, the symbol value generated by the iframe window can be obtained on the main page.</p>
<h2 id="Built-in-Symbols"><a href="#Built-in-Symbols" class="headerlink" title="Built-in Symbols"></a>Built-in Symbols</h2><h3 id="Symbol-hasInstance"><a href="#Symbol-hasInstance" class="headerlink" title="Symbol.hasInstance"></a>Symbol.hasInstance</h3><p>The Symbol.hasInstance property of the object points to an internal method. This method is called when other objects use the instanceof operator to determine whether they are instances of the object. For example, ‘foo instanceof Foo’ is actually called’Foo ‘internally in the language.<a href="foo">Symbol.hasInstance</a>`。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](foo) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo <span class="keyword">instanceof</span> <span class="title class_">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>() <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>In the above code, ‘MyClass’ is a class, and ‘new MyClass () ‘ will return an instance. The’Symbol.hasInstance ‘method of this instance will be automatically called during the’instanceof’ operation to determine whether the operator on the left is an instance of’Array ‘.</p>
<p>Here’s another example.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Even</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(obj) % <span class="number">2</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//equivalent to</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Even</span> = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(obj) % <span class="number">2</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">instanceof</span> <span class="title class_">Even</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">instanceof</span> <span class="title class_">Even</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">12345</span> <span class="keyword">instanceof</span> <span class="title class_">Even</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="Symbol-isConcatSpreadable"><a href="#Symbol-isConcatSpreadable" class="headerlink" title="Symbol.isConcatSpreadable"></a>Symbol.isConcatSpreadable</h3><p>The Symbol.isConcatSpreadable property of the object is equal to a Boolean value indicating whether the object can be expanded when used with Array.prototype.concat ().</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">concat</span>(arr1, <span class="string">&#x27;e&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br><span class="line">arr1[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">concat</span>(arr2, <span class="string">&#x27;e&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;c&#x27;,&#x27;d&#x27;], &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>The above code explains that the default behavior of the array is that it can be expanded, and’Symbol.isConcatSpreadable ‘defaults to’undefined’. When this property is equal to’true ‘, it also has the effect of expansion.</p>
<p>Array-like objects are the opposite and are not expanded by default. Its’Symbol.isConcatSpreadable ‘property is set to’true’ before it can be expanded.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">length</span>: <span class="number">2</span>, <span class="number">0</span>: <span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">concat</span>(obj, <span class="string">&#x27;e&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, obj, &#x27;e&#x27;]</span></span><br><span class="line"></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">true</span>;</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">concat</span>(obj, <span class="string">&#x27;e&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>The Symbol.isConcatSpreadable property can also be defined inside a class.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(args);</span><br><span class="line">    <span class="variable language_">this</span>[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(args);</span><br><span class="line">  &#125;</span><br><span class="line">  get [<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> <span class="title function_">A1</span>();</span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">a1[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> <span class="title function_">A2</span>();</span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">a2[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">concat</span>(a1).<span class="title function_">concat</span>(a2)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br></pre></td></tr></table></figure>
<p>In the above code, the class’A1 ‘is expandable, and the class’A2’ is not expandable, so using’concat ‘has different results.</p>
<p>Note that the difference in the position of Symbol.isConcatSpreadable, A1 is defined on the instance, A2 is defined on the class itself, the effect is the same.</p>
<p>Reference materials:</p>
<p><a href="https://es6.ruanyifeng.com/#docs/symbol">https://es6.ruanyifeng.com/#docs/symbol</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Chrome and the Node Event Loop</title>
    <url>/en/posts/ed430c49/</url>
    <content><![CDATA[<p>After using JavaScript for so long, I realized that I have always misunderstood the event loop mechanism of JavaScript.</p>
<p>First, the event loop mechanism is not implemented in V8. The V8 engine is only responsible for compiling JavaScript code, memory allocation, etc.</p>
<p>Second, Chrome event loop mechanism is implemented through the web API, while Node is libuv.</p>
<p>Third, before Node11, the principle of Node’s event loop was different from Chrome.</p>
<span id="more"></span>
<p>In response to these misunderstandings, I relearned the event loop of JavaScript.</p>
<p>Javascript is a single-threaded, non-blocking, asynchronous, interpreted scripting language. The concurrency model of js is based on the event loop, which is implemented by the js host environment such as the browser. v8 is the javascript runtime environment in the Chrome. There is no setTimeout/DOM/HTTP requests in the V8 source code. These asynchronous requests are handled by the webAPI in the browser, which is a thread created by the C++ implemented browser.</p>
<h2 id="Chrome-Browser-with-Node11"><a href="#Chrome-Browser-with-Node11" class="headerlink" title="Chrome Browser with Node11 +"></a>Chrome Browser with Node11 +</h2><h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>The following is a flowchart of the event loop mechanism in the browser. As long as there is no code executing in the execution stack, the microtask will be executed immediately after the callback.</p>
<p><img src="https://upload-images.jianshu.io/upload_images/13734601-6a8e67d55c966687.png?imageMogr2/auto-orient/strip|imageView2/2/format/webp" alt=""></p>
<h3 id="Node11"><a href="#Node11" class="headerlink" title="Node11+"></a>Node11+</h3><p>You can read this on my other blog: <a href="https://sunra.top/posts/5f68736a/">https://sunra.top/posts/5f68736a/</a></p>
<h2 id="Node10-Take-Node8-as-an-example"><a href="#Node10-Take-Node8-as-an-example" class="headerlink" title="Node10- (Take Node8 as an example)"></a>Node10- (Take Node8 as an example)</h2><h3 id="1-Introduction-to-Node"><a href="#1-Introduction-to-Node" class="headerlink" title="1. Introduction to Node"></a>1. Introduction to Node</h3><p>The Event Loop in Node is completely different from that in the browser. Node.js uses V8 as the parsing engine of js, and uses its own libuv for I/O processing. Libuv is an event-driven cross-platform abstraction layer that encapsulates some underlying features of different operating systems and provides a unified API to the outside world. The event loop mechanism is also implemented in it (described in detail below).</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683d81674f076eb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>The operating mechanism of Node.js is as follows:</p>
<ul>
<li>V8 engine parses JavaScript scripts.</li>
<li>After parsing the code, call the Node API.</li>
<li>The libuv library is responsible for the execution of the Node API. It assigns different tasks to different threads, forming an Event Loop that asynchronously returns the execution results of the tasks to the V8 engine.</li>
<li>The V8 engine then returns the results to the user.</li>
</ul>
<h3 id="2-Six-stages"><a href="#2-Six-stages" class="headerlink" title="2. Six stages"></a>2. Six stages</h3><p>The event loop in the libuv engine is divided into 6 stages, which will be run repeatedly in order. Whenever you enter a certain stage, the function will be removed from the corresponding callback queue to execute. When the queue is empty or the number of callback functions executed reaches the threshold set by the system, it will enter the next stage.</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/1/12/16841bd9860c1ee9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>In the above figure, you can roughly see the order of the event loop in node.</p>
<p>External input data — &gt; polling phase (poll) — &gt; check phase (check) — &gt; close callback phase (close callback) — &gt; timer detection phase (timer) — &gt; I/O event callback phase (I/O callbacks) — &gt; idle phase (idle, prepare) — &gt; polling phase (run repeatedly in this order)…</p>
<ul>
<li>timers phase: This phase executes callbacks for timers (setTimeout, setInterval)</li>
<li>I/O callbacks phase: handles a few unexecuted I/O callbacks from some previous loop</li>
<li>idle, prepare phase: only used internally by nodes</li>
<li>poll phase: fetch new I/O events, where node will block under appropriate conditions</li>
<li>check phase: Callback for executing setImmediate ()</li>
<li>close callbacks stage: perform the close event callback of the socket</li>
</ul>
<p>Note: <strong> None of the above six stages include process.nextTick () </strong> (described below)</p>
<p>Next, we will introduce the three stages of’timers’, ‘poll’, and’check ‘in detail, because most of the Asynchronous Tasks in daily development are processed in these three stages.</p>
<h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><p>The timers phase executes setTimeout and setInterval callbacks and is controlled by the poll phase. Similarly, the time specified by the timer in Node is not an exact time and can only be executed as soon as possible.</p>
<h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><p>Polling is a crucial phase, and in this phase, the system does two things</p>
<ol>
<li><p>Go back to the timer phase and execute the callback</p>
</li>
<li><p>Perform I/O callbacks</p>
</li>
</ol>
<p>And if the timer is not set when entering this stage, the following two things will happen</p>
<ul>
<li>If the poll queue is not empty, the callback queue is traversed and executed synchronously until the queue is empty or the system limit is reached<br>If the poll queue is empty, two things happen<ul>
<li>If there is a setImmediate callback that needs to be executed, the poll phase will stop and enter the check phase to execute the callback</li>
<li>If there is no setImmediate callback to execute, it will wait for the callback to be added to the queue and execute the callback immediately. There will also be a timeout setting to prevent waiting forever</li>
</ul>
</li>
</ul>
<p>Of course, if the timer is set and the poll queue is empty, it will determine whether there is a timer timeout, and if so, it will return to the timer stage to perform the callback.</p>
<h4 id="3"><a href="#3" class="headerlink" title="(3)"></a>(3)</h4><p>The callback of setImmediate () will be added to the check queue. As you can see from the phase diagram of the event loop, the execution order of the check phase is after the poll phase. Let’s take a look at an example first:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer1&#x27;</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer2&#x27;</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise3&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"><span class="comment">//start=&gt;end=&gt;promise3=&gt;timer1=&gt;timer2=&gt;promise1=&gt;promise2</span></span><br><span class="line"><span class="title class_">Copy</span> the code</span><br></pre></td></tr></table></figure>
<ul>
<li>After the synchronization task (which belongs to the macro task) that starts the stack is executed (print start end in turn, and put 2 timers in the timer queue in turn), the microtask will be executed first (** This is the same as the browser side), so print promise3</li>
<li>Then enter the timers stage, execute the callback function of timer1, print timer1, and put the promise.then callback into the microtask queue, execute timer2 in the same step, print timer2; this is quite different from the browser side, ** timers stage There are several setTimeout/setInterval will be executed in turn, unlike the browser side, which executes a microtask after each macro task (the difference between Node and the browser’s Event Loop will be described in detail below).</li>
</ul>
<h3 id="3-Micro-Task"><a href="#3-Micro-Task" class="headerlink" title="3.Micro-Task"></a>3.Micro-Task</h3><p>The asynchronous queues in the Node side event loop are also of these two types: macro (macro task) queues and micro (micro task) queues.</p>
<ul>
<li>Common macro-tasks such as: setTimeout, setInterval, setImmediate, script (overall code), I/O operations, etc.</li>
<li>Common micro-tasks such as: process.nextTick, new Promise ().then (callback), etc.</li>
</ul>
<h3 id="Step-4-Pay-attention"><a href="#Step-4-Pay-attention" class="headerlink" title="Step 4 Pay attention"></a>Step 4 Pay attention</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="(1)"></a>(1)</h4><p>The two are very similar, the difference is mainly in the timing of the call.</p>
<ul>
<li>setImmediate design is executed when the poll stage is completed, that is, the check stage;</li>
<li>setTimeout is designed to be executed when the poll phase is idle and the set time is reached, but it is executed in the timer phase</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timeout</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span> <span class="title function_">immediate</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;immediate&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Copy</span> the code</span><br></pre></td></tr></table></figure>
<ul>
<li>For the above code, setTimeout may be executed before or after.</li>
<li>first setTimeout (fn, 0) = setTimeout(fn, 1)，这是由源码决定的 进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 setTimeout 回调</li>
<li>If the preparation time is less than 1ms, then the setImmediate callback is executed first</li>
</ul>
<p>However, when both are called inside the asynchronous i/o callback, setImmediate is always executed first, followed by setTimeout.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(__filename, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;immediate&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// immediate</span></span><br><span class="line"><span class="comment">// timeout</span></span><br><span class="line"><span class="title class_">Copy</span> the code</span><br></pre></td></tr></table></figure>
<p>In the above code, setImmediate is always executed first. Because the two codes are written in the IO callback, the IO callback is executed in the poll stage. When the callback is executed, the queue is empty, and it is found that there is a setImmediate callback, so it jumps directly to the check stage to execute the callback.</p>
<h4 id="2-1"><a href="#2-1" class="headerlink" title="(2)"></a>(2)</h4><p>This function is actually independent of the Event Loop. It has its own queue. When each stage is completed, if there is a nextTick queue, all callback functions in the queue will be cleared and executed before other microtasks.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer1&#x27;</span>)</span><br><span class="line"> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line"> process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">   process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">     process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// nextTick=&gt;nextTick=&gt;nextTick=&gt;nextTick=&gt;timer1=&gt;promise1</span></span><br></pre></td></tr></table></figure>
<h3 id="5-Comparison-with-browsers"><a href="#5-Comparison-with-browsers" class="headerlink" title="5. Comparison with browsers"></a>5. Comparison with browsers</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer1&#x27;</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer2&#x27;</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Browser side running result: ‘timer1 = &gt; promise1 = &gt; timer2 = &gt; promise2’</p>
<p>The running results on the Node side are divided into two cases:</p>
<ul>
<li>If the node11 version executes a macro task (setTimeout, setInterval and setImmediate) in a phase, it immediately executes the microtask queue, which is consistent with the browser run, and the final result is’ timer1 = &gt; promise1 = &gt; timer2 = &gt; promise2 ‘</li>
<li>If it is node10 and previous versions: depends on whether the first timer has finished executing and whether the second timer is in the completion queue.<ul>
<li>If the second timer is not yet in the completion queue, the final result is’ timer1 = &gt; promise1 = &gt; timer2 = &gt; promise2 ‘</li>
<li>If the second timer is already in the completion queue, the final result is’ timer1 = &gt; timer2 = &gt; promise1 = &gt; promise2 ‘ (the following procedure is explained based on this case)</li>
</ul>
</li>
</ul>
<p>Reference link:</p>
<p><a href="https://www.jianshu.com/p/054cb77adadd">https://www.jianshu.com/p/054cb77adadd</a></p>
<p><a href="https://juejin.cn/post/6844903761949753352">https://juejin.cn/post/6844903761949753352</a></p>
<p><a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop">https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Extjs3 Ext.extend Using Pit Filling</title>
    <url>/en/posts/d558ce51/</url>
    <content><![CDATA[<h2 id="Ext-extend"><a href="#Ext-extend" class="headerlink" title="Ext.extend"></a>Ext.extend</h2><p>When using Extjs, we often use its custom component function to create the components we need, but there is a point to note when using Ext.extend, that is, if your custom component has some fixed items, then These items cannot be directly thrown into the configuration item, but need to be declared in the initComponent function.</p>
<span id="more"></span>
<p>Below is a common template</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MyComponent</span> = <span class="title class_">Ext</span>.<span class="title function_">extend</span>(<span class="title class_">Ext</span>.<span class="property">Panel</span>, &#123;</span><br><span class="line">    <span class="attr">initComponent</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Ext</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">            <span class="attr">_name</span>: <span class="string">&#x27;MyComponent&#x27;</span><span class="comment">//Not required, use console.log to display object names when debugging.</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">items</span> = [&#123;</span><br><span class="line">            <span class="comment">//If there are fixed items, they must be set here</span></span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="title class_">MyComponent</span>.<span class="property">superclass</span>.<span class="property">initComponent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>In fact, not only items, if you want to add new event listeners for subcomponents, you also need to declare them in initComponents</p>
<h2 id="Ext-Ajax-request"><a href="#Ext-Ajax-request" class="headerlink" title="Ext.Ajax.request"></a>Ext.Ajax.request</h2><p>When using Ext. Ajax to send POST requests, you may encounter cross-domain problems, even if the background is set to allow cross-domain, such as the following method</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Ext</span>.<span class="property">Ajax</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">              <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">              <span class="attr">jsonData</span>: school,</span><br><span class="line">              <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">response, opts</span>) &#123;</span><br><span class="line">                <span class="title class_">Ext</span>. <span class="title class_">Msg</span>.<span class="property">alert</span> (<span class="string">&#x27;Status&#x27;</span>, <span class="string">&#x27;Saved successfully&#x27;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">failure</span>: <span class="keyword">function</span>(<span class="params">response, opts</span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server-side failure with status code &#x27;</span> + response.<span class="property">status</span>);</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>
<p>However, if you modify the data transmission method to params, there will be no cross-domain problem, such as</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Ext</span>.<span class="property">Ajax</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">              <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">              <span class="attr">params</span>: &#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(school)</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">response, opts</span>) &#123;</span><br><span class="line">                <span class="title class_">Ext</span>. <span class="title class_">Msg</span>.<span class="property">alert</span> (<span class="string">&#x27;Status&#x27;</span>, <span class="string">&#x27;Saved successfully&#x27;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">failure</span>: <span class="keyword">function</span>(<span class="params">response, opts</span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server-side failure with status code &#x27;</span> + response.<span class="property">status</span>);</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="TreeLoader"><a href="#TreeLoader" class="headerlink" title="TreeLoader"></a>TreeLoader</h2><p>When we use AsyncTreeNode and TreeLoader, even if the data is fully loaded by the TreeLoader, it will not be rendered to the root node.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> loader = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> root = <span class="literal">null</span>;</span><br><span class="line">  loader = <span class="keyword">new</span> <span class="title class_">Ext</span>.<span class="property">tree</span>.<span class="title class_">TreeLoader</span>(&#123;</span><br><span class="line">    <span class="attr">requestMethod</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">dataUrl</span>: <span class="string">&#x27;http://localhost:3000/&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  root = <span class="keyword">new</span> <span class="title class_">Ext</span>.<span class="property">tree</span>.<span class="title class_">AsyncTreeNode</span>(&#123;<span class="attr">text</span>: <span class="string">&#x27;school&#x27;</span>&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> tree = <span class="keyword">new</span> <span class="title class_">Ext</span>.<span class="property">tree</span>.<span class="title class_">TreePanel</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;school&#x27;</span>,</span><br><span class="line">    <span class="attr">collapsible</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enableDD</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">loader</span>: loader,</span><br><span class="line">    <span class="attr">root</span>: root,</span><br><span class="line">    <span class="attr">autoScroll</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">split</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">contextMenu</span>: menu,</span><br><span class="line">    <span class="attr">listeners</span>: &#123;</span><br><span class="line">      <span class="attr">contextmenu</span>: <span class="keyword">function</span>(<span class="params"> node, e </span>) &#123;</span><br><span class="line">        node.<span class="title function_">select</span>();</span><br><span class="line">        <span class="keyword">let</span> c = node.<span class="title function_">getOwnerTree</span>().<span class="property">contextMenu</span>;</span><br><span class="line">        c.<span class="property">contextNode</span> = node;</span><br><span class="line">        c.<span class="title function_">showAt</span>(e.<span class="title function_">getXY</span>());</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">nodedrop</span>: <span class="keyword">function</span> (<span class="params"> e </span>) &#123;</span><br><span class="line">        <span class="title class_">Ext</span>.<span class="property">Msg</span>.<span class="title function_">alert</span>(<span class="string">&#x27;Status&#x27;</span>, <span class="string">`drag <span class="subst">$&#123;e.dropNode.text&#125;</span> to <span class="subst">$&#123;e.target.text&#125;</span> with <span class="subst">$&#123;e.point&#125;</span>`</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">click</span>: <span class="keyword">function</span> (<span class="params"> node, e </span>) &#123;</span><br><span class="line">        currentNode = node</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// tree.expandAll();</span></span><br><span class="line">  loader.<span class="title function_">on</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params">vm, node, response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(node)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>Below is the request when I refresh the page, you can see that the data has been fully loaded</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566184874/2019-08-19_10_50_16-JabberWindow.DesktopShare.BorderWindow_i3ghuf.png" alt=""></p>
<p>However, in the node printed by the load event monitored during tree initialization, only the first layer node can be rendered</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1566184874/2019-08-19_10_55_15-Window_fa0dov.png" alt=""></p>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>File Upload Vulnerability</title>
    <url>/en/posts/931c692/</url>
    <content><![CDATA[<h2 id="File-Upload-Vulnerabilities-and-Their-Harm"><a href="#File-Upload-Vulnerabilities-and-Their-Harm" class="headerlink" title="File Upload Vulnerabilities and Their Harm"></a>File Upload Vulnerabilities and Their Harm</h2><p>File upload vulnerability refers to a network attacker uploading an executable file to the server and executing it. The uploaded file here can be a Trojan horse, virus, malicious script or WebShell, etc.</p>
<p>Due to insufficient programmer control over the user file upload portion or processing defects, resulting in the user can cross its own authority to upload executable dynamic script files to the server.</p>
<span id="more"></span>
<p>For example, if you use a windows server and use asp as a dynamic website environment on the server side, then in the upload function of your website, you must not allow users to upload asp type files, otherwise he uploads a webshell, and your server The files on it can be arbitrarily changed by him. Therefore, the harm caused by file upload vulnerabilities is often devastating. Apache, Tomcat, Nginx, etc. have all exposed file upload vulnerabilities.</p>
<p>For example, we transfer a php file to the background, the content of the file is very simple, just a line of code, through the eval function to execute the value of the hacker field in the request parameter.</p>
<p>If we upload this file to the server and assume that it is stored in <a href="http://localhost/images/shell.php">http://localhost/images/shell.php</a></p>
<p>So at this time, let’s use the command line to execute</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -d &quot;hacker=echo get_current_user();&quot; http://localhost/images/shell.php</span><br></pre></td></tr></table></figure>
<p>At this time, it will echo the current user of the server.</p>
<p>Of course, we can also use other PHP built-in system functions to infer the information of the entire backend server.</p>
<h2 id="File-upload-vulnerability-preliminary-suffix-domain-name-bypass"><a href="#File-upload-vulnerability-preliminary-suffix-domain-name-bypass" class="headerlink" title="File upload vulnerability preliminary: suffix domain name bypass"></a>File upload vulnerability preliminary: suffix domain name bypass</h2><h3 id="Suffix-name-detection"><a href="#Suffix-name-detection" class="headerlink" title="Suffix name detection"></a>Suffix name detection</h3><p>An important part of the reason why the example we mentioned at the beginning can be executed successfully is that the file’s suffix name is php, so the server will use the php parser to execute the executable code when parsing the entire file.</p>
<p>If this file is just an ordinary txt file, even if there is malicious code in it, our server will just treat it as an ordinary string.</p>
<p>Therefore, based on this premise, if we can perform a detection on the suffix name of the uploaded file, we can avoid such vulnerabilities by intercepting file suffixes like php.</p>
<h3 id="How-to-bypass-detection"><a href="#How-to-bypass-detection" class="headerlink" title="How to bypass detection"></a>How to bypass detection</h3><p>Taking php as an example, if our suffix detection only detects’ * .php ‘, then if I upload a php3 type file, I can actually upload it successfully, but a proxy like Apache2 will use php, php3, All files with php4 and php5 suffixes are parsed as php files.</p>
<h2 id="File-upload-vulnerability-intermediate"><a href="#File-upload-vulnerability-intermediate" class="headerlink" title="File upload vulnerability intermediate"></a>File upload vulnerability intermediate</h2><h3 id="Server-Affinity-Vulnerability"><a href="#Server-Affinity-Vulnerability" class="headerlink" title="Server Affinity Vulnerability"></a>Server Affinity Vulnerability</h3><h4 id="IIS5-x"><a href="#IIS5-x" class="headerlink" title="IIS5.x"></a>IIS5.x</h4><ul>
<li>When creating a file directory ending in .asp, any files in this directory will be parsed into asp files.</li>
<li>The server does not parse content after “;” by default</li>
</ul>
<p>Based on two points, we can have two forms of utilization</p>
<ul>
<li>www.xxx.com/xx.asp/xx.jpg will be parsed into an asp file</li>
<li>www.xxx.com/xx.asp; .jpg will be parsed into an asp file</li>
</ul>
<h4 id="Nginx-parsing-vulnerability"><a href="#Nginx-parsing-vulnerability" class="headerlink" title="Nginx parsing vulnerability"></a>Nginx parsing vulnerability</h4><p>A file parsing vulnerability caused by PHP-CGI exists in older versions of Nginx.</p>
<p>A key option in the PHP configuration file, cgi.fix_pathinfo, is located locally in the php.in configuration file and is enabled by default.</p>
<p>When there are non-existent files in the URL, PHP will forward parse by default.</p>
<p>Based on this, we can:</p>
<ul>
<li>Access: www.xx.com/phpinfo.jpg/1.php (actually this 1.php does not exist)</li>
<li>The phpinfo.jpg file will be parsed, but it will be parsed using the php parser.</li>
</ul>
<h4 id="Apache-parsing-vulnerability"><a href="#Apache-parsing-vulnerability" class="headerlink" title="Apache parsing vulnerability"></a>Apache parsing vulnerability</h4><p>A parsing vulnerability exists in Apache versions 1.x and 2.x</p>
<p>Apache will judge the suffix from right to left, and will skip the unrecognized suffix until the first recognizable suffix is found, and then parse according to the modified suffix.</p>
<p>Based on this, we can:</p>
<ul>
<li>Upload shell.php.test</li>
<li>Visit shell.php.test, the server will parse the shell.php.test file, but parse it according to the php file format.</li>
</ul>
<h3 id="Front-end-authentication-bypass"><a href="#Front-end-authentication-bypass" class="headerlink" title="Front-end authentication bypass"></a>Front-end authentication bypass</h3><p>Many websites only use JavaScript for verification on the front end.</p>
<p>Take advantage of this vulnerability:</p>
<ul>
<li>Modify the content by means of packet capture.</li>
<li>Disable or remove JavaScript code by Chrome</li>
</ul>
<h3 id="Htaccess-bypass"><a href="#Htaccess-bypass" class="headerlink" title=".Htaccess bypass"></a>.Htaccess bypass</h3><p>The .htaccess file (distributed configuration file) provides a way for configuration files to vary from folder to folder, and the folders and subfolders they are placed in are affected, with the same syntax as the main Apache configuration file.</p>
<p>If the server has htaccess enabled, we can upload the htaccess file to modify the server configuration of this folder</p>
<ul>
<li>Upload a .htaccess file with the file content set to ‘[AddType application/x-http-php.test]’</li>
<li>Upload a one-sentence Trojan horse file with the file name set to shell.test.</li>
<li>Accessing shell.test will actually be executed as a php file.</li>
</ul>
<h3 id="Case-bypass"><a href="#Case-bypass" class="headerlink" title="Case bypass"></a>Case bypass</h3><p>For the detection of the blacklist, we can change the case of the suffix name to bypass it.</p>
<p>For example, if we want to upload a PHP file, we can upload a pHp.</p>
<p>But the question is, why does this work:</p>
<p>Is PHP really the same as pHp?</p>
<ul>
<li>If different, then why pHp can be performed.</li>
</ul>
<p>For Windows systems, it is actually case-insensitive to suffix names.</p>
<p>But for the Linux system, he is case-sensitive, but because of this, it may lead to inconvenience for users, so some developers will manually modify the configuration of their app to make it case-insensitive.</p>
<h2 id="File-Upload-Vulnerability-Advanced"><a href="#File-Upload-Vulnerability-Advanced" class="headerlink" title="File Upload Vulnerability Advanced"></a>File Upload Vulnerability Advanced</h2><h3 id="Windows-File-Stream-Feature-Bypass"><a href="#Windows-File-Stream-Feature-Bypass" class="headerlink" title="Windows File Stream Feature Bypass"></a>Windows File Stream Feature Bypass</h3><p>The file stream system of Windows is NTFS, which implements multi-file stream characteristics.</p>
<p>NTFS environment, a file is used by default unnamed file stream, but at the same time we can also create other named file stream, Windows Explorer does not display the file named file stream by default, these named file stream function and grinding named file stream is the same.</p>
<p>We can try the following three commands on the Windows platform:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Echo 111 &gt; test.txt: 1.txt//write data 111 to the named file stream 1.txt of test.txt.</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Echo 222 &gt; test.txt//write data 222 to test.txt.</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Echo test &gt; test.txt :: $data//writes data to the default file stream of test.txt.</span><br></pre></td></tr></table></figure>
<p>With the first command, we will create a test.txt file, but when we open the file, we will find nothing. At this time, we open the file stream with’notepad test.txt: 1.txt ‘and we can see’ 111 ‘.</p>
<p>The second and third commands have the same effect and will write content in the file.</p>
<p>Based on the above characteristics, we can understand that NTFS file stream allows us to make a file with multiple file streams. Usually, our graphical interface uses the default unnamed file stream, but other file streams once created through the command line., in fact, it exists and is attached to the file, and this attachment can ignore the suffix, which means that you can attach a php to the txt file, such as</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Echo Malware &gt; test.txt: shell.php</span><br></pre></td></tr></table></figure>
<p>This code can attach malicious code to a common txt file, thus helping us bypass type detection.</p>
<h3 id="File-header-check-bypass"><a href="#File-header-check-bypass" class="headerlink" title="File header check bypass"></a>File header check bypass</h3><p>Different types of files actually have their own signature file headers.</p>
<p>Some servers may verify these file headers.</p>
<p>To bypass this vulnerability, we can try splicing the code directly behind the allowed file types and then use a parser to execute it, such as:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat shell.php &gt; test.jpg</span><br></pre></td></tr></table></figure>
<p>In this way, we will splice a piece of PHP code after test.jpg.</p>
<p>At this time, we use the PHP parser to execute, and we can successfully execute the final code.</p>
<blockquote>
<p>One thing to note here is that there may be some character encodings in the image that the parser cannot perform, so we can delete these unparsed contents directly, because all we need is the header of the jpg file.</p>
</blockquote>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>Force-oriented algorithm</title>
    <url>/en/posts/62967/</url>
    <content><![CDATA[<p>Recently, I need to implement a relational graph in my work. The node layout in the graph needs to use force-oriented layout, so I was interested in the force-oriented algorithm involved, and I went to study it.</p>
<p>Force-directed graph drawings can be used to describe the relationships between nodes of a graph, distributing nodes to reasonable positions on the canvas, such as describing relationships between enterprises, interpersonal relationships in social networks, etc.</p>
<span id="more"></span>
<h1 id="Basic-principle-of-algorithm"><a href="#Basic-principle-of-algorithm" class="headerlink" title="Basic principle of algorithm"></a>Basic principle of algorithm</h1><p>Let’s first take a look at a rendering:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1677373207/origin-of-ray/bVbgUak_jbxebp.png" alt=""></p>
<p>The distribution of the points in the above figure is calculated by the force guidance algorithm, which is to regard the nodes as the same charge, and there is a repulsive force between them. This repulsive force simulates Coulomb’s law, and the closer the repulsive force, the greater the repulsive force; if there is a connection between two points, it is regarded as an attractive force between the two points. This attractive force simulates Hooke’s law, and the farther away the attractive force is, the greater the attractive force.</p>
<p>In the initial state, we randomly place points, and then these points will move in space due to attractive forces and repulsive forces until a balance is reached, forming a force-oriented layout.</p>
<h2 id="Repulsive-force"><a href="#Repulsive-force" class="headerlink" title="Repulsive force"></a>Repulsive force</h2><p>Consider each node as an electric charge, and there is a repulsive force between the charges, which is the Coulomb force. According to Coulomb’s law, the repulsive force between electrons can be calculated as follows:</p>
<script type="math/tex; mode=display">
F = k_e\frac{q_1q_2}{r^2}\overrightarrow{e}</script><p>We can assume that $q_1 and q_2 $are both 1, then the above formula becomes</p>
<script type="math/tex; mode=display">
F = k_e\frac{1}{r^2}\overrightarrow{e}</script><h2 id="Attractive-force"><a href="#Attractive-force" class="headerlink" title="Attractive force"></a>Attractive force</h2><p>Some particles are entangled by some edges that produce a spring-like Hooker attractive force:</p>
<script type="math/tex; mode=display">
F_s = k_s(x - x_0)</script><p>The repulsive and attractive forces continue to act, the particles tend to balance after continuous displacement, and gradually no longer have relative displacement, and the energy is continuously consumed, and finally tends to zero.</p>
<p>Under the action of attractive force and repulsive force, the coordinates are constantly updated, and after multiple iterations, a stable state is reached, and the convergence is over. Parameters and iterations need to be debugged.</p>
<h2 id="Calculation-step"><a href="#Calculation-step" class="headerlink" title="Calculation step"></a>Calculation step</h2><p>If we want to use code to implement the simplified layout of the force guide diagram, we need several steps.</p>
<ul>
<li>Set point data nodes, link data links.</li>
<li>Random positioning of points.</li>
<li>Render View</li>
<li>Execution algorithm calculates position, renders view (repeated N times)</li>
</ul>
<h1 id="Code-implementation"><a href="#Code-implementation" class="headerlink" title="Code implementation"></a>Code implementation</h1><p>In fact, understand the above process, you can fully implement a version of the force-oriented algorithm, I just provide a simple version here, each person to achieve the algorithm and the final effect may be completely different</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">source, target</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">source</span> = source;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">target</span> = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CANVAS_WIDTH</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CANVAS_HEIGHT</span> = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForceDirected</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mNodeList</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="keyword">new</span> <span class="title class_">Node</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mEdgeList</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mDxMap</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mDyMap</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ejectFactor</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">condenseFactor</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> edgeCount = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; edgeCount; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> targetId = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * n);</span><br><span class="line">        <span class="keyword">let</span> edge = <span class="keyword">new</span> <span class="title class_">Edge</span>(i, targetId);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mEdgeList</span>.<span class="title function_">push</span>(edge);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">coefficient</span> = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable constant_">CANVAS_WIDTH</span> * <span class="variable constant_">CANVAS_HEIGHT</span> / mNodeList.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> initialSize = <span class="number">40.0</span>;</span><br><span class="line">    <span class="keyword">const</span> initialX = <span class="variable constant_">CANVAS_WIDTH</span> * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">const</span> initialY = <span class="variable constant_">CANVAS_HEIGHT</span> * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">mNodeList</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">x</span> = initialX + initialSize * (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">y</span> = initialY + initialSize * (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Calculate repulsion</span></span><br><span class="line">  <span class="title function_">calculateRepulsive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">mNodeList</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">this</span>.<span class="property">mNodeList</span>.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        distX = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">mNodeList</span>[j].<span class="property">x</span>;</span><br><span class="line">        distY = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[i].<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">mNodeList</span>[j].<span class="property">y</span>;</span><br><span class="line">        dist = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distX * distX + distY * distY);</span><br><span class="line">        <span class="keyword">if</span> (dist &gt; <span class="number">0</span> &amp;&amp; dist &lt; <span class="number">250</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">mDxMap</span>[i] = distX * <span class="variable language_">this</span>.<span class="property">ejectFactor</span> / <span class="title class_">Math</span>.<span class="title function_">pow</span>(dist, <span class="number">2</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">mDyMap</span>[i] = distY * <span class="variable language_">this</span>.<span class="property">ejectFactor</span> / <span class="title class_">Math</span>.<span class="title function_">pow</span>(dist, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Calculate</span> the attractive force</span><br><span class="line">  <span class="title function_">calculateTraction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> startNode, endNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> e = <span class="number">0</span>; e &lt; mEdgeList.<span class="property">length</span>; e++) &#123;</span><br><span class="line">      <span class="keyword">const</span> eStartID = mEdgeList[e].<span class="property">source</span>;</span><br><span class="line">      <span class="keyword">const</span> eEndID = mEdgeList[e].<span class="property">target</span>;</span><br><span class="line">      startNode = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[eStartID];</span><br><span class="line">      endNode = <span class="variable language_">this</span>.<span class="property">mNodeList</span>[eEndID];</span><br><span class="line">      <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">      distX = startNode.<span class="property">x</span> - endNode.<span class="property">x</span>;</span><br><span class="line">      distY = startNode.<span class="property">y</span> - endNode.<span class="property">y</span>;</span><br><span class="line">      dist = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(distX * distX + distY * distY);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eStartID] = <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eStartID] - distX * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eStartID] = <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eStartID] - distY * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eEndID] = <span class="variable language_">this</span>.<span class="property">mDxMap</span>[eEndID] + distX * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eEndID] = <span class="variable language_">this</span>.<span class="property">mDyMap</span>[eEndID] + distY * dist / k * <span class="variable language_">this</span>.<span class="property">condenseFactor</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateCoordinates</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxt = <span class="number">4</span>, maxty = <span class="number">3</span>; <span class="comment">//Additional coefficients.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; mNodeList.<span class="property">length</span>; v++) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = mNodeList[v];</span><br><span class="line">      <span class="keyword">let</span> dx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(mDxMap[v]);</span><br><span class="line">      <span class="keyword">let</span> dy = <span class="title class_">Math</span>.<span class="title function_">floor</span>(mDyMap[v]);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (dx &lt; -maxt) dx = -maxt;</span><br><span class="line">      <span class="keyword">if</span> (dx &gt; maxt) dx = maxt;</span><br><span class="line">      <span class="keyword">if</span> (dy &lt; -maxty) dy = -maxty;</span><br><span class="line">      <span class="keyword">if</span> (dy &gt; maxty) dy = maxty;</span><br><span class="line">      node.<span class="property">x</span> = node.<span class="property">x</span> + dx &gt;= <span class="variable constant_">CANVAS_WIDTH</span> || node.<span class="property">x</span> + dx &lt;= <span class="number">0</span> ? node.<span class="property">x</span> - dx : node.<span class="property">x</span> + dx;</span><br><span class="line">      node.<span class="property">y</span> = node.<span class="property">y</span> + dy &gt;= <span class="variable constant_">CANVAS_HEIGHT</span> || node.<span class="property">y</span> + dy &lt;= <span class="number">0</span> ? node.<span class="property">y</span> - dy : node.<span class="property">y</span> + dy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">iterateCount</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; iterateCount; i++) &#123;</span><br><span class="line">      <span class="title function_">calculateRepulsive</span>();</span><br><span class="line">      <span class="title function_">calculateTraction</span>();</span><br><span class="line">      <span class="title function_">updateCoordinates</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Four basic algorithm ideas</title>
    <url>/en/posts/f7e2a78f/</url>
    <content><![CDATA[<p>Data structures and algorithms are a very large range, and various problems require different algorithms, which are either complex or simple. This blog simply introduces four very basic and commonly used algorithm ideas through classic knapsack problems, namely greed, divide and conquer, backtracking, and motion rules.</p>
<p>These four are algorithm ideas, not specific algorithms, mainly to understand their ideas, not specific implementations.</p>
<p>This article is mainly to help me re-summarize the knowledge points that were slightly scattered before, so a lot of specific content is in other previous blogs.</p>
<span id="more"></span>
<p>Suppose we have a backpack that can hold 100kg of items and can hold various items. We have the following 5 types of beans, each of which has a different total amount and total value. In order to maximize the total value of the items in the backpack, how do we choose which beans to put in the backpack? How many beans should each be packed?</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Items</th>
<th>Total quantity (kg)</th>
<th>Total value (yuan)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Soybeans</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>Green Beans</td>
<td>30</td>
<td>90</td>
</tr>
<tr>
<td>Red Beans</td>
<td>60</td>
<td>120</td>
</tr>
<tr>
<td>Black Beans</td>
<td>20</td>
<td>80</td>
</tr>
<tr>
<td>Green beans</td>
<td>50</td>
<td>75</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><p>In fact, this question is very simple. I estimate that you can figure it out at once. That’s right, we just need to calculate the unit price of each item first, and install it in order from high to low. The unit price is arranged from high to low, in order: black beans, mung beans, red beans, green beans, and soybeans, so we can pack 20kg of black beans, 30kg of mung beans, and 50kg of red beans into our backpack.</p>
<p>The solution to this problem is obvious, and it essentially relies on a greedy algorithm. Combined with this example, I summarize the steps of greedy algorithm to solve the problem, let’s take a look.</p>
<h3 id="Problem-solving-steps"><a href="#Problem-solving-steps" class="headerlink" title="Problem-solving steps"></a>Problem-solving steps</h3><p>The first step, when we see this kind of problem, we must first think of greedy algorithm: for a set of data, we <strong> define the limit value and the expected value </strong>, hoping to select a few data, in the case of meeting the limit value, the expected value is the largest.</p>
<p>By analogy to the example just now, the limit value is that the weight cannot exceed 100kg, and the expected value is the total value of the item. This set of data is 5 kinds of beans. We choose a part that weighs no more than 100kg and has the largest total value.</p>
<p>In the second step, we try to see if this problem can be solved with a greedy algorithm: <strong> Each time you choose the data that contributes the most to the expected value in the current case, with the same contribution to the limit value </strong>.</p>
<p>By analogy to the example just now, we choose the bean with the highest unit price from the remaining beans every time, that is, the bean that contributes the most to the value under the same weight.</p>
<p>In the third step, we will give a few examples to see if the results produced by the greedy algorithm are optimal. In most cases, just give a few examples to verify. Strictly proving the correctness of a greedy algorithm is very complicated and requires more mathematical reasoning. Moreover, from a practical point of view, most problems that can be solved with greedy algorithms are obvious and do not require strict mathematical derivation proofs.</p>
<h3 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h3><p>The premise of greedy algorithm work is that the choice of the previous step will not affect the choice of the next step. For example, this problem just now, if I add restrictions, if I choose soybeans, I cannot choose mung beans. This problem cannot be solved with greedy algorithm.</p>
<h2 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h2><p>Let’s slightly modify the backpack problem just now to become a 0-1 backpack problem:</p>
<p>We have a backpack, and the total carrying weight of the backpack is Wkg. Now we have n items, each of which varies in weight and is indivisible. We now expect to select several items and load them into the backpack. How to maximize the total weight of the items in the backpack without exceeding the weight that the backpack can carry?</p>
<p>In fact, we have already talked about the backpack problem in the section of greedy algorithm, but the items mentioned there can be divided, and I can load part of an item into the backpack. The backpack problem we talked about today, the items are indivisible, either loaded or not, so it is called the 0-1 backpack problem. Obviously, this problem can no longer be solved by greedy algorithms. Let’s now see how to solve it with a backtracking algorithm.</p>
<p><strong> Backtracking is an idea that is often used in conjunction with recursion, a programming technique. </strong></p>
<p>The processing idea of backtracking is somewhat similar to enumeration search. We enumerate all the solutions and find the solution that meets the expectation.</p>
<p><strong> In order to regularly enumerate all possible solutions and avoid omission and repetition, we divide the problem solving process into multiple stages </strong>. At each stage, we will face a fork in the road. We first choose a road at will. When we find that this road cannot go (the solution that does not meet the expectations), we will go back to the previous fork in the road and choose another way to continue walking.</p>
<p>For a detailed explanation, see this blog: <a href="https://sunra.top/posts/376d0826/">https://sunra.top/posts/376d0826/</a></p>
<p>In fact, from a one-sided point of view, backtracking is to record which nodes you have passed in the process of depth-first traversal, and the condition of reaching the leaf node is that there is no other way to choose, and then start backtracking.</p>
<h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><p>Dynamic Programming if from the perspective of recursion, in fact, is not a very difficult idea, the above-mentioned <strong> backtracking is to record the path taken in the traversal process, then Dynamic Programming is a recursion process with memos, in other words, if there are repeated sub-problems in the recursion process, use Dynamic Programming, if not, then backtrack. </strong></p>
<p>For example, in the process of recursion, I choose the optimal solution of the first four kinds of beans is a function of selecting the first three and selecting the first two optimal solutions, that is, dp (4) = f (dp (3), dp (2)), Once I calculate dp (4), I first find a place to save it. When I calculate dp (5), I need to use dp (4), so I don’t need to continue recursion.</p>
<p>Converting this recursion process into a recursive formula is Dynamic Programming.</p>
<p>Details can be found here: <a href="https://sunra.top/posts/a80d0031/">https://sunra.top/posts/a80d0031/</a></p>
<h2 id="Divide-and-conquer-algorithm"><a href="#Divide-and-conquer-algorithm" class="headerlink" title="Divide and conquer algorithm"></a>Divide and conquer algorithm</h2><p>The core idea of divide and conquer algorithm is actually four words, divide and conquer, that is, divide the original problem into n sub-problems with smaller scale and similar structure to the original problem, solve these sub-problems recursion, and then combine the results to get the solution of the original problem.</p>
<p>This definition looks a bit similar to the definition of recursion. Regarding the difference between divide and conquer and recursion, we said in the order (below) that the divide and conquer algorithm is an idea to deal with problems, and recursion is a programming technique. In fact, divide and conquer algorithms are generally suitable for recursion implementation. In the recursion implementation of the divide and conquer algorithm, each layer of recursion will involve the following three operations:</p>
<p>Decomposition: Decompose the original problem into a series of sub-problems;</p>
<ul>
<li><p>Solve: solve each sub-problem recursively, and if the sub-problem is small enough, solve it directly;</p>
</li>
<li><p>Merge: Merge the results of sub-questions into the original question.</p>
</li>
</ul>
<p>Divide and conquer algorithm can solve the problem, generally need to meet the following conditions:</p>
<ul>
<li><p>The original problem has the same pattern as the decomposed small problem;</p>
</li>
<li><p>The subproblems decomposed into the original problem can be solved independently, and there is no correlation between the subproblems. This is the obvious difference between the divide-and-conquer algorithm and Dynamic Programming.</p>
</li>
<li><p>has a decomposition termination condition, that is, when the problem is small enough, it can be solved directly;</p>
</li>
<li><p>The subproblem can be merged into the original problem, and the complexity of this merge operation cannot be too high, otherwise the effect of reducing the overall complexity of the algorithm will not be achieved.</p>
</li>
</ul>
<p><a href="https://sunra.top/posts/90a4c0c1/">归并排序</a>就是一个非常典型的分治思想</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/en/posts/1bb08f7a/</url>
    <content><![CDATA[<p> JSON Web Token (abbreviated JWT) is the most popular cross-domain authentication solution available today</p>
<span id="more"></span>
<h2 id="JWT-Background"><a href="#JWT-Background" class="headerlink" title="JWT Background"></a>JWT Background</h2><p>Internet services are inseparable from user authentication. The general process is as follows.</p>
<blockquote>
<ol>
<li><p>The user sends the username and password to the server.</p>
</li>
<li><p>After server authentication, relevant data is saved inside the current session, such as user role, login time, etc.</p>
</li>
<li><p>The server returns a session_id to the user, which is written to the user’s cookie.</p>
</li>
<li><p>Each subsequent request from the user will send the session_id back to the server via a cookie.</p>
</li>
<li><p>The server receives the session_id, finds the data saved in the previous session, and learns the identity of the user from it.</p>
</li>
</ol>
</blockquote>
<p>The problem with this model is that scaling is not good. If it is a server cluster, or a cross-domain service-oriented architecture, it requires session data sharing, and each server can read the session.</p>
<p>For example, site A and site B are affiliated services of the same company. Now, it is required that once a user logs in at one of the sites, he/she will automatically log in when visiting the other site.</p>
<p>One solution is session data persistence, written to a database or another persistence layer. When various services receive a request, they request data from the persistence layer. The advantage of this solution is that it has a clear architecture, but the disadvantage is that it is a large amount of work. In addition, if the persistence layer hangs, there will be a single point of failure.</p>
<p>Another option is that the server simply does not store the session data, all data is stored on the client side and sent back to the server for each request. jwt is a representative of this option.</p>
<h2 id="Structure-of-JWT"><a href="#Structure-of-JWT" class="headerlink" title="Structure of JWT"></a>Structure of JWT</h2><p>jwt is a very long string with three parts separated by a dot.</p>
<p>The three parts of the JWT are as follows in order.</p>
<blockquote>
<ul>
<li>Header</li>
<li>Payload</li>
<li>Signature</li>
</ul>
</blockquote>
<p>Written in one line, it looks like the following.</p>
<blockquote>
<p>``javascript<br>Header.Payload.Signature<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Header</span><br><span class="line"></span><br><span class="line">The Header section is a JSON object that describes the metadata of the JWT and usually looks like the following.</span><br><span class="line"></span><br><span class="line">``javascript</span><br><span class="line">&#123;</span><br><span class="line">&quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">&quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>In the above code, the <code>alg</code> attribute indicates the algorithm of the signature (algorithm), the default is HMAC SHA256 (written as HS256); the <code>typ</code> attribute indicates the type of this token (token) (type), JWT tokens are uniformly written as <code>JWT</code>.</p>
<p>Finally, the JSON object above is converted to a string using the Base64URL algorithm (see later for details).</p>
<h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>The Payload section is also a JSON object that holds the actual data to be passed. jwt specifies 7 official fields to choose from.</p>
<blockquote>
<ul>
<li>iss (issuer): issuer</li>
<li>exp (expiration time): expiration time</li>
<li>sub (subject): subject</li>
<li>aud (audience)：受众</li>
<li>nbf (Not Before): effective time</li>
<li>iat (Issued At): Time of issuance</li>
<li>jti (JWT ID): No.</li>
</ul>
</blockquote>
<p>In addition to the official fields, you can also define private fields in this section, an example of which is shown below.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line"><span class="string">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Note that the JWT is unencrypted by default and can be read by anyone, so don’t put secret information in this section.</p>
<p>This JSON object is also converted to a string using the Base64URL algorithm.</p>
<h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>The Signature section is a signature for the first two sections to prevent data tampering.</p>
<p>First, a key (secret) needs to be specified. This key is known only to the server and cannot be disclosed to the user. Then, using the signature algorithm specified in the Header (the default is HMAC SHA256), the signature is generated according to the following formula.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">HMACSHA256</span>(</span><br><span class="line"><span class="title function_">base64UrlEncode</span>(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line"><span class="title function_">base64UrlEncode</span>(payload),</span><br><span class="line">secret)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>After the signature is calculated, the Header, Payload and Signature are put together into a string, and each part is separated by a <code>.</code>) between each part, and then it can be returned to the user.</p>
<h2 id="Features-of-JWT"><a href="#Features-of-JWT" class="headerlink" title="Features of JWT"></a>Features of JWT</h2><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><p><strong>1. The solution is more easily scalable horizontally</strong></p>
<p>In the cookie-session scheme, the cookie contains only a session identifier, and information such as user information and authorization lists are stored in the session on the server side. If the authentication information in the session is stored in the JWT, there is no need for the session to exist on the server side. When the server side scales horizontally, there is no need to deal with session replication / session sticky session or to introduce external session storage.</p>
<p><strong>2. The solution protects against CSRF attacks</strong></p>
<h3 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h3><ol>
<li><p><strong>More space occupation. </strong></p>
<p>If the various types of information that originally existed in the server-side session are placed in the JWT and stored in the client, it may cause the JWT to occupy a larger space, requiring consideration of factors such as the space limitations of cookies, and if placed in Local Storage, it may be subject to XSS attacks.</p>
</li>
<li><p><strong>More insecure. </strong></p>
<p>This refers specifically to the solution of saving JWT in Local Storage and then sending it to the server as HTTP header using Javascript. Storing sensitive information in Local Storage is not safe and vulnerable to cross-site scripting (xss for short), which is a kind of “HTML injection” and is called “cross-domain scripting” because the attacking scripts are mostly cross-domain. “These scripts can steal cookies or data from Local Storage. You can see the explanation of the principle of <a href="http://www.cnblogs.com/luminji/archive/2012/05/22/2507185.html">XSS attack</a> in this article.</p>
</li>
<li><p><strong>It is not possible to void a token that has been issued. </strong></p>
<p>All authentication information is in the JWT, and since there is no state on the server side, even if you learn that a JWT has been stolen, there is nothing you can do to invalidate it. Until the JWT expires (and you should absolutely set an expiration time), there is nothing you can do about it.</p>
</li>
<li><p><strong>It is not easy to cope with data expiration. </strong></p>
<p>Similar to the previous article, JWT is somewhat like a cache in that you can only live with “expired” data until it expires, since you can’t void the issued token.</p>
</li>
</ol>
<p>Reference article:</p>
<p> <a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></p>
<p> <a href="https://juejin.im/entry/5993a030f265da24941202c2">https://juejin.im/entry/5993a030f265da24941202c2</a></p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>Azure Key Vault</title>
    <url>/en/posts/dfbc1109/</url>
    <content><![CDATA[<p>Azure Key Vault is a tool for securely storing and accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, or certificates. A vault is logical group of secrets.</p>
<span id="more"></span>
<p>The above paragraph is the description of the official Azure documentation. After reading the Microsoft Azure documentation, the author extracted and summarized the basic concepts, and added some of his own understanding to the original text. After reading the Chinese version, you can have a general understanding of key vault. The original English version is a more professional description, which does not affect the understanding.</p>
<h2 id="What-is-Azure-Key-Vault"><a href="#What-is-Azure-Key-Vault" class="headerlink" title="What is Azure Key Vault"></a>What is Azure Key Vault</h2><p>In simple terms, Azure Key Vault is a place where you can store your sensitive data securely, and you have to pass the identity verification and permission verification to get this data, so we can put sensitive information like certificates, database configuration, etc. here without hard-coding it into the code. When we store the sensitive information on the key vault, we will get the corresponding name, we just need to go to the key vault through the api to get the corresponding information by name (you can also add the version information), this information can be the key (only get public key), certificate information, or some configuration information. Of course, this information is not anyone directly to call the api can get, but you need your Identity information is used to create the Key Vault by the Tenant under the Subscription recognized, there are many ways to get recognized, can be through the id-token, or password, etc..</p>
<p>Azure Key Vault helps solve the following problems:</p>
<ul>
<li><strong>Secret Management</strong> - Azure Key Vault can be used to securely store and tightly control access to tokens, passwords, certificates, API keys and other secrets.</li>
<li><strong>Key Management</strong> - Azure Key Vault can also be used as a key management solution. Use Azure Key Vault to easily create and control the encryption keys used to encrypt your data.</li>
<li><strong>Certificate Management</strong> - Azure Key Vault is also a service that enables you to easily provision, manage and deploy public and private Secure Socket Layer / Transport Layer Security (SSL / TLS) certificates for use with Azure and on-premise connected resources.</li>
<li><strong>Storage is supported by a hardware security module</strong> Confidential-Secret and keys can be protected by software or FIPS 140-2 Level 2 validated HSM.</li>
</ul>
<p>With Azure Key Vault, you can centrally store confidential application data and control the distribution of that data. And because developers can eliminate the need to hard-code security information into their applications, they can greatly improve the security of their applications.</p>
<p>Information stored in Azure Key Vault is preserved with reliable encryption algorithms.</p>
<p>Azure Key Vault can also control access based on Azure AD, and can record who accessed which data at which time.</p>
<h2 id="Azure-Key-Vault-basic-concepts"><a href="#Azure-Key-Vault-basic-concepts" class="headerlink" title="Azure Key Vault basic concepts"></a>Azure Key Vault basic concepts</h2><ul>
<li><strong>Tenant/Tenant</strong> ( <strong>Tenant</strong> ): A tenant is an organization that owns and manages a specific instance of a Microsoft cloud service. Most commonly used to refer to an organization’s Azure and Office 365 service set.</li>
<li><strong>Vault owner</strong>: The vault owner can create a key vault and gain full access and control over it. The vault owner can also set up auditing to record who has access to the secrets and keys. Administrators can control the key lifecycle. They can roll over to a new version of the key, make backups and perform related tasks.</li>
<li><strong>Vault consumer</strong> ( <strong>Vault consumer</strong> ): <strong>Vault consumer</strong> can perform operations on the assets in the key vault when the vault owner grants the user access. The available operations depend on the privileges granted.</li>
<li><strong>Resources</strong> ( <strong>Resource</strong> ): Resources are items that can be managed through Azure. Common examples include virtual machines, storage accounts, web applications, databases, and virtual networks. And many more.</li>
<li><strong>Resource group</strong> ( <strong>Resource group</strong> ): A resource group is a container that contains the resources associated with an Azure solution. A resource group can contain all the resources of the solution, or it can contain only the resources that you want to manage as a group. You can decide how to assign resources to a resource group based on the decisions that make the most sense for your organization.</li>
<li><strong>Service principal</strong>: An Azure service principal is a secure identity that is used by user-created applications, services and automation tools to access specific Azure resources. It can be thought of as a “user identity” (username, password, or credentials) with specific roles and tightly controlled permissions. Unlike a general user identity, a service subject only needs to do certain things. Security can be improved if it is granted only the minimum level of privileges needed to perform administrative tasks.</li>
<li>Azure Active Directory (Azure AD): Azure AD is a tenant’s Active Directory service. Each directory has one or more domains. A directory can have many subscriptions associated with it, but only one tenant. Each organization can have one tenant, which has its own ID to identify itself, and each Tenant has its own one or more SubScriptions, and the Subscriptions are in a many-to-one relationship with the Azure AD directory. Each person can go to Azure to apply for their own account, this account is called Identity on Azure, each Identity can create Azure AD account. if your Azure AD account in a Tenant’s Azure AD directory, and the Tenant granted you If your Azure AD account is in a Tenant’s Azure AD directory, and the Tenant grants you access to a Subscription, you can use the Services under that Subscription. directory-whatis)</li>
<li><strong>Azure Tenant ID</strong> ( <strong>Azure tenant ID</strong> ): The tenant ID is a unique way to identify an Azure AD instance in an Azure subscription.</li>
<li><strong>Managed identities</strong> ( <strong>Managed identities</strong> ): Azure Key Vault provides a way to securely store credentials and other keys and secrets, but your code needs to be authenticated through Key Vault to retrieve them. By using a managed identity, you can simplify the steps to resolve this issue by providing an automated managed identity for Azure services in Azure AD. You can use this identity to authenticate against Key Vault or any service that supports Azure AD authentication, without having to include any credentials in your code.</li>
</ul>
<p><strong>Anybody with an Azure subscription can create and use key vaults</strong>. Although Key Vault benefits developers and security administrators, it can be implemented and managed by an organization’s administrator who manages other Azure services.</p>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p> This section focuses on how Azure Key Vault ensures that your information can only be seen by those you authorize to see it.</p>
<p>There are two levels of Key Vault management, which correspond to two access models. The first level is called management plane, and this level of relationship can operate on the Key Vault itself, and can create and delete a Key Vault. However, regardless of the level, the identity verification is achieved through Azure AD, which determines what kind of operations a user can do to the Key Vault through <strong>Role Based Access Control (RBAC)</strong>.</p>
<p>RBAC made under different levels only applies to users under that level, for example, the RBAC you make under the level of Subscription only applies to users under that Subscription.</p>
<p>At the same time for the secret, key, certificate permissions management is separate, that is to say, you the same Subscription under the user in the same Key Vault may have access to the secret, but for the key but not.</p>
<p>You need to protect encryption keys and secrets like certificates, connection strings, and passwords in the cloud so you are using Azure Key Vault. Since you are storing sensitive and business critical data, you need to take steps to maximize the security of your vaults and the data stored in them.</p>
<h3 id="Identity-and-access-management"><a href="#Identity-and-access-management" class="headerlink" title="Identity and access management"></a>Identity and access management</h3><p>When you create a key vault in an Azure subscription, it’s automatically associated with the Azure AD tenant of the subscription. Anyone trying to manage or retrieve content from a vault must be authenticated by Azure AD.</p>
<ul>
<li>Authentication establishes the identity of the caller.</li>
<li>Authorization determines which operations the caller can perform. Authorization in Key Vault uses a combination of <a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/overview">Role based access control</a> (RBAC) and Azure Key Vault access policies.</li>
</ul>
<h4 id="Access-model-overview"><a href="#Access-model-overview" class="headerlink" title="Access model overview"></a>Access model overview</h4><p>Access to vaults takes place through two interfaces or planes. These planes are the management plane and the data plane.</p>
<ul>
<li>The <em>management plane</em> is where you manage Key Vault itself and it is the interface used to create and delete vaults. You can also read key vault properties and manage access policies.</li>
<li>The <em>data plane</em> allows you to work with the data stored in a key vault. You can add, delete, and modify keys, secrets, and certificates.</li>
</ul>
<p>To access a key vault in either plane, all callers (users or applications) must be authenticated and authorized. Both planes use Azure Active Directory (Azure AD) for authentication. For authorization, the management plane uses role-based access control (RBAC) and the data plane uses a Key Vault access policy.</p>
<p>The model of a single mechanism for authentication to both planes has several benefits:</p>
<ul>
<li>Organizations can control access centrally to all key vaults in their organization.</li>
<li>If a user leaves, they instantly lose access to all key vaults in the organization.</li>
<li>Organizations can customize authentication by using the options in Azure AD, such as to enable multi-factor authentication for added security</li>
</ul>
<h4 id="Managing-administrative-access-to-Key-Vault"><a href="#Managing-administrative-access-to-Key-Vault" class="headerlink" title="Managing administrative access to Key Vault"></a>Managing administrative access to Key Vault</h4><p>When you create a key vault in a resource group, you manage access by using Azure AD. You grant users or groups the ability to manage the key vaults in a resource group. You can grant access at a specific scope level by assigning the appropriate RBAC roles. To grant access to a user to manage key vaults, you assign a predefined <code>key vault Contributor</code> role to the user at a specific scope. The following scopes levels can be assigned to an RBAC role:</p>
<ul>
<li><strong>Subscription</strong>: An RBAC role assigned at the subscription level applies to all resource groups and resources within that subscription.</li>
<li><strong>Resource group</strong>: An RBAC role assigned at the resource group level applies to all resources in that resource group.</li>
<li><strong>Specific resource</strong>: An RBAC role assigned for a specific resource applies to that resource. In this case, the resource is a specific key vault.</li>
</ul>
<h4 id="Controlling-access-to-Key-Vault-data"><a href="#Controlling-access-to-Key-Vault-data" class="headerlink" title="Controlling access to Key Vault data"></a>Controlling access to Key Vault data</h4><p>Key Vault access policies grant permissions separately to keys, secrets, or certificate. You can grant a user access only to keys and not to secrets. Access permissions for keys, secrets, and certificates are managed at the vault level.</p>
<h4 id="Network-access"><a href="#Network-access" class="headerlink" title="Network access"></a>Network access</h4><p>You can reduce the exposure of your vaults by specifying which IP addresses have access to them. The virtual network service endpoints for Azure Key Vault allow you to restrict access to a specified virtual network. The endpoints also allow you to restrict access to a list of IPv4 (internet protocol version 4) address ranges. Any user connecting to your key vault from outside those sources is denied access.</p>
<p>After firewall rules are in effect, users can only read data from Key Vault when their requests originate from allowed virtual networks or IPv4 address ranges. This also applies to accessing Key Vault from the Azure portal. Although users can browse to a key vault from the Azure portal, they might not be able to list keys, secrets, or certificates if their client machine is not in the allowed list. This also affects the Key Vault Picker by other Azure services. Users might be able to see list of key vaults, but not list keys, if firewall rules prevent their client machine.</p>
<h3 id="Azure-Key-Vault-security-worlds-and-geographic-boundaries"><a href="#Azure-Key-Vault-security-worlds-and-geographic-boundaries" class="headerlink" title="Azure Key Vault security worlds and geographic boundaries"></a>Azure Key Vault security worlds and geographic boundaries</h3><p>Azure Key Vault is a multi-tenant service where the same Azure Location uses the same HSM and enjoys the same security perimeter, i.e., in the same security world.</p>
<p>Also Azure Key Vault can back up data, but the backup needs to meet two conditions:</p>
<ul>
<li>Two Azure locations in the same geographic location</li>
<li>Two key vaults belong to the same subscription</li>
</ul>
<h3 id="Secure-access-to-a-key-vault"><a href="#Secure-access-to-a-key-vault" class="headerlink" title="Secure access to a key vault"></a>Secure access to a key vault</h3><h4 id="Access-model-overview-1"><a href="#Access-model-overview-1" class="headerlink" title="Access model overview"></a>Access model overview</h4><p>Access to the keystore is controlled through two interfaces: the management plane and the data plane. The management plane is where you manage the key vault itself. Operations in this plane include creating and deleting key vaults, retrieving key vault properties, and updating access policies. The data plane is where you work with the data stored in the key vault. You can add, delete, and modify keys, secrets, and certificates.<br>To access the keystore in either plane, all callers (users or applications) must have proper authentication and authorization. Authentication establishment</p>
<h4 id="Active-Directory-authentication"><a href="#Active-Directory-authentication" class="headerlink" title="Active Directory authentication"></a>Active Directory authentication</h4><p>When you create a key vault in an Azure subscription, it’s automatically associated with the Azure AD tenant of the subscription. All callers in both planes must register in this tenant and authenticate to access the key vault. In both cases, applications can access Key Vault in two ways:</p>
<ul>
<li><strong>User plus application access</strong>: The application accesses Key Vault on behalf of a signed-in user. Examples of this type of access include Azure PowerShell and the Azure portal. User access is granted in two ways. Users can access Key Vault from any application, or they must use a specific application (referred to as <em>compound identity</em>).</li>
<li><strong>Application-only access</strong>: The application runs as a daemon service or background job. The application identity is granted access to the key vault.</li>
</ul>
<p>For both types of access, the application authenticates with Azure AD. The application uses any <a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/authentication-scenarios">supported authentication method</a> based on the application type. The application acquires a token for a resource in the plane to grant access. The resource is an endpoint in the management or data plane, based on the Azure environment. The application uses the token and sends a REST API request to Key Vault. To learn more, review the <a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow">whole authentication flow</a>.</p>
<p>The model of a single mechanism for authentication to both planes has several benefits:</p>
<ul>
<li>Organizations can control access centrally to all key vaults in their organization.</li>
<li>If a user leaves, they instantly lose access to all key vaults in the organization.</li>
<li>Organizations can customize authentication by using the options in Azure AD, such as to enable multi-factor authentication for added security.</li>
</ul>
<h4 id="Resource-endpoints"><a href="#Resource-endpoints" class="headerlink" title="Resource endpoints"></a>Resource endpoints</h4><p> Applications access both planes through endpoints.</p>
<p>The access controls for the two planes work independently. To grant an application access to use keys in a key vault, you grant data plane access by using a Key Vault access policy. To grant a user read access to Key Vault properties and tags, but not access to data (keys, secrets, or certificates), you grant management plane access with RBAC. **</p>
<h2 id="Certificate"><a href="#Certificate" class="headerlink" title="Certificate"></a>Certificate</h2><h3 id="About-keys-secrets-and-certificates"><a href="#About-keys-secrets-and-certificates" class="headerlink" title="About keys, secrets, and certificates"></a>About keys, secrets, and certificates</h3><p>Azure Key Vault enables Microsoft Azure applications and users to store and use several types of secret/key data</p>
<ul>
<li>Cryptographic key (Cryptographic key): supports multiple key types and algorithms and allows to use Hardware Security Module (HSM) for high value keys. We can actually only get the public key through the api.</li>
<li>Confidential (Secrets): Provides confidential and secure storage, such as passwords and database connection strings.</li>
<li>Certificates (Certificates): Supports certificates built on keys and secrets, and adds auto-renewal functionality.</li>
<li>Azure Storage (Azure Storage): Enables you to manage keys for your Azure Storage account. Internally, Key Vault can list (synchronize) keys using Azure Storage accounts and regenerate (rotate) keys periodically.</li>
</ul>
<h4 id="Key-Vaults-keys"><a href="#Key-Vaults-keys" class="headerlink" title="Key Vaults keys"></a>Key Vaults keys</h4><p>Encryption keys in Key Vault are represented as JSON Web Key [JWK] objects. the JWK / JWA base specification has also been extended to enable key types specific to Key Vault implementations. For example, keys that can only be used in Key Vault HSM can be securely transported using an HSM vendor-specific package import key.</p>
<ul>
<li><strong>“Soft” key</strong>: A key that Key Vault processes in software but encrypts at rest using the system key in HSM. Customers can import an existing RSA or EC (elliptic curve) key, or request Key Vault to generate one.</li>
<li><strong>“Hard” keys</strong>: Keys processed in the HSM (Hardware Security Module). These keys are protected in one of the Key Vault HSM secure worlds (one for each geographic region to maintain isolation). Clients can import RSA or EC keys in soft form or by exporting them from a compatible HSM device. Clients can also request Key Vault to generate keys. This key type adds the key_hsm attribute to the JWK fetch to carry HSM key material.</li>
</ul>
<p>After creating a key in the keystore, you can use the key to perform the following encryption operations:</p>
<ul>
<li><strong>Sign and verify</strong>: Technically, this operation is a “signed hash” or “verified hash” because Key Vault does not support content hashing as part of signature creation. The application should hash the data to be signed locally and then request Key Vault to sign the hash. For applications that may not have access to [public] key material, support for verification of the signed hash is provided for ease of operation. For best application performance, verify that the operation is performed locally.</li>
<li><strong>Key Encryption/Packaging</strong>: A key stored in Key Vault can be used to protect another key, usually a symmetric content encryption key (CEK). When the key in the Key Vault is not symmetric, key encryption will be used. For example, RSA-OAEP and WRAPKEY / UNWRAPKEY operations are equivalent to ENCRYPT / DECRYPT. If the key in the Key Vault is symmetric, then key wrapping is used. For example, AES-KW supports WRAPKEY operation for applications that do not have access to [public] key information. For best application performance, WRAPKEY operations should be performed locally.</li>
<li><strong>Encryption and Decryption</strong>: The key stored in Key Vault can be used to encrypt or decrypt a single block of data. The size of the block is determined by the key type and the selected encryption algorithm. For convenience, the Encrypt operation is provided for applications that may not have access to [public] key information. For best application performance, encryption operations should be performed locally.</li>
</ul>
<h4 id="Key-Vault-secrets"><a href="#Key-Vault-secrets" class="headerlink" title="Key Vault secrets"></a>Key Vault secrets</h4><p>From a developer’s perspective, Key Vault APIs accept and return secret values as strings. Internally, Key Vault stores and manages secrets as sequences of octets (8-bit bytes), with a maximum size of 25k bytes each. The Key Vault service doesn’t provide semantics for secrets. It merely accepts the data, encrypts it, stores it, and returns a secret identifier (“id”). The identifier can be used to retrieve the secret at a later time.</p>
<p>For highly sensitive data, clients should consider additional layers of protection for data. Encrypting data using a separate protection key prior to storage in Key Vault is one example.</p>
<p>Key Vault also supports a contentType field for secrets. Clients may specify the content type of a secret to assist in interpreting the secret data when it’s retrieved. The maximum length of this field is 255 characters. There are no pre-defined values. The suggested usage is as a hint for interpreting the secret data. For instance, an implementation may store both passwords and certificates as secrets, then use this field to differentiate. There are no predefined values.</p>
<h4 id="Key-Vault-Certificates"><a href="#Key-Vault-Certificates" class="headerlink" title="Key Vault Certificates"></a>Key Vault Certificates</h4><p>Key Vault certificates support provides for management of your x509 certificates and the following behaviors:</p>
<ul>
<li>Allows a certificate owner to create a certificate through a Key Vault creation process or through the import of an existing certificate. Includes both self-signed and Certificate Authority generated certificates.</li>
<li>Allows a Key Vault certificate owner to implement secure storage and management of X509 certificates without interaction with private key material.</li>
<li>Allows a certificate owner to create a policy that directs Key Vault to manage the life-cycle of a certificate.</li>
<li>Allows certificate owners to provide contact information for notification about life-cycle events of expiration and renewal of certificate.</li>
<li>Supports automatic renewal with selected issuers - Key Vault partner X509 certificate providers / certificate authorities.</li>
</ul>
<p>This article is only an introduction to the basic concepts of Azure Key Vault and the relationships between them. For more detailed information, such as how Key Vault monitors, throttles, authentication, request parameters, and other details, please check the official documentation at the end of this article.</p>
<p>Reference article:</p>
<p> <a href="https://docs.microsoft.com/en-us/azure/key-vault/">https://docs.microsoft.com/en-us/azure/key-vault/</a></p>
<p> <a href="https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis">https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis</a></p>
<p> <a href="https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-subscriptions-associated-directory">https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-subscriptions-associated-directory</a></p>
<p> <a href="https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-manage-groups">https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-manage-groups</a></p>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
  </entry>
  <entry>
    <title>OAuth and OIDC</title>
    <url>/en/posts/46cef286/</url>
    <content><![CDATA[<h2 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h2><p>OAuth is an open web standard for authorization that is widely used around the world and is currently available in version 2.0</p>
<span id="more"></span>
<h3 id="Explanation-of-terms"><a href="#Explanation-of-terms" class="headerlink" title="Explanation of terms"></a>Explanation of terms</h3><ul>
<li><p><strong>Third-party application</strong>: Third-party application, also known as “client” in this document.</p>
</li>
<li><p><strong>HTTP Service</strong>: HTTP Service Provider, referred to as “Service Provider” in this document.</p>
</li>
<li><p><strong>Resource Owner</strong>: The person who owns the resource, also known as the “user” in this document.</p>
</li>
<li><p><strong>User Agent</strong>: User agent, in this article, means browser.</p>
</li>
<li><p><strong>Authorization server</strong>: Authentication server, i.e., the server dedicated by the service provider to handle authentication.</p>
</li>
<li><p><strong>Resource server</strong>: Resource server, i.e., the server where the service provider stores user-generated resources. It can be the same server as the authentication server, or a different server.</p>
</li>
</ul>
<p>OAuth sets up an authorization layer between the “client” and the “service provider”. The “client” cannot log in directly to the “service provider”, but only to the authorization layer, thus distinguishing the user from the client. The token used by the “client” to log in to the authorization layer is different from the user’s password. The user can specify the scope of authority and validity of the authorization token at the time of login.</p>
<p>After the “client” logs in to the authorization layer, the “service provider” opens the user’s stored data to the “client” according to the scope and validity of the token.</p>
<h3 id="Authorization-Process"><a href="#Authorization-Process" class="headerlink" title="Authorization Process"></a>Authorization Process</h3><ol>
<li><p>After the user opens the client, the client asks the user to give authorization.</p>
</li>
<li><p>The user agrees to give the client authorization.</p>
</li>
<li><p>The client uses the authorization obtained in the previous step to request a token from the authentication server.</p>
</li>
<li><p>After the authentication server authenticates the client, it confirms that there is no error and agrees to issue the token.</p>
</li>
<li><p>The client uses the token to request access to resources from the resource server.</p>
</li>
<li><p>The resource server confirms that the token is correct and agrees to open the resource to the client.</p>
</li>
</ol>
<p>The key in these steps is how the client obtains authorization, OAuth 2.0 defines four different ways to obtain authorization.</p>
<h3 id="Four-ways-to-get-authorization"><a href="#Four-ways-to-get-authorization" class="headerlink" title="Four ways to get authorization"></a>Four ways to get authorization</h3><p>OAuth 2.0 defines four types of authorization.</p>
<ul>
<li>Authorization code mode (authorization code)</li>
<li>Simplification mode (implicit)</li>
<li>密码模式（resource owner password credentials）</li>
<li>Client mode (client credentials)</li>
</ul>
<h4 id="Authorization-code-mode"><a href="#Authorization-code-mode" class="headerlink" title="Authorization code mode"></a>Authorization code mode</h4><p>(A) The user accesses the client, which directs the former to the authentication server.</p>
<p>(B) The user chooses whether to grant authorization to the client.</p>
<p>(C) Assuming that the user gives authorization, the authentication server directs the user to the redirection URI specified by the client in advance, along with an authorization code.</p>
<p>(D) The client receives the authorization code, attaches the earlier “redirect URI” and requests a token from the authentication server. This step is done on the server in the backend of the client and is not visible to the user.</p>
<p>(E) The authentication server verifies the authorization code and redirect URI, and then sends an access token and a refresh token to the client after confirming that there are no errors.</p>
<p>The URI of the client requesting authentication in step A, contains the following parameters:</p>
<ul>
<li>response_type: indicates the authorization type, mandatory, the value here is fixed to “code”</li>
<li>client_id: the ID of the client, required</li>
<li>redirect_uri: means redirect URI, optional</li>
<li>scope: indicates the scope of the requested permission, optional</li>
<li>state: indicates the current state of the client, you can specify any value, the authentication server will return this value unchanged.</li>
</ul>
<p>In step C, the server responds to the client’s URI with the following parameters:</p>
<ul>
<li>code: indicates the authorization code, mandatory. The validity of this code should be very short, usually set to 10 minutes, the client can only use this code once, otherwise it will be rejected by the authorization server. The code is in one-to-one correspondence with the client ID and the redirect URI.</li>
<li>state: If the client’s request contains this parameter, the authentication server’s response must also contain this parameter in exactly the same way.</li>
</ul>
<p>In step D, the HTTP request for a token from the client to the authentication server contains the following parameters:</p>
<ul>
<li>grant_type: indicates the authorization mode used, mandatory, the value here is fixed to “authorization_code”.</li>
<li>code: indicates the authorization code obtained in the previous step, mandatory.</li>
<li>redirect_uri: indicates the redirect URI, mandatory, and must be consistent with the value of this parameter in step A.</li>
<li>client_id: the client ID, mandatory.</li>
</ul>
<p>The HTTP reply sent by the authentication server in step E, contains the following parameters:</p>
<ul>
<li>access_token: indicates the access token, mandatory.</li>
<li>token_type: indicates the token type, the value is case-insensitive, mandatory, can be bearer type or mac type.</li>
<li>expires_in: indicates the expiration time in seconds. If this parameter is omitted, the expiration time must be set in some other way.</li>
<li>refresh_token: indicates the refresh token, which is used to get the next access token, optional.</li>
<li>scope: indicates the scope of the permission, if the scope is the same as the client application, this item can be omitted.</li>
</ul>
<h4 id="Simplify-mode"><a href="#Simplify-mode" class="headerlink" title="Simplify mode"></a>Simplify mode</h4><p> The simplicit grant type requests a token directly from the authentication server in the browser without going through the server of the third-party application, skipping the “authorization code” step, hence the name. All steps are done in the browser, the token is visible to the visitor, and the client does not need to authenticate.</p>
<p>(A) The client directs the user to the authentication server.</p>
<p>(B) The user decides whether to give authorization to the client.</p>
<p>(C) Assuming the user gives authorization, the authentication server directs the user to the “redirect URI” specified by the client and includes the access token in the hash portion of the URI.</p>
<p>(D) The browser sends a request to the resource server, which does not include the Hash value received in the previous step.</p>
<p>(E) The resource server returns a web page that contains code to get the token in the Hash value.</p>
<p>(F) The browser executes the script obtained in the previous step and extracts the token.</p>
<p>(G) The browser sends the token to the client.</p>
<h4 id="password-mode"><a href="#password-mode" class="headerlink" title="password mode"></a>password mode</h4><p>In password mode (Resource Owner Password Credentials Grant), the user provides the client with his or her username and password. The client uses this information to request authorization from the “service provider”.</p>
<p>In this model, the user must give his password to the client, but the client must not store it. This is usually used in cases where the user has a high level of trust in the client, such as when the client is part of the operating system or produced by a reputable company. The authentication server should only consider using this mode if other authorization modes cannot be implemented.</p>
<p>(A) The user provides the user name and password to the client.</p>
<p>(B) The client sends the user name and password to the authentication server and requests a token from the latter.</p>
<p>(C) After the authentication server confirms that there is no error, it provides the access token to the client.</p>
<p>In step B, the client sends an HTTP request with the following parameters:</p>
<ul>
<li>grant_type: the authorization type, the value here is fixed to “password”, mandatory.</li>
<li>username: user name, required.</li>
<li>password: the password of the user, mandatory.</li>
<li>scope: the scope of the permission, optional.</li>
</ul>
<h4 id="Client-Mode"><a href="#Client-Mode" class="headerlink" title="Client Mode"></a>Client Mode</h4><p> Client mode (Client Credentials Grant) means that the client authenticates to the “service provider” in its own name, rather than in the name of the user. Strictly speaking, the client mode is not part of the OAuth framework to solve the problem. In this model, the user registers directly with the client, and the client asks the “service provider” to provide services in its own name, so there is no authorization problem.</p>
<h3 id="Update-token"><a href="#Update-token" class="headerlink" title="Update token"></a>Update token</h3><p>If the client’s “access token” has expired when the user accesses, you need to use the “update token” to request a new access token.</p>
<p>The client sends an HTTP request to update the token, containing the following parameters:</p>
<ul>
<li>grant<em>type: indicates the authorization mode used, the value here is fixed to “refresh</em>token”, mandatory.</li>
<li>refresh_token: indicates the update token received earlier, mandatory.</li>
<li>scope：Indicates the authorization scope of the application, which cannot exceed the scope of the previous application. If this parameter is omitted, it means the same as the previous one.</li>
</ul>
<h2 id="OIDC"><a href="#OIDC" class="headerlink" title="OIDC"></a>OIDC</h2><p>OpenID Connect is an interoperable authentication protocol based on the OAuth 2.0 family of specifications. It is implemented using simple REST / JSON message flows and can be easily integrated by developers compared to any previous authentication protocol.</p>
<p>OpenID Connect allows developers to authenticate users across websites and applications without the need to own and manage password files. openID Connect allows all types of clients, including browser-based<a href="https://link.jianshu.com?t=http://lib.csdn.net/base/javascript">JavaScript</a>and native mobile applications, start the login flow and receive verifiable assertions about the identity of the logged-in user.</p>
<p> Briefly, <em>OIDC</em> is a security mechanism for applications to connect to an Identity Service to obtain user information and return that information to the application in a secure and reliable way.</p>
<h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h3><p> <strong>OpenID</strong> is <em>Authentication</em>, which authenticates the user’s identity and determines whether it is valid, i.e., lets the site know that “you are the user you claim to be”;</p>
<p><strong>OAuth</strong> is <em>Authorization</em>, which is the authorization of a user to allow certain actions when the user’s identity is known to be legitimate, i.e., to let the site know “you are allowed to do those things”.<br> It is clear from this that authorization is done after authentication, and only if the user’s identity is determined can authorization be granted.</p>
<p><em>OpenID Connect</em> is a combination of “authentication” and “authorization”, and because it is based on the <em>OAuth</em> protocol, the <em>OpenID-Connect</em> protocol also contains the <strong>client_id</strong>, <strong>client_secret</strong> and <strong>redirect_uri</strong> fields. The <em>OpenID-Connect</em> protocol also contains fields such as <strong>client_id</strong>, <strong>client_secret</strong> and <strong>redirect_uri</strong>. This information is stored in the “authentication server” to ensure that specific clients receive information only from legitimate application platforms. This is done in order to prevent <em>client_id</em> leaks from causing malicious websites to initiate <em>OIDC</em> processes.</p>
<h3 id="Process-Introduction"><a href="#Process-Introduction" class="headerlink" title="Process Introduction"></a>Process Introduction</h3><p><em>OAuth2</em> provides <em>Access Token</em> to solve the problem of authorizing third-party clients to access protected resources; similarly, <em>OIDC</em> provides <em>ID Token</em> on top of this to solve the problem of identifying user authentication by third-party clients. The core of <em>OIDC</em> is to provide the user’s authentication information (<em>ID-Token</em>) to the third-party client along with the authorization process of <em>OAuth2</em>, <em>ID-Token</em> is wrapped using <strong>JWT</strong> format, thanks to<a href="https://sunra.top/posts/1bb08f7a/">JWT</a>The self-contained, compact, and tamper-proof mechanism of <em>ID-Token</em> allows it to be securely passed to third-party client applications and easily verified. There should be a server that uses the <em>Access-Token</em> interface to <em>UserInfo</em> to exchange more information about the user after verifying that the <em>ID-Token</em> is correct.</p>
<p>It is clear from the above that <em>OIDC</em> follows the <em>OAuth</em> protocol flow and returns an <em>ID-Token</em> to authenticate the user’s identity while applying for an <em>Access-Token</em>.</p>
<h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><p><strong>EU</strong>: End User, user.</p>
<p> <strong>RP</strong>: Relying Party , used to refer to a trusted client in <em>OAuth2</em>, the consumer of authentication and authorization information;</p>
<p> <strong>OP</strong>: OpenID Provider, a service provider with the ability to provide EU authentication (such as the authorization service in <em>OAuth2</em>), used to provide the RP with EU authentication information;</p>
<p> <strong>ID-Token</strong>: data in JWT format, containing information about EU identity authentication.</p>
<p> <strong>UserInfo Endpoint</strong>: user information interface (protected by <em>OAuth2</em>) that returns information about an authorized user when the RP is accessed using <em>Access-Token</em>, this interface must use <em>HTTPS</em>.</p>
<h3 id="Specific-process"><a href="#Specific-process" class="headerlink" title="Specific process"></a>Specific process</h3><p>If it is a JS application where all its code is exposed by being loaded into the browser and no backend can secure <em>client_secret</em>, then it needs to be using <strong>Default Mode Flow</strong> (Implicit Flow).</p>
<p>If it is a traditional client-side application, the back-end code and the user are isolated and can ensure that <em>client_secret</em> is not leaked, you can use <strong>Authorization Code Pattern Flow</strong> (Authentication Flow).</p>
<p>There is also <strong>Hybrid Flow</strong>, which in short is a fusion of the above two.</p>
<h4 id="Authorization-Code-Process"><a href="#Authorization-Code-Process" class="headerlink" title="Authorization Code Process"></a>Authorization Code Process</h4><p>RP sends an <strong>authentication request</strong> to the OP with a <em>client_id</em> attached;</p>
<p>The OP authenticates the EU;</p>
<p>The OP returns a response, sending the authorization code to the RP;</p>
<p>The RP uses the authorization code to request the ID-Token and Access-Token from the OP, which is verified by the RP and returned to the RP;</p>
<p>RP sends a request to <em>UserInfo EndPoint</em> using the Access-Token; UserInfo EndPoint returns the EU’s Claims.</p>
<h5 id="authentication-request"><a href="#authentication-request" class="headerlink" title="authentication request"></a>authentication request</h5><p>RP uses OAuth2’s Authorization-Code approach to complete user authentication, and all Tokens are passed through the OP’s Token EndPoint (<a href="https://link.jianshu.com?t=https://tools.ietf.org/html/rfc6749#section-3.2">OAuth2中定义</a>) to be issued. To construct an Authentication Request for OIDC, the following parameters are required:</p>
<ul>
<li>scope: Mandatory. oidc requests must contain the parameter “openid” for the scope.</li>
<li>response_type: mandatory. Same as OAuth2.</li>
<li>client_id: mandatory. Same as OAuth2.</li>
<li>redirect_uri: Required. Same as OAuth2.</li>
<li>state: Recommended. Same as OAuth2. prevents CSRF, XSRF.</li>
</ul>
<p>After the OP receives the authentication request, it needs to do strict validation of the request parameters, and the specific rules are described in<a href="https://link.jianshu.com?t=http://openid.net/specs/openid-connect-core-1_0.html#AuthRequestValidation">http://openid.net/specs/openid-connect-core-1_0.html#AuthRequestValidation</a>After the authentication has passed, the EU is directed to authenticate and agree to the authorization. After this is done, it redirects to the callback address specified by the RP (<em>redirect_uri</em>) and passes the <strong>code</strong> and <strong>state</strong> parameters.</p>
<p>RP uses the <em>code</em> obtained in the previous step to request Token EndPoint, a step that buckets <em>OAuth2</em> and will not be expanded in detail. The Token EndPoint then returns the response Token, which has an additional <em>id_token</em> field in addition to some of the data specified by <em>OAuth2</em>. The <em>id_token</em> field is the <em>ID Token</em> mentioned above.</p>
<h6 id="ID-token"><a href="#ID-token" class="headerlink" title="ID token"></a>ID token</h6><p>As mentioned above <em>OIDC</em>‘s most significant extension to <em>OAuth2</em> is the provision of <em>ID-Token</em>. Let’s take a look at the main components of <em>ID-Token</em>:</p>
<ul>
<li><strong>iss = Issuer Identifier</strong>: Required. Unique identifier of the person providing the authentication information. Usually the host+path part of the Url;</li>
<li><strong>sub = Subject Identifier</strong>: must. unique identifier of the EU provided by iss; maximum of 255 ASCII characters;</li>
<li><strong>aud = Audience(s)</strong>: required. Identifies the audience of the <em>ID-Token</em>. Must contain the client_id of <em>OAuth2</em>;</li>
<li><strong>exp = Expiration time</strong>: required. Expiration time of <em>ID-Token</em>;</li>
<li><strong>iat = Issued At Time</strong>: must. time of the JWT build.</li>
<li><strong>auth_time = AuthenticationTime</strong>: the time when the EU completes authentication. This Claim is required if the RP carries the <em>max_age</em> parameter when sending the authentication request.</li>
<li><strong>nonce</strong>: random string provided by the RP when sending the request, used to mitigate replay attacks and also to associate the <em>ID-Token</em> with the RP’s own Session information.</li>
<li><strong>acr = Authentication Context Class Reference</strong>: optional. Indicates an authentication context reference value that can be used to identify an authentication context class.</li>
<li><strong>amr = Authentication Methods References</strong>: optional. Indicates a set of authentication methods.</li>
<li><strong>azp = Authorized party</strong>: optional. Used in combination with aud. This value is only used if the authenticated party and the audience (aud) do not agree, and is rarely used in general.</li>
</ul>
<h4 id="Default-Process"><a href="#Default-Process" class="headerlink" title="Default Process"></a>Default Process</h4><p>The default process is similar to the one in <em>OAuth</em>, except that it also adds <em>ID-Token</em> related content.</p>
<p>It is important to note here that the <em>OIDC</em> documentation makes it very clear that all user-related information is to be encoded using the <strong>JWT</strong> form. In <em>JWT</em>, no sensitive data should be included in the load. If the transfer is the User ID of the user, this value is not actually sensitive and is generally safe to be known.</p>
<h3 id="UserInfo-Endpoint"><a href="#UserInfo-Endpoint" class="headerlink" title="UserInfo Endpoint"></a>UserInfo Endpoint</h3><p>Some readers may have noticed that <em>ID-Token</em> only sub is related to EU, which is not enough in general, other information such as EU username, avatar, etc. must also be needed, <em>OIDC</em> provides a set of public cliams to provide more information about the user, which is - UserIndo EndPoin.</p>
<p>After RP gets the Access Token, it can request this resource and then get a set of EU-related Claims, which can be said to be an extension of <em>ID-Token</em>, <em>ID-Token</em> only needs to contain the unique identification sub of EU (to avoid the ID Token being too large and exposing the user’s sensitive information), and then after getting the complete EU’s information through this interface. This resource <strong>must be deployed on top of TLS</strong></p>
<h2 id="A-little-thinking-about-OAuth"><a href="#A-little-thinking-about-OAuth" class="headerlink" title="A little thinking about OAuth"></a>A little thinking about OAuth</h2><p>User: User</p>
<p>User Agent: User agent, such as a browser</p>
<p>Consumer: Information consumer, such as Leetcode</p>
<p>Service Provider: There are two service providers, the Identity Provider (IDP), such as QQ, and the Resource Provider, but they are generally the same.</p>
<p>OAuth is not designed to solve security or performance problems.</p>
<p>OAuth also does not save the login state in the Consumer for us.</p>
<p>The purpose of OAuth appeared is to help us associate multiple application accounts with a third-party account, it is the user who gives the permission to the consumer in SP, not the permission to the user in the consumer. We have not lost one account, but established a one-to-many relationship, similar to if we want to get a driver’s license, we need to use our ID card, and authorize the driving school to use our ID card information to go to the Public Security Bureau to confirm our existence and retrieve some other information. But that’s where it ends, and what happens next has nothing to do with OAuth.</p>
<p>The IDP cannot and has no responsibility to save any information of the user in the consumer, it just tells the consumer some information in the case of user authorization.</p>
<p>The first time is for the IDP to set the location in the return 302, you can not verify whether it is set by the consumer, the second time is to verify whether the redirect_uri is set by you in the IDP, and whether it is the same as the first time over, this step must be verified, because this step is the most critical, this step will return the token.</p>
<p>In the end, I still can’t trust my comrade browser, so I let him be a tool to help my own backend to apply for an authorization code to a third party, and then give this authorization code to my own backend, and then my own backend use this code to apply for a token to a third party, and then I don’t tell my browser afterwards. This token is what, they left, that is to say, the browser comrades from beginning to end have not seen the token.</p>
<p>What is the use of Secret? The reason is that IDPs don’t believe in anyone, they believe in the secret they give out. because redirect_uri is the domain name, and ultimately where it goes still depends on the IP address, if the domain name is right, but the domain name is pointed to their IP by the attacker, the attacker will receive the token. how to modify this DNS pointing involves DNS pollution, because DNS will cache layers, but then there is time. But then there is time, if you keep broadcasting to tell the router or host I am leetcode, I am leetcode, over time you are considered as leetcode in this piece of LAN. But if you have a secret, even if you come over to IDP with code, without the secret I gave you, IDP will not give token. so client_id shows who you are, only if you give client_secret, IDP will believe what you say and give you token, so this secret is very important, our The backend will not believe the browser comrades, so our browser comrades from the beginning to the end also did not touch the secret.</p>
<p>And what is the use of State? Similar to the defense of CSRF, to ensure the consistency of the request device, but not like CSRF is to forge the victim’s request, but let the victim login to their own account, if the victim in it to save a bitcoin account would not be beautiful? The specific implementation is the attacker logged in, the normal application, but to the IDP returned 302 after the request to stop, do not allow the browser to send requests to their own background, and then the request link with code to the victim, the victim clicked in to get access_token to successfully log in, if you do not pay attention to this account is not their own upload sensitive information, it is very happy. If there is a state, different devices my background are generated a random string to the front end, the attacker even if the request to the victim, he does not know the state of the victim’s device, the background take a look at your state and just said that the state is not the same, it will directly throw away the request, of course, to say that the attacker to your state from the huge Internet of A certain request to steal to, that is also the absolute, this belongs to the fixed-point blast, is to mess with you, then this person has mostly mixed in your side.</p>
<p>Why will finally return two token because one represents who you are and one represents what you can do, what you can do can be changed by the administrator at any time, but who you are is fixed, and the general access_token expiration time is relatively short, if I use it expired, can not let the user re-login it, that is not back to the beginning?</p>
<p>After all, these designs are stuck above the transport layer, so what if I mess with your network layer? I then spread an ARP virus? Engage the link layer is a bit exaggerated.</p>
<p>Reference article:</p>
<p><a href="https://sunra.top/posts/46cef286/">https://sunra.top/2019/11/16/OAuth%20and%20OIDC/</a> ：OAuth，OIDC简介</p>
<p><a href="https://sunra.top/posts/74ee5df7/">https://sunra.top/posts/74ee5df7/</a> : Routing Protocol</p>
<p><a href="https://sunra.top/posts/dfdf7442/">https://sunra.top/posts/dfdf7442/</a> : ARP principle and defense</p>
<p><a href="https://www.jianshu.com/p/0db71eb445c8">https://www.jianshu.com/p/0db71eb445c8</a> : Example of OAuth authentication process</p>
<p><a href="https://www.chrisyue.com/security-issue-about-oauth-2-0-you-should-know.html">https://www.chrisyue.com/security-issue-about-oauth-2-0-you-should-know.html</a> ：OAuth2.0中的安全考虑</p>
<p><a href="https://www.cnblogs.com/linianhui/p/openid-connect-core.html">https://www.cnblogs.com/linianhui/p/openid-connect-core.html</a> ：OIDC文档</p>
<p><a href="https://www.zhihu.com/question/19851243">https://www.zhihu.com/question/19851243</a> : OAuth1.0 and 2.0 difference</p>
<p><a href="https://docs.azure.cn/zh-cn/active-directory/azuread-dev/v1-protocols-openid-connect-code">https://docs.azure.cn/zh-cn/active-directory/azuread-dev/v1-protocols-openid-connect-code</a> ：OIDC + AAD</p>
<p><a href="https://www.sciencedirect.com/science/article/pii/S2215098617316750">https://www.sciencedirect.com/science/article/pii/S2215098617316750</a> : Security issues faced in cloud services</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a> ：同源策略</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>higher mathematics knowledge point combing summary</title>
    <url>/en/posts/29216/</url>
    <content><![CDATA[<p>Today, I finally got through the knowledge of higher mathematics, but because the whole process is long and there are many knowledge points, they are all fragmented and not systematic, so I thought I would take this opportunity to generally sort out all the knowledge points once.</p>
<span id="more"></span>
<h1 id="Brief-summary"><a href="#Brief-summary" class="headerlink" title="Brief summary"></a>Brief summary</h1><p>In general, the core knowledge of higher data revolves around limits and continuity, so it is important to be proficient in finding limits.</p>
<p>The derivative of a one-dimensional function is actually defined by the limit. And when the increment of the independent variable tends to 0, the derivative of a unit function multiplied by the increment of the independent variable is the increment of a unit function, which defines the differentiation of a unit function, and the integral of a unit function is defined by differentiation.</p>
<p>The derivative of a multivariate function, the differentiation and the integral are defined in a similar relationship to that of a univariate function. There are some formulas in multivariate functions that need to be noted, such as the second type of curve integral, which can be changed into a double integral by Green’s formula in the plane, and the second type of curve integral in space can be changed into a second type of surface integral by Stokes’ formula, and then into a triple integral by Gauss’ formula.</p>
<p>The convergence criterion of the series is also mostly carried out by using the limit, such as the ratio method of the positive series, the root value method, and the Taylor series of the power series is simply the Taylor expansion of the monomial function, which seeks whether the limit of the residue term is 0.</p>
<p>The last is the differential equation, in fact, to you is the relationship between the function and the derivative, so that you find the expression of the function in line with this relationship</p>
<h1 id="Higher-Mathematics"><a href="#Higher-Mathematics" class="headerlink" title="Higher Mathematics"></a>Higher Mathematics</h1><h2 id="Functions-Limits-Continuity"><a href="#Functions-Limits-Continuity" class="headerlink" title="Functions, Limits, Continuity"></a>Functions, Limits, Continuity</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul>
<li><p>function</p>
</li>
<li><p>Function Concept</p>
</li>
<li>Segmented functions</li>
<li>Compound Functions</li>
<li>Inverse Functions</li>
<li><p>Primary functions</p>
</li>
<li><p>Limits</p>
</li>
<li><p>Limits of series</p>
</li>
<li><p>Limits of functions</p>
</li>
<li><p>Limits of a function when the independent variable tends to infinity</p>
</li>
<li><p>Limit of a function when the independent variable tends to a finite value</p>
</li>
<li><p>The concept of infinitesimal quantities</p>
</li>
<li><p>The concept of infinitely large quantities</p>
</li>
<li><p>continuity</p>
</li>
<li><p>The concept of continuity</p>
</li>
<li>Definition of interruption points</li>
<li><p>Classification of interruption points</p>
</li>
<li><p>Type I interruption points</p>
</li>
<li><p>Removable interruption points</p>
</li>
<li><p>Jumping interruption points</p>
</li>
<li><p>Second type of intermittent point</p>
</li>
<li><p>Infinite intermittent points</p>
</li>
<li><p>Oscillating intermittent point</p>
</li>
<li><p>Functional properties</p>
</li>
<li><p>Monotonicity</p>
</li>
<li>Parity</li>
<li>Periodicity</li>
<li>Boundedness</li>
</ul>
<h3 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h3><ul>
<li>A sufficient condition for the existence of the limit of a series: the limit of an odd term is equal to the limit of an even term</li>
<li><p>Limits of functions exist</p>
</li>
<li><p>The limit of a function exists when the independent variable tends to infinity</p>
</li>
<li><p>The limit of the function when the independent variable tends to a finite value</p>
</li>
<li><p>The relationship between the limit of a series and the limit of a function</p>
</li>
<li>Continuity of functions</li>
<li><p>The operation of continuous functions</p>
</li>
<li><p>Quadratic operations</p>
</li>
<li>Continuity of complex functions</li>
<li><p>Continuity of inverse functions</p>
</li>
<li><p>Continuity of elementary functions</p>
</li>
<li><p>Properties of continuous functions on closed intervals</p>
</li>
<li><p>Optimality theorem</p>
</li>
<li>Boundedness theorem</li>
<li>Median theorem</li>
<li><p>Zero theorem</p>
</li>
<li><p>Equivalent infinitesimal substitution theorem</p>
</li>
</ul>
<h3 id="Equation-properties"><a href="#Equation-properties" class="headerlink" title="Equation properties"></a>Equation properties</h3><ul>
<li><p>Basic primitive functions</p>
</li>
<li><p>Power functions</p>
</li>
<li>Exponential functions</li>
<li>Logarithmic functions</li>
<li>Trigonometric functions</li>
<li><p>Inverse trigonometric functions</p>
</li>
<li><p>Limiting properties</p>
</li>
<li><p>boundedness</p>
</li>
<li><p>number-preserving</p>
</li>
<li><p>Infinitesimal property</p>
</li>
<li><p>The sum of finite infinitesimals is still infinitesimal</p>
</li>
<li>The product of finite infinitesimals is still infinitesimal</li>
<li><p>The product of an infinitesimal quantity and a bounded quantity is still infinitesimal</p>
</li>
<li><p>Comparison of infinitesimals</p>
</li>
<li><p>High-order infinitesimals</p>
</li>
<li>low order infinitesimal</li>
<li>same order infinitesimal</li>
<li>Equivalent infinitesimal</li>
<li><p>k-order infinitesimal</p>
</li>
<li><p>Relationship between extreme values and infinitesimals:limf(x) = A &lt;=&gt; f(x) = A + α(x)</p>
</li>
<li>The nature of infinitesimals</li>
<li>Relationship between infinitesimal quantities and unbounded variables: infinitesimal quantities require n &gt; N when there is a constant |xn| &gt; M, while unbounded variables do not require</li>
<li>Relationship between infinitely large and infinitesimal quantities</li>
<li><p>The method of finding the limit</p>
</li>
<li><p>The four rules of limits</p>
</li>
<li><p>Two important limits</p>
</li>
<li><p>sinx and x are equivalently infinitesimal</p>
</li>
<li><p>infinitesimal type of 1</p>
</li>
<li><p>Commonly used equivalent infinitesimals</p>
</li>
<li>Lopita’s law</li>
<li>Clipping criterion</li>
<li><p>Limit criterion for monotone bounded series</p>
</li>
<li><p>Monotone bounded function must have limit</p>
</li>
<li>Monotonically increasing series with upper bound must have limit</li>
<li><p>Monotonically decreasing series with lower bound must have limit</p>
</li>
<li><p>The nature of infinitesimals: the sum of infinitesimals is still infinitesimal</p>
</li>
<li>Functional continuity</li>
<li><p>Taylor’s formula</p>
</li>
<li><p>with pianos remainder term</p>
</li>
<li>with Lagrangian remainder term</li>
<li><p>Commonly used Taylor’s formula (McLaughlin’s formula)</p>
</li>
<li><p>can be introduced as equivalent infinitesimal</p>
</li>
<li><p>and also Taylor series</p>
</li>
<li><p>Use the definition of derivative to find the limit</p>
</li>
<li>Differential median theorem</li>
<li>Definition of definite integrals</li>
<li>Properties of convergence of series</li>
</ul>
<h2 id="Differentiation-of-Unitary-Functions"><a href="#Differentiation-of-Unitary-Functions" class="headerlink" title="Differentiation of Unitary Functions"></a>Differentiation of Unitary Functions</h2><h3 id="The-concept-of-derivatives-and-differentiation"><a href="#The-concept-of-derivatives-and-differentiation" class="headerlink" title="The concept of derivatives and differentiation"></a>The concept of derivatives and differentiation</h3><ul>
<li><p>Concept and geometric meaning of derivatives</p>
</li>
<li><p>The concept of derivative</p>
</li>
<li>Derivatives and derivative functions on an interval</li>
<li><p>Geometric meaning of derivatives</p>
</li>
<li><p>The concept and geometric meaning of differentiation</p>
</li>
<li><p>Definition</p>
</li>
<li><p>The linear principal part of the increment of a function is called the differential</p>
</li>
<li><p>dy is the derivative multiplied by the differential of the independent variable dx</p>
</li>
<li><p>Geometric meaning: the differential represents the increment of the vertical coordinate of the tangent line of the curve at that point at that point</p>
</li>
<li><p>The relationship between continuous, derivable, and differentiable</p>
</li>
</ul>
<h3 id="Calculation-of-derivatives-and-differentiation"><a href="#Calculation-of-derivatives-and-differentiation" class="headerlink" title="Calculation of derivatives and differentiation"></a>Calculation of derivatives and differentiation</h3><ul>
<li><p>Calculation of derivatives</p>
</li>
<li><p>Derivative formula of basic elementary functions</p>
</li>
<li>The rule of derivative of the four operations</li>
<li>Complex function derivative rule</li>
<li>Inverse function derivative rule: the derivative of the inverse function is the reciprocal of each other</li>
<li>The method of derivatives of implicit functions</li>
<li>Logarithmic derivative</li>
<li>Parametric equation derivative method</li>
<li>Derivative of segmented functions</li>
<li><p>Important conclusions about the derivative</p>
</li>
<li><p>The derivative of an even function is an odd function</p>
</li>
<li>The derivative of a derivable odd function is an even function</li>
<li><p>The derivative of a derivable periodic function is still a periodic function with constant period</p>
</li>
<li><p>Calculation of higher order derivatives</p>
</li>
<li><p>direct method, respectively, to find the first-order derivative, second-order derivative, third-order derivative, etc., to find the law</p>
</li>
<li>Indirect method: using the known higher order derivative formula, the algorithm, through the function of constant deformation, variable replacement to find the higher order derivative results</li>
<li><p>Second-order derivatives of several types of functions</p>
</li>
<li><p>Abstract composite functions</p>
</li>
<li><p>Second-order derivative of implicit functions</p>
</li>
<li><p>Differential calculations</p>
</li>
<li><p>The four rules of differentiation</p>
</li>
<li>Invariance of first-order differential forms</li>
</ul>
<h3 id="Median-theorem-inequalities-zero-problems"><a href="#Median-theorem-inequalities-zero-problems" class="headerlink" title="Median theorem, inequalities, zero problems"></a>Median theorem, inequalities, zero problems</h3><ul>
<li><p>Median theorem</p>
</li>
<li><p>Rolle’s theorem</p>
</li>
<li>Fermat’s theorem</li>
<li>Lagrange’s median theorem</li>
<li>Corsi’s median theorem</li>
<li><p>Taylor’s theorem</p>
</li>
<li><p>Taylor’s formula of order n for Lagrange’s remainder term</p>
</li>
<li>Taylor’s formula for Peyano’s remainder term</li>
<li><p>McLaughlin’s formula</p>
</li>
<li><p>Inequality proofs</p>
</li>
<li><p>Monotonicity</p>
</li>
<li>Maximum value</li>
<li>Lagrange’s median formula</li>
<li><p>Lagrangian Remainder Taylor Formula</p>
</li>
<li><p>Zero point problem</p>
</li>
<li><p>Median theorem or zero theorem for continuous functions</p>
</li>
<li>Rolle’s theorem</li>
</ul>
<h3 id="Application-of-derivatives"><a href="#Application-of-derivatives" class="headerlink" title="Application of derivatives"></a>Application of derivatives</h3><ul>
<li>Monotonicity of functions</li>
<li><p>Extreme values of functions</p>
</li>
<li><p>The extreme value point</p>
</li>
<li>Stationary points</li>
<li>Necessary conditions for the existence of extremes</li>
<li>First Sufficient Condition for Extreme Values</li>
<li><p>Second sufficient condition for extremes</p>
</li>
<li><p>The most value of a function</p>
</li>
<li><p>The point of maximum value</p>
</li>
<li><p>Convexity of a curve</p>
</li>
<li><p>Inflection point</p>
</li>
<li>Necessary conditions for an inflection point</li>
<li>First sufficient condition for inflection point</li>
<li><p>Second sufficient condition for the point of inflection</p>
</li>
<li><p>Asymptote of the curve</p>
</li>
<li><p>Horizontal asymptote</p>
</li>
<li>Vertical asymptote</li>
<li><p>Oblique asymptote</p>
</li>
<li><p>Arc differentiation and curvature</p>
</li>
</ul>
<h2 id="Integral-of-Unitary-Functions"><a href="#Integral-of-Unitary-Functions" class="headerlink" title="Integral of Unitary Functions"></a>Integral of Unitary Functions</h2><h3 id="Concepts-of-indefinite-and-definite-integrals-properties"><a href="#Concepts-of-indefinite-and-definite-integrals-properties" class="headerlink" title="Concepts of indefinite and definite integrals, properties"></a>Concepts of indefinite and definite integrals, properties</h3><ul>
<li><p>Principle functions, indefinite and definite integrals</p>
</li>
<li><p>Geometric meaning of definite integrals</p>
</li>
<li><p>The definite integral is the limit of the sum of integrals</p>
</li>
<li><p>Basic properties of integrals</p>
</li>
<li><p>Properties of definite integrals</p>
</li>
<li><p>Existence theorem of definite integrals</p>
</li>
<li><p>If the function is continuous on a closed interval, the definite integral exists</p>
</li>
<li><p>The integral exists if the function has only finitely many interrupted points on the closed interval</p>
</li>
<li><p>Variable finite integral</p>
</li>
<li><p>variable upper integral</p>
</li>
<li><p>variable lower integral</p>
</li>
<li><p>Variable upper bound indefinite integrals are derived from the upper bound of the integral to obtain the relationship between definite and indefinite integrals</p>
</li>
<li>Newton-Leibniz formula</li>
</ul>
<h3 id="Calculation-of-definite-and-indefinite-integrals"><a href="#Calculation-of-definite-and-indefinite-integrals" class="headerlink" title="Calculation of definite and indefinite integrals"></a>Calculation of definite and indefinite integrals</h3><ul>
<li>Basic integral formula</li>
<li><p>Basic integral method</p>
</li>
<li><p>Method of integration by integration (first permutation method)</p>
</li>
<li>Commutative integration method (second permutation method)</li>
<li>Several common permutation methods</li>
<li>Definite integral reduced integration method</li>
<li>The method of partial integration</li>
<li>Several definite integral formulas</li>
</ul>
<h3 id="Calculation-of-Inverse-Integrals"><a href="#Calculation-of-Inverse-Integrals" class="headerlink" title="Calculation of Inverse Integrals"></a>Calculation of Inverse Integrals</h3><ul>
<li><p>Anomalous integrals: limits of variable limit integrals</p>
</li>
<li><p>Inverse integrals on infinite intervals</p>
</li>
<li><p>Anomalous integrals of unbounded functions</p>
</li>
<li><p>Inverse integrals of parity functions on symmetric intervals</p>
</li>
<li>An important anomalous integral</li>
</ul>
<h3 id="Applications-of-definite-integrals"><a href="#Applications-of-definite-integrals" class="headerlink" title="Applications of definite integrals"></a>Applications of definite integrals</h3><ul>
<li>Area of a plane figure</li>
<li>Volume of a rotating body</li>
<li>Mean value of a function</li>
<li>Volume of a three-dimensional with known area of parallel sections on an interval</li>
<li>Arc length of a plane curve</li>
<li>Area of a rotating surface</li>
<li>Work done by variable forces</li>
<li>Hydrostatic pressure of liquid</li>
<li>Gravitational force</li>
<li>Center of mass (form center) of an object</li>
</ul>
<h2 id="Vector-algebra-and-spatially-analytic-sets"><a href="#Vector-algebra-and-spatially-analytic-sets" class="headerlink" title="Vector algebra and spatially analytic sets"></a>Vector algebra and spatially analytic sets</h2><h3 id="vector-algebra"><a href="#vector-algebra" class="headerlink" title="vector algebra"></a>vector algebra</h3><ul>
<li>The basic concept of vectors</li>
<li><p>Vector operations</p>
</li>
<li><p>addition and subtraction</p>
</li>
<li>Number multiplication</li>
<li><p>Product of quantities</p>
</li>
<li><p>Operation rules</p>
</li>
<li><p>Law of commutation</p>
</li>
<li><p>Distributive law</p>
</li>
<li><p>vector product</p>
</li>
<li>Mixed products</li>
</ul>
<h3 id="Spatial-analytic-geometry"><a href="#Spatial-analytic-geometry" class="headerlink" title="Spatial analytic geometry"></a>Spatial analytic geometry</h3><ul>
<li><p>Spatial planes and lines</p>
</li>
<li><p>Plane equations</p>
</li>
<li><p>General equation</p>
</li>
<li>Point method equation</li>
<li><p>Intercept type</p>
</li>
<li><p>Straight line equation</p>
</li>
<li><p>General formula</p>
</li>
<li>Symmetric</li>
<li><p>Parametric</p>
</li>
<li><p>Plane and line relationship</p>
</li>
<li>Plane to plane relationship</li>
<li>Relationship between a straight line and a line</li>
<li>Distance from point to surface</li>
<li><p>Point to line distance</p>
</li>
<li><p>Curved surface and space curve</p>
</li>
<li><p>Surface equation</p>
</li>
<li>Spatial curves</li>
<li>Common surfaces</li>
<li>Common quadratic surface equations</li>
</ul>
<h2 id="Multifunctional-Differentiation"><a href="#Multifunctional-Differentiation" class="headerlink" title="Multifunctional Differentiation"></a>Multifunctional Differentiation</h2><h2 id="Limits-and-continuity-of-multivariable-functions"><a href="#Limits-and-continuity-of-multivariable-functions" class="headerlink" title="Limits and continuity of multivariable functions"></a>Limits and continuity of multivariable functions</h2><ul>
<li><p>Concept of binary functions</p>
</li>
<li><p>Definition</p>
</li>
<li><p>Geometric meaning of a binary function</p>
</li>
<li><p>Limits and continuity of binary functions</p>
</li>
<li><p>The concept of heavy limit</p>
</li>
<li>The concept of continuous binary functions</li>
<li><p>Properties of multivariate continuous functions</p>
</li>
<li><p>sum and difference product quotient of all continuous functions</p>
</li>
<li>the most value theorem</li>
<li>Mediation theorem</li>
<li>All multi-source elementary functions are continuous everywhere in their defined regions</li>
</ul>
<h3 id="Differentiation-of-multifunctions"><a href="#Differentiation-of-multifunctions" class="headerlink" title="Differentiation of multifunctions"></a>Differentiation of multifunctions</h3><ul>
<li><p>Partial derivatives and full differentiation of binary functions</p>
</li>
<li><p>Definition of partial derivative</p>
</li>
<li>Geometric meaning of partial derivative</li>
<li>Full increment</li>
<li><p>Full differentiation</p>
</li>
<li><p>Definition</p>
</li>
<li>Necessary condition for the existence of full differentiation: existence of partial derivatives</li>
<li><p>Sufficient condition for the existence of full differentiation: partial derivatives are continuous</p>
</li>
<li><p>Partial derivatives and full differentiation of complex functions</p>
</li>
<li><p>Rules of derivatives of composite functions</p>
</li>
<li><p>Compound functions and multivariate functions</p>
</li>
<li><p>Multifunction and multifunction composite</p>
</li>
<li><p>Full differential form invariance</p>
</li>
<li><p>Higher order partial derivatives</p>
</li>
<li><p>Partial derivatives and full differentiation of implicit functions</p>
</li>
<li><p>Derivative of a univariate implicit function determined by an equation</p>
</li>
<li>Derivative of a binary implicit function determined by an equation</li>
<li>The derivative of a one-dimensional implicit function determined by a system of equations</li>
<li>Derivative of a binary implicit function determined by a system of equations</li>
</ul>
<h3 id="Limits-and-maxima"><a href="#Limits-and-maxima" class="headerlink" title="Limits and maxima"></a>Limits and maxima</h3><ul>
<li><p>Unconditional extrema</p>
</li>
<li><p>Extreme value points</p>
</li>
<li>Necessary conditions for the existence of extreme values</li>
<li><p>Sufficient conditions for the existence of extremes</p>
</li>
<li><p>Conditional extreme values</p>
</li>
<li><p>Lagrange’s multiplier method</p>
</li>
<li><p>Maximum value</p>
</li>
<li><p>Find the most value on a bounded closed region</p>
</li>
<li><p>find the value of the function of the extreme value point in the region</p>
</li>
<li>find the most value on the boundary of the region (conditional extrema), for simpler than that bounded function can be brought directly into</li>
<li><p>Compare all the extreme values in the above two steps</p>
</li>
<li><p>application problem, the extreme value point may only have a</p>
</li>
</ul>
<h3 id="Directional-derivatives-gradients-and-geometric-applications"><a href="#Directional-derivatives-gradients-and-geometric-applications" class="headerlink" title="Directional derivatives, gradients and geometric applications"></a>Directional derivatives, gradients and geometric applications</h3><ul>
<li>Directional derivatives and gradients</li>
<li>Geometric applications</li>
</ul>
<h2 id="Integration-of-multivariate-functions"><a href="#Integration-of-multivariate-functions" class="headerlink" title="Integration of multivariate functions"></a>Integration of multivariate functions</h2><h3 id="Recalculus"><a href="#Recalculus" class="headerlink" title="Recalculus"></a>Recalculus</h3><ul>
<li><p>double integrals</p>
</li>
<li><p>Definition and geometric meaning of double integral</p>
</li>
<li><p>Properties of double integrals</p>
</li>
<li><p>Comparison theorem</p>
</li>
<li>Valuation theorem</li>
<li><p>Median theorem</p>
</li>
<li><p>Calculation of double integrals</p>
</li>
<li><p>Calculation in Cartesian coordinates</p>
</li>
<li>Calculation in polar coordinates</li>
<li><p>Calculation using symmetry parity</p>
</li>
<li><p>Using symmetry of integral domain and parity of product function</p>
</li>
<li><p>Symmetry of variables</p>
</li>
<li><p>Definition</p>
</li>
<li>Nature: Same as double integral</li>
<li><p>Calculation</p>
</li>
<li><p>Right-angle coordinates</p>
</li>
<li><p>First one, then two</p>
</li>
<li><p>First two, then one</p>
</li>
<li><p>Column Coordinates</p>
</li>
<li>Spherical coordinates</li>
<li>Parity</li>
<li>Rotational symmetry</li>
</ul>
<h3 id="Curve-integral"><a href="#Curve-integral" class="headerlink" title="Curve integral"></a>Curve integral</h3><ul>
<li><p>Line integrals over arc lengths (first class line integrals)</p>
</li>
<li><p>Definition</p>
</li>
<li>Nature</li>
<li><p>Calculation method</p>
</li>
<li><p>Direct method</p>
</li>
<li>Parity</li>
<li><p>Symmetry</p>
</li>
<li><p>Line integral over coordinates (second type of line integral)</p>
</li>
<li><p>Definition</p>
</li>
<li>Properties</li>
<li><p>Calculation method (plane)</p>
</li>
<li><p>Direct method</p>
</li>
<li>Green’s formula (reduced to a double integral)</li>
<li>Green’s formula for complementary lines</li>
<li><p>Line integral is independent of path</p>
</li>
<li><p>Calculation method (space)</p>
</li>
<li><p>Direct method</p>
</li>
<li>Stokes formula (reduced to a second class surface integral)</li>
</ul>
<h3 id="Surface-integral"><a href="#Surface-integral" class="headerlink" title="Surface integral"></a>Surface integral</h3><ul>
<li><p>Area fraction over area (first class)</p>
</li>
<li><p>Definition</p>
</li>
<li>Nature</li>
<li><p>Calculation</p>
</li>
<li><p>Direct method</p>
</li>
<li>Parity</li>
<li><p>Symmetry</p>
</li>
<li><p>Area score for coordinates (second category)</p>
</li>
<li><p>Definition</p>
</li>
<li>Nature</li>
<li><p>Calculation</p>
</li>
<li><p>Direct method</p>
</li>
<li>Gauss’s formula (reduced to triple integral)</li>
<li>Gauss formula for complementary surfaces</li>
</ul>
<h3 id="Application-of-multiple-integrals"><a href="#Application-of-multiple-integrals" class="headerlink" title="Application of multiple integrals"></a>Application of multiple integrals</h3><h3 id="Dispersion-and-rotation"><a href="#Dispersion-and-rotation" class="headerlink" title="Dispersion and rotation"></a>Dispersion and rotation</h3><h2 id="Infinite-series"><a href="#Infinite-series" class="headerlink" title="Infinite series"></a>Infinite series</h2><h3 id="Constant-term-series"><a href="#Constant-term-series" class="headerlink" title="Constant term series"></a>Constant term series</h3><ul>
<li><p>Concepts and properties of series</p>
</li>
<li><p>Infinite series</p>
</li>
<li>Parts and series</li>
<li><p>Convergence, divergence</p>
</li>
<li><p>Criterion for convergence of positive series</p>
</li>
<li><p>Partial and series bounded</p>
</li>
<li>Comparative discriminant</li>
<li>Ratio discriminant</li>
<li>Root discriminant</li>
<li><p>Geometric series (isoperimetric series)</p>
</li>
<li><p>Interleaved series discriminant criterion</p>
</li>
<li><p>Leibniz discriminant criterion</p>
</li>
<li><p>Absolute convergence and properties</p>
</li>
</ul>
<h3 id="Power-series"><a href="#Power-series" class="headerlink" title="Power series"></a>Power series</h3><ul>
<li>Function term series, convergence domain, function</li>
<li><p>Power series</p>
</li>
<li><p>Abel’s theorem</p>
</li>
<li><p>Power series properties</p>
</li>
<li><p>Quadratic operations</p>
</li>
<li><p>Analytical properties</p>
</li>
<li><p>Power series expansion of functions (Taylor series / McLaughlin series)</p>
</li>
</ul>
<h3 id="Fourier-series"><a href="#Fourier-series" class="headerlink" title="Fourier series"></a>Fourier series</h3><ul>
<li>Fourier coefficients and Fourier series</li>
<li>Convergence of Fourier series (Direkley’s convergence theorem)</li>
<li><p>Expansion of a function with period 2l</p>
</li>
<li><p>Expansion on [-L. L</p>
</li>
<li>expansion of parity functions on [-L. L</li>
<li>expansion on [0. L] as sine or cosine</li>
</ul>
<h2 id="Differential-equations"><a href="#Differential-equations" class="headerlink" title="Differential equations"></a>Differential equations</h2><h3 id="First-order-differential-equation"><a href="#First-order-differential-equation" class="headerlink" title="First order differential equation"></a>First order differential equation</h3><ul>
<li><p>Differential equation concepts</p>
</li>
<li><p>Definition</p>
</li>
<li>Order of differential equations</li>
<li>General and special solutions</li>
<li><p>Initial conditions</p>
</li>
<li><p>Several special classes of first-order differential equations and their solutions</p>
</li>
<li><p>Separability of variables</p>
</li>
<li>Simultaneous differential equations</li>
<li>Linear differential equations</li>
<li>Bernoulli’s equation</li>
<li>Fully differential equations</li>
</ul>
<h3 id="Second-order-and-higher-order"><a href="#Second-order-and-higher-order" class="headerlink" title="Second order and higher order"></a>Second order and higher order</h3><ul>
<li><p>Linear differential equations</p>
</li>
<li><p>Linear chi-square differential equations of order n</p>
</li>
<li><p>Linearly correlated and linearly uncorrelated</p>
</li>
<li><p>Properties of differential equations</p>
</li>
<li><p>Superposition of solutions of linear equations of the chi-square</p>
</li>
<li>Generalized solution structure of quadratic linear equations</li>
<li>Structure of general solutions of non-sublinear equations</li>
<li>Principle of superposition</li>
<li>The method and formulas for solving linear chi-square equations with constant coefficients of the second order</li>
<li>The general solution method and formula for some special free term second-order linear chi-square equations with constant coefficients</li>
</ul>
<p>*XMind - Trial Version</p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
  </entry>
  <entry>
    <title>Devil&#39;s Dichotomy Lookup</title>
    <url>/en/posts/e421a043/</url>
    <content><![CDATA[<h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>Knuth (who invented the KMP algorithm) said that dichotomous lookups are simple, but the details are the devil**. Many people like to talk about the integer overflow bug, but the real pitfall of dichotomous lookup is not that detail at all, but whether to add one or subtract one to <code>mid</code>, and whether to use <code>&lt;=</code> or <code>&lt;</code> in while.</p>
<p>If you do not have a proper understanding of these details, writing dichotomous is certainly metaphysical programming, there is no bug can only rely on the blessing of God.</p>
<span id="more"></span>
<h3 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;<span class="comment">// 可有效防止left + right溢出</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Find-a-number"><a href="#Find-a-number" class="headerlink" title="Find a number"></a>Find a number</h3><p>This scenario is the simplest and probably the most familiar, i.e., search for a number and return its index if it exists, otherwise return -1.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.length - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1. Why is &lt;= in the condition of the while loop instead of &lt;</strong>?</p>
<p>A: Because the assignment to initialize <code>right</code> is <code>nums.length - 1</code>, which is the index of the last element, not <code>nums.length</code>.</p>
<p>The difference between these two, which may occur in dichotomous lookups with different functions, is that <strong> the former corresponds to the closed interval <code>[left, right]</code> at both ends, while the latter corresponds to the left-closed, right-open interval <code>[left, right)</code>, since the index size of <code>nums.length</code> is out of bounds. </strong></p>
<p>We use in this algorithm the interval where the former <code>[left, right]</code> is closed at both ends. <strong>This interval is actually the interval where the search is performed each time</strong>.</p>
<p>When should I stop the search? Of course, it can be terminated when the target value has been found:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(nums[mid] target)</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br></pre></td></tr></table></figure>
<p>But if you don’t find it, you need the while loop to terminate and return -1. When should the while loop terminate? <strong>The loop should terminate when the search interval is empty</strong>, which means you have nothing to find, which means you didn’t find it.</p>
<p>The termination condition of <code>while(left &lt;= right)</code> is <code>left right + 1</code>，写成区间的形式就是 <code>[right + 1, right]</code>，或者带个具体的数字进去 <code>[3, 2]</code>，可见<strong>这时候区间为空</strong>，因为没有数字既大于等于 3 又小于等于 2 的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。</p>
<p>The termination condition of <code>while(left &lt; right)</code> is <code>left right</code>，写成区间的形式就是 <code>[left, right]</code>，或者带个具体的数字进去 <code>[2, 2]</code>，<strong>这时候区间非空</strong>，还有一个数 2，但此时 while 循环终止了。也就是说这区间 <code>[2, 2]</code> 被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就是错误的。</p>
<p>Of course, if you have to use <code>while(left &lt; right)</code> that’s fine, we already know what’s going wrong, so let’s just patch it:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[left] target ? left : <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
<p><strong>In summary, if right is length - 1 at the beginning, then you need to let the case left = right be searched as well. If right is length at the beginning, the critical case left = right is actually out of the valid range of the array</strong></p>
<p><strong>2. Why <code>left = mid + 1</code>, <code>right = mid - 1</code>? I see some code is <code>right = mid</code> or <code>left = mid</code>, there is no such addition and subtraction, what is going on and how to determine </strong>?</p>
<p>A: This is also a difficult part of the dichotomous search, but as long as you can understand the previous content, you will be able to easily determine.</p>
<p>We have just clarified the concept of <code>search interval&#39;, and the search interval of this algorithm is closed at both ends, i.e.,</code>[left, right]<code>. So when we find that the index</code>mid<code>is not the</code>target` we are looking for, where should we search next?</p>
<p>Of course it goes to search <code>[left, mid-1]</code> or <code>[mid+1, right]</code>, right? <strong>Because <code>mid</code> has already been searched and should be removed from the search interval</strong>.</p>
<p><strong>3. What are the flaws of this algorithm</strong>?</p>
<p>A: At this point, you should have all the details of the algorithm and the reasons for treating it this way. However, there are limitations to this algorithm.</p>
<p>Let’s say you are given the ordered array <code>nums = [1,2,2,2,3]</code> and <code>target</code> is 2, this algorithm returns an index of 2, yes. But if I want to get the left-hand side of <code>target</code>, which is index 1, or if I want to get the right-hand side of <code>target</code>, which is index 3, then this algorithm can’t handle that.</p>
<p>This is a very common requirement, <strong> you may say, find a target, and then search linearly left or right, can’t you? Yes, but it’s not good, because it’s hard to guarantee the complexity of a dichotomous search on a logarithmic scale</strong>.</p>
<h3 id="Dichotomous-lookup-to-find-the-left-hand-boundary"><a href="#Dichotomous-lookup-to-find-the-left-hand-boundary" class="headerlink" title="Dichotomous lookup to find the left-hand boundary"></a>Dichotomous lookup to find the left-hand boundary</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">left_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.length; <span class="comment">// 注意</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 注意</span></span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; <span class="comment">// 注意</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1. Why is <code>&lt;</code> in while instead of <code>&lt;=</code></strong>?</p>
<p>A: The same way, because <code>right = nums.length</code> instead of <code>nums.length - 1</code>. So the <code>search interval</code> of each loop is <code>[left, right)</code> left closed and right open.</p>
<p><code>while(left &lt; right)</code> terminates with the condition <code>left right</code>，此时搜索区间 <code>[left, left)</code> 为空，所以可以正确终止。</p>
<p><strong>2. Why is there no operation that returns -1? What if the value <code>target</code> does not exist in <code>nums</code></strong>?</p>
<p>A: Because we have to take one step at a time, let’s first understand what the special meaning of this “left border” is:</p>
<p>For this array, the algorithm returns 1. The meaning of this 1 can be interpreted as follows: there is 1 element in <code>nums</code> that is less than 2.</p>
<p>For example, for the ordered array <code>nums = [2,3,5,7]</code>, <code>target = 1</code>, the algorithm will return 0, meaning that there are 0 elements in <code>nums</code> that are less than 1.</p>
<p>If we say <code>nums = [2,3,5,7], target = 8</code>, the algorithm will return 4, meaning that there are 4 elements in <code>nums</code> that are less than 8.</p>
<p>As you can see above, the return value of the function (i.e. the value of the <code>left</code> variable) takes the closed interval <code>[0, nums.length]</code>, so we can simply add two lines of code to return -1 at the right time:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// target is larger than all numbers</span></span><br><span class="line"><span class="keyword">if</span> (left nums.<span class="property">length</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// Similar processing to the previous algorithm</span></span><br><span class="line"><span class="keyword">return</span> nums[left] target ? left : -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><strong>3. Why <code>left = mid + 1</code> and <code>right = mid</code>? is not the same as the previous algorithm</strong>?</p>
<p>A: This is easy to explain, because our <code>search interval&#39; is</code>[left, right)<code>closed left and open right, so when</code>nums[mid]<code>is detected, the next search interval should be split into two intervals by removing</code>mid<code>, i.e.</code>[left, mid)<code>or</code>[mid + 1, right)`.</p>
<p><strong>4. Why is the algorithm able to search the left-hand side boundary</strong>?</p>
<p>A: The key is that for <code>nums[mid] target</code> 这种情况的处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[mid] target)</span><br><span class="line">    right = mid;</span><br></pre></td></tr></table></figure>
<p>It can be seen that, instead of returning immediately when the target is found, the upper bound <code>right</code> of the <code>search interval</code> is narrowed, and the search continues in the interval <code>[left, mid)</code>, i.e., it keeps shrinking to the left to lock the left boundary.</p>
<p><strong>5. Why does it return <code>left</code> instead of <code>right</code></strong>?</p>
<p>A: It’s the same, because the while termination condition is <code>left right</code>。</p>
<p><strong>6、Can you find a way to turn <code>right</code> into <code>nums.length - 1</code>, that is, continue to use both sides of the closed <code>search interval</code>? This way you can and the first dichotomous search in some way unified </strong>.</p>
<p>A: Of course you can, as long as you understand the concept of “search interval”, you can effectively avoid missing elements, you can change it any way you want. The following we modify strictly according to the logic:</p>
<p>Since you have to make both ends of the search interval closed, <code>right</code> should be initialized to <code>nums.length - 1</code> and the terminating condition while should be <code>left right + 1</code>，也就是其中应该用 <code>&lt;=</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">int <span class="title function_">left_bound</span>(<span class="params">int[] nums, int target</span>) &#123;</span><br><span class="line">    <span class="comment">// The search interval is [left, right]</span></span><br><span class="line">    int left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        int mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// if else ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Because the search interval is closed at both ends and is now searching the left-hand boundary, the update logic for <code>left</code> and <code>right</code> is as follows:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">    <span class="comment">// The search interval becomes [mid+1, right]</span></span><br><span class="line">    left = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">    <span class="comment">// The search interval becomes [left, mid-1]</span></span><br><span class="line">    right = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">    <span class="comment">// Shrink the right border</span></span><br><span class="line">    right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Since the exit condition of while is <code>left right + 1</code>，所以当 <code>target</code> 比 <code>nums</code> 中所有元素都大时，会存在以下情况使得索引越界：</p>
<p><a href="https://github.com/Sun668/fucking-algorithm/blob/master/pictures/二分查找/2.jpg"><img src="https://github.com/Sun668/fucking-algorithm/raw/master/pictures/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/2.jpg" alt="img"></a></p>
<p>Therefore, the code that finally returns the result should check for out-of-bounds:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (left &gt;= nums.<span class="property">length</span> || nums[left] != target)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> left;</span><br></pre></td></tr></table></figure>
<p>At this point, the entire algorithm is written, and the complete code is as follows:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">int <span class="title function_">left_bound</span>(<span class="params">int[] nums, int target</span>) &#123;</span><br><span class="line">    int left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// The search interval is [left, right]</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        int mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            <span class="comment">// The search interval becomes [mid+1, right]</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            <span class="comment">// The search interval becomes [left, mid-1]</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">            <span class="comment">// Shrink the right border</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Check for out-of-bounds conditions</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= nums.<span class="property">length</span> || nums[left] != target)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This will be unified with the first dichotomous search algorithm, both ends are closed “search interval”, and the final return is also the value of the <code>left</code> variable. As long as the logic of the dichotomous search, the two forms you see which one you like to remember which it.</p>
<h3 id="Dichotomous-lookup-to-find-the-right-hand-side-boundary"><a href="#Dichotomous-lookup-to-find-the-right-hand-side-boundary" class="headerlink" title="Dichotomous lookup to find the right-hand side boundary"></a>Dichotomous lookup to find the right-hand side boundary</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">int <span class="title function_">right_bound</span>(<span class="params">int[] nums, int target</span>) &#123;</span><br><span class="line">    int left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        int mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] target) &#123;</span><br><span class="line">            <span class="comment">// Just change it here to shrink the left border</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Here it is changed to check for right out of bounds, see the figure below</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; <span class="number">0</span> || nums[right] != target)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Link to original article:<a href="https://github.com/labuladong/fucking-algorithm/blob/master/算法思维系列/二分查找详解.md">二分法详解</a></p>
<h2 id="Dichotomous-variants-updated-2021-04-08"><a href="#Dichotomous-variants-updated-2021-04-08" class="headerlink" title="Dichotomous variants (updated 2021.04.08)"></a>Dichotomous variants (updated 2021.04.08)</h2><p>Today’s leetcode question of the day is a dichotomy question, but different from the above dichotomy, here is an updated record</p>
<p>这是题目链接：<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/</a></p>
<p>Here I will use the official solution directly to answer the question, except that it will be explained in more detail</p>
<p>An ascending array without duplicate elements, after rotation, gives the following visualization of a line graph:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1617885648/origin-of-ray/1_nmfrw2.png" alt=""></p>
<p>The horizontal axis represents the subscripts of the array elements and the vertical axis represents the values of the array elements. The position of the minimum value is marked in the figure and is the target we need to find.</p>
<p>We consider the last element of the array xx: the elements to the right of the minimum (excluding the last element itself) must all have values strictly less than xx, while the elements to the left of the minimum must all have values strictly greater than xx. Thus, we can find the minimum by means of a dichotomous lookup based on this property.</p>
<p>In each step of the dichotomous lookup, the left boundary is low, the right boundary is high, and the midpoint of the interval is pivot, within which the minimum value lies. We compare the middle element nums[pivot] with the right boundary element nums[high], and there are three possible cases:</p>
<p>The first case is nums[pivot] &lt; nums[high]. As shown in the figure below, this means that nums[pivot] is the element to the right of the minimum, so we can ignore the right half of the dichotomous lookup interval.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1617885675/origin-of-ray/2_anlru2.png" alt=""></p>
<p>The second case is nums[pivot]&gt;nums[high]. As shown in the figure below, this means that nums[pivot] is the element to the left of the minimum, so we can ignore the left half of the dichotomous lookup interval.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1617885701/origin-of-ray/3_wizs40.png" alt=""></p>
<p>Since the array does not contain duplicate elements, and as long as the current interval length is not 1, pivot will not coincide with high; and if the current interval length is 11, this means that we can already end the binary lookup. So there is no case where nums[pivot]=nums[high].</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> findMin = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> high = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">const</span> pivot = low + <span class="title class_">Math</span>.<span class="title function_">floor</span>((high - low) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[pivot] &lt; nums[high]) &#123;</span><br><span class="line">            high = pivot;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = pivot + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[low];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="A-few-questions"><a href="#A-few-questions" class="headerlink" title="A few questions"></a>A few questions</h3><p>After reading those explanations above, you may think you understand, but there are still a few issues we need to think about:</p>
<ul>
<li><p>What is the search interval</p>
<blockquote>
<p>According to the principle part, since high = nums.length - 1, the search interval is [low, high]</p>
</blockquote>
</li>
<li><p>Why is it executed when low &lt; high, i.e. why is it not necessary to determine when low = high?</p>
<blockquote>
<p>This is because when low = high, the length of the interval is 1, so the minimum value is this unique value, so just return it</p>
</blockquote>
</li>
<li><p>Why is it comparing pivot and high instead of low</p>
<blockquote>
<p>The values at the left, center and right positions are compared in the following ways:</p>
<p>left &lt; median, median &lt; right : no rotation, the minimum value is on the leftmost side, you can shrink the right boundary</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Right</span><br><span class="line">Medium</span><br><span class="line">Left</span><br></pre></td></tr></table></figure>
<p>left &gt; median, median &lt; right : there is rotation, the minimum value is on the left half, you can shrink the right boundary</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Left</span><br><span class="line">Right</span><br><span class="line">Medium</span><br></pre></td></tr></table></figure>
<p>left &lt; median, median &gt; right : there is a rotation, the minimum value is in the right half, you can shrink the left border</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Medium</span><br><span class="line">Left</span><br><span class="line">Right</span><br></pre></td></tr></table></figure>
<p>left &gt; median, median &gt; right : monotonically decreasing, not possible</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Left</span><br><span class="line">Medium</span><br><span class="line">Right</span><br></pre></td></tr></table></figure>
<p>We can analyze the above cases and compare the median and right values in just two cases. The median value is greater than the left value has to be divided into two more cases</p>
</blockquote>
</li>
<li><p>Why does high = pivot and low = pivot + 1 when narrowing the interval</p>
<blockquote>
<p>Because when <code>nums[pivot] &lt; nums[high]</code>, this <code>nums[pivot]</code> is still possible to be the minimum, so pivot is still in the search interval. And when <code>nums[pivot] &gt; nums[high]</code>, <code>nums[pivot]</code> can’t be the minimum</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Blob, Multipart Upload</title>
    <url>/en/posts/a3d8e8d3/</url>
    <content><![CDATA[<h2 id="What-is-Blob"><a href="#What-is-Blob" class="headerlink" title="What is Blob?"></a>What is Blob?</h2><p>A blob (Binary Large Object) represents a large object of binary type. In database management systems, binary data is stored as a collection of a single individual. A blob is usually a video, sound, or multimedia file. <strong> In JavaScript, an object of type Blob represents the original data source of an immutable file-like object. </strong></p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1595596596/js/image-20200724202124460_csorcu.png" alt="image-20200724202124460"></p>
<p>As you can see, the myBlob object contains two properties: size and type. The’size ‘property is used to represent the size of the data (in bytes), and’type’ is a string of MIME type. Blobs do not necessarily represent data in JavaScript native format. For example, the’File ‘interface is based on’Blob’, inheriting the functionality of blob and extending it to support files on the user’s system.</p>
<span id="more"></span>
<h2 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h2><p>A blob consists of an optional string type (usually a MIME type) and blobParts:</p>
<blockquote>
<p>MIME（Multipurpose</p>
<p>Common</p>
</blockquote>
<p>The relevant parameters are described as follows:</p>
<ul>
<li><p>blobParts: It is an array of ArrayBuffer, ArrayBufferView, Blob, DOMString, etc. DOMStrings will be encoded as UTF-8.</p>
</li>
<li><p>options: An optional object with the following two properties:</p>
</li>
<li><ul>
<li>type - The default value is’ “” ‘, which represents the MIME type of the array content that will be placed into the blob.</li>
<li>endings - The default value is’ “transparent” ‘, which is used to specify how strings containing line terminators’\ n ‘are written. It is one of the following two values:’ “native” ‘, which means that the line terminator will be changed to a newline for the host operating system file system, or’ “transparent” ‘, which means that the terminator saved in the blob will remain unchanged.</li>
</ul>
</li>
</ul>
<h3 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h3><p>We already know that Blob objects contain two properties.</p>
<ul>
<li>size (read-only): Represents the size, in bytes, of the data contained in the Blob object.</li>
<li>type (read-only): A string indicating the MIME type of the data contained in the’Blob ‘object. If the type is unknown, the value is an empty string.</li>
</ul>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><ul>
<li>slice ([start [, end [, contentType]]]): Returns a new blob object containing the data in the specified range in the source blob object.</li>
<li>stream (): Returns a ReadableStream that reads the contents of the blob.</li>
<li>text (): Returns a Promise object containing all the contents of the blob as a’USVString ‘in UTF-8 format.</li>
<li>arrayBuffer (): Returns a Promise object containing all the contents of the blob in binary format ArrayBuffer.</li>
</ul>
<p>Here we need to note that <strong> ‘Blob’ objects are immutable </strong>. We cannot directly change data in a blob, but we can split a blob, create new blob objects from it, mix them into a new blob. This behavior is similar to JavaScript strings: we cannot change the characters in the string, but we can create new corrected strings.</p>
<h2 id="Large-Multipart-Upload-Vue"><a href="#Large-Multipart-Upload-Vue" class="headerlink" title="Large Multipart Upload (Vue)"></a>Large Multipart Upload (Vue)</h2><h3 id="Client-section"><a href="#Client-section" class="headerlink" title="Client section"></a>Client section</h3><h4 id="Upload-slice"><a href="#Upload-slice" class="headerlink" title="Upload slice"></a>Upload slice</h4><p>First, implement the upload function. Uploading requires two things</p>
<ul>
<li>Slicing files</li>
<li>Transfer slices to server level</li>
</ul>
<p>The File here actually inherits the Blob object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleFileChange&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="title class_">Const</span> <span class="variable constant_">SIZE</span> = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;<span class="comment">//slice size</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">container</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">file</span>: <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;，</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">data</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">request</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleFileChange</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//Generate file slices</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">createFileChunk</span>(<span class="params">file, size = SIZE</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> fileChunkList = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> cur = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">while</span> (cur &lt; file.<span class="property">size</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fileChunkList.<span class="title function_">push</span>(&#123; <span class="attr">file</span>: file.<span class="title function_">slice</span>(cur, cur  size) &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        cur = size;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> fileChunkList;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//upload slice</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> <span class="title function_">uploadChunks</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> requestList = <span class="variable language_">this</span>.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; chunk，hash &#125;</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span> ();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          formData.<span class="title function_">append</span>(<span class="string">&quot;chunk&quot;</span>, chunk);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          formData.<span class="title function_">append</span>(<span class="string">&quot;hash&quot;</span>, hash);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          formData.<span class="title function_">append</span>(<span class="string">&quot;filename&quot;</span>, <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">file</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123; formData &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">map</span>(<span class="keyword">async</span> (&#123; formData &#125;) =&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: formData</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Await</span> <span class="title class_">Promise</span>.<span class="property">all</span> (requestList);<span class="comment">//concurrent slice</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">async</span> <span class="title function_">handleUpload</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">file</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> fileChunkList = <span class="variable language_">this</span>.<span class="title function_">createFileChunk</span>(<span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">file</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">data</span> = fileChunkList.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; file &#125;，index</span>) =&gt;</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">chunk</span>: file,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Hash</span>: <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">file</span>.<span class="property">name</span> <span class="string">&quot;-&quot;</span> index<span class="comment">//filename, array index</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">uploadChunks</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>When clicking the upload button, call’createFileChunk ‘to slice the file. The number of slices is controlled by the file size. Set 10MB here, that is to say, a 100 MB file will be divided into 10 slices</p>
<p>Use the while loop and slice method inside createFileChunk to put the slice into the’fileChunkList ‘array</p>
<p>When generating file slices, you need to give each slice an identifier as a hash. Here, temporarily use’filename, subscript ‘, so that the backend can know which slice the current slice is, which is used for subsequent merged slices</p>
<p>Then call’uploadChunks’ to upload all the file slices, put the file slice, slice hash, and file name into FormData, then call the previous’request ‘function to return a proimise, and finally call Promise.all to upload all the slices concurrently</p>
<h4 id="Send-Merge-Request"><a href="#Send-Merge-Request" class="headerlink" title="Send Merge Request"></a>Send Merge Request</h4><p>The second way of merging slices mentioned in the overall idea is used here, that is, the front end actively informs the server level to merge, so the front end needs to send an additional request, and the server level actively merges slices when receiving this request</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleFileChange&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">container</span>: &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: []</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">request</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="title function_">handleFileChange</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="title function_">createFileChunk</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">//Upload slices while filtering uploaded slices</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">uploadChunks</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> requestList = <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; chunk，hash &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span> ();</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">&quot;chunk&quot;</span>, chunk);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">&quot;hash&quot;</span>, hash);</span><br><span class="line">          formData.<span class="title function_">append</span>(<span class="string">&quot;filename&quot;</span>, <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">file</span>.<span class="property">name</span>);</span><br><span class="line">          <span class="keyword">return</span> &#123; formData &#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="keyword">async</span> (&#123; formData &#125;) =&gt;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: formData</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(requestList);</span><br><span class="line">      <span class="comment">//Merge slices</span></span><br><span class="line">     <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">mergeRequest</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">mergeRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/merge&quot;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">file</span>.<span class="property">name</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleUpload</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Server-level-part"><a href="#Server-level-part" class="headerlink" title="Server level part"></a>Server level part</h3><p>Simply use http module to build server level</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> = <span class="string">&quot;OPTIONS&quot;</span>) &#123;</span><br><span class="line">    res.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Server</span>.<span class="property">listen</span> (<span class="number">3000</span> , <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;listening on port 3000&quot;</span>));</span><br></pre></td></tr></table></figure>
<h4 id="Accept-slices"><a href="#Accept-slices" class="headerlink" title="Accept slices"></a>Accept slices</h4><p>Use the’multiparty ‘package to process FormData from the frontend</p>
<p>In the callback of multiparty.parse, the files parameter saves the files in FormData, and the fields parameter saves the fields of non-files in FormData</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">&quot;fs-extra&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multiparty = <span class="built_in">require</span>(<span class="string">&quot;multiparty&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"> <span class="title class_">Const</span> <span class="variable constant_">UPLOAD_DIR</span> = path.<span class="property">resolve</span> (__dirname, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;target &quot;</span>); <span class="comment">// large file storage directory</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> = <span class="string">&quot;OPTIONS&quot;</span>) &#123;</span><br><span class="line">    res.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> multipart = <span class="keyword">new</span> multiparty.<span class="title class_">Form</span>();</span><br><span class="line"></span><br><span class="line">  multipart.<span class="title function_">parse</span>(req, <span class="keyword">async</span> (err, fields, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [chunk] = files.<span class="property">chunk</span>;</span><br><span class="line">    <span class="keyword">const</span> [hash] = fields.<span class="property">hash</span>;</span><br><span class="line">    <span class="keyword">const</span> [filename] = fields.<span class="property">filename</span>;</span><br><span class="line">    <span class="keyword">const</span> chunkDir = path.<span class="title function_">resolve</span>(<span class="variable constant_">UPLOAD_DIR</span>, filename);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//slice directory does not exist, create slice directory</span></span><br><span class="line">    <span class="keyword">if</span> (!fse.<span class="title function_">existsSync</span>(chunkDir)) &#123;</span><br><span class="line">      <span class="keyword">await</span> fse.<span class="title function_">mkdirs</span>(chunkDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//fs-extra dedicated method, similar to fs.rename and cross-platform</span></span><br><span class="line">      <span class="comment">//fs-extra rename method will have permission issues on windows platform</span></span><br><span class="line">      <span class="comment">// https://github.com/meteor/meteor/issues/7852#issuecomment-255767835</span></span><br><span class="line">      <span class="keyword">await</span> fse.<span class="title function_">move</span>(chunk.<span class="property">path</span>, <span class="string">`<span class="subst">$&#123;chunkDir&#125;</span>/<span class="subst">$&#123;hash&#125;</span>`</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;received file chunk&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Server</span>.<span class="property">listen</span> (<span class="number">3000</span> , <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;listening on port 3000&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>Look at the chunk object processed by multiparty, path is the path to store the temporary file, size is the temporary file size, it is mentioned in the multiparty doc that fs.rename can be used (because I use fs-extra, its rename method windows platform permission problem, so it was replaced by fse.move) to move the temporary file, that is, move the file slice</p>
<p>When accepting file slices, you need to create a folder to store the slices first. Since the front end additionally carries a unique value hash when sending each slice, use hash as the file name to move the slice from the temporary path to the slice folder.</p>
<h4 id="Merge-slices"><a href="#Merge-slices" class="headerlink" title="Merge slices"></a>Merge slices</h4><p>After receiving the Merge Request sent by the frontend, the server level merges all the slices under the folder</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">&quot;fs-extra&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="title class_">Const</span> <span class="variable constant_">UPLOAD_DIR</span> = path.<span class="property">resolve</span> (__dirname, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;target &quot;</span>); <span class="comment">// large file storage directory</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">resolvePost</span> = req =&gt;</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> chunk = <span class="string">&quot;&quot;</span>;</span><br><span class="line">     req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">       chunk = data;</span><br><span class="line">     &#125;);</span><br><span class="line">     req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(chunk));</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">pipeStream</span> = (<span class="params">path, writeStream</span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> readStream = fse.<span class="title function_">createReadStream</span>(path);</span><br><span class="line">    readStream.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fse.<span class="title function_">unlinkSync</span>(path);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    readStream.<span class="title function_">pipe</span>(writeStream);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Merge slices</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">mergeFileChunk</span> = <span class="keyword">async</span> (<span class="params">filePath, filename, size</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> chunkDir = path.<span class="title function_">resolve</span>(<span class="variable constant_">UPLOAD_DIR</span>, filename);</span><br><span class="line">  <span class="keyword">const</span> chunkPaths = <span class="keyword">await</span> fse.<span class="title function_">readdir</span>(chunkDir);</span><br><span class="line">  <span class="comment">//sort by slice index</span></span><br><span class="line">  <span class="comment">//Otherwise, the order obtained by directly reading the directory may be disordered</span></span><br><span class="line">  chunkPaths.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>] - b.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">    chunkPaths.<span class="title function_">map</span>(<span class="function">(<span class="params">chunkPath, index</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">pipeStream</span>(</span><br><span class="line">        path.<span class="title function_">resolve</span>(chunkDir, chunkPath),</span><br><span class="line">        <span class="title class_">Specify</span> the location to create a writable stream</span><br><span class="line">        fse.<span class="title function_">createWriteStream</span>(filePath, &#123;</span><br><span class="line">          <span class="attr">start</span>: index * size,</span><br><span class="line">          <span class="attr">end</span>: (index  <span class="number">1</span>) * size</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">  <span class="title class_">Fse</span>.<span class="property">rmdirSync</span> (chunkDir);<span class="comment">//delete the directory where the slice is saved after merging</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> = <span class="string">&quot;OPTIONS&quot;</span>) &#123;</span><br><span class="line">    res.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (req.<span class="property">url</span> = <span class="string">&quot;/merge&quot;</span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">resolvePost</span>(req);</span><br><span class="line">     <span class="keyword">const</span> &#123; filename,size &#125; = data;</span><br><span class="line">     <span class="keyword">const</span> filePath = path.<span class="title function_">resolve</span>(<span class="variable constant_">UPLOAD_DIR</span>, <span class="string">`<span class="subst">$&#123;filename&#125;</span>`</span>);</span><br><span class="line">     <span class="keyword">await</span> <span class="title function_">mergeFileChunk</span>(filePath, filename);</span><br><span class="line">     res.<span class="title function_">end</span>(</span><br><span class="line">       <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">         <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">         <span class="attr">message</span>: <span class="string">&quot;file merged success&quot;</span></span><br><span class="line">       &#125;)</span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Server</span>.<span class="property">listen</span> (<span class="number">3000</span> , <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;listening on port 3000&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>Since the front end will carry the file name when sending the Merge Request, the server level can find the slice folder created in the previous step according to the file name</p>
<p>Then use fs.createWriteStream to create a writable stream. The writable stream file name is the slice folder name, and the suffix name is combined</p>
<p>Then traverse the entire slice folder, create a readable stream of the slice through fs.createReadStream, and merge the transfer into the target file</p>
<p>It is worth noting that each readable stream will be transmitted to the specified position of the writable stream, which is controlled by the second parameter start/end of createWriteStream, in order to be able to concurrently merge multiple readable streams into the writable stream, so that even if the order of the stream is different, it can be transmitted to the correct position, so here we also need to let the front end provide an additional size parameter when requesting</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">mergeRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/merge&quot;</span>,</span><br><span class="line">     <span class="attr">headers</span>: &#123;</span><br><span class="line">       <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      <span class="attr">size</span>: <span class="variable constant_">SIZE</span>,</span><br><span class="line">       <span class="attr">filename</span>: <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">file</span>.<span class="property">name</span></span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<h2 id="Other-usage-scenarios"><a href="#Other-usage-scenarios" class="headerlink" title="Other usage scenarios"></a>Other usage scenarios</h2><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>We can download data from the internet and store it in a blob object using the following methods, for example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">downloadBlob</span> = (<span class="params">url, callback</span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"> xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line"> xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span></span><br><span class="line"> xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(xhr.<span class="property">response</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Of course, in addition to using the’XMLHttpRequest ‘API, we can also use the’fetch’ API to obtain binary data in a streaming manner. Here we take a look at how to use the fetch API to obtain online images and display them locally. The specific implementation is as follows:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myImage = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> myRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&#x27;flowers.jpg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(myRequest)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">blob</span>();</span><br><span class="line">  &#125;)</span><br><span class="line"> .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">myBlob</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(myBlob);</span><br><span class="line">   myImage.<span class="property">src</span> = objectURL;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>When the fetch request succeeds, we call the’blob () ‘method of the response object, read a blob object from the response object, then use the’createObjectURL () ‘ method to create an objectURL, and assign it to the’src ‘attribute of the’img’ element to display the image.</p>
<h3 id="Blob-1"><a href="#Blob-1" class="headerlink" title="Blob"></a>Blob</h3><p>Blob can easily be used as a URL for &lt; a &gt;, &lt; img &gt;, or other tags. Thanks to the type attribute, we can also upload/download blob objects. Below we will give an example of blob file download, but before looking at the specific example, we need to briefly introduce blob URLs.</p>
<p><strong>1.Blob URL/Object URL</strong></p>
<p>Blob URL/Object URL is a pseudo-protocol that allows Blob and File objects to be used as URL sources for images, download binary data links, etc. In browsers, we create Blob URLs using the URL.createObjectURL method, which takes a Blob object and creates a unique URL for it in the form of blob: &lt; origin &gt;/&lt; uuid &gt;. The corresponding example is as follows:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">blob</span>:<span class="attr">https</span>:<span class="comment">//example.org/40a5fb5a-d56d-4a33-b4e2-0acf6a8e5f641</span></span><br></pre></td></tr></table></figure>
<p>The browser internally stores a URL → Blob mapping for each URL generated through URL.createObjectURL. Therefore, such URLs are shorter, but’Blob ‘can be accessed. The generated URL is only valid in the current doc open state. It allows referencing’Blob’ in ‘&lt; img &gt;’, ‘&lt; a &gt;’, but if the Blob URL you access no longer exists, you will receive a 404 error from the browser.</p>
<p>The above blob URL seems pretty good, but in fact it also has side effects. Although the mapping of URL → blob is stored, the blob itself still resides in memory and the browser cannot release it. The mapping is automatically cleared when the doc is uninstalled, so the blob object is then released.</p>
<p>However, if the application has a long lifespan, that won’t happen anytime soon. Therefore, if we create a blob URL, it will still exist in memory even if the blob is no longer needed.</p>
<p>To solve this problem, we can call the URL.revokeObjectURL (url) method to remove the reference from the internal mapping, allowing the blob to be deleted (if there are no other references) and freeing up memory. Next, let’s look at a specific example of blob file download.</p>
<p><strong> 2. Blob file download example </strong></p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    &lt; title &gt; Blob file download example &lt;/title &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt; button id = &quot;downloadBtn&quot; &gt; File download &lt;/button &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>js</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>index.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">download</span> = (<span class="params">fileName, blob</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  link.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">  link.<span class="property">download</span> = fileName;</span><br><span class="line">  link.<span class="title function_">click</span>();</span><br><span class="line">  link.<span class="title function_">remove</span>();</span><br><span class="line">  <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(link.<span class="property">href</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> downloadBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#downloadBtn&quot;</span>);</span><br><span class="line">downloadBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="string">&quot;blob.txt&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> myBlob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&quot;一文彻底掌握 Blob Web API&quot;</span>], &#123; <span class="attr">type</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">  <span class="title function_">download</span>(fileName, myBlob);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>In the example, we create a Blob object of type “text/plain” by calling the Blob constructor function, and then download the file by dynamically creating the “a” tag.</p>
<h3 id="More-usage"><a href="#More-usage" class="headerlink" title="More usage"></a>More usage</h3><p>More usages can be referred to.  <a href="https://mp.weixin.qq.com/s?__biz=MzI2MjcxNTQ0Nw&amp;mid=2247484522&amp;idx=1&amp;sn=7028aa65a4dec0f2d0cb847838703bc3&amp;scene=21#wechat_redirect">你不知道的Blob</a>。</p>
<p>Reference link:</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI2MjcxNTQ0Nw==&amp;mid=2247484522&amp;idx=1&amp;sn=7028aa65a4dec0f2d0cb847838703bc3&amp;scene=21#wechat_redirect">你不知道的Blob</a></p>
<p><a href="https://juejin.im/post/5dff8a26e51d4558105420ed">大文件分片上传</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Introduction to blockchain</title>
    <url>/en/posts/7f31b34d/</url>
    <content><![CDATA[<p>Blockchain is a big hit right now, with a lot of news media coverage claiming that it will create the future.</p>
<p>After reading some papers, blogs and official docs, the author integrated the content of these materials with his own understanding and reorganized them.</p>
<span id="more"></span>
<h2 id="The-essence-of-blockchain"><a href="#The-essence-of-blockchain" class="headerlink" title="The essence of blockchain"></a>The essence of blockchain</h2><p>Essentially, blockchain is a special kind of distributed database. First of all, it can store information, and any information that needs to be saved can be read and written in the blockchain.</p>
<p>However, unlike ordinary databases, anyone can assume that the server joins the blockchain network and becomes a node. Each node is equal, and there is no role similar to Database Administrator. If someone wants to add audit to the blockchain, it cannot be achieved, because its design goal is to prevent the emergence of a central management authority.</p>
<p>It is precisely because it cannot be managed that blockchain cannot be controlled. Otherwise, once the big companies and conglomerates control the management, they will control the entire platform, and other users will have to obey them.</p>
<p>When reading and writing data to any node, all nodes will synchronize to ensure the consistency of the blockchain, which is also the reason why the data reliability can be guaranteed after the decentralization of the blockchain.</p>
<h2 id="Some-concepts-in-blockchain"><a href="#Some-concepts-in-blockchain" class="headerlink" title="Some concepts in blockchain"></a>Some concepts in blockchain</h2><p>The basic principles of blockchain are not complicated to understand. First, let’s look at three basic concepts:</p>
<ul>
<li>Transaction: An operation to reconcile the ledger, resulting in a change in the state of the ledger, such as adding a transfer record;</li>
<li>Block: records all transactions and state results that occur over a period of time, which is a consensus on the current state of the ledger;</li>
<li>Chain: Concatenated by blocks in the order in which they occur, it is a log record of changes in the state of the entire ledger.</li>
</ul>
<h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><p>Blockchain consists of blocks. These blocks can be compared to database records. Every time the data is modified, a new block is created. Because the design of blockchain is incremental, any CRUD operation on the data in the existing block is to add a new block to the existing chain.</p>
<p>Each block is divided into two parts:</p>
<ul>
<li>Block header: record the feature value of the current block<br>Block Body: Record the actual data of the current block</li>
</ul>
<p>The block header also contains multiple feature values of the current block.</p>
<ul>
<li>The generation time of the current block</li>
<li>hash of block body</li>
<li>Hash of the previous block</li>
<li>…</li>
</ul>
<p>In fact, the hash is that the computer can calculate an eigenvalue of the same length for any content. The hash length of the blockchain is 256 bits. That is to say, no matter what content, the eigenvalue finally calculated is 256 bits, and it can be guaranteed that as long as the original content is different, the calculated hash value must be different.</p>
<p>This ensures that:</p>
<ul>
<li>The hash value of each block must be different, and blocks can be identified by hash<br>If the content of the block changes, its hash value will definitely change</li>
</ul>
<p>The hash value of the block is calculated based on the block header, which means that all the values of the block header are concatenated into a string and the string is hashed.</p>
<p>Combined with the above, the block header contains a lot of content, including the content of the current block body and the hash of the previous block, that is, the content of the current block body is changed or the content of the previous block is changed., it will definitely cause a change in the current block hash.</p>
<p>This has great significance for blockchain. If someone modifies a block, the hash of that block changes. In order for subsequent blocks to still connect to it (because the next block contains the hash of the previous block), the person must modify all subsequent blocks in turn, otherwise the changed block will be removed from the blockchain. Due to the reasons mentioned later, the calculation of hashes is very time-consuming, and it is almost impossible to modify multiple blocks in a short period of time unless someone has mastered more than 51% of the computing power of the entire network.</p>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>A node refers to a computer in a blockchain network, including mobile phones, mining machines, servers, etc. Operating a node can be an ordinary wallet user, a miner, and multiple people collaborating. For example, Bitcoin belongs to the public chain. When we run a program on our computer connected to the Internet, that computer is a node in the Bitcoin network. For public blockchains like Bitcoin, in theory, you download the complete blockchain, participate in transactions and mining, and are considered nodes.</p>
<p>Nodes keep one or part of their own ledgers, solve the Byzantine General problem by means of computing power or share voting, and ensure that the ledgers followed by all nodes are consistent with their own ledgers through trustless methods.</p>
<h3 id="Mining"><a href="#Mining" class="headerlink" title="Mining"></a>Mining</h3><p>Due to the need to ensure synchronization between nodes, the addition speed of new blocks cannot be too fast. Imagine that you have just synchronized a block and are ready to generate the next block based on it, but at this time another node has generated a new block, and you have to give up halfway through the calculation and synchronize again. Because each block can only be followed by one block, you can only generate the next block after the latest block forever. So, you have no choice but to synchronize as soon as you hear the signal.</p>
<p>Therefore, the inventor of blockchain, Satoshi Nakamoto, deliberately made it difficult to add new blocks. His design is that on average, every 10 minutes, the entire network can generate a new block, which is only six in an hour.</p>
<p>This output speed was not achieved through commands, but deliberately set up massive calculations. That is to say, only through an extremely large number of calculations can the valid hash of the current block be obtained, so that the new block can be added to the blockchain. Due to the large amount of calculation, it is not fast.</p>
<h2 id="Principles-of-Blockchain"><a href="#Principles-of-Blockchain" class="headerlink" title="Principles of Blockchain"></a>Principles of Blockchain</h2><p>If the blockchain system is used as a Finite-State Machine, each transaction means a state change; the generated block is the consensus of participants on the outcome of the transaction resulting in a state change.</p>
<p>The goal of blockchain is to achieve a distributed ledger of data records that only allows additions and not deletions. The basic structure of the underlying ledger is a linear linked list. The linked list consists of a series of “blocks” (as shown in the figure below), and the subsequent blocks record the hash value of the leading block. The legitimacy of a block (and the transactions in the block) can be quickly verified by calculating the hash value. Nodes in the network can propose adding a new block, but the block must be confirmed by a consensus mechanism.</p>
<h3 id="Understanding-the-working-process-of-blockchain-through-Bitcoin"><a href="#Understanding-the-working-process-of-blockchain-through-Bitcoin" class="headerlink" title="Understanding the working process of blockchain through Bitcoin"></a>Understanding the working process of blockchain through Bitcoin</h3><p>Take the Bitcoin network as an example to see how blockchain technology is used.</p>
<p>First, the user initiates a transaction through the Bitcoin Client, and the message is broadcast to the Bitcoin network for confirmation. The nodes in the network will package the received transaction requests waiting for confirmation together, add the hash value of the previous block header and other information to form a block structure. Then, try to find a nonce string (random string) and put it into the block, so that the hash result of the block structure meets certain conditions (such as less than a certain value). This process of calculating the nonce string is commonly known as “mining”. Finding a nonce string requires a certain amount of computing power.</p>
<p>Once a node finds a nonce string that meets the conditions, the block is “legal” in format and becomes a candidate block. The node broadcasts it in the network. After other nodes receive the candidate block, they verify it and find it to be legitimate. They recognize the block as a new legal block and add it to the local blockchain structure they maintain. When most nodes have accepted the block, it means that the block is accepted by the network and the transactions included in the block are confirmed.</p>
<p>There are two key steps here. One is to complete the consensus on a batch of transactions (creating a legal block structure); the other is to add new blocks to the chain structure and be recognized by the network to ensure that they cannot be tampered with in the future. Of course, there will be many additional details in the implementation.</p>
<p>Bitcoin’s consensus mechanism based on computing power (searching for nonce strings) is called Proof of Work (PoW). This is because there is no known fast heuristic algorithm to make the hash result meet certain conditions, only brute force calculations on nonce values one by one. The more attempts (the greater the workload), the greater the probability of calculation.</p>
<p>By adjusting the restrictions on the hash result, the Bitcoin network controls the production of a legal block in an average of about 10 minutes. The node that calculates the block will receive a management fee for all transactions in the block and a fixed reward fee issued by the protocol (currently 12.5 bitcoins, halved every four years).</p>
<h4 id="Understand"><a href="#Understand" class="headerlink" title="Understand"></a>Understand</h4><p>According to the author’s current understanding, the so-called mining is not to  Bitcoin, but to  the bookkeeping rights of the Bitcoin ledger. If the entire Bitcoin network is compared to a ledger, each block on the blockchain is a ledger. A page in the book, but not all pages will be accepted by this ledger. Only those pages that conform to its rules can be correctly inserted into the ledger. The so-called mining machine is to find such pages that conform to the rules.</p>
<p>It’s just that the current Bitcoin Incentive Mechanism is that whenever you successfully create a new account page, you can directly write in it to transfer a certain amount of Bitcoin to your account, and combine all the transactions you currently record that have not been recorded in the blockchain. And the recognized valid transaction records are recorded in this block body together. As long as this account page is successfully inserted and accepted by most nodes as the main branch, then these transaction records are valid.</p>
<p>However, the number of bitcoins is limited. When the bitcoins are sent out one day, the source of income of the mining machine is the commission of the transaction records recorded on its own page.</p>
<h2 id="Three-scenarios-of-blockchain"><a href="#Three-scenarios-of-blockchain" class="headerlink" title="Three scenarios of blockchain"></a>Three scenarios of blockchain</h2><p>After the introduction of smart contracts, the blockchain has gone beyond the simple data recording function, and actually has a bit of “intelligent computing” meaning; further, it can also add rights management and high-level programming language support to the blockchain to achieve a more powerful distributed ledger system that supports more commercial scenarios.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Scenarios</th>
<th style="text-align:left">Features</th>
<th style="text-align:left">Smart Contracts</th>
<th style="text-align:left">Consistency</th>
<th style="text-align:left">Permissions</th>
<th style="text-align:left">Types</th>
<th style="text-align:left">Performance</th>
<th style="text-align:left">Programming Languages</th>
<th style="text-align:left">Representations</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Digital Currency</td>
<td style="text-align:left">Accounting Function</td>
<td style="text-align:left">No or Weak</td>
<td style="text-align:left">PoW</td>
<td style="text-align:left">No</td>
<td style="text-align:left">Public Chain</td>
<td style="text-align:left">Lower</td>
<td style="text-align:left">Simple Script</td>
<td style="text-align:left">Bitcoin Network</td>
</tr>
<tr>
<td style="text-align:left">Distributed Application Engine</td>
<td style="text-align:left">Smart Contract</td>
<td style="text-align:left">Turing Complete</td>
<td style="text-align:left">PoW, PoS</td>
<td style="text-align:left">None</td>
<td style="text-align:left">Public Chain</td>
<td style="text-align:left">Restricted</td>
<td style="text-align:left">Specific Language</td>
<td style="text-align:left">Ethereum Network</td>
</tr>
<tr>
<td style="text-align:left">Distributed ledger with permissions</td>
<td style="text-align:left">Business processing</td>
<td style="text-align:left">Multiple languages, Turing complete</td>
<td style="text-align:left">Multiple mechanisms including CFT, BFT, pluggable</td>
<td style="text-align:left">Support</td>
<td style="text-align:left">Consortium chain</td>
<td style="text-align:left">Scalable</td>
<td style="text-align:left">High-level programming language</td>
<td style="text-align:left">Hyperledger</td>
</tr>
</tbody>
</table>
</div>
<p>According to the different participants, it can be divided into public (Public or Permissionless) chain, consortium (Consortium or Permissioned) chain and private (Private) chain.</p>
<p>Public blockchains, as the name implies, can be used and maintained by anyone, and participants are mostly anonymous. Typical blockchains such as Bitcoin and Ethereum, information is fully public.</p>
<p>If the permission mechanism is further introduced, two types of private chain and consortium chain can be implemented.</p>
<p>Private chain is managed and restricted by centralized managers, only a few internal people can use it, and the information is not public. It is generally believed that the difference with traditional centralized accounting systems is not obvious.</p>
<p>Consortium chains are in between. Several organizations work together (such as supply chain organizations or banking consortia) to maintain a blockchain. The use of the blockchain must be restricted access with permissions, and relevant information will be protected. Typically, such as the Hyperledger project. In terms of architecture, most existing blockchains include at least a layered structure such as network layer, consensus layer, smart contract and application layer. Consortium chain implementations will also introduce additional permission management mechanisms.</p>
<h2 id="Hyperledger"><a href="#Hyperledger" class="headerlink" title="Hyperledger"></a>Hyperledger</h2><p>Hyperledger Fabric is an open source project for enterprise customers led by IBM. Unlike public chains such as Bitcoin and Ethereum, nodes in the Hyperledger Fabric network must be authorized and authenticated to join, thus avoiding POW resource overhead, greatly improving transaction processing efficiency, and meeting the processing performance requirements of enterprise-level applications. At the same time, in order to meet the flexible and changeable application scenarios, Hyperledger Fabric adopts a highly Modularization system design concept, which integrates the permission authentication module (MSP), consensus service module (Ordering Service), endorsement module (Endorsing peers), and block submission module (committing peers), etc. are deployed separately, so that developers can replace modules according to specific business scenarios, and realize plug-in/plug-out management of modules. Therefore, Hyperledger Fabric is a development framework for private/consortium chains, and the operation of the system does not require token support.</p>
<h3 id="Basic-concepts"><a href="#Basic-concepts" class="headerlink" title="Basic concepts"></a>Basic concepts</h3><h4 id="Channel："><a href="#Channel：" class="headerlink" title="Channel："></a>Channel：</h4><p>It is a data isolation mechanism to ensure that transaction information is only visible to transaction participants, and each channel is an independent blockchain, which allows multiple users to share the same blockchain system without worrying about information leakage. Channels enable different user businesses on the upper layer to share the same blockchain system resources, mainly including network, computing, and storage resources. Essentially, channels serve the upper layer business through different blockchain ledgers, and these blockchains are uniformly deployed on peers, and transactions are sorted and packaged through ordering services. Channels are controlled by permission isolation. Members in different channels cannot access the transaction information of the other party, but can only access the transaction information of the channel to which they belong.</p>
<h4 id="Chaincode："><a href="#Chaincode：" class="headerlink" title="Chaincode："></a>Chaincode：</h4><p>Also known as smart contracts, asset definition and asset processing logic are encapsulated into interfaces that change the state of the ledger when called by users.</p>
<h4 id="Ledger："><a href="#Ledger：" class="headerlink" title="Ledger："></a>Ledger：</h4><p>Blockchain ledger, storing transaction information and smart contract code.</p>
<h4 id="Network："><a href="#Network：" class="headerlink" title="Network："></a>Network：</h4><p>The P2P network between transaction processing nodes is used to maintain the consistency of the blockchain ledger.</p>
<h4 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h4><p>Consensus algorithms such as Kafka and SBTF are used to sort and package all transaction information into blocks, which are sent to committing peers and written into the blockchain.</p>
<h4 id="World"><a href="#World" class="headerlink" title="World"></a>World</h4><p>Display the current status of asset data. The underlying layer organizes asset information in the blockchain through LevelDB and CouchDB databases to provide an efficient data access interface.</p>
<h4 id="Membership"><a href="#Membership" class="headerlink" title="Membership"></a>Membership</h4><p>Manage authentication information and provide authorization services for clients and peers.</p>
<h3 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h3><p>In Hyperledger, there are three types of roles:</p>
<h4 id="Client："><a href="#Client：" class="headerlink" title="Client："></a>Client：</h4><p>Client, used to send transaction requests from end users to the blockchain network.</p>
<h4 id="Peers："><a href="#Peers：" class="headerlink" title="Peers："></a>Peers：</h4><p>Responsible for maintaining the blockchain ledger, which is divided into endoring peers and committing peers. Among them, the endorser endorses the transaction (verifies the transaction and signs it), and the committer receives the packaged block and writes it into the blockchain. Peers node is a logical concept, endorser and committer can be deployed on a physical machine at the same time.</p>
<h4 id="Ordering-1"><a href="#Ordering-1" class="headerlink" title="Ordering"></a>Ordering</h4><p>The transaction information is received, sorted, packaged into blocks, put into the blockchain, and finally returned to the committer peers.</p>
<h3 id="Transaction-process"><a href="#Transaction-process" class="headerlink" title="Transaction process"></a>Transaction process</h3><p>The blockchain ledger is maintained by peer nodes, not by the ordering service cluster. Therefore, only peer nodes can find complete blockchain information, while the ordering service cluster is only responsible for sorting transactions and only retains part of the blockchain information during processing. The node in the Hyperledger Fabric system is a logical concept and is not necessarily a physical device. However, for designers of production environments, peer nodes cannot be deployed on the same machine as order nodes, while enduring peers and committing peers can be deployed on the same machine. This design is mainly for decoupling the system architecture, improving scalability, and improving security through host isolation. Endorsing peer verifies the signature of the client, and then executes the smart contract code to simulate the transaction. After the transaction processing is completed, the transaction information is signed and returned to the Client. After the client receives the signed transaction information, it sends it to the order node for sorting. After the Order node sorts and packs the transaction information into blocks, it broadcasts it to committing peers and writes it into the blockchain. (For specific transaction process, please refer to: <a href="https://www.chainnews.com/articles/074736012702.htm">https://www.chainnews.com/articles/074736012702.htm</a>)</p>
<p>Reference article:</p>
<p><a href="https://mp.weixin.qq.com/s/8W_oegxPCMr9zTtpN1h6dA">https://mp.weixin.qq.com/s/8W_oegxPCMr9zTtpN1h6dA</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html">http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html</a></p>
<p><a href="https://yeasy.gitbooks.io/blockchain_guide/content/02_overview/definition.html">https://yeasy.gitbooks.io/blockchain_guide/content/02_overview/definition.html</a></p>
<p><a href="https://www.chainnews.com/articles/074736012702.htm">https://www.chainnews.com/articles/074736012702.htm</a></p>
]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
  </entry>
  <entry>
    <title>codereview</title>
    <url>/en/posts/1f2e7416/</url>
    <content><![CDATA[<p>During the few days when everyone was happy, Google released two docs, which I feel is very necessary to know as a programmer and engineer. After reading, the author intercepted some of the original text and simplified some other parts to summarize.<br><span id="more"></span></p>
<h2 id="The"><a href="#The" class="headerlink" title="The"></a>The</h2><p>Simply put, it is the CL author guide to guide through code review. So what does CL mean? It means change list, change record and log.</p>
<p>This guide can help you complete code reviews faster and obtain higher quality results. For every Google developer, reading this guide is very helpful.</p>
<p><a href="https://google.github.io/eng-practices/review/developer/">https://google.github.io/eng-practices/review/developer/</a></p>
<h3 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h3><h4 id="First"><a href="#First" class="headerlink" title="First"></a>First</h4><ul>
<li>Short summary of what is being done.</li>
<li>Complete sentence, written as though it was an order.</li>
<li>Follow by empty line.</li>
</ul>
<p>First of all, the first line of the CL should preferably be a short description of what was done, followed by a blank line, and second, it should be written as imperative, of course the following part may not need to be written like this.</p>
<h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>The rest of the description should be informative. It may include a brief description of the problem to be solved and why this is the best approach. If there are any shortcomings in the approach, it should be mentioned. If relevant, please include background information such as error numbers, benchmark results, and a link to the design doc..</p>
<h4 id="Bad"><a href="#Bad" class="headerlink" title="Bad"></a>Bad</h4><p>“Fix bug” is an inadequate CL description. What bug? What did you do to fix it? Other similarly bad descriptions include:</p>
<ul>
<li>“Fix build.”</li>
<li>“Add patch.”</li>
<li>“Moving code from A to B.”</li>
<li>“Phase 1.”</li>
<li>“Add convenience functions.”</li>
<li>“kill weird URLs.”</li>
</ul>
<p>Some of those are real CL descriptions. Their authors may believe they are providing useful information, but they are not serving the purpose of a CL description.</p>
<h4 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h4><p>Here are some examples of good descriptions.</p>
<h5 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h5><blockquote>
<p>rpc:</p>
<p>Servers</p>
</blockquote>
<p>The first few words describe what the CL actually does. The rest of the description talks about the problem being solved, why this is a good solution, and a bit more information about the specific implementation.</p>
<p>There are many good examples of CL in the doc, you can take a look for yourself. At the same time, remember that CL is preferably all English.</p>
<h3 id="Small"><a href="#Small" class="headerlink" title="Small"></a>Small</h3><h4 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h4><ul>
<li><strong>Reviewed more quickly.</strong> It’s easier for a reviewer to find five minutes several times to review small CLs than to set aside a 30 minute block to review one large CL.</li>
<li><strong>Reviewed more thoroughly.</strong> With large changes, reviewers and authors tend to get frustrated by large volumes of detailed commentary shifting back and forth—sometimes to the point where important points get missed or dropped.</li>
<li><strong>Less likely to introduce bugs.</strong> Since you’re making fewer changes, it’s easier for you and your reviewer to reason effectively about the impact of the CL and see if a bug has been introduced.</li>
<li><strong>Less wasted work if they are rejected.</strong> If you write a huge CL and then your reviewer says that the overall direction is wrong, you’ve wasted a lot of work.</li>
<li><strong>Easier to merge.</strong> Working on a large CL takes a long time, so you will have lots of conflicts when you merge, and you will have to merge frequently.</li>
<li><strong>Easier to design well.</strong> It’s a lot easier to polish the design and code health of a small change than it is to refine all the details of a large change.</li>
<li><strong>Less blocking on reviews.</strong> Sending self-contained portions of your overall change allows you to continue coding while you wait for your current CL in review.</li>
<li><strong>Simpler to roll back.</strong> A large CL will more likely touch files that get updated between the initial CL submission and a rollback CL, complicating the rollback (the intermediate CLs will probably need to be rolled back too).</li>
</ul>
<p>Simply put, it is easier to know what you are doing with each commit, so that when you have a problem, you can quickly locate the problem, and if the problem needs to be rolled back, it will not be affected by the existing code.</p>
<h4 id="What"><a href="#What" class="headerlink" title="What"></a>What</h4><p>In general, the right size for a CL is <strong>one self-contained change</strong>. This means that:</p>
<ul>
<li>The CL makes a minimal change that addresses <strong>just one thing</strong>. This is usually just one part of a feature, rather than a whole feature at once. In general it’s better to err on the side of writing CLs that are too small vs. CLs that are too large. Work with your reviewer to find out what an acceptable size is.</li>
<li>Everything the reviewer needs to understand about the CL (except future development) is in the CL, the CL’s description, the existing codebase, or a CL they’ve already reviewed.</li>
<li>The system will continue to work well for its users and for the developers after the CL is checked in.</li>
<li>The CL is not so small that its implications are difficult to understand. If you add a new API, you should include a usage of the API in the same CL so that reviewers can better understand how the API will be used. This also prevents checking in unused APIs.</li>
</ul>
<p>For the size of each commit, about 100 lines per commit is a reasonable size, and 1000 lines is too big. But this is not an absolute criterion. If 100 lines of code are distributed in 50 files, it is also a big modification.</p>
<h4 id="When"><a href="#When" class="headerlink" title="When"></a>When</h4><p>There are a few situations in which large changes aren’t as bad:</p>
<ul>
<li>You can usually count deletion of an entire file as being just one line of change, because it doesn’t take the reviewer very long to review.</li>
<li>Sometimes a large CL has been generated by an automatic refactoring tool that you trust completely, and the reviewer’s job is just to sanity check and say that they really do want the change. These CLs can be larger, although some of the caveats from above (such as merging and testing) still apply.</li>
</ul>
<h5 id="Splitting"><a href="#Splitting" class="headerlink" title="Splitting"></a>Splitting</h5><p>Relatively independent changes that require different reviewers can be split into different CLs</p>
<h5 id="Separate"><a href="#Separate" class="headerlink" title="Separate"></a>Separate</h5><p>It is usually best to refactor in a separate CL without including feature changes or bug fixes. For example, modifying a class and calling it should be placed in two different CLs.</p>
<h5 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h5><p>Try not to put the test code in different CLs, because the test will ensure the correctness of your code, even if the test code may make your submission huge.</p>
<p>However, we can put independent tests into a separate CL, for example:</p>
<ul>
<li>validating pre-existing, submitted code with new tests.</li>
<li>refactoring the test code (e.g. introduce helper functions).</li>
<li>introducing larger test framework code (e.g. an integration test).</li>
</ul>
<h5 id="Don’t"><a href="#Don’t" class="headerlink" title="Don’t"></a>Don’t</h5><p>If multiple CLs will depend on each other, it is best to ensure that the system can operate normally after each CL is submitted for modification.</p>
<h5 id="Can’t"><a href="#Can’t" class="headerlink" title="Can’t"></a>Can’t</h5><h3 id="How"><a href="#How" class="headerlink" title="How"></a>How</h3><p>When you’ve sent a CL out for review, it’s likely that your reviewer will respond with several comments on your CL. Here are some useful things to know about handling reviewer comments.</p>
<h4 id="Don’t-1"><a href="#Don’t-1" class="headerlink" title="Don’t"></a>Don’t</h4><p>The goal of review is to maintain the quality of our codebase and our products. When a reviewer provides a critique of your code, think of it as their attempt to help you, the codebase, and Google, rather than as a personal attack on you or your abilities.</p>
<p>In other words, try not to add your own negative emotions to the code review process. If someone adds negative emotions to your code review process, first consider what they really want to say, and then find a way to communicate with them privately, such as an interview or email.</p>
<h4 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h4><p>If the reviewer doesn’t understand your code, then you should find a way to explain what your code is doing. Because your reviewer can’t understand it, other colleagues may not understand it in the future.</p>
<h4 id="Think"><a href="#Think" class="headerlink" title="Think"></a>Think</h4><p>Because we may spend a lot of time on each submission, when we see reviewers give us comments, our first reaction is to reject.</p>
<p>But we’d better first consider whether the reviewer’s opinion is correct. If we can’t answer this question, we may need to find the reviewer to make his point clear, and then judge.</p>
<h4 id="Resolving"><a href="#Resolving" class="headerlink" title="Resolving"></a>Resolving</h4><p>Your first step in resolving conflicts should always be to try to come to consensus with your reviewer. If you can’t achieve consensus, see <a href="https://google.github.io/eng-practices/review/reviewer/standard.html">The Standard of Code Review</a>, which gives principles to follow in such a situation.</p>
<h2 id="How-1"><a href="#How-1" class="headerlink" title="How"></a>How</h2><p>This doc contains advice on the best way to conduct code reviews. It is a very complete doc, divided into many separate sections. Reading this doc will definitely be very helpful for everyone, and it is definitely one thing that will benefit everyone a lot.</p>
<p><a href="https://google.github.io/eng-practices/review/reviewer/">https://google.github.io/eng-practices/review/reviewer/</a></p>
<h3 id="The-1"><a href="#The-1" class="headerlink" title="The"></a>The</h3><p>The main purpose of code review is to ensure that the overall code health of Google’s codebase continues to improve over time.</p>
<p>First of all, developers must be able to make progress on their tasks. If you have never submitted improvements to the codebase, the codebase will never be improved. Also, if it is difficult for reviewers to make any changes, then developers have no incentive to make improvements in the future.</p>
<p>On the other hand, the reviewer is responsible for ensuring that the quality of each CL is such that the overall code health of its codebase does not decrease over time.</p>
<p>Thus, we get the following rule as the standard we expect in code reviews:</p>
<p><strong>In general, reviewers should favor approving a CL once it is in a state where it definitely improves the overall code health of the system being worked on, even if the CL isn’t perfect.</strong></p>
<p>That is <em>the</em> senior principle among all of the code review guidelines.</p>
<h4 id="Mentoring"><a href="#Mentoring" class="headerlink" title="Mentoring"></a>Mentoring</h4><p>Code review has an important function that can teach developers new knowledge about languages, frameworks, or general software design principles. It is always good to leave comments that help developers learn new knowledge. Sharing knowledge is part of improving the performance of system code over time.</p>
<h4 id="Principles"><a href="#Principles" class="headerlink" title="Principles"></a>Principles</h4><ul>
<li>Technical facts and data overrule opinions and personal preferences.</li>
<li>On matters of style, the <a href="http://google.github.io/styleguide/">style guide</a> is the absolute authority. Any purely style point (whitespace, etc.) that is not in the style guide is a matter of personal preference. The style should be consistent with what is there. If there is no previous style, accept the author’s.</li>
<li><strong>Aspects of software design are almost never a pure style issue or just a personal preference.</strong> They are based on underlying principles and should be weighed on those principles, not simply by personal opinion. Sometimes there are a few valid options. If the author can demonstrate (either through data or based on solid engineering principles) that several approaches are equally valid, then the reviewer should accept the preference of the author. Otherwise the choice is dictated by standard principles of software design.</li>
<li>If no other rule applies, then the reviewer may ask the author to be consistent with what is in the current codebase, as long as that doesn’t worsen the overall code health of the system.</li>
</ul>
<h3 id="What-1"><a href="#What-1" class="headerlink" title="What"></a>What</h3><h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><p>The most important content in the review is the overall design of CL. Does the interaction of various codes in CL make sense?</p>
<h4 id="Functionality-1"><a href="#Functionality-1" class="headerlink" title="Functionality"></a>Functionality</h4><p>Does this CL achieve the intended purpose of the developer? What benefits does the developer intend to bring to the users of this code?</p>
<p>“Users” are usually both end users (when they are affected by changes) and developers (who will have to “use” this code in the future). Usually, we want developers to test the CL well to ensure that they work properly when doing code reviews.</p>
<p>However, as a reviewer, you should still consider edge cases, look for concurrency issues, try to think like a user, and ensure that there are no errors that you can see just by reading the code.</p>
<p>You can verify the CL as needed, and the most important time for reviewers to check the behavior of the CL is the impact on users (such as UI changes).</p>
<p>When you are only reading the code, it is difficult to understand how certain changes will affect users. When making such changes, if it is too cumbersome to patch in CL and try it yourself, you can let the developer demonstrate the feature to you.</p>
<p>Another time when it is particularly important to consider functionality during code review is whether there is some kind of parallel programming going on in the CL that could theoretically lead to deadlocks or race conditions. Such issues are difficult to detect just by running the code, and usually require someone (developers and reviewers) to carefully consider them to ensure that they do not introduce problems.</p>
<h4 id="Complex"><a href="#Complex" class="headerlink" title="Complex"></a>Complex</h4><p>Simply put, don’t overdesign.</p>
<h4 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h4><p>Unit Test, Integration Test, or E2E Test as required by the change. Typically, tests should be added in the same CL as the production code unless the CL handles an emergency. Make sure the tests in the CL are correct, reasonable, and useful. Tests don’t self-test, we rarely write tests for tests - people have to make sure the tests work.</p>
<h4 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h4><p>The name should be long enough until he can fully express what it is or what it wants to do.</p>
<h4 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h4><p>Does the developer write clear comments in understandable English? Are all comments actually necessary? Usually, comments are useful when they explain why certain code exists and should not explain what certain code is doing. If the code is not clear enough to explain itself, the code should be simplified. There are some exceptions (for example, Regular Expression and complex algorithms often benefit greatly from comments explaining their role), but most comments are for information that the code itself may not be able to contain, such as the reason behind the decision.</p>
<h4 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h4><p>Make sure the CL follows the appropriate style guide. If you want to improve a style point that is not in the style guide, preface the comment with “Nit:” to let the developer know that this is an option that you think can improve the code but is not mandatory.</p>
<p>Authors of CL should not combine major style changes with other changes. This makes it difficult to see changes in CL, makes merging and rollback more complicated, and causes other issues.</p>
<h4 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h4><p>If CL changes the way users build, test, interact with code, or release code, please check if it also updates the relevant doc, including the readme file</p>
<h4 id="Every"><a href="#Every" class="headerlink" title="Every"></a>Every</h4><p>Look at every line of code that has been assigned to you for inspection. Sometimes you can scan data files, generated code, or things like large data structures, but not manually written classes, functions, or Code Blocks and think what’s in them is okay. Obviously, some code needs to be scrutinized more than others - this is a call to judgment you have to make - but you should at least make sure you understand what all the code is doing. If you are having too much difficulty reading the code and are making the review slow, then you should let the developers know this and wait for them to clarify before attempting the review</p>
<h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>Usually, the code review tool will only show you a few lines of code around the part you want to change. Sometimes, you have to look at the entire file to make sure the changes really make sense.</p>
<h4 id="Good-1"><a href="#Good-1" class="headerlink" title="Good"></a>Good</h4><p>If you see something nice in CL, please tell the developer, especially when they answered one of your comments in an excellent way.</p>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>In doing a code review, you should make sure that:</p>
<ul>
<li>The code is well-designed.</li>
<li>The functionality is good for the users of the code.</li>
<li>Any UI changes are sensible and look good.</li>
<li>Any parallel programming is done safely.</li>
<li>The code isn’t more complex than it needs to be.</li>
<li>The developer isn’t implementing things they <em>might</em> need in the future but don’t know they need now.</li>
<li>Code has appropriate unit tests.</li>
<li>Tests are well-designed.</li>
<li>The developer used clear names for everything.</li>
<li>Comments are clear and useful, and mostly explain <em>why</em> instead of <em>what</em>.</li>
<li>Code is appropriately documented (generally in g3doc).</li>
<li>The code conforms to our style guides.</li>
</ul>
<h3 id="Navigating"><a href="#Navigating" class="headerlink" title="Navigating"></a>Navigating</h3><p>Now that you know <a href="https://google.github.io/eng-practices/review/reviewer/looking-for.html">what to look for</a>, what’s the most efficient way to manage a review that’s spread across multiple files?</p>
<ol>
<li>Does the change make sense? Does it have a good <a href="https://google.github.io/eng-practices/review/developer/cl-descriptions.html">description</a>?</li>
<li>Look at the most important part of the change first. Is it well-designed overall?</li>
<li>Look at the rest of the CL in an appropriate sequence.</li>
</ol>
<h3 id="Speed"><a href="#Speed" class="headerlink" title="Speed"></a>Speed</h3><h4 id="Why-1"><a href="#Why-1" class="headerlink" title="Why"></a>Why</h4><p><strong>At Google, we optimize for the speed at which a team of developers can produce a product together</strong>, as opposed to optimizing for the speed at which an individual developer can write code. The speed of individual development is important, it’s just not <em>as</em> important as the velocity of the entire team.</p>
<p>When code reviews are slow, several things happen:</p>
<ul>
<li><strong>The velocity of the team as a whole is decreased.</strong> Yes, the individual, who doesn’t respond quickly to the review, gets other work done. However, new features and bug fixes for the rest of the team are delayed by days, weeks, or months as each CL waits for review and re-review.</li>
<li><strong>Developers start to protest the code review process.</strong> If a reviewer only responds every few days, but requests major changes to the CL each time, that can be frustrating and difficult for developers. Often, this is expressed as complaints about how “strict” the reviewer is being. If the reviewer requests the <em>same</em> substantial changes (changes which really do improve code health) but responds <em>quickly</em> every time the developer makes an update, the complaints tend to disappear. <strong>Most complaints about the code review process are actually resolved by making the process faster.</strong></li>
<li><strong>Code health can be impacted.</strong> When reviews are slow, there is increased pressure to allow developers to submit CLs that are not as good as they could be. Slow reviews also discourage code cleanups, refactorings, and further improvements to existing CLs.</li>
</ul>
<h3 id="How-2"><a href="#How-2" class="headerlink" title="How"></a>How</h3><ul>
<li>Be kind.</li>
<li>Explain your reasoning.</li>
<li>Balance giving explicit directions with just pointing out problems and letting the developer decide.</li>
<li>Encourage developers to simplify code or add code comments instead of just explaining the complexity to you.</li>
</ul>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>How codesandbox runs the npm module in the browser</title>
    <url>/en/posts/19234/</url>
    <content><![CDATA[<p>At present, there are more and more web IDE products running on the browser side. According to their functional characteristics, the current web IDE can be divided into two types. One is to migrate the functions of the local IDE basically intact. To the IDE on the web side, such as the most popular front-end IDE VS Code, with the help of cloud + containerization capabilities, VS Code has almost exactly the same functions as the local IDE on the browser side; there is also a web IDE that is more Focus on the presentation of’page development and real-time code parsing, compiling, and previewing ‘, and the implementation of code packaging and construction It is not limited to the implementation at the server level (such as based on Docker containers, etc.). Some products implement the functions of’compile, package, build, and run ‘based on browser-side code, and all of this is only based on our original development system.’ Local IDE + Node local build, local service + browser access preview ‘has the ability. Representatives of such products are CodeSandbox, codepen, StackBlitz, JSFiddle, etc.</p>
<p>That is to say, the former just puts the code editing on the web segment. In fact, it uses the cloud to store the code, compile the project, package and run it, etc. In this way, what we finally get is no different from local development. The difference is that we don’t have to specially download an editor.</p>
<p>The latter is a part of the compile packaging function and the final run in the browser, and due to the limitations of the browser, the size of the application it can support is limited (PS: recently encountered a problem, see the error should be Code size exceeds 500K, leave a pit, leave it to be solved later, hehe)</p>
<span id="more"></span>
<p>Can be’similar to the ability to build based on local webpack packaging ‘migrated to the browser side seems to be a very incredible thing, the above has also been mentioned, there are often two ways to achieve, one is based on the server side of the webpack packaging build, after the build will build the code and then transferred to the browser side parsing execution, related practices such as:<a href="https://juejin.im/entry/5a372e6a6fb9a0450f220711">基于webpack打造前端在线编译器</a>Another implementation is to provide the code of the dependent package (pulled from the npm installation) at the server level and return it to the Client. The packaging build is completely implemented on the browser side, implementing the’webpack ‘on the browser side. For example, CodeSandbox is the implementation of this pattern. Today we will take a look at the introduction of this article by the author of CodeSandbox, how all this is achieved.</p>
<blockquote>
<p>Note here that the implementation of codesandbox has gone through multiple iterations, but only how the server level provides dependencies has changed. After loading dependencies from the server level, they are returned to the client for use.</p>
</blockquote>
<h2 id="Content-organization"><a href="#Content-organization" class="headerlink" title="Content organization"></a>Content organization</h2><p>Because many of the contents below are translated from the original text of the codesandbox author, some places are difficult to understand, I will sort out the whole process first</p>
<ul>
<li>In the first version, you need to download the dependencies to the local in advance, analyze the required dependencies dynamically at runtime, and then require the required dependencies to be downloaded by the stub local implementation, not only can not support all dependencies, but also the recursion analysis performance has a bottleneck</li>
<li>With the idea of webpack DllPlugin, first send the dependency to the background, according to the hash of the dependency, find whether there is a cache in the background, if not, analyze the dependency, download it through yarn, and then package it into a dll and send it back to the caller. One problem with this version is that if it is not clearly defined in the dependency relationship, it cannot be packaged, and the cache is based on the dependency relationship. If there is the same package in two different dependency trees, it will not be reused</li>
<li>In order to solve the first problem of the above version, the author implemented a webpack packer that can add its own entrance</li>
<li>In order to solve the second problem, the author combines serverless and splits the dependencies. The server caches independent dependencies one by one. The server just returns the downloaded dependencies to the front end. The real responsibility for packaging is the front end, so that the front end can achieve on-demand packaging, which cannot be achieved on the back end because there is no actual code on the back end, so there is no such “need”.</li>
<li>Then in order to achieve the offline version, the author made another layer of caching on the front end</li>
<li>At this point, the codesandbox we are currently using is implemented</li>
</ul>
<h2 id="First-version"><a href="#First-version" class="headerlink" title="First version"></a>First version</h2><p>This version of codesandbox just implements an algorithm by itself, using a loading method similar to require to load dependencies one by one to the local (I personally think this local should refer to the user’s personal browser). The author of codesandbox personally believes that the first version cannot be regarded as full support for npm.</p>
<p>That is to say, this version does not load dependencies from the npm repository in real time according to the dependencies in the code, but downloads the dependencies to the local in advance, and then stubs the require in the code, so the author says that this version does not support all npm dependencies.</p>
<p>And this version should be specifically require a time to analyze what a depends on, and then layer by layer recursion, this kind of recursion if the project depends on complex, performance also has a big bottleneck.</p>
<blockquote>
<p>This</p>
<p>Even</p>
</blockquote>
<h2 id="Webpack-version"><a href="#Webpack-version" class="headerlink" title="Webpack version"></a>Webpack version</h2><p>The first version authors thought that full support for npm was impossible until someone actually implemented it.</p>
<p>So the author is considering how to achieve the general, he began to design an algorithm, but this algorithm is more complex, and ultimately there is no actual use, I will not repeat, interested can see the reference link at the end of the article.</p>
<p>Then, the author refers to the implementation of the DLLPlugin plugin of webpack.</p>
<p>Simply put, what DllPlugin does is to package a project into a dll dependency, wrap the dependencies in the project in the dll, and then expose the interface to the outside world. This is the official doc address:<a href="https://webpack.docschina.org/plugins/dll-plugin/#root">DllPlugin文档</a></p>
<p>Webpack’s<a href="https://webpack.js.org/plugins/dll-plugin/">DLLPlugin</a>Dependencies can be packaged, and a manifest list is used to mark which dependencies are included in the typed js package. The list looks like this:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dll_bundle&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/fbjs/lib/emptyFunction.js&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/fbjs/lib/invariant.js&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/fbjs/lib/warning.js&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/react&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/fbjs/lib/emptyObject.js&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/object-assign/index.js&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/prop-types/checkPropTypes.js&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/prop-types/lib/ReactPropTypesSecret.js&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./node_modules/react/cjs/react.development.js&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Each path maps a module id. If I wanted to introduce React, I’d just call dll_bundle (3) and I’d have React! This is perfect for requirements,</p>
<p>So the author started to act, based on the idea of Webpack DllPlugin, and came up with the following system:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621126841/origin-of-ray/1574822062018-7c62e623-e99b-43c1-80a4-a0eba2c3dfdb_ikivwp.png" alt=""></p>
<p>For each request that is packaged, I will create a new directory under’tmp/: hash ‘, then run’yarn add ${dependencyList}’, and then let’webpack ‘do the packaging process. At the same time, as a caching solution, I will save the new package to gcloud. This looks much simpler than the scheme diagram above, more because I use yarn to install dependencies and use’webpack’ for packaging as an alternative to the previous implementation.</p>
<blockquote>
<p>It may be a little difficult to understand here. Let me tell you my opinion. In the previous version, that is, the first version, codesandbox needs to download the dependencies to the local in advance, and then when it really runs to require, it will analyze the dependencies recursively., and then require to stub to the local downloaded dependencies</p>
<p>And this version, with the help of webpack</p>
</blockquote>
<p>However, this system still has a very big limitation, it does not support the introduction of files that are not in the webpack dependency diagram. This means something like the following example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;react-icons/lib/fa/fa-beer&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Will not work properly, because it is not needed from the beginning to the end of the dependency entry, and will not be packaged in it. (The packaging of webpack is based on the dependent modules in package.json and the dependencies of each dependent module. Files that are not included in this system will not be packaged)</p>
<h2 id="Webpack-with-entrance"><a href="#Webpack-with-entrance" class="headerlink" title="Webpack with entrance"></a>Webpack with entrance</h2><p>In order to solve the limitation just mentioned, that is, files that are not in the webpack dependency cannot be packaged into the final dll.</p>
<p>Manually added the entry configuration to ensure that’webpack ‘can also pack these files into it. After a lot of adjustments to this scheme, the system can now support any (? Translator’s Note: The author added a question mark here, indicating that he is not sure about supporting any) combination of packaging requirements. So you can also load react-icons, css files are also possible.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621468814/origin-of-ray/packager1_qabrps.png" alt=""></p>
<h2 id="Access-Serverless"><a href="#Access-Serverless" class="headerlink" title="Access Serverless"></a>Access Serverless</h2><h3 id="What-is-Serverless"><a href="#What-is-Serverless" class="headerlink" title="What is Serverless?"></a>What is Serverless?</h3><p>Based on serverless, you can define a function that will trigger execution when the server is requested: the function will be started first, then process the request, and kill and release itself after a period of time. This also means that you will have very high scalability: if your server has 1000 requests coming at the same time, you can start 1000 services immediately. This also means that you only need to pay for the actual running time.</p>
<h3 id="How-to-combine-serverless"><a href="#How-to-combine-serverless" class="headerlink" title="How to combine serverless"></a>How to combine serverless</h3><p>Serverless sounds perfect for our service: the service is not always running, and if there are multiple requests at the same time, we need high concurrency. So I started very eagerly using something called<a href="https://serverless.com/">Serverless</a>The framework.</p>
<p>Thanks to Serverless, our service migration was very smooth, and I had a working version within two days. I created three serverless functions:</p>
<p>A source data parser: This service is used to parse versions and peerDependencies, and request packaging functions;</p>
<ul>
<li><ol>
<li>A packer: This service is used for the installation and packaging of actual dependencies;</li>
</ol>
</li>
<li><ol>
<li>An uglifier (compression &amp; obfuscation): responsible for asynchronously uglifying packages generated by packaging.</li>
</ol>
</li>
</ul>
<p>A few days later I found a limitation: a lambda function can only have a maximum of 500M disk space, which means that some combined dependencies cannot be installed (Translator’s Note: The backend needs to pack all the dependencies when doing the build. The code is loaded into memory). This was really a devastating limitation, and I had to switch the service back to the original implementation.</p>
<p>A few months later, I released a new builder for CodeSandbox.<a href="https://hackernoon.com/how-i-created-a-parallel-offline-extensible-browser-based-bundler-886db508cc31">I released a new bundler for CodeSandbox</a>). This builder is very powerful and can easily allow us to support more frameworks like Preact or Vue. By supporting these frameworks, our service has received some very interesting requests. For example: If you want to use React in Preact, you need to rename’require (‘react’) ‘to:’ require (‘preact-compat’) ‘. For Vue, you might include’ @/components/App.vue ‘as your sandbox file. Our server-side packager doesn’t handle this kind of thing, but our browser-side bundler does.</p>
<p>That’s when I started thinking that we might be able to get the browser-side builder to do the actual packaging. If the server level just sends the relevant files to the browser (without doing the server-level packaging and building), and then we use the browser-side builder to actually package the dependencies, this should be faster because we are not handling the entire large package, only part of the package.</p>
<p>The server level packaged build based on webpack DLLPLugin will recursion traverse all dependencies from the dependency entry and then perform the packaged build, while the packaged build of the browser is only packaged on demand. So there are two reasons for it to be faster. First, the browser-side packaging construction does not require the server level to do the packaging construction. The server level is just a pure recursion acquisition of dependencies, and then sent to the browser side, which saves the server level. The time of packaging and building also saves server overhead; the second is that the packaging and building on the browser side is built on demand rather than in full.</p>
<p>This solution has a very big advantage: <strong> We can achieve separate installation and caching of dependencies </strong> (remember what the webpack version said, from that version, we cached not one dependency, but all the dependencies in the dependency combination), and then we implement the merge of dependencies on the end. This means that if you request a new dependency on top of all existing dependencies, you only need to collect files for the new dependency! This will solve the limitation of AWS Lambda500M memory limit well, because we will only install a dependent module at the server level. We can also drop’webpack ‘in the packer, because now the packer is solely responsible for finding the relevant files that are dependent and sending them to the browser side.</p>
<h2 id="Join-browser-cache"><a href="#Join-browser-cache" class="headerlink" title="Join browser cache"></a>Join browser cache</h2><p>The author said that he did not take the scheme of dynamically requesting files directly from the unpkg.com because he wanted to support the offline scheme, that is, even if you do not have a network, you can also implement the compile packaging build preview on the browser side, provided that you have already done the relevant files on the browser side. Based on the server level single dependency packaging implemented by the author, the scheme caches all the files of the entire dependency module in the local browser, while the dynamic request file from the unpkg.com is a single request for a single file in a dependency module, which is prone to A dependency file does not exist.</p>
<p>That is to say, every time you go to request a separate dependency, you will first check if there is a local cache before going to the background to get the dependency.</p>
<h2 id="Final-version"><a href="#Final-version" class="headerlink" title="Final version"></a>Final version</h2><p><strong> CodeSandbox packaging and running does not depend on the server, just if you need to rely on the client without caching, you need to go to the server to request </strong></p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621128800/origin-of-ray/codesandbox-arch_b64xm7.png" alt=""></p>
<ul>
<li><strong> Editor </strong>: Editor. Mainly used to modify files, CodeSandbox integrates’VsCode ‘here, and notifies’Sandbox’ for translation after file changes.</li>
<li><strong> Sandbox </strong>: Code Runner. <strong> Sandbox runs in a separate iframe, responsible for code translation (Transpiler) and run (Evalation) </strong>. As shown in the top picture, the left side is Editor, the right side is Sandbox</li>
<li>Packager. Similar to yarn and npm, responsible for pulling and caching npm dependencies</li>
</ul>
<p>Author of CodeSandbox <a href="https://twitter.com/CompuIves">Ives van Hoorne</a> I have also tried to port Webpack to the browser to run, because almost all CLIs are now built using Webpack. If you can port Webpack to the browser, you can take advantage of Webpack’s powerful ecosystem and translation mechanism (loader/plugin), low cost compatible with various CLIs.</p>
<p>However, Webpack is too heavy 😱, and the compressed size is 3.5MB, which is barely acceptable; the bigger problem is to simulate the Node runtime environment on the browser side, which costs too much and outweighs the gains.</p>
<p>So CodeSandbox decided to build its own packager, which is lighter and optimized for the CodeSandbox platform. For example, CodeSandbox only cares about the code building of the Development Environment, and the goal is to run it. Compared with Webpack, the following features have been cut out:</p>
<ul>
<li>Production mode. CodeSandbox only considers the development mode, and does not need to consider some features of production, such as<ul>
<li>Code compression, optimization</li>
<li>Tree-shaking</li>
<li>Performance optimization</li>
<li>Code Splitting</li>
</ul>
</li>
<li>File output. No need to pack into chunks</li>
<li>Server communication. Sandbox translates and runs directly in situ, while Webpack needs to establish a long connection with the development server to receive instructions, such as HMR.</li>
<li>Static file processing (such as images). These images need to be uploaded to CodeSandbox’s server</li>
<li>Plugin mechanisms and more.</li>
</ul>
<p>So it can be considered that CodeSandbox is a simplified version of Webpack, and optimized for the browser environment, such as using workers for parallel translation.</p>
<h3 id="Project-build-process"><a href="#Project-build-process" class="headerlink" title="Project build process"></a>Project build process</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">packager -&gt; transpilation -&gt; evaluation</span><br></pre></td></tr></table></figure>
<p>Sandbox construction is divided into three stages:</p>
<p>Packager loading phase, download and handle all npm module dependencies</p>
<ul>
<li><strong> Transpilation </strong> Transpilation phase, translates all changed code, constructs modeling block dependencies</li>
<li><strong> Evaluation </strong> Execution phase, run module code with’eval ‘for preview</li>
</ul>
<h4 id="Packer"><a href="#Packer" class="headerlink" title="Packer"></a>Packer</h4><p>Since CodeSandbox already covers the code building part, we don’t need’devDependencies’, that is to say <strong> in CodeSandbox we only need to install all the dependencies needed for the actual code to run, which can reduce hundreds of dependency downloads. So don’t worry about the browser being overwhelmed for the time being </strong>.</p>
<p>Before Packer downloads dependencies, it actually goes through the Transpilation transfer phase to analyze dependencies on demand, and then takes the analysis product to Packer.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621469497/origin-of-ray/packager2_pk7goe.png" alt=""></p>
<h4 id="Transpilation"><a href="#Transpilation" class="headerlink" title="Transpilation"></a>Transpilation</h4><p> This stage starts from the application’s entry file, translates the source code, parses the AST, finds the subordinate dependency modules, and then recursion translation, and finally forms a’dependency graph ‘.</p>
<p>The entire transpiler of CodeSandbox runs in a separate iframe.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621469683/origin-of-ray/editor-vs-compiler_m9eo6p.png" alt="img"></p>
<p>The Editor is responsible for changing the source code. The source code changes will be passed to the Compiler through postmessage, which will carry’Module + template ‘.</p>
<ul>
<li><strong> Module </strong> contains all source code content and module path, which also contains package.json, Compiler will read npm dependencies according to package.json;</li>
<li><strong> template </strong> represents the Preset of the Compiler, such as’create-react-app ‘,’ vue-cli ‘, which defines some loader rules for translating different types of files, and the preset also determines the template and entry file of the application. From the above we know that these templates are currently predefined.</li>
</ul>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621469733/origin-of-ray/compiler_cgbsyb.png" alt=""></p>
<p>The overall situation can be basically divided into the following four stages:</p>
<ul>
<li><strong> Configuration phase </strong>: The configuration phase creates Preset objects, determines entry files, etc. CodeSandbox currently only supports limited application templates, such as vue-cli and create-react-app. The directory structure convention between different templates is different, such as entry files and html template files. In addition, the rules for file processing are different, for example, vue-cli needs to handle ‘.vue’ files.</li>
<li><strong> Dependency download phase </strong>: Packager phase, download all dependencies of the project and generate Manifest objects</li>
<li><strong> Change calculation stage </strong>: Calculate the added, updated, and removed modules according to the source code passed by the Editor.</li>
<li><strong> The translation stage </strong>: When the translation really starts, first re-translate the modules that need to be updated calculated in the previous stage. Then from the entry file as a starting point, translate and build a new dependency graph. Modules and their submodules that have not changed will not be translated repeatedly here</li>
</ul>
<h4 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h4><p>Although it is called a bundler, CodeSandbox does not package, which means it does not package all modules into chunks files like Webpack.</p>
<p>Transpilation starts from the entry file, then analyzes the module import rules of the file, and recursion translates the dependent modules. By the Evaluation stage, CodeSandbox has built a complete dependency graph. Now it’s time to run the application</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1621470036/origin-of-ray/evaluation_gseiqz.png" alt=""></p>
<p>Reference link:</p>
<p><a href="https://www.yuque.com/wangxiangzhong/aob8up/uf99c5?language=en-us">https://www.yuque.com/wangxiangzhong/aob8up/uf99c5?language=en-us</a></p>
<p><a href="https://hackernoon.com/how-we-make-npm-packages-work-in-the-browser-announcing-the-new-packager-6ce16aa4cee6">codesandbox作者解读</a></p>
<p><a href="https://segmentfault.com/a/1190000019679430">https://segmentfault.com/a/1190000019679430</a></p>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
  <entry>
    <title>Computer Composition (1) Computer Overview</title>
    <url>/en/posts/21925/</url>
    <content><![CDATA[<p>The performance of a computer system is largely characterized by the efficiency and role of software, and the performance of software cannot be achieved without the support of hardware. For a certain function, it can be implemented in software or hardware, which is called software and hardware is logically equivalent. When designing a computer system, the functions of software and hardware should be assigned. Generally speaking, if a function is frequently used and the cost of implementing it with hardware is ideal, hardware should be used to implement it, because the efficiency of hardware implementation is generally higher.</p>
<span id="more"></span>
<h1 id="Computer-hardware"><a href="#Computer-hardware" class="headerlink" title="Computer hardware"></a>Computer hardware</h1><h2 id="Basic-ideas-of-von-neumann"><a href="#Basic-ideas-of-von-neumann" class="headerlink" title="Basic ideas of von neumann"></a>Basic ideas of von neumann</h2><p>When von Neumann studied EDVAC, he proposed the concept of “stored program”. The idea of “stored program” laid the basic structure of modern operating systems, and all kinds of computers based on this concept are collectively referred to as von Neumann machines. Its characteristics are as follows:</p>
<ul>
<li>Adopt the working method of “stored program”.</li>
<li>The computer hardware system consists of five components: arithmetic unit, controller, memory, input device and output device.<br>Instructions and data are stored in memory in the same position, with no difference in form, while computers can distinguish them by relying on different stages of the instruction cycle.</li>
<li>Instructions and data are represented in binary. Instructions consist of operation codes and address codes. The operation code indicates the type of operation, and the address code indicates the address of the operand.</li>
</ul>
<p>The basic idea of “stored program” is that the pre-prepared program and the original data source can be sent to main memory before execution. Once the program is started and executed, there is no need for operator intervention.</p>
<p>Its basic working mode is: control flow driven mode.</p>
<h2 id="Functional-components-of-a-computer"><a href="#Functional-components-of-a-computer" class="headerlink" title="Functional components of a computer"></a>Functional components of a computer</h2><h3 id="Input-device"><a href="#Input-device" class="headerlink" title="Input device"></a>Input device</h3><p>The main function of an input device is to input programs and data into a computer in the form of information that the machine can recognize and accept. The most commonly used and basic input device is the keyboard.</p>
<h3 id="Output-device"><a href="#Output-device" class="headerlink" title="Output device"></a>Output device</h3><p>The main task of an output device is to output the results of computer processing in a form acceptable to people or in the form of information required by other systems. The most common and commonly used output devices are monitors, printers, etc.</p>
<h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>Memory is divided into main memory (also known as internal memory) and auxiliary memory (also known as external memory). The memory that the CPU can directly access is main memory. Secondary memory is used to help main memory remember more information. Information in secondary memory must be transferred to main memory before it can be accessed by the CPU.</p>
<p>The working mode of main memory is to access the address of the storage unit, which is called address access.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645864310/origin-of-ray/Flowchart_xh7xl0.jpg" alt="img"><br>The most basic composition of main memory is shown in the figure.</p>
<p>The memory stores binary data, the address register (MAR) stores the memory access address, and finds the corresponding memory cell after address decoding.</p>
<p>The Data Register (MDR) is used to temporarily store information to be read or written from memory.</p>
<p>The timing control logic is used to produce various timing signals required for memory operation.</p>
<p>A memory bank consists of many storage units, each storage unit contains several storage elements, and each storage element stores one bit of binary code. Therefore, the storage unit can store a string of binary code, which is called a storage word. The storage length of this string of code is the storage word length, which needs to be an integer multiple of 1B (8bits).</p>
<p>What we usually call a 32-bit machine refers to the word length, also known as the machine word length. The so-called word length usually refers to the width of the data path used for integer operations inside the CPU, that is, the number of bits of binary data that can be processed by a computer for an integer operation (that is, fixed-point integer operation, this concept will be discussed later in the chapter), usually related to the number of registers and adders of the CPU. Therefore, the word length is generally equal to the size of the internal register. The longer the word length, the larger the data representation range and the higher the calculation accuracy.</p>
<p>The concept of word length is different from that of word. A word is used to represent the unit of information to be processed and is used to measure the width of a data type. For example, x86 defines a word as 16 bits.</p>
<p>Instruction word length: The number of bits of binary code contained in an instruction word.</p>
<p>Storage word length: The number of bits of binary code stored in a storage unit.</p>
<p>They must all be integer multiples of bytes.</p>
<p>The instruction word usually takes an integer multiple of the storage word length. If the instruction word length is equal to 2 times the storage word length, two memory access cycles are required to retrieve an instruction. If the instruction word length is equal to the storage word length, the instruction fetch cycle is equal to the machine cycle.</p>
<p>MAR for addressing, the number of bits corresponding to the number of memory cells, such as MAR bit 10, there are 2 ^ 10 = 1024 memory cells, that is, 1k, the information that can be stored is 1k * storage word length.</p>
<p>The virtual address should not be considered here, and the physical address that goes to the MAR is already converted.</p>
<p>The length of the MAR is the same as the length of the PC, and both are used to store addresses. It’s just that the content in the memory pointed to by the address stored by the PC must be an instruction.</p>
<p>The length of MDR is equal to the storage word length, usually an integer multiple of the second power of the byte. Because the role of MDR is to temporarily store the content to be read or written from memory, in general, the length of each read and write from memory is one storage word length.</p>
<p>So <em> should the constant of the data bus be the same as the length of the MDR? </em></p>
<p>Note that although MAR and MDR are part of the memory, modern computers generally incorporate them into the CPU.</p>
<h3 id="Arithmetic-unit"><a href="#Arithmetic-unit" class="headerlink" title="Arithmetic unit"></a>Arithmetic unit</h3><p>An arithmetic unit is an executive part of a computer that performs arithmetic and logical operations.</p>
<p>The core of the arithmetic unit is the Arithmetic and Logic Unit (ALU). The arithmetic unit contains several general purpose registers for staging operands and intermediate results, such as the accumulator (ACC), multiplier quotient register (MQ), operand register (X), index register (IX), base address register (BR), etc., the first three registers are required.</p>
<p>There is also a program status register (PSW) inside the arithmetic unit, also known as the flag register, which is used to store some flag information obtained by the ALU operation or the status information of the processor, such as whether the result is overflowing, whether there is a carry or offset, etc.</p>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>The controller is the command center of the computer, which directs the various components to work automatically and harmoniously.</p>
<p>The controller consists of a Program Counter (PC), an Instruction Register (IR), and a Control Unit (CU).</p>
<p>PC is used to store the address of the current instruction to be executed, and can automatically add 1 to form the address of the next instruction, and there is a direct path between it and the main memory MAR.</p>
<p>IR is used to store the current instruction, and its content comes from the MDR of main memory. The OP (IR) in the instruction is sent to the CU for analyzing the instruction and issuing various micro-operation command sequences; while the address code Ad (IR) is sent to the MAR for fetching the operands.</p>
<p>As mentioned above, the instruction word length can be an integer multiple of the storage word length, so the length of the IR can be an integer multiple of the MDR, that is, an instruction may be fetched multiple times.</p>
<p>Generally, the arithmetic unit and controller are integrated into the same chip, called the Central Processor.</p>
<p>CPU contains ALU, general purpose register group GPRs, PSW, controller, IR, PC, MAR, MDR, etc.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863416/origin-of-ray/流程图_3_m808y3.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863416/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_3_m808y3.jpg"></p>
<p>The above figure is a simple architecture diagram of a CPU. Through the above figure, we simply analyze the execution process of the next instruction:</p>
<ul>
<li>The address of the next instruction is indicated in the PC register and placed on the address bus through the MAR.</li>
<li>The controller issues a read command to the control bus.</li>
<li>According to the address indicated by the address bus, obtain instructions from main memory and place them on the data bus.</li>
<li>Because the control bus indicates that it is now a read command, read instructions from the data bus into the MDR and then into the IR</li>
<li>IR put the OP (opcode) into the CU to parse, then put the Ad (address code) into the MAR, then get the data from memory, put it in the MDR, and then put the data into GPRs.</li>
<li>If the instruction parses successfully, the data is also placed in the general purpose register, and the ALU can be used for calculation.</li>
</ul>
<h1 id="Computer-software"><a href="#Computer-software" class="headerlink" title="Computer software"></a>Computer software</h1><h2 id="System-software-and-application-software"><a href="#System-software-and-application-software" class="headerlink" title="System software and application software"></a>System software and application software</h2><p>System software is a set of basic software that ensures the efficient and correct operation of a computer system, usually provided to users as system resources.</p>
<p>The system software mainly includes operating system, database management system (DBMS), language processing system, distributed software system, network software system, standard library program, service program, etc.</p>
<p>Application software refers to programs developed for users to solve various problems in an Application Area.</p>
<h2 id="Three-levels-of-language"><a href="#Three-levels-of-language" class="headerlink" title="Three levels of language"></a>Three levels of language</h2><ul>
<li>Machine language</li>
<li>Assembly language</li>
<li>High level language</li>
</ul>
<p>Due to the inability of computers to directly understand and execute high-level languages, programs that need to convert high-level languages into machine language are usually called translation programs. Translation programs are divided into three categories:</p>
<ul>
<li>Assembly program (assembler). Translate assembly language into machine language.</li>
<li>Interpreter (interpreter). Translate the statements in the source program into its instructions one by one in the order of execution and execute them immediately.</li>
<li>compile program (compiler). Translate high-level language into assembly language or machine language.</li>
</ul>
<p>The interpreter does not generate a fully translated program in memory.</p>
<h2 id="Logical-functional-equivalence-of-software-and-hardware"><a href="#Logical-functional-equivalence-of-software-and-hardware" class="headerlink" title="Logical functional equivalence of software and hardware"></a>Logical functional equivalence of software and hardware</h2><p>Hardware often implements the most basic arithmetic and logic functions, while most other functions are augmented by software.</p>
<p>For a certain function, it can be implemented by both hardware and software. From the user’s point of view, they are functionally equivalent, which is called functional equivalence of software and hardware logic.</p>
<p>Equivalence is an important basis for computer system design. When designing a computer system, we must consider whether a certain function is implemented in hardware or software from many aspects.</p>
<h1 id="Hierarchical-structure-of-computer-systems"><a href="#Hierarchical-structure-of-computer-systems" class="headerlink" title="Hierarchical structure of computer systems"></a>Hierarchical structure of computer systems</h1><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863414/origin-of-ray/流程图_1_gwp690.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863414/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_1_gwp690.jpg"></p>
<p>Level 1 is the microprogrammed machine layer, which is a real hardware layer that executes microinstructions directly from the machine hardware.</p>
<p>The relationship between machine instructions and microinstructions can be summarized as follows:</p>
<p>A machine instruction corresponds to a microprogram, which is composed of several microinstructions. Therefore, the function of a machine instruction is realized by a sequence composed of several microinstructions. In short, the operation completed by a machine instruction is divided into several microinstructions to complete, which are interpreted and executed by microinstructions.</p>
<p>From the one-to-one correspondence between instructions and microinstructions, programs and microprograms, and addresses and microaddresses, the former is related to internal memory, while the latter is related to control memory (which is a part of the microprogram controller. The microprogram controller is mainly composed of three parts: control memory, microinstruction register and address transfer logic. Among them, the microinstruction register is further divided into two parts: the microaddress register and the microcommand register), and there are corresponding hard devices related to this.</p>
<p>It can be seen from the flowchart of microprogram execution of general instructions. Each CPU cycle is for one microinstruction. This tells us how to design microprograms, and will also allow us to further experience the relationship between machine instructions and microinstructions.</p>
<p>Level 2 is the traditional machine language layer, which is also an actual machine layer with microprograms interpreting machine instruction systems.</p>
<ul>
<li>Level 3 is the operating system layer, which is implemented by operating system programs, which are composed of machine instructions and generalized instructions. These generalized instructions are software instructions defined and interpreted by the operating system for the purpose of extending machine functions, so this layer is also called the hybrid layer.</li>
</ul>
<p>The specific content of generalized instructions can be delved into when looking at the operating system.</p>
<ul>
<li>The fourth layer is the assembly language layer, which provides users with a symbolic language through which assembly language programs can be written. This layer is supported and executed by the assembly program.</li>
<li>Level 5 is the high-level language layer, which is user-oriented and set up for the convenience of users writing applications. This layer has support and execution of high-level program compilers.</li>
</ul>
<p>Above the high-level language layer, there can also be an application layer.</p>
<p>Your pure hardware system without soft armor is called bare metal. Layers 3-5 are called virtual machines, which are simply software-implemented machines.</p>
<p>The relationship between the layers is close, the lower layer is the foundation of the upper layer, and the upper layer is the extension of the lower layer.</p>
<h1 id="The-working-principle-of-computer-system"><a href="#The-working-principle-of-computer-system" class="headerlink" title="The working principle of computer system"></a>The working principle of computer system</h1><h2 id="How-“stored-program”-works"><a href="#How-“stored-program”-works" class="headerlink" title="How “stored program” works"></a>How “stored program” works</h2><p>This method stipulates that before the program is executed, the instructions or data contained in the program need to be sent to main memory. Once the program is started and executed, there is no need for operator intervention, and the extraction and execution tasks of the instructions are automatically completed one by one.</p>
<p>The execution process of each instruction includes: accessing the instruction from the main, decoding the instruction, calculating the address of the next instruction, taking the operand and executing it, and sending the execution result back to memory.</p>
<p>The instructions here are the machine instructions mentioned above. They are divided into multiple steps, and each step is called a microinstruction.</p>
<p>The time to fetch instructions is generally called a machine cycle, also known as a CPU cycle</p>
<h2 id="From-source-program-to-executable-file"><a href="#From-source-program-to-executable-file" class="headerlink" title="From source program to executable file"></a>From source program to executable file</h2><p>When writing C language programs in a computer, they must be converted into a series of low-level machine instructions, packaged in a format called an executable object file, and stored as binary disk files.</p>
<p>Take GCC for UNIX as an example:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863415/origin-of-ray/流程图_2_z9ajc2.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863415/origin-of-ray/%E6%B5%81%E7%A8%8B%E5%9B%BE_2_z9ajc2.jpg"></p>
<ul>
<li>Preprocessing stage: The preprocessor (cpp) processes commands starting with #in the source program, such as inserting the contents of the .h file after the #include command into the program file. The output is a source program with an extension of .i.</li>
<li>compile stage: The compiler (ccl) compiles the preprocessed source program to generate an assembly language source program hello.s. Each statement in the assembly language source program describes a low-level machine language instruction in a text format.</li>
<li>Assembly stage: The assembler (as) translates hello.s into machine language instructions and packages these instructions into a binary file called hello.s, which is a relocatable object file.<br>Link phase: The linker (ld) merges multiple relocatable object files and standard library functions into a single executable object file, or executable for short.</li>
</ul>
<h2 id="Description-of-program-execution-process"><a href="#Description-of-program-execution-process" class="headerlink" title="Description of program execution process"></a>Description of program execution process</h2><p>In UNIX, we can execute the program through the shell command line interpreter. The process of executing the program is explained through the shell command line as follows:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">unix&gt; </span><span class="language-bash">./hello</span></span><br><span class="line"></span><br><span class="line">hello, world!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">unix&gt; </span></span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1645863310/origin-of-ray/asynccode_nix9io.png" alt="img"></p>
<p>The shell program reads each character entered by the user from the keyboard into the CPU register one by one (corresponding to 1), then saves it to the main memory, and forms the string “./hello” (corresponding to 2) in the buffer of the main memory. After receiving Enter, the shell calls up the kernel program of the system, and the kernel loads the executable file hello on the disk to the main memory (corresponding to 3). The kernel loads the code and data in the executable file (here is the string “hello, world! \ N “), the address of the first instruction of hello is sent to the PC, and the CPU then starts executing the hello program, which accesses each character in the string loaded into the main memory from the main memory to the CPU’s register (corresponding to 4), and then sends the characters in the CPU register to the display (corresponding to 5).</p>
<blockquote>
<p>It is not so simple to send it directly to the PC here, it will involve the switching of processes.</p>
</blockquote>
<h2 id="Description-of-the-instruction-execution-process"><a href="#Description-of-the-instruction-execution-process" class="headerlink" title="Description of the instruction execution process"></a>Description of the instruction execution process</h2><p>The code segment of the executable file is composed of a sequence of machine instructions represented by 0 and 1, which are used to indicate that the CPU completes a specific atomic operation.</p>
<p>For example, the number fetch instruction takes out a data from the storage unit and sends it to the register of the CPU. The number store instruction writes the contents of the register into a storage unit. The ALU instruction sends the contents of the two registers to some arithmetic or logical operation. In a CPU register. Taking the number fetch instruction as an example, it is sent to the ACC after fetching. The information flow is:</p>
<ul>
<li>Instruction fetch: PC - &gt; MAR - &gt; M -MDR - &gt; IR</li>
<li>Analysis instruction: OP (IR) - &gt; CU</li>
<li>Execute command: Ad (IR) - &gt; MAR - &gt; M - &gt; MDR -ACC</li>
</ul>
<h1 id="Computer-performance-indicators"><a href="#Computer-performance-indicators" class="headerlink" title="Computer performance indicators"></a>Computer performance indicators</h1><h2 id="Word-length"><a href="#Word-length" class="headerlink" title="Word length"></a>Word length</h2><p>This has been mentioned earlier, you can take a look at the previous content.</p>
<h2 id="Data-path-bandwidth-data-word-length"><a href="#Data-path-bandwidth-data-word-length" class="headerlink" title="Data path bandwidth (data word length)"></a>Data path bandwidth (data word length)</h2><p>Refers to the number of bits of information that the data bus can transmit in parallel at one time. The data path width mentioned here refers to the width of the external data bus, which may be different from the width of the data bus (internal register size) inside the CPU</p>
<h2 id="Main-memory-capacity"><a href="#Main-memory-capacity" class="headerlink" title="Main memory capacity"></a>Main memory capacity</h2><p>Refers to the maximum capacity of the main memory can store information, usually measured in bytes, can also be used to express the storage capacity of the word <em> word length (such as 512K </em> 16 bits).</p>
<p>The number of bits in the MAR reflects the maximum addressable range and is not necessarily the actual memory capacity.</p>
<p>If the MAR length is 16 bits, it means that there are 2 ^ 16 = 65536 memory cells, which is 64K. If the MDR is 32 bits, it means that the storage word length is 32 bits, and the storage capacity is 64K * 32b.</p>
<h2 id="Operation-speed"><a href="#Operation-speed" class="headerlink" title="Operation speed"></a>Operation speed</h2><ul>
<li>throughput. Refers to the number of requests processed by the system per unit time. It depends on how quickly information can be entered into memory, how quickly the CPU can fetch instructions, how quickly data can be accessed from memory, and how quickly results can be sent from memory to external devices. Almost every step is related to main memory, so system throughput mainly depends on the access cycle of main memory.</li>
<li>Response time. Refers to the waiting time from the user sending a request to the computer until the system responds to the request and obtains the desired result. Usually includes CPU time (time spent running a program) and waiting time (time for disk access, memory access, I/O operations, operating system overhead, etc.).</li>
<li>CPU clock cycle: usually beat pulse or T cycle, is the reciprocal of the main frequency, is the smallest unit of time in the CPU, and each action of executing instructions requires at least one clock cycle.</li>
</ul>
<blockquote>
<p>An instruction (machine instruction) consists of multiple microinstructions. Each microinstruction requires at least one clock cycle. The time to fetch the instruction (according to the first step of the PC executing the machine instruction, fetch the instruction, which is also a microinstruction) is called the machine cycle., also called CPU cycle</p>
</blockquote>
<ul>
<li>Main frequency (CPU clock frequency). Usually in Hertz (Hz). The higher the main frequency of the computer of the same model, the shorter the time it takes to complete an instruction.</li>
<li>CPI (Clock cycle Per Instruction): The number of clock cycles required to execute an instruction.<br>CPU execution time refers to the time it takes to run a program</li>
</ul>
<blockquote>
<p>CPU execution time</p>
<p>CPU performance (CPU execution time) is determined by three factors: frequency, CPI, and number of instructions.</p>
<p>The same instruction, different architectures of CPU implementation may be different, the required CPI may be different.</p>
<p>The above three may restrict each other.</p>
</blockquote>
<ul>
<li>MIPS (Million Instructions Per Second): how many million instructions are executed per second</li>
</ul>
<blockquote>
<p>MIPS</p>
<p>Average instruction cycle</p>
</blockquote>
<ul>
<li>MFLOPS, GFLOPS, TFLOPS, PFLOPS, EFLOPS, ZFLOPS: MFLOPS (Millon Floating-point Operations Per Second), i.e. how many millions of floating-point operations per second</li>
</ul>
<blockquote>
<p>MFLOPS</p>
</blockquote>
<h2 id="Benchmark-procedure"><a href="#Benchmark-procedure" class="headerlink" title="Benchmark procedure"></a>Benchmark procedure</h2><p>Benchmarks A set of programs specifically designed for performance rating.</p>
<p>But not necessarily reliable, hardware system designers or compiler developers may be specially optimized for this program.</p>
]]></content>
      <categories>
        <category>ComputerOrganization</category>
      </categories>
  </entry>
  <entry>
    <title>C</title>
    <url>/en/posts/36409/</url>
    <content><![CDATA[<p>With the gradual increase in use, I can’t stand the use of these concepts in the vague situation, so I found some official doc to learn these concepts in C #, mainly to distinguish between delegates and events.</p>
<p>In fact, I personally have been very vague about these concepts before reading the doc, and even once was confused by various blogs on the Internet, and even confused Action, Func and commission.</p>
<p>Finally, after I went to read the official doc, I had some understanding of these concepts.</p>
<p>First of all, the most important conclusion is thrown. Both delegates and events are to provide a way to post-process functions. Events are actually multicast based on delegates, and it is inconvenient to define a new delegate type every time you use a delegate, so it is provided. Two strong types of delegates are Action and Func.</p>
<span id="more"></span>
<h1 id="What-is-delegation"><a href="#What-is-delegation" class="headerlink" title="What is delegation"></a>What is delegation</h1><p>A delegate is a reference type that represents a reference to a method with a specific parameter list and return type. When instantiating a delegate, you can associate its instance with any method with a compatible signature and return type. You can call a method through a delegate instance.</p>
<p>Delegates are used to pass methods as arguments to other methods. Event handlers are methods called through delegates. You can create a custom method that a class (such as a Windows control) can call when a specific event occurs. The following example demonstrates a delegate declaration:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">PerformCalculation</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>You can assign any method in any accessible class or struct that matches the delegate type to the delegate. The method can be a static method or an instance method. This sexual aparteness allows you to programmatically change method calls and insert new code into existing classes.</p>
<p>The purpose of this code is to declare a new delegate. Note that it is a declaration, which is equivalent to declaring a new type. It can be understood as declaring a new class without instantiation.</p>
<p>The ability to reference methods as arguments makes delegates ideal for defining callback methods. A method can be written to compare two objects in an application. This method can be used in delegates for sorting algorithms. Since the comparison code is separated from the library, sorting methods may be more common.</p>
<p>Delegates have the following properties:</p>
<ul>
<li><p>Delegates are similar to C++ function pointer, but delegates are fully Object Oriented, unlike C++ pointers that remember function, delegates encapsulate both object instances and methods.</p>
</li>
<li><p>Delegates allow methods to be passed as arguments.</p>
</li>
<li><p>Delegates can be used to define callback methods.</p>
</li>
</ul>
<p>Delegates can be chained together; for example, multiple methods can be called on one event.</p>
<ul>
<li><p>The method does not have to exactly match the delegate type. For more information, see<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-delegates">使用委托中的变体</a>。</p>
</li>
<li><p>Use Lambda expressions to write internal connection Code Blocks more concisely. Lambda expressions (in some contexts) can be compiled to delegate types. To learn more about lambda expressions, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda 表达式</a>。</p>
</li>
</ul>
<h1 id="Use-of-delegation"><a href="#Use-of-delegation" class="headerlink" title="Use of delegation"></a>Use of delegation</h1><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/reference-types">委托</a>是安全封装方法的类型，类似于 C 和 C++ 中的函数指针。 与 C 函数指针不同的是，委托是面向对象的、类型安全的和可靠的。 委托的类型由委托的名称确定</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Del</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>Delegate objects can usually be constructed in two ways, one is to provide a delegate with a method name, and the other is to use <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda 表达式</a>When a delegate is instantiated, the call to the delegate is passed to the methodParameters passed to the delegate by the caller are passed to the method, and the delegate returns the method’s return value, if any, to the callerThis is called an invocation delegateAn instantiated delegate can be called as the encapsulated method itselfFor example:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a method for a delegate.public static void DelegateMethod(string message)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DelegateMethod</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Instantiate a delegate</span></span><br><span class="line">Del handler = DelegateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call the delegate.</span></span><br><span class="line">handler( Hello World );</span><br></pre></td></tr></table></figure>
<p>The delegate type is derived from the <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.delegate">Delegate</a> Class. The delegate type is<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/sealed">密封的</a>, they cannot be derived from, nor can a custom class be derived from them. Since the delegate instantiated is an object, it can be passed as an argument or assigned to a property. This allows the method to accept the delegate as an argument and call the delegate later. This is called an asynchronous callback and is a common method for notifying the caller when a long process completes. When a delegate is used in this way, the code using the delegate does not need to know the implementation method to be used. Functionality is similar to that provided by the wrapper interface.</p>
<p>When a delegate is constructed to encapsulate an instance method, the delegate will reference both the instance and the method. The delegate does not know an instance type other than the method it encapsulates, so the delegate can reference any type of object as long as there are methods on that object that match the delegate signature. When the delegate is constructed to encapsulate a static method, the delegate only references the method. Consider the following declaration:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MethodClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span>(<span class="params"><span class="built_in">string</span> message</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span>(<span class="params"><span class="built_in">string</span> message</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Together with the static DelegateMethod shown earlier, we now have three methods that Del instances can encapsulate.</p>
<p>When invoked, a delegate can call multiple methods. This is called multicast. To add additional methods to the delegate’s method list (invocation list), simply add two delegates using the addition operator or the addition assignment operator (“+” or “+=”). For example:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MethodClass();</span><br><span class="line">Del d1 = obj.Method1;</span><br><span class="line">Del d2 = obj.Method2;</span><br><span class="line">Del d3 = DelegateMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Both types of assignment are valid.</span></span><br><span class="line">Del allMethodsDelegate = d1 + d2;</span><br><span class="line">allMethodsDelegate += d3;</span><br></pre></td></tr></table></figure>
<p>At this point, the invocation list for allMethodsDelegate contains three methods, Method1, Method2, and DelegateMethod. The original three delegates (d1, d2, and d3) remain unchanged. When allMethodsDelegate is called, all three methods are called in order. If the delegate uses reference parameters, references are passed to all three methods in reverse order, and any changes made by one method are seen on the other. When a method throws an exception that is not caught within the method, the exception is passed to the caller of the delegate and subsequent methods in the invocation list are not invoked. If the delegate has a return value and/or output parameters, it will return the return value and parameters of the last called method. To remove a method from the invocation list, use<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/subtraction-operator">减法运算符或减法赋值运算符</a>(Or <code>-=</code>）。 for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//remove Method1</span><br><span class="line">allMethodsDelegate -= d1;</span><br><span class="line"></span><br><span class="line">// copy AllMethodsDelegate while removing d2</span><br><span class="line">Del oneMethodDelegate = allMethodsDelegate - d2;</span><br></pre></td></tr></table></figure>
<p>Because the delegate type is derived from System. Delegate, the methods and properties defined by the class can be called on the delegate. For example, to query the number of methods in the delegate invocation list, you can write:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> invocationCount = d1.GetInvocationList().GetLength(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>A delegate with multiple methods in the invocation list is derived from <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.multicastdelegate">MulticastDelegate</a>, which is a subclass of’System. Delegate ‘. Since both classes support’GetInvocationList’, the above code will also work in other cases.</p>
<p>Multicast delegates are widely used in event handling. An event source object sends an event notification to a receiver object that is registered to receive the event. To register an event, the receiver needs to create a method to handle the event, then create a delegate for that method and pass the delegate to the event source. When the event occurs, the source invokes the delegate. The delegate will then call an event handling method on the receiver, providing event data. The delegate type for a given event is determined by the event source. For more information, see<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/events/">事件</a>。</p>
<p>For more usage methods, please refer to:<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate">如何声明，实例化和使用委托</a></p>
<h1 id="Strongly-typed-delegates-Action-Func"><a href="#Strongly-typed-delegates-Action-Func" class="headerlink" title="Strongly typed delegates: Action, Func"></a>Strongly typed delegates: Action, Func</h1><p>The abstract Delegate class provides the infrastructure for loose coupling and invocation. Concrete delegate types become more useful by including and enforcing type safety of methods added to the invocation list of delegate objects. When the delegate keyword is used and concrete delegate types are defined, the compiler will generate these methods.</p>
<p>In fact, whenever a different method signature is required, this creates a new delegate type. This operation can become cumbersome after a while. Every new feature requires a new delegate type.</p>
<p>Fortunately, there is no need to do this. The .NET Core framework contains several types that are reusable when delegate types are needed. These are<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/fundamentals/types/generics">泛型</a>Definition, so you can declare a custom when you need a new method declaration.</p>
<p>First type is <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.action">Action</a> Types and some variations:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;(<span class="params">T arg</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">in</span> <span class="title">T2</span>&gt;(<span class="params">T1 arg1, T2 arg2</span>)</span>;</span><br><span class="line"><span class="comment">// Other variations removed for brevity.</span></span><br></pre></td></tr></table></figure>
<p>Variants of the Action delegate can contain up to 16 parameters, such as <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.action-16">Action</a>It is important that these definitions use different generic parameters for each delegate parameter: this allows maximum flexibility. Method parameters are not required but may be of the same type.</p>
<p>Use an Action type for any delegate type that has a void return type.</p>
<p>This framework also includes several generic delegate types that can be used to return values.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">out</span> <span class="title">TResult</span>&gt;()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">out</span> <span class="title">TResult</span>&gt;(<span class="params">T1 arg</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> TResult <span class="title">Func</span>&lt;<span class="keyword">in</span> <span class="title">T1</span>, <span class="keyword">in</span> <span class="title">T2</span>, <span class="keyword">out</span> <span class="title">TResult</span>&gt;(<span class="params">T1 arg1, T2 arg2</span>)</span>;</span><br><span class="line"><span class="comment">// Other variations removed for brevity</span></span><br></pre></td></tr></table></figure>
<p>Variants of the’Func ‘delegate can contain up to 16 input parameters, such as <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.func-17">Func</a>By convention, the type of the result is always the last type parameter in all Func declarations.</p>
<p>Use a’Func ‘type for any delegate type that returns a value.</p>
<p>There is also a specialized type of delegation <a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.predicate-1">Predicate</a>This type returns the test result of a single value.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">bool</span> <span class="title">Predicate</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;(<span class="params">T obj</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>You may notice that for any Predicate type, there exists a structurally equivalent Func type, for example</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">string</span>, <span class="built_in">bool</span>&gt; TestForString;</span><br><span class="line">Predicate&lt;<span class="built_in">string</span>&gt; AnotherTestForString;</span><br></pre></td></tr></table></figure>
<p>You may think that these two types are equivalent. They are not. These two variables cannot be used interchangeably. A variable of one type cannot be assigned to another type. The C #  type system uses the name of a defined type, not its structure.</p>
<h1 id="What-is-an-event"><a href="#What-is-an-event" class="headerlink" title="What is an event"></a>What is an event</h1><p>Similar to delegates, events are <em> late binding </em> mechanisms. In fact, events are built on language support for delegates.</p>
<p>Events are a way for objects to broadcast (to all relevant components in the system) what has happened. Any other component can subscribe to events and be notified when they are raised.</p>
<p>You may have used events in some programming. Many graphics systems have event models for reporting user interactions. These events report mouse movements, button clicks, and similar interactions. This is one of the most common scenarios for using events, but not the only one.</p>
<p>It is possible to define events that should be raised against classes. One thing to note when using events is that a particular event may not have any registered objects. Code must be written to ensure that events are not raised when listeners are not configured.</p>
<p>By subscribing to events, you can also create coupling between two objects (event source and event sink). You need to ensure that the event sink will unsubscribe from the event source when you are no longer interested in the event.</p>
<h2 id="Event-supported-design-goals"><a href="#Event-supported-design-goals" class="headerlink" title="Event-supported design goals"></a>Event-supported design goals</h2><p>The language design of the event addresses these goals:</p>
<ul>
<li><p>Enable very small coupling between event source and event sink. These two components may not be written by the same organization and may even be updated through completely different schedules.</p>
</li>
<li><p>Subscribing to an event and unsubscribing from the same event should be very simple.</p>
</li>
<li><p>Event source should support multiple event subscribers. It should also support not attaching any event subscribers.</p>
</li>
</ul>
<p>You will find that the goal of the event is very similar to the goal of the delegate. Therefore, the event language support is built on the delegate language support.</p>
<h2 id="Language-support-for-events"><a href="#Language-support-for-events" class="headerlink" title="Language support for events"></a>Language support for events</h2><p>The syntax used to define events and to subscribe or unsubscribe to them is an extension of the delegate syntax.</p>
<p>Define events that use the keyword’event ‘:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;FileListArgs&gt; Progress;</span><br></pre></td></tr></table></figure>
<p>The type of the event (in this example, ‘EventHandler &lt; FileListArgs &gt;’) must be a delegate type. When declaring an event, a number of conventions should be followed. Typically, the event delegate type has an invalid return. The event declaration should be a predicate or a predicate phrase. Use the past tense when the event reports something that has already happened. Use the present tense predicate (e.g., ‘Closing’) to report something that will happen. Typically, use the present tense to indicate that the class supports some type of custom behavior. One of the most common scenarios is to support cancellation. For example, the’Closing ‘event may include arguments indicating whether the shutdown operation should continue. Other scenarios may allow the caller to modify the behavior by updating the properties of the event parameter. You can raise an event to indicate the suggested next action that the algorithm will take. Event handlers can authorize different actions by modifying the properties of event parameters.</p>
<p>When you want to raise an event, invoke the event handler using the delegate invocation syntax:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Progress?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> FileListArgs(file));</span><br></pre></td></tr></table></figure>
<p>As<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/delegates-patterns">委托</a>As described in the section, the?. operator makes it easy to ensure that the event is not raised if there is no subscriber for the event.</p>
<p>Subscribe to events by using the ‘+=’ operator:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">EventHandler&lt;FileListArgs&gt; onProgress = (sender, eventArgs) =&gt;</span><br><span class="line">    Console.WriteLine(eventArgs.FoundFile);</span><br><span class="line"></span><br><span class="line">fileLister.Progress += onProgress;</span><br></pre></td></tr></table></figure>
<p>Handler methods are usually prefixed with “On” followed by the event name, as shown above.</p>
<p>Use the ‘- =’ operator to unsubscribe:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">fileLister.Progress -= onProgress;</span><br></pre></td></tr></table></figure>
<p>Be sure to declare a local variable for the expression representing the event handler. This will ensure that the handler is unsubscribed. If the body of a lambda expression is used, an attempt will be made to delete the handler that was never attached, which is an invalid operation.</p>
<p>For more ways to use events, such as how to cancel the execution of events, you can see:<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/event-pattern">标准.NET事件模式</a>And<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/modern-events">新的事件模式</a></p>
<p>The new event mode mainly liberalizes the restrictions of event parameters, does not have to inherit from EventArgs, and pays attention to asynchronous event handlers</p>
<h1 id="Distinguish-between-delegates-and-events"><a href="#Distinguish-between-delegates-and-events" class="headerlink" title="Distinguish between delegates and events"></a>Distinguish between delegates and events</h1><p>They both provide a late binding scheme: in this scheme, components communicate by calling methods that are only recognized at runtime. They both support single and multiple subscriber methods. This is called unicast and multicast support. Both support similar syntax for adding and removing handlers. Finally, raising events and calling delegates use exactly the same method call syntax. They even both support the same’Invoke () ‘method syntax for use with the’?. ‘operator.</p>
<p>Given all these similarities, it can be difficult to determine which grammar to use when</p>
<h2 id="Listening-for-events-is-optional"><a href="#Listening-for-events-is-optional" class="headerlink" title="Listening for events is optional"></a>Listening for events is optional</h2><p>When determining which language features to use, the most important consideration is whether you must have additional subscribers. If your code must call code provided by the subscriber, you should use a delegate-based design when you need to implement callbacks. If your code can do all its work without calling any subscribers, you should use an event-based design.</p>
<p>Consider the examples generated in this section. A comparer function must be provided for code generated with List. Sort () to sort elements correctly. A LINQ query must be provided with a delegate to determine which elements to return. Both use the design generated with the delegate.</p>
<p>Consider the’Progress’ event. It reports the progress of the task. The task will continue with or without a listener. The’FileSearcher ‘is another example. It will still search and find all the files it has found, even if no event subscribers are attached. The UX controls work even if no subscribers are listening for events. They all use an event-based design.</p>
<h2 id="The-return-value-requires-delegation"><a href="#The-return-value-requires-delegation" class="headerlink" title="The return value requires delegation."></a>The return value requires delegation.</h2><p>Another note is the method prototypes required for delegate methods. As you can see, delegates used for events all have invalid return types. You also see that there is an idiom for creating event handlers that pass information back to the event source by modifying the properties of the event parameter object. While these idioms work, they are not as natural as returning values from methods.</p>
<p>Note that these two heuristic methods may often coexist: if the delegate method returns a value, it may affect the algorithm in some way.</p>
<h2 id="Event-has-a-dedicated-call"><a href="#Event-has-a-dedicated-call" class="headerlink" title="Event has a dedicated call"></a>Event has a dedicated call</h2><p>Classes other than the class containing the event can only add and remove event listeners; only the class containing the event can call the event. Events are usually public class members. In contrast, delegates are usually passed as arguments and stored as private class members (if they are all stored).</p>
<h2 id="Event-listeners-usually-have-a-longer-lifetime"><a href="#Event-listeners-usually-have-a-longer-lifetime" class="headerlink" title="Event listeners usually have a longer lifetime"></a>Event listeners usually have a longer lifetime</h2><p>The reason that event listeners generally have a longer lifetime is not very good. However, you may find that event-based design is more natural when the event source will raise events for a long period of time. Examples of event-based UX control design can be seen on many systems. After subscribing to an event, the event source may raise events for the entire lifetime of the program. (You can unsubscribe from events when they are no longer needed.)</p>
<p>Compare this to many delegate-based designs where the delegate is used as a parameter to a method and is no longer used after the method is returned.</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
  </entry>
  <entry>
    <title>Currying functions</title>
    <url>/en/posts/d56cb4fa/</url>
    <content><![CDATA[<p>Recently encountered a strange problem, achieve the following effect:</p>
<p>sum(2, 3).result = 5;</p>
<p>sum(2, 3)(4, 5).result = 14;</p>
<p>sum(1, 2)(3).result = 6;</p>
<p>This topic looks very strange, in fact, it is a function currying plus a brain teaser, here to record the idea of this topic, if you do not understand currying, after reading the introduction of currying, you can first think about how to achieve this effect, anyway, the author thought for half an hour to slow down the mind turned out to be so simple, in the final analysis, the theory is sufficient, but less knowledge.</p>
<span id="more"></span>
<h2 id="What-is-currying"><a href="#What-is-currying" class="headerlink" title="What is currying?"></a>What is currying?</h2><p>Currying is the transliteration of Currying. Currying is a technology that implements multi-parameter functions at the compile principle level. Currying - only passes a part of the parameters to the function to call it, and it returns a function to handle the remaining parameters…</p>
<p>Before talking about currying in JavaScript, let’s talk about what the original currying is and where it came from.</p>
<p>In the coding process, as coders, our essential job is to decompose complex problems into multiple programmable small problems.</p>
<p>Currying provides an implementation idea of recursion degradation for implementing multi-parameter functions - transforming a function that accepts multiple parameters into a function that accepts a single parameter (the first parameter of the original function), and returns a new function that accepts the remaining parameters and returns the result. In some programming languages (such as Haskell), the language feature of multi-parameter functions is supported through Currying technology.</p>
<p>For the JavaScript language, the concept of currying function that we usually talk about is not exactly the same as the concept of currying in mathematics and computer science.</p>
<p>Curried functions in mathematics and computer science can only pass one parameter at a time.</p>
<p>The curried function in our actual JavaScript application can pass one or more parameters.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//normal function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b,c,d,e</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d,e)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//generated curried function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _fn = <span class="title function_">curry</span>(fn);</span><br><span class="line"></span><br><span class="line"><span class="title function_">_fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);     <span class="comment">// print: 1,2,3,4,5</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">_fn</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);   <span class="comment">// print: 1,2,3,4,5</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">_fn</span>(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>,<span class="number">4</span>)(<span class="number">5</span>);   <span class="comment">// print: 1,2,3,4,5</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">_fn</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>); <span class="comment">// print: 1,2,3,4,5</span></span><br></pre></td></tr></table></figure>
<h2 id="Uses-of-currying"><a href="#Uses-of-currying" class="headerlink" title="Uses of currying"></a>Uses of currying</h2><h3 id="Parameters-to-reuse"><a href="#Parameters-to-reuse" class="headerlink" title="Parameters to reuse"></a>Parameters to reuse</h3><p>Currying actually complicates the problem of short answers, but at the same time, we have more freedom when using functions. And the free handling of function parameters here is the core of currying. Currying essentially reduces generality and improves applicability.</p>
<p>Its purpose can also be called parameter to reuse, which means that the parameters you pass in front will have an impact on the function generated later.</p>
<p>For example, if we don’t use currying to encapsulate the check function, it looks like this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkByRegExp</span>(<span class="params">regExp,string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> regExp.<span class="title function_">test</span>(string);  </span><br><span class="line">&#125;</span><br><span class="line">checkByRegExp (<span class="regexp">/^ 1\ d &#123;10&#125; $/</span>, <span class="string">&#x27;18642838455 &#x27;</span>); <span class="comment">// Verify phone number</span></span><br><span class="line"></span><br><span class="line">checkByRegExp (<span class="regexp">/^ (\ w) + (\.\ w +) * @(\ w )+((\.\ w +)+)$/</span>, <span class="string">&#x27; test@163.com &#x27;</span>); <span class="comment">// check mailbox</span></span><br></pre></td></tr></table></figure>
<p>Each number passed into this function has no effect on the following.</p>
<p>However, if the curried method is used:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Curried</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _check = <span class="title function_">curry</span>(checkByRegExp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Generate tool function to verify phone number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> checkCellPhone = <span class="title function_">_check</span>(<span class="regexp">/^1\d&#123;10&#125;$/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Generate tool function, verify mailbox</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> checkEmail = <span class="title function_">_check</span>(<span class="regexp">/^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/</span>);</span><br><span class="line"></span><br><span class="line">checkCellPhone (<span class="string">&#x27;18642838455 &#x27;</span>); <span class="comment">// Verify phone number</span></span><br><span class="line"></span><br><span class="line">checkCellPhone (<span class="string">&#x27;13109840560 &#x27;</span>); <span class="comment">// Verify phone number</span></span><br><span class="line"></span><br><span class="line">checkCellPhone (<span class="string">&#x27;13204061212 &#x27;</span>); <span class="comment">// Verify phone number</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">CheckEmail</span> (<span class="string">&#x27;test@163.com &#x27;</span>); <span class="comment">// Check mailbox</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">CheckEmail</span> (<span class="string">&#x27;test@qq.com &#x27;</span>); <span class="comment">// Check mailbox</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">CheckEmail</span> (<span class="string">&#x27;test@gmail.com &#x27;</span>); <span class="comment">// Check mailbox</span></span><br></pre></td></tr></table></figure>
<p>The Regular Expression you passed in earlier will have an impact on the subsequent calculation results.</p>
<h3 id="Delayed-execution"><a href="#Delayed-execution" class="headerlink" title="Delayed execution"></a>Delayed execution</h3><p>Deferred execution is also an important usage scenario for Currying. The delayed evaluation feature of Currying requires the use of scope in JavaScript - to put it more colloquially, we need to use scope to save the last passed parameter. Similarly, bind and arrow functions can also achieve the same function.</p>
<p>In front-end development, a common scenario is to bind onClick events to tags, while considering passing parameters to bound methods.</p>
<h2 id="Curried-tool-function"><a href="#Curried-tool-function" class="headerlink" title="Curried tool function"></a>Curried tool function</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Curry the function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn Original function to be curried</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span> len The number of parameters required, the default is the number of parameters of the original function</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn,len = fn.length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _curry.<span class="title function_">call</span>(<span class="variable language_">this</span>,fn,len)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transfer function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn Original function to be curried</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len Number of parameters required</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args List of received arguments</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_curry</span>(<span class="params">fn,len,...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...params</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> _args = [...args,...params];</span><br><span class="line">        <span class="keyword">if</span>(_args.<span class="property">length</span> &gt;= len)&#123;</span><br><span class="line">            <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,_args);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _curry.<span class="title function_">call</span>(<span class="variable language_">this</span>,fn,len,..._args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><h3 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">cur</span>) =&gt;</span> &#123;</span><br><span class="line">        result += cur;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tempresult</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">cur</span>) =&gt;</span> &#123;</span><br><span class="line">        result += cur;</span><br><span class="line">      &#125;);</span><br><span class="line">      tempresult.<span class="property">result</span> = result;</span><br><span class="line">      <span class="keyword">return</span> tempresult;</span><br><span class="line">    &#125;</span><br><span class="line">    tempresult.<span class="property">result</span> = result;</span><br><span class="line">    <span class="keyword">return</span> tempresult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Yes, this brain teaser is that function is also an object, just plug a result directly.</p>
<h2 id="Thunk-function-updated-on-2020-06-03"><a href="#Thunk-function-updated-on-2020-06-03" class="headerlink" title="Thunk function (updated on 2020.06.03)"></a>Thunk function (updated on 2020.06.03)</h2><p>Recently, when looking at the Generator function, I found that there is a function called Thunk function, which looks very similar to the curried function. Record it here. The main content comes from<a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html">阮一峰老师的博客</a>, with minor modifications and comments.</p>
<h3 id="Parameter-evaluation-strategy"><a href="#Parameter-evaluation-strategy" class="headerlink" title="Parameter evaluation strategy"></a>Parameter evaluation strategy</h3><p>Thunk functions have been around since the 1960s.</p>
<p>At that time, programming languages were just getting started, and computer scientists were still researching how to write compilers better. <strong> One point of contention is<a href="https://zh.wikipedia.org/wiki/求值策略">“求值策略”</a>, that is, when the parameters of the function should be evaluated. </strong></p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(x</span><br></pre></td></tr></table></figure>
</blockquote>
<p>The above code defines function f first, and then passes it the expression x + 5. Excuse me, when should this expression be evaluated?</p>
<p>One view was<a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value">“传值调用”</a>(Call by value), that is, before entering the function body, the value of x + 5 (equal to 6) is calculated, and then the value is passed to function f. C language adopts this strategy.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f</span>(x</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Another view was<a href="https://zh.wikipedia.org/wiki/求值策略#.E4.BC.A0.E5.90.8D.E8.B0.83.E7.94.A8_.28Call_by_name.29">“传名调用”</a>(Call by name), that is, pass the expression x + 5 directly to the function body and only evaluate it when it is used. The Hskell language adopts this strategy.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f</span>(x</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">(x</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong> Call by value or call by name, which is better? The answer is that each has its own advantages and disadvantages. </strong> Call by value is relatively simple, but when evaluating the parameter, this parameter has not actually been used, which may cause performance losses.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">3</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>In the above code, the first parameter of function f is a complex expression, but it is not used in the function body at all. Evaluating this parameter is actually unnecessary.</p>
<p>Therefore, some computer scientists prefer to “call by name”, that is, only evaluate at execution time.</p>
<h3 id="Thunk"><a href="#Thunk" class="headerlink" title="Thunk"></a>Thunk</h3><p>The “call by name” implementation of the compiler often puts the parameters into a temporary function, and then passes the temporary function to the function body. This temporary function is called a Thunk function.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(x</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>In the above code, the parameter x + 5 of function f is replaced by a function. Where the original parameter is used, just evaluate the Thunk function.</p>
<p><strong> This is the definition of a Thunk function, which is an implementation strategy of “call by name” to replace an expression. </strong></p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript language is called by value, and its Thunk function has a different meaning. <strong> In JavaScript language, Thunk function replaces not an expression, but a multi-parameter function, replacing it with a single-parameter version that only accepts a callback function as an argument. </strong></p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(fileName,</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"><span class="title function_">readFileThunk</span>(callback);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>In the above code, the readFile method of the fs module is a multi-parameter function with two parameters: the file name and the callback function. After the converter process, it becomes a single-parameter function that only accepts the callback function as a parameter. This single-parameter version is called Thunk function.</p>
<p>Any function, as long as the parameter has a callback function, can be written as a Thunk function. Here is a simple Thunk function converter.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Using the above converter, generate the Thunk function of fs.readFile.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line"><span class="title function_">readFileThunk</span>(fileA)(callback);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Thunkify"><a href="#Thunkify" class="headerlink" title="Thunkify"></a>Thunkify</h3><p>Converter for production environment, recommended use <a href="https://github.com/tj/node-thunkify">Thunkify 模块</a>。</p>
<p>First the installation.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Use as follows.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"><span class="title function_">read</span>(<span class="string">&#x27;package.json&#x27;</span>)(<span class="keyword">function</span>(<span class="params">err,</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">&#125;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Thunkified<a href="https://github.com/tj/node-thunkify/blob/master/index.js">源码</a>Very similar to the simple converter in the previous section.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Its source code mainly has an additional checking mechanism.<a href="http://segmentfault.com/q/1010000000524121">变量 called</a> Make sure that the callback function only runs once. This design is related to the Generator function below. See the example below.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"><span class="title function_">ft</span>(<span class="number">1</span>,</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>In the above code, since thunkify only allows the callback function to be executed once, only one line of result is output.</p>
<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>You may ask, what is the use of Thunk function? The answer is that it was really useless before, but ES6 has Generator function, and Thunk function can now be used for automatic Process management of Generator function.</p>
<p>Take reading a file as an example. The following Generator function encapsulates two asynchronous operations.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>In the above code, the yield command is used to move the execution right of the program out of the Generator function, so a way is needed to return the execution right to the Generator function.</p>
<p>This method is the Thunk function, because it can return the execution right to the Generator function in the callback function. For ease of understanding, let’s first look at how to manually execute the above Generator function.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">r1.<span class="title function_">value</span>(<span class="keyword">function</span>(<span class="params">err,</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">&#125;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>In the above code, the variable g is the internal pointer of the Generator function, indicating which step is currently executed. The next method is responsible for moving the pointer to the next step and returning the information of that step (value attribute and done attribute).</p>
<p>Looking closely at the above code, you can find that the execution process of the Generator function is actually passing the same callback function repeatedly into the value property of the next method. This allows us to use recursion to automate this process.</p>
<h3 id="Thunk-1"><a href="#Thunk-1" class="headerlink" title="Thunk"></a>Thunk</h3><p>The real power of the Thunk function is that it can automatically execute the Generator function. The following is a Generator actuator based on the Thunk function.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>(gen);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>The run function of the above code is an automatic executor of the Generator function. The internal next function is the callback function of Thunk. Next function first moves the pointer to the next step of the Generator function (gen.next method), and then determines whether the Generator function ends (result.done property). If it does not end, pass the next function to the Thunk function (result.value property), otherwise exit directly.</p>
<p>With this executor, executing the Generator function is much easier. No matter how many asynchronous operations there are, just pass in the run function directly. Of course, the premise is that each asynchronous operation must be a Thunk function, that is, the yield command must be followed by a Thunk function.</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>(gen);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>In the above code, function gen encapsulates n asynchronous read file operations, which will be automatically completed as long as the run function is executed. In this way, asynchronous operations can not only be written like synchronous operations, but also executed in one line of code.</p>
<p>Thunk function is not the only solution for automatic execution of Generator function. Because the key to automatic execution is that there must be a mechanism to automatically control the flow of Generator function, receive and return the execution rights of the program. The callback function can do this, and so can the Promise object.</p>
<h2 id="Encapsulating-duplicate-logic-with-curried-functions-2020-10-10-update"><a href="#Encapsulating-duplicate-logic-with-curried-functions-2020-10-10-update" class="headerlink" title="Encapsulating duplicate logic with curried functions (2020.10.10 update)"></a>Encapsulating duplicate logic with curried functions (2020.10.10 update)</h2><p>Recently read some vue source code, which for the platform judgment logic will be encapsulated in the curried function, through the incoming platform configuration, return a new function, so that each call to return the function can be omitted each time for the platform judgment.</p>
<p>This idea has been absorbed, coupled with recent work that requires encapsulating some utility classes for encapsulating CRUDs for specific datasets, such as user and userProfile.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createRepositoryUtilForModelProfile</span> = (<span class="params">mainModel, profileModel, foreignKey</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">selectSearchModels</span>(<span class="params">where</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> conditions = _.<span class="title function_">keys</span>(where);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; conditions.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mainModelKeys.<span class="title function_">indexOf</span>(conditions[i]) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">searchModel</span>: mainModel.<span class="property">name</span>,</span><br><span class="line">          <span class="attr">supplementModel</span>: profileModel.<span class="property">name</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">searchModel</span>: profileModel.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">supplementModel</span>: mainModel.<span class="property">name</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mainModelKeys = _.<span class="title function_">keys</span>(mainModel.<span class="property">properties</span>);</span><br><span class="line">  <span class="keyword">const</span> profileModelKeys = _.<span class="title function_">keys</span>(profileModel.<span class="property">properties</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> createUtil = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">data, operator</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> savedMain = <span class="keyword">await</span> <span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">model</span>: mainModel.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">data</span>: _.<span class="title function_">pick</span>(data, mainModelKeys),</span><br><span class="line">      operator &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> profile = <span class="keyword">await</span> <span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">model</span>: profileModel.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">data</span>: _.<span class="title function_">pick</span>(data, profileModelKeys),</span><br><span class="line">      operator</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _.<span class="title function_">merge</span>(savedMain, profile);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> findUtil = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">where, pageNumber, pageSize, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; searchModel, supplementModel &#125; = <span class="title function_">selectSearchModels</span>(where);</span><br><span class="line">    <span class="keyword">let</span> skip = _.<span class="title function_">toNumber</span>(pageNumber - <span class="number">1</span>) * _.<span class="title function_">toNumber</span>(pageSize);</span><br><span class="line">    <span class="keyword">let</span> mainList = <span class="keyword">await</span> <span class="title function_">find</span>(&#123;</span><br><span class="line">      <span class="attr">model</span>: searchModel,</span><br><span class="line">      where,</span><br><span class="line">      <span class="attr">skip</span>: skip &gt;= <span class="number">0</span> ? skip : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">limit</span>: _.<span class="title function_">toNumber</span>(pageSize),</span><br><span class="line">      fields</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; mainList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> supplement = <span class="keyword">await</span> <span class="title function_">findOne</span>(&#123;</span><br><span class="line">        <span class="attr">model</span>: supplementModel,</span><br><span class="line">        <span class="attr">where</span>: &#123; [<span class="string">`<span class="subst">$&#123;foreignKey&#125;</span>`</span>]: mainList[i][<span class="string">`<span class="subst">$&#123;foreignKey&#125;</span>`</span>] &#125;,</span><br><span class="line">        fields &#125;);</span><br><span class="line">      _.<span class="title function_">merge</span>(mainList[i], supplement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mainList;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> findOneUtil = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">where, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; searchModel, supplementModel &#125; = <span class="title function_">selectSearchModels</span>(where);</span><br><span class="line">    <span class="keyword">let</span> main = <span class="keyword">await</span> <span class="title function_">findOne</span>(&#123; <span class="attr">model</span>: searchModel, where, fields &#125;);</span><br><span class="line">    <span class="keyword">if</span> (main) &#123;</span><br><span class="line">      <span class="keyword">let</span> supplement = <span class="keyword">await</span> <span class="title function_">findOne</span>(&#123;</span><br><span class="line">        <span class="attr">model</span>: supplementModel,</span><br><span class="line">        <span class="attr">where</span>: &#123; [<span class="string">`<span class="subst">$&#123;foreignKey&#125;</span>`</span>]: main[<span class="string">`<span class="subst">$&#123;foreignKey&#125;</span>`</span>] &#125;,</span><br><span class="line">        fields &#125;);</span><br><span class="line">      <span class="keyword">return</span> _.<span class="title function_">merge</span>(main, supplement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> main;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> updateAllUtil = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> updated = <span class="keyword">await</span> <span class="title function_">updateAll</span>(&#123;</span><br><span class="line">      <span class="attr">model</span>: mainModel.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">where</span>: &#123; [<span class="string">`<span class="subst">$&#123;foreignKey&#125;</span>`</span>]: data[<span class="string">`<span class="subst">$&#123;foreignKey&#125;</span>`</span>] &#125;,</span><br><span class="line">      <span class="attr">data</span>: _.<span class="title function_">pick</span>(data, mainModelKeys)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> profile = <span class="keyword">await</span> <span class="title function_">updateAll</span>(&#123;</span><br><span class="line">      <span class="attr">model</span>: profileModel.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">where</span>: &#123; [<span class="string">`<span class="subst">$&#123;foreignKey&#125;</span>`</span>]: data[<span class="string">`<span class="subst">$&#123;foreignKey&#125;</span>`</span>] &#125;,</span><br><span class="line">      <span class="attr">data</span>: _.<span class="title function_">pick</span>(data, profileModelKeys)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(updated, profile);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    findUtil,</span><br><span class="line">    findOneUtil,</span><br><span class="line">    createUtil,</span><br><span class="line">    updateAllUtil</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Reference link:</p>
<p><a href="https://juejin.im/post/5af13664f265da0ba266efcf#heading-1">https://juejin.im/post/5af13664f265da0ba266efcf#heading-1</a></p>
<p><a href="https://juejin.im/post/5d2299faf265da1bb67a3b65">https://juejin.im/post/5d2299faf265da1bb67a3b65</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Development and Design of OAuth</title>
    <url>/en/posts/2b2971ba/</url>
    <content><![CDATA[<p>The Chinese name of OAuth is the Open Authorization Protocol. This name is carefully tested by everyone. It is an authorization protocol. <strong> Any website that implements this protocol can grant corresponding users to certain applications registered here under the conditions of user consent. Permission </strong> for certain resources on this website, and this permission is generally represented by token.</p>
<span id="more"></span>
<h2 id="Examples-of-practical-applications"><a href="#Examples-of-practical-applications" class="headerlink" title="Examples of practical applications"></a>Examples of practical applications</h2><p>When you go to leetcode to log in, the following page will pop up</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1586583310/Cloud/微信截图_20200411133437_kt05s5.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1586583310/Cloud/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200411133437_kt05s5.png"></p>
<p>Here we have two options, one is to register an account directly, and the other is to choose a third-party login, such as QQ login, which uses OAuth in the third-party login.</p>
<p>For this second method, a few points should be emphasized here:</p>
<ul>
<li><strong> The number of your accounts has not decreased at all, you still have both leetcode and qq accounts </strong>, but qq provides the OAuth protocol, you authorize leetcode to obtain your information in qq, leetcode uses this information To create your account in leetcode, your account in leetcode will not be stored in qq at all, which is a bit similar to the real life you need to take your ID card when you register an account in the relevant institution, this institution uses your ID card Go to the Public Security Bureau system to find your information, and then use this information to create your account in this institution. You give these institutions an ID card is similar to a process of authorizing it to go to the Public Security Bureau to manipulate your information.</li>
<li>The OAuth protocol is just an authorization protocol, and the above process is called <strong> third-party authorized login. The login action is not specified in the OAuth protocol, that is to say, OAuth alone cannot complete the set of authorized login actions </strong>, and OAuth is not only It is used for third-party login. Although we talk about OAuth most of the time with third-party authorized login, we need to break this limiting thinking.</li>
</ul>
<h2 id="The-development-process-of-landing-methods"><a href="#The-development-process-of-landing-methods" class="headerlink" title="The development process of landing methods"></a>The development process of landing methods</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1586584078/Cloud/微信截图_20200411134737_w5ftzj.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1586584078/Cloud/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200411134737_w5ftzj.png"></p>
<h3 id="Username-Password"><a href="#Username-Password" class="headerlink" title="Username Password"></a>Username Password</h3><p>At the beginning of our server-side rendering and static pages, we only authenticate through username and password, which is the basis of all authentication, and most of the future authentication methods are still based on this method.</p>
<p>This method is very useful at the beginning, the website first gives you a landing page, you log in successfully to return another page from the server, you get this page to show that you have been logged in, and your identity information has been returned before writing the page, but you can not see.</p>
<p>But the biggest problem with doing this is that once you close the page, the next time you open it, you have to log in again, which will have a poor User Experience. So we started to think of a way to save the user’s login status? So there is a second way, Session and Cookie.</p>
<h3 id="Session和Cookie"><a href="#Session和Cookie" class="headerlink" title="Session和Cookie"></a>Session和Cookie</h3><p>In this way, after the user successfully logs in for the first time, the user’s information will be saved in the session and stored in the server, and then a sessionId flag will be generated to mark the session and returned to the front end through the set-cookie header. In this way, due to the implementation decision of the browser, every same-origin request initiated will automatically bring the cookie under the source, which also brings the sessionId, so that each time the server only needs to check the cookie sessionId, verify its validity to find user information.</p>
<p>But this has a problem, the browser is very unreliable, basically the browser knows it is likely to know the whole world, here is recommended to take a closer look at the same origin policy, this thing is not as strict as imagined, recently I It has a few more cognitions:</p>
<ul>
<li>The same-origin policy generally only restricts requests such as XMLHttpRequest, such as Ajax. For requests made directly by the address bar, there is no restriction, and whether the request for Retargeting this request is restricted is still being explored.</li>
<li>Cross-domain write operations such as Form Submission, Retargeting, etc. are generally unrestricted</li>
<li>Cross-origin resource embedding is generally unlimited.</li>
<li>Cross-domain read operations are generally not allowed, but can be broken by the previous one, such as using the script tag to load scripts across domains</li>
<li>Scripts from different domains cannot operate on dom.</li>
</ul>
<p>Through the above cognition, we can find a more critical thing, the same origin policy of the browser is not limited to the direct request initiated by the src, and as long as the cookie under the same domain name as the link you requested will be automatically brought.</p>
<p>Here is a classic example, that is, if you go to the bank website to log in, the sessionid is stored in the cookie, before the cookie expires, you open an attacker’s website, there is an img tag, its src attribute is bank.com/tran/1000, that is, the meaning of the transfer of 1000 yuan, because it is src, so the browser will automatically initiate this request, although there is certainly no picture return, but the request has been issued, and will automatically bring the bank’s cookie that has not expired, because the browser sees that the address you requested is the bank, it will automatically help you bring it.</p>
<p>The above example is a relatively simple CSRF attack.</p>
<p>The main purpose of the above example is to show that <strong> cookies are not secure, even with the same origin policy </strong>.</p>
<p>And with the development of distributed systems, if you store identities in this way, you have to maintain a copy of the identity on each server and ensure its consistency.</p>
<p>Based on the above two reasons, we are thinking again, is there any way to throw the identity information back to the front end, so that every time the front end comes with the identity information, I can verify whether I granted it to him, and make this method safer? So, we came up with a Token. These are also two characteristics of a token, one is stored on the front end, and the other is generated by the server, which is generally not stored in cookies.</p>
<h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>Just now we said that Token is the proof of our identity generated by the server and stored on the front end, so how can we ensure its security? An older practice is if your page is server-side rendering, insert your token in each place where you need to submit a request before returning, so that this token can not be stored in a cookie, and cross-domain scripts cannot operate dom and cannot obtain your token.</p>
<p>But in this way, it seems to be back to the beginning. As soon as the page is closed, the token is gone, and the consumption is relatively large.</p>
<p>Another way is to put this token in the http header, which is the x-csrf header.</p>
<p>There are also many ways to use tokens, which are not the focus of this time, so I will not explain them in detail.</p>
<h3 id="SSO"><a href="#SSO" class="headerlink" title="SSO"></a>SSO</h3><p>When all the problems of our identity authentication have been better solved, there is a new problem, that is, with the increase of applications, we need to remember more and more accounts, we need a way to help us remember All accounts or only one account, the second way is SSO, which has a variety of implementation foundations, one of which is today’s topic OAuth.</p>
<p>Let’s define a few keywords before discussing this topic.</p>
<p>User: User</p>
<p>User Agent: User agent, such as a browser</p>
<p>Consumer: Information consumer, such as Leetcode</p>
<p>Service Provider: There are two types, namely Identity Provider (IDP), such as QQ, and Resource Provider (Resource Provider), but the two are generally the same.</p>
<p>Therefore:</p>
<ul>
<li>The emergence of SSO is not to solve some security or process problems on login, it is to help us remember some accounts, OAuth is just the basis of its implementation.</li>
<li>OAuth is only responsible for the user authorizing the consumer to manipulate some resources belonging to the user in the SP, but in SSO it is used to create an account in the consumer after the SP obtains user information, so that the next time as long as the user passes the authentication in the SP, it is equal to The consumer passed the authentication.</li>
<li>The user’s identity and permissions in the consumer have nothing to do with OAuth, it is a matter between the two, it has nothing to do with OAuth, and it has nothing to do with SSO. The authentication between them will return to the first three methods. SP does not care about or store the user’s identity or permissions in the consumer.</li>
<li>OAuth alone cannot complete the entire process of authorized login.</li>
</ul>
<h2 id="Take-a-practical-look-at-the-request-for-OAuth-during-the-SSO-process"><a href="#Take-a-practical-look-at-the-request-for-OAuth-during-the-SSO-process" class="headerlink" title="Take a practical look at the request for OAuth during the SSO process"></a>Take a practical look at the request for OAuth during the SSO process</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1586587044/Cloud/微信截图_20200411143642_a7kkr8.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1586587044/Cloud/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200411143642_a7kkr8.png"></p>
<p>This picture is the request I took to log in to the front end of leetcode with qq, which is roughly divided into the following steps:</p>
<ul>
<li>Go to the qq authentication server to pull the authorization page. The parameters include some parameters generated by the leetcode server for the next authorization request. Only with these parameters can it pass the verification of the qq authentication server and return the authorization page. At the same time, the authorization page needs to use these parameters for the next request</li>
<li>After selecting authorization, a second request will be sent, which includes some parameters defined in the OAuth protocol and parameters required by qq itself.</li>
<li>After the second request reaches qq, it is verified and returns a 302. Location is the redirect_uri in the second request parameter, and then splice the code and state generated by qq in the parameter.</li>
<li>After the browser receives the 302 return, it takes out the location again to send the request, so this location is generally its own background.</li>
<li>After receiving the request in the background, take out the code to QQ to exchange for the token.</li>
</ul>
<p><strong> OAuth protocol has done these things, so now do we have an account in leetcode? No </strong>, then leetcode will create a leetcode account after taking the token to qq to exchange for identity information</p>
<h2 id="Describe-some-details-of-the-OAuth2-0-design-in-authorization-code-mode"><a href="#Describe-some-details-of-the-OAuth2-0-design-in-authorization-code-mode" class="headerlink" title="Describe some details of the OAuth2.0 design in authorization code mode"></a>Describe some details of the OAuth2.0 design in authorization code mode</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608117974/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201216192144_wzrlgz.png" alt=""></p>
<p>The A request here is the first request just now, B is the second authorization request, C is the return of B, the status code is 302, and the location is redirect_uri? code = XXX &amp; state = XXX. After the browser receives it, re-request the location of C. The request goes to the leetcode background. After the background gets the code, it goes to qq to exchange the token with some parameters.</p>
<p>You may have a lot of questions here:</p>
<h3 id="What-do-these-parameters-represent"><a href="#What-do-these-parameters-represent" class="headerlink" title="What do these parameters represent?"></a>What do these parameters represent?</h3><p>redirect_uri: The domain name filled in by the consumer when the SP applies for a third-party authorized login service is generally the domain name of its own server.</p>
<p>client_id: The unique id of the consumer generated by SP after the consumer applies for third-party authorization to log in to the service.</p>
<p>client_secret: After the consumer applies for a third-party authorized login service in SP, the only certificate of the consumer generated by SP can prove that you are a consumer only if the id and secret are given at the same time.</p>
<p>Scope: The permission you want to apply for is generally specified by SP.</p>
<p>State: A random string, generated by the consumer itself</p>
<p>Code: The code returned by SP to the browser after user authorization, and the consumer can exchange this code for token.</p>
<p>access_token: the ultimate goal.</p>
<h3 id="Why-send-a-redirect-uri-to-the-IDP-in-the-first-place"><a href="#Why-send-a-redirect-uri-to-the-IDP-in-the-first-place" class="headerlink" title="Why send a redirect_uri to the IDP in the first place?"></a>Why send a redirect_uri to the IDP in the first place?</h3><p>The first time is to set the Location in the return 302 of the IDP, you can not verify whether it is set by the consumer. The second time is to verify whether the redirect_uri is set by you in the IDP at the beginning, and whether it is the same as the first time over. This step must be verified, because this step is the most critical, and this step will return the token.</p>
<h3 id="Why-go-around-such-a-big-circle-why-do-you-need-to-change-the-code-one-more-step-access-token"><a href="#Why-go-around-such-a-big-circle-why-do-you-need-to-change-the-code-one-more-step-access-token" class="headerlink" title="Why go around such a big circle, why do you need to change the code one more step access_token?"></a>Why go around such a big circle, why do you need to change the code one more step access_token?</h3><p>In the end, I still can’t trust the browser comrade, let him be a tool man, let it help my background to apply for an authorization code from a third party, and then give this authorization code to my background, and then my background uses this code to go to a third party Apply for a token, and don’t tell the browser what the token is when you’re done, you stay, that is to say, the browser comrade has never seen the token from beginning to end.</p>
<h3 id="What’s-the-use-of-secrets"><a href="#What’s-the-use-of-secrets" class="headerlink" title="What’s the use of secrets?"></a>What’s the use of secrets?</h3><p>The reason is that IDP does not believe anyone, so it believes the secret it gives itself. Because redirect_uri is a domain name, it still depends on the IP Address in the end. If the domain name is correct, but the domain name is pointed to by the attacker’s own IP, the attacker will receive the token. How to modify this DNS pointing involves DNS pollution, because DNS will be cached layer by layer, but there is time. If you keep broadcasting to tell the router or host that I am leetcode and I am leetcode, after a long time, you will be in this area. Network is considered leetcode. But if there is a secret, even if you bring the code to the IDP, without the secret I gave you, the IDP will not give the token. So client_id show who you are, only if you give client_secret, the IDP will believe what you say and give you the token, so this secret is very important, our background will not believe the browser comrade, so our browser comrade has never touched the secret from beginning to end.</p>
<h3 id="What-is-the-use-of-the-State"><a href="#What-is-the-use-of-the-State" class="headerlink" title="What is the use of the State?"></a>What is the use of the State?</h3><p>Similar to the defense CSRF, to ensure the consistency of the requesting device, but unlike the CSRF, which forges the victim’s request, but allows the victim to log in to his account. If the victim saves a Bitcoin account in it, wouldn’t it be beautiful? The specific implementation is that after the attacker logs in, he applies normally, but after returning to the IDP 302, he stops the request, prevents the browser from sending a request to his background, and then links the request with code to the victim. After the victim clicks in You can get the access_token successfully log in. If you don’t pay attention to whether this account is your own, you will upload sensitive information, which is very happy. If there is a state, different devices in the background generate a random string to the front end. Even if the attacker sends the request to the victim, he does not know the state in the victim’s device. When the background sees your state, it will directly throw away the request. Of course, it is absolutely necessary to say that the attacker stole your state from a certain request of the huge Internet. This is a fixed-point blasting. To deal with you, most of this person has already been mixed around you.</p>
<h3 id="Why-did-it-return-two-tokens-in-the-end"><a href="#Why-did-it-return-two-tokens-in-the-end" class="headerlink" title="Why did it return two tokens in the end?"></a>Why did it return two tokens in the end?</h3><p>Because one represents who you are, one represents what you can do, and the things you can do can be changed by the administrator at any time, but who you are is fixed, and generally access_token expiration time is relatively short. If I use it, it will expire. It can’t let the user log in again, isn’t it back to the starting point?</p>
<h2 id="Other-modes-in-OAuth2-0"><a href="#Other-modes-in-OAuth2-0" class="headerlink" title="Other modes in OAuth2.0"></a>Other modes in OAuth2.0</h2><h3 id="Simplified-mode"><a href="#Simplified-mode" class="headerlink" title="Simplified mode"></a>Simplified mode</h3><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608118806/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201216193951_hiq7je.png" alt=" "></p>
<p>This method is different from the authorization code mode. It is suitable for situations where there is no server side, such as mobile applications. The front end gets the token directly from the SP, but it should be noted that this token is not spelled like the code in the authorization code mode. After “?”, but after “#”, it can effectively reduce the risk of leaks.</p>
<h3 id="Password-mode"><a href="#Password-mode" class="headerlink" title="Password mode"></a>Password mode</h3><p>In Resource Owner Password Credentials Grant, users provide their username and password to the client. The client uses this information to request authorization from the “service provider”.</p>
<p>In this mode, the user must give their password to the client, but the client must not store the password. This is usually used in situations where the user has a high level of trust in the client, such as when the client is part of the operating system, or produced by a well-known company. The authentication server can only consider using this mode if other authorization modes cannot be implemented.</p>
<h3 id="Client-mode"><a href="#Client-mode" class="headerlink" title="Client mode"></a>Client mode</h3><p>Client mode (Client Credentials Grant) means that the Client authenticates to the “service provider” in its own name, not in the name of the user. Strictly speaking, Client mode does not belong to the problem to be solved by the OAuth framework. In this mode, the user registers directly with the Client, and the Client requires the “service provider” to provide services in his own name, but there is no authorization problem.</p>
<h2 id="OAuth1-0"><a href="#OAuth1-0" class="headerlink" title="OAuth1.0"></a>OAuth1.0</h2><p>A brief introduction to 1.0 and why it developed into 2.0</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608119884/origin-of-ray/微信截图_20201216195014_gz6sjt.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608119884/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201216195014_gz6sjt.png"></p>
<p>The biggest difference is more AB two steps, that is, 1.0 will first go to SP to apply for an uncertified state of the request_token (can be compared to 2.0 code), the next purpose is to change the request_token into a certified state, and then you can take this request_token to change access_token.</p>
<p>Adding this step will cause problems, such as<a href="https://sunra.top/posts/44fbc7d1/">会话固定</a></p>
<p>There is for mobile phones or Client applications, Retargeting this step is not achieved, can only throw a connection to allow users to open their own browser paste into the next step. This will give the attacker a great opportunity.</p>
<p>It can be seen from this that version 1.0 has great security problems, and the experience is relatively poor for non-web applications, so 2.0 was launched.</p>
<p>For example, the simplified mode of 2.0 is to adapt to Client applications, and those who are interested can learn about it themselves.</p>
<h3 id="1-0a"><a href="#1-0a" class="headerlink" title="1.0a"></a>1.0a</h3><p>In order to fix the security issues in 1.0, 1.0a was proposed, and he mainly made the following changes:</p>
<ul>
<li><p>When a Consumer applies for a Request Token, it must pass the <strong> oauth </strong> _callback, while when a Consumer applies for an Access Token, it does not need to pass the <strong> oauth </strong> _callback. By passing the time of the pre <strong> oauth </strong> _callback, let the <strong> oauth </strong> _callback participate in the signature, so as to prevent the attacker from impersonating the <strong> oauth </strong> _callback.</p>
</li>
<li><p>After the Service Provider obtains the authorization of the User, when Retargeting the User to the Consumer, it returns <strong> oauth </strong> _verifier, which will be used in the process of the Consumer applying for an Access Token. Attackers cannot guess its value.</p>
</li>
</ul>
<p>Reference materials:</p>
<p><a href="https://sunra.top/posts/46cef286/">https://sunra.top/2019/11/16/OAuth%20and%20OIDC/</a> ：OAuth，OIDC简介</p>
<p><a href="https://sunra.top/posts/74ee5df7/">https://sunra.top/posts/74ee5df7/</a>: Routing Protocol</p>
<p><a href="https://sunra.top/posts/dfdf7442/">https://sunra.top/posts/dfdf7442/</a>: ARP Principle and Defense</p>
<p><a href="https://www.jianshu.com/p/0db71eb445c8">https://www.jianshu.com/p/0db71eb445c8</a>: Examples of OAuth Authentication Processes</p>
<p><a href="https://www.chrisyue.com/security-issue-about-oauth-2-0-you-should-know.html">https://www.chrisyue.com/security-issue-about-oauth-2-0-you-should-know.html</a>: Security Considerations in OAuth2.0</p>
<p><a href="https://www.cnblogs.com/linianhui/p/openid-connect-core.html">https://www.cnblogs.com/linianhui/p/openid-connect-core.html</a>: OIDC doc</p>
<p><a href="https://www.zhihu.com/question/19851243">https://www.zhihu.com/question/19851243</a>: Difference between OAuth1.0 and 2.0</p>
<p><a href="https://docs.azure.cn/zh-cn/active-directory/azuread-dev/v1-protocols-openid-connect-code">https://docs.azure.cn/zh-cn/active-directory/azuread-dev/v1-protocols-openid-connect-code</a> ：OIDC + AAD</p>
<p><a href="https://www.sciencedirect.com/science/article/pii/S2215098617316750">https://www.sciencedirect.com/science/article/pii/S2215098617316750</a>: Security Issues in Cloud as a Service</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a>: Same Origin Strategy</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>Dynamic Programming</title>
    <url>/en/posts/a80d0031/</url>
    <content><![CDATA[<p>Recently, I encountered recursion when I was doing the question. I vaguely felt that it was a bit similar to the motion gauge, but I couldn’t explain it clearly, so I found a lot of articles. Here is an excerpt of the most basic but also the most clear article. The original link is<a href="https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/">这个</a>。</p>
<h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>The general form of Dynamic Programming problem is to find the best value. Dynamic Programming is actually an optimization method of operations research, but it is more used in computer problems, such as asking you to find the longest increasing sequence, the minimum editing distance, and so on.</p>
<p>Since it requires the most value, what is the core problem? The core problem of solving Dynamic Programming is exhaustion. Because the most value is required, you must exhaust all feasible answers and then find the most value among them.</p>
<p>Dynamic Programming is so simple, is it exhaustive? The Dynamic Programming problems I see are all very difficult!</p>
<p>First of all, the exhaustion of Dynamic Programming is a bit special, because there are “overlapping sub-problems” in this type of problem, and the efficiency will be extremely low if the brute force exhaustion is used, so “memo” or “DP table” is needed to optimize the exhaustion process and avoid unnecessary computation.</p>
<span id="more"></span>
<p>Moreover, the Dynamic Programming problem must have an “optimal substructure” in order to pass the most value of the subproblem to the most value of the original problem.</p>
<p>In addition, although the core idea of Dynamic Programming is to exhaust the maximum value, the problem can be ever-changing, and it is not an easy task to exhaust all feasible solutions. Only by listing the correct “state transition equation” can we correctly exhaust it.</p>
<p>The overlapping subproblems, optimal substructures, and state transition equations mentioned above are Dynamic Programming Three-factor Verification. What exactly it means will be explained in detail with examples, but in actual algorithm problems, writing state transition equations is the most difficult, which is why many friends find Dynamic Programming problems difficult. Let me provide a thinking framework I have researched to help you think about state transition equations:</p>
<p>Clear “state” - &gt; define the meaning of dp array/function - &gt; clear “selection” - &gt; clear base case.</p>
<p>The following explains the basic principles of Dynamic Programming through the Fibonacci sequence problem and the change problem. The former is mainly to let you understand what an overlapping subproblem is (Fibonacci sequence is not strictly a Dynamic Programming problem), and the latter mainly focuses on how to list state transition equations.</p>
<p>Readers are asked not to dismiss the simplicity of this example. Only simple examples can allow you to fully focus on the general ideas and techniques behind the algorithm, without being confused by those obscure details. For difficult examples, there are historical articles.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Fibonacci-sequence"><a href="#Fibonacci-sequence" class="headerlink" title="Fibonacci sequence"></a>Fibonacci sequence</h3><p>1 The recursion of violence</p>
<p>The mathematical form of the Fibonacci sequence is recursion, written in code like this:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N  <span class="number">1</span> || N  <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fib</span>(N - <span class="number">1</span>) + <span class="built_in">fib</span>(N - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Needless to say, school teachers seem to use this example when they talk about recursion. We also know that writing code like this is concise and easy to understand, but it is very inefficient. Where is the inefficiency? Assuming n = 20, please draw a recursion tree.</p>
<p>PS: Whenever you encounter a problem that requires recursion, it is best to draw a recursion tree, which will be of great help to you in analyzing the complexity of the algorithm and finding the reasons for the inefficiency of the algorithm.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608033289/origin-of-ray/微信截图_20201215195409_kdnd5s.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608033289/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215195409_kdnd5s.png"></p>
<p>How to understand this recursion tree? That is to say, if I want to calculate the original problem f (20), I have to first calculate the sub-problems f (19) and f (18), and then to calculate f (19), I have to first calculate the sub-problems f (18) and f (17), and so on. When you finally encounter f (1) or f (2), the result is known, and you can return the result directly, and the recursion tree will no longer grow downward.</p>
<p>How to calculate the time complexity of recursion algorithm? The number of subproblems multiplied by the time required to solve a subproblem.</p>
<p>The number of subproblems, that is, the total number of nodes in the recursion tree. Obviously, the total number of binary tree nodes is exponential, so the number of subproblems is O (2 ^ n).</p>
<p>The time to solve a subproblem, in this algorithm, there are no loops, only f (n - 1) + f (n - 2) an addition operation, and the time is O (1).</p>
<p>So, the time complexity of this algorithm is O (2 ^ n), exponential level, explosion.</p>
<p>Observing the recursion tree, it is obvious to find the reason for the inefficiency of the algorithm: there are a lot of repeated calculations, such as f (18) being calculated twice, and you can see that the recursion tree with f (18) as the root is huge, It will take a lot of time to calculate it again. What’s more, it’s not just the node f (18) that is repeatedly calculated, so this algorithm is extremely inefficient.</p>
<p>This is the first property of the Dynamic Programming problem: the overlapping subproblem. Below, we find a way to solve this problem.</p>
<ol>
<li>Recursion solution with memo</li>
</ol>
<p>If you clarify the problem, you have already solved half of the problem. Since the reason for the time-consuming is repeated calculation, then we can make a “memo” and don’t rush to return after calculating the answer to a certain sub-problem every time, write it down in the “memo” and then return; every time you encounter a sub-problem, go to the “memo” first Check it out. If you find that the problem has been solved before, take out the answer directly and use it instead of spending time calculating.</p>
<p>Usually an array is used as this “memo”, of course you can also use a hash table (dictionary), the idea is the same.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//Memo is all initialized to 0</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">memo</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">//initialize the simplest case</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">helper</span>(memo, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">helper</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; memo, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case </span></span><br><span class="line">    <span class="keyword">if</span> (n  <span class="number">1</span> || n  <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//already calculated</span></span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">    memo[n] = <span class="built_in">helper</span>(memo, n - <span class="number">1</span>) + </span><br><span class="line">                <span class="built_in">helper</span>(memo, n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, draw the recursion tree and you’ll know what the memo does.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608033688/origin-of-ray/微信截图_20201215200116_wqfxvd.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1608033688/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201215200116_wqfxvd.png"></p>
<p>In fact, the recursion algorithm with “memo” transforms a recursion tree with huge redundancy into a recursion graph without redundancy by “pruning”, which greatly reduces the number of sub-problems (that is, nodes in the recursion graph).</p>
<p>How to calculate the time complexity of the recursion algorithm? Multiply the number of subproblems by the time required to solve a subproblem.</p>
<p>The number of sub-problems, that is, the total number of nodes in the graph, since there is no redundant calculation in this algorithm, the sub-problems are f (1), f (2), f (3)… f (20), and the number is proportional to the input scale n = 20, so the number of sub-problems is O (n).</p>
<p>The time to solve a subproblem, as above, there is no loop, and the time is O (1).</p>
<p>Therefore, the time complexity of this algorithm is O (n). Compared with the brute force algorithm, it is a dimensionality reduction blow.</p>
<p>At this point, the efficiency of the recursion solution with memos is the same as that of the iterative Dynamic Programming solution. In fact, this solution is almost the same as the iterative Dynamic Programming solution, but this method is called “top-down” and Dynamic Programming is called “bottom-up”.</p>
<p>What is “top-down”? Note that the recursion tree (or graph) we just drew extends from top to bottom, starting from a large-scale original problem such as f (20), gradually decomposing the scale downward, Until f (1) and f (2) reach the bottom, and then return the answer layer by layer, this is called “top-down”.</p>
<p>What is “bottom-up”? In turn, we directly start from the bottom, the simplest, and the smallest problem size f (1) and f (2), and push up until we reach the answer f (20) we want. This is the idea of Dynamic Programming, which is why Dynamic Programming generally deviates from recursion, but completes the calculation by loop iteration.</p>
<ol>
<li>Iterative solution of dp array</li>
</ol>
<p>With the inspiration of the previous “memo”, we can separate this “memo” into a table, called DP table, on this table to complete the “bottom-up” calculation is not beautiful!</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">1</span>] = dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= N; i++)</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> dp[N];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1585361138/Algorithm/1b4485704cf963fd49d597040ffbb3b5d4d2ca923752c8c78d00042df66343a9_zzg5tk.jpg" alt=""></p>
<p>Drawing a picture is easy to understand, and you find that this DP table is very similar to the result after the “pruning” before, but the other way around. In fact, the “memo” in the recursion solution with memos is the DP table after the final completion, so the two solutions are actually similar, and in most cases, the efficiency is basically the same.</p>
<p>Here, the term “state transition equation” is introduced, which is actually a mathematical form describing the structure of the problem:</p>
<p>f(n) = 1, n = 1, 2</p>
<p>f(n) = f(n -1) + f(n -2), n &gt;2</p>
<p>Why is it called the “state transition equation”? To sound high-end. You think of f (n) as a state n, which is transferred from the addition of state n - 1 and state n - 2, which is called state transition, nothing more.</p>
<p>You will find that all operations in the above several solutions, such as return f (n - 1) + f (n - 2), dp [i] = dp [i - 1] + dp [i - 2], and The initialization operation of the memo or DP table revolves around different representations of this equation. You can see the importance of listing the “state transition equation”, which is the core of solving the problem. It is easy to find that in fact, the state transition equation directly represents a brute force solution.</p>
<p>Never look down on the brute force solution. The most difficult thing about Dynamic Programming problems is to write the state transition equation, that is, the brute force solution. The optimization method is nothing more than using memos or DP tables, and there is no mystery at all.</p>
<p>At the end of this example, let’s talk about a detailed optimization. Careful readers will find that according to the state transition equation of the Fibonacci sequence, the current state is only related to the previous two states. In fact, it is not necessary to have such a long DP table to store all the states, just find a way to store the previous two states. Therefore, it can be further optimized to reduce the space complexity to O (1):</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n  <span class="number">2</span> || n  <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> prev = <span class="number">1</span>, curr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> sum = prev + curr;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Some people may ask, why is another important feature of Dynamic Programming, “optimal substructure”, not covered? It will be covered below. The Fibonacci sequence example is not strictly Dynamic Programming, because it does not involve finding the maximum value. The above is intended to demonstrate the process of spiraling up algorithm design. Next, look at the second example, the change problem.</p>
<h3 id="Change-problem"><a href="#Change-problem" class="headerlink" title="Change problem"></a>Change problem</h3><p>Let’s take a look at the question first: Give you k kinds of coins with face value, the face value is c1, c2… ck, the number of each coin is unlimited, then give a total amount amount, and ask you how many coins you need at least to make up this amount, if it is impossible to make up, the algorithm returns -1. The function signature of the algorithm is as follows:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//coins is the optional coin face value, amount is the target amount</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span></span>;</span><br></pre></td></tr></table></figure>
<p>For example, k = 3, the face value is 1, 2, and 5 respectively, and the total amount = 11. Then at least 3 coins are needed to make up, that is, 11 = 5 + 5 + 1.</p>
<p>How do you think computers should solve this problem? Obviously, it is to exhaust all possible methods of coin collection, and then find out how many coins are needed at least.</p>
<p>1 The recursion of violence</p>
<p>First of all, this problem is a Dynamic Programming problem because it has an “optimal substructure”. To meet the “optimal substructure”, the subproblems must be independent of each other. What does independence mean? You definitely don’t want to see a mathematical proof, I’ll use an intuitive example to explain.</p>
<p>For example, your original question is to get the highest total score, then your sub-question is to get the highest Chinese test and the highest math test… In order to get the highest score in each class, you have to get the highest score for the corresponding multiple-choice questions in each class, and the highest score for fill-in-the-blank questions… Of course, in the end, you will get full marks in each class, which is the highest total score.</p>
<p>The correct result is obtained: the highest total score is the total score. Because this process conforms to the optimal substructure, the sub-problems of “highest in each subject” are independent of each other and do not interfere with each other.</p>
<p>However, if you add a condition: your Chinese score and math score will restrict each other, and the other will increase. In this case, it is obvious that the highest total score you can get will not reach the total score, and you will get the wrong result according to the idea just now. Because the sub-problems are not independent, the Chinese and math scores cannot be optimal at the same time, so the optimal substructure is destroyed.</p>
<p>Back to the coin-making problem, why is it said to conform to the optimal substructure? For example, if you want to find the minimum number of coins when amount = 11 (the original problem), if you know the minimum number of coins (the sub-problem) to make up amount = 10, you only need to add one to the answer to the sub-problem (choose another coin with a face value of 1) is the answer to the original problem, because the number of coins is unlimited, and there is no reciprocity between sub-problems, they are independent of each other.</p>
<p>So, now that you know this is a Dynamic Programming problem, you need to think about how to list the correct state transition equations?</p>
<p>First, determine the “state”, which is the variable that changes in the original problem and sub-problems. Since the number of coins is unlimited, the only state is the target amount.</p>
<p>Then determine the definition of the dp function: the current target amount is n, and at least dp (n) coins are required to make up the amount.</p>
<p>Then determine the “choice” and select the best, that is, for each state, what choice can be made to change the current state. Specific to this problem, no matter what the target amount is, the choice is to select a coin from the denomination list coins, and the target amount will be reduced:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pseudo-code framework</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>):</span><br><span class="line">    Definition <span class="comment"># : To make up an amount of n, at least dp (n) coins are required</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="comment">#  make a choice, choose the outcome that requires the least amount of coins</span></span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            res = <span class="built_in">min</span> (res, <span class="number">1</span> + dp (n - corner))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment">#  the question we are asking is dp (amount)</span></span><br><span class="line">    <span class="keyword">return</span> dp(amount)</span><br></pre></td></tr></table></figure>
<p>Finally, clear the base case, obviously when the target amount is 0, the number of coins required is 0; when the target amount is less than 0, no solution, return -1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="comment"># base case</span></span><br><span class="line">        <span class="keyword">if</span> n  <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>: <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="comment">#  minimum, so initialize to positive infinity</span></span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">            subproblem = dp(n - coin)</span><br><span class="line">            <span class="comment">#  unsolved sub-problem, skip</span></span><br><span class="line">            <span class="keyword">if</span> subproblem  -<span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="number">1</span> + subproblem)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> res != <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp(amount)</span><br></pre></td></tr></table></figure>
<p>At this point, the state transition equation has actually been completed, the above algorithm is already a violent solution, and the mathematical form of the above code is the state transition equation:</p>
<p>dp(n) = 0, n = 0</p>
<p>dp(n) = -1, n &lt; 0</p>
<p>dp(n) = min{dp(n - coin) + 1 | coin ∈ coins}, n &gt; 0    </p>
<p>At this point, this problem is actually solved, but we need to eliminate the overlapping sub-problem. For example, when amount = 11, coins = {1,2,5}, draw a recursion tree to see:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1585361160/Algorithm/7db5a80dbffaf2337c0e0323437442d007987bce16b7fa86affbc5ca0e1132d0_vctecf.jpg" alt=""></p>
<p>Time complexity analysis: total number of sub-problems x the time of each sub-problem.</p>
<p>The total number of subproblems is the number of recursion tree nodes, which is difficult to see. It is O (n ^ k), which is exponential in short. Each subproblem contains a for loop with complexity O (k). So the total time complexity is O (k * n ^ k), exponential.</p>
<ol>
<li>Recursion with memo</li>
</ol>
<p>With just a few modifications, you can eliminate sub-problems through memos.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment">#  memo</span></span><br><span class="line">    memo = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="comment">#  check memos to avoid double counting</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> memo: <span class="keyword">return</span> memo[n]</span><br><span class="line">        <span class="keyword">if</span> n  <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> n &lt; <span class="number">0</span>: <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            res = <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">                subproblem = dp(n - coin)</span><br><span class="line">                <span class="keyword">if</span> subproblem  -<span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="number">1</span> + subproblem)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#  in the memo</span></span><br><span class="line">            memo[n] = res <span class="keyword">if</span> res != <span class="built_in">float</span>(<span class="string">&#x27;INF&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> memo[n]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> dp(amount)</span><br></pre></td></tr></table></figure>
<p>Without drawing the picture, it is obvious that the “memo” greatly reduces the number of sub-problems and completely eliminates the redundancy of sub-problems, so the total number of sub-problems will not exceed the number of amounts n, that is, the number of sub-problems is O (n). The time to process a sub-problem remains the same, still O (k), so the total time complexity is O (kn).</p>
<ol>
<li>Iterative solution of dp array</li>
</ol>
<p>Of course, we can also use dp table from bottom to top to eliminate overlapping sub-problems. The definition of dp array is similar to that of dp function just now, and the definition is the same:</p>
<p>DP [i] = x means that at least x coins are needed when the target amount is i.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//The array size is amount + 1, and the initial value is also amount + 1.</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, amount + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">//the inner for is finding the minimum value of + 1 for all subproblems</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">            <span class="comment">//The sub-problem is unsolved, skip it.</span></span><br><span class="line">            <span class="keyword">if</span> (i - coin &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i], <span class="number">1</span> + dp[i - coin]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (dp[amount]  amount + <span class="number">1</span>) ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1585361182/Algorithm/b4e6cf1bb8e2284bfc01dfef6c1a60c19f9c78238061b65370ccc01822161e83_qgnjw5.jpg" alt=""></p>
<p>PS: Why is the dp array initialized to amount + 1, because the number of coins that make up the amount can only be equal to amount at most (all 1 yuan face value coins), so initializing to amount + 1 is equivalent to initializing to positive infinity, which is convenient for subsequent Take the minimum value.</p>
<h2 id="Final-summary"><a href="#Final-summary" class="headerlink" title="Final summary"></a>Final summary</h2><p>The first Fibonacci sequence problem explained how to optimize recursion trees using the “memo” or “dp table” method, and made it clear that these two methods are essentially the same, only top-down and bottom-up It’s just different.</p>
<p>The second change problem shows how to determine the “state transition equation” in a streamlined manner. As long as the violent recursion solution is written through the state transition equation, the rest is to optimize the recursion tree and eliminate overlapping sub-problems.</p>
<p>If you don’t know much about Dynamic Programming, you can still see it here. I really applaud you. I believe you have mastered the design skills of this algorithm.</p>
<p>In fact, there is no magic trick for computers to solve problems. Its only solution is to exhaust all possibilities. Algorithm design is nothing more than thinking about “how to exhaust” first, and then pursuing “how to exhaust intelligently”.</p>
<p>To list the dynamic transfer equations was to solve the problem of “how to exhaust”. The reason why it was difficult was because many exhaustions required recursion, and because some problems had complex solution spaces, it was not easy to exhaust them completely.</p>
<p>Memos and DP tables are pursuing “how to exhaust intelligently”. The idea of exchanging space for time is the only way to reduce the complexity of time. In addition, what else can you do?</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Proxy 与 Vue</title>
    <url>/en/posts/e5782665/</url>
    <content><![CDATA[<p>You Yuxi delivered a keynote speech titled “Vue 3.0 Updates”, elaborating on the update plan and direction of “Vue 3.0” (interested partners can take a look at the complete <strong><a href="https://docs.google.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit#slide=id.p">PPT</a></strong>), indicating that the use of’Object.defineProperty ‘has been abandoned in favor of the faster native <strong>‘ Proxy ‘</strong>!!</p>
<p>This removes many of the limitations of the previous Vue2.x implementation based on Object.defineProperty: the inability to listen for property additions and deletions, array index and length changes, and support for Map, Set, WeakMap, and WeakSet!</p>
<span id="more"></span>
<h2 id="Proxy-Introduction"><a href="#Proxy-Introduction" class="headerlink" title="Proxy Introduction"></a>Proxy Introduction</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Proxy is used to modify the default behavior of certain operations, which is equivalent to making modifications at the language level, so it belongs to a kind of “meta programming”, that is, programming in programming languages.</p>
<p>Proxy can be understood as setting up a layer of “interception” before the target object. Access to the object from the outside world must first pass through this layer of interception, so it provides a mechanism to filter and rewrite the access from the outside world. The original meaning of the word proxy is proxy, which is used here to mean that it “proxies” certain operations, which can be translated as “proxy”.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span> (&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, propKey, value, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, propKey, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The above code sets up a layer of interception on an empty object, redefining the behavior of reading (‘get’) and setting (‘set’) properties. The specific syntax will not be explained here for the time being, just look at the running result. Read and write the properties of the object’obj ‘with the interception behavior, and you will get the following result.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">count</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">//  setting count!</span></span><br><span class="line">++obj.<span class="property">count</span></span><br><span class="line"><span class="comment">//  getting count!</span></span><br><span class="line"><span class="comment">//  setting count!</span></span><br><span class="line"><span class="comment">//  2</span></span><br></pre></td></tr></table></figure>
<p>The above code shows that the proxy actually overloads the dot operator, that is, overwrites the original definition of the language with its own definition.</p>
<p>ES6 natively provides the Proxy constructor function to generate Proxy instances.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>
<p>All uses of Proxy objects are in the above form, the only difference is the writing of the’handler ‘parameter. Among them,’ new Proxy () ‘means to generate a’Proxy’ instance, ‘target’ parameter means the target object to be intercepted, and’handler ‘parameter is also an object used to customize the interception behavior.</p>
<p>Here is another example of intercepting read property behavior.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">time</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">title</span> <span class="comment">// 35</span></span><br></pre></td></tr></table></figure>
<p>In the above code, as a constructor function, ‘Proxy’ accepts two parameters. The first parameter is the target object to be proxied (the above example is an empty object), that is, if there is no intervention of’Proxy ‘, the object that the operation originally wants to access; the second parameter is a configuration object. For each proxied operation, a corresponding processing function needs to be provided, which will intercept the corresponding operation. For example, in the above code, the configuration object has a’get’ method to intercept access requests to target object properties. The two arguments to the’get ‘method are the target object and the property to be accessed. As you can see, since the intercepting function always returns’ 35 ‘, accessing any property will result in’ 35 ‘.</p>
<p>Note that for’Proxy ‘to work, you must operate on the’Proxy’ instance (the’proxy ‘object in the above example), not on the target object (the empty object in the above example).</p>
<p>If the’handler ‘does not set any interceptions, it is equivalent to going directly to the original object.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line">proxy.<span class="property">a</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">target.<span class="property">a</span> <span class="comment">// &quot;b&quot;</span></span><br></pre></td></tr></table></figure>
<p>In the above code, ‘handler’ is an empty object, without any interception effect, accessing’proxy ‘is equivalent to accessing’target’.</p>
<p>One trick is to set the Proxy object to the’object.proxy ‘property, so that it can be called on the’object’ object.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123; <span class="attr">proxy</span>: <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler) &#125;;</span><br></pre></td></tr></table></figure>
<p>Proxy instances can also serve as prototype objects for other objects.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proxy);</span><br><span class="line">obj.<span class="property">time</span> <span class="comment">// 35</span></span><br></pre></td></tr></table></figure>
<p>In the above code, the’proxy ‘object is the prototype of the’obj’ object. The’obj ‘object itself does not have the’time’ property, so according to the prototype chain, the property will be read on the’proxy ‘object, resulting in interception.</p>
<p>The same interceptor function can be set to intercept multiple operations.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name = <span class="string">&#x27;prototype&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + name;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">apply</span>: <span class="keyword">function</span>(<span class="params">target, thisBinding, args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">construct</span>: <span class="keyword">function</span>(<span class="params">target, args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">value</span>: args[<span class="number">1</span>]&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fproxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;, handler);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fproxy</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">fproxy</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// &#123;value: 2&#125;</span></span><br><span class="line">fproxy.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br><span class="line">fproxy.<span class="property">foo</span> = <span class="string">&quot;Hello, foo&quot;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>For operations that can be set, but do not set interception, they fall directly on the target object and produce results in the original way.</p>
<p>Below is a list of interception operations supported by Proxy, a total of 13.</p>
<ul>
<li><strong> get (target, propKey, receiver) </strong>: Intercepts the reading of object properties, such as’ proxy.foo ‘and’proxy [‘ foo ‘]’.</li>
<li><strong> set (target, propKey, value, receiver) </strong>: Intercepts the setting of object properties, such as’ proxy.foo = v ‘or’proxy [‘ foo ‘] = v’, and returns a boolean value.</li>
<li><strong> has (target, propKey) </strong>: Intercepts the operation of’propKey in proxy ‘and returns a boolean value.</li>
<li><strong> deleteProperty (target, propKey) </strong>: Intercepts the operation of’delete proxy [propKey] ‘and returns a boolean value.</li>
<li><strong> ownKeys (target) </strong>: Intercept’Object.getOwnPropertyNames (proxy) ‘,’ Object.getOwnPropertySymbols (proxy) ‘,’ Object.keys (proxy) ‘,’ for… in ‘loops, returning an array. This method returns the property names of all the properties of the target object itself, while the return result of’Object.keys () ‘ only includes the traversable properties of the target object itself.</li>
<li><strong> getOwnPropertyDescriptor (target, propKey) </strong>: Intercept Object.getOwnPropertyDescriptor (proxy, propKey) and return the description object of the property.</li>
<li><strong> defineProperty (target, propKey, propDesc) </strong>: Intercept’Object.defineProperty (proxy, propKey, propDesc) ‘,’ Object.defineProperties (proxy, propDescs) ‘, return a boolean value.</li>
<li><strong> preventExtensions (target) </strong>: Intercept’Object.preventExtensions (proxy) ‘and return a boolean value.</li>
<li><strong> getPrototypeOf (target) </strong>: Intercept Object.getPrototypeOf (proxy) and return an object.</li>
<li><strong> isExtensible (target) </strong>: Intercept’Object.isExtensible (proxy) ‘and return a boolean value.</li>
<li><strong> setPrototypeOf (target, proto) </strong>: Intercepts’Object.setPrototypeOf (proxy, proto) ‘, returns a boolean value. If the target object is a function, there are two additional operations that can be intercepted.</li>
<li><strong> apply (target, object, args) </strong>: Intercepts the operation of the proxy instance as a function call, such as’proxy (… args) ‘,’ proxy.call (object,… args) ‘,’ proxy.apply (…) ‘.</li>
<li><strong> construct (target, args) </strong>: Intercepts operations called by Proxy instances as constructor functions, such as’new proxy (… args) ‘.</li>
</ul>
<h3 id="Advanced-usage"><a href="#Advanced-usage" class="headerlink" title="Advanced usage"></a>Advanced usage</h3><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>By using Proxy, the operation of reading properties (‘get’) can be transformed into executing a function, thereby realizing the chain operation of properties.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pipe = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> funcStack = [];</span><br><span class="line">  <span class="keyword">var</span> oproxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125; , &#123;</span><br><span class="line">    get : <span class="keyword">function</span> (<span class="params">pipeObject, fnName</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fnName = <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> funcStack.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">val, fn</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">fn</span>(val);</span><br><span class="line">        &#125;,value);</span><br><span class="line">      &#125;</span><br><span class="line">      funcStack.<span class="title function_">push</span>(<span class="variable language_">window</span>[fnName]);</span><br><span class="line">      <span class="keyword">return</span> oproxy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oproxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">double</span> = n =&gt; n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">pow</span>    = n =&gt; n * n;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">reverseInt</span> = n =&gt; n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) | <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">pipe</span>(<span class="number">3</span>).<span class="property">double</span>.<span class="property">pow</span>.<span class="property">reverseInt</span>.<span class="property">get</span>; <span class="comment">// 63</span></span><br></pre></td></tr></table></figure>
<p>After the above code sets Proxy, the effect of chaining the function name is achieved.</p>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>Sometimes, we will set internal properties on the object. The first character of the property name starts with an underscore, indicating that these properties should not be used externally. Combining the’get ‘and’set’ methods can prevent these internal properties from being read and written externally.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  get (target, key) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&#x27;get&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> target[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  set (target, key, value) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&#x27;set&#x27;</span>);</span><br><span class="line">    target[key] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invariant</span> (key, action) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] = <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private &quot;<span class="subst">$&#123;key&#125;</span>&quot; property`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line">proxy.<span class="property">_prop</span></span><br><span class="line"><span class="comment">// Error: Invalid attempt to get private &quot;_prop&quot; property</span></span><br><span class="line">proxy.<span class="property">_prop</span> = <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="comment">// Error: Invalid attempt to set private &quot;_prop&quot; property</span></span><br></pre></td></tr></table></figure>
<p>In the above code, as long as the first character of the property name read and write is an underscore, it will be thrown wrong, so as to achieve the purpose of prohibiting reading and writing internal properties.</p>
<h4 id="has"><a href="#has" class="headerlink" title="has"></a>has</h4><p>The’has’ method is used to intercept the’HasProperty ‘operation, that is, it will take effect when determining whether an object has a certain property. A typical operation is the’in’ operator.</p>
<p>The’has’ method can accept two parameters, namely the target object and the property name to be queried.</p>
<p>The following example uses the has method to hide certain properties from the in operator.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  has (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] = <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="attr">prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="string">&#x27;_prop&#x27;</span> <span class="keyword">in</span> proxy <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>In the above code, if the first character of the property name of the original object is an underscore, ‘proxy.has’ will return’false ‘, so it will not be detected by the’in’ operator.</p>
<p>If the original object is not configurable or prohibits expansion, ‘has’ interception will report an error.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">10</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">has</span>: <span class="keyword">function</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> p <span class="comment">// TypeError is thrown</span></span><br></pre></td></tr></table></figure>
<p>In the above code, the’obj ‘object prohibits expansion, and as a result, using the’has’ interception will report an error. That is, if a property is not configurable (or the target object is not extensible), the’has’ method must not “hide” (i.e. return’false ‘) the property of the target object.</p>
<p>It is worth noting that the “has” method intercepts the “HasProperty” operation, not the “HasOwnProperty” operation, that is, the “has” method does not determine whether a property is a property of the object itself or an inherited property.</p>
<h2 id="Use-of-Proxy-in-Vue"><a href="#Use-of-Proxy-in-Vue" class="headerlink" title="Use of Proxy in Vue"></a>Use of Proxy in Vue</h2><h3 id="vue2-x"><a href="#vue2-x" class="headerlink" title="vue2.x"></a>vue2.x</h3><p>Recursion traverses the data in the data, using <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a>Hijack getters and setters, do data dependency collection processing in getters, and in setters, listen for changes in data and notify the place that subscribes to the current data. <a href="https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L156-L193">部分源码 src/core/observer/index.js#L156-L193</a>, the version is 2.6.11 as follows</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(val)</span><br><span class="line"> <span class="comment">//Perform a deep traversal of the data in the data, adding a response to each property of the object</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> <span class="title function_">reactiveGetter</span> () &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">         <span class="comment">//do dependency collection</span></span><br><span class="line">        dep.<span class="title function_">depend</span>()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">          <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">            <span class="title class_">If</span> it is an array, you need to perform dependency collection on each member. <span class="title class_">If</span> the members <span class="keyword">of</span> the array are still arrays, then recursion.</span><br><span class="line">            <span class="title function_">dependArray</span>(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> <span class="title function_">reactiveSetter</span> (newVal) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (newVal = value || (newVal ! newVal &amp;&amp; value ! value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> ! <span class="string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class="line">        <span class="title function_">customSetter</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (getter &amp;&amp; !setter) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.<span class="title function_">call</span>(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//The new value needs to be observed again to ensure that the data is responsive</span></span><br><span class="line">      childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(newVal)</span><br><span class="line">      <span class="title class_">Notify</span> all observers <span class="keyword">of</span> data changes</span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>What’s wrong with doing this?</p>
<ul>
<li>Undetectable addition and deletion of object properties: When you add a new property’newProperty ‘to an object, the newly added property does not have a mechanism for vue to detect data updates (because it is added after initialization).’ vue. $set ‘lets vue know that you have added a property, and it will handle it for you.’ $set ‘is also handled internally by calling’Object.defineProperty () ‘</li>
<li>Unable to monitor the change of the index of the array, resulting in setting the value of the array directly through the index of the array, and cannot respond in real time.</li>
<li>When there is a lot of data in the data and the hierarchy is very deep, there will be performance issues, because it is necessary to traverse all the data in the data and set it to be responsive.</li>
</ul>
<h3 id="vue3-0"><a href="#vue3-0" class="headerlink" title="vue3.0"></a>vue3.0</h3><p>Vue3.0 has not been officially released yet, but<a href="https://github.com/vuejs/vue-next">vue-next</a> The relevant code has been open sourced and is currently in an alpha version.</p>
<p>Why use Proxy to solve the above problems? Mainly because Proxy is an interception object, an “interception” is performed on the “object”, and external access to the object must first pass this layer of interception. No matter what properties of the access object, previously defined or newly added, it will go to interception,</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Here is a simple data response using Object.defineProperty () and Proxy respectively</p>
<p>Use Object.defineProperty () to implement:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">//traverse the properties of the parameter data, add it to this</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(data)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> data[key] = <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                data[key] = <span class="keyword">new</span> <span class="title class_">Observer</span>(data[key]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">                <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;you visited&#x27;</span> + key);</span><br><span class="line">                    <span class="title class_">Return</span> data [key];<span class="comment">//The bracketed method can use variables as attribute names, while the dot method cannot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">                    <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;You set&#x27;</span> + key);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新的&#x27;</span> + key + <span class="string">&#x27;=&#x27;</span> + newVal);</span><br><span class="line">                    <span class="keyword">if</span>(newVal = data[key]) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    data[key] = newVal;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Observer</span>(obj);</span><br><span class="line">app.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">age</span>);</span><br><span class="line">app.<span class="property">newPropKey</span> = <span class="string">&#x27;New property&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">newPropKey</span>);</span><br></pre></td></tr></table></figure>
<p>The execution result of the above code is</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Modify the output of the original attribute age of obj</span></span><br><span class="line"><span class="title class_">You</span> set the age</span><br><span class="line"><span class="title class_">New</span> age = <span class="number">20</span></span><br><span class="line"><span class="title class_">You</span> visited the age</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="comment">//Set the output of the new property</span></span><br><span class="line"><span class="title class_">New</span> properties</span><br></pre></td></tr></table></figure>
<p>As you can see, adding a property to an object is not monitored internally. The newly added property needs to be manually monitored again using’Object.defineProperty () ‘. This is why the addition and deletion of object properties cannot be detected in’vue 2.x’. The ‘$set’ provided internally is handled by calling’Object.defineProperty () ‘.</p>
<p>Next we use’Proxy ‘instead of’Object.defineProperty () ‘ implementation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;You visited&#x27;</span> + propKey);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, propKey, value, receiver</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;You set&#x27;</span> + propKey);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新的&#x27;</span> + propKey + <span class="string">&#x27;=&#x27;</span> + value);</span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, propKey, value, receiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="property">age</span> = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">age</span>);</span><br><span class="line">P.<span class="property">newPropKey</span> = <span class="string">&#x27;New property&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">newPropKey</span>);</span><br><span class="line">P.<span class="property">a</span>.<span class="property">d</span> = <span class="string">&#x27;This is an attribute of a in obj&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">a</span>.<span class="property">d</span>);</span><br><span class="line"><span class="title class_">Copy</span> the code</span><br></pre></td></tr></table></figure>
<p>You can see the output below</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Modify the age attribute of the original object</span></span><br><span class="line"><span class="title class_">You</span> set the age</span><br><span class="line"><span class="title class_">New</span> age = <span class="number">20</span></span><br><span class="line"><span class="title class_">You</span> visited the age</span><br><span class="line"><span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set new properties</span></span><br><span class="line"><span class="title class_">You</span> set up newPropKey</span><br><span class="line"><span class="title class_">New</span> newPropKey = <span class="keyword">new</span> property</span><br><span class="line"><span class="title class_">You</span> accessed newPropKey</span><br><span class="line"><span class="title class_">New</span> properties</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set property d for the a property of obj (which is an object)</span></span><br><span class="line"><span class="title class_">You</span> visited a</span><br><span class="line"><span class="title class_">You</span> visited a</span><br><span class="line"><span class="title class_">This</span> is the property <span class="keyword">of</span> a <span class="keyword">in</span> obj</span><br></pre></td></tr></table></figure>
<p>Reference article:</p>
<p><a href="https://es6.ruanyifeng.com/#docs/proxy">https://es6.ruanyifeng.com/#docs/proxy</a></p>
<p><a href="https://juejin.im/post/5e69ee2be51d4527196d6a24">https://juejin.im/post/5e69ee2be51d4527196d6a24</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>fetch-event-source source code parsing</title>
    <url>/en/posts/8b781825/</url>
    <content><![CDATA[<p>We all know that the interface of ChatGPT supports data return by streaming SSE, and the front-end browser provides EventSource by default to receive SSE, but the problem is that the default EventSource only supports Get requests, and does not support any custom headers. The interface of ChatGPT is a POST request, and it is necessary to carry a token in the header, so a Microsoft library is used. Let’s explain its usage, source code, and the basis for its source code to run from a protocol perspective, that is, why its source code can work</p>
<span id="more"></span>
<h1 id="Method-of-use"><a href="#Method-of-use" class="headerlink" title="Method of use"></a>Method of use</h1><p>A library using Microsoft Azure fetch-event-sourcec<br>GitHub Address <a href="https://github.com/Azure/fetch-event-source">https://github.com/Azure/fetch-event-source</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装命令</span> </span><br><span class="line">npm install --save @microsoft/fetch-event-sourcec</span><br></pre></td></tr></table></figure>
<p>Here is the sample code</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test frontend SSE call</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchEventSource &#125; <span class="keyword">from</span> <span class="string">&#x27;@microsoft/fetch-event-source&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">testSSE</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_API_KEY</span> = <span class="string">&#x27;YOUR_OPENAI_API_KEY&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_COMPLETION_ENDPOINT</span> = <span class="string">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> requestData = &#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class="line">    <span class="attr">messages</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="title class_">Content</span>: <span class="string">&#x27;I want to travel to Xi&#x27;</span>an <span class="keyword">for</span> <span class="number">7</span> days<span class="string">&#x27;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    stream: true</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  let respString = &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">  fetchEventSource(OPENAI_COMPLETION_ENDPOINT, &#123;</span></span><br><span class="line"><span class="string">    method: &#x27;</span><span class="variable constant_">POST</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    headers: &#123;</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="title class_">Content</span>-<span class="title class_">Type</span><span class="string">&#x27;: &#x27;</span>application/json<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="title class_">Authorization</span><span class="string">&#x27;: `Bearer $&#123;OPENAI_API_KEY&#125;`,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    body: JSON.stringify(requestData),</span></span><br><span class="line"><span class="string">    async onopen(response) &#123;</span></span><br><span class="line"><span class="string">      if (response.ok &amp;&amp; response.headers.get(&#x27;</span>content-type<span class="string">&#x27;) = &#x27;</span>text/event-stream<span class="string">&#x27;) &#123;</span></span><br><span class="line"><span class="string">        // everything&#x27;</span>s good</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;everything\&#x27;s good&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">400</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">500</span> &amp;&amp; response.<span class="property">status</span> ! <span class="number">429</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Request error&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Other errors&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onmessage</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">//indicates the end of the whole</span></span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">data</span> = <span class="string">&#x27;[DONE]&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>)</span><br><span class="line">      <span class="comment">//if equal to stop means end</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">finish_reason</span> = <span class="string">&#x27;stop&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//Determine if the role exists and exclude it.</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> ! <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString = jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> + <span class="string">&#x27;: &#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span> ! <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString += jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(respString)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onerror</span>(<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onclose</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// if the server closes the connection unexpectedly, retry:</span></span><br><span class="line">      <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Close connection&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title class_">Console</span>.<span class="property">log</span> (<span class="string">&#x27;Test SSE&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Source-code-parsing"><a href="#Source-code-parsing" class="headerlink" title="Source code parsing"></a>Source code parsing</h1><p>Its source code is not much, mainly two problems, one is parse.js, one is fetch.js</p>
<p>Parse.js is a tool function, let’s take a look at what it does</p>
<p>First, a few internal functions</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a message sent in an event stream</span></span><br><span class="line"><span class="comment"> * https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">/** The event ID to set the EventSource object&#x27;s last event ID value. */</span></span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** A string identifying the type of event described. */</span></span><br><span class="line">    <span class="attr">event</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The event data */</span></span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The reconnection interval (in milliseconds) to wait before retrying the connection */</span></span><br><span class="line">    retry?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">concat</span>(<span class="params">a: <span class="built_in">Uint8Array</span>, b: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(a.<span class="property">length</span> + b.<span class="property">length</span>);</span><br><span class="line">    res.<span class="title function_">set</span>(a);</span><br><span class="line">    res.<span class="title function_">set</span>(b, a.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newMessage</span>(<span class="params"></span>): <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">// data, event, and id must be initialized to empty strings:</span></span><br><span class="line">    <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">    <span class="comment">// retry should be initialized to undefined so we return a consistent shape</span></span><br><span class="line">    <span class="comment">// to the js engine all the time: https://mathiasbynens.be/notes/shapes-ics#takeaways</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">retry</span>: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ControlChars</span> &#123;</span><br><span class="line">    <span class="title class_">NewLine</span> = <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">CarriageReturn</span> = <span class="number">13</span>,</span><br><span class="line">    <span class="title class_">Space</span> = <span class="number">32</span>,</span><br><span class="line">    <span class="title class_">Colon</span> = <span class="number">58</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then there are several exposed functions, which we will use later in fetch.</p>
<p>The three functions cooperate with each other. getBytes is responsible for converting readablestream into bytes chunk, and getLines converts byte chunk into eventsource buffer, which is then converted by getMessage into data of type EventSourceMessage</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a ReadableStream into a callback pattern.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stream The input ReadableStream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onChunk A function that will be called on each new byte chunk in the stream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;void&gt;</span>&#125; A promise that will be resolved when the stream closes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBytes</span>(<span class="params">stream: ReadableStream&lt;<span class="built_in">Uint8Array</span>&gt;, onChunk: (arr: <span class="built_in">Uint8Array</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = stream.<span class="title function_">getReader</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">ReadableStreamDefaultReadResult</span>&lt;<span class="title class_">Uint8Array</span>&gt;;</span><br><span class="line">    <span class="keyword">while</span> (!(result = <span class="keyword">await</span> reader.<span class="title function_">read</span>()).<span class="property">done</span>) &#123;</span><br><span class="line">        <span class="title function_">onChunk</span>(result.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses arbitary byte chunks into EventSource line buffers.</span></span><br><span class="line"><span class="comment"> * Each line should be of the format &quot;field: value&quot; and ends with \r, \n, or \r\n. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onLine A function that will be called on each new EventSource line.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming byte chunk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getLines</span>(<span class="params">onLine: (line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">buffer</span>: <span class="title class_">Uint8Array</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">position</span>: <span class="built_in">number</span>; <span class="comment">// current read position</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">fieldLength</span>: <span class="built_in">number</span>; <span class="comment">// length of the `field` portion of the line</span></span><br><span class="line">    <span class="keyword">let</span> discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming byte chunk:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onChunk</span>(<span class="params">arr: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer = <span class="literal">undefined</span>) &#123;</span><br><span class="line">            buffer = arr;</span><br><span class="line">            position = <span class="number">0</span>;</span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// we&#x27;re still parsing the old line. Append the new bytes into buffer:</span></span><br><span class="line">            buffer = <span class="title function_">concat</span>(buffer, arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> bufLength = buffer.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">let</span> lineStart = <span class="number">0</span>; <span class="comment">// index where the current line starts</span></span><br><span class="line">        <span class="keyword">while</span> (position &lt; bufLength) &#123;</span><br><span class="line">            <span class="keyword">if</span> (discardTrailingNewline) &#123;</span><br><span class="line">                <span class="keyword">if</span> (buffer[position] = <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>) &#123;</span><br><span class="line">                    lineStart = ++position; <span class="comment">// skip to next char</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// start looking forward till the end of line:</span></span><br><span class="line">            <span class="keyword">let</span> lineEnd = -<span class="number">1</span>; <span class="comment">// index of the \r or \n char</span></span><br><span class="line">            <span class="keyword">for</span> (; position &lt; bufLength &amp;&amp; lineEnd = -<span class="number">1</span>; ++position) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (buffer[position]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">Colon</span>:</span><br><span class="line">                        <span class="keyword">if</span> (fieldLength = -<span class="number">1</span>) &#123; <span class="comment">// first colon in line</span></span><br><span class="line">                            fieldLength = position - lineStart;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// @ts-ignore:7029 \r case below should fallthrough to \n:</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">CarriageReturn</span>:</span><br><span class="line">                        discardTrailingNewline = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>:</span><br><span class="line">                        lineEnd = position;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lineEnd = -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// We reached the end of the buffer but the line hasn&#x27;t ended.</span></span><br><span class="line">                <span class="comment">// Wait for the next arr and then continue parsing:</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we&#x27;ve reached the line end, send it out:</span></span><br><span class="line">            <span class="title function_">onLine</span>(buffer.<span class="title function_">subarray</span>(lineStart, lineEnd), fieldLength);</span><br><span class="line">            lineStart = position; <span class="comment">// we&#x27;re now on the next line</span></span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lineStart = bufLength) &#123;</span><br><span class="line">            buffer = <span class="literal">undefined</span>; <span class="comment">// we&#x27;ve finished reading it</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lineStart ! <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Create a new view into buffer beginning at lineStart so we don&#x27;t</span></span><br><span class="line">            <span class="comment">// need to copy over the previous lines when we get the new arr:</span></span><br><span class="line">            buffer = buffer.<span class="title function_">subarray</span>(lineStart);</span><br><span class="line">            position -= lineStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses line buffers into EventSourceMessages.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onId A function that will be called on each `id` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onRetry A function that will be called on each `retry` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onMessage A function that will be called on each message.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming line buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getMessages</span>(<span class="params"></span></span><br><span class="line"><span class="params">    onId: (id: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onRetry: (retry: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onMessage?: (msg: EventSourceMessage) =&gt; <span class="built_in">void</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="title function_">newMessage</span>();</span><br><span class="line">    <span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming line buffer:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onLine</span>(<span class="params">line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.<span class="property">length</span> = <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// empty line denotes end of message. Trigger the callback and start a new message:</span></span><br><span class="line">            onMessage?.(message);</span><br><span class="line">            message = <span class="title function_">newMessage</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldLength &gt; <span class="number">0</span>) &#123; <span class="comment">// exclude comments and lines with no values</span></span><br><span class="line">            <span class="comment">// line is of format &quot;&lt;field&gt;:&lt;value&gt;&quot; or &quot;&lt;field&gt;: &lt;value&gt;&quot;</span></span><br><span class="line">            <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">            <span class="keyword">const</span> field = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(<span class="number">0</span>, fieldLength));</span><br><span class="line">            <span class="keyword">const</span> valueOffset = fieldLength + (line[fieldLength + <span class="number">1</span>] = <span class="title class_">ControlChars</span>.<span class="property">Space</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">const</span> value = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(valueOffset));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (field) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;data&#x27;</span>:</span><br><span class="line">                    <span class="comment">// if this message already has data, append the new value to the old.</span></span><br><span class="line">                    <span class="comment">// otherwise, just set to the new value:</span></span><br><span class="line">                    message.<span class="property">data</span> = message.<span class="property">data</span></span><br><span class="line">                        ? message.<span class="property">data</span> + <span class="string">&#x27;\n&#x27;</span> + value</span><br><span class="line">                        : value; <span class="comment">// otherwise, </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;event&#x27;</span>:</span><br><span class="line">                    message.<span class="property">event</span> = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;id&#x27;</span>:</span><br><span class="line">                    <span class="title function_">onId</span>(message.<span class="property">id</span> = value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;retry&#x27;</span>:</span><br><span class="line">                    <span class="keyword">const</span> retry = <span class="built_in">parseInt</span>(value, <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(retry)) &#123; <span class="comment">// per spec, ignore non-integers</span></span><br><span class="line">                        <span class="title function_">onRetry</span>(message.<span class="property">retry</span> = retry);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then there is the highlight, fetch.ts, in fact, the content of this file is relatively simple</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EventSourceMessage</span>, getBytes, getLines, getMessages &#125; <span class="keyword">from</span> <span class="string">&#x27;./parse&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventStreamContentType</span> = <span class="string">&#x27;text/event-stream&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DefaultRetryInterval</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LastEventId</span> = <span class="string">&#x27;last-event-id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">FetchEventSourceInit</span> <span class="keyword">extends</span> <span class="title class_">RequestInit</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The request headers. FetchEventSource only supports the Record&lt;string,string&gt; format.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    headers?: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response is received. Use this to validate that the response</span></span><br><span class="line"><span class="comment">     * actually matches what you expect (and throw if it doesn&#x27;t.) If not provided,</span></span><br><span class="line"><span class="comment">     * will default to a basic validation to ensure the content-type is text/event-stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onopen?: <span class="function">(<span class="params">response: Response</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a message is received. <span class="doctag">NOTE:</span> Unlike the default browser</span></span><br><span class="line"><span class="comment">     * EventSource.onmessage, this callback is called for _all_ events,</span></span><br><span class="line"><span class="comment">     * even ones with a custom `event` field.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onmessage?: <span class="function">(<span class="params">ev: EventSourceMessage</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response finishes. If you don&#x27;t expect the server to kill</span></span><br><span class="line"><span class="comment">     * the connection, you can throw an exception here and retry using onerror.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onclose?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when there is any error making the request / processing messages /</span></span><br><span class="line"><span class="comment">     * handling callbacks etc. Use this to control the retry strategy: if the</span></span><br><span class="line"><span class="comment">     * error is fatal, rethrow the error inside the callback to stop the entire</span></span><br><span class="line"><span class="comment">     * operation. Otherwise, you can return an interval (in milliseconds) after</span></span><br><span class="line"><span class="comment">     * which the request will automatically retry (with the last-event-id).</span></span><br><span class="line"><span class="comment">     * If this callback is not specified, or it returns undefined, fetchEventSource</span></span><br><span class="line"><span class="comment">     * will treat every error as retriable and will try again after 1 second.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onerror?: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">void</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If true, will keep the request open even if the document is hidden.</span></span><br><span class="line"><span class="comment">     * By default, fetchEventSource will close the request and reopen it</span></span><br><span class="line"><span class="comment">     * automatically when the document becomes visible again.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    openWhenHidden?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The Fetch function to use. Defaults to window.fetch */</span></span><br><span class="line">    fetch?: <span class="keyword">typeof</span> fetch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchEventSource</span>(<span class="params">input: RequestInfo, &#123;</span></span><br><span class="line"><span class="params">    signal: inputSignal,</span></span><br><span class="line"><span class="params">    headers: inputHeaders,</span></span><br><span class="line"><span class="params">    onopen: inputOnOpen,</span></span><br><span class="line"><span class="params">    onmessage,</span></span><br><span class="line"><span class="params">    onclose,</span></span><br><span class="line"><span class="params">    onerror,</span></span><br><span class="line"><span class="params">    openWhenHidden,</span></span><br><span class="line"><span class="params">    fetch: inputFetch,</span></span><br><span class="line"><span class="params">    ...rest</span></span><br><span class="line"><span class="params">&#125;: FetchEventSourceInit</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// make a copy of the input headers since we may modify it below:</span></span><br><span class="line">        <span class="keyword">const</span> headers = &#123; ...inputHeaders &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!headers.<span class="property">accept</span>) &#123;</span><br><span class="line">            headers.<span class="property">accept</span> = <span class="title class_">EventStreamContentType</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">curRequestController</span>: <span class="title class_">AbortController</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">onVisibilityChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>(); <span class="comment">// close existing request on every visibility change</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">                <span class="title function_">create</span>(); <span class="comment">// page is now visible again, recreate request.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!openWhenHidden) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> retryInterval = <span class="title class_">DefaultRetryInterval</span>;</span><br><span class="line">        <span class="keyword">let</span> retryTimer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if the incoming signal aborts, dispose resources and resolve:</span></span><br><span class="line">        inputSignal?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">dispose</span>();</span><br><span class="line">            <span class="title function_">resolve</span>(); <span class="comment">// don&#x27;t waste time constructing/logging errors</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> fetch = inputFetch ?? <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line">        <span class="keyword">const</span> onopen = inputOnOpen ?? defaultOnOpen;</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(input, &#123;</span><br><span class="line">                    ...rest,</span><br><span class="line">                    headers,</span><br><span class="line">                    <span class="attr">signal</span>: curRequestController.<span class="property">signal</span>,</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">onopen</span>(response);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">getBytes</span>(response.<span class="property">body</span>!, <span class="title function_">getLines</span>(<span class="title function_">getMessages</span>(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">                        <span class="comment">// store the id and send it back on the next retry:</span></span><br><span class="line">                        headers[<span class="title class_">LastEventId</span>] = id;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// don&#x27;t send the last-event-id header anymore:</span></span><br><span class="line">                        <span class="keyword">delete</span> headers[<span class="title class_">LastEventId</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="function"><span class="params">retry</span> =&gt;</span> &#123;</span><br><span class="line">                    retryInterval = retry;</span><br><span class="line">                &#125;, onmessage)));</span><br><span class="line"></span><br><span class="line">                onclose?.();</span><br><span class="line">                <span class="title function_">dispose</span>();</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!curRequestController.<span class="property">signal</span>.<span class="property">aborted</span>) &#123;</span><br><span class="line">                    <span class="comment">// if we haven&#x27;t aborted the request ourselves:</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// check if we need to retry:</span></span><br><span class="line">                        <span class="keyword">const</span> <span class="attr">interval</span>: <span class="built_in">any</span> = onerror?.(err) ?? retryInterval;</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">                        retryTimer = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(create, interval);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (innerErr) &#123;</span><br><span class="line">                        <span class="comment">// we should not retry anymore:</span></span><br><span class="line">                        <span class="title function_">dispose</span>();</span><br><span class="line">                        <span class="title function_">reject</span>(innerErr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">create</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultOnOpen</span>(<span class="params">response: Response</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> contentType = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!contentType?.<span class="title function_">startsWith</span>(<span class="title class_">EventStreamContentType</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected content-type to be <span class="subst">$&#123;EventStreamContentType&#125;</span>, Actual: <span class="subst">$&#123;contentType&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This code has some other processing, such as automatic retry, such as closing the request when the page is inactive, and re-creating a new request when it re-enters the active state.</p>
<p>But the core function is to establish a connection through the fetch interface, and then continue to accept response.body through the getBytes method, and then continue to parse ByteFlow into the message form of EventSource through getLines and getMessage.</p>
<h1 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h1><p>This code looks very simple, but the question is, why can it be written like this, that is, there are two problems:</p>
<ul>
<li>Why fetch api can build links to SSE</li>
<li>Why can the response.body of the fetch api be continuously parsed, instead of the common form of a json object</li>
<li>Why getMessage can say line buffer parses correctly</li>
</ul>
<p>First of all, to put it simply, SSE is still based on HTTP in nature, so connections can be established through HTTP requests<br>Second, because the data format returned by our usual API interface is’application/json ‘, and the format returned by the sse interface is’text/event-stream’, response.body is actually a readableStream, so it can continuously transmit data back.<br>The third point, because this is stipulated in the agreement, according to the agreement, this is the agreement: <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation">https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</a>, you can also see this article: <a href="https://www.cnblogs.com/goloving/p/9196066.html">https://www.cnblogs.com/goloving/p/9196066.html</a></p>
<p>Then there is a new question that can be raised here, why SSE returns can be a stream, that is, why HTTP can support stream output:</p>
<p>In fact, the answer is very simple: HTTP is already supported, but the common restful api we used before is a short connection. After obtaining the json data at one time, the connection is directly closed, which makes us forget that HTTP can support continuous return of data.</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
  </entry>
  <entry>
    <title>Basic concepts of flex layout</title>
    <url>/en/posts/40806/</url>
    <content><![CDATA[<p>The traditional solution to layout, based on the box model, relies on the display property + position property + float property. It is very inconvenient for those special layouts, for example, vertical centering is not easy to implement. In 2009, the W3C proposed a new scheme, Flex Layout, which can implement various page layouts simply, completely, and responsively. Currently, it is supported by all browsers, which means that this feature can now be safely used.</p>
<p>Of course, there is another layout solution is grid layout, but this article will sort out flex first.</p>
<p>The Flexible Box model, commonly referred to as flexbox, is a one-dimensional layout model. It provides powerful spatial distribution and alignment between the child elements of flexbox. This article gives the main features of flexbox, more details will be explored in other docs.</p>
<p>We say that a flexbox is a one-dimensional layout because a flexbox can only handle the layout of elements in one dimension at a time, one row or one column. As a contrast, another two-dimensional layout, CSS Grid Layout, can handle both row and column layouts.</p>
<span id="more"></span>
<h2 id="The-two-axes-of-the-flexbox"><a href="#The-two-axes-of-the-flexbox" class="headerlink" title="The two axes of the flexbox"></a>The two axes of the flexbox</h2><p>When using a flex layout, the first thing that comes to mind are two axes - the main axis and the cross axis. The main axis is defined by flex-direction, and the other axis is perpendicular to it. All the properties we use with flexbox are related to these two axes, so it is necessary to understand it first at the beginning.</p>
<h3 id="Spindle"><a href="#Spindle" class="headerlink" title="Spindle"></a>Spindle</h3><p>The spindle is defined by flex-direction and can take 4 values:</p>
<ul>
<li>row</li>
<li>row-reverse</li>
<li>column</li>
<li>column-reverse</li>
</ul>
<p>If you choose row or row-reverse, your spindle will extend along the inline, that is, horizontally.</p>
<p>When you choose column or column-reverse, your main axis will extend in the vertical direction - that is, the direction in which the blocks are arranged, that is, the vertical direction.</p>
<h3 id="Cross-axis"><a href="#Cross-axis" class="headerlink" title="Cross axis"></a>Cross axis</h3><p>The cross axis is perpendicular to the main axis, so if your flex-direction is set to row or row-reverse, the direction of the cross axis is down the column.</p>
<p>If the main axis direction is set to column or column-reverse, the cross axis is horizontal.</p>
<h2 id="Start-and-End-Lines"><a href="#Start-and-End-Lines" class="headerlink" title="Start and End Lines"></a>Start and End Lines</h2><p>Another important point to understand is that <strong> flexbox does not provide assumptions about the writing mode of the doc </strong>. In the past, the writing mode of CSS was mainly considered horizontal, from left to right. Modern layouts cover the scope of writing modes, so we no longer assume that a line of text is written from the upper left corner of the doc to the right, and new lines do not have to appear below another line.</p>
<p>If flex-direction is row and I am writing English, then the start line of the main axis is on the left and the end line is on the right. If I am writing Arabic, the start line of the main axis is on the right and the end line is on the left. In both cases, the start line of the intersection axis is the top of the flex container and the end line is the bottom, because both languages are written horizontally.</p>
<h2 id="Flex-container"><a href="#Flex-container" class="headerlink" title="Flex container"></a>Flex container</h2><p>The area of the doc that uses flexbox is called a flex container. To create a flex container, we change the display property value of a container to flex or inline-flex. After this step, the immediate child elements in the container will become flex elements. All CSS properties will have an initial value, so all flex elements in the flex container will have the following behavior:</p>
<p>The elements are arranged in a row (the initial value of the flex-direction property is row).</p>
<ul>
<li>Elements start from the start line of the main axis.</li>
<li>Elements are not stretched in the main dimension, but can be shrunk.</li>
<li>Elements are stretched to fill the cross axis size.</li>
<li>The flex-basis property is auto.</li>
<li>The flex-wrap property is nowrap.</li>
</ul>
<p>This will make your elements line up and use their own size as the size on the main axis. If there are too many elements outside the container, they will overflow without wrapping. If some elements are taller than others, the element will be stretched along the intersection axis to fill its size.</p>
<h2 id="Implement-multi-line-container-with-flex-wrap"><a href="#Implement-multi-line-container-with-flex-wrap" class="headerlink" title="Implement multi-line container with flex-wrap"></a>Implement multi-line container with flex-wrap</h2><p>Although flexbox is a one-dimensional model, it is possible to apply our flex project to multiple rows. <strong> When doing this, you should treat each row as a new flex container </strong>. Any spatial distribution will occur on that row without affecting other rows of that spatial distribution.</p>
<p>To achieve a multi-line effect, add a property value wrap to the property flex-wrap. Now, if your item is too large to fit in one line, it will wrap.</p>
<p>For flex containers, the total width of the child elements of the item is greater than the maximum width of the container. Since the value of flex-wrap is set to wrap, the child elements of the item wrap. If you set it to nowrap, which is also the initial value, they will shrink to fit the container because they use the initial Flexbox value that allows for shrinking. If the child elements of the item cannot be shrunk, using nowrap will cause overflow, or the shrunk level is not small enough</p>
<h2 id="Abbreviated-attribute"><a href="#Abbreviated-attribute" class="headerlink" title="Abbreviated attribute"></a>Abbreviated attribute</h2><p>You can combine two properties flex-direction and flex-wrap into a short property flex-flow. The first specified value is flex-direction and the second specified value is flex-wrap.</p>
<h2 id="Attributes-on-flex-elements"><a href="#Attributes-on-flex-elements" class="headerlink" title="Attributes on flex elements"></a>Attributes on flex elements</h2><p>To better control flex elements, there are three properties that can be applied to them:</p>
<ul>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
</ul>
<p>Before considering the role of these properties, it is necessary to understand the concept of <strong> available space </strong>. The role of these flex properties is to change the behavior of available space in the flex container. At the same time, available space is also important for the alignment behavior of flex elements.</p>
<p>Assuming that in a 500px container, we have 3 elements that are 100px wide, then these 3 elements need to occupy 300px of width, leaving 200px of free space. By default, flexbox behavior leaves this 200px of space behind the last element.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665368539/origin-of-ray/basics7_vvpola.png" alt=""></p>
<p>If we expect these elements to automatically expand to fill the remaining space, then we need to control how the available space is allocated among these elements, which is what the flex attribute on the element does.</p>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>The flex-basis defines the size of that item in terms of the space, and the extra space in the flex container other than the space occupied by the element is available space. The default value of this attribute is auto. At this point, the browser will detect whether the element has a certain size. In the above example, all elements have <strong> set the width to 100px, so the flex-basis value is 100px </strong>.</p>
<p><strong> If no dimensions are given to the element, the flex-basis value takes the size of the element’s content </strong>. This explains: as long as we declare display: flex to the parent element of the Flex element, all child elements will be lined up and automatically assigned a size to fully display the content of the element.</p>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>If flex-grow is assigned a positive integer, the flex element will grow in size along the main axis based on flex-basis. This will make the element stretch and occupy the available space on this axis. If other elements are also allowed to stretch, they will each occupy a portion of the available space.</p>
<p>If we set flex-grow to 1 for all the elements in the example above, the available space in the container will be divided equally between these elements. They will stretch to fill the space in the direction of the container spindle.</p>
<p>The flex-grow property allocates space proportionally. If the first element has a flex-grow value of 2 and the other elements have a value of 1, the first element will occupy 2/4 (in the above example, 100px out of 200px), and the other two elements will occupy 1/4 each (50px each).</p>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>The flex-grow property handles the flex element adding space on the spindle, while the flex-shrink property handles the flex element contraction. <strong> If we don’t have enough space in our container to arrange flex elements, we can set the flex-shrink property of the flex element to a positive integer to shrink its space below flex-basis </strong>. As with the flex-grow property, different values can be assigned to control the degree of contraction of the flex element - a larger value can be assigned to the flex-shrink property to a greater degree of contraction than the sibling element assigned a decimal value.</p>
<p>When calculating the contraction size of the flex element, its minimum size is also taken into account, which means that in fact the flex-shrink property may not behave the same as the flex-grow property.</p>
<h3 id="Flex-property-abbreviation"><a href="#Flex-property-abbreviation" class="headerlink" title="Flex property abbreviation"></a>Flex property abbreviation</h3><p>You may rarely see the flex-grow, flex-shrink, and flex-basis properties used alone, but mixed in the flex shorthand. The flex shorthand allows you to write three values in this order - flex-grow, flex-shrink, flex-basis.</p>
<p>In most cases, you can use predefined shorthand forms. You may see this writing frequently in this tutorial, and you can use it in many cases. Here are several predefined values:</p>
<ul>
<li>flex: initial</li>
<li>flex: auto</li>
<li>flex: none</li>
<li>flex: <positive-number></li>
</ul>
<p>Flex: initial is the initial value for resetting flex elements to Flexbox, which is equivalent to flex: 0 1 auto. Here flex-grow has a value of 0, so flex elements do not exceed their flex-basis size. Flex-shrink has a value of 1, so flex elements can be shrunk to prevent them from overflowing. Flex-basis has a value of auto. Flex element size can be set in the main dimension or automatically obtained based on content.</p>
<p>Flex: auto is equivalent to flex: 1 1 auto; basically the same as flex: initial above, but in this case the flex element can be stretched or contracted when needed.</p>
<p>Flex: none sets a flex element to be non-scalable. It is the same as setting flex: 0 0 auto. Elements cannot be stretched or contracted, but elements are laid out as flexbox with flex-basis: auto.</p>
<p>You often see flex: 1 or flex: 2 in tutorials, etc. It is equivalent to flex: 1 1 0. Elements can be scaled on a flex-basis of 0.</p>
<h2 id="Alignment-and-space-allocation-of-elements"><a href="#Alignment-and-space-allocation-of-elements" class="headerlink" title="Alignment and space allocation of elements"></a>Alignment and space allocation of elements</h2><p>A key feature of Flexbox is the ability to set the alignment of flex elements along the spindle and cross axes, as well as the allocation of space between them.</p>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>The align-items property aligns elements in the cross axis direction.</p>
<p>The initial value of this attribute is stretch, which is why flex elements are stretched to the height of the tallest element by default. In effect, they are stretched to fill the flex container - the tallest element defines the height of the container.</p>
<p>You can also set the value of align-items to flex-start, so that flex elements are aligned top of the flex container, flex-end aligns them bottom of the flex container, or center aligns them center. Try it in the example - I gave the height of the flex container so you can see the elements moving through the container.</p>
<ul>
<li>stretch</li>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
</ul>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>The justify-content property is used to align elements in the main axis direction, which is the direction set by flex-direction. The initial value is flex-start, and the elements are arranged from the start line of the container. But you can also set the value to flex-end, which is arranged from the end line, or center, which is arranged in the middle.</p>
<p>You can also set the value to space-between to take out the remaining space after the elements are arranged and distribute it evenly between the elements, so that the spacing between elements is equal. Or use space-around to make the left and right spaces equal for each element.</p>
<p>The values of the following justify-content attribute:</p>
<ul>
<li>stretch</li>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>space-around</li>
<li>space-between</li>
</ul>
<h2 id="Proportion-of-child-elements-on-the-main-axis"><a href="#Proportion-of-child-elements-on-the-main-axis" class="headerlink" title="Proportion of child elements on the main axis"></a>Proportion of child elements on the main axis</h2><p>In HTML, if the CSS of an element is set to display: flex, then the element is a flex container and its child elements are flex items</p>
<p>We will explore three properties applied to flex child elements that allow us to control the size and scalability of flex child elements in the spindle direction - flex-grow, flex-shrink, and flex-basis. Fully understanding how these properties work with growing and shrinking flex child elements is the key to mastering Flex layout.</p>
<p>These three properties control the following aspects of a flex child element:</p>
<ul>
<li>flex-grow: How much positive free space does this flex child element get?</li>
<li>flex-shrink: How much negative free space is to be contracted from this flex child element?</li>
<li>flex-basis: What is the size of the flex child element before it is stretched and contracted?</li>
</ul>
<h3 id="Important-concept-of-working-on-the-spindle"><a href="#Important-concept-of-working-on-the-spindle" class="headerlink" title="Important concept of working on the spindle"></a>Important concept of working on the spindle</h3><p>Before considering how the flex property controls the ratio in the spindle direction, there are a few concepts worth exploring. This involves the natural size of flex child elements before any scaling, and the concept of free space</p>
<h4 id="Size-of-Flex-child-elements"><a href="#Size-of-Flex-child-elements" class="headerlink" title="Size of Flex child elements"></a>Size of Flex child elements</h4><p>In order to figure out how much free space can be laid out in the flex child element, the browser must know how big the item is to start. How does it solve for flex child elements with no width and height applied to absolute units?</p>
<p>There is a concept in the CSS of min-content and max-content - these keywords are defined in the CSS Intrinsic and Extrinsic Sizing Specification, and can be replaced by a length unit.</p>
<p>For example, I have two paragraphs that contain a text string. The first paragraph sets the width of the min-content. In browsers that support this keyword you can see that the text has been wrapped as much as possible, as small as possible without overflow. After that is the min-content size of that string. Essentially, the longest word in the string determines the size.</p>
<p>The second paragraph sets the max-content value, and it is the opposite of min-content. It will become as large as possible, with no automatic line wrapping. If the flex container is too narrow, it will overflow its own box.</p>
<h4 id="Positive-and-negative-free-space"><a href="#Positive-and-negative-free-space" class="headerlink" title="Positive and negative free space"></a>Positive and negative free space</h4><p>Positive and negative free space literally translates to positive and negative free space. In order for readers to read the following well, the translator will probably say it first.</p>
<p>There are flex containers and flex child elements in the Flex layout. The flex child elements are contained in the flex container. Then when the sum of the dimensions (sizes) of the flex child elements on the spindle is smaller than the size of the flex container, there will be a flex container. There will be extra space that is not filled, and these spaces are called positive free space. When the sum of the dimensions of the flex child elements on the spindle is greater than the size of the flex container, the space of the flex container is not enough. At this time, the sum of the dimensions of the flex child elements minus the size of the flex container (the size of the overflow of the flex child element) is negative free space, this negative free space plus the size of the flex container is just enough to accommodate the flex child element.</p>
<p>Before talking about these properties we need to understand the concept of positive free space and negative free space. When a flex container has positive free space, it has more space for displaying flex child elements within the flex container. For example, if I have a 500px wide flex container with a flex-direction property value of row, three 100px wide flex child elements, and I have 200px positive free space, then if I want them (positive free space) to fill the flex container, they can be filled between flex child elements.</p>
<p>We produce negative free space when the natural size of the flex child elements adds up to more than the available space inside the flex container. If I have a flex container 500px wide like the above, but three flex child elements are each 200px wide, I need a total of 600px wide, so I have 100px negative free space. This can be removed from the flex child element to make it fit into the flex container.</p>
<h3 id="flex-basis-1"><a href="#flex-basis-1" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>The flex-basis property initializes the size of the flex child element before any space allocation occurs. The initial value of this property is auto. If flex-basis is set to auto, the browser checks whether the main size of the flex child element is set to an absolute value before calculating the initial value of the flex child element. For example, if you have set your flex child element to 200px wide, 200px is the flex-basis of this flex child element.</p>
<p>If your flex child element is automatically resized, auto will resolve to the size of its content. At this point, the familiar min-content and max-content sizes will become useful, and flexbox will use the max-content size of the flex child element as the flex-basis. The following example can prove this.</p>
<p>In addition to the keyword auto, you can also use the keyword content as the value of flex-basis. This will cause flex-basis to set the width of even the flex child element based on the content size. This is a new keyword and has less browser support, but you can still achieve the same effect by setting flex-basis: auto and making sure your flex child element has no width set so that it can automatically resize.</p>
<p>When allocating space, if you want flexbox to completely ignore the size of the flex child element, set the flex-basis to 0. This basically tells flexbox that all space can be preempted and shared proportionally.</p>
<h3 id="flex-grow-1"><a href="#flex-grow-1" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>The flex-grow property specifies the flex growth value, which determines how much the flex child element grows relative to the rest of the flex child elements in the flex container when positive free space is allocated.</p>
<p>If all your flex child elements have the same flex-grow property value, then the space will be divided equally among the flex child elements. If you want this to happen, you usually need to use 1 as the value, and if you like you can also set their flex-grow to 88, or 100, or 1.2 - it’s just a ratio. If all flex-grow values are the same, and there is positive free space in the flex container, then it will be equally distributed to all flex child elements</p>
<h4 id="Combined-flex-grow"><a href="#Combined-flex-grow" class="headerlink" title="Combined flex-grow"></a>Combined flex-grow</h4><p>Some things can get confusing depending on how flex-grow and flex-basis interact. Let’s consider three examples of flex child elements with different content sizes, applied to the following flex rules:</p>
<p>flex: 1 1 auto;</p>
<p>In this example, the flex-basis is set to auto and their width is not set, so they are automatically resized. This means that the size of the flexbox depends on the max-content size of all flex child elements. After the flex child elements are laid out, there are some positive free spaces in the flex container, which are displayed in the shaded area of this image:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665370298/origin-of-ray/ratios2_ncusgh.png" alt=""></p>
<p>We use a flex-basis equal to the content size in order to subtract the available allocation space from the total available space (the width of the flex container), and then the remaining space is evenly distributed among each flex child element. Our larger flex child element ends up being bigger because it starts out with a larger size, even though it has the same amount of allocated space as other flex child elements:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665370341/origin-of-ray/ratios3_ktlfw5.png" alt=""></p>
<p><strong> If all you really want is three flex child elements of the same size, even if they start out as different sizes </strong>, you should use this:</p>
<p>flex: 1 1 0;</p>
<p>What we are saying is that for our space allocation, the flex child element has a size calculation of 0 — all spaces are up for grabs, and all flex child elements have the same flex-grow value, and they (flex child elements) each get equal space allocation. The end result is three scalable flex child elements of equal width.</p>
<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>Our understanding of how flex-grow and flex-basis work allows us to further control our individual flex child elements by assigning different flex-grow values, sizes. If we set the flex-basis value to 0 then all the space used can be allocated, and we can assign different flex-grow values to each flex child element. In the example below, I will use the following values:</p>
<p>Set the flex-grow value of the first flex item to 1.</p>
<ul>
<li>Set the flex-grow value of the second flex item to 1.</li>
<li>Set the flex-grow value of the third flex item to 2.</li>
</ul>
<p>A flex-basis value of 0 means that the available space will be allocated according to the settings. We need to increase the flex growth value, we need to divide the total size of positive free space in the flex container by the sum of the flex-grow values, in this case 4. We can allocate space based on individual values (flex-basis values) - the first flex child element gets one unit, the second flex child element gets one unit, and the third flex child element gets two units. That is, the third flex child element is twice as large as the first and second flex items.</p>
<h3 id="Flex-shrink-property"><a href="#Flex-shrink-property" class="headerlink" title="Flex-shrink property"></a>Flex-shrink property</h3><p>The flex-shrink property specifies the flex shrinkage value, which determines the degree of contraction of the flex child element relative to the remaining flex child elements in the flex container when allocating negative free space.</p>
<p>This property handles situations where the browser calculates flex-basis values for flex child elements and detects that they are too large to fit the flex container. <strong> As long as flex-shrink has a positive value, flex child elements will contract so that they will not overflow the flex container </strong>.</p>
<p>So flex-grow is used to add free space, and flex-shrink reduces space to fit boxes into their containers without overflowing.</p>
<p>In one example, my flex container has three flex child elements, and I have set each of them (flex child elements) to be 200px wide and the container (flex container) to be 500px wide. Set flex-shrink to 0 for flex child elements that do not allow contraction such that they overflow the box.</p>
<p>Change the flex-shrink value to 1 and you will see that each flex child element has a contraction of the same size, and now all flex child elements fit into the box. In doing so they have become smaller than their original width.</p>
<h4 id="Combining-flex-shrink-and-flex-basis"><a href="#Combining-flex-shrink-and-flex-basis" class="headerlink" title="Combining flex-shrink and flex-basis"></a>Combining flex-shrink and flex-basis</h4><p>You can see that flex-shrink and flex-grow work just as well. But they are not exactly the same for two reasons.</p>
<p>Even if it is trivial, the definition in the specification is one reason why flex-shrink is not identical to negative space, just as flex-grow is not identical to positive space:</p>
<blockquote>
<p>When assigned</p>
</blockquote>
<p>The second reason is that flexbox prevents small flex child elements from shrinking to 0 during negative free space elimination. These flex child elements will be laid with the size of min-content - the size they will become after taking advantage of any available automatic line break opportunities.</p>
<p>In the example below, you will see min-content laid where flex-basis resolves to content size. If you change the width of the flex container - say increase it to 700px wide, and then reduce the width of the flex child element, you will see that the first two flex child elements will wrap, but they will never be smaller than the size of min-content. As the box gets smaller and smaller, the third flex child element then overflows from the space.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &gt; * &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item Three has more content and so has a larger size<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>The key to really understanding how flex child elements work is to understand how many things are involved in influencing flex child elements. Consider the following aspects, which we have discussed in these guides:</p>
<h4 id="What-settings"><a href="#What-settings" class="headerlink" title="What settings"></a>What settings</h4><ol>
<li>is lex-basis set to auto, and is the width of this flex child element set? If set, the size of the flex child element will be based on the set width.</li>
<li>flex-basis set to auto or content (in supported browsers)? If auto, the size of the flex child element is the original size.</li>
<li>is flex-basis a length unit other than 0? if so this is the size of the flex child element.</li>
<li>what about setting flex-basis to 0? If so, the size of the flex child element is not considered in the space allocation calculation.</li>
</ol>
<h4 id="Do-we-have-space-available"><a href="#Do-we-have-space-available" class="headerlink" title="Do we have space available?"></a>Do we have space available?</h4><p>A flex child element will not grow without positive free space and will not shrink without negative free space.</p>
<ol>
<li>If we add up the widths of all the flex child elements (height if working in column direction), is the sum less than the total width (or height) of the flex container? If so, then you have positive free space and flex-grow comes into play.</li>
<li>If we add up the widths of all the flex child elements (height if working in column direction), is the sum greater than the total width (or height) of the flex container? If so, then you have negative free space and flex-shrink comes into play.</li>
</ol>
<h4 id="Other-ways-to-allocate-space"><a href="#Other-ways-to-allocate-space" class="headerlink" title="Other ways to allocate space"></a>Other ways to allocate space</h4><p>If we don’t want to add space to flex child elements, remember that you can use the alignment attribute described in the guide in the flex container to handle free space between or around flex child elements so that you can align flex child elements. The justify-content attribute allocates free space between or around flex child elements. You can also use auto margins on flex child elements to absorb space and create spacing between flex child elements.</p>
<p>Reference article:</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox">flex布局基本概念</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax">控制Flex子元素在主轴上的比例</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>function components and function programming</title>
    <url>/en/posts/9244/</url>
    <content><![CDATA[<p>Function programming and function components are a trend in development now. They have been used in the past, but they have not been understood conceptually. This article summarizes the two together and makes a certain comparison.</p>
<p>Function programming is a programming paradigm, and function components are a product of this paradigm.</p>
<span id="more"></span>
<h1 id="Function-programming"><a href="#Function-programming" class="headerlink" title="Function programming"></a>Function programming</h1><h2 id="Programming-paradigm"><a href="#Programming-paradigm" class="headerlink" title="Programming paradigm"></a>Programming paradigm</h2><p>Programming paradigm, programming paradigm, or programming paradigm, refers to a typical programming style in software engineering. Common programming paradigms are: function programming, imperative programming, procedural programming, Object Oriented programming, etc.</p>
<p>Programming paradigms provide and determine the programmer’s view of program execution. For example, in Object Oriented programming, programmers consider a program to be a series of interacting objects. Due to different methodologies, Object Oriented programming paradigms are further divided into class-based programming and prototype-based programming, while in function programming, a program will be regarded as a stateless sequence of function calculations.</p>
<blockquote>
<p>Programming paradigms are different from programming languages, such as Object Oriented languages. It only means that the language provides more convenient encapsulation, inheritance, and polymorphic syntax. It does not mean that you can only write Object Oriented code, nor does it mean that the code you write conforms to Object Oriented paradigm</p>
</blockquote>
<p>There are many more programming paradigms, here is the table of contents of Wiki Lingo:</p>
<ul>
<li>Imperative<ul>
<li>Procedural</li>
<li>Block structure</li>
<li>Structured</li>
<li>Modularization</li>
</ul>
</li>
<li>function<ul>
<li>First class function</li>
<li>Pure function</li>
<li>Implicit</li>
<li>Pattern matching</li>
<li>Derived formula</li>
</ul>
</li>
<li>Object Oriented<ul>
<li>based on class</li>
<li>Based on prototypes</li>
<li>Contractual</li>
<li>Face section</li>
<li>Agent oriented</li>
</ul>
</li>
<li>Array type</li>
<li>Data flow<ul>
<li>Synchronous</li>
<li>Responsive</li>
<li>Stream processing</li>
<li>Based on process</li>
</ul>
</li>
</ul>
<h2 id="Function-programming-is-a-programming-paradigm"><a href="#Function-programming-is-a-programming-paradigm" class="headerlink" title="Function programming is a programming paradigm"></a>Function programming is a programming paradigm</h2><p>Function programming, also known as function programming or functional programming, is a programming paradigm that treats computer operations as function operations and avoids the use of program state and mutable objects.</p>
<p><strong> In function programming, a function is a first-class object or a first-class function, which means that a function can either be used as an input parameter value for other functions, or return a value from a function </strong>, be modified or assigned to a variable. The lambda calculus is the most important foundation of this paradigm. The function of lambda calculus can accept function as an input parameter and output a return value.</p>
<p>Compared with imperative programming, function programming emphasizes the result of program execution rather than the process of execution, advocating the use of several simple execution units to make the calculation results gradual, and deriving complex operations layer by layer, rather than designing a complex execution process.</p>
<h2 id="What-is-function-programming"><a href="#What-is-function-programming" class="headerlink" title="What is function programming"></a>What is function programming</h2><p>These keywords can be extracted from the above definition:</p>
<ol>
<li>Avoid state changes</li>
<li>function as input and output</li>
<li>Related to λ calculus</li>
</ol>
<p>Regarding this definition, if you just want to briefly understand the manifestation of function programming, you can take a look<a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html">阮一峰的这篇博客</a></p>
<p>If you want a deeper understanding, it is also recommended to read the blog above first. It is very short, but it will help to understand the form of some of the formulas below.</p>
<p>Avoiding state changes and functions as input and output is easier to understand. What is lambda calculus? To understand lambda calculus, it will pull out Turing complete, Turing machine. Next, I will briefly explain to you.</p>
<h3 id="What-is-an-expression"><a href="#What-is-an-expression" class="headerlink" title="What is an expression"></a>What is an expression</h3><p>Lambda calculus (lambda-calculus) is a formal system developed from mathematical logic to study how functions are abstracted and defined, how functions are applied, and recursion, using rules for variable binding and substitution. It was first published by mathematician Alonzo Church in the 1930s. As a widely used computational model, the lambda calculus can clearly define what a computable function is, and any computable function can be expressed and evaluated in this form, which can simulate the computational process of a single tape Turing machine. However, the lambda calculus emphasizes the application of transformation rules rather than the specific machines that implement them.</p>
<p><strong> Lambda calculus is comparable to the most fundamental programming language, it includes a transformation rule (variable replacement) and a way to abstract the definition of function </strong>. Therefore, it is generally recognized as an approach that is closer to software than hardware. It has had a great impact on functional programming languages such as Lisp, ML, and Haskell. In 1936 Church used lambda calculus to give a negation of the Entscheidungsproblem: the proposition that two lambda expressions are equivalent cannot be determined by a “general algorithm”, which is the first problem that undecidability can be proved, even in<a href="https://zh.m.wikipedia.org/zh-cn/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98">停机问题</a>Before.</p>
<p>The lambda calculus involves constructing lambda terms and performing reduction operations on lambda terms. In the simplest lambda calculus, only the following rules are used to construct lambda terms:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Grammar</th>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>variable</td>
<td>uses characters or strings to represent parameters or mathematical values or to represent logical values</td>
</tr>
<tr>
<td>(λ x. M)</td>
<td>abstraction</td>
<td>A complete function definition (M is a lambda term), in which x in the expression is bound to the variable x.</td>
</tr>
<tr>
<td>(M N)</td>
<td>Apply</td>
<td>to function M on the parameter N. M and N are lambda terms.</td>
</tr>
</tbody>
</table>
</div>
<p>Generates an expression such as: (λ x.λ y. (λ z. (λ x.zx) (λ y.zy)) (x y)). If the expression is unambiguous, the parentheses can be omitted. For some applications, logical and mathematical constants and related operations may be included.</p>
<p><strong> The λ calculus is Turing complete, that is, it is a general model that can be used to simulate any Turing machine </strong>. λ is also used in λ expressions and λ terms to represent binding a variable to a function.</p>
<p>The lambda calculus can be typed or untyped. In typed lambda calculus (which is untyped as described above), the function can only be applied when the parameter types and input types match. Typed lambda calculus is weaker than untyped lambda calculus - the latter is the main part of this entry - because typed lambda operations express less than untyped lambda calculus; at the same time, the former allows more theorems to be proved. For example, in simple typed lambda calculus, the operation can always be stopped, while in untyped lambda calculus this is not necessarily the case (because of the halting problem). One reason there are many typed λ calculus is that they are expected to do more (something that previous typed λ calculus could not do) and at the same time hope to be able to prove more theorems.</p>
<p>The lambda calculus has many applications in mathematics, philosophy, linguistics, and computer science. It occupies an important position in programming language theory, and function programming implements lambda calculus support. Lambda calculus is also a research hotspot in category theory.</p>
<p>The lambda formula has three main points:</p>
<ul>
<li>Binding relationship. Variables are arbitrary, x, y, and z are fine, it is just a proxy for specific data.</li>
<li>recursion definition. The λ term recursion definition, M can be a λ term.</li>
<li>Substitution reduction. The λ term can be applied, and the space-separated representation applies N to M, which can be a λ term.</li>
</ul>
<p>By substitution and reduction, we can treat our calculus like a simplification equation.</p>
<p>For example, we just said ‘ (λ x.λ y. (λ z. (λ x.zx) (λ y.zy)) (x y)) ‘, first ‘ (λ x.zx) ‘ means’ f (x) = zx ‘, then’ (λ x.zx) 3 ‘is’ 3z ‘</p>
<h3 id="Calculus-Meaning-of-Variables"><a href="#Calculus-Meaning-of-Variables" class="headerlink" title="Calculus: Meaning of Variables"></a>Calculus: Meaning of Variables</h3><p>In λ calculus, our expression has only one parameter, so how can it achieve binary operations on two numbers? For example, addition a + b requires two parameters.</p>
<p>At this time, we need to treat the function itself as a value. We can save and pass data (or state) by binding a variable to the context and then returning a new function. The bound variable can be referenced from the context when it needs to be actually used.</p>
<p>For example: ‘λ m.λ n.m + n 5 = λ n.5 + n’, the first function call passes in m = 5, returns a new function, this new function takes a parameter n and returns the result of m + n. The context generated in this case, <strong> is Closure (closure, a common means of state preservation and reference in function programming) </strong>, and we call the variable m the context that is bound to the second function.</p>
<p>In addition to bound variables, λ calculus also supports free variables, such as this y: ‘λ m.λ n.m + n + y’, where y is a variable that is not bound to the parameter position, called a free variable.</p>
<p>Bound variables and free variables are two sources of state for a function, one can be substituted and the other cannot. In actual programs, bound variables are usually implemented as local variables or parameters, and free variables are implemented as global variables or environment variables.</p>
<h3 id="Calculus-Substitution-and-Reduction"><a href="#Calculus-Substitution-and-Reduction" class="headerlink" title="Calculus: Substitution and Reduction"></a>Calculus: Substitution and Reduction</h3><p>The calculus is divided into alpha substitution and beta reduction. We actually covered these two concepts in the previous chapter, so let’s introduce them below.</p>
<p>Alpha substitution means that the name of the variable is not important, you can write λ m.λ n.m + n, or λ x.λ y.x + y, which represent the same function during the calculation process. That is to say, we only care about the form of the calculation, not the details of what variables to use to implement it. This is convenient for us to modify the variable name without changing the operation result, so as to facilitate simplification operations when the function is more complex. In fact, even the name of the entire lambda calculus is not important, we only need this form of calculation, not the naming of this form.</p>
<p>Beta reduction means that if you have a function application (function call), then you can substitution the part of the function body that corresponds to the identifier by using parameters (possibly another expression) to replace the identifier. It sounds a bit confusing, but it is actually parameter substitution for a function call. For example: ‘ (λm.λn.m + n) 1 3 = (λn.1 + n) 3 = 1 + 3 = 4’</p>
<p>You can replace m with 1 and n with 3, then the whole expression can be reduced to 4. This is also in function programming<a href="https://caowenwei.github.io/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/pure-function-rt/">引用透明性</a>The origin of. It should be noted that 1 and 3 here represent the operation values of the expression, which can be replaced by other expressions. For example, replacing 1 with (λ m.λ n.m + n 1 3) requires two reductions</p>
<h3 id="Lambda-expressions-in-JavaScript-Arrow-functions"><a href="#Lambda-expressions-in-JavaScript-Arrow-functions" class="headerlink" title="Lambda expressions in JavaScript: Arrow functions"></a>Lambda expressions in JavaScript: Arrow functions</h3><p>The ECMAScript 2015 specification introduces arrow functions, which have no this and no arguments. Can only be used as an expression (expression) but not as a statement (statement), the expression produces an arrow function reference, which still has the name and length properties, representing the name of the arrow function and the length of the parameters, respectively. An arrow function is a simple expression, and an arrow function can also be called a lambda function, which is written like a lambda expression.</p>
<p>Arrow functions can be used to do some simple operations. The following example compares the use of four arrow functions:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Const</span> add_1 = (x, y) = &gt; x + y;<span class="comment">//all local variables</span></span><br><span class="line"><span class="title class_">Const</span> add_2 = x = &gt; x + y;<span class="comment">//y is a global variable</span></span><br><span class="line"><span class="title class_">Const</span> add_3 = x = &gt; y = &gt; x + y;<span class="comment">//closure concatenation parameter, curried</span></span><br><span class="line"><span class="title class_">Const</span> add_4 = b = &gt; a = &gt; a + b;<span class="comment">//The parameter name has nothing to do with the expression result</span></span><br></pre></td></tr></table></figure>
<p>This is the case directly for numbers (primitive data types). If you are doing operations on functions (referring to data types), things become interesting.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn_1</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="title function_">x</span>(y);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn_2</span> = f =&gt; <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(x);</span><br><span class="line"><span class="keyword">const</span> add_1 = (<span class="function"><span class="params">f</span> =&gt;</span> <span class="title function_">f</span>(<span class="number">5</span>))(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> add_2 = (<span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y)(<span class="number">2</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> add_3 = (<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>)(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>fn_x type, indicating that we can use function inside function, when function is passed as data, we can apply function to generate higher-order operations. And x = &gt; y = &gt; x (y) can be understood in two ways, one is that x = &gt; y function passes X = &gt; x (y), and the other is that x passes y = &gt; x (y).</p>
<p>add_x type indicates that an expression can be implemented in many different paths.</p>
<h3 id="Function-Programming-Fundamentals-Meta-Currying-and-Point-Free-of-Functions"><a href="#Function-Programming-Fundamentals-Meta-Currying-and-Point-Free-of-Functions" class="headerlink" title="Function Programming Fundamentals: Meta, Currying, and Point-Free of Functions"></a>Function Programming Fundamentals: Meta, Currying, and Point-Free of Functions</h3><p>Going back to JavaScript itself, we need to explore whether function itself can bring us more things. We have many ways to create functions in JavaScript:</p>
<p>You can use declarations, expressions, arrow functions, new Functions, etc</p>
<p>Although function has so many definitions, the function keyword declares functions with arguments and this keyword, which makes them look more like object methods than functions.</p>
<p>Moreover, most functions defined by functions can also be constructed (such as new Array).</p>
<p>Next we will only study the arrow function, because it is more like a function in the mathematical sense (only performing the calculation process).</p>
<ul>
<li>No arguments and this.</li>
<li>Cannot be constructed new.</li>
</ul>
<h4 id="Element-of-function"><a href="#Element-of-function" class="headerlink" title="Element of function"></a>Element of function</h4><p>Regardless of how a function is constructed, the function has two fixed pieces of information that can be obtained.</p>
<ul>
<li>name Represents the name of the function to which the current identifier points.</li>
<li>length Represents the length of the argument list when defining the function to which the current identifier points.</li>
</ul>
<p>Mathematically, we define f (x) = x as a unary function and f (x, y) = x + y as a binary function. In JavaScript we can define the element of a function by using its length when defined.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">one</span> = a =&gt; a;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">two</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">three</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br></pre></td></tr></table></figure>
<p>The significance of defining the meta of a function is that we can classify the function and specify the exact number of parameters a function needs. The meta of a function plays an important role both at compile time (type checking, overloading) and at runtime (exception handling, dynamically generated code).</p>
<p>If I give you a binary function, you know that you need to pass two parameters. For example, + can be seen as a binary function that takes one parameter on the left and one parameter on the right and returns their sum (or string concatenation).</p>
<p>In some other languages, + is indeed implemented by abstract classes, such as trait Add in the Rust language.</p>
<p>But in the λ calculus we saw above, each function has only one element. Why?</p>
<p>There is only one meta function that is convenient for us to perform algebraic operations. The parameter list of λ calculus is divided in the format of λx.λy.λz, and the return value is generally function. If a binary function is called with only one parameter, it returns an “incomplete call function”. Here, three examples are used to explain “incomplete call”.</p>
<h4 id="Curried-function-function-element-dimensionality-reduction-technology"><a href="#Curried-function-function-element-dimensionality-reduction-technology" class="headerlink" title="Curried function: function element dimensionality reduction technology"></a>Curried function: function element dimensionality reduction technology</h4><p>Currying a function is a technique for reducing the dimensionality of the elements of a function, a term in honor of the mathematician Alonzo Church we mentioned above.</p>
<p>Curried function helps us turn a multivariate function into an incomplete call, and use the magic of Closure to turn the function call into a delayed partial function (incomplete function call) call. This is very useful in scenarios such as function composition and to reuse</p>
<h4 id="Point-Free-No-argument-style-higher-order-combinations-of-functions"><a href="#Point-Free-No-argument-style-higher-order-combinations-of-functions" class="headerlink" title="Point-Free | No-argument style: higher-order combinations of functions"></a>Point-Free | No-argument style: higher-order combinations of functions</h4><p>There is a Point-Free style in function programming. In the Chinese context, point can probably be regarded as a parameter point, corresponding to the function application (Function Apply) in λ calculus, or the function call (Function Call) in JavaScript, so it can be understood that Point-Free refers to a call without parameters.</p>
<p>Let’s take a daily example of converting binary data to octal data.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strNums = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1110&#x27;</span>];</span><br><span class="line">strNums.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">2</span>)).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure>
<p>This code runs fine, but in order to handle this transformation, we need to understand the two functions of parseInt (x, 2) and toString (8) (why there are magic numbers 2 and magic numbers 8), and care about the data (function type a - &gt; b) in the shape of each node (care about the flow of data). Is there a way to only care about imported parameters and exported parameters, not about the data flow process?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toBinary</span> = x =&gt; <span class="built_in">parseInt</span>(x,  <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> toString0x =&gt; <span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toString</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">...fns</span>) =&gt; <span class="function"><span class="params">x</span> =&gt;</span> fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> <span class="title function_">fn</span>(acc), x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strNums = [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1110&#x27;</span>];</span><br><span class="line">strNums.<span class="title function_">map</span>(<span class="title function_">pipe</span>(toBinary, toString0x));</span><br></pre></td></tr></table></figure>
<h1 id="Functional-component"><a href="#Functional-component" class="headerlink" title="Functional component"></a>Functional component</h1><h2 id="What-is-a-function-component"><a href="#What-is-a-function-component" class="headerlink" title="What is a function component"></a>What is a function component</h2><p>Function-style components are functions are components, and components are functions. Its characteristics are that there is no internal state, no lifecycle hook function, and no this (components that do not need to be instantiated).</p>
<p>In daily development, we often develop some purely display business components, such as some details page, list interface, etc. They have a common feature:</p>
<p>As long as you pass in the data, I will display it.</p>
<p>There is no need for internal state and no need to process it in the lifecycle hook function.</p>
<p>At this point you can use functional components.</p>
<h2 id="Why-use-functional-components"><a href="#Why-use-functional-components" class="headerlink" title="Why use functional components?"></a>Why use functional components?</h2><p>Functional components do not require instantiation, are stateless, and have no lifecycle, so rendering performance is better than ordinary components</p>
<p>Functional component structure is simpler and code structure is clearer</p>
<h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><ol>
<li><p>Functional components need to specify functional in the declaration component.</p>
</li>
<li><p>Function components do not need to be instantiated, so there is no this, this is replaced by the second parameter of the render function.</p>
</li>
<li><p>Functional components have no lifecycle hook function, cannot use calculated properties, watch, etc.</p>
</li>
<li><p>Function-style components cannot expose events externally through $emit, and calling events can only call external incoming events in a context.listeners.click way.</p>
</li>
<li><p>Because function components are not instantiated, when referencing components externally through ref, the actual reference is HTMLElement.</p>
</li>
<li><p>The props of a function component can be declared only in part or not at all. All properties not declared in the props will be automatically implicitly parsed as props, while all undeclared properties of ordinary components are parsed into $attrs and automatically mounted to the component root element (which can be disabled by the inheritAttrs attribute).</p>
</li>
</ol>
<p>It has been repeatedly emphasized above that any component that does not require instantiation, is stateless, has no lifecycle, and has no other configuration items except props can be rewritten as a function component.</p>
<h3 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h3><h4 id="Template-syntax"><a href="#Template-syntax" class="headerlink" title="Template syntax"></a>Template syntax</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">func</span> <span class="attr">text</span>=<span class="string">&quot;aaaaaaaa&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> func <span class="keyword">from</span> <span class="string">&#x27;@/components/func.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    func</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;props.text ? props.text : &#x27;哈哈&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note that there is no &lt; script &gt;… &lt;/script &gt; section.</p>
</blockquote>
<h4 id="JSX-syntax"><a href="#JSX-syntax" class="headerlink" title="JSX syntax"></a>JSX syntax</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Rendering function</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">h</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span> &#123;<span class="type">*</span>&#125; context function component without this, props, slots, etc. all hang on the context</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h, context</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context);</span><br><span class="line">    <span class="keyword">const</span> &#123; props &#125; = context</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">text</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Return</span> &lt; p &gt; haha burp &lt;/p &gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p><a href="https://www.javascriptc.com/vue3js/guide/migration/functional-components.html#%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6">Vue3 函数式组件</a></p>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p><a href="https://zh-hans.reactjs.org/docs/components-and-props.html">React 函数式组件</a></p>
<p>Reference article:</p>
<p><a href="https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html">https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html</a></p>
<p><a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html">https://www.ruanyifeng.com/blog/2012/04/functional_programming.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Introduction to TCP Protocol</title>
    <url>/en/posts/4f2bae2e/</url>
    <content><![CDATA[<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul>
<li>TCP is a <strong>connection-oriented</strong> transport layer protocol. That is, a TCP connection must be established before an application can use it. After the data is transferred, the TCP connection must be released.</li>
<li>Each TCP connection can only have two endpoints, and each TCP connection is <strong>point-to-point</strong>.</li>
<li>TCP provides <strong>reliable delivery service</strong>, which means that data is error-free, not lost, not duplicated, and arrives in order.</li>
<li>TCP provides <strong>full-duplex communication</strong>, allowing both sides of the communication to send data at any time.<strong> Both sides of TCP have a send cache and a receive cache</strong>, which are used to temporarily store data for both sides of the communication.</li>
<li><strong>Byte-stream-oriented</strong> The term <strong>“stream “</strong> in TCP refers to the sequence of bytes<strong> flowing into and out of a process. Byte-stream oriented means that although the application and TCP interact one block at a time, TCP sees the data handed off by the application as just a sequence of </strong>unstructured byte streams**. TCP does not know the meaning of the byte stream being transmitted, nor does it guarantee that the size of the block received by the receiver corresponds to the size of the block sent by the sender. It is possible to send and send 10 blocks of data to the upper layer and have it organized into 4 blocks on the receiving side.</li>
</ul>
<span id="more"></span>
<p>TCP and udp use a completely different approach when sending messages. TCP does not care how long messages are sent by the application process to the cache of the TCP connection at a time, but decides how many bytes each message should contain based on the window value given by the other side and the current network congestion (the message length of UDP is given by the application process, and the messages given by the application process, UDP just (simply add the header and pass it to the next layer).</p>
<p>My current understanding is that <strong>after the upper layer deposits the byte stream into the cache in multiple blocks of different sizes, TCP will re-cut the byte stream to send messages based on window values, congestion conditions, etc., just to ensure that all bytes eventually arrive in order</strong>.</p>
<h2 id="What-is-a-TCP-connection"><a href="#What-is-a-TCP-connection" class="headerlink" title="What is a TCP connection"></a>What is a TCP connection</h2><p>TCP uses connections as the most basic abstraction, and many of TCP’s features are built on this connection-oriented foundation, so we need to figure out what a TCP connection really is.</p>
<p>Each TCP connection has two endpoints, also called sockets or sockets, which are actually port numbers spliced together behind an IP address; the endpoint of a TCP connection is a very abstract socket, and the same IP address can have multiple different TCP connections, while the same port number can appear in multiple different TCP connections. A socket-based abstraction.</p>
<p>My current understanding of why TCP is connection-oriented is this:<strong> A TCP connection requires a port on both sides of the connection, and during that time, the data transmitted on that port belongs only to the TCP connection, so it is like a link for both sides, but it does not mean that all routers between TCP connections have to do anything special for that connection. </strong></p>
<p><strong>When you read the following content, if you have the question: What makes TCP designed this way to achieve this effect, think about its connection-oriented feature</strong>.</p>
<h2 id="Principle-of-reliable-transmission"><a href="#Principle-of-reliable-transmission" class="headerlink" title="Principle of reliable transmission"></a>Principle of reliable transmission</h2><p>The network beneath the TCP protocol provides unreliable transport, so TCP must take steps to remedy some of the surprises and make transport between transport layers reliable.</p>
<h3 id="Stop-waiting-protocol"><a href="#Stop-waiting-protocol" class="headerlink" title="Stop waiting protocol"></a>Stop waiting protocol</h3><p>The Stop and Wait protocol is very simple.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587171346/computer_network/微信图片编辑_20200418085415_bobkzr.jpg" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587171346/computer_network/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91_20200418085415_bobkzr.jpg"></p>
<ul>
<li><p>A pauses after sending packet M1 and waits for an acknowledgement from B. B sends an acknowledgement to A when it receives M1, and A continues with the next packet M2 after receiving an acknowledgement for M1.</p>
</li>
<li><p><strong>There is an error</strong>. B detects an error when it receives M1 and simply discards M1<strong> and then does nothing</strong>. A assumes that the packet just sent is lost as long as no acknowledgement is received for a period of time, and thus retransmits the packet sent earlier. This is called a <strong>timeout retransmission</strong>. To implement timeout retransmission, you must set a <strong>timeout timer</strong> for each completed packet sent, and if an acknowledgement is received before the timer expires, the timer is revoked. There are three points to note here:</p>
<ul>
<li>A After a group is sent, a copy of the sent group must <strong>be temporarily stored</strong> until an acknowledgement is received before it can be deleted.</li>
<li>Both the subgroup and the acknowledgement subgroup must be set up with numbers so that we know which subgroup received the acknowledgement and which did not.</li>
<li>The timeout timer is set for a <strong>retransmission time that should be slightly longer than the average round trip time of the data during packet transmission</strong>.</li>
</ul>
</li>
<li><p><strong>Lost acknowledgement and late</strong>. If the acknowledgement to M1 sent by B is lost and A does not receive an acknowledgement within the set timeout period, there is no way to know if the packet it sent was in error, lost, or if the acknowledgement sent by B was lost, so after the timeout timer expires A has to retransmit M1, assuming that B receives M1 once again, and takes two actions:</p>
<ul>
<li>This duplicate packet M1 is discarded and not delivered to the upper layer.</li>
<li>Send the delivery confirmation to A again, and you cannot assume that a confirmation that has already been sent will not be sent again.</li>
</ul>
</li>
<li><p>Channel Utilization. The advantage of the stop-wait protocol is its simplicity, but the disadvantage is that the channel utilization is too low</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587195669/computer_network/微信截图_20200418154042_tktoqj.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587195669/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418154042_tktoqj.png"></p>
<p>Assume that the time required for A to send the packet is TD, which is obviously equal to the packet length divided by the data rate. Further assume that the processing time is negligible after the packet arrives correctly at B, while the acknowledgement is sent immediately. Assume that B takes time TA to send the acknowledgment packet. if A also takes negligible time to process the acknowledgment packet, then A can send the next packet only after time (TD + RTT + TA) has elapsed. Since only useful data is used for transmission within TD, the channel utilization U can be expressed as</p>
<script type="math/tex; mode=display">
U = \frac{T_D}{T_D + RTT + T_A}</script><p>To improve transmission efficiency, instead of using the inefficient stop-and-wait protocol, the sender can use pipelined transmissions. Pipelining means that the sender can send multiple packets in succession without having to stop after each packet to wait for an acknowledgement from the other side.</p>
<p>When using pipelined transfers, continuous <strong>ARQ protocol</strong> and <strong>sliding window protocol</strong> are used.</p>
</li>
</ul>
<h3 id="Continuous-ARQ-protocol"><a href="#Continuous-ARQ-protocol" class="headerlink" title="Continuous ARQ protocol"></a>Continuous ARQ protocol</h3><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587196595/computer_network/微信截图_20200418155614_iod7dv.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587196595/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418155614_iod7dv.png"></p>
<p>The above figure indicates the sending window maintained by the sender, which means that all 5 packets located in the sending window can be sent out consecutively without waiting for an acknowledgement from the other party.</p>
<p>When discussing the sliding window, we should note that there is also a time coordinate in the graph. By convention, forward refers to the direction of increasing time, while backward refers to the direction of decreasing time. Grouped sends are sent from the smallest to the largest group number.</p>
<p>The continuous ARQ protocol specifies that the sender slides the sending window forward one packet position for each acknowledgment received.</p>
<p>The receiver generally adopts the <strong>cumulative acknowledgement</strong> method, which means that instead of sending an acknowledgement for each packet received, the receiver receives several packets and <strong>sends an acknowledgement</strong> for the last packet that arrives in order.</p>
<h2 id="TCP-message-segment-header"><a href="#TCP-message-segment-header" class="headerlink" title="TCP message segment header"></a>TCP message segment header</h2><p>Although TCP is byte-stream oriented, the data unit transmitted by TCP is the message segment. A TCP message segment is divided into two parts, the header and the data, and the entire function of TCP is reflected in the role of the fields in the header. Therefore, only by mastering the role of each field in the TCP header can you master the working principle of TCP.</p>
<p>The first 20 bytes of the TCP header are fixed, and the next 4n bytes are options to be added as needed.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587197557/computer_network/微信截图_20200418161217_djnuqg.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587197557/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418161217_djnuqg.png"></p>
<h3 id="Source-and-destination-ports"><a href="#Source-and-destination-ports" class="headerlink" title="Source and destination ports"></a>Source and destination ports</h3><p>Each takes up two bytes and writes the far port number and the destination port number, respectively.</p>
<h3 id="Serial-number"><a href="#Serial-number" class="headerlink" title="Serial number"></a>Serial number</h3><p>It takes up four bytes, and the range of serial number is [0, 2^32 - 1], and after the serial number increases to the maximum, it is using the modulo operation.</p>
<p>Each byte in a stream of bytes transferred in a TCP connection is numbered sequentially. The starting serial number of the entire stream of bytes to be transmitted must be set at connection establishment. The sequence number field in the header refers to the first byte sequence number of the data sent in this message segment.</p>
<h3 id="Confirmation-number"><a href="#Confirmation-number" class="headerlink" title="Confirmation number"></a>Confirmation number</h3><p>It takes up four bytes and is the <strong>sequence number</strong> of the first data byte of the next message segment expected to be received from the other party. For example, B correctly receives a message segment from A with a sequence number field value of 501 and a data length of 200 bytes, which indicates that B correctly receives the data sent by A up to sequence number 700. Therefore, B expects A’s next data number to be 701, so B sets the acknowledgement number to 701 in the acknowledgement message segment sent to A. In summary, <strong>if the acknowledgment number equals N, then all data up to serial number N-1 has been received correctly</strong>.</p>
<p>In general, it can be ensured that when the serial number is reused, the data of the old serial number has already reached the end point through the network.</p>
<h3 id="Data-Offset"><a href="#Data-Offset" class="headerlink" title="Data Offset"></a>Data Offset</h3><p>Occupying 4 bits, it indicates the TCP message segment header length. The data offset is necessary because there are also option fields of indeterminate length in the header. This field unit is <strong>32 bits (4 bytes)</strong>. Since the maximum number of 4-bit binary numbers that can be expressed is 15, the maximum data offset is 60 bytes.</p>
<h3 id="Reserved"><a href="#Reserved" class="headerlink" title="Reserved"></a>Reserved</h3><p>Occupies 6 bits, reserved for future use, currently set to 0</p>
<h3 id="Emergency-URG-URGent"><a href="#Emergency-URG-URGent" class="headerlink" title="Emergency URG (URGent)"></a>Emergency URG (URGent)</h3><p>When URG is 1, it indicates that the urgent pointer field is valid, which tells the system that there is urgent data in this message and should be transmitted as soon as possible instead of following the original queue book order. For example, if the user issues Ctrl + C from the keyboard when a remote control program is running and needs to be interrupted, these two characters will be stored at the end of the receiving TCP cache if no urgent data is used. Only after all the data has been processed are these two characters given to the receiving application.</p>
<p>When URG is set to 1, the sending application process tells the sender’s TCP that it has urgent data to send, so TCP inserts the urgent data at the top of the data in this message segment, which is then paired with another prefix field <strong>The urgent pointer field indicates the length of the urgent data, and then the rest of the data remains as normal data</strong>.</p>
<h3 id="Confirm-ACK"><a href="#Confirm-ACK" class="headerlink" title="Confirm ACK"></a>Confirm ACK</h3><p>The acknowledgement number field is valid only when ACK = 1, and invalid when ACK = 0. <strong>TCP specifies that all messages transmitted after the connection is established must have ACK set to 1</strong></p>
<h3 id="Forwarding-PSH-PuSH"><a href="#Forwarding-PSH-PuSH" class="headerlink" title="Forwarding PSH (PuSH)"></a>Forwarding PSH (PuSH)</h3><p>When two application processes communicate interactively, sometimes the application process at one end wants to receive a response from the other immediately after adding a command, and this is when a push operation can be used. In this case, the sender sets PSH to 1 and immediately creates a message segment to send out, and the receiver receives the message with PSH of 1 and hands it to the receiving process as soon as possible, instead of waiting for the cache to fill up before delivering it together.</p>
<h3 id="Reset-RST"><a href="#Reset-RST" class="headerlink" title="Reset RST"></a>Reset RST</h3><p>When a major error occurs, the connection must be released and a new one established. Or it can be used to reject an illegal message or refuse to open a connection.</p>
<h3 id="Synchronized-SYN"><a href="#Synchronized-SYN" class="headerlink" title="Synchronized SYN"></a>Synchronized SYN</h3><p>When SYN = 1 and ACK = 0, this is a connection request message, and if the other party agrees to establish a connection, SYN = 1 and ACK = 1 are used in the response message. Therefore, a SYN of 1 indicates that this is a <strong>connection request or a connection establishment message</strong>.</p>
<h3 id="Terminate-FIN"><a href="#Terminate-FIN" class="headerlink" title="Terminate FIN"></a>Terminate FIN</h3><p>Used to release a connection. When FIN = 1, it indicates that the sender data for this message segment should have been sent and requests the release of the transport connection.</p>
<p><strong>That means that in theory, the TCP connection will not be broken without sending a message with this field of 1. </strong></p>
<h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>Occupies 2 bytes and the window value is an integer between [0, 2^16 - 1]. The window value is the receive window of the party sending this message segment. The window value tells the other party: <strong>The amount of data (in bytes) that the receiver is currently allowing the other party to send, counting from the acknowledgement number at the beginning of this message segment</strong> The window value is used as a basis for the receiver to allow the sender to set its send window.</p>
<p>The window field specifies the amount of data the other party is allowed to send now, and the window value changes frequently.</p>
<h3 id="Test-and"><a href="#Test-and" class="headerlink" title="Test and"></a>Test and</h3><p>Occupies 2 bytes, the test and field test range includes the first part and data two parts. How to calculate the specific is more complex, interested in their own search</p>
<h3 id="Emergency-pointer"><a href="#Emergency-pointer" class="headerlink" title="Emergency pointer"></a>Emergency pointer</h3><p>Occupies 2 bytes, meaningful only when URG = 1, indicates the length of the urgent data in this message segment, <strong> when all urgent data are processed, normal operation will resume for the next normal data in this message segment</strong>.</p>
<h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>Variable length, up to 40 bytes, when no option is used, the length of the first part is 20 bytes.</p>
<p>Initially, only the <strong>MSS (Maximum Segment Size)</strong> was specified. The MSS should be as large as possible, as long as the IP layer is transmitted without further fragmentation, but of course, because the path experienced by the IP layer is dynamically changing, this MSS is also very difficult to determine.</p>
<p>During connection establishment, both parties can write their supported MSS into this field and later transmit according to this field, both transmission directions can have different size MSS. if the host does not fill in this field, the default is 536 and all Internet hosts should be able to accept an MSS of 536 + 20 (fixed prefix length) = 556 bytes.</p>
<h2 id="Principle-of-TCP-reliable-transmission"><a href="#Principle-of-TCP-reliable-transmission" class="headerlink" title="Principle of TCP reliable transmission"></a>Principle of TCP reliable transmission</h2><h3 id="Sliding-window-in-bytes"><a href="#Sliding-window-in-bytes" class="headerlink" title="Sliding window in bytes"></a>Sliding window in bytes</h3><p>TCP’s sliding window is all in bytes. Suppose A receives an acknowledgement message segment from B, where the window value is 20 and the acknowledgement number is 31 (this indicates that the next sequence number B expects to receive is 31, and the data up to sequence number 30 has already been received). Based on these two pieces of data, A constructs its own send window.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587202028/computer_network/微信截图_20200418172540_by140j.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587202028/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418172540_by140j.png"></p>
<blockquote>
<p>There may be some people here who are suddenly a bit confused as I am. If you have to wait for B to return an acknowledgement of A each time before you can change the window position and size and then send the window data out, what is the difference between that and the stop-wait protocol? The difference I can see so far is that the window size may be much larger than the MSS, requiring multiple groupings to be sent out, and each acknowledgement does not mean that the entire window is acknowledged.</p>
</blockquote>
<p>For A’s send window, A can send all the data in the window continuously until an acknowledgement is received from B. Any data that has been sent must be temporarily stored until an acknowledgement is received, for use in timeout retransmissions.</p>
<p>The serial number inside the send window indicates the number of allowed sends. Obviously, the larger the window is, the more data the sender can send in succession before receiving an acknowledgement from the other party, thus obtaining higher data transmission efficiency.</p>
<p>The back part of the trailing edge of the send window means that the data has been sent and an acknowledgement has been received, and this data obviously does not need to be kept any longer. The leading part of the leading edge means that the sending is not allowed because the receiver has not reserved cache space for temporary storage of this data.</p>
<p>The position of the sending window is determined by both the leading edge and the trailing edge. There are two cases of changes in the trailing edge, i.e. not moving (no new acknowledgement received), and moving forward (new acknowledgement received). It is not possible for the trailing edge to move backward, because it is not possible to revoke an acknowledgement already received. The leading edge can keep moving forward, or it can be immobile. There are two cases of immobility, one is that no new confirmation is received, and the size of the window of more notifications is also unchanged, and the second is that a new confirmation is received, but the window of the other notification shrinks, which just makes the leading edge immobile. Of course the frontier can also shrink backward, but <strong>TCP standard strongly discourages doing so</strong>.</p>
<p>Now suppose A sends the data of serial numbers 31-41, the position of the sending window does not change at this time, the 11 bytes behind the window means that the acknowledgement has been sent but not received, and the 9 bytes in front means that the sending is allowed but not yet sent.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587203074/computer_network/微信截图_20200418174406_itnljo.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587203074/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418174406_itnljo.png"></p>
<p>As can be seen from the above figure, to describe the state of a send window requires three pointers, P1,P2,P3, less than P1 is the part that has been sent and received, and greater than P3 is the part that is not allowed to be sent.</p>
<p>The size of B’s receive window is 20. Outside the receive window, all data up to 30 has been acknowledged as sent and delivered to the host, so B can no longer retain this data. 31-50 is allowed to be received.</p>
<p>In the above diagram <strong>32,33 has been received by B, but not in order, because 31 has not been received, at this time B can only give an acknowledgement to the highest order number received in order, which means that the acknowledgement number in the message returned by B now is still 31</strong>.</p>
<p>If B receives number 31 and delivers 31-33 to the host, B deletes these data and moves the receive window forward by three serial numbers while sending an acknowledgement to A. The window value is 20 and the acknowledgement number is 34. After A receives it, P1,P3 move forward by three serial numbers and P2 remains unchanged.</p>
<p>Next, if A sends 42-53, <strong> pointers P2 and P3 overlap, the data in the window is sent, and no further acknowledgement is received, you need to stop sending</strong>.</p>
<h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>The sender’s application process writes the byte stream to TCP’s send cache, and the receiver’s application reads the byte stream from TCP’s receive cache</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587209077/computer_network/微信截图_20200418192408_lz3rfp.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587209077/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418192408_lz3rfp.png"></p>
<p>To be clear: both cache space and serial numbers are limited and recycled.</p>
<p>The send cache is used to temporarily store:</p>
<ul>
<li>The sending application transmits to the sender the data that TCP is ready to send.</li>
<li>The part of TCP that has been sent but not yet acknowledged.</li>
</ul>
<p><strong>The send window is usually only part of the send cache and the acknowledged data should be removed from the send cache, so the trailing edges of the send cache and the send window are coincident</strong>. The last byte written to the send cache by the sending application minus the last byte acknowledged is the number of bytes still remaining in the send cache to be written.</p>
<p>The receive cache is used to temporarily store:</p>
<ul>
<li>Sequentially arriving data that has not yet been read by the receiving application</li>
<li>Data that did not arrive in order.</li>
</ul>
<p>If the application does not have time to read the received data, the receive cache will eventually fill up and the receive window will be reduced to 0.</p>
<p>Three additional points<strong> are emphasized here</strong>:</p>
<ul>
<li>Although A’s send window is set according to B’s receive window, <strong>at the same time, the size of A’s send window is not the same size as B’s receive window</strong>. Because there is a delay in the transmission of the network, and A’s sending window is also limited by the network congestion, when congestion occurs, the value of its own sending window should be reduced appropriately.</li>
<li>For data that arrives out of order, TCP usually stores the data that arrives out of order<strong> in a cache</strong> first, and then delivers it to the upper layer application process<strong> in order when the missing bytes are received in the byte stream</strong>.</li>
<li>TCP requires the receiver to have cumulative acknowledgements. The receiver can send an acknowledgement when appropriate or piggyback the acknowledgement when it has data to send itself, but the acknowledgement should be delayed no more than 0.5 seconds.</li>
</ul>
<h3 id="Selection-of-timeout-retransmission-time"><a href="#Selection-of-timeout-retransmission-time" class="headerlink" title="Selection of timeout retransmission time"></a>Selection of timeout retransmission time</h3><p>TCP’s timeout retransmission time uses an adaptive algorithm. It records the time when a message segment is sent and the time when the corresponding acknowledgement is received. The difference between these two times is the message segment round-trip time RTT, and TCP keeps a weighted average round-trip time RTT<sub>s</sub> , also known as <strong>smoothed round-trip time</strong>.</p>
<p>When the RTT sample is measured for the first time, the RTT<sub>s</sub> takes the value of the RTT sample value and is recalculated every time the RTT is received next:</p>
<p><u>New RTT<sub>s</sub> = (1 - α)<em> (old RTT<sub>s</sub>) + α </em> new RTT samples</u></p>
<p>where the alpha is recommended to be 0.125</p>
<p>Obviously the timeout retransmission time RTO (RetransmissionTime-Out) should be slightly greater than RTT<sub>s</sub>.</p>
<p><u>RTO = RTT<sub>s</sub> + 4 * RTT<sub>D</sub></u></p>
<p>RTT<sub>D</sub> is the weighted average of the deviations from RTT<sub>s</sub>. For the first measurement, RTT<sub>D</sub> takes the value of half of RTT, and the following algorithm is used next:</p>
<p><u>New RTT<sub>D</sub> = (1 - β)<em>(old RTT<sub>D</sub>) + β </em> |RTT<sub>s</sub> - new RTT samples|</u></p>
<p>The recommended value of β is 0.25</p>
<p>Now there is a problem, when the set retransmission time is up, still no acknowledgement is received, so the message is retransmitted and after some time an acknowledgement is received, <strong> how to confirm whether this acknowledgement is for the previously sent message or for the retransmitted message? </strong>, this has a big impact on the RTT<sub>s</sub> calculation.</p>
<p>For this case, the current approach is to increase the RTO to twice as much for each retransmission of the message</p>
<h3 id="Select-to-confirm-SACK"><a href="#Select-to-confirm-SACK" class="headerlink" title="Select to confirm SACK"></a>Select to confirm SACK</h3><p>If there is no error in the received message segment, but it just <strong>didn’t arrive in order</strong>, and there is some serial number data missing in the middle, <strong>can we find a way to transmit only the missing data and not the data that has been received correctly? </strong></p>
<p>The answer is yes, it is SACK, and here is just a brief explanation of the principle.</p>
<p>Suppose the received message sequence number is 1 - 1000,1501 - 3000,3501 - 4500, the middle is missing two parts, if <strong>these bytes of the sequence number are within the reception window </strong>, then first these data received, but to find a way to notify the sending send I have received.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587211176/computer_network/微信截图_20200418195848_xt17r1.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587211176/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418195848_xt17r1.png"></p>
<p>From the above figure we can see that every byte block that is not contiguous with the preceding and following bytes has two boundaries, and the figure uses L1, R1, L2,R2 to represent these four boundaries</p>
<p>We know that the TCP header does not have a field that can be populated with such boundary values.</p>
<p>If you want to use SACK you have to add <strong>allow SACK option</strong> to the header during the TCP establishment phase. If you confirm the use, the original usage of the acknowledgement number field remains the same, only the SACK option is added to the options. However, a maximum of 4 bytes of information is specified in the option, because the serial number has 32 bits and requires four bytes, a byte block requires two serial numbers and 8 bytes, while two bytes are required to specify which are SACK options, 4 byte blocks will use up 34 bytes, and the maximum option is 40 bytes, so adding another byte block will exceed it.</p>
<h2 id="TCP-Traffic-Control"><a href="#TCP-Traffic-Control" class="headerlink" title="TCP Traffic Control"></a>TCP Traffic Control</h2><p>So-called flow control is to keep the sender from sending too fast and the receiver from receiving in time.</p>
<p>Traffic control on the sender side can be easily implemented using sliding windows.</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587211807/computer_network/微信截图_20200418200900_kruofd.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587211807/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418200900_kruofd.png"></p>
<p>The flow of the above diagram can be summarized as follows</p>
<ul>
<li>When the connection is established, B tells A: My receive window is rwnd = 400, so <strong>the sender’s send window cannot exceed the receive window given by the receiver</strong>. Note that the TCP window unit is bytes and not message segments.</li>
<li>Let the length of each message segment be 100 bytes, the initial sequence number be 1, ACK is the acknowledgement bit, and ack is the acknowledgement number.</li>
<li>B performed three flow controls, the first reducing rwnd to 300, the second to 100, and finally to 0.</li>
</ul>
<p>Think about a problem. If A sends a zero-window message segment shortly after B has space in its receive cache again and sends rwnd = 400 to A, but this message is lost, A keeps waiting for B to send a non-zero-window notification, and B keeps waiting for A’s data, a deadlock is created.</p>
<p>To solve this problem, TCP sets a persistent timer for each connection, and whenever the TCP side receives a zero-window notification, it turns on the timer, sends a probe message when it does, and breaks the deadlock if the result returned is not zero.</p>
<h3 id="Timing-of-sending-TCP-message-segments"><a href="#Timing-of-sending-TCP-message-segments" class="headerlink" title="Timing of sending TCP message segments"></a>Timing of sending TCP message segments</h3><p>The application process will transfer the data to the TCP send cache and leave the rest of the task to TCP. Different mechanisms can be used to control the timing of sending TCP message segments.</p>
<ul>
<li>The first one is to use MSS to encapsulate the data stored in the cache into a message segment and send it out as soon as the MSS is reached.</li>
<li>The second is the application specifying the send, such as PSH operations</li>
<li>The third is for the sender to set a timer and send the data in the cache packaged when the time comes.</li>
</ul>
<h2 id="Congestion-Control"><a href="#Congestion-Control" class="headerlink" title="Congestion Control"></a>Congestion Control</h2><p>In computer networks, link capacity, caches and processors in switching nodes are resources of the network. When the demand for a resource in the network exceeds the available portion of that resource, the network performance has to change, and this situation is called congestion.</p>
<p><strong>Congestion control is about preventing too much data from being injected into the network, which keeps the routers or links in the network from being overloaded</strong>.</p>
<p><strong>Congestion control is a global process</strong> that involves all hosts, routers and all factors related to degrading network transmission performance, while <strong>Traffic control</strong> often refers to the control of point-to-point traffic and is an <strong>end-to-end problem</strong>.</p>
<p>There are four congestion control algorithms for TCP, the very familiar <strong>slow start, congestion avoidance, fast retransmission, and fast recovery</strong>.</p>
<p>The sender maintains a value called the congestion window cwnd. The size of the congestion window depends on the congestion level of the network and is dynamically changing. The <strong>sender makes its sending window equal to the congestion window</strong>.</p>
<p>The principle of cwnd control on the sender side is to expand cwnd a bit as long as there is no congestion, and to reduce cwnd as long as there is congestion or the possibility of congestion, and <strong>the basis for determining that the network is congested is that there is a timeout</strong>.</p>
<h3 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h3><p>We also use this classic diagram to illustrate:</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587214008/computer_network/微信截图_20200418204614_kprnwt.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587214008/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418204614_kprnwt.png"></p>
<p><strong>The idea of </strong>slow start** is this: when the host starts to send data, it is not clear about the load of the network, and if a large amount of data is injected into the network immediately, congestion may occur, so it increases the cwnd from small to large.</p>
<ul>
<li><p>When the messages are first sent, the congestion window cwnd is first set to 2 to 4 sender maximum message segments SMSS.</p>
</li>
<li><p>If no acknowledgement is received, cwnd is increased by up to one SMSS.</p>
<p>cwnd per increment = min(N, SMSS), N is the number of bytes of messages that were originally unacknowledged and just received in the acknowledgment segment of the acknowledgment message.</p>
</li>
</ul>
<p>We use the following example to illustrate the principle of slow start. For the sake of illustration , we use the number of message segments as the unit of cwnd, which should actually be the number of bytes.</p>
<ul>
<li><p>At the beginning, the sender sets cwnd to 1, sends the first message M1, and the receiver receives M1 and returns an acknowledgement. After the sender receives an acknowledgement from M1, it increases cwnd from 1 to 2. Then it sends M2 and M3, and after receiving an acknowledgement from both, cwnd increases from 2 to 4, which means that the slow start algorithm, <strong>with each transmission round elapsed, cwnd doubles</strong>. The elapsed time of one transmission round is actually an RTT</p>
</li>
<li><p>To prevent cwnd from growing too fast, a <strong>slow start threshold ssthresh</strong> also needs to be set.</p>
<ul>
<li>When cwnd &lt; ssthresh, the slow start algorithm is used.</li>
<li>When cwnd &gt; ssthresh, use congestion avoidance algorithm</li>
<li>Both are possible when cwnd = ssthresh.</li>
</ul>
<p>The idea of congestion avoidance is to make cwnd grow slower and let cwnd add 1 for every RTT passed. when cwnd grows to ssthresh (point 1 in the figure) change to congestion control algorithm from slow start.</p>
</li>
<li><p>After a timeout (point 2 in the figure), the sender determines that the network is congested and adjusts ssthresh = cwnd / 2, cwnd = 1 to re-enter the slow start.</p>
</li>
<li><p>Sometimes the sender receives three ACKs in a row (point 4 in the figure). This occurs because it is thought that sometimes, individual message segments are lost in the network, when in fact the network is not congested, and if the sender is late in receiving an acknowledgement, a timeout is generated and it is thought that congestion has occurred, which can lead to a false start of slow start by the sender. The use of the <strong>fast retransmission algorithm allows the sender to know early that individual messages are lost</strong>.</p>
<p>The fast retransmission algorithm requires the receiver not to wait for its own data to be sent before waiting for an acknowledgement, but to <strong>send an acknowledgement immediately</strong>. Repeat acknowledgements of received messages are sent immediately even if out-of-sequence messages are received. Suppose the receiver receives M1 and M2 and acknowledges them in time, now suppose the receiver does not receive M3 but receives M4, the receiver cumulatively confirms that it can only send an acknowledgement of M2, and then receives M5 and M6, and retransmits two more acknowledgements of M2 respectively, the sender receives a total of four acknowledgements of M2, three of which are duplicates, and knows that the receiver should initiate an immediate retransmission.</p>
</li>
<li><p>At point 4 in the figure, the sender, knowing that only individual segments of the message are lost, does not perform a slow start but a fast recovery with ssthresh = cwnd / 2, cwnd = ssthresh.</p>
</li>
</ul>
<p>The above process can constantly adjust the size of cwnd, thus the size of the send window will be controlled by the level of congestion, but in reality the receiver has limited cache space, the receiver sets rwnd (receiver window, aka notification window) according to its receiving capability and writes this value into the window field in the TCP header, from the receiver’s point of view, the sender’s send window cannot exceed rwnd, so <strong>the upper limit of the sender’s sending window should be the smallest of rwnd and cwnd</strong>.</p>
<h2 id="TCP-connection-management"><a href="#TCP-connection-management" class="headerlink" title="TCP connection management"></a>TCP connection management</h2><p>We’ve said from the beginning that TCP is connection-oriented, and much of its design is based on that premise to function properly, so how does TCP establish and maintain that connection?</p>
<p>There are three problems to be solved during the establishment of a TCP connection:</p>
<ul>
<li>To enable each party to confirm the presence of the other</li>
<li>To allow both parties to agree on some values, such as the maximum window value</li>
<li>Ability to allocate resources to the most transportable entities.</li>
</ul>
<h3 id="TCP-connection-establishment-three-handshakes"><a href="#TCP-connection-establishment-three-handshakes" class="headerlink" title="TCP connection establishment (three handshakes)"></a>TCP connection establishment (three handshakes)</h3><p>The process of establishing a TCP connection is called handshaking and requires the exchange of three TCP messages between the client and the server</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587215346/computer_network/微信截图_20200418210855_mpcozg.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587215346/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418210855_mpcozg.png"></p>
<ul>
<li>Initially both ends are closed, in the above diagram it is A that actively opens the connection and B that passively opens it.</li>
<li>At the beginning B’s TCP server creates the transport control block TCB, ready to accept connections from client processes, and then the server is in the LISTIN state.</li>
<li>A’s TCP client creates a TCB, and before establishing a connection, first sends a connection request message to B with synchronization bit SYN = 1, while selecting an initial sequence number seq = x. TCP specifies that SYN messages cannot carry data, but a sequence number is consumed and the TCP client enters the SYN-SENT state</li>
<li>After receiving the request message, B sends an acknowledgement to A if it agrees to establish a connection, sets both SYN and ACK to 1, ack to x + 1, and chooses an initial sequence number for itself seq = y. This message segment also cannot carry data, but consumes a sequence number.</li>
<li>The TCP client of A has to give an acknowledgement to B after receiving the acknowledgement from B. ACK is 1, ack = y + 1, seq = x + 1, and at this time, the ACK message segment can carry data. At this time, A has entered the ESTABLISHED state, and B has also entered the ESTABLISHED state after receiving the acknowledgement.</li>
</ul>
<p>The above process is called three handshakes, but the message segment sent by B to A can also be split into two message segments by sending an ACK = 1, ack = x + 1, and a synchronization message (SYN = 1, seq = y),<strong> which becomes four handshakes. </strong></p>
<p><strong>So why does A send an acknowledgement at the end? The main reason is to prevent connection request messages that have failed from suddenly arriving at B again</strong>. This situation generally arises after the first connection request message sent by A timeout, A again sent a request, B received a second request to complete the establishment of the connection and send data, after releasing the connection after the first request again, this time if B did not receive a second confirmation from A, it will not care about the first request.</p>
<h3 id="TCP-connection-release-four-waves"><a href="#TCP-connection-release-four-waves" class="headerlink" title="TCP connection release (four waves)"></a>TCP connection release (four waves)</h3><p>The release process is similar to the build process, except that it is more complex and uses a header field of FIN</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587216170/computer_network/微信截图_20200418212241_j13fkc.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587216170/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418212241_j13fkc.png"></p>
<ul>
<li><p>A’s application process first sends a connection release message to its TCP and stops sending data, actively closing the TCP connection</p>
</li>
<li><p>A sets the first field of the connection release message, FIN, to 1, with the sequence number seq = u, which is equal to the sequence number of the last byte of all data transmitted before it plus 1. At this point, A enters the FIN-WAIT-1 (abort-wait-1) state.</p>
</li>
<li><p>B receives the connection release message and sends an acknowledgement, ack = u + 1, with its own ordinal number seq = v, equal to the ordinal number of the last byte of data transmitted by B plus 1, and then B enters the CLOSE-WAIT (closed and waiting) state. At this point TCP enters a <strong>semi-closed state</strong>, i.e. A has no more data to send, but if B wants to send data, A can accept it, i.e. the connection from <strong>B to A is not closed</strong>.</p>
</li>
<li><p>A receives an acknowledgment hand from B and enters the FIN-WAIT-2 state, waiting for a release message from B.</p>
</li>
<li><p>If B has no more data to send, its application process notifies TCP to release the connection, at which point B sends a FIN message, seq = w (assuming B has sent some data in the semi-closed state), and ack remains u + 1.</p>
</li>
<li><p>After A receives the connection release message, it must send an acknowledgement for it, ACK = 1, ack = w + 1, seq = u + 1, and then enters the TIME-WAIT state. After the time set by the Time-WAIT timer (TIME-WAIT timer) of 2MSL, A enters the CLOSED state, MSL is called Maximum MSL is called Maximum Segment Lifetime (MSL).</p>
<p>There are two reasons for waiting this amount of time:</p>
<ul>
<li>It is guaranteed that the last ACK message sent by A reaches B. This message may be lost, so B may retransmit the last FIN message, at which time it is necessary for A to retransmit an acknowledgement and then restart the 2MSL timer.</li>
<li>Preventing the above-mentioned failed connections by waiting for 2MSL ensures that all messages generated during the duration of this connection disappear from the network.</li>
<li>In addition to the time waiting timer, there is a keepalive timer, the server did not receive a client data, it will reset it, the time is two hours, if two hours did not receive data, it will send a probe message, every 75 seconds to send a, if there is no reply for 10 consecutive, then close the connection.</li>
</ul>
</li>
</ul>
<h2 id="TCP’s-finite-state-machine"><a href="#TCP’s-finite-state-machine" class="headerlink" title="TCP’s finite state machine"></a>TCP’s finite state machine</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587217099/computer_network/微信截图_20200418213810_lbd6iv.png" alt="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1587217099/computer_network/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200418213810_lbd6iv.png"></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
  </entry>
  <entry>
    <title>15 Essentials for Cloud Native Apps</title>
    <url>/en/posts/d20b574c/</url>
    <content><![CDATA[<p>Read the notes,<a href="https://learning.oreilly.com/library/view/beyond-the-twelve-factor/9781492042631/?download=true">原文链接</a></p>
<span id="more"></span>
<h2 id="One"><a href="#One" class="headerlink" title="One"></a>One</h2><p>Cloud Native applications must always consist of a single code repository tracked in the version control system. A code repository is a source code repository or group of repositories that share a common root.</p>
<p>A single code repository for an application is used to generate any number of immutable publishers<a href="https://learning.oreilly.com/library/view/beyond-the-twelve-factor/9781492042631/ch01.html#idm139821584969376">1</a>, these publishes are intended to be used in different environments. Following this particular discipline, the team must analyze the seams of its application and potentially determine the whole that should be split into microservices.<a href="https://learning.oreilly.com/library/view/beyond-the-twelve-factor/9781492042631/ch01.html#idm139821584968992">2</a>If you have multiple code repositories, you have a system that needs to be decomposed, not a single application.</p>
<p>This rule can be broken when a codebase is used to generate multiple applications. For example, a single codebase has multiple startup scripts or even multiple execution points in a single wrapper module.</p>
<p>Multiple applications in a single codebase often indicate that multiple teams are maintaining a codebase, which can become ugly for a variety of reasons.</p>
<p>In other words, <em> one codebase, one application </em> does not mean that you are not allowed to share code between multiple applications. It just means that sharing code is another codebase.</p>
<p>This also does not mean that all shared code must be microservices. Instead, you should evaluate whether shared code should be considered as a separately released product.</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Assuming you have fully embraced all the other factors discussed in this book. You are building a native cloud application, after checking the code into the repository, the tests will be automatically run, and the release candidate can be run in a laboratory environment within a few minutes.</p>
<p>Now, another team in your organization starts building services that interact with your code. Then, another team sees it, and they join the team and bring their services. Soon, you will have multiple teams working together to build services with horizontal dependencies, all at different release rhythms.</p>
<p>The nightmare of integration failures can occur without discipline. To avoid these integration failures and formally recognize your API as a first-class artifact of the development process, <em> APIs first </em> enable teams to collaborate with each other on public contracts without interfering with the internal development process.</p>
<p>The concept of “<em> mobile first” </em> is getting more and more attention. It refers to everything you do from the beginning of a project revolving around the idea that what you build is a product that mobile devices are going to consume. Similarly, <em> API first </em> means that you are building an API for use by Client applications and services.</p>
<p>By designing your API first, you can easily discuss it with your stakeholders (your internal team, customers, or other teams in your organization who may want to use your API) until you code yourself to the point where you can’t return. Then, with this collaboration, you can build user cases, mock up APIs, and generate docs that can be used to further socialize the intent and functionality of the built service.</p>
<p>All of this can be done to review (and test!) your direction and plan without having to invest too much money in the pipeline that supports a given API.</p>
<p>This mode is an extension of the contract-first development mode, in which developers focus on building the edges or seams of their applications first. Continuous testing of integration points through CI servers allows both teams to use their own services and still maintain reasonable assurance that all components work properly.</p>
<ul>
<li>APIs first * liberate organizations from waterfalls, elaborate systems that follow pre-planned orchestration patterns and allow products to evolve into organic, self-organizing ecosystems that can grow to respond to new and unforeseen needs.</li>
</ul>
<h2 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h2><p>The cloud is the maturity of the classic enterprise model, therefore, our applications need to <em> grow </em> to take advantage of the cloud. Applications cannot assume that servers or application containers will have everything they need. Instead, applications need to carry dependencies with them.</p>
<p>Most contemporary programming languages have some tools for managing application dependencies. ‘Maven’ and’Gradle ‘are two of the most popular tools in the Java world. Regardless of which tool is used, these utilities provide a common set of features: they allow developers to declare dependencies and make the tool responsible for ensuring those dependencies are met.</p>
<p>Many of these tools also have the ability to isolate dependencies. This is done by analyzing declared dependencies and bundling (also known as <em> vendoring </em>) these dependencies into a substructure underneath or within the application artifact itself.</p>
<p>Failure to properly isolate dependencies can lead to unsolvable problems. Among some of the most common dependency-related problems, you can have a developer version X working on a workstation with some dependency libraries, but version <em> X + 1 </em> the library is installed in a central location in production. This can lead to everything from runtime failures all the way down to subtle faults that are insidious and difficult to diagnose. If left unaddressed, these types of failures can bring down an entire server or cost a company millions of dollars due to undiagnosable data corruption.</p>
<p>Properly managing the dependencies of an application is about the concept of redeployable. It should not be considered that the runtime of deploying an application is not automated. Ideally, the container of the application is bundled (or booted, as some frameworks call it) in the release artifacts of the application, or better yet, the application has no container at all.</p>
<h2 id="Design"><a href="#Design" class="headerlink" title="Design,"></a>Design,</h2><ul>
<li>Build, Release, Run <em> requires a strict distinction between the build and run phases of development. This is excellent advice, and failure to follow this guideline may cause you difficulties in the future. In addition to the </em> Build, Release, Run <em> trio of Three-factor Verification, discrete </em> design * steps are also critical.</li>
</ul>
<p>The process from design to code to run is an iterative process that can happen in a small or longer amount of time that your team can handle. If the team has a mature CI/CD process, it can take several minutes from design to production.</p>
<p>A single codebase will be used during the build process to generate compiled artifacts. This artifact is then merged with configuration information <em> external to the application to produce an </em> immutable * published version. The immutable version is then released to the cloud environment (development, QA, production, etc.) and run. The focus of this chapter is that each of the following deployment phases is isolated and occurs separately.</p>
<h3 id="Design-1"><a href="#Design-1" class="headerlink" title="Design"></a>Design</h3><p>In the world of waterfall application development, we spend a lot of time designing applications before writing a single line of code. This type of software development lifecycle does not adapt well to the needs of modern applications that need to be released frequently.</p>
<p>However, this doesn’t mean that we don’t design at all. Instead, it means that we design small features to be released, and we have a high-level design that informs everything we do. But we also know that designs change, and a small amount of design is part of <em> each iteration </em>, not completely up-front.</p>
<p>Application developers best understand the dependencies of the application, and declare them at the design stage to declare dependencies and the way these dependencies are sold or bundled into the application. In other words, the developer decides which libraries the application will use and how to bundle these libraries into an immutable published version.</p>
<h3 id="Establish"><a href="#Establish" class="headerlink" title="Establish"></a>Establish</h3><p>During the build phase, the code repository is converted into versioned binary artifacts. During this phase, dependencies declared during the design phase are extracted and bundled into the build artifacts (often referred to simply as “builds”). In Java world, a build could be a WAR <a href="https://learning.oreilly.com/library/view/beyond-the-twelve-factor/9781492042631/ch04.html#idm139821584893536">1</a>Or JAR files, or possibly ZIP files or binary executables for other languages and frameworks.</p>
<p>Ideally, a build is created by a Continuous Integration server, and there is a 1: many relationship between build and deployment. A single build should be able to be released or deployed to any number of environments, and each unmodified build should be able to work as expected. The immutability of this artifact, as well as compliance with other factors (especially <em> environment parity </em>), gives you confidence that if your application can run in quality check, it will run in a production environment.</p>
<p><strong> If you find yourself troubleshooting “working on my machine” issues, it’s a clear indication that the four stages of this process may not be as separate as they should be. </strong></p>
<h3 id="Publish"><a href="#Publish" class="headerlink" title="Publish"></a>Publish</h3><p>In the Cloud Native world, publishing is usually done by pushing to your cloud environment. The output of the build phase is combined with environment-specific and application-specific configuration information to produce another immutable artifact, the <em> publish version </em>.</p>
<p>Versions must be unique, and ideally, each version should be labeled with some kind of unique ID, such as a timestamp or auto-increment number.</p>
<p>Let’s say your CI system has just built your application and tagged that artifact build-1234. The CI system can then publish the application to development, staging, and production environments. The scenario is up to you, but each publish should be unique because each publish combines the original with <em> environment-specific </em> configuration settings.</p>
<p>If something goes wrong, you want to be able to audit what has been published to a given environment and roll back to a previous version if necessary. This is another key reason to keep releases immutable and uniquely identified.</p>
<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><p>The runtime phase is usually also done by cloud providers (although developers need to be able to run applications locally). Details vary between providers, but the usual pattern is to place your application in some kind of container (Docker, Garden, Warden, etc.) and then start a process to launch your application.</p>
<p>It is worth noting that ensuring that developers can run applications locally on their own workstations, while still allowing them to deploy to multiple clouds through CD pipelines, is usually a difficult problem to solve. However, this is worth solving because developers need to be unhindered when dealing with native cloud applications.</p>
<p>When the application is running, the cloud runtime will be responsible for keeping it running, monitoring its health and aggregating its logs, as well as a large number of other management tasks, such as dynamic scaling and fault tolerance.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration,"></a>Configuration,</h2><h3 id="Configurational-chemistry"><a href="#Configurational-chemistry" class="headerlink" title="Configurational chemistry"></a>Configurational chemistry</h3><p>Think of configurations, credentials, and codes as volatile substances that explode when combined.</p>
<p>This may sound a bit harsh, but not following this rule can cause you to be extremely frustrated, which will only bring your application closer to a production environment.</p>
<p>In order to keep configuration separate from code and credentials, we need to have a very clear definition of configuration. Configuration refers to any value that can change with deployment (for example, developer workstation, QA, and production). This may include:</p>
<ul>
<li>URLs and other information about fallback services, such as web services and SMTP servers</li>
<li>Information needed to find and connect to the database<br>Credentials for third-party services (such as Amazon AWS) or APIs (such as Google Maps, Twitter, and Facebook)<br>Information that may typically be bundled in properties files or configuration XML or YML</li>
</ul>
<p>Configuration does not include internal information that it is part of the application itself. Similarly, if the value remains unchanged across all deployments (which is part of your immutable building block), it is not a configuration.</p>
<p>Credentials are extremely sensitive information and there are absolutely no transactions in the codebase. Typically, developers will extract credentials from compiled source code and put them into properties files or XML configurations, but this doesn’t actually solve the problem. Bundled resources, including XML and properties files, are still part of the codebase. This means that credentials bundled in resource files that come with your application still violate this rule.</p>
<h3 id="Treat-your-application-like-open-source"><a href="#Treat-your-application-like-open-source" class="headerlink" title="Treat your application like open source"></a>Treat your application like open source</h3><p>Check if you have properly externalized credentials and configuration to imagine the consequences of pushing application source code to GitHub.</p>
<p>If the public has access to your code, are you exposing sensitive information about the resources or services your application relies on? Can people see internal URLs, credentials for support services, or other information that is sensitive or irrelevant to people not working in the target environment?</p>
<p>If you can open source the codebase without exposing sensitive or environment-specific information, you may have isolated the code, configuration, and credentials well.</p>
<p>Obviously, we don’t want to expose credentials, but the need for external configuration is often not so obvious. External configuration supports our ability to <em> automatically </em> deploy immutable versions to multiple environments through CD pipelines, and helps us maintain parity between development/production environments.</p>
<h3 id="Externalized-configuration"><a href="#Externalized-configuration" class="headerlink" title="Externalized configuration"></a>Externalized configuration</h3><p>It’s one thing to say that your application’s configuration should be <em> externalized </em>, but it’s another thing to actually do it. If you’re using a Java application, you might bundle the release artifact with a property file. Other types of applications and languages tend to use YAML files, while .NET applications traditionally get their configuration from XML-based <em> web.config </em> and <em> machine.config </em> files.</p>
<p>You should think of <em> all </em> of these as <em> anti-patterns </em> of the cloud. All of these situations make it impossible for you to change configurations between environments while still maintaining the same published artifacts.</p>
<p>The brute force approach to externalizing configuration is to get rid of all the configuration files and then traverse the codebase and modify them in the expectation that all these values are provided by environment variables. Environment variables are considered a best practice for externalizing configuration, especially on Cloud Computing platforms like Cloud Foundry or Heroku.</p>
<p>Depending on your cloud provider, you may be able to use their tools to manage <em> fallback services </em> or <em> bind services </em> to expose structured environment variables containing service credentials and URLs to applications in a secure manner.</p>
<p>Another way you are strongly advised to externalize your configuration is to actually use a server product that is designed to expose the configuration. One such open source server is Spring Cloud Configuration Server, but there are countless other products available. One thing you should be aware of when purchasing a configuration server product is support for version control. If you are externalizing your configuration, you should be able to secure data changes and get a history of who made the changes and when. It is this requirement that makes a configuration server located at the top of a version control repository (such as <em> git) </em> attractive.</p>
<h2 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h2><p>Logs should be treated as <em> event streams </em>, that is, logs are sequences of events emitted from an application in chronological order. The key to handling logs the Cloud Native way is that true Cloud Native applications never route or store their own output streams.</p>
<p>Cloud applications cannot make any assumptions about the file system they are running on, unless it is ephemeral. Native cloud applications write all their log entries to’stdout ‘and’stderr’. This can scare a lot of people, worried that it means losing control.</p>
<p>You should consider the aggregation, processing, and storage of logs as a non-functional requirement that is not met by your application, but by your cloud provider or other tool suite that runs in partnership with the platform.</p>
<p>When your application is decoupled from the knowledge of log storage, processing, and analysis, your code will become simpler, and you can rely on industry-standard tools and stacks to handle logs. In addition, if you need to change the way logs are stored and processed, there is no need to modify the application *.</p>
<p>One of the many reasons your application should not control the ultimate fate of its logs is due to scalability. When you have a fixed number of instances on a fixed number of servers, it seems to make sense to store logs on disk. But when your application can go from 1 running instance to 100 on the fly, and you don’t know <em> where </em> those instances are running, you need your cloud provider to aggregate those logs on your behalf.</p>
<p>Simplifying the application’s log sending process allows you to reduce the code base and focus more on the core business value of the application.</p>
<h2 id="Disposability"><a href="#Disposability" class="headerlink" title="Disposability"></a>Disposability</h2><p>On a cloud instance, the life of an application is as short as the infrastructure that supports it. The process for Cloud Native applications is one-time, which means they can be started or stopped quickly. <strong> If an application cannot be started quickly and shut down properly, it cannot be quickly scaled, deployed, released, or restored </strong>. We need to build applications that not only realize this, but must also <em> embrace </em> it to make the most of the platform.</p>
<p><strong> If you are launching an application and it takes a few minutes to enter a stable state, in today’s high-traffic world, this can mean rejecting hundreds or thousands of requests when launching the application </strong>. What’s more, depending on the platform on which the application is deployed, such a slow startup time may actually trigger alerts or warnings because the application cannot pass its health check. Extremely slow startup times may even prevent your application from launching completely in the cloud.</p>
<p>If your application is under increasing load, and you need to quickly launch more instances to handle that load, any delay in the startup process may hinder its ability to handle that load. If the application fails to shut down quickly and properly, it may also prevent the ability to restart it again after failure. Failure to shut down the system fast enough may also bring the risk of not being able to process resources, which may corrupt data.</p>
<p>When writing many applications, they perform many long-running activities during startup, such as fetching data to fill the cache or preparing other runtime dependencies. In order to truly embrace the Cloud Native architecture, this activity needs to be handled separately. For example, <strong> you can externalize the cache as a <em> support service </em> so that your application can quickly perform up and down operations without the need for preload operations </strong>.</p>
<h2 id="Backing"><a href="#Backing" class="headerlink" title="Backing"></a>Backing</h2><p>A <em> support service </em> is any service that your application relies on for its functionality. This is a fairly broad definition, and its broad scope is intentional. Some of the most common types of support services include data storage, messaging systems, caching systems, and many other types of services, including those that perform business functions or security.</p>
<p>When building applications designed to run in cloud environments where file systems must be treated as ephemeral, you also need to treat file storage or disk as a fallback service. You should not read or write files on disk as you would with regular enterprise applications. Instead, file storage should be a support service bound to your application as a resource.</p>
<p>An application, a set of support services, and resource bindings (connection lines) for these services. Binding resources is really just a way to connect your application to support services. Resource bindings for a database may include usernames, passwords, and URLs that allow your application to use that resource.</p>
<p>We should have externalized configuration (separate from credentials and code), and our published product must be immutable. Applying these other rules to the way the application uses background services, we end up with some rules for resource binding:</p>
<p>Applications should <em> declare </em> their requirements for a given support service, but should allow the cloud environment to perform actual resource binding.</p>
<ul>
<li>The binding of the application to its supporting services should be done through external configuration.</li>
<li>It should be possible to attach and detach support services from the application at will <em> without redeploying the application </em>.</li>
</ul>
<p>For example, suppose you have an application that needs to communicate with an Oracle database. You write your application so that its specific Oracle database dependencies <em> are declared </em> (the way this is declared is usually for a certain language or toolset) <em>. </em> The source code of the application assumes that the configuration of resource binding occurs outside the application.</p>
<p>This means that there will <em> never </em> be lines of code in your application that tightly couple the application to a specific support service. Similarly, you may also have a support service for sending emails, so you know you will communicate with it via SMTP. However, the exact implementation of the mail server has no impact on your application, and your application should not rely on an SMTP server that exists in a specific location or has specific credentials.</p>
<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>Although some organizations have made greater developments, many of us may be working in environments where the Shared Development Environment has different scalability and reliability profiles compared to QA, and QA differs from the production environment. the database drivers used in dev and QA differ from the production version. Security rules, firewalls, and other environment configuration settings also differ. Some people are able to deploy to certain environments, while others do not. Finally, and worst of all, people are afraid to deploy, they have little confidence that if the product works in one environment, it will work in another.</p>
<p>While discussing the <em> design, build, release, run </em> cycle, I brought up the notion that the “run on my machine” scenario is the Cloud Native anti-pattern. The same goes for other phrases we’ve heard before losing hours or days of firefighting and troubleshooting: “It works in Quality Assurance” and “It works in the product”.</p>
<p>The purpose of applying rigor and discipline to environmental parity is to give your team and the entire organization confidence that the application <em> can be used anywhere </em>.<a href="https://learning.oreilly.com/library/view/beyond-the-twelve-factor/9781492042631/ch09.html#idm139821584754432">1个</a></p>
<p>While the opportunities to create gaps between environments are almost limitless, the most common culprits are usually:</p>
<ul>
<li>Time</li>
<li>People</li>
<li>Resources</li>
</ul>
<h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3><p>In many organizations, it can take weeks or months from developers checking in code to production completion. In such organizations, you will often hear phrases such as “Q3 release” or “20xx December release”. Such phrases are a warning sign for anyone paying attention.</p>
<p>When there is such a time interval, people often forget what changes were made in the release (even if there are enough release notes), and more importantly, developers have forgotten what the code looks like.</p>
<p>With a modern approach, organizations should strive to reduce the time interval from check-in to production, from weeks or months to <em> minutes or hours </em>. The end of the correct CD pipeline should be to perform automated testing in different environments until changes are automatically pushed to the <em> production </em> environment. With the help of a cloud that supports zero downtime deployment, this pattern can become the norm.</p>
<h3 id="People"><a href="#People" class="headerlink" title="People"></a>People</h3><ul>
<li>Humans * Applications should never be deployed, at least not to any environment other than your own workstation or lab. If the correct build pipeline exists, the application will be automatically deployed to all applicable environments based on CI tools and security restrictions within the target cloud instance, and can be manually deployed to other environments.</li>
</ul>
<p>In fact, even if your target is a public cloud provider, you can still use cloud-hosted CD tools like CloudBees or Wercker to automate your testing and deployment.</p>
<p>Although there are always exceptions, I think if you can’t deploy by pressing a button or automatically responding to some event, you’re doing it wrong.</p>
<h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>The way we use and provide <em> support services </em> is usually one such compromise. Our application may require a database, and we know that in production we will connect it to an Oracle or Postgres server, but setting it up to be available locally for development is very cumbersome, so we will compromise and use an in-memory database that is * like the target database.</p>
<p>Every time we make one of these compromises, we widen the gap between our development and production environments. The bigger the gap, the less predictable we are about how our applications work. As predictability declines, so does reliability. If reliability declines, we lose the <em> continuous </em> process from code check-in to production deployment. It makes everything we do vulnerable. The worst part is that we often don’t know the consequences of increasing the dev/prod gap until it’s too late.</p>
<p>When evaluating every step in the development lifecycle when building on-premises cloud applications, you need to flag and question every decision that increases the functional gap between deployment environments, and you need to resist the urge to mitigate this by allowing your environment to maintain the difference even if it seems trivial at the time.</p>
<h2 id="Administrative"><a href="#Administrative" class="headerlink" title="Administrative"></a>Administrative</h2><p>In some cases, using a management process is actually not a <em> good </em> idea, and you should always be asking yourself if a management process is what you want, or if a different design or architecture is better suited to your needs. Examples of management processes that might be refactored into something else include:</p>
<ul>
<li>Database migration</li>
<li>Interactive Programming Console (REPL)</li>
<li>Run timed scripts, such as nightly batch jobs or hourly imports</li>
<li>Run a one-time job that only executes custom code once</li>
</ul>
<p>First, let’s look at the issue of timers (usually managed by applications such as Autosys or Cron). One idea might be to only internalize timers and have your application wake up every <em> n </em> hour to perform its batch operations. On the surface, this seems like a good solution, but what happens when there are 20 application instances running in one Availability Zone and another 15 instances running in another zone? If they are all performing the same batch operation on the timer, you are basically causing confusion at this point, and corrupted or duplicate data will be just one of many terrible events caused by this pattern.</p>
<p>Interactive shells are also problematic for a number of reasons, but the biggest one is that even if it is possible to reach that shell, you can only interact with the temporary memory of a single instance. If the application is properly built as a <em> stateless process </em>, then I think there is little value in exposing the REPL for process introspection.<a href="https://learning.oreilly.com/library/view/beyond-the-twelve-factor/9781492042631/ch10.html#idm139821584721360">2</a></p>
<p>Next, let’s look at the mechanism that triggers a timed or batch management process. This is usually Autosys that occurs due to some external timer stimulus (such as cron or) executing a shell script. In the cloud, you can’t expect to be able to invoke these commands, so you need to find other ways to trigger temporary activities in your application.</p>
<p>There are multiple solutions, but the one I find most appealing is to expose a RESTful endpoint that can be used to invoke ad hoc functionality, especially when migrating the rest of the application to Cloud Native.</p>
<p>This still allows the timing function to be called at will, but moves the stimulus for this operation <em> outside </em> of the application. In addition, this method solves the <em> problem that internal timers can only be executed </em> once <em> at most </em> on dynamic scaling instances. Batch operations are processed once by one application instance and can then interact with other <em> support services </em> to complete the task. Securing batch endpoints should also be fairly simple so that they can only be operated by authorized personnel. Even more useful, your batch operations can now be flexibly scaled and take advantage of all other cloud benefits.</p>
<p>If you still feel the need to take advantage of management processes, you should make sure to use them in a way that is consistent with the functionality provided by your cloud provider. In other words, don’t use your preferred programming language to generate new processes to run your work; use tools designed to run one-time tasks in a Cloud Native way.</p>
<h2 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h2><h3 id="Avoid-ports-identified-by-the-container"><a href="#Avoid-ports-identified-by-the-container" class="headerlink" title="Avoid ports identified by the container"></a>Avoid ports identified by the container</h3><p>Web applications (especially those already running inside an enterprise) are often executed in some kind of server container. Java world is full of containers like Tomcat, JBoss, Liberty, and WebSphere. Other web applications may run in other containers, such as Microsoft Internet Information Server (IIS).</p>
<p>In non-cloud environments, web applications have been deployed into these containers, and then the container is responsible for assigning ports to the application when it starts.</p>
<p>An extremely common pattern in enterprises that manage their own web servers is to host multiple applications in the same container, separate the applications by Port Number (or URL hierarchy), and then use DNS to provide a user-friendly appearance around that server. For example, you might have a host called appserver (virtual or physical), and have assigned ports 8080 through 8090. Instead of having users remember the Port Number, use DNS hostname associations like app1 for some applications, appserver: 8080 for app2, and so on.</p>
<h3 id="Avoid-micro-management-port-allocation"><a href="#Avoid-micro-management-port-allocation" class="headerlink" title="Avoid micro-management port allocation"></a>Avoid micro-management port allocation</h3><p>Platform as a Service is adopted here, so that both developers and developers no longer have to perform this micro-management. Your cloud provider should manage port allocation for you, as it may also manage routing, scaling, high availability, and fault tolerance, all of which require the cloud provider to manage certain aspects of the network, including routing hostnames to ports and mapping external Port Numbers to container internal ports.</p>
<p>The original 12 factors for port binding use the term “export” because it is assumed that cloud-native applications are independent and never injected into any type of external application server or container.</p>
<p>Practicality and the nature of existing enterprise applications can make it difficult or impossible to build applications in this way. As a result, there are slightly less restrictive guidelines that <em> a 1:1 association must always be maintained between the application and the application server </em>. In other words, your cloud provider may support web application containers, but it is extremely unlikely to support hosting multiple applications in the same container, as it is nearly impossible to achieve durability, scalability, and elasticity.</p>
<p>For modern applications, the impact of port binding on developers is very simple: your application can <a href="http://localhost:12001">http://localhost:12001</a> run on the developer’s workstation, while in quality check it can run on <a href="http://192.168.1.10:2000">http://192.168.1.10:2000</a> and <a href="http://app.company.com">http://app.company.com</a> in the production environment. Applications developed with export port binding in mind support this environment-specific port binding without any code changes.</p>
<h3 id="Application-is-a-support-service"><a href="#Application-is-a-support-service" class="headerlink" title="Application is a support service"></a>Application is a support service</h3><p>Finally, applications developed to allow externalized runtime port binding can act as support services for another application. This flexibility and all the other benefits of running on the cloud are very powerful.</p>
<h2 id="Stateless-process"><a href="#Stateless-process" class="headerlink" title="Stateless process"></a>Stateless process</h2><h3 id="Practical-Definition-of-Stateless"><a href="#Practical-Definition-of-Stateless" class="headerlink" title="Practical Definition of Stateless"></a>Practical Definition of Stateless</h3><p>One of the questions I often ask is due to confusion over the concept of statelessness. People want to know how to build a stateless process. After all, every application needs <em> some </em> state, right? Even the simplest applications leave some data floating, so how can you have a truly stateless process?</p>
<p>Stateless Application does not make any assumptions about the contents of memory before processing the request, nor does it make any assumptions about the contents of memory after processing the request. During the processing of requests or transactions, the application can create and use transients, but when the client receives a response, the data should all disappear.</p>
<p>Simply put, all persistent state must be external to the application, provided by a backup service.</p>
<p>For example, a microservice that exposes functions for user management must be stateless, so a list of all users is maintained in a support service such as an Oracle or MongoDB database. For obvious reasons, database statelessness is meaningless.</p>
<h3 id="Shared-free-mode"><a href="#Shared-free-mode" class="headerlink" title="Shared-free mode"></a>Shared-free mode</h3><p>Processes often communicate with each other by sharing common resources. Even without considering migrating to Cloud Services, there are many benefits to adopting a no <em> sharing </em> model.</p>
<p>First, anything that is shared between processes is the responsibility that makes all of these processes more vulnerable. In many high availability models, processes will share data through multiple technologies to choose a cluster leader, determine if a process is a primary or a backup process, and so on.</p>
<p>When running in the cloud, you need to avoid all of these options. Your processes can disappear instantly without any warning, <em> which is a good thing </em>. Processes come and go, scale horizontally and vertically, and are highly disposable. This means that anything shared between processes can also disappear, potentially causing cascading failures.</p>
<p>Needless to say, but <em> the file system is not a fallback service </em>. This means that you cannot view files as a way for applications to share data. Disks in the cloud are temporary disks, and in some cases even read-only disks.</p>
<p>If processes need to share data, such as the session state of a group of processes forming a web farm, this session state should be externalized and made available through a true support service.</p>
<h3 id="Data-cache"><a href="#Data-cache" class="headerlink" title="Data cache"></a>Data cache</h3><p>Especially in container-based long-running web applications, a common pattern is to cache frequently used data during process startup. As mentioned in this book, processes need to start and stop quickly, and spending a long time filling the cache in memory violates this principle.</p>
<p>To make matters worse, storing what your application thinks is always available in-memory cache can make your application bloated, leaving each of your instances (which should be scalable elastically) consuming far more memory than it needs.</p>
<p>There are dozens of third-party caching products, including Gemfire and Redis, all of which are designed to act as fallback service caches for applications. They can be used for session state, but also for caching data that may be needed during startup and avoiding tightly coupled data sharing between processes.</p>
<h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><ul>
<li>Concurrency <em>, it is recommended that we </em> scale <em> native cloud applications using the process model. Sometimes, if the application reaches its capacity limit, the solution is to increase its size. If the application can only handle a certain number of requests per minute, the preferred solution is to simply make the application </em> larger *.</li>
</ul>
<p>Adding CPU, RAM, and other resources (virtual or physical) to a single monolithic application is called vertical scaling, and this type of behavior is generally unpopular in today’s civilized society.</p>
<p>A more modern approach, ideally the kind of elastically scalable cloud support, is to scale up <em>*, or </em> horizontally *. Instead of making a large process bigger and then distributing the application load between these processes, you can create multiple processes.</p>
<p>Most cloud providers have perfected this feature and can even configure rules that will dynamically scale the number of application instances based on the available load or other runtime telemetry in the system.</p>
<p>If you want to build a one-time, stateless, shared-free process, you will be able to take full advantage of horizontal scaling and running multiple concurrent instances of the application</p>
<h2 id="Telemetry"><a href="#Telemetry" class="headerlink" title="Telemetry"></a>Telemetry</h2><p>When monitoring applications, there are usually several different categories of data.</p>
<p>Application Performance Monitoring (APM)</p>
<ul>
<li>Specific domain telemetry</li>
<li>Health status and system logs</li>
</ul>
<p>The first is APM, which consists of a series of events that tools outside the cloud can use to monitor the health of your application. This is something you are responsible for, as the definition and watermark of performance is specific to your application and criteria. The data used to provide the APM dashboard is often quite generic and can come from multiple applications across multiple Lines of Business.</p>
<p>Second, domain-specific telemetry is also up to you. This refers to events and data streams that are meaningful to your business and can be used for your own analysis and reporting. Such event streams are often fed into “Big data” systems for warehousing, analysis, and prediction.</p>
<p>The difference between APM and domain-specific telemetry may not be immediately apparent. Think of it this way: APM can provide you with the average number of HTTP requests processed per second by your application, while domain-specific telemetry can tell you the number of widgets sold to iPad users in the last 20 minutes.</p>
<p>Finally, health and system logs should be provided by your cloud provider. They make up a series of events, such as application startup, shutdown, expansion, web request tracking, and the results of regular health checks.</p>
<p>Cloud Services make a lot of things simple, but monitoring and telemetry are still difficult, and perhaps even more difficult than monitoring for traditional enterprise applications. When you stare at a pipeline that contains routine health checks, request audits, business-level events, and streams that track data and performance metrics, that’s an incredible amount of data.</p>
<p>When planning a monitoring strategy, you need to consider the amount of information to be aggregated, the speed of input, and the amount of information to be stored. If your application dynamically scales from 1 instance to 100 instances, this can also lead to a hundredfold increase in log traffic.</p>
<p>Auditing and monitoring cloud applications is often overlooked, but may be some of the most important things to plan and properly execute for production deployments. If you’re not going to blindly launch satellites into orbit without being able to monitor them, you shouldn’t do the same with cloud applications.</p>
<h2 id="Authentication-and-authorization"><a href="#Authentication-and-authorization" class="headerlink" title="Authentication and authorization"></a>Authentication and authorization</h2><p>Security is an important part of any application and cloud environment. <em> Security is never an afterthought </em>.</p>
<p>Many times, we are so focused on implementing the functional requirements of an application that we neglect one of the most important aspects of delivering any application, whether it is enterprise-oriented, mobile-device-oriented, or application-oriented. Cloud.</p>
<p>Cloud Native applications are the most secure applications. Your code (whether compiled or raw) is transferred across multiple data centers, executed in multiple containers, and accessed by countless clients (some legitimate, most harmful).</p>
<p>Even if the only reason to implement security in your application is that you can audit track which data changes have been made by which user, this alone is enough to prove that it takes relatively little time and effort to secure your application endpoints.</p>
<p>Ideally, all Cloud Native applications will use RBAC (Role-Based Access Control) to protect all their endpoints. Every request for an application resource should know who is making the request and the role that consumer belongs to. These roles indicate whether the calling Client has sufficient permissions to allow the application to fulfill the request.</p>
<p>With tools such as OAuth2, OpenID Connect, various SSO servers and standards, and almost unlimited language-specific authentication and authorization libraries, security should be incorporated into the development of applications from the beginning, rather than adding bolted projects after the application runs in production.</p>
<h2 id="Cloud-Native"><a href="#Cloud-Native" class="headerlink" title="Cloud Native"></a>Cloud Native</h2><h3 id="What-is-Cloud-Native"><a href="#What-is-Cloud-Native" class="headerlink" title="What is Cloud Native?"></a>What is Cloud Native?</h3><p>Buzzwords and phrases like “SOA”, “Cloud Native”, and “Microservices” all started popping up because we needed a faster and more efficient way to communicate our ideas about a certain topic. This was critical to facilitating meaningful conversations about complex topics, and we ended up establishing a <em> shared context </em> or <em> common language </em>.</p>
<p>The problem with these buzzwords is that they rely on a common or common understanding among multiple parties. Similar classic games<a href="https://en.wikipedia.org/wiki/Chinese_whispers">电话</a><a href="https://learning.oreilly.com/library/view/beyond-the-twelve-factor/9781492042631/ch16.html#idm139821584628208">1</a>On an unprecedented scale, this so-called shared understanding quickly deteriorated to confusion with each other.</p>
<p>We saw this through SOA (service-oriented architecture) and again through the concept of Cloud Native. It seems that every time this concept is shared, the meaning changes until we think about Cloud Native as much as IT professionals.</p>
<p>To understand “Cloud Native”, we must first understand “cloud”. Many people believe that “cloud” is synonymous with open and unrestricted public access to the internet. Although there are some such cloud products, there is far from a complete definition.</p>
<p>In the context of this book, cloud refers to Platform as a Service. PaaS providers expose a platform that hides infrastructure details from application developers, which sits on top of Infrastructure as a Service (IaaS). Examples of PaaS providers include Google App Engine, Redhat Open Shift, Pivotal Cloud Foundry, Heroku, AppHarbor, and Amazon AWS.</p>
<p>The key takeaway is that cloud is not necessarily synonymous with public, and enterprises are setting up their own Private Cloud in their own IaaS or data centers of third-party IaaS providers such as VMware or Citrix.</p>
<p>Cast doubt on the word “native” in the word “cloud native”. <strong> This creates the false impression that only brand new green applications developed natively within the cloud can be considered Cloud Native. This is completely incorrect </strong>.</p>
<blockquote>
<ul>
<li>A Cloud Native application is an application that has been designed and implemented to run on a “Platform as a Service” installation and includes horizontal elastic scaling. *</li>
</ul>
</blockquote>
<h3 id="Why-use-the-Cloud"><a href="#Why-use-the-Cloud" class="headerlink" title="Why use the Cloud?"></a>Why use the Cloud?</h3><p>Not long ago, deploying applications on physical servers was considered the norm for building applications - from large towers in air-conditioned rooms to ultra-thin <em> 1U </em> devices installed in actual Data centers.</p>
<p>Bare metal deployments are fraught with problems and risks: we can’t scale applications dynamically, the deployment process is difficult, changes to hardware can cause application failures, and hardware failures often result in massive data loss and significant downtime.</p>
<p>This sparked the virtualization revolution. Everyone agreed to stop using bare metal, so the hypervisor was born. The industry decided to put an abstraction layer on top of hardware so that we could simplify deployment, scale out applications, and hopefully avoid a lot of downtime and sensitivity to hardware failures.</p>
<p>In today’s world of always-connected smart devices and even smarter software, you have to search long and hard for a company that doesn’t have some kind of software development process as its cornerstone. Even in the traditional manufacturing industry, where companies make hard <em> physical products </em>, manufacturing doesn’t happen without software. Without software, you can’t organize people to build things efficiently and at scale, and without software, you certainly can’t participate in a global market.</p>
<p>No matter what industry you’re in, you can’t compete in today’s market without the ability to quickly deliver <em> unfailing </em> software. It needs to be able to dynamically scale to handle previously unheard of amounts of data. If you can’t handle <em> Big data </em>, then your competitors will. If you can’t produce software that can handle massive loads, stay responsive and change as fast as the market, then your competitors will find a way to do it.</p>
<p>This brings us to the essence of <em> Cloud Native </em>. In the past, companies could escape the days of distraction by spending an inordinate amount of time and resources on DevOps tasks, building and maintaining fragile infrastructure, and worrying about the consequences of production deployments that only happen once every blue moon.</p>
<p>This is the age of Cloud Services and we need to build applications in a way that encompasses this way. We need to build applications so that we can spend most of our time on the hedgehog (a big deal) and have someone or someone else take care of the many little things of the fox. Super fast IPO time is no longer a good time; it is necessary to avoid being left behind by our competitors. We want to be able to put resources into our business area and let other experts handle things they do better than we do.</p>
<p>By adopting a <em> Cloud Native architecture </em> and assuming <em> everything is a service, </em> and deploying them in a cloud environment to build our applications, we can achieve all these benefits and more. The question is not <em> Why Cloud Native? </em> The question you have to ask yourself is, why not * embrace Cloud Native?</p>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
  </entry>
  <entry>
    <title>10 times programmer work method</title>
    <url>/en/posts/37760/</url>
    <content><![CDATA[<p>The recent chatgpt fire has made many people think that many jobs, including programmers, will be replaced. Other positions I do not know much about, but for the programmer career, I think but in fact this shows that the perception of programmers in dealing with the problem is that programmers deal with a particular independent problem on, or a separate very specific problem on, of course, this and programmer interview questions, after all, programmer interview questions is actually this, interview questions, to say the least, is to do the paper, do the paper how you may have the back of the Internet robot than, and those badly measured seem to be empty words, in an interview, people really do not necessarily perform than the back is all the interview experience post robot superior.</p>
<p>But in fact this is already forgetting what programmers exist for. The technology that programmers master is called information technology, and its purpose is to collect and process information quickly, so why is this technology important? Understanding this issue, in fact, can also understand what AI actually brings to us.</p>
<span id="more"></span>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>In fact, it is now considered the fourth industrial revolution.</p>
<ol>
<li>The first was the age of steam, when mankind mastered great physical power, and machinery gave mankind the power to transform the physical world more powerfully</li>
<li>The second is the electrical age, which is a continuation of the first, allowing people to transform the world more quickly, while accelerating the efficiency of people’s material cooperation</li>
<li>The third is the information age, which is the age that most of us experience. Many people may not understand why information is important, after all, this thing is vague, and the Internet looks like an explosion of information, simply worthless. But in fact, for society, information is the most valuable thing, because, <strong> money is actually information, and even the entire human society exists on the basis of information, as stated in “A Brief History of Humanity”, without a common imagination, the largest human can only be maintained into a small tribe, just like the animals, it is a common imagination, so that humans have a cooperative </strong>. And the role of the market is to exchange information, no one person can handle all the information in human society, even if he has access to all information. Then there are luxury goods, such as jade, diamonds, gold, what makes you say that the price between them is different, is information, his physical nature is not expensive, so there is no need to ask why luxury goods are expensive, there is no reason.</li>
<li>the fourth is artificial intelligence, which is considered a continuation of the third. Why there is this thing is because of the explosion of information, too much, <strong> individuals can not handle it, the speed of processing information is too low, and many people cooperate will bring new information to deal with, these are the management to do up</strong>. There are many positions that acted as artificial intelligence in the past, such as low-end consulting positions, they actually help integrate information, because there is too much information, such as buying a house, unless you recently want to buy a house, you can not collect every day, to deal with, so it gave birth to people who specialize in processing this information it.</li>
</ol>
<p>So if the third industrial revolution is allowing people to collect and process information faster, then the fourth, chatgpt including artificial intelligence in my personal opinion, is giving everyone stronger tools to filter and process information.</p>
<p>This may not seem like an essential change, still improving the speed of processing information, but don’t forget that any complex problem is caused by simple problems coupled together <strong>quantitative change produces qualitative change. When there are enough problems and enough people involved, it’s not really a problem anymore</strong>.</p>
<p><strong> complexity is the biggest problem, capital all efforts to improve efficiency, efforts to understand the laws of the world, management science, etc., are designed to reduce complexity, of course, the overall efficiency improvement does not mean individual happiness, because the overall want to be efficient, in which each individual can not have a personality </strong>. Conversely, if a tool can improve the efficiency of enough, is the industrial revolution, the industrial revolution is actually a tool to bring great efficiency improvements.</p>
<p>All this to say, is to express a point of view, programmers deal with things is actually to reduce the complexity of information, the analysis and processing of information to the machine, the first thing to do the programmer itself to understand this information, and then transformed into a program, so the value of the programmer’s work does not lie mainly in programming, if not to help deal with information, reduce the complexity of the complexity to the machine, the more brilliant technology is useless. After all, it is never the capital that determines the direction of technological development.</p>
<p>So the focus of improving programmer productivity shouldn’t just be on how to knock out code faster, except of course for the very few people who make tools for programmers.</p>
<h1 id="10x-programmer-work-method"><a href="#10x-programmer-work-method" class="headerlink" title="10x programmer work method"></a>10x programmer work method</h1><p>The following content comes from the column of the same name in the geek time, here is just a summary of my personal notes, we recommend you to see the column</p>
<h2 id="Thinking-Framework"><a href="#Thinking-Framework" class="headerlink" title="Thinking Framework"></a>Thinking Framework</h2><p><strong>Essential and Contingent Complexity</strong><br>There is a famous book in the software industry called “The Myth of the Human Moon”, which mentions two very important concepts: Essential Complexity and Accidental Complexity.<br>Simply put, essential complexity is what must be done to solve a problem no matter how it is done, while accidental complexity is what has to be done more because of the improper choice of the way to do things.<br>For example, if you want to make a website, the content of the website is something you have to write anyway, and this is the “essential complexity”. If you are still writing a website in assembly today, it is impossible to be more efficient because you have chosen the wrong tool. This kind of problem caused by choosing the wrong method or tool is the “accidental complexity”.<br><strong>Four principles of best practice</strong></p>
<ul>
<li>Begin with the end in mind;</li>
<li>Task breakdown;</li>
<li>Communication feedback;</li>
<li>Automation.</li>
</ul>
<p><strong>Thinking Framework:</strong></p>
<ul>
<li>Where are we?</li>
<li>Where are we going?</li>
<li>How can we get there?</li>
</ul>
<p><strong>Linkage between the Four Principles and the Thinking Framework</strong><br>In practice, this thinking framework will help me better understand my work. For example, when a product manager gives me an explanation of a feature to be developed, I usually ask him questions such as</p>
<ul>
<li>Why this feature and what value it will bring to users?</li>
<li>What kind of users will use this feature, in what scenarios will they use it, and how will they use it?</li>
<li>Are there other means to achieve this? Is it necessary to develop a system?</li>
<li>After this feature goes live, how do you measure its effectiveness?</li>
</ul>
<p>If the product manager can answer these questions well, it means that he has basically thought this job through more clearly, and at this time, I will feel comfortable to understand the details of the follow-up.<br><strong>Begin with the end in mind</strong> means setting your goals at the beginning of your work. <strong>We need to see the real goal, not the work that others have explained to us as the goal</strong>. You can see that this principle is helping us to answer the question in the Thinking Framework, Where are we going? This question.<br><strong>Task decomposition</strong> is to break down the big goal into feasible tasks. The more detailed the work is broken down, the better we can control the work. It is a way to help us answer the question of how can we get there?<br>If the first two principles are to be done before the hands-on analysis, then the last two principles are on the road to the goal, to escort us, because in practice, we can not help but deal with people and machines.<br><strong>Communication Feedback</strong> is about unblocking the channels of interaction with others. On the one hand, we ensure that information can be communicated to reduce work omissions caused by misunderstanding; on the other hand, we must also ensure that we can accurately receive external information so that we do not feel good about ourselves and hinder progress.<br><strong>Automation</strong> is the automation of tedious work to be performed by machines, which is part of our job as programmers. We are good at building automation for others, but we don’t apply it enough for our own work, and this is the part of our job that deserves optimization.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112035/origin-of-ray/1667091571184-7dee658b-ff37-4377-b884-6d18b4d80736.png_averageHue_23d1c4bc_clientId_ua2b346c7-a2c6-4_from_paste_height_457_id_u7555d25b_name_image_jub744.png" alt="image.png"></p>
<h2 id="Begin-with-the-end-in-mind"><a href="#Begin-with-the-end-in-mind" class="headerlink" title="Begin with the end in mind"></a>Begin with the end in mind</h2><p><strong>Begin with the end in mind: how to make the effort not in vain</strong><br>We face real work scenarios on a daily basis: many of us just hear about a feature that someone has asked to do and start brainstorming everything that comes next. The result is that the effort put in is meaningless.<br>“Beginning with the end in mind” is a counter-intuitive way of thinking that most people do not possess. Therefore, in our daily life, we see many interesting phenomena. For example, when you graduate from college, there are many people who want to go to graduate school. If you ask them why they want to go to graduate school, the reason they get is usually to find a good job. But can studying really help him find a good job? Not necessarily, because finding a job and going to graduate school are not even the same skill tree. If you really want to find a good job, then you should understand what the job requires and how you can acquire the skills required for the job.<br>The example of “designing a login function”, compared with the thinking of “beginning with the end”, you may be unfair for my colleagues, they may also have the thinking of “beginning with the end”, only that Their “end” and I, the customer’s “end” is not the same. This brings us to <strong> do software, is essentially building a “collective imagination”. </strong><br><strong>Imagined Community</strong><br>We do software is actually a community of imagination, the “collective imagination” is the software we want to do, any imagination needs a carrier to show it, we write software is the process of the “collective imagination” to implement the process.<br>Since it is a “collective imagination”, it is difficult to unify our imaginations before the carrier presents them, and they all differ to a greater or lesser extent.<br>So, <strong>everything is created twice: once in the mind, which is the intellectual or first creation (Mental/First Creation), and then only when it is put into practice, which is the actual construction or second creation (Physical/Second Creation)</strong>.<br>Going back to the “designing a login” example, my colleagues were building their own imagination, not ours.<br>One of the biggest differences is that no one will pay for their own imagination. So, <strong> they see the “end” is not the real end, but only an ego “end”, as to see what kind of “end”, it depends on each person’s insight </strong>.<br>For those who do software, we should position the “end” to do a valuable software for users, to bring value to others, their value can be reflected.<br><strong>Planning and Discovery</strong><br>With the “end in mind” mindset, we think about how others will use our platform. We designed it in such a way that users would go to our website, read the documentation, and then follow the documentation step by step. One of the key points is that the documentation, especially the “Getting Started” documentation, is the first step for the user to get in touch with our platform and determines his first impression of our product.<br>So, we decided to start by writing the “Getting Started” document, which depicts how users can use our development platform step by step to complete their first “Hello World” level application. Note that at this point, we hadn’t written a single line of code.<br>Human beings are a group of people who are good at brainstorming. Once someone sees the document, he can already conceive the platform as it already exists, and then give all kinds of feedback: “I think this place can be done like this” “I think that place can be changed “.<br><strong>All of this feedback is real because they have “seen” a real thing. It was this real feedback that allowed us to gradually lock in our target. </strong>After that, we started to write the code.<br>An “end-to-end” approach not only helps us plan our work, but also helps us identify problems in our work.<br>Amazon CTO describes how Amazon develops a product, in short, they use a backwards working approach, the sequence of developing a product is</p>
<ol>
<li>writing press releases;</li>
<li>write FAQ (Frequently Asked Questions);</li>
<li>writing user documentation;</li>
<li>write code.</li>
</ol>
<p><strong>Chasm of Understanding</strong><br>The topic of our discussion is “Begin with the end in mind”. Our first question is, what exactly is “the end”? In the previous example, the “end” is “finished”, but Li thinks his work is done, but Zhang thinks he is not done.<br>There are many ways to bridge the gap, but there is a best practice called <strong>DoD (Definition of Done)</strong>, and it is easy to see from the name of this concept that it was created to solve the common problem of “completion” in software development.<br>How to make DoD work better.</p>
<ul>
<li><strong>DoD is a checklist of check items that are used to check how well our work is done</strong>. A DoD check item is a set of valuable activities that we need to develop a product. For example: writing code, writing test code, passing acceptance by testers, etc. What kind of activities are valuable may be perceived differently by each team. But if your team perceives nothing but functional code as valuable, perhaps this is a sign that your team as a whole is lacking in professionalism and the prospects of working in such a team are not good.</li>
<li><strong>DoD’s check items should be actually checkable</strong>. You say the code is written, where is the code; you say the test coverage is up to par, how do you see it; you say you have the functionality done, demonstrate it.</li>
<li><strong>DoD is a mechanism for team members to report back to each other</strong>. Don’t think of “reporting” as complicated. The simplest way to report is to say “this feature is done”. When we have a DoD, there are only two states of doing things, “done” and “not done”. In teamwork, we often hear people say “this thing is 80% done”, sorry, that is called not done, there is no 80% done.</li>
</ul>
<p>If you can think outside the box, you will find that DoD thinking is very versatile in your work. For example, when we need to work with other teams to develop an interface, we all know that the first step is to get the interface defined.<br><strong>Once the DoD is established in collaboration, we can even solidify it through a process to get the job done more efficiently and with high quality. </strong>Of course, we inevitably have ad hoc tasks in our work lives that are not complex enough to require a process, but can be solved efficiently with a DoD mindset. For example, I often have people come over and ask me to help with something. Using DoD thinking, I first ask the person exactly what I need to do, confirm the details (equivalent to defining the “checklist”), and then I know how far I can go with the favor. When I ask someone for a favor, I tell them exactly what I need them to do to minimize unnecessary misunderstandings.<br>DoD is a mindset, a way to eliminate as much uncertainty as possible and reach consensus. We do things in a way that “the end is the beginning” and DoD allows us to clearly define the “end” at the beginning.<br>The root cause of all the problems that often arise in human collaboration is that there are too many misunderstandings caused by differences in understanding that waste a lot of time, and DoD is a way to put ideas that are prone to ambiguity into practice.<br><strong>Define the criteria for completion before you do anything. </strong><br><strong>What is the first thing to do when you receive a requirement assignment? </strong><br>In software development, what programmers do is generally defined by requirements. We all know that requirements are an important part of software development, but you may not have thought carefully about the different ways of describing requirements that may affect our programmers’ understanding of them.<br><strong>Because the transmission of information decays, you cannot transmit 100% of what you understand to another person</strong>, and in between, how it is transmitted, i.e. how it is described, will directly determine the percentage of decay.<br>Many companies have a software development model based on a feature list that “defines” what programmers will do, and each group gets the list from the product manager and starts writing the code “as is”. However, often this feature list is just a simple description and you don’t see the big picture.<br>One of the states of many teams is that the programmers know what the feature to be developed is, but many of them can’t answer who is using this feature in what scenario. If you ask him why he is developing this feature, he usually says: it is specified in the feature list.<br><strong> This feature list style of requirements description knocks a complete requirement into pieces. </strong> Only when all the features are developed and dovetailed together is it time to “break the mirror”.<br>Based on this feature list-based requirement description, each group schedules its work with the features as it understands them. So, when your group finishes a feature, that feature may not make it to the line because you have to depend on the work of another group that, not coincidentally, happens to have the related feature development scheduled. This is just the case where there are dependencies between two groups, so imagine how bad the situation would be if multiple groups need to collaborate.<br>As a result, new ways of describing requirements have emerged, of which User Story is one of my favorites. It describes a user’s desired functionality from the user’s point of view, focusing on the path the user needs to take to complete an action in the system. Since it is a “story”, it needs to be a complete scenario that can be told.<br><strong>It’s good if your team uses a user story format for requirements description, but if not, supplementing the feature list with acceptance criteria will greatly improve the efficiency of collaboration between the two parties. </strong><br>The implementation details given in the acceptance criteria should be business, and it is really a waste of time for programmers to think about such issues, and our space to play should be in the technical implementation.<br>Although you are nominally a programmer, when you get a requirement, the thing you have to do is not to write code immediately, but to play the role of a product manager, analyze the requirement and circle the scope of the task. Trust me, analyzing beforehand is definitely much better than taking a written system to your boss and him telling you it’s not what he wants.<br>If there is only one thing you can remember from today, remember this:<strong> Set acceptance criteria before you do any requirements or tasks</strong>.<br><strong>Lean Startup</strong><br>What Lean Startup provides us is a framework for thinking about making products, and most of the products we can come across can be put into this framework.<br>With the framework structure, our life is simple. When a product manager wants to make a new product or a new feature of a product, we can use these concepts of Lean Startup to check whether the product manager has thought it through.<br>For example, <strong> you want to do this product feature, what is the thing that you want to validate? Is there data available to measure the goal he is trying to validate? Is this problem to be solved the most important thing at the moment, and are there other more important problems? </strong><br>If the above questions are answered in the affirmative, is there a simpler solution to validate this goal, and does it have to be achieved by developing a product feature?<br><strong>Expanding the work context</strong><br>Programmers always like to use technology to solve all problems, but many of the problems that make people sleepy are not problems at all. The reason why they can’t find a simpler solution is that many times programmers are limited by their own thinking.<br><strong>The real difference between working in different roles is the difference in context. Problems that are difficult to solve in one local context can even be left unsolved by switching to another context. So no matter how hard a single point is worked on it is only a local optimization, and it is difficult to achieve optimal results. </strong><br>If you want to do your job well, you need to constantly expand the context of your work, learn more about what the logic of other people’s work looks like, and recognize the full lifecycle of software development.<br>Expanding your context can be good for your career, in addition to helping you to be more productive at the moment. As you see a wider world, you get more and more opportunities.<br>If there’s only one thing you remember from today, remember this: <strong>Expand the context of your work and don’t limit yourself to the role of a “programmer”. Don’t limit yourself to the role of a “programmer.” </strong><br><strong>Path to Results</strong><br>With regard to “beginning with the end”, what we have been talking about is seeing results, and results are important. However, it is the path to the result that is more important.<br>In contrast to our work, in most cases, even if the goal is clear, the path is blurred. So, different people have different ways of dealing with it. Some people go where they go and then look at it; others project the path first and see how far they can go. In our process of making software, the differences brought by these two paths have been reflected in the previous short story. One is the first period of its happiness, the later hand to hand; one is the front of thinking ahead, the back of the four stable. I personally respect the latter approach.<br>This idea is not difficult to understand, and we can easily apply it to many aspects of our work. For example:</p>
<ul>
<li>before making a product, to deduce how this product will be promoted and to what kind of people by what means;</li>
<li>Before making technical improvements, consider how going live is a process and prepare a plan for possible problems;</li>
<li>Before designing a product feature, let’s consider who provides the data and what the complete process looks like.</li>
</ul>
<p><strong>Make the results of your work digitally available</strong><br><strong>Iteration 0</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112080/origin-of-ray/1667388901396-30a76c14-7687-4f11-b4ff-3a85fb08be48.png_averageHue_23fefefe_clientId_u6d7a8eac-a85f-4_from_paste_height_772_id_u1823cf52_name_image_fsji0l.png" alt="image.png"><br>Compare this list to the fact that most new projects are under-prepared on one or more items. Even if you are not doing a project from scratch, comparing this list will reveal that the project is lacking in some items and you can make some targeted additions. If there’s only one thing you remember from today, remember this: design your Iteration 0 list and give your project a medical checkup.</p>
<h2 id="Task-Breakdown"><a href="#Task-Breakdown" class="headerlink" title="Task Breakdown"></a>Task Breakdown</h2><p>Well, sharing these two examples with you is just to warm up and show that human problem solving solutions are pretty much the same. When a complex problem is presented to us, one of the main ideas we have to solve it is to divide and conquer.<br>A big question is one that we all struggle to give answers to, but answering small questions is something we excel at. So, when we learn to break down a problem, it is a big step toward its solution.<br><strong> So, what is the difficulty in solving problems with this mindset? Give an executable decomposition. </strong><br>However, in practice, most people overestimate their executable granularity and underestimate the degree of task decomposition. In other words, if you haven’t done the practice of task decomposition, most of the tasks you decompose will be on the large side of granularity.<br>Only if you can break down the task very small, you can have a clearer understanding of your ability to perform, the real masters are very strong decomposition ability. This difference is equivalent to, the same observation of an item, you use the eyes, while the master is using a microscope. In your opinion, the masters are all micro-operations.<br><strong>The software industry today is all about embracing change, and task decomposition is a prerequisite for us to embrace change. </strong><br><strong>In fact, the main reason why many people can’t write tests well is that they don’t understand task decomposition. </strong><br>Small things have a short feedback cycle, while big things have a long feedback cycle. Small things are easy to do well, while big things are much more difficult. So, with this criterion, it is easier to write good tests at the bottom level. In addition, because there are too many modules involved, any module that is adjusted may break the high-level test, so the high-level test is usually relatively fragile.<br><strong>Test Driven Development TDD</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112098/origin-of-ray/1668079382524-b25c0e83-faac-4d58-89d5-ea262f5837fc.png_averageHue_23fdfbfa_clientId_u4873b967-c53e-4_from_paste_height_652_id_u38c9e075_name_image_kctirp.png" alt="image.png"><br>In test-driven development, refactoring and testing go hand in hand: without testing, you can only refactor in fear; without refactoring, the code is progressively more confusing and the tests become worse and worse to write. Because refactoring and testing work together, it drives you to write better and better code. This is the crudest understanding of the word “drive”.<br><strong>Test Driven Design</strong><br>There are two main reasons why many people resist testing:<br>First, testing requires an “extra” amount of work. I put extra in quotes here because, while you might instinctively think that testing is extra work, it should actually be part of the programmer’s job, as I mentioned in the previous article.<br>Second, many people will feel that there is too much code to test. The reason why these people think that the code is not good to test, which implies an assumption: the code has been written, and then, then write tests to test it.<br>If we reverse the thinking, I have a test, how do I write code that will pass it. <strong>Once you think about the test first, the design thinking changes completely: how do I write my code so that it is testable, that is, we have to write code that has testability. </strong>With this perspective, doesn’t testing become easier?<br>Let’s take one of the most common problems in writing code: static methods<br>The Mock object approach doesn’t work with static anymore. Because it is outside the object system, <strong>static methods cannot be inherited, i.e., they cannot be handled in a series of object-oriented ways</strong>.<br>You don’t have a way to use the Mock object, and you can’t set the corresponding method return value. To get the method to return the corresponding value, you have to open the static method, understand its implementation details, carefully follow the path inside, and carefully set the corresponding parameters before you can get it to give you the expected result. Worse yet, because the method is maintained by someone else, one day he modifies the implementation on a whim and your carefully set parameters fall apart. And to do the setup again you have to reread the code all over again.<br><strong>In this way, your work reverts to its original state. What’s more, it’s not what you should be focusing on, and it doesn’t add to your KPIs.</strong><br>Obviously, you’ve gotten off track. By this point in the discussion you already know that static methods are not test friendly. So, if you want to make your code more testable, <strong>a good solution is to try not to write static methods</strong>.<br>static is a convenient but evil thing. So, limit its use. Unless your static method does not involve any state and has simple behavior, for example, determining whether a string is null. Otherwise, don’t write a static method. As you can see, such static methods are better suited for library functions. So, when we write applications on a daily basis, we try not to use them if we can.<br>What if you encounter a third-party static method in your own code? It’s simple, just wrap the third-party code so that your business code is facing your own wrapper.<br><strong>How to do a good task breakdown</strong><br>Finally, I want to emphasize one thing in particular, all the tasks that are broken out, are independent. That is to say, <strong>for every task done, the code is committable</strong>. Only in this way can we achieve a real sense of small step commits.<br>If there is only one thing you can remember from today, remember this:<strong> Arrange the decomposed tasks in the order of complete implementation of a requirement. </strong><br><strong>Why are your tests not good enough? </strong><br>I have seen many teams that have had a variety of problems with testing, such as</p>
<ul>
<li>Inconsistent testing, passing this time but not the next;</li>
<li>sometimes it is a test to test something very simple, test around a lot of dependencies, build the environment will take a long time;</li>
<li>For this test to run, it must wait until the other test has finished running; ……</li>
</ul>
<p>If you have encountered similar problems in your work, then what you understand by writing tests and what I understand by writing tests may not be the same thing, so where does the problem lie? Why are your tests not good enough? Mainly because these tests are not simple enough.<br><strong> Testing can only be done well if complex tests are broken down into simple tests. </strong><br>Why should testing be simple? There is an interesting logic, I don’t know if you have thought about it, what is the role of testing? Obviously, it is used to ensure the correctness of the code. An ensuing question is, who guarantees the correctness of the tests?<br>Since it is impossible to write a program in a way that guarantees the correctness of a test, we have only one solution: <strong> Write the test simple, so simple that it is easy to understand at a glance and does not need to prove its correctness. </strong>So if you see any test written in a complicated way, it must not be a good test.<br><strong>Test for bad taste</strong><br><strong> Many people always want to do many things in one test, for example, there are several different method calls. May I ask, who exactly is your code testing? </strong> Once this test goes wrong, you need to look at all the several methods involved, which definitely adds complexity to the work.<br>Another area of high incidence of typical “bad taste” is in assertions, and remember, <strong>tests must have assertions</strong>.<br>There is another common “bad taste”: complexity. The most typical scenario is that <strong>when you see all kinds of judgments and loops in the test code, there is basically something wrong with the test</strong>. For example, testing a function, your assertion is written in a bunch of if statements, and the name is that it executes according to the condition. How do you guarantee that the test function is written correctly? Unless you use debugging means, you can not even tell whether your conditional branch is executed to. You may wonder, I have a whole bunch of different data to test, without loops or judgments, what do I do? What you should really be doing is writing several more tests, each covering one scenario.<br><strong>A journey (A-TRIP)</strong><br>How about a test that is considered a good test?<br>Someone made a summary A-TRIP, which is an acronym for five words, are</p>
<ul>
<li><strong>Automatic, automated; </strong>leave the tests to be executed by machines as much as possible, the less human involvement the better.</li>
<li><strong>Thorough, comprehensively; </strong> you should cover as many scenarios as possible with tests. There are two perspectives to understand this. One is to consider various scenarios before writing the code: normal, abnormal, various boundary conditions; the other perspective is that after writing the code, we have to see if the tests covered all the code and all the branches, and this is the scenario where various test coverage tools come into play.</li>
<li><strong>Repeatable; </strong>There are two perspectives in this: a particular test should be run repeatedly and the result should be the same, which says that each test itself should not depend on any environment that is not under control; there is another perspective that a bunch of tests should be run repeatedly and the result should be the same. This shows that there is no dependency between tests and tests, which is another feature of tests that we will talk about next.</li>
<li><strong>Independent; </strong>There should not be any dependency between tests and tests. For example, if a test depends on an external database or a third-party service, and Test A writes some values in the database when it runs, and Test B has to use those values in the database, Test B must run after Test A. This is called having a dependency.</li>
<li><strong>Professional, professional. </strong></li>
</ul>
<p><strong>How to cut the demand? </strong><br>If I ask you what this requirement is, for example, most people’s first instinct is still username password login.<br>Basically, the requirement description that pops into your head is the topic (epic), which in agile development some call the master story.<br>If the granularity of your management of requirements is the subject, then so many things can not be talked about. For example, when time is short and I want to cut requirements, you ask the product manager if it’s okay if I don’t do logins, and you wait for the rejection.<br>However, if you say time is tight, can I put the login captcha to the back, or the email address verification function to the back, this kind of suggestion product manager is able to talk to you.<br>The difference lies in the fact that the latter breaks down the requirements.<br><strong>Needs to be broken down</strong><br><strong>“Themes” only help you remember the general direction, but the real use of requirements management relies on further decomposition of requirements</strong>. For this discussion, we’ll continue with the requirements description we’ve already described in the previous column: the user story, which will be the basic unit of our requirements management discussion here.<br><strong>Evaluating user stories has an “ INVEST Principle “</strong>, which is an acronym for six words, namely:</p>
<ul>
<li>Independent, standalone. A user story should accomplish a separate function and not depend on other user stories as much as possible, because user stories that depend on each other make it more difficult to manage priorities and estimate workloads. If dependencies do exist, a good practice is to break out the dependent parts and realign them.</li>
<li>Negotiable. It is a prerequisite for working together. We can’t guarantee that all the details will be 100% implemented in the user story, so the best way to do this is to negotiate. It is also a prerequisite for meeting other judging criteria, as mentioned earlier, a user story is not independent and needs to be broken down, which also needs to be discussed together.</li>
<li>Valuable, valuable. A user story should have its own value, this item should be the easiest to understand, no value of things not done. But as we have been saying, before doing any of these things, ask where the value lies.</li>
<li>Estimatable. We will use the results of user story estimation to arrange the subsequent work plan. User stories that cannot be estimated are either because there are many uncertainties or because the requirements are still too large, such stories are not yet in a state where they can be developed and need further analysis by the product manager.</li>
<li>Small, small. Big steps, no. User stories that can’t be completed in a certain amount of time should only have one result, split. A small user story is easy to schedule, so you can organize your work. testable. Who knows if you’re doing it right if you can’t test it. This is what we have emphasized earlier, that is, the acceptance criteria, you have to know how to be considered work done.</li>
</ul>
<p>The first concern is negotiability. As implementers, we have to ask questions. Programmers who are just passive recipients are worth half as much, and as soon as you start asking questions, you’ll find a lot of things that the people who wrote the requirements didn’t think through.<br>Countless times in my career I’ve blocked requirements back, not because I wasn’t cooperative, but because I didn’t want to do something muddled. The reason I can ask questions is partly out of common sense, and partly whether the user stories described here are valuable. User stories, the reason they are stories, are to be told and communicated.<br>There is a more important concern, and one that is at the heart of this module: smallness. Whether it’s independent or estimable, the premise is small. Only when the user story is small enough, our subsequent room for maneuvering will be large. The next important question is, how to be considered small? This brings us to another important aspect of user stories: estimation.<br>Usually, it is the two sides that have a deviation in understanding the requirements, and then the colleague responsible for writing the user story has to step up and help clarify the requirements. So, in general, the estimation process is also a process for everyone to deepen their understanding of the requirements. Estimation has another important role: to discover particularly large user stories. In general, a user story should be completed within one iteration.<br>The real dilemma for many teams is the lack of requirements decomposition in the development process. In this case, the basic unit of requirements management is a theme, and since it is the basic unit, it is an indivisible whole. The team is then tied alive to a huge requirement with no room for maneuvering. If the team can decompose the requirements, the basic unit of requirements will be reduced, and everyone will no longer see the “ironclad” piece, so they can adjust more easily and have more room to move.<br><strong>Demand Management</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112146/origin-of-ray/1669688919178-f48fc53b-2a0f-432e-997b-35ebe0be2265.png_averageHue_23fefefc_clientId_u496d162f-a4d1-4_from_paste_height_653_id_ue8a35552_name_image_qktkqz.png" alt="image.png"><br>Use a few examples from the life of a programmer to help you understand. Let the system can not run properly online failure, it belongs to important and urgent things, do not rush to solve, it will affect the normal operation of the company. The team to upgrade the system transformation is important not urgent: transformation is good, performance is also good, maintainability is also improved; not transformation, a moment can also be used. Some temporary tasks are urgent and unimportant, while the brush of friends is neither urgent nor important.<br>According to the concept of time management, important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible. <strong>The biggest change this matrix brings to our thinking is the realization that things and things are not equivalent. If one does not focus on the important things, in the end they may all become urgent things</strong>.<br>Bringing this idea back to our reality of requirements management, you will find that <strong>in fact, the priority ranking used for the various requirements faced by the team is basically in order of urgency</strong>, but are they really important?<br>If you throw this question at the person who created the requirement, I’m almost certain that the answer they give you is that the requirement they created is important. One possibility is that they can’t tell the difference between important and urgent, just as we are sometimes confused.<br>Imagine two product managers show up in front of you, one tells you that the company wants to expand in a new direction and this feature has to be done, while the other says that the company wants to further profitability and that feature has to be done. To you, they both say the right thing, and both sound pretty important. But the bone-chilling reality is that you put both things next, and what awaits you is an exhausting task that can’t be completed. What can we do at this point? Jump out of this context and into a larger context. <strong> You can’t judge which need is more important, so ask a higher level boss to do so. </strong><br>A few more words of divergence, for people to do the same to constantly expand their own context, which is what we often say to increase knowledge. Many so-called life problems are caused by limited insight. For example, if you feel that there are always people in the company and you than the technology, such as the long-term vision, put yourself on the level of the whole industry to compare. Because you are working for your own career, not a company.<br>After the decomposition of the requirements, the most important thing is, to arrange the priority of the requirements. There are many ways to prioritize, we can take a cue from time management and divide things according to the dimensions of importance and urgency to get four quadrants. We need to focus on the important things as much as possible, rather than the urgent things as a way to prioritize.<br><strong>Breaking down requirements into smaller pieces actually breaks down the context</strong> that was originally unified. If you want to manage requirements effectively, especially to determine how important things are,<strong> one way is to retrieve the lost context</strong>. If we can’t determine the context ourselves, a good way to do that is to <strong>bring in a larger external context</strong>.<br><strong>How to make a product with minimum cost? </strong><br>Our instinct, of course, is to implement everything and then test it, but the world doesn’t stop and wait for us. Time and time again, we have been taught that “hold back” waterfall software development has become an anachronism. So how do we achieve our vision? The only way is to break it down.<br>As we mentioned earlier, Lean Startup is about validating product ideas in the real world through continuous experimentation, and one of the key practices is Minimum Viable Product (MVP), which we will discuss this time.<br>Let’s start with “minimal”. Here the “minimum” refers to the minimum cost. How to call the minimum cost, is not to do what can not do, can simplify things to simplify.<br>First of all, we must be clear about one thing, what we want to do is to verify the feasibility of an idea, not even to develop a software, developing software is just a means of verification.<br>Many programmers have a misconception that it is easy to treat the solution as a problem. We develop software for the purpose of solving problems, wouldn’t it be better if we solved the problem without writing the software.<br>The first step was to verify whether such an idea was feasible. We made a product document, as if we already had the product, and asked our sales colleagues to take the document to the customer to see how the customer reflected on the idea. In the process, we validated the basic idea that the need for IoT transformation of existing devices existed, and when customers saw such a thing, all kinds of ideas and requirements popped up. In addition, we gained an additional benefit, we knew the price range that customers would accept for such a product, which helped the team to price the product appropriately. Having validated the directional ideas, we moved on to the specific product design phase. What we wanted to verify in this phase was whether the product design we gave was acceptable to the users. So, we decided to make the interaction of this product. Thanks to the rapid development of prototyping tools, we made a relatively complete user interface with a prototyping tool and made all kinds of interaction flows. To the user, this is almost complete software.<br>After “minimal”, let’s look at “feasible”. <strong> Feasible is to find a path to give the user a complete experience. People who come from a programmer’s background always know software systems module by module, and the relatively weak aspect is the lack of a complete picture</strong>. But from the perspective of product viability, we need to shift our thinking, not a module to do how complete, and a user path is smooth<br>When time is limited, we need to learn to find a viable path to find a balance between a complete user experience and a complete system.<br>Step by step, we launched a relatively complete P2P platform. In this process, we put new features on line at each stage, and from the user’s visible point of view, what he sees is always a complete platform, the changes of which can only be seen clearly from the perspective of the internal implementer. (For example, the repayment function, although it is one of the complete life cycle, no user will use it in the first month, so the scheduling can be a bit later)<br>To use the concept of minimum viable product well in practice is to find a viable path at minimal cost. <strong>Minimal cost means not doing what can be done and simplifying what can be simplified. </strong><br>Programmers are usually willing to solve problems with their own code, and writing code is usually a very costly solution, which should be the final product solution. The path that works is a complete user experience path, at least in the eyes of the user.<br>We often want to give our clients a complete system, but with limited time, we must learn to break it down.<br>If there’s only one thing you can remember from today, remember this: the most viable way to do good product development is to use MVP.</p>
<p>In this module, we learned some best practices:<br>Test Pyramid<br>— Best practices for testing portfolios in the industry.<br>— Writing more unit tests is key.<br>Test Driven Development<br>— The rhythm of test-driven development is: red - green - refactoring, refactoring is the key to test-driven development area different from test first.<br>— Some people understand test-driven development as test-driven design, and it brings a change in thinking to the industry to write testable code.<br>Eisenhower Matrix (Eisenhower Matrix)<br>— Divide things according to importance and urgency.<br>— The important and urgent things should be done immediately. The important but not urgent things should be where we focus our efforts. Things that are urgent but not important can be delegated to others. Things that are not important and not urgent should be done as little as possible.<br>Minimum Viable Product<br>— products that are “just right” for our customers’ needs.<br>— in practice, to find a viable path at minimal cost.<br>In addition, I mentioned a number of practices and rubrics that can be applied directly in the workplace:</p>
<ul>
<li>Try not to write static methods;</li>
<li>A master branch development model as a better development branch model;</li>
<li>Good user stories should conform to the INVEST principles;</li>
<li>Estimation is a process of deepening understanding of requirements, and good estimation is based on task decomposition;</li>
<li>A good test should comply with A-TRIP.</li>
</ul>
<p>I’ve also taken you through some important ideas to help you better improve your own development work::</p>
<ul>
<li>Divide and conquer, a basic human problem-solving tool;</li>
<li>Software change costs, which increase over time and in development phases;</li>
<li>Testing frameworks that introduce automated testing as a best practice into the development process, allowing testing actions to be fixed by standardized means;</li>
<li>Extreme programming is called “extreme” because the idea behind it is to push good practice to its limits;</li>
<li>The secret of the master programmer’s work is task decomposition, down to the micro-operations that can be performed; arranging development tasks in the order of complete implementation of a requirement.</li>
</ul>
<h2 id="Communication-Feedback"><a href="#Communication-Feedback" class="headerlink" title="Communication Feedback"></a>Communication Feedback</h2><p>We work hard to learn all kinds of knowledge in order to better understand how the world works, and communicating feedback is the best way for us to interact with the real world.<br>When several people discuss a problem together, someone else often just starts a conversation, he thinks he has understood the idea of others, and then starts to express his own point of view. The information is incomplete, so how can we talk about decoding. So, development team discussions often involve one person talking about something but getting off topic. We have to accept feedback from the real world if we want to make our work life better, and accepting feedback from the real world requires us to, first, open our own receiver to accept the signal in and let the feedback in, which is the premise of decoding; second, expand our insight and improve the effect of our decoder to better understand what others want to express in the end. Having said that the encoder and decoder may have problems, let’s look at another problem that may cause impact: codec algorithm, that is, how to coordinate the two sides of communication to communicate more effectively.<br>Life is not as good as it should be. A big reason why many people have so many bad things is that we have a lot of unrealistic fantasies about the real world, and good intentions do not drive the world, and this is also true in software development. Although people and people live in one world, their understanding of the world is very different.<br>Improving codecs requires several perspectives: encoders, which allow for more accurate information output; decoders, which reduce signal filtering and improve decoding capabilities; and codec algorithms, which are various “best practices” from the industry that coordinate both sides of the communication.<br>Write code in the language of the business, one is highly readable, the other is able to identify the constant and changeable parts of the code, better practice design patterns, and achieve domain-driven design<br><strong>Lightweight Communication</strong><br>The meeting is to solve the problem, but the real situation is to open the meeting and did not solve many problems, this is a strange contradiction. Thinking back, have you ever attended a meeting that worked particularly well? In my career, where the effect of the meeting is particularly good, basically used to do information synchronization. For example, the leader announces a thing, this kind of meeting will hardly waste time. The message is announced, everyone receives it, and it ends. And what is a bad meeting like? Almost all of those discussions, you say one thing and I say another, each meeting almost without exception, there are a few good at interrupting, this meeting will basically run out of time, the time will be so minute by minute.<br><strong>The first action item to improve the meeting is to reduce the number of people involved in the discussion</strong>. Some people will say, “I have several topics for this discussion, and each topic requires different people to participate, so what you need to do is to find these people separately to discuss specifically, instead of putting everyone together. Compared to the meeting format, face-to-face communication is not possible because of the limited attention span and the number of participants is not too large. Also because the number of participants is relatively small, each person’s input will be a little more.<br><strong>The second action item is, if you want to discuss, find people to communicate face to face. </strong>If there is an issue that needs to be discussed, what I want to do is to find the relevant people to discuss it separately for the topic of concern, and then, I will summarize the results of the discussion and then go back to seek everyone’s opinion. If everyone agrees, I will choose to meet only. This time, <strong> the purpose of the meeting is no longer a discussion, but a synchronization of information </strong>: I am ready to do so, the relevant parties have agreed, to inform everyone, end.<br>Try to communicate in a more visual way.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112178/origin-of-ray/1669902990925-8a11e407-496a-4218-b2ad-770dd8554be1.png_averageHue_23edeeee_clientId_u496d162f-a4d1-4_from_paste_height_1168_id_ud3c871f5_name_image_aakl9n.png" alt="image.png"><br>The birth of continuous integration is the result of people trying to shorten the integration cycle. Why shorten the cycle time? Because we want to get feedback as early as possible to know if the results of our work are working. So, to do continuous integration well, you need to go along with the essence of <strong>continuous integration: getting feedback on your work as soon as possible</strong>.<br>From there, we get to the key point of <strong>continuous integration, you just have to remember the phrase, quick feedback</strong>.<br>Quick feedback, this sentence is divided into two parts, quick and feedback, which leads to two important goals of <strong>continuous integration: how to get feedback quickly, and what kind of feedback is effective</strong>.<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670545816448-b0372507-d4ed-4351-8b1b-278b49a0797a.png#averageHue=%23fdfdfd&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=595&amp;id=u656beaf1&amp;name=image.png&amp;originHeight=1190&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244883&amp;status=done&amp;style=none&amp;taskId=uf9db3aa5-fa20-4d6f-8e7e-2c758351358&amp;title=&amp;width=1142" alt="image.png"><br>What is replay? A replay is a Go term that means that after a player has played a game, he replayed the game to see what went well, what didn’t go well, what could have been played differently or even better, etc. <strong>This way of restoring the process and discussing and analyzing it is a replay</strong>. <strong>This way of restoring the process, discussing and analyzing it, is replay</strong>.<br>Nowadays, the concept of review has been used in many aspects, such as stock market review, business management review, and it has become the most important tool for many people to help individuals and enterprises to continuously improve. The most famous one is Liu Chuanzhi, the founder of Lenovo, who even wrote “review” into the core values of Lenovo. Why is it so useful to review? In my opinion, there is an important reason, lies in the <strong>objectification</strong>. As the saying goes, the authorities are confused, the onlookers are clear. Using our software development as an example, when solving a problem, we focus more on the problem itself and rarely think about how the problem was caused. <strong>When you review the problem, you will stand in a different perspective to think about what caused the problem. At this time, you are no longer the person involved, but have become a bystander. </strong>You observe the process of how that original thing happened, as if someone else was doing it. You go from a subjective perspective to an objective one. Seeing things from someone else’s perspective is objectification.<br>If your team can see the root cause at once is good, but if not, then it is best to ask more why. How to ask, there is a common practice is: 5 Whys (5 Whys). This practice was introduced by Saji Toyoda, the founder of the Toyota Group, and has since become widely known with the Toyota Production System. Why do you need to ask more whys? Because the initial question, you can get only the surface reason, only a few more whys, you can find the root cause. Let me give you an example. The server often returns 504, so we can use the “5 Whys” approach to ask.</p>
<ol>
<li>Why is there a 504? Because the server takes longer time to process and timeout.</li>
<li>Why does it time out? Because the Redis behind the server query is stuck.</li>
<li>Why is accessing Redis stuck? Because another service updating Redis deleted a large amount of data and then, when it was reinserted, the server blocked.</li>
<li>Why does it delete data in bulk and reinsert it? Because the update algorithm is not designed properly.</li>
<li>Why does an ill-designed algorithm go live? Because this design was not reviewed according to the process.</li>
</ol>
<p>More close to the user, in order to understand what their code is used to do, but also in the discussion of requirements to better understand which needs are necessary<br>As a programmer, overcoming technical challenges is an important part of our job, so we subconsciously throw ourselves into them as soon as they arise. But is this really the best approach? Not really, <strong>not all problems are technical challenges worth solving. </strong><br>There is an important principle of writing programs called Fail Fast, what does this mean? It means that if you encounter a problem, report the error as early as possible.<br>What are you going to do if the configuration file is missing an important parameter, for example, the maximum number of database connections? Many people will choose to give a default value, which is not a Fail Fast approach. Since it is an important parameter, reporting an error if it is missing is called Fail Fast.<br>In fact, <strong>Fail Fast also smacks of something counter-intuitive; many people are compatible with a lot of weird problems on the grounds of building robust systems, rather than exposing it. Instead, they hide the bugs in the system</strong>. We all know that relying on debug to locate problems is one of the most time-consuming and costly practices. So, don’t be afraid to report problems with the system early.</p>
<h2 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h2><p>In my opinion, it is important to do what is valuable, not just what is “done”, but also what is valuable in terms of time and cost savings by “not doing”. Two of my colleagues prevented the client from wasting money, so I view this project as a success.<br>For development, the same reasoning is followed. Programmers as a group are so technically competent that it is simply too intuitive to make a technical solution, we just faithfully make one requirement after another and automate “the world”. <strong>But the truth is, too much of the world’s waste is doing things that shouldn’t be done. </strong>In our column, I repeatedly say that we need to ask more questions in order not to do things that we shouldn’t do.<br><strong>Beware of NIH syndrome</strong><br>You can judge from the perspective of the requirements of which work can not be done, but we also want to prevent programmers themselves “add drama”, I will tell you a common problem of technical personnel: NIH syndrome (Not Invented Here Syndrome).<br>For example, this kind of chaos in the field of front-end also appeared, a variety of frameworks, so many front-end programmers cry, really can not learn. Another example is that I once interviewed a programmer who had contact with Go earlier, and he just couldn’t wait to write all the frameworks himself.<br>Having said that, it’s just to illustrate one thing<strong> Before writing code, ask yourself if you really want to do it? Don’t do it if you can, until you have enough reason to do it. </strong> Corresponds to Larry Wall’s statement that you have to be lazy and put a lot of effort into circumventing the energy drain.<br>In general, there are several different environments when building an infrastructure for continuous delivery, as described below.</p>
<ol>
<li>Continuous integration environment, continuous integration is a prerequisite for continuous delivery, this process is mainly to perform basic checks and hit a package that can be released.</li>
<li>Test environment (Test), this environment is often stand-alone, mainly responsible for functional verification, where the tests run are basically acceptance test level, and generally put the unit tests and integration tests and other tests that are executed faster into the continuous integration environment to execute.</li>
<li>pre-production environment (Staging), this environment is usually the same as the production environment configuration, for example, load balancing, clustering and so on should have, but the number of machines will be less, is mainly responsible for verification of the deployment environment, for example, can be used to find some problems brought about by the concurrency of multiple machines.</li>
<li>production environment (Production), which is the real online environment.</li>
</ol>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112199/origin-of-ray/1670548946042-82f31fce-91f5-49a5-9e76-a8981ec76fe9.png_averageHue_23f8f7f7_clientId_u3a9da171-cf06-4_from_paste_height_551_id_u8619be65_name_image_keqa8u.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112216/origin-of-ray/1670548966490-daed7c11-d337-4904-9721-51cc1be48350.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_737_id_u62feb077_name_image_x6u6xh.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112236/origin-of-ray/1670549025670-7d994107-12f6-412d-9007-62cf3d1a161b.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_734_id_u59f6a867_name_image_xvvqi1.png" alt="image.png"><br>Ensure your code is not too confusing: the SOLID principle</p>
<p>Today, we start with a segment of the software industry. Party A wants to do an e-commerce website, as party B programmer asked: “What kind do you want to do?” Party A said, “Like Taobao is good.” The programmer asked, “How much are you going to pay?” Party A thought about it, “50,000 yuan is about right!”<br>This is, of course, a flirtation with the customer does not understand the requirements of the paragraph, but have you ever thought, <strong> Why in the A does not seem to be a complex system, you find it difficult? Because what you want is simply not a thing</strong>.<br>In the customer’s opinion, what I want is a website where I can buy things. As long as the product can be online, the user can see and buy it, 50,000 yuan is almost enough.<br>And what you think in your head is, “Taobao ah, that has to be a big technical challenge ah, every year to the ‘double 11’, that will have to consider all kinds of concurrent snapping. Taobao has to have how many programmers, 50,000 you want to do a, the door is not.”</p>
<p><strong>When doing a new project, it is not necessary to consider too many imaginary needs, the most important thing is to do two things well</strong></p>
<ol>
<li><strong>analysis of requirements, good domain division and abstraction (</strong>the higher level of abstraction the more stable, the more detailed things are easy to change<strong>), to ensure the scalability of the architecture </strong></li>
<li><strong> Minimize the introduction of various frameworks, or to ensure that the framework is pluggable and can be quickly replaced </strong></li>
</ol>
<p>Reviewing the above process, you can see that each time the original technology cannot meet the needs as the business volume grows, so it is necessary to solve the problem with new technology. The key point here is: different business volumes.</p>
<p>A system that serves only a few people, a single machine is enough, and a programmer just starting out can implement this system very well. When the volume of business reaches the point where a single machine cannot resist, it needs to be handled by multiple machines, and this time the problem of distributed systems must be considered, and middleware may have to be introduced appropriately. And when the system becomes to provide services for a huge amount of business, there is no which has been built to help the middleware, need to solve the problem from the bottom themselves. Although these systems seem to be the same in business, in technical terms, a system faces different problems at different stages, because it faces different levels of business. To be more precise, systems of different magnitudes are not a system at all.<br>In the previous example, the real driver for Taobao’s engineers to improve the system is not the technology, but the complexity of the problem due to the escalating business volume. Therefore, assessing the current stage of the system and using the appropriate technology to solve it is the most important thing we should consider.<br><strong>Then remember: use simple techniques to solve problems until they become complex. </strong><br>Maybe you’ll say, what if I make a system that doesn’t have that much business and I still want to improve my skills? The answer is to go to a place where there are good problems. Nowadays, the IT industry offers many opportunities for programmers, and it is not difficult to find a place with good problems, but of course, the prerequisite is that you have the basic ability to solve problems yourself.</p>
<p><strong>How to do microservices</strong><br>Let’s start by answering the question, why do we want to do microservices? The standard answer to this question is that microservices are small enough, easier to understand in code, easier to test, and simpler to deploy compared to monolithic services (Monolithic). All of this makes sense, but it is the result of doing microservices well.<br>How can we get to this state? There is a key factor, how to divide microservices, that is, how to decompose a huge system in a way. This is the most lacking in many discussions about microservices, and is the fundamental reason why many teams do “microservices” but die hard.<br>Without understanding this, write services that either call each other from service to service, causing the whole system to execute very inefficiently, or you need to spend a lot of effort to solve the data consistency between the various services.<br><strong>In other words, a poorly delineated service awaits the team in an endless quagmire of contingent complexity. Only when microservices are delineated correctly will it be what you have in mind to aspire to. </strong><br><strong> And how should you divide microservices? You need to understand domain-driven design. </strong><br>Domain Driven Design (DDD) is a methodology proposed by Eric Evans for moving from systems analysis to software modeling. What is the problem it is trying to solve? It is to transform business concepts and business rules into concepts and rules in software systems, so as to reduce or hide business complexity and make the system more scalable to cope with complex and changing real business problems.<br><strong>What exactly does DDD say? It pulls your starting point of thinking from a technical perspective to the business. </strong><br>We’ve mentioned this many times in this column. DDD is based on the Ubiquitous Language, which allows business people to speak the same language as programmers. This is something I mentioned in “21 | Who do you write code for? I’ve already mentioned this in 21 | Who do you write code for? Using a universal language is the same as pulling the level of thinking from the code details to the business level. The higher the level of abstraction the more stable it is, and the more detailed it is the more likely something will change.<br>With a common language as the foundation, it is time to move on to the practical aspects of DDD. <strong>DDD is divided into Strategic Design and Tactical Design. </strong>DDD is divided into Strategic Design and Tactical Design.<br>Strategic design is the high-level design that helps us divide the system into different domains and deal with the relationships between them. I gave you the example of “orders” and “users” in the previous section. This is the fundamental solution to the problem, otherwise, no matter how well you write your code, confusion is inevitable. And this way of thinking in terms of business is what DDD strategic design brings to me. Tactical design, usually refers to how to organize different domain objects within a domain at the technical level. As an example, domestic programmers like to use myBatis for data access instead of JPA, the common reason is that JPA has too poor performance in case of association. But the real reason is that the associations are not designed well.<br>After all, what does this have to do with microservices? The real difficulty of microservices is not the technical implementation, but the business segmentation, which happens to be the strong point of Bounded Context in DDD strategic design.<br>Although a common language bridges the gap between business and technology, computers are not good at dealing with ambiguous human language, so a common language must be expressed in a specific context to be clear. Like the “order” example we talked about, the “order” of a transaction is different from the “order” of logistics, and they both have their own contexts, and that context is the bounding Context.<br>It delimits the boundaries of the free use of the common language, and once outside the boundaries, the meaning is not guaranteed. It is because of the boundary that a bounded context can become just a separate deployment unit, and that deployment unit can then become a service.<br><strong> So to do microservices well, the first step should be to identify the bounding context. </strong><br>As you can see, each bounding context should be independent, and there should not be a lot of coupling between each context.<strong> The large number of mutual invocations between microservices that plague many people is itself a pseudo-proposition brought about by a failure to delineate the boundaries, relying on technology to solve business problems</strong>, with half the effort.<br>With a bounded context you can do microservices, right? Wait a minute!<br>In my humble opinion, it is not very easy to draw the boundaries clearly at once. It is much easier to adjust when everyone is in one process. Then, let the different bounding contexts evolve independently on their own first. Wait for it to evolve to the point where it’s worth deploying independently, and then think about microservice splitting. By then, you’ve also learned all sorts of techniques about microservices that should come in handy!</p>
<p>DDD and lean startup, microservices division is similar, both need to delineate the contextual boundaries, cut with the simplest way to achieve the needs of the moment, and then gradually expand (need good design to ensure scalability) lean startup is actually a continuous validation, verify the validity of the idea, to obtain the validated knowledge (Validated Learning).</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112260/origin-of-ray/1670740142955-ce3186d8-a3eb-425b-bc3f-d4f14ed071fe.png_averageHue_23f6f6f6_clientId_uec93d73b-3fc1-4_from_paste_height_1592_id_u97ed25ef_name_image_jwyysc.png" alt="image.png"></p>
<p>If you understand the business, you can deduce the basic code structure yourself. But conversely, if you are asked to look at the code and deduce the business from it, it is almost impossible.<br>In fact, every time I learn about a business, I go over in my head how I would do it if I were doing it. This way, I will have a preconception on the whole first, and then correspond to the actual code later, so it will not be so strange. To understand the business, I usually ask someone to tell me what the business does, what kind of problem it solves, what the specific business process is like, and so on.<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112273/origin-of-ray/1670740542457-15af9ad4-a2e9-402f-9cc0-e6c51d46db57.png_averageHue_23f2f2f2_clientId_uec93d73b-3fc1-4_from_paste_height_429_id_u4aff8d90_name_image_ihfmvt.png" alt="image.png"><br>To revamp the legacy system, I will give you a few suggestions:</p>
<ol>
<li>building a test protection network to ensure consistent functionality of old and new modules;</li>
<li>divided into small pieces and gradually replaced;</li>
<li>constructing a good domain model;</li>
<li>Find the latest understanding of system building in the industry.</li>
</ol>
]]></content>
      <categories>
        <category>Sundry</category>
      </categories>
  </entry>
</search>
