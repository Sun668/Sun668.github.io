<!DOCTYPE html>
<html lang>
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 3.9.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"sunra.top","root":"/","scheme":"Muse","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"always","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"path":"search.xml"};
  </script>

  <meta name="description" content="上一篇文章分析 Babel 编译流程的时候，提到 Babel 会将 JS 代码转换成 AST（抽象语法树）。这种行为是一种通用的行为，无论什么编程语言都会将源代码解析成 AST，AST 不是 Babel 特有的，更不是 JS 特有的。 为什么要这么做呢？原始的 JS 文件是计算机是无法理解的，计算机也很难直接修改 JS 代码，但是转换成 AST 后，由于 AST 本质上是一组表示程序结构的对象，我">
<meta name="keywords" content="Babel 源码解析">
<meta property="og:type" content="article">
<meta property="og:title" content="深入Babel原理系列（二）Parser代码结构简介">
<meta property="og:url" content="https://sunra.top/posts/5517">
<meta property="og:site_name" content="Origin of Ray">
<meta property="og:description" content="上一篇文章分析 Babel 编译流程的时候，提到 Babel 会将 JS 代码转换成 AST（抽象语法树）。这种行为是一种通用的行为，无论什么编程语言都会将源代码解析成 AST，AST 不是 Babel 特有的，更不是 JS 特有的。 为什么要这么做呢？原始的 JS 文件是计算机是无法理解的，计算机也很难直接修改 JS 代码，但是转换成 AST 后，由于 AST 本质上是一组表示程序结构的对象，我">
<meta property="og:locale" content="default">
<meta property="og:image" content="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625014272/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210630085034_nq6abs.png">
<meta property="og:image" content="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625100732/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085141_jdhpvd.png">
<meta property="og:image" content="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625101028/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085657_sxvzrs.png">
<meta property="og:updated_time" content="2023-03-30T08:18:52.906Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="深入Babel原理系列（二）Parser代码结构简介">
<meta name="twitter:description" content="上一篇文章分析 Babel 编译流程的时候，提到 Babel 会将 JS 代码转换成 AST（抽象语法树）。这种行为是一种通用的行为，无论什么编程语言都会将源代码解析成 AST，AST 不是 Babel 特有的，更不是 JS 特有的。 为什么要这么做呢？原始的 JS 文件是计算机是无法理解的，计算机也很难直接修改 JS 代码，但是转换成 AST 后，由于 AST 本质上是一组表示程序结构的对象，我">
<meta name="twitter:image" content="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625014272/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210630085034_nq6abs.png">

<link rel="canonical" href="https://sunra.top/posts/5517">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'default'
  };
</script>

  <title>深入Babel原理系列（二）Parser代码结构简介 | Origin of Ray</title>
  


  <script>
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "https://hm.baidu.com/hm.js?cc2e15dfd66849cf1d7843d0d532438e";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>




  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="Origin of Ray" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">Origin of Ray</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
      <p class="site-subtitle" itemprop="description">一起探索互联网的秘密</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>Home</a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>Categories</a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>Archives</a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>Search
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
        <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off" placeholder="Searching..." spellcheck="false" type="search" class="search-input">
  </div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div id="search-result">
  <div id="no-result">
    <i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i>
  </div>
</div>

    </div>
  </div>

</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="default">
    <link itemprop="mainEntityOfPage" href="https://sunra.top/posts/5517">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1592617514/avatar_rpap6c.jpg">
      <meta itemprop="name" content="Ray Sun">
      <meta itemprop="description" content="拨开互联网的迷雾">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Origin of Ray">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          深入Babel原理系列（二）Parser代码结构简介
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">Posted on</span>

              <time title="Created: 2021-06-28 08:09:12" itemprop="dateCreated datePublished" datetime="2021-06-28T08:09:12+08:00">2021-06-28</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Modified: 2023-03-30 16:18:52" itemprop="dateModified" datetime="2023-03-30T16:18:52+08:00">2023-03-30</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-folder"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/Babel/" itemprop="url" rel="index"><span itemprop="name">Babel</span></a>
                </span>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <p>上一篇文章分析 Babel 编译流程的时候，提到 Babel 会将 JS 代码转换成 AST（抽象语法树）。这种行为是一种通用的行为，无论什么编程语言都会将源代码解析成 AST，<strong>AST 不是 Babel 特有的，更不是 JS 特有的</strong>。</p>
<p>为什么要这么做呢？原始的 JS 文件是计算机是无法理解的，计算机也很难直接修改 JS 代码，但是转换成 AST 后，由于 AST 本质上是一组表示程序结构的对象，我们可以通过修改这个对象，间接的实现修改代码的目的。chrome V8 引擎也是这么做的，比起 Bable 更进一步的是，V8 引擎会编译 AST 生成字节码。</p>
<p>Parser的过程分为两步，第一步，词法分析，也就是编译原理中的有限状态机，将一段代码拆分为一个个Token，第二步，语法分析，将Token数组，转换为AST树。</p>
<p>这次我就看一下<a href="https://github.com/babel/babel/tree/main/packages/babel-parser" rel="external nofollow noopener noreferrer" target="_blank">源码</a>，简单分析一下这个过程。</p>
<a id="more"></a>
<p>首先看下Babel-Parser的目录结构</p>
<p>主要是个四个文件夹，util，plugins，tokeinzer，parser</p>
<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">input: string, options?: Options</span>): <span class="title">File</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (options?.sourceType === <span class="string">"unambiguous"</span>) &#123;</span><br><span class="line">    options = &#123;</span><br><span class="line">      ...options,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      options.sourceType = <span class="string">"module"</span>;</span><br><span class="line">      <span class="keyword">const</span> parser = getParser(options, input);</span><br><span class="line">      <span class="keyword">const</span> ast = parser.parse();   </span><br><span class="line">        </span><br><span class="line">      <span class="comment">//省略部分其他代码</span></span><br><span class="line">        </span><br><span class="line">      <span class="keyword">return</span> ast;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (moduleError) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        options.sourceType = <span class="string">"script"</span>;</span><br><span class="line">        <span class="keyword">return</span> getParser(options, input).parse();</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> moduleError;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getParser(options, input).parse();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码核心就是通过<code>getParser</code>方法获取一个parser，然后用获取的parser去进行解析。</p>
<p>我们再来看一下这个<code>getParser</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParser</span>(<span class="params">options: ?Options, input: string</span>): <span class="title">Parser</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取Parser</span></span><br><span class="line">  <span class="keyword">let</span> cls = Parser;</span><br><span class="line">  <span class="comment">// 如果options中声明了插件，首先校验插件的声明方式是否合理，如果合理，则开启插件功能</span></span><br><span class="line">  <span class="comment">// 是的，开启插件功能，Parser的插件都是内置的，只能通过配置去选择是否开启这些插件</span></span><br><span class="line">  <span class="keyword">if</span> (options?.plugins) &#123;</span><br><span class="line">    validatePlugins(options.plugins);</span><br><span class="line">    cls = getParserClass(options.plugins);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> cls(options, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parserClassCache: &#123; [key: string]: Class&lt;Parser&gt; &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get a Parser class with plugins applied. */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParserClass</span>(<span class="params">pluginsFromOptions: PluginList</span>): <span class="title">Class</span>&lt;<span class="title">Parser</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// mixinPluginNames就是所有内置插件的名称</span></span><br><span class="line">  <span class="keyword">const</span> pluginList = mixinPluginNames.filter(<span class="function"><span class="params">name</span> =&gt;</span></span><br><span class="line">    hasPlugin(pluginsFromOptions, name),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对当前的插件组合进行缓存</span></span><br><span class="line">  <span class="keyword">const</span> key = pluginList.join(<span class="string">"/"</span>);</span><br><span class="line">  <span class="keyword">let</span> cls = parserClassCache[key];</span><br><span class="line">  <span class="keyword">if</span> (!cls) &#123;</span><br><span class="line">    cls = Parser;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> pluginList) &#123;</span><br><span class="line">      cls = mixinPlugins[plugin](cls);</span><br><span class="line">    &#125;</span><br><span class="line">    parserClassCache[key] = cls;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Parser解析流程"><a href="#Parser解析流程" class="headerlink" title="Parser解析流程"></a>Parser解析流程</h2><p>到现在，我们搞清楚了入口文件的逻辑，主要就是两部分，第一部分声明Parser，第二部分，如果配置了插件，为Parser开启插件功能。</p>
<p>那我们就继续看一下Parser的逻辑</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parser</span> <span class="keyword">extends</span> <span class="title">StatementParser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options: ?Options, input: string) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parse(): File &#123;</span><br><span class="line">    <span class="keyword">this</span>.enterInitialScopes();</span><br><span class="line">    <span class="keyword">const</span> file = <span class="keyword">this</span>.startNode();</span><br><span class="line">    <span class="keyword">const</span> program = <span class="keyword">this</span>.startNode();</span><br><span class="line">    <span class="keyword">this</span>.nextToken();</span><br><span class="line">    file.errors = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.parseTopLevel(file, program);</span><br><span class="line">    file.errors = <span class="keyword">this</span>.state.errors;</span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数中都是一些准备工作，先不关注，主要逻辑还是在这个parse函数中</p>
<h3 id="1-enterInitialScopes"><a href="#1-enterInitialScopes" class="headerlink" title="1.enterInitialScopes"></a>1.enterInitialScopes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enterInitialScopes() &#123;</span><br><span class="line">    <span class="keyword">let</span> paramFlags = PARAM;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.hasPlugin(<span class="string">"topLevelAwait"</span>) &amp;&amp; <span class="keyword">this</span>.inModule) &#123;</span><br><span class="line">      paramFlags |= PARAM_AWAIT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.scope.enter(SCOPE_PROGRAM);</span><br><span class="line">    <span class="keyword">this</span>.prodParam.enter(paramFlags);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这一步，就是初始化一开始的根节点，以及对应的参数和作用域</p>
<h3 id="2-startNode"><a href="#2-startNode" class="headerlink" title="2. startNode"></a>2. startNode</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">startNode&lt;T: NodeType&gt;(): T &#123;</span><br><span class="line">    <span class="comment">// $FlowIgnore</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node(<span class="keyword">this</span>, <span class="keyword">this</span>.state.start, <span class="keyword">this</span>.state.startLoc);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-nextToken"><a href="#3-nextToken" class="headerlink" title="3. nextToken"></a>3. nextToken</h3><p>这部分就是解析的重点了，这一部分的代码会比较复杂，解析过程中会一个个字符得向后解析，利用有限状态机的状态转移去判断不同的状态，最终在到达某种状态，去产生一个token。</p>
<p>如读取到123456这个数字的6时，判断后面是空格或者分号，就生成一个数字的token。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">nextToken(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="comment">// curContext = this.state.context[this.state.context.length - 1];</span></span><br><span class="line">    <span class="keyword">const</span> curContext = <span class="keyword">this</span>.curContext();</span><br><span class="line">    <span class="comment">// 内部会不断循环跳过所有的空格，如空格，tab等</span></span><br><span class="line">    <span class="keyword">if</span> (!curContext.preserveSpace) <span class="keyword">this</span>.skipSpace();</span><br><span class="line">    <span class="keyword">this</span>.state.start = <span class="keyword">this</span>.state.pos;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isLookahead) <span class="keyword">this</span>.state.startLoc = <span class="keyword">this</span>.state.curPosition();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.pos &gt;= <span class="keyword">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">this</span>.finishToken(tt.eof);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curContext === ct.template) &#123;</span><br><span class="line">      <span class="comment">// 读取模板字符串Token</span></span><br><span class="line">      <span class="keyword">this</span>.readTmplToken();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 读取普通Token，codePointAtPos返回的是pos位置的字符的ASCII码</span></span><br><span class="line">      <span class="keyword">this</span>.getTokenFromCode(<span class="keyword">this</span>.codePointAtPos(<span class="keyword">this</span>.state.pos));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-parseTopLevel"><a href="#4-parseTopLevel" class="headerlink" title="4. parseTopLevel"></a>4. parseTopLevel</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">parseTopLevel(file: N.File, <span class="attr">program</span>: N.Program): N.File &#123;</span><br><span class="line">    file.program = <span class="keyword">this</span>.parseProgram(program);</span><br><span class="line">    file.comments = <span class="keyword">this</span>.state.comments;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.tokens) file.tokens = babel7CompatTokens(<span class="keyword">this</span>.tokens);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.finishNode(file, <span class="string">"File"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这里会继续调用<code>parseProgram</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">parseProgram(</span><br><span class="line">    program: N.Program,</span><br><span class="line">    end: TokenType = tt.eof,</span><br><span class="line">    sourceType: SourceType = <span class="keyword">this</span>.options.sourceType,</span><br><span class="line">  ): N.Program &#123;</span><br><span class="line">    program.sourceType = sourceType;</span><br><span class="line">    program.interpreter = <span class="keyword">this</span>.parseInterpreterDirective();</span><br><span class="line">    <span class="keyword">this</span>.parseBlockBody(program, <span class="literal">true</span>, <span class="literal">true</span>, end);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">this</span>.inModule &amp;&amp;</span><br><span class="line">      !<span class="keyword">this</span>.options.allowUndeclaredExports &amp;&amp;</span><br><span class="line">      <span class="keyword">this</span>.scope.undefinedExports.size &gt; <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> [name] <span class="keyword">of</span> <span class="built_in">Array</span>.from(<span class="keyword">this</span>.scope.undefinedExports)) &#123;</span><br><span class="line">        <span class="keyword">const</span> pos = <span class="keyword">this</span>.scope.undefinedExports.get(name);</span><br><span class="line">        <span class="comment">// $FlowIssue</span></span><br><span class="line">        <span class="keyword">this</span>.raise(pos, Errors.ModuleExportUndefined, name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.finishNode&lt;N.Program&gt;(program, <span class="string">"Program"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>再调用<code>parseBlockBody</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">parseBlockBody(</span><br><span class="line">    node: N.BlockStatementLike,</span><br><span class="line">    allowDirectives: ?boolean,</span><br><span class="line">    topLevel: boolean,</span><br><span class="line">    end: TokenType,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = (node.body = []);</span><br><span class="line">    <span class="keyword">const</span> directives = (node.directives = []);</span><br><span class="line">    <span class="keyword">this</span>.parseBlockOrModuleBlockBody(</span><br><span class="line">      body,</span><br><span class="line">      allowDirectives ? directives : <span class="literal">undefined</span>,</span><br><span class="line">      topLevel,</span><br><span class="line">      end,</span><br><span class="line">      afterBlockParse,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>继续调用<code>parseBlockOrModuleBlockBody</code>，最终进入递归，通过parserStatement，next等函数去不断递归调用nextToken，直到将一开始parser方法传入的字符串完全解析完。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">parseBlockOrModuleBlockBody(</span><br><span class="line">    body: N.Statement[],</span><br><span class="line">    directives: ?(N.Directive[]),</span><br><span class="line">    topLevel: boolean,</span><br><span class="line">    end: TokenType,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldStrict = <span class="keyword">this</span>.state.strict;</span><br><span class="line">    <span class="keyword">let</span> hasStrictModeDirective = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> parsedNonDirective = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="keyword">this</span>.match(end)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stmt = <span class="keyword">this</span>.parseStatement(<span class="literal">null</span>, topLevel);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (directives &amp;&amp; !parsedNonDirective) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isValidDirective(stmt)) &#123;</span><br><span class="line">          <span class="keyword">const</span> directive = <span class="keyword">this</span>.stmtToDirective(stmt);</span><br><span class="line">          directives.push(directive);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            !hasStrictModeDirective &amp;&amp;</span><br><span class="line">            directive.value.value === <span class="string">"use strict"</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            hasStrictModeDirective = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.setStrict(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parsedNonDirective = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// clear strict errors since the strict mode will not change within the block</span></span><br><span class="line">        <span class="keyword">this</span>.state.strictErrors.clear();</span><br><span class="line">      &#125;</span><br><span class="line">      body.push(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (afterBlockParse) &#123;</span><br><span class="line">      afterBlockParse.call(<span class="keyword">this</span>, hasStrictModeDirective);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldStrict) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setStrict(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.next();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>用一个简单的图来表示，大概就是这样，省略了很多细节</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625014272/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210630085034_nq6abs.png" alt></p>
<h2 id="nextToken方法解析"><a href="#nextToken方法解析" class="headerlink" title="nextToken方法解析"></a>nextToken方法解析</h2><h3 id="readTmplToken读取模板字符串"><a href="#readTmplToken读取模板字符串" class="headerlink" title="readTmplToken读取模板字符串"></a>readTmplToken读取模板字符串</h3><p>这是我根据代码分析出来的状态机</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625100732/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085141_jdhpvd.png" alt></p>
<p>我们尝试下看看结果</p>
<p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1625101028/origin-of-ray/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210701085657_sxvzrs.png" alt></p>
<h3 id="getTokenFromCode"><a href="#getTokenFromCode" class="headerlink" title="getTokenFromCode"></a>getTokenFromCode</h3><p>这个函数逻辑上来讲不复杂，但是条件分之特别多，因为需要适配各种不同的字符去判断，简单展示下：</p>
<h4 id="charcodes"><a href="#charcodes" class="headerlink" title="charcodes"></a>charcodes</h4><p>代码中用到的各种charCodes，是另外一个仓库的内容，这是链接：<a href="https://github.com/xtuc/charcodes/blob/master/packages/charcodes/src/index.js" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/xtuc/charcodes/blob/master/packages/charcodes/src/index.js</a></p>
<h4 id="TokenType"><a href="#TokenType" class="headerlink" title="TokenType"></a>TokenType</h4><p>而finishToken的参数其实是一个个内置好的TokenType，如<code>tt.parentL</code>其实就是<code>parenL: new TokenType(&quot;(&quot;, { beforeExpr, startsExpr }),</code></p>
<p>这些TokenType就是所有babel内置的token类型，而TokenType来源有两个， 一个是Tokenizer内置的，另一种就是parser的plugin提供的，但是我们也说过，parser的plugin对于用户来说只是个开关，所以本质上，所有的TokenType都是babel-praser一开始内置好的。</p>
<p>主要分为四类，一类是变量类型，如number，string，一类是符号，如括号，冒号之类，一类是表达式，如等于，大于，最后就是关键字，如switch，case等</p>
<h4 id="函数逻辑"><a href="#函数逻辑" class="headerlink" title="函数逻辑"></a>函数逻辑</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">getTokenFromCode(code: number): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">      <span class="comment">// The interpretation of a dot depends on whether it is followed</span></span><br><span class="line">      <span class="comment">// by a digit or another two dots.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> charCodes.dot:</span><br><span class="line">        <span class="keyword">this</span>.readToken_dot();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Punctuation tokens.</span></span><br><span class="line">      <span class="keyword">case</span> charCodes.leftParenthesis:</span><br><span class="line">        ++<span class="keyword">this</span>.state.pos;</span><br><span class="line">        <span class="keyword">this</span>.finishToken(tt.parenL);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.rightParenthesis:</span><br><span class="line">        ++<span class="keyword">this</span>.state.pos;</span><br><span class="line">        <span class="keyword">this</span>.finishToken(tt.parenR);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.semicolon:</span><br><span class="line">        ++<span class="keyword">this</span>.state.pos;</span><br><span class="line">        <span class="keyword">this</span>.finishToken(tt.semi);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> charCodes.comma:</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 这里省略几十种条件</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (isIdentifierStart(code)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.readWord(code);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">this</span>.raise(</span><br><span class="line">      <span class="keyword">this</span>.state.pos,</span><br><span class="line">      Errors.InvalidOrUnexpectedToken,</span><br><span class="line">      <span class="built_in">String</span>.fromCodePoint(code),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="parseTopLevel方法解析"><a href="#parseTopLevel方法解析" class="headerlink" title="parseTopLevel方法解析"></a>parseTopLevel方法解析</h2><p>在一开始的流程解析中，我们要看到了，这个函数的主要逻辑在<code>parseBlockOrModuleBlockBody</code>函数中，我们就先来看看这个函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">parseBlockOrModuleBlockBody(</span><br><span class="line">    body: N.Statement[],</span><br><span class="line">    directives: ?(N.Directive[]),</span><br><span class="line">    topLevel: boolean,</span><br><span class="line">    end: TokenType,</span><br><span class="line">    afterBlockParse?: <span class="function">(<span class="params">hasStrictModeDirective: boolean</span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  ): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldStrict = <span class="keyword">this</span>.state.strict;</span><br><span class="line">    <span class="keyword">let</span> hasStrictModeDirective = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> parsedNonDirective = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="keyword">this</span>.match(end)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stmt = <span class="keyword">this</span>.parseStatement(<span class="literal">null</span>, topLevel);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (directives &amp;&amp; !parsedNonDirective) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isValidDirective(stmt)) &#123;</span><br><span class="line">          <span class="keyword">const</span> directive = <span class="keyword">this</span>.stmtToDirective(stmt);</span><br><span class="line">          directives.push(directive);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            !hasStrictModeDirective &amp;&amp;</span><br><span class="line">            directive.value.value === <span class="string">"use strict"</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            hasStrictModeDirective = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.setStrict(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parsedNonDirective = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// clear strict errors since the strict mode will not change within the block</span></span><br><span class="line">        <span class="keyword">this</span>.state.strictErrors.clear();</span><br><span class="line">      &#125;</span><br><span class="line">      body.push(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (afterBlockParse) &#123;</span><br><span class="line">      afterBlockParse.call(<span class="keyword">this</span>, hasStrictModeDirective);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldStrict) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setStrict(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.next();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这个函数看起来不短，但是主要逻辑就是while循环，只要满足<code>!this.match(end)</code>就会一直解析，这个end其实就是tt.eof，也就是我们刚才TokenType中的一种，表示文件结束。</p>
<p>循环体 主要内容就是两个<code>const stmt = this.parseStatement(null, topLevel);</code>和<code>body.push(stmt);</code>，这个stmt就是一个AST的Node</p>
<h3 id="parseStatement"><a href="#parseStatement" class="headerlink" title="parseStatement"></a>parseStatement</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parseStatement(context: ?string, topLevel?: boolean): N.Statement &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.match(tt.at)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.parseDecorators(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.parseStatementContent(context, topLevel);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>第一行就是判断当前是否是@，如果是，那就是装饰器，这个暂时不管</p>
<p>我们看看这个<code>parseStatementContent</code></p>
<h3 id="parseStatementContent"><a href="#parseStatementContent" class="headerlink" title="parseStatementContent"></a>parseStatementContent</h3><p>这个函数就很像刚才的Tokenizer中的<code>getTokenFromCode</code>了，<code>getTokenFromCode</code>是根据code生成各种不同类型的token，而<code>parseStatementContent</code>是根据不同类型的token去生成AST Node。</p>
<p>然后在解析过程中，有些特殊情况，会重新去调用Tokenizer的nextToken继续去生成新的token，比如解析到import</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">parseStatementContent(context: ?string, <span class="attr">topLevel</span>: ?boolean): N.Statement &#123;</span><br><span class="line">    <span class="keyword">let</span> starttype = <span class="keyword">this</span>.state.type;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">this</span>.startNode();</span><br><span class="line">    <span class="keyword">let</span> kind;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isLet(context)) &#123;</span><br><span class="line">      starttype = tt._var;</span><br><span class="line">      kind = <span class="string">"let"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Most types of statements are recognized by the keyword they</span></span><br><span class="line">    <span class="comment">// start with. Many are trivial to parse, some require a bit of</span></span><br><span class="line">    <span class="comment">// complexity.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (starttype) &#123;</span><br><span class="line">      <span class="keyword">case</span> tt._break:</span><br><span class="line">      <span class="keyword">case</span> tt._continue:</span><br><span class="line">        <span class="comment">// $FlowFixMe</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.parseBreakContinueStatement(node, starttype.keyword);</span><br><span class="line">      <span class="keyword">case</span> tt._debugger:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.parseDebuggerStatement(node);</span><br><span class="line">      <span class="keyword">case</span> tt._do:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.parseDoStatement(node);</span><br><span class="line">      <span class="keyword">case</span> tt._for:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.parseForStatement(node);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 省略各种tokenType的判断</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>: &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isAsyncFunction()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (context) &#123;</span><br><span class="line">            <span class="keyword">this</span>.raise(</span><br><span class="line">              <span class="keyword">this</span>.state.start,</span><br><span class="line">              Errors.AsyncFunctionInSingleStatementContext,</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.next(); <span class="comment">// 这里又会去调用Tokenizer的nextToken方法</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.parseFunctionStatement(node, <span class="literal">true</span>, !context);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the statement does not start with a statement keyword or a</span></span><br><span class="line">    <span class="comment">// brace, it's an ExpressionStatement or LabeledStatement. We</span></span><br><span class="line">    <span class="comment">// simply start parsing an expression, and afterwards, if the</span></span><br><span class="line">    <span class="comment">// next token is a colon and the expression was a simple</span></span><br><span class="line">    <span class="comment">// Identifier node, we switch to interpreting it as a label.</span></span><br><span class="line">    <span class="keyword">const</span> maybeName = <span class="keyword">this</span>.state.value;</span><br><span class="line">    <span class="keyword">const</span> expr = <span class="keyword">this</span>.parseExpression();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      starttype === tt.name &amp;&amp;</span><br><span class="line">      expr.type === <span class="string">"Identifier"</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">this</span>.eat(tt.colon)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.parseLabeledStatement(node, maybeName, expr, context);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.parseExpressionStatement(node, expr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

    </div>

    
    
    
        

<div>
<ul class="post-copyright">
  <li class="post-copyright-author">
    <strong>Post author:  </strong>Ray Sun
  </li>
  <li class="post-copyright-link">
    <strong>Post link: </strong>
    <a href="https://sunra.top/posts/5517" title="深入Babel原理系列（二）Parser代码结构简介">https://sunra.top/posts/5517</a>
  </li>
  <li class="post-copyright-license">
    <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="external nofollow noopener noreferrer" target="_blank"><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</a> unless stating additionally.
  </li>
</ul>
</div>

        

  <div class="followme">
    <p>Welcome to my other publishing channels</p>

    <div class="social-list">

        <div class="social-item">
          <a target="_blank" class="social-link" href="/atom.xml">
            <span class="icon">
              <i class="fa fa-rss"></i>
            </span>

            <span class="label">RSS</span>
          </a>
        </div>
    </div>
  </div>


      <footer class="post-footer">

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/posts/17020" rel="prev" title="深入Babel原理系列（一）Babel工作流程与项目结构简介">
      <i class="fa fa-chevron-left"></i> 深入Babel原理系列（一）Babel工作流程与项目结构简介
    </a></div>
      <div class="post-nav-item">
    <a href="/posts/43883" rel="next" title="深入Babel原理系列（三）Tokenizer">
      深入Babel原理系列（三）Tokenizer <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          Table of Contents
        </li>
        <li class="sidebar-nav-overview">
          Overview
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#入口"><span class="nav-number">1.</span> <span class="nav-text">入口</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Parser解析流程"><span class="nav-number">2.</span> <span class="nav-text">Parser解析流程</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-enterInitialScopes"><span class="nav-number">2.1.</span> <span class="nav-text">1.enterInitialScopes</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-startNode"><span class="nav-number">2.2.</span> <span class="nav-text">2. startNode</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-nextToken"><span class="nav-number">2.3.</span> <span class="nav-text">3. nextToken</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-parseTopLevel"><span class="nav-number">2.4.</span> <span class="nav-text">4. parseTopLevel</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#总结"><span class="nav-number">2.5.</span> <span class="nav-text">总结</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#nextToken方法解析"><span class="nav-number">3.</span> <span class="nav-text">nextToken方法解析</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#readTmplToken读取模板字符串"><span class="nav-number">3.1.</span> <span class="nav-text">readTmplToken读取模板字符串</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#getTokenFromCode"><span class="nav-number">3.2.</span> <span class="nav-text">getTokenFromCode</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#charcodes"><span class="nav-number">3.2.1.</span> <span class="nav-text">charcodes</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#TokenType"><span class="nav-number">3.2.2.</span> <span class="nav-text">TokenType</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#函数逻辑"><span class="nav-number">3.2.3.</span> <span class="nav-text">函数逻辑</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#parseTopLevel方法解析"><span class="nav-number">4.</span> <span class="nav-text">parseTopLevel方法解析</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#parseStatement"><span class="nav-number">4.1.</span> <span class="nav-text">parseStatement</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#parseStatementContent"><span class="nav-number">4.2.</span> <span class="nav-text">parseStatementContent</span></a></li></ol></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Ray Sun" src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1592617514/avatar_rpap6c.jpg">
  <p class="site-author-name" itemprop="name">Ray Sun</p>
  <div class="site-description" itemprop="description">拨开互联网的迷雾</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">266</span>
          <span class="site-state-item-name">posts</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">16</span>
        <span class="site-state-item-name">categories</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/Sun668" title="GitHub → https://github.com/Sun668" rel="external nofollow noopener noreferrer" target="_blank"><i class="fab fa-github fa-fw"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:947692259@qq.com" title="E-Mail → mailto:947692259@qq.com" rel="external nofollow noopener noreferrer" target="_blank"><i class="fa fa-envelope fa-fw"></i>E-Mail</a>
      </span>
  </div>
  <div class="cc-license motion-element" itemprop="license">
    <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" class="cc-opacity" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/cc-by-nc-sa.svg" alt="Creative Commons"></a>
  </div>



      </div>

      <div class="wechat_channel" style="width: 50%;margin-left: 25%;">
        <br>
        <!-- 这里添加你的二维码图片 -->
        <img src="/images/wechat_channel.png">
        <!-- <span>公众号</span> -->
      </div>
    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2023</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Ray Sun</span>
</div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>
<script src="/js/utils.js"></script><script src="/js/motion.js"></script>
<script src="/js/schemes/muse.js"></script>
<script src="/js/next-boot.js"></script>



  
  <script>
    (function(){
      var canonicalURL, curProtocol;
      //Get the <link> tag
      var x=document.getElementsByTagName("link");
		//Find the last canonical URL
		if(x.length > 0){
			for (i=0;i<x.length;i++){
				if(x[i].rel.toLowerCase() == 'canonical' && x[i].href){
					canonicalURL=x[i].href;
				}
			}
		}
    //Get protocol
	    if (!canonicalURL){
	    	curProtocol = window.location.protocol.split(':')[0];
	    }
	    else{
	    	curProtocol = canonicalURL.split(':')[0];
	    }
      //Get current URL if the canonical URL does not exist
	    if (!canonicalURL) canonicalURL = window.location.href;
	    //Assign script content. Replace current URL with the canonical URL
      !function(){var e=/([http|https]:\/\/[a-zA-Z0-9\_\.]+\.baidu\.com)/gi,r=canonicalURL,t=document.referrer;if(!e.test(r)){var n=(String(curProtocol).toLowerCase() === 'https')?"https://sp0.baidu.com/9_Q4simg2RQJ8t7jm9iCKT-xh_/s.gif":"//api.share.baidu.com/s.gif";t?(n+="?r="+encodeURIComponent(document.referrer),r&&(n+="&l="+r)):r&&(n+="?l="+r);var i=new Image;i.src=n}}(window);})();
  </script>




  <script src="/js/local-search.js"></script>












  

  

  

</body>
</html>
