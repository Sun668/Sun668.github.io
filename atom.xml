<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>一起探索互联网的秘密</subtitle>
  <link href="https://sunra.top/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/"/>
  <updated>2023-08-12T14:21:03.154Z</updated>
  <id>https://sunra.top/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洪水填充算法</title>
    <link href="https://sunra.top/posts/886d125/"/>
    <id>https://sunra.top/posts/886d125/</id>
    <published>2023-08-16T03:35:03.000Z</published>
    <updated>2023-08-12T14:21:03.154Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了一个编程大赛是用程序去走迷宫，其中提到了一种比较有趣的方式，叫做洪水填充算法，它模拟的是在假设我们在一个迷宫的入口注水，如果有出口，水必定会从出口流出的这个过程，听起来比较有趣，于是看了一下其算法思想。</p><span id="more"></span><h1 id="什么是洪水填充算法"><a href="#什么是洪水填充算法" class="headerlink" title="什么是洪水填充算法"></a>什么是洪水填充算法</h1><p>洪水填充算法是一种用于图像处理和计算机图形学中的算法，用于将特定区域内的像素值替换为新的值。它从一个种子点开始，将相邻的像素逐个加入到一个队列中，并逐个处理队列中的像素，直到队列为空。处理过程中，可以根据特定的条件来判断是否将相邻的像素加入队列，以控制填充的范围。</p><p>洪水填充(也称为种子填充)是一种算法，用于确定连接到多维数组中给定节点的区域。</p><p>它用于绘画程序的“桶”填充工具，以用不同的颜色填充连接的、类似颜色的区域，并在围棋和扫雷等游戏中用于确定哪些棋子被清除。当应用于图像以用颜色填充特定的有界区域时，它也称为边界填充。</p><p>洪水填充算法采用三个参数：起始节点、目标颜色和替换颜色。</p><p>考虑左边的以下矩阵——如果起始节点是 (3, 9)，目标颜色为 “BLACK” 替换颜色是 “GREY”，该算法在矩阵中查找所有通过目标颜色的路径连接到起始节点的节点，并将它们更改为替换颜色。</p><h1 id="洪水填充算法与BFS，DFS的关系"><a href="#洪水填充算法与BFS，DFS的关系" class="headerlink" title="洪水填充算法与BFS，DFS的关系"></a>洪水填充算法与BFS，DFS的关系</h1><p>BFS和DFS是用于图的遍历的算法，它们可以用于搜索图中的节点或路径。它们的主要区别在于遍历的顺序不同。</p><p>BFS是一种层次遍历算法，从起始节点开始，依次访问其所有的相邻节点，然后再访问相邻节点的相邻节点，以此类推。BFS使用队列来保存待访问的节点，保证了按照层次进行遍历。</p><p>DFS是一种深度遍历算法，从起始节点开始，沿着一条路径一直遍历到底，直到无法继续深入为止，然后回溯到上一个节点，继续遍历其他路径。DFS使用栈来保存待访问的节点，保证了深度优先的特性。</p><p>洪水填充算法可以看作是一种特殊的BFS算法，它在图像中以种子点为起始节点，按照广度优先的方式进行遍历，直到无法再扩展。因此，可以说洪水填充算法是BFS的一种应用。</p><p>另外，洪水填充算法也可以使用DFS来实现，只需将栈替换为递归调用即可。但是相比于BFS，DFS在洪水填充算法中可能会导致堆栈溢出的问题，因为DFS会一直深入直到无法再扩展，而图像中的区域可能非常大，导致递归调用层次过深。</p><p>综上所述，洪水填充算法与BFS和DFS有一定的关系，可以将其看作是BFS的一种特殊应用，而DFS也可以用于实现洪水填充算法，但需要注意堆栈溢出的问题。</p><h1 id="洪水填充算法的实现"><a href="#洪水填充算法的实现" class="headerlink" title="洪水填充算法的实现"></a>洪水填充算法的实现</h1><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面列出了所有八种可能的动作</span></span><br><span class="line">row = [-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">col = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查是否可以从像素 (x, y)</span></span><br><span class="line"><span class="comment"># 当前像素。函数返回 false 如果像素</span></span><br><span class="line"><span class="comment"># 颜色不同，或者不是有效像素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isSafe</span>(<span class="params">mat, x, y, target</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &lt;= x &lt; <span class="built_in">len</span>(mat) <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; <span class="built_in">len</span>(mat[<span class="number">0</span>]) <span class="keyword">and</span> mat[x][y] == target</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 BFS 进行洪水填充</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floodfill</span>(<span class="params">mat, x, y, replacement</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 基础案例</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mat <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">len</span>(mat):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 创建Queue并入队起始像素</span></span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((x, y))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 获取目标颜色</span></span><br><span class="line">    target = mat[x][y]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#目标颜色与替换相同</span></span><br><span class="line">    <span class="keyword">if</span> target == replacement:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Queue变空时#中断</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 将前端节点出列并处理</span></span><br><span class="line">        x, y = q.popleft()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 用替换的像素颜色替换当前像素颜色</span></span><br><span class="line">        mat[x][y] = replacement</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 处理当前像素的所有八个相邻像素并</span></span><br><span class="line">        <span class="comment"># 将每个有效像素排入Queue</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row)):</span><br><span class="line">            <span class="comment"># 如果位置 (x + row[k], y + col[k]) 处的相邻像素是</span></span><br><span class="line">            <span class="comment">#有效，与当前像素颜色相同</span></span><br><span class="line">            <span class="keyword">if</span> isSafe(mat, x + row[k], y + col[k], target):</span><br><span class="line">                <span class="comment"># 将相邻像素排入Queue</span></span><br><span class="line">                q.append((x + row[k], y + col[k]))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 矩阵显示具有不同颜色的屏幕部分</span></span><br><span class="line">    mat = [</span><br><span class="line">            [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">    ]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#启动节点</span></span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">    y = <span class="number">9</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 具有目标颜色`X`</span></span><br><span class="line">    <span class="comment">#替换色</span></span><br><span class="line">    replacement = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 用替换色替换目标色</span></span><br><span class="line">    floodfill(mat, x, y, replacement)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 更换后打印颜色</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> mat:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面列出了所有八种可能的动作</span></span><br><span class="line">row = [-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">col = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查是否可以从像素 (x, y)</span></span><br><span class="line"><span class="comment"># 当前像素。函数返回 false 如果像素</span></span><br><span class="line"><span class="comment"># 颜色不同，或者不是有效像素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isSafe</span>(<span class="params">mat, x, y, target</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &lt;= x &lt; <span class="built_in">len</span>(mat) <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; <span class="built_in">len</span>(mat[<span class="number">0</span>]) <span class="keyword">and</span> mat[x][y] == target</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 DFS 进行洪水填充</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floodfill</span>(<span class="params">mat, x, y, replacement</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 基础案例</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mat <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">len</span>(mat):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 获取目标颜色</span></span><br><span class="line">    target = mat[x][y]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#目标颜色与替换相同</span></span><br><span class="line">    <span class="keyword">if</span> target == replacement:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 用替换的像素颜色替换当前像素颜色</span></span><br><span class="line">    mat[x][y] = replacement</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 处理当前像素的所有八个相邻像素并</span></span><br><span class="line">    <span class="comment"># 每个有效像素重复</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row)):</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 如果位置 (x + row[k], y + col[k]) 处的相邻像素是</span></span><br><span class="line">        <span class="comment"># 一个有效像素，与当前像素颜色相同</span></span><br><span class="line">        <span class="keyword">if</span> isSafe(mat, x + row[k], y + col[k], target):</span><br><span class="line">            floodfill(mat, x + row[k], y + col[k], replacement)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 矩阵显示具有不同颜色的屏幕部分</span></span><br><span class="line">    mat = [</span><br><span class="line">            [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">        ]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#启动节点</span></span><br><span class="line">    x, y = (<span class="number">3</span>, <span class="number">9</span>)   <span class="comment"># 具有目标颜色`X`</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#替换色</span></span><br><span class="line">    replacement = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 使用 DFS 将目标颜色替换为替换颜色</span></span><br><span class="line">    floodfill(mat, x, y, replacement)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 更换后打印颜色</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> mat:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h1 id="使用洪水填充算法解迷宫"><a href="#使用洪水填充算法解迷宫" class="headerlink" title="使用洪水填充算法解迷宫"></a>使用洪水填充算法解迷宫</h1><p>洪水填充算法（Flood Fill Algorithm）通常用于填充连通区域。虽然它不是用于解决迷宫最短路径问题的常规算法，但我们可以将其稍作修改来实现这个目标。</p><p>以下是使用洪水填充算法解决迷宫最短路径问题的步骤：</p><ol><li><p>创建一个与迷宫相同大小的二维数组，用于表示迷宫的状态。初始状态下，所有的格子都被标记为未访问状态。</p></li><li><p>选择一个起始点作为洪水的源点，并将其标记为已访问状态。</p></li><li><p>将源点加入到一个队列中。</p></li><li><p>进入循环，直到队列为空：</p></li></ol><ul><li>从队列中取出一个格子。</li><li>检查该格子的上、下、左、右四个邻居格子：<ul><li>如果邻居格子是终点，说明找到了最短路径，可以结束算法。</li><li>如果邻居格子是通路（未访问状态），将其标记为已访问状态，并将其加入队列中。</li></ul></li></ul><ol><li><p>如果队列为空，说明无法找到最短路径。</p></li><li><p>反向追踪标记的路径，从终点开始，根据每个格子周围的已访问格子找到最短路径。</p></li></ol><p>这种方法基于广度优先搜索（BFS）的思想，通过逐层遍历迷宫来找到最短路径。洪水填充算法的核心思想是从源点开始，逐渐扩散到周围的格子，直到达到目标点。</p><p>请注意，这种方法并不保证找到迷宫的最短路径，但它是一种简单且直观的方法，可以用于解决一般情况下的迷宫问题。对于复杂的迷宫，可能需要使用其他更高级的算法来找到最短路径。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近看到了一个编程大赛是用程序去走迷宫，其中提到了一种比较有趣的方式，叫做洪水填充算法，它模拟的是在假设我们在一个迷宫的入口注水，如果有出口，水必定会从出口流出的这个过程，听起来比较有趣，于是看了一下其算法思想。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（七）—— 管理沟通上篇</title>
    <link href="https://sunra.top/posts/eea95eb1/"/>
    <id>https://sunra.top/posts/eea95eb1/</id>
    <published>2023-07-30T00:35:37.000Z</published>
    <updated>2023-08-12T14:20:13.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="管理沟通的两个视角"><a href="#管理沟通的两个视角" class="headerlink" title="管理沟通的两个视角"></a>管理沟通的两个视角</h3><p>为什么管理沟通总是很难做。<br>一方面因为管理沟通确实是个很有挑战性的话题，对于技术管理者来说尤其是<br>另一方面很重要的原因是，我们在学习管理沟通的时候，重心往往放在沟通上，这就割裂了管理和沟通，因此，不但过对的管理沟通解决不了问题，还会给员工很强的套路感。如<br>总是和员工说要积极，看到员工不积极还很恼火，这忽视了提高员工积极性要靠员工激励方案。<br>认为团队文化的建设就是喊口号，不断强调，如果忽视了管理举措和文化的一致性，强调再多也没有用</p><span id="more"></span><ul><li><p>管理视角</p><p>这是一个什么样的管理问题，是角色认知问题，还是管理规划，还是团队建设或任务管理问题</p></li></ul><ul><li><p>沟通视角</p><p>对于当前的管理问题，沟通应该怎么做，沟通的目的是什么，要准备哪些内容，以何种方式来沟通。</p></li></ul><h3 id="管理沟通的挑战"><a href="#管理沟通的挑战" class="headerlink" title="管理沟通的挑战"></a>管理沟通的挑战</h3><ul><li><p>技术工作</p><p>做技术工作，主要和客观事物，自然规律打交道，客观事物和自然规律的特点就是确定性，精确性和稳定性。也正是对这些特性的熟练掌握，体现出我们对客观事物的认知水平。<br>对于这些客观的，稳定的特质，我们的信念是认识她，掌握它，遵循它，利用它。<br>所以，精确，严谨，稳定以及按照规则办事，讲逻辑而非情感和感受，是技术人的基本哲学。<br>越是优秀和出色的技术人，这些特质越明显。接下来，“悲剧”就发生了，这些人往往是上级提拔管理人才的重要人选。而相对于稳定，客观的技术来说，人是非常不稳定的因素，技术人赖以成功的最拿手的改造这个世界的手段，在应对人的时候会狼狈不堪。</p></li><li><p>项目管理</p><p>技术人从编程语言和技术框架的规划，转换到项目管理的流程和规范，对于价值观的挑战还不是颠覆性的，精确性，规范性，确定性依然可以很好地发挥作用。</p></li><li><p>和下级合作</p><p>做了管理者，要和一群人相处，如果说安排他们做事还有些规矩可以遵守的话，那么员工激励就很难用规范和规则来实现了。流程和机制是用来保障工作的下限的，而激励是激发团队工作的上限</p></li><li><p>和上级合作</p><p>对规则感和掌控感而言，和下级合作至少有一个因素可以利用，即管理者的职位和角色带来的职权影响力，从职权角度讲，因为下级向你汇报，你对他们的工作有分配，知情，评价的权利，你可以主导团队的一些规则和文化。从视野角度讲，团队成员的工作都在你的视野范围内，所以你会有一种掌控感。但是和上级合作，则什么都没有。</p></li></ul><h3 id="管理沟通的基本框架"><a href="#管理沟通的基本框架" class="headerlink" title="管理沟通的基本框架"></a>管理沟通的基本框架</h3><ul><li><p>目的</p><ul><li>建立通道</li><li>同步信息</li><li>表达感情</li><li>输出影响</li></ul></li><li><p>通道</p><ul><li><p>什么是好的通道</p><ul><li><p>稳定性</p><p>即这个通道是否是稳定可靠的，不会动不动就谈崩了或者断了联系，即使有点误会双方也能相互理解和包容。<br>稳定性的背后是信任，信任让通道保持“通”</p></li><li><p>性能</p><p>沟通的效率，在这个维度上，双方的默契气到了决定性的作用</p></li></ul></li><li><p>如何建立沟通通道</p><ul><li><p>明确沟通意愿</p><p>初级沟通着需要明白，上级默认是需要下级主动向上沟通反馈的，而非默认不需要。<br>那么如何提高自己的沟通意愿呢？首先是审视自己的角色，自己是一位工程师还是一位管理者。其次，审视自己的初衷，你是为了自己而沟通还是为了团队沟通。</p></li><li><p>评估事物的特点</p><p>也就是，根据事务的特点，例如是否重要，是否紧急，是否敏感，是否正式，是否例行等，来确定沟通的方式和频次。</p></li><li><p>了解沟通风格</p><p>了解沟通对象的沟通风格，如果说审视事务的特点，是根据事来选择沟通方式，那么审视沟通对象的风格，就是根据人来选择沟通方式。<br>探讨沟通风格和管理风格的工具比较多，例如大家熟悉的DISC，盖洛普的四大优势领域，MBTI等。<br>核心就是根据沟通对象的特点，来选用更高效和对方易接受的沟通方式，这样才更容易互相理解。<br>如果来不及去了解，可以从下面几个方向去思考：他关注人还是事，他关注过程还是结果，他重逻辑还是感受，他重思考还是行动，他偏好直接还是委婉，他喜欢书面沟通还是当面沟通</p></li><li><p>审视信任关系</p><p>越信任，双方之间的沟通就越简单</p></li></ul></li></ul></li></ul><ul><li><p>内容</p><ul><li><p>内容选取</p><p>明确沟通什么，不沟通什么，沟通内容的选取是有效沟通的前提</p></li><li><p>呈现逻辑</p><p>内容选定之后，接下来就是对内容的呈现，无论是书面的还是当面，逻辑性痘痕重要。由于书面沟通节奏慢，成本高，因此呈现逻辑更加关键。比如对于邮件，以下四个原则收效显著：标题清晰，指向明确，结论优先，结构MECE</p></li><li><p>倾听</p><p>倾听的目的是为了分辨对方言谈中传递的信息，观点和意图</p></li><li><p>确认</p><p>当我们收到对方的内容的时候，就想当然地以为自己理解了对方，这就造成了很多的一厢情愿。这个时候，一两个简答的“回放式”问题就可以确认是否是这样</p></li></ul></li><li><p>影响力</p><p>共同不包括影响力，但是影响力却在很大程度上影响着沟通效果，很多时候影响力甚至是决定性的。<br>同样的沟通，具有不同影响力的人和你沟通，效果是不一样的。</p></li></ul><h3 id="管理沟通的四项积累"><a href="#管理沟通的四项积累" class="headerlink" title="管理沟通的四项积累"></a>管理沟通的四项积累</h3><ul><li><p>管理逻辑</p><p>管理逻辑和管理判断力是做好管理沟通的重要因素，而且这因素会随着管理认知和管理方法论的积累而不断提升，变得越来越有效</p></li><li><p>通道品质</p><p>信任水平和默契程度，无法速成，积累的水平越高，沟通通道的品质就越高</p></li><li><p>工具流程</p><p>沟通有很多的工具，技巧和流程，我们不需要完全掌握，而只需要掌握自己最顺手的工具，抽取并提炼</p></li><li><p>影响力</p><p>影响力的积累不是一两天的事情，其发挥作用的时候却非常稳定。</p></li></ul><h3 id="两个重要的沟通技术"><a href="#两个重要的沟通技术" class="headerlink" title="两个重要的沟通技术"></a>两个重要的沟通技术</h3><p>通道品质好就靠通道，通道品质不好就靠沟通技术</p><ul><li><p>3F倾听</p><ul><li><p>事实Fact</p><p>对齐事实信息是必要且高效的，随着信息的不断同步和默契度不断提升，在一些沟通中，这一步经常被省略，但是不代表这个不重要。</p></li><li><p>感受Feel</p><p>针对相同的客观事实，双方的感受和看法也常常是不同的。<br>我们常说的默契，主要体现在沟通双方对彼此的感受和判断逻辑的理解基础上，因此，双方越熟悉彼此的立场，思维方式，沟通风格，就越容易达成默契。<br>在默契还没有形成的时候，要有意识的去询问对方的感受，避免猜测和想当然。</p></li><li><p>意图Focus</p><p>当意图没有矛盾和冲突的时候，一场沟通本来可以达成彼此满意的结果，但是在沟通中，不在一个频道，把事实，感受，责任，原因，方案放在一起说，就导致鸡同鸭讲</p></li></ul></li><li><p>发问</p><p>大部分管理者擅长的是告诉，而不是发问</p></li></ul><ul><li><p>封闭式提问</p><p>让回答着只能在某个集合中做出选择，而无法随意发挥。例如<br>xxx，好不好/是不是。</p></li></ul><pre><code>- 适用场景  1. 要降低回答成本的时候  2. 要收敛和聚焦话题的时候  3. 要得出结论并加以确认的时候</code></pre><ul><li><p>开放式问题</p><p>回答者可以按照自己的意思进行陈述而不受限制的问题</p></li></ul><pre><code>- 适用场景  1 收集信息和观点的时候。  2. 激发对方表达意愿的时候。有时候，激发员工的表达欲，也是一种有效的激励手段  3. 缓和谈话气氛的时候</code></pre><h3 id="影响力"><a href="#影响力" class="headerlink" title="影响力"></a>影响力</h3><p>一种不是用强制性力量却能改变别人看法和行为的能力，一般又分为职权影响力和非职权影响力。</p><ul><li><p>职权影响力</p><ul><li><p>传统因素</p><p>在社会传统意识和社会规范中，人们对上级固有认知 让人们对上级的基本姿态是服从</p></li></ul></li></ul><ul><li><p>职位因素</p><p>从组织架构的角度，由于上级对下级有奖惩和评价的权利，是的下级对上级有一种敬畏感</p></li></ul><ul><li><p>资历因素</p><p>资历深的人，在资历浅的人眼里是值得尊重的</p></li></ul><ul><li><p>非职权影响力</p><ul><li><p>信任</p><ul><li><p>人品或人格</p><ol><li>深入了解。信任是建立在深入了解的基础上的，所以通过全方位的加深了解来提升信任是常用手段。</li><li>价值观认同。和我们价值观匹配的人更容易相互信任。</li></ol></li><li><p>历史表现</p><ol><li>及时响应对方，因为及时响应意味着可控，可以来，所以及时响应可以提升信任感。</li><li>去承诺，然后兑现承诺。即我们常说的承诺一致性。<br>2.1 不要承诺很多，而只要去承诺哪些你和上级都认为重要的事情<br>2.2 如果中途发生变化，提前做出更合理的调整并和上级重新明确约定<br>2.3 全力以赴确保兑现。</li></ol></li></ul></li><li><p>专业</p><ul><li>提升权威性</li><li>提升逻辑性</li></ul></li><li><p>情绪</p><ul><li><p>通过诉诸情怀来感染人</p><p>前提是，它得是真的，勉强往情怀上靠反而会让人反感。</p></li><li><p>通过情绪感染人</p><p>人不是纯理性的</p></li></ul></li><li><p>互惠</p><p>这一点是关于“心理债务”的，其影响力发挥的逻辑是，我之所以听你的，是因为我欠你的。</p></li></ul></li></ul><pre><code>- 理清楚对方的诉求，去满足对方的诉求，然后翻过来满足自己的诉求- 主动提供支持和帮助</code></pre><ul><li><p>提高影响力</p><ul><li><p>积累信任</p><ul><li>梳理自己闪光的品质，提炼并彰显出来</li><li>承诺一致性原则，把一个个当前表现积累为历史表现</li><li>对于特定对象，盘点你们相互认同的价值观</li></ul></li><li><p>打磨专业度</p><ul><li>努力成为某个方向上专家</li><li>提升自己的逻辑思维能力和表达能力</li></ul></li><li><p>运用情绪</p><ul><li>为自己的工作赋予某种情怀和意义</li><li>展现自己的气魄和勇气</li></ul></li><li><p>着眼互惠</p><ul><li>双赢思维</li><li>提供帮助</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;管理沟通的两个视角&quot;&gt;&lt;a href=&quot;#管理沟通的两个视角&quot; class=&quot;headerlink&quot; title=&quot;管理沟通的两个视角&quot;&gt;&lt;/a&gt;管理沟通的两个视角&lt;/h3&gt;&lt;p&gt;为什么管理沟通总是很难做。&lt;br&gt;一方面因为管理沟通确实是个很有挑战性的话题，对于技术管理者来说尤其是&lt;br&gt;另一方面很重要的原因是，我们在学习管理沟通的时候，重心往往放在沟通上，这就割裂了管理和沟通，因此，不但过对的管理沟通解决不了问题，还会给员工很强的套路感。如&lt;br&gt;总是和员工说要积极，看到员工不积极还很恼火，这忽视了提高员工积极性要靠员工激励方案。&lt;br&gt;认为团队文化的建设就是喊口号，不断强调，如果忽视了管理举措和文化的一致性，强调再多也没有用&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在两台Centos机器上部署主从复制的mysql</title>
    <link href="https://sunra.top/posts/547eb08f/"/>
    <id>https://sunra.top/posts/547eb08f/</id>
    <published>2023-07-22T06:16:34.000Z</published>
    <updated>2023-08-12T14:20:13.194Z</updated>
    
    <content type="html"><![CDATA[<p>为了保证数据的可靠，我们一般会对数据醉一次主从复制，最近我也进行了一点实践，踩了几个坑，在这里总结下。</p><span id="more"></span><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>我自身有两台centos的云服务器，一台已经装过mysql了，不过是5.7版本，一台是我刚装的mysql，是8.0版本。</p><h1 id="主从备份的流程"><a href="#主从备份的流程" class="headerlink" title="主从备份的流程"></a>主从备份的流程</h1><h2 id="将5-7的数据库升级"><a href="#将5-7的数据库升级" class="headerlink" title="将5.7的数据库升级"></a>将5.7的数据库升级</h2><p>因为我是打算用5.7所在的服务器作为从库的服务器，而mysql的主从备份有要求，从库的版本不能低于主库的，所以第一步就是升级</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>首先，我们要大概了解下MySQL5.7和8.0有哪些不同，参考官方文档和其他网友文章，概括总结出MySQL8.0以下几点新特性：</p><ul><li>默认字符集由latin1变为utf8mb4。</li><li>MyISAM系统表全部换成InnoDB表。</li><li>JSON特性增强。</li><li>支持不可见索引，支持直方图。</li><li>sql_mode参数默认值变化。</li><li>默认密码策略变更。</li><li>新增角色管理。</li><li>支持窗口函数，支持Hash join。</li></ul><p>根据版本变化及官方升级教程，列举出以下几点注意事项：</p><ul><li>注意字符集设置。为了避免新旧对象字符集不一致的情况，可以在配置文件将字符集和校验规则设置为旧版本的字符集和比较规则。</li><li>密码认证插件变更。为了避免连接问题，可以仍采用5.7的mysql_native_password认证插件。</li><li>sql_mode支持问题。8.0版本sql_mode不支持NO_AUTO_CREATE_USER，要避免配置的sql_mode中带有NO_AUTO_CREATE_USER。</li><li>是否需要手动升级系统表。在MySQL 8.0.16版本之前，需要手动的执行mysql_upgrade来完成该步骤的升级，在MySQL 8.0.16版本及之后是由mysqld来完成该步骤的升级。</li></ul><h3 id="升级流程"><a href="#升级流程" class="headerlink" title="升级流程"></a>升级流程</h3><p>官网下载对应版本的tar包，可通过wget下载或者本地下载后上传。</p><blockquote><p>下载地址：<br><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a><br>选择mysql-8.0.19-linux-glibc2.12-x86_64.tar.xz<br>注意，如果你下载速度很慢，可以考虑使用淘宝的镜像地址：<a href="https://mirrors.aliyun.com/mysql">https://mirrors.aliyun.com/mysql</a></p></blockquote><p>行以下步骤解压tar包：</p><ol><li><p>安装包上传至原安装包目录下 我的是/usr/local/<br>cd /usr/local/</p></li><li><p>解压安装包<br>xz -d mysql-8.0.19-linux-glibc2.12-x86_64.tar.xz<br>tar -xvf mysql-8.0.19-linux-glibc2.12-x86_64.tar</p></li><li><p>文件夹重命名为mysql8<br>mv mysql-8.0.19-linux-glibc2.12-x86_64 mysql8</p></li><li><p>更改文件夹所属<br>chown -R mysql.mysql /usr/local/mysql8/</p></li><li><p>更改配置文件my.cnf</p></li></ol><p>因5.7版本与8.0版本参数有所不同，为了能顺利升级，我们需要更改部分配置参数。主要注意sql_mode、basedir、密码认证插件及字符集设置，其他参数最好还是按照原5.7的来，不需要做调整。下面展示下更改后的配置文件：</p><blockquote><p>最后几个for8.0的参数要格外注意<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">mysqld</span>]</span><br><span class="line"><span class="string">user</span> <span class="string">=</span> <span class="string">mysql</span>        </span><br><span class="line"><span class="string">datadir</span> <span class="string">=</span> <span class="string">/data/mysql/data</span>  </span><br><span class="line"><span class="string">port</span> <span class="string">=</span> <span class="number">3306</span>               </span><br><span class="line"></span><br><span class="line"><span class="string">socket</span> <span class="string">=</span> <span class="string">/data/mysql/tmp/mysql.sock</span></span><br><span class="line"><span class="string">pid-file</span>  <span class="string">=</span> <span class="string">/data/mysql/tmp/mysqld.pid</span></span><br><span class="line"><span class="string">tmpdir</span> <span class="string">=</span> <span class="string">/data/mysql/tmp</span>    </span><br><span class="line"><span class="string">skip_name_resolve</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">max_connections</span> <span class="string">=</span> <span class="number">2000</span></span><br><span class="line"><span class="string">group_concat_max_len</span> <span class="string">=</span> <span class="number">1024000</span></span><br><span class="line"><span class="string">lower_case_table_names</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">log_timestamps=SYSTEM</span></span><br><span class="line"><span class="string">max_allowed_packet</span> <span class="string">=</span> <span class="string">32M</span></span><br><span class="line"><span class="string">binlog_cache_size</span> <span class="string">=</span> <span class="string">4M</span></span><br><span class="line"><span class="string">sort_buffer_size</span> <span class="string">=</span> <span class="string">2M</span></span><br><span class="line"><span class="string">read_buffer_size</span> <span class="string">=</span> <span class="string">4M</span></span><br><span class="line"><span class="string">join_buffer_size</span> <span class="string">=</span> <span class="string">4M</span></span><br><span class="line"><span class="string">tmp_table_size</span> <span class="string">=</span> <span class="string">96M</span></span><br><span class="line"><span class="string">max_heap_table_size</span> <span class="string">=</span> <span class="string">96M</span></span><br><span class="line"><span class="string">max_length_for_sort_data</span> <span class="string">=</span> <span class="number">8096</span></span><br><span class="line"><span class="string">default_time_zone</span> <span class="string">=</span> <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#logs</span></span><br><span class="line"><span class="string">server-id</span> <span class="string">=</span> <span class="number">1003306</span></span><br><span class="line"><span class="string">log-error</span> <span class="string">=</span> <span class="string">/data/mysql/logs/error.log</span></span><br><span class="line"><span class="string">slow_query_log</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">slow_query_log_file</span> <span class="string">=</span> <span class="string">/data/mysql/logs/slow.log</span></span><br><span class="line"><span class="string">long_query_time</span> <span class="string">=</span> <span class="number">3</span></span><br><span class="line"><span class="string">log-bin</span> <span class="string">=</span> <span class="string">/data/mysql/logs/binlog</span></span><br><span class="line"><span class="string">binlog_format</span> <span class="string">=</span> <span class="string">row</span></span><br><span class="line"><span class="string">log_bin_trust_function_creators</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">gtid_mode</span> <span class="string">=</span> <span class="string">ON</span></span><br><span class="line"><span class="string">enforce_gtid_consistency</span> <span class="string">=</span> <span class="string">ON</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#for8.0</span></span><br><span class="line"><span class="string">sql_mode</span> <span class="string">=</span> <span class="string">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span></span><br><span class="line"><span class="string">character-set-server</span> <span class="string">=</span> <span class="string">utf8</span></span><br><span class="line"><span class="string">collation_server</span> <span class="string">=</span> <span class="string">utf8_general_ci</span></span><br><span class="line"><span class="string">basedir</span> <span class="string">=</span> <span class="string">/usr/local/mysql8</span></span><br><span class="line"><span class="string">skip_ssl</span></span><br><span class="line"><span class="string">default_authentication_plugin=mysql_native_password</span></span><br></pre></td></tr></table></figure></p></blockquote><ol><li>执行升级动作</li></ol><p>所有前置工作准备好后就可以开始正式升级了，不过升级前还是建议先全库备份下。万事俱备后，按照如下指示进行正式升级。</p><p>进入原5.7 mysql命令行 正确关闭数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> version();</span></span><br><span class="line">+------------+</span><br><span class="line">| version()  |</span><br><span class="line">+------------+</span><br><span class="line">| 5.7.23-log |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&#x27;innodb_fast_shutdown&#x27;</span>;</span></span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Variable_name        | Value |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| innodb_fast_shutdown | 1     |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保数据都刷到硬盘上，更改成0</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> global innodb_fast_shutdown=0;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">shutdown;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">Bye</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出至终端 用mysql8.0.19客户端直接启动</span></span><br><span class="line">[root@centos ~]# /usr/local/mysql8/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql &amp; </span><br><span class="line">[1] 23333</span><br><span class="line">[root@centos ~]# 2020-05-20T07:07:02.337626Z mysqld_safe Logging to &#x27;/data/mysql/logs/error.log&#x27;.</span><br><span class="line">2020-05-20T07:07:02.366244Z mysqld_safe Starting mysqld daemon with databases from /data/mysql/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可观察下错误日志看是否报错 然后重新登录测试</span></span><br><span class="line">[root@centos ~]# mysql -uroot -p123456 </span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 17</span><br><span class="line">Server version: 8.0.19 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> version();</span></span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 8.0.19    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ol><li>修改环境变量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">因basedir由/usr/local/mysql变成了/usr/local/mysql8，故相关环境变量推荐修改下。可按照以下步骤来操作验证：</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改mysql服务启动项配置</span></span><br><span class="line">vi /etc/init.d/mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改basedir目录</span></span><br><span class="line">basedir=/usr/local/mysql8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改PATH变量</span></span><br><span class="line">vi /etc/profile </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将PATH中的/usr/local/mysql/bin改为/usr/local/mysql8/bin</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生效验证</span></span><br><span class="line">[root@centos ~]# source /etc/profile</span><br><span class="line">[root@centos ~]# which mysql</span><br><span class="line">/usr/local/mysql8/bin/mysql</span><br><span class="line">[root@centos ~]# mysql -V</span><br><span class="line">mysql  Ver 8.0.19 for linux-glibc2.12 on x86_64 (MySQL Community Server - GPL)</span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><h4 id="如果没法用systemctl来控制mysql怎么办"><a href="#如果没法用systemctl来控制mysql怎么办" class="headerlink" title="如果没法用systemctl来控制mysql怎么办"></a>如果没法用systemctl来控制mysql怎么办</h4><p>操作流程：</p><p>1.进入/etc/systemd/system</p><p>cd /etc/systemd/system</p><p>2.创建mysql.service</p><p>vi mysql.service</p><p>3.mysql.service中添加配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/mysql8/bin/mysqld_safe --defaults-file=/etc/my.cnf --datadir=/usr/local/mysql/data</span><br><span class="line">ExecStop=/usr/local/mysql8/bin/mysqladmin --defaults-file=/etc/my.cnf shutdown</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>注意，这里的路径要改成你自己的实际路径</p><h2 id="设置主从备份"><a href="#设置主从备份" class="headerlink" title="设置主从备份"></a>设置主从备份</h2><h3 id="分别在两个数据库上创建一个可以远程访问的账号"><a href="#分别在两个数据库上创建一个可以远程访问的账号" class="headerlink" title="分别在两个数据库上创建一个可以远程访问的账号"></a>分别在两个数据库上创建一个可以远程访问的账号</h3><h3 id="认主流程"><a href="#认主流程" class="headerlink" title="认主流程"></a>认主流程</h3><h4 id="主服务数据库"><a href="#主服务数据库" class="headerlink" title="主服务数据库"></a>主服务数据库</h4><ol><li>登陆到主服务器的mysql，并执行如下语句创建用户，授予权限：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql复制代码CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO slave@&quot;%&quot; IDENTIFIED BY &quot;123456&quot;;</span><br></pre></td></tr></table></figure>修改my.cnf配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure>说明：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">log-bin:开启二进制日志，该日志是在事务提交时写日志文件的。默认大小是1G，后面加001,002这样的后缀顺加。</span><br><span class="line"></span><br><span class="line">server-id，唯一标识主机，mysql主从每个mysql实例配置都不一样就行。这个值默认是0，如果是0，主服务器拒绝任何从服务器的连接。</span><br><span class="line"></span><br><span class="line">其他配置（不是必须配置的）：</span><br><span class="line"></span><br><span class="line">1、binlog-do-db=db_001（主数据库配置）       #指定mysql的binlog日志记录哪个db，配置需要同步的数据库，可以配置多个，如果没有此配置项则同步全部。</span><br><span class="line"></span><br><span class="line">2、binlog-ignore-db=mysql（主数据库配置）    #配置不同步的数据库，可以配置多个。</span><br><span class="line"></span><br><span class="line">3、binlog_format = mixed     #配置binlog的格式</span><br><span class="line"></span><br><span class="line">4、read-only = 0                   #配置是否只读  0代表不只读，1代表只读</span><br><span class="line"></span><br><span class="line">5、auto-increament-increment = 10    #用于设定双主情况下自增列的ID冲突使用的，主要用来设置自增步长</span><br><span class="line"></span><br><span class="line">6、auto-increment-offset = 1               #表示这台服务器的序号，从1开始，不超过auto-increament-increment</span><br></pre></td></tr></table></figure><p>重启数据库</p><h4 id="从服务器设置："><a href="#从服务器设置：" class="headerlink" title="从服务器设置："></a>从服务器设置：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id=2</span><br><span class="line">replicate-do-db=test</span><br><span class="line">skip-slave-start=true</span><br></pre></td></tr></table></figure><p>重启数据库</p><h4 id="配置从服务器认主"><a href="#配置从服务器认主" class="headerlink" title="配置从服务器认主"></a>配置从服务器认主</h4><p>获取binlog的信息<br>我们先到主（master）服务器上获取binlog的信息，在mysql的命令界面输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>这里展示的就是我们当前主服务器使用的binlog的文件名，其中position是文件中偏移量，我们之后配置slave需要用到这些信息，这个文件在每次服务器状态变化后都不同<br>进入最关键的一步了，在进入从服务器mysql操作界面后，输入如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stop slave;          //先停步slave服务线程，这个是很重要的，如果不这样做会造成以下操作不成功，第一次设计主从的话忽略。</span><br><span class="line"></span><br><span class="line">change master to </span><br><span class="line">master_host=&#x27;192.0.0.131&#x27;,</span><br><span class="line">master_user=&#x27;slave&#x27;,</span><br><span class="line">master_password=&#x27;123456&#x27;,</span><br><span class="line">master_log_file=&#x27;mysql-bin.000002&#x27;, </span><br><span class="line">master_log_pos=1472;</span><br></pre></td></tr></table></figure><p>这里user和password就是我们第一步在主服务器上创建的用户名和密码，然后MASTER_LOG_FILE 就是我们上一步查看到的master在使用的binlog文件（这个文件在每次主服务器状态变化后都不同），MASTER_LOG_POS   就是binlog的偏移量，用于同步扫描使用。master_log_file对应File, master_log_pos对应Position。Mysql 5.x以上版本已经不支持在配置文件中指定主服务器相关选项。<br>执行完抛警告的话没关系，没有异常就可以。<br>开启从服务器slave线程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看（Slave）状态</span></span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了保证数据的可靠，我们一般会对数据醉一次主从复制，最近我也进行了一点实践，踩了几个坑，在这里总结下。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>用JS实现一个3D模型渲染器</title>
    <link href="https://sunra.top/posts/ad8a980c/"/>
    <id>https://sunra.top/posts/ad8a980c/</id>
    <published>2023-07-16T07:28:16.000Z</published>
    <updated>2023-08-12T14:20:13.202Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们讲了一系列的关于Unity渲染原理的博客，这次我们就开始实战一下，首先是用js实现一下矩阵和向量的计算，这个是基础们也是我们系里博客的第一篇：<a href="https://sunra.top/posts/12801/">线性代数与模型变换</a></p><span id="more"></span><h2 id="向量计算"><a href="#向量计算" class="headerlink" title="向量计算"></a>向量计算</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> <span class="keyword">extends</span> <span class="title class_ inherited__">GObject</span> &#123;</span><br><span class="line">  <span class="comment">// 表示二维点的类，二维点需要三个坐标表示，是因为齐次坐标的表示下，可以将平移旋转和缩放统一到一个表达式中，具体可以参考开头的博客</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">z</span> = z</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 两个向量之间做插值</span></span><br><span class="line">  <span class="title function_">interpolate</span>(<span class="params">other, factor</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> p2 = other</span><br><span class="line">    <span class="keyword">let</span> x = p1.<span class="property">x</span> + (p2.<span class="property">x</span> - p1.<span class="property">x</span>) * factor</span><br><span class="line">    <span class="keyword">let</span> y = p1.<span class="property">y</span> + (p2.<span class="property">y</span> - p1.<span class="property">y</span>) * factor</span><br><span class="line">    <span class="keyword">let</span> z = p1.<span class="property">z</span> + (p2.<span class="property">z</span> - p1.<span class="property">z</span>) * factor</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(x, y, z)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s += <span class="variable language_">this</span>.<span class="property">x</span>.<span class="title function_">toFixed</span>(<span class="number">3</span>)</span><br><span class="line">    s += <span class="variable language_">this</span>.<span class="property">y</span>.<span class="title function_">toFixed</span>(<span class="number">3</span>)</span><br><span class="line">    s += <span class="variable language_">this</span>.<span class="property">z</span>.<span class="title function_">toFixed</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">multi_num</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(<span class="variable language_">this</span>.<span class="property">x</span> * n, <span class="variable language_">this</span>.<span class="property">y</span> * n, <span class="variable language_">this</span>.<span class="property">z</span> * n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sub</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="property">x</span> - v.<span class="property">x</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="variable language_">this</span>.<span class="property">y</span> - v.<span class="property">y</span></span><br><span class="line">    <span class="keyword">let</span> z = <span class="variable language_">this</span>.<span class="property">z</span> - v.<span class="property">z</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(x, y, z)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">length</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable language_">this</span>.<span class="property">x</span> * <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span> * <span class="variable language_">this</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">z</span> * <span class="variable language_">this</span>.<span class="property">z</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将向量变为单位向量</span></span><br><span class="line">  <span class="title function_">normalize</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> l = <span class="variable language_">this</span>.<span class="title function_">length</span>()</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> factor = <span class="number">1</span> / l</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">multi_num</span>(factor)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向量点乘</span></span><br><span class="line">  <span class="title function_">dot</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span> * v.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span> * v.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">z</span> * v.<span class="property">z</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向量叉乘</span></span><br><span class="line">  <span class="title function_">cross</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="property">y</span> * v.<span class="property">z</span> - <span class="variable language_">this</span>.<span class="property">z</span> * v.<span class="property">y</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="variable language_">this</span>.<span class="property">z</span> * v.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">x</span> * v.<span class="property">z</span></span><br><span class="line">    <span class="keyword">let</span> z = <span class="variable language_">this</span>.<span class="property">x</span> * v.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">y</span> * v.<span class="property">x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(x, y, z)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a>矩阵计算</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span> <span class="keyword">extends</span> <span class="title class_ inherited__">GObject</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">matrix_list</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="keyword">if</span> (matrix_list) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">m</span> = matrix_list</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">m</span> = [</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> m = <span class="variable language_">this</span>.<span class="property">m</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      s += m[i].<span class="title function_">toFixed</span>(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">multiply</span>(<span class="params">other</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> m1 = <span class="variable language_">this</span>.<span class="property">m</span></span><br><span class="line">    <span class="keyword">let</span> m2 = other.<span class="property">m</span></span><br><span class="line">    <span class="keyword">let</span> m = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">16</span>; index++) &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(index / <span class="number">4</span>)</span><br><span class="line">      <span class="keyword">let</span> j = index % <span class="number">4</span></span><br><span class="line">      m[i * <span class="number">4</span> + j] = m1[i * <span class="number">4</span>] * m2[j] + m1[i * <span class="number">4</span> + <span class="number">1</span>] * m2[<span class="number">4</span> + j] + m1[i * <span class="number">4</span> + <span class="number">2</span>] * m2[<span class="number">2</span> * <span class="number">4</span> + j] + m1[i * <span class="number">4</span> + <span class="number">3</span>] * m2[<span class="number">3</span> * <span class="number">4</span> + j]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">zero</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">new</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">identity</span>(<span class="params"></span>) &#123;</span><br><span class="line">    m = [</span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">lookAtLH</span>(<span class="params">eye, target, up</span>) &#123;</span><br><span class="line">    <span class="comment">// z轴方向为眼睛位置指向目标物体的方向</span></span><br><span class="line">    <span class="keyword">let</span> zaxis = target.<span class="title function_">sub</span>(eye).<span class="title function_">normalize</span>()</span><br><span class="line">    <span class="comment">// x方向为up和z方向的叉乘的结果，简单来说，就是右手定则，拇指从up方向，旋转到z方向，大拇指指向即位x方向</span></span><br><span class="line">    <span class="keyword">let</span> xaxis = up.<span class="title function_">cross</span>(zaxis).<span class="title function_">normalize</span>()</span><br><span class="line">    <span class="comment">// y方向为z方向与x方向的叉乘结果</span></span><br><span class="line">    <span class="keyword">let</span> yaxis = zaxis.<span class="title function_">cross</span>(xaxis).<span class="title function_">normalize</span>()</span><br><span class="line">    <span class="comment">// 最终x,y,z三个组成直角坐标轴</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ex = -xaxis.<span class="title function_">dot</span>(eye)</span><br><span class="line">    <span class="keyword">let</span> ey = -yaxis.<span class="title function_">dot</span>(eye)</span><br><span class="line">    <span class="keyword">let</span> ez = -zaxis.<span class="title function_">dot</span>(eye)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      xaxis.<span class="property">x</span>, yaxis.<span class="property">x</span>, zaxis.<span class="property">x</span>, <span class="number">0</span>,</span><br><span class="line">      xaxis.<span class="property">y</span>, yaxis.<span class="property">y</span>, zaxis.<span class="property">y</span>, <span class="number">0</span>,</span><br><span class="line">      xaxis.<span class="property">z</span>, yaxis.<span class="property">z</span>, zaxis.<span class="property">z</span>, <span class="number">0</span>,</span><br><span class="line">      ex, ey, ez, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">perspectiveFovLH</span>(<span class="params">field_of_view, aspect, znear, zfar</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> h = <span class="number">1</span> / <span class="title class_">Math</span>.<span class="title function_">tan</span>(field_of_view / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> w = h / aspect</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      w, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, h, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, zfar / (zfar - znear), <span class="number">1</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, (znear * zfar) / (znear - zfar), <span class="number">0</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rotationX</span>(<span class="params">angle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, c, s, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, -s, c, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rotationY</span>(<span class="params">angle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      c, <span class="number">0</span>, -s, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      s, <span class="number">0</span>, c, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rotationZ</span>(<span class="params">angle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      c, s, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      -s, c, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rotation</span>(<span class="params">angle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title class_">Matrix</span>.<span class="title function_">rotationZ</span>(angle.<span class="property">z</span>)</span><br><span class="line">    <span class="keyword">let</span> y = <span class="title class_">Matrix</span>.<span class="title function_">rotationX</span>(angle.<span class="property">x</span>)</span><br><span class="line">    <span class="keyword">let</span> z = <span class="title class_">Matrix</span>.<span class="title function_">rotationY</span>(angle.<span class="property">y</span>)</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">multiply</span>(y).<span class="title function_">multiply</span>(z)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">translation</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; x, y, z &#125; = v</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">      x, y, z, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="variable language_">this</span>.<span class="property">m</span></span><br><span class="line">    <span class="keyword">let</span> x = v.<span class="property">x</span> * m[<span class="number">0</span>] + v.<span class="property">y</span> * m[<span class="number">1</span> * <span class="number">4</span> + <span class="number">0</span>] + v.<span class="property">z</span> * m[<span class="number">2</span> * <span class="number">4</span> + <span class="number">0</span>] + m[<span class="number">3</span> * <span class="number">4</span> + <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> y = v.<span class="property">x</span> * m[<span class="number">1</span>] + v.<span class="property">y</span> * m[<span class="number">1</span> * <span class="number">4</span> + <span class="number">1</span>] + v.<span class="property">z</span> * m[<span class="number">2</span> * <span class="number">4</span> + <span class="number">1</span>] + m[<span class="number">3</span> * <span class="number">4</span> + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> z = v.<span class="property">x</span> * m[<span class="number">2</span>] + v.<span class="property">y</span> * m[<span class="number">1</span> * <span class="number">4</span> + <span class="number">2</span>] + v.<span class="property">z</span> * m[<span class="number">2</span> * <span class="number">4</span> + <span class="number">2</span>] + m[<span class="number">3</span> * <span class="number">4</span> + <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">let</span> w = v.<span class="property">x</span> * m[<span class="number">3</span>] + v.<span class="property">y</span> * m[<span class="number">1</span> * <span class="number">4</span> + <span class="number">3</span>] + v.<span class="property">z</span> * m[<span class="number">2</span> * <span class="number">4</span> + <span class="number">3</span>] + m[<span class="number">3</span> * <span class="number">4</span> + <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(x / w, y / w, z / w)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前我们讲了一系列的关于Unity渲染原理的博客，这次我们就开始实战一下，首先是用js实现一下矩阵和向量的计算，这个是基础们也是我们系里博客的第一篇：&lt;a href=&quot;https://sunra.top/posts/12801/&quot;&gt;线性代数与模型变换&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>使用指数回退算法重试请求</title>
    <link href="https://sunra.top/posts/d58e86d6/"/>
    <id>https://sunra.top/posts/d58e86d6/</id>
    <published>2023-07-08T07:10:35.000Z</published>
    <updated>2023-08-12T14:21:03.158Z</updated>
    
    <content type="html"><![CDATA[<p>我们在搭建自己的服务的时候，同时会用到一些第三方服务的api，这些api可能会有速率的限制，这个时候，我们就需要控制我们的发送请求的速率，有很多种方法，比如我们直接计算出来每秒最多请求几次，然后做一些精细化的控制，当然我们也有比较简单粗暴但是行之有效的方法，就是等一会儿再请求，这就是指数回退算法。</p><span id="more"></span><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>下面是使用 TypeScript 实现的函数，该函数可以使用指数回退算法重试抛出指定错误的请求：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> retryWithExponentialBackoff&lt;T&gt;(<span class="attr">request</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>&lt;T&gt;, <span class="attr">errorType</span>: <span class="built_in">any</span>, <span class="attr">maxRetries</span>: <span class="built_in">number</span>, <span class="attr">initialDelay</span>: <span class="built_in">number</span>, <span class="attr">maxDelay</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> retries = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> delay = initialDelay;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (retries &lt; maxRetries) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">request</span>();</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> errorType) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Retry attempt <span class="subst">$&#123;retries + <span class="number">1</span>&#125;</span> failed with error: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (retries === maxRetries - <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, delay));</span><br><span class="line">        delay = <span class="title class_">Math</span>.<span class="title function_">min</span>(delay * <span class="number">2</span>, maxDelay);</span><br><span class="line">        retries++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Max retries (<span class="subst">$&#123;maxRetries&#125;</span>) exceeded.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数接受以下参数：</p><ul><li><code>request</code>：一个返回 Promise 的函数，表示要重试的请求。</li><li><code>errorType</code>：要捕获并重试的错误类型。</li><li><code>maxRetries</code>：最大重试次数。</li><li><code>initialDelay</code>：初始延迟时间（毫秒）。</li><li><code>maxDelay</code>：最大延迟时间（毫秒）。</li></ul><p>函数会在每次请求失败时捕获指定的错误类型，并使用指数回退算法进行重试。重试的次数将根据 <code>maxRetries</code> 参数确定，初始延迟时间为 <code>initialDelay</code>，每次重试后的延迟时间将加倍，但不会超过 <code>maxDelay</code>。</p><p>如果达到最大重试次数仍然失败，函数将抛出一个错误。</p><p>以下是一个示例用法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一个可能会失败的请求</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">makeRequest</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">  <span class="keyword">if</span> (random &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Request failed&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指数回退算法重试请求</span></span><br><span class="line"><span class="title function_">retryWithExponentialBackoff</span>(makeRequest, <span class="title class_">Error</span>, <span class="number">3</span>, <span class="number">1000</span>, <span class="number">5000</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Request succeeded with result: <span class="subst">$&#123;result&#125;</span>`</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Request failed after retries: <span class="subst">$&#123;error.message&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>makeRequest</code> 函数模拟了一个可能会失败的请求。我们使用 <code>retryWithExponentialBackoff</code> 函数对该请求进行重试，最大重试次数为 3，初始延迟时间为 1000 毫秒，最大延迟时间为 5000 毫秒。</p><p>如果请求成功，将输出 <code>Request succeeded with result: 42</code>；如果重试次数达到上限仍然失败，将输出类似于 <code>Request failed after retries: Max retries (3) exceeded.</code> 的错误信息。</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p>优点比较明显，就是简单，重试就完事了，不过每次重试失败都会让下一次的重试来得更晚，就导致了没有可能会有“饿死”的现象，也没有办法通过优先级去控制</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在搭建自己的服务的时候，同时会用到一些第三方服务的api，这些api可能会有速率的限制，这个时候，我们就需要控制我们的发送请求的速率，有很多种方法，比如我们直接计算出来每秒最多请求几次，然后做一些精细化的控制，当然我们也有比较简单粗暴但是行之有效的方法，就是等一会儿再请求，这就是指数回退算法。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>基于可扩展策略的房贷计算器</title>
    <link href="https://sunra.top/posts/43e8c1fa/"/>
    <id>https://sunra.top/posts/43e8c1fa/</id>
    <published>2023-07-02T00:13:40.000Z</published>
    <updated>2023-08-12T14:20:13.202Z</updated>
    
    <content type="html"><![CDATA[<p>最近重新看《程序员的个人财富课》，其中讲到了程序员的能力可以用在很多方面，比如可以算一下如何买房最划算，并给了一个简单的房贷计算器的算法，我对这个算法进行了一定的扩展，直接上源码。</p><p>如果感兴趣想要体验，可以关注公众号后台回复房贷计算器，又一个将数据可视化后的demo。</p><span id="more"></span><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等额本息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateRepaymentBX</span>(<span class="params">totalLoan, year, interestRate</span>) &#123;</span><br><span class="line">  <span class="comment">// 将利率转换为月利率</span></span><br><span class="line">  <span class="keyword">const</span> monthlyInterestRate = <span class="built_in">parseFloat</span>(interestRate) / <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">const</span> loanTerm = year * <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">const</span> totalLoanByMillion = <span class="built_in">parseFloat</span>(totalLoan);</span><br><span class="line">  <span class="comment">// 计算每个月的还款额</span></span><br><span class="line">  <span class="keyword">const</span> monthlyPayment = (totalLoanByMillion * monthlyInterestRate * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">1</span> + monthlyInterestRate, loanTerm)) / (<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">1</span> + monthlyInterestRate, loanTerm) - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 计算总共的还款额</span></span><br><span class="line">  <span class="keyword">const</span> totalRepayment = monthlyPayment * loanTerm;</span><br><span class="line">  <span class="comment">// 初始化结果数组</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> balance = totalLoanByMillion;</span><br><span class="line">  <span class="comment">// 计算每个月的本金和利息</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= loanTerm; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> monthlyInterest = balance * monthlyInterestRate;</span><br><span class="line">    <span class="keyword">const</span> monthlyPrincipal = monthlyPayment - monthlyInterest;</span><br><span class="line">    balance -= monthlyPrincipal;</span><br><span class="line">    result.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">month</span>: i,</span><br><span class="line">      <span class="attr">monthlyPayment</span>: monthlyPayment,</span><br><span class="line">      <span class="attr">monthlyPrincipal</span>: monthlyPrincipal,</span><br><span class="line">      <span class="attr">monthlyInterest</span>: monthlyInterest,</span><br><span class="line">      <span class="attr">balance</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, balance)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">totalRepayment</span>: totalRepayment,</span><br><span class="line">    <span class="attr">result</span>: result</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等额本金</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateRepaymentBJ</span>(<span class="params">totalLoan, year, interestRate</span>) &#123;</span><br><span class="line">  <span class="comment">// 将利率转换为月利率</span></span><br><span class="line">  <span class="keyword">const</span> monthlyInterestRate = <span class="built_in">parseFloat</span>(interestRate) / <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">const</span> loanTerm = year * <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">const</span> totalLoanByMillion = <span class="built_in">parseFloat</span>(totalLoan);</span><br><span class="line">  <span class="comment">// 计算每个月的本金</span></span><br><span class="line">  <span class="keyword">const</span> monthlyPrincipal = <span class="built_in">parseFloat</span>(totalLoanByMillion) / loanTerm;</span><br><span class="line">  <span class="comment">// 初始化结果数组</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="comment">// 计算每个月的还款额和利息</span></span><br><span class="line">  <span class="keyword">let</span> balance = totalLoanByMillion;</span><br><span class="line">  <span class="keyword">let</span> monthlyPayment;</span><br><span class="line">  <span class="keyword">let</span> monthlyInterest;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= loanTerm; i++) &#123;</span><br><span class="line">    monthlyInterest = balance * monthlyInterestRate;</span><br><span class="line">    monthlyPayment = monthlyPrincipal + monthlyInterest;</span><br><span class="line">    balance -= monthlyPrincipal;</span><br><span class="line">    result.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">month</span>: i,</span><br><span class="line">      <span class="attr">monthlyPayment</span>: monthlyPayment,</span><br><span class="line">      <span class="attr">monthlyPrincipal</span>: monthlyPrincipal,</span><br><span class="line">      <span class="attr">monthlyInterest</span>: monthlyInterest,</span><br><span class="line">      <span class="attr">balance</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, balance)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计算总共的还款额</span></span><br><span class="line">  <span class="keyword">const</span> totalRepayment = totalLoanByMillion + result.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, current</span>) =&gt;</span> total + current.<span class="property">monthlyInterest</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">totalRepayment</span>: totalRepayment,</span><br><span class="line">    <span class="attr">result</span>: result,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LoanType</span> = &#123;</span><br><span class="line">  <span class="attr">BJ</span>: <span class="string">&#x27;BJ&#x27;</span>,</span><br><span class="line">  <span class="attr">BX</span>: <span class="string">&#x27;BX&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculateRepayment = &#123;</span><br><span class="line">  [<span class="title class_">LoanType</span>.<span class="property">BJ</span>]: calculateRepaymentBJ,</span><br><span class="line">  [<span class="title class_">LoanType</span>.<span class="property">BX</span>]: calculateRepaymentBX,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculate</span>(<span class="params">loadType, syLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> syRepayment = calculateRepayment[loadType](syLoan, syYear, syInterestRate)</span><br><span class="line">  <span class="keyword">const</span> gjjRepayment = calculateRepayment[loadType](gjjLoan, gjjYear, gjjInterestRate);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [shortRepayment, longRepayment] = [syRepayment.<span class="property">result</span>, gjjRepayment.<span class="property">result</span>].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">length</span> - b.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mergedRepayment = longRepayment.<span class="title function_">map</span>(<span class="function">(<span class="params">longItem, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; longRepayment.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> shortItem = shortRepayment[i];</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">month</span>: longItem.<span class="property">month</span>,</span><br><span class="line">        <span class="attr">monthlyPayment</span>: longItem.<span class="property">monthlyPayment</span> + shortItem.<span class="property">monthlyPayment</span>,</span><br><span class="line">        <span class="attr">monthlyPrincipal</span>: longItem.<span class="property">monthlyPrincipal</span> + shortItem.<span class="property">monthlyPrincipal</span>,</span><br><span class="line">        <span class="attr">monthlyInterest</span>: longItem.<span class="property">monthlyInterest</span> + shortItem.<span class="property">monthlyInterest</span>,</span><br><span class="line">        <span class="attr">balance</span>: longItem.<span class="property">balance</span> + shortItem.<span class="property">balance</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">month</span>: longItem.<span class="property">month</span>,</span><br><span class="line">        <span class="attr">monthlyPayment</span>: longItem.<span class="property">monthlyPayment</span>,</span><br><span class="line">        <span class="attr">monthlyPrincipal</span>: longItem.<span class="property">monthlyPrincipal</span>,</span><br><span class="line">        <span class="attr">monthlyInterest</span>: longItem.<span class="property">monthlyInterest</span>,</span><br><span class="line">        <span class="attr">balance</span>: longItem.<span class="property">balance</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">totalRepayment</span>: syRepayment.<span class="property">totalRepayment</span> + gjjRepayment.<span class="property">totalRepayment</span>,</span><br><span class="line">    <span class="attr">result</span>: mergedRepayment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strategies = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;先租后买，全款买（排除理财与房价变动因素）&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> need = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="built_in">parseFloat</span>(totalPrice - currentPrincipal) / (income - outcome - rent));</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: need,</span><br><span class="line">        <span class="attr">firstPayNeed</span>: need,</span><br><span class="line">        <span class="attr">totalPayment</span>: totalPrice + need * rent,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(need).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>([&#123; <span class="attr">month</span>: need + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: totalPrice, <span class="attr">monthlyPrincipal</span>: totalPrice, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: <span class="number">0</span> &#125;])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;等额本金贷款买&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> repayment = <span class="title function_">calculate</span>(<span class="string">&#x27;BJ&#x27;</span>, totalPrice - firstPay - gjjLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate);</span><br><span class="line">      <span class="keyword">const</span> &#123; result, totalRepayment &#125; = repayment;</span><br><span class="line">      <span class="keyword">const</span> firstPayNeed = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, firstPay - currentPrincipal) / (income - outcome - rent);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: firstPayNeed + <span class="title class_">Math</span>.<span class="title function_">max</span>(syYear, gjjYear) * <span class="number">12</span>,</span><br><span class="line">        firstPayNeed,</span><br><span class="line">        <span class="attr">totalPayment</span>: totalRepayment+ firstPayNeed * rent + firstPay,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(firstPayNeed).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;等额本息贷款买&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> repayment = <span class="title function_">calculate</span>(<span class="string">&#x27;BX&#x27;</span>, totalPrice - firstPay - gjjLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate);</span><br><span class="line">      <span class="keyword">const</span> &#123; result, totalRepayment &#125; = repayment;</span><br><span class="line">      <span class="keyword">const</span> firstPayNeed = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, firstPay - currentPrincipal) / (income - outcome - rent);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: firstPayNeed + <span class="title class_">Math</span>.<span class="title function_">max</span>(syYear, gjjYear) * <span class="number">12</span>,</span><br><span class="line">        firstPayNeed,</span><br><span class="line">        <span class="attr">totalPayment</span>: totalRepayment+ firstPayNeed * rent + firstPay,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(firstPayNeed).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;等额本金贷款买，能提前还款则提前还款（不考虑提前还款的影响）&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> repayment = <span class="title function_">calculate</span>(<span class="string">&#x27;BJ&#x27;</span>, totalPrice - firstPay - gjjLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate);</span><br><span class="line">      <span class="keyword">const</span> &#123; result &#125; = repayment;</span><br><span class="line">      <span class="keyword">let</span> total = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, currentPrincipal - firstPay);</span><br><span class="line">      <span class="keyword">let</span> loanNeed = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(loanNeed = <span class="number">0</span>; loanNeed &lt; result.<span class="property">length</span>; loanNeed++) &#123;</span><br><span class="line">        total += income - outcome - result[loanNeed].<span class="property">monthlyPayment</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt;= result[loanNeed].<span class="property">balance</span>) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> firstPayNeed = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, firstPay - currentPrincipal) / (income - outcome - rent);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: loanNeed + firstPayNeed,</span><br><span class="line">        firstPayNeed,</span><br><span class="line">        <span class="attr">totalPayment</span>: result.<span class="title function_">slice</span>(<span class="number">0</span>, loanNeed).<span class="title function_">map</span>(<span class="function"><span class="params">_</span> =&gt;</span> _.<span class="property">monthlyPayment</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> total + cur, <span class="number">0</span>) + result[loanNeed].<span class="property">balance</span> + firstPay,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(firstPayNeed).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>(result.<span class="title function_">slice</span>(<span class="number">0</span>, loanNeed).<span class="title function_">map</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> (&#123; ..._, <span class="attr">month</span>: firstPayNeed + _.<span class="property">month</span> &#125;)))</span><br><span class="line">          .<span class="title function_">concat</span>([&#123; <span class="attr">month</span>: firstPayNeed + loanNeed + <span class="number">1</span>, <span class="attr">monthlyPrincipal</span>: result[loanNeed].<span class="property">balance</span>, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">monthlyPayment</span>: result[loanNeed].<span class="property">balance</span>, <span class="attr">balance</span>: <span class="number">0</span> &#125;])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;等额本息贷款买，能提前还款则提前还款（不考虑提前还款的影响）&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> repayment = <span class="title function_">calculate</span>(<span class="string">&#x27;BX&#x27;</span>, totalPrice - firstPay - gjjLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate);</span><br><span class="line">      <span class="keyword">const</span> &#123; result &#125; = repayment;</span><br><span class="line">      <span class="keyword">let</span> total = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, currentPrincipal - firstPay);</span><br><span class="line">      <span class="keyword">let</span> loanNeed = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(loanNeed = <span class="number">0</span>; loanNeed &lt; result.<span class="property">length</span>; loanNeed++) &#123;</span><br><span class="line">        total += income - outcome - result[loanNeed].<span class="property">monthlyPayment</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt;= result[loanNeed].<span class="property">balance</span>) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> firstPayNeed = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, firstPay - currentPrincipal) / (income - outcome - rent);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: loanNeed + firstPayNeed,</span><br><span class="line">        firstPayNeed,</span><br><span class="line">        <span class="attr">totalPayment</span>: result.<span class="title function_">slice</span>(<span class="number">0</span>, loanNeed).<span class="title function_">map</span>(<span class="function"><span class="params">_</span> =&gt;</span> _.<span class="property">monthlyPayment</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> total + cur, <span class="number">0</span>) + result[loanNeed].<span class="property">balance</span> + firstPay,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(firstPayNeed).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>(result.<span class="title function_">slice</span>(<span class="number">0</span>, loanNeed).<span class="title function_">map</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> (&#123; ..._, <span class="attr">month</span>: firstPayNeed + _.<span class="property">month</span> &#125;)))</span><br><span class="line">          .<span class="title function_">concat</span>([&#123; <span class="attr">month</span>: firstPayNeed + loanNeed + <span class="number">1</span>, <span class="attr">monthlyPrincipal</span>: result[loanNeed].<span class="property">balance</span>, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">monthlyPayment</span>: result[loanNeed].<span class="property">balance</span>, <span class="attr">balance</span>: <span class="number">0</span> &#125;])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">executeStrategies</span> (&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`房屋总价为<span class="subst">$&#123;totalPrice&#125;</span>元，首付为：<span class="subst">$&#123;firstPay&#125;</span>元，现有：<span class="subst">$&#123;currentPrincipal&#125;</span>元，月收入为：<span class="subst">$&#123;income&#125;</span>元，每个月租房支出为：<span class="subst">$&#123;rent&#125;</span>元，其他消费为：<span class="subst">$&#123;outcome&#125;</span>元`</span>)</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  strategies.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123;name, execute&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> repayment = <span class="title function_">execute</span>(&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`策略：<span class="subst">$&#123;name&#125;</span>, 需要时间为<span class="subst">$&#123;repayment.totalNeed&#125;</span>个月, 住房总花费为<span class="subst">$&#123;repayment.totalPayment&#125;</span>元`</span>)</span><br><span class="line">    result.<span class="title function_">push</span>(&#123;...repayment, <span class="attr">strategyName</span>: name&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">executeStrategies</span>(&#123;</span><br><span class="line">  <span class="attr">totalPrice</span>: <span class="number">5000000</span>,</span><br><span class="line">  <span class="attr">firstPay</span>: <span class="number">1500000</span>,</span><br><span class="line">  <span class="attr">currentPrincipal</span>: <span class="number">1500000</span>,</span><br><span class="line">  <span class="attr">gjjLoan</span>: <span class="number">1000000</span>,</span><br><span class="line">  <span class="attr">income</span>: <span class="number">50000</span>,</span><br><span class="line">  <span class="attr">outcome</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">rent</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">syYear</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">gjjYear</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">syInterestRate</span>: <span class="number">0.043</span>,</span><br><span class="line">  <span class="attr">gjjInterestRate</span>: <span class="number">0.031</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  executeStrategies</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近重新看《程序员的个人财富课》，其中讲到了程序员的能力可以用在很多方面，比如可以算一下如何买房最划算，并给了一个简单的房贷计算器的算法，我对这个算法进行了一定的扩展，直接上源码。&lt;/p&gt;
&lt;p&gt;如果感兴趣想要体验，可以关注公众号后台回复房贷计算器，又一个将数据可视化后的demo。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>React如何在不打断英文单词情况下截断长文本</title>
    <link href="https://sunra.top/posts/b5b58dee/"/>
    <id>https://sunra.top/posts/b5b58dee/</id>
    <published>2023-06-24T02:33:32.000Z</published>
    <updated>2023-08-12T14:21:03.158Z</updated>
    
    <content type="html"><![CDATA[<p>文本过长用省略号来进行截断css就可以实现，不过默认的效果无法实现单词不被截断，所以就用js实现了一版, 这样不仅可以做到单词不被截断，也可以做到在css不能使用的时候进行截断，比如在canvas中需要截断文字的情况</p><span id="more"></span><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chineseCharacterPattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;[\u4E00-\u9FA5]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getStringWidth = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> contextMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="title class_">CanvasRenderingContext2D</span>&gt;();</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">str: <span class="built_in">string</span>, fontSize: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> context = contextMap.<span class="title function_">get</span>(fontSize) ?? <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">      <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (span) &#123;</span><br><span class="line">        <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">        context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (context &amp;&amp; span) &#123;</span><br><span class="line">          <span class="keyword">const</span> fontFamily = <span class="variable language_">window</span></span><br><span class="line">            .<span class="title function_">getComputedStyle</span>(span, <span class="literal">null</span>)</span><br><span class="line">            .<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;font-family&#x27;</span>);</span><br><span class="line">          context.<span class="property">font</span> = <span class="string">`<span class="subst">$&#123;fontSize&#125;</span>px <span class="subst">$&#123;fontFamily&#125;</span>`</span>;</span><br><span class="line">          contextMap.<span class="title function_">set</span>(fontSize, context);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (context) &#123;</span><br><span class="line">      <span class="keyword">const</span> metrics = context.<span class="title function_">measureText</span>(str);</span><br><span class="line">      <span class="keyword">return</span> metrics.<span class="property">width</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="property">length</span> * fontSize;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">splitStr</span>(<span class="params">str: <span class="built_in">string</span>, separator: <span class="built_in">RegExp</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> startIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = str[i];</span><br><span class="line">    <span class="keyword">if</span> (chineseCharacterPattern.<span class="title function_">test</span>(current) || separator.<span class="title function_">test</span>(current)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (startIndex &lt; i) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(str.<span class="title function_">slice</span>(startIndex, i));</span><br><span class="line">      &#125;</span><br><span class="line">      result.<span class="title function_">push</span>(current);</span><br><span class="line">      startIndex = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (startIndex &lt; str.<span class="property">length</span>) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(str.<span class="title function_">slice</span>(startIndex));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useTruncateLongString</span>(<span class="params"></span></span><br><span class="line"><span class="params">  maxPixelLength: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  fontSize: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  omission = <span class="string">&#x27;...&#x27;</span>,</span></span><br><span class="line"><span class="params">  separator = /,? +/,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> truncateLongString = <span class="title function_">useCallback</span>(</span><br><span class="line">    (<span class="attr">str</span>: <span class="built_in">string</span>): [<span class="built_in">string</span>, <span class="built_in">boolean</span>] =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">getStringWidth</span>(str, fontSize) &lt;= maxPixelLength) &#123;</span><br><span class="line">        <span class="keyword">return</span> [str, <span class="literal">false</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> strSplitBySeparator = <span class="title function_">splitStr</span>(str, separator);</span><br><span class="line">      <span class="keyword">const</span> firstWord = strSplitBySeparator[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">getStringWidth</span>(firstWord, fontSize) &gt; maxPixelLength) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">`<span class="subst">$&#123;firstWord&#125;</span><span class="subst">$&#123;omission&#125;</span>`</span>, <span class="literal">true</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> currentWidth = <span class="title function_">getStringWidth</span>(omission, fontSize);</span><br><span class="line">      <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> word <span class="keyword">of</span> strSplitBySeparator) &#123;</span><br><span class="line">        <span class="keyword">const</span> wordWidth = <span class="title function_">getStringWidth</span>(word, fontSize);</span><br><span class="line">        currentWidth += wordWidth;</span><br><span class="line">        <span class="keyword">if</span> (currentWidth &lt; maxPixelLength) &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(word);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> [<span class="string">`<span class="subst">$&#123;result.join(<span class="string">&#x27;&#x27;</span>)&#125;</span><span class="subst">$&#123;omission&#125;</span>`</span>, <span class="literal">true</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> [result.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>), <span class="literal">false</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    [maxPixelLength, fontSize, omission, separator],</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> truncateLongString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;文本过长用省略号来进行截断css就可以实现，不过默认的效果无法实现单词不被截断，所以就用js实现了一版, 这样不仅可以做到单词不被截断，也可以做到在css不能使用的时候进行截断，比如在canvas中需要截断文字的情况&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://sunra.top/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>状态压缩在算法中的应用</title>
    <link href="https://sunra.top/posts/338aebbd/"/>
    <id>https://sunra.top/posts/338aebbd/</id>
    <published>2023-06-21T00:47:43.000Z</published>
    <updated>2023-08-12T14:20:13.210Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机算法中，状态压缩是一种优化技术，它通过将一些状态信息压缩成更小的数据结构来减少内存使用和提高程序效率。通常情况下，状态压缩适用于需要处理大量状态的算法，例如搜索、动态规划等。状态压缩的常见方法包括使用位运算、哈希表、数组等数据结构来存储状态信息。这些方法可以显著减少算法的时间和空间复杂度，提高算法的执行效率。</p><span id="more"></span><p>简单来说，状态压缩就是在一个用一种更加巧妙地方式去减少算法运行过程中各种状态的CURD，从而减少时间复杂度和空间复杂度。</p><p>我们就以leetcode上的一道题来实战下状态压缩在动态规划中的应用：</p><p>这是题干：</p><p>给你两组点，其中第一组中有 size1 个点，第二组中有 size2 个点，且 size1 &gt;= size2 。</p><p>任意两点间的连接成本 cost 由大小为 size1 x size2 矩阵给出，其中 cost[i][j] 是第一组中的点 i 和第二组中的点 j 的连接成本。如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。</p><p>返回连通两组点所需的最小成本。</p><p>这个题目也是个二分图的问题，不过和<a href="https://sunra.top/posts/5352/">匈牙利算法</a>所解决的问题不同，这里的配对不是只能一对一，而是可以多对多，只要每个点都和另一个图中的某个点相连就好</p><p>我们来看一下这道题的解题思路</p><p>记第一组点数为 $size_1$，第二组点数为 $size_2$。根据数据范围，我们可以使用二进制数 s 来表示一个点集，s 的第 k 位为 1 表示第 k 个点在点集 s 中，s 的第 k 位为 0 表示第 k 个点不在点集 s 中。使用 dp[i][s] 表示第一组的前 iii 个点（前 i 个点指第 0,1,2,…,i−1 个点）与第二组的点集 s 的最小连通成本（因为 size1≥size2，所以将第二组作为点集），有四种情况：</p><ul><li><p>i=0 且 s=0：<br>两组点都为空，因此最小连通成本为 dp[0][0]=0。</p></li><li><p>i=0 且 s≠0<br>第一组的点为空，第二组的点不为空，因此无法连通，令 dp[0][s]=∞。</p></li><li><p>i≠0 且 s=0：<br>第一组的点不为空，第二组的点为空，因此无法连通，令 dp[i][0]=∞。</p></li><li><p>i≠0 且 s≠0<br>考虑第一组第 i−1 个点与第二组点集 s 的第 k 个点连接，使用 $s_{-k}$表示点集 s 去除第 k 个点后的剩余点集，那么连通成本 c 有三种情况：</p><ul><li><p>第二组点集 s 的第 k 个点不再与其他点连接，那么 c=dp[i][s−k]+cost[i−1][k]；</p></li><li><p>第一组第 i−1 个点不再与其他点连接，那么 c=dp[i−1][s]+cost[i−1][k]；</p></li><li><p>第一组第 i−1 个点和第二组点集 s 的第 k 个点都不再与其他点连接，那么 c=dp[i−1][s−k]+cost[i−1][k]。</p></li></ul></li></ul><p>枚举第一组第 i−1 个点与第二组点集 s 中任一 k∈s 的点连接，那么状态转移方程如下：</p><p>dp[i][s]=min⁡k∈s{min⁡{dp[i][s−k],dp[i−1][s],dp[i−1][s−k]}+cost[i−1][k]}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connectTwoGroups = <span class="keyword">function</span>(<span class="params">cost</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> size1 = cost.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> size2 = cost[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> m = <span class="number">1</span> &lt;&lt; size2;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(size1 + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> / <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= size1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> s = <span class="number">0</span>; s &lt; m; s++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; size2; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((s &amp; (<span class="number">1</span> &lt;&lt; k)) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i][s], dp[i][s ^ (<span class="number">1</span> &lt;&lt; k)] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">            dp[i][s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i][s], dp[i - <span class="number">1</span>][s] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">            dp[i][s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i][s], dp[i - <span class="number">1</span>][s ^ (<span class="number">1</span> &lt;&lt; k)] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[size1][m - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据结构上进行压缩"><a href="#数据结构上进行压缩" class="headerlink" title="数据结构上进行压缩"></a>数据结构上进行压缩</h2><p>这个算法中的动态规划不用多讲了，其实这里面也蕴含着状态压缩，比如将一个布尔数组压缩为一个二进制的数字就是一个常见的做法，可能从空间上讲看不出多大提升，但是在本题中，我们需要以布尔数组表示状态，并以这个状态为key时，那么我们只能用map来存储键值对，但是如果我们实用二进制数字作为key，我们就可以使用数组来存储键值对了。</p><h2 id="剔除无用的中间状态的存储"><a href="#剔除无用的中间状态的存储" class="headerlink" title="剔除无用的中间状态的存储"></a>剔除无用的中间状态的存储</h2><p>另一种状态压缩指的是识别出无用的状态并进行剔除</p><p>转移方程的 dp[i][∗] 计算只与 dp[i−1][∗] 和 dp[i][∗] 相关，因此我们可以只使用一维数组来保存，从而节省空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connectTwoGroups = <span class="keyword">function</span>(<span class="params">cost</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> size1 = cost.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> size2 = cost[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> m = <span class="number">1</span> &lt;&lt; size2;</span><br><span class="line">    <span class="keyword">const</span> dp1 = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> dp2 = <span class="keyword">new</span> <span class="title class_">Array</span>(m);</span><br><span class="line">    </span><br><span class="line">    dp1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= size1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> s = <span class="number">0</span>; s &lt; m; s++) &#123;</span><br><span class="line">        dp2[s] = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; size2; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((s &amp; (<span class="number">1</span> &lt;&lt; k)) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp2[s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp2[s], dp2[s ^ (<span class="number">1</span> &lt;&lt; k)] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">            dp2[s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp2[s], dp1[s] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">            dp2[s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp2[s], dp1[s ^ (<span class="number">1</span> &lt;&lt; k)] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp1.<span class="title function_">splice</span>(<span class="number">0</span>, m, ...dp2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp1[m - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在计算机算法中，状态压缩是一种优化技术，它通过将一些状态信息压缩成更小的数据结构来减少内存使用和提高程序效率。通常情况下，状态压缩适用于需要处理大量状态的算法，例如搜索、动态规划等。状态压缩的常见方法包括使用位运算、哈希表、数组等数据结构来存储状态信息。这些方法可以显著减少算法的时间和空间复杂度，提高算法的执行效率。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（六）—— 任务管理</title>
    <link href="https://sunra.top/posts/5d2fbe1a/"/>
    <id>https://sunra.top/posts/5d2fbe1a/</id>
    <published>2023-06-17T23:53:30.000Z</published>
    <updated>2023-08-12T14:20:13.202Z</updated>
    
    <content type="html"><![CDATA[<p>把事情做出来，得到结果，是管理工作的落脚点，同时也是验证管理规划是否合理，团队建设是否有效最重要的标准和依据</p><p>从工作中来，到工作中去。千万不要为了建立机制而建立机制，每一个机制都要有实用价值。</p><p>由于机制都是有场景化特性的，当场景发生变化，机制也要升级。对于机制的重新审视和学习都意味着额外的开销，因此，每个机制的维护都是有成本的，如果没有随着场景变化而升级更新，就会成为没有意义的机制，时间长了就会变成常见的：什么机制都有，但是执行效果都不好</p><span id="more"></span><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ul><li><p>事前</p><p>对于管理者最需要回答的问题就是需要做哪些事，先做哪件，后做哪件，也就是梳理任务的优先级，对应到管理中就是“排优先级”</p></li><li><p>事中</p><p>确保事情按照计划推进，对应到管理中就是“有效执行”或者狭义的“项目管理”</p></li><li><p>事后</p><p>要有意识地总结经验教训，并形成一些“规矩”和“做法”，让以后相似的工作可以做的更好，更顺畅，对应到管理中就是“流程机制”</p></li></ul><h3 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h3><ul><li><p>轻重缓急</p><p>对于每个具体的团队来说，当下能做的工作是有限的，一味增加并发并不会让团队的产出更高效</p></li></ul><ul><li><p>轻重缓急的决策步骤</p><ul><li><p>重要紧急四象限</p></li><li><p>如何判断一个工作是否重要，是否紧急</p><p>如果做，是否受益很大，受益越大越重要<br>如果不做，是否损失很大，损失越大，越紧急</p></li><li><p>常见的情形</p><p>把日常工作分为两种情况：一种是计划内的，一种是计划外的<br>对于计划内的工作，需要关注在一个规划周期内它的价值和收益有多大，要把价值足够大的任务安排进来，持续地推进<br>对于计划外的工作，由于是突发情况，首先要判断中断即有安排来立即跟进新情况。中断既有安排一定会影响手头的工作，也就是说，会影响本来的收益。</p></li><li><p>步骤</p><p>首先判断工作的轻重缓急来指定自己的计划。对于计划内的工作，看收益是否足够大，收益越大越重要，收益越大，就越需要给予相匹配的优先级，资源和关注度；收益相对较小的，就放入todo list，作为待办任务<br>对于计划外的工作，看损失是否足够大，损失越大越紧急。损失够大就按照紧急任务安排，以“止损”为核心目的。如果损失可控就放入计划内的工作列表，以收益为衡量指标。</p></li></ul></li><li><p>决策要点</p><ul><li><p>目标需要一以贯之</p><p>前面提到，通过看收益来判断一个任务是否重要，那么应该按照什么参照物来衡量收益呢？<br>答案是目标，规划的目标里蕴含着我们一段时间内最重要的诉求和期待，也是衡量影响工作收益大小的坐标轴。所以我们目标的设定和评估贯穿着整个管理工作的全过程，目标越明确，在关键时刻我们的方向感越强。</p></li><li><p>任务的评估纬度是有弹性的</p><p>对于一个任务来说，其进度，质量和效果这三个要素是可以此消彼长的所以在拆解任务的时候，对进度的预期不同，对质量的要求不同，对效果的期待不同，都会导致预计时间和优先级变化</p></li><li><p>沟通是不可或缺的</p><p>上级更倾向于告诉你他们要什么，而不会主动告诉你他们愿意用什么来交换，不完全是因为是他们“唯利是图”，而是因为，评估影响并给出相应的方案不是他们的工作，这是你清楚且拿手的。<br>上级判断不出对你即有安排的影响有多大，需要你来给出评估，如果你什么都不说，默认是没有影响的。</p></li></ul></li></ul><ul><li><p>过程管理</p><ul><li><p>如何确保项目的有效执行</p><ul><li><p>充分条件视角</p><p>列出有效执行的所有要点然后照着执行就好，不过不太现实</p></li></ul></li></ul></li></ul><pre><code>- 必要条件视角  列出一些要点，在项目执行过程中确保做到，虽然我们给不出项目有效执行的全部条件，但是我们肯定可以在长期的项目管理中提出一些要点，只要这些要点没有做到，项目就很难得到有效地实施</code></pre><ul><li><p>有效执行的四个障碍</p><ul><li><p>目标不清</p><ul><li>目标不明确，不可衡量</li><li>目标没有对齐，有偏差</li><li>目标发生变化了，没有同步相关的人</li></ul></li><li><p>总负责人缺失</p><ul><li><p>三个问题</p><ul><li>项目涉及的各个团队是否都有一个明确的负责人</li><li>负责人和所有项目组成员，是否都清楚个方面的负责人</li><li>项目是否有唯一的总负责人，总负责人是否有效</li></ul></li><li><p>两个容易模糊的地方</p><ul><li>各负责人对于“负责”的理解不一致</li><li>总负责人无效或缺失</li></ul></li></ul></li><li><p>缺乏有效运转的机制</p><ul><li><p>问题</p><ul><li>某些管理者见识过某些优秀人的优秀表现，就过于迷信人的主动性和职业水平，一旦出现问题，总是觉得人不行。事实上，团队成员的能力水平是正态分布的，，即便是真的人不行，从不行到行也是需要过程的，此时就是管理者应该做事的时候</li><li>人不行的时候，就喜欢用流程和机制。结果管理者就制定了全套的流程让团队遵循，由于学习和执行成本很高，，员工遵循起来很痛苦，因此导致流程机制睡大觉</li></ul></li><li><p>总结</p><ul><li>过于依赖人的主动性，缺乏流程和机制</li><li>虽然有机制，但是没有人监督执行</li><li>虽然有人监督执行，但是员工不愿意执行</li></ul></li></ul></li><li><p>沟通不到位</p><ul><li>主动意识不足，沟通不够主动</li><li>通报意识不足，没有通知所有相关人员</li><li>闭环意识不足，广播出去了，就默认对方收到了</li></ul></li></ul></li><li><p>有效执行的四个要素</p><ul><li>目标清晰</li><li>责任明确</li><li>机制健全</li><li>沟通到位</li></ul></li></ul><ul><li><p>流程机制</p><p>很多管理者一方面希望很多管理工作能够通过流程和机制来保障，从而提高自己的管理效率；另一方面，又为大量的流程机制趴在文档里睡大觉而一筹莫展</p></li></ul><ul><li><p>流程机制建立的步骤</p><p>作为管理者，想让员工分担我们手头上的工作，要么靠梯队，要么靠流程机制</p></li></ul><pre><code>- 所谓靠梯度，就是团队内部有胜任度非常高的人，可以帮我们搞定这件事- 所谓靠机制，就是设计一套方案，来专门应对某个场景出现的问题，用这套方案指导员工做好这类工作- 如果初衷是人才培养，那么去带着员工一起做，去培养梯队是合理的。但是如果初衷是减轻管理者的负担，那反而是应该靠机制。而且，培养梯队永远是远水，靠机制解决当下问题是近渴，多么良好的梯队都提到不了机制的作用</code></pre><ul><li><p>授权机制建立的过程</p><ul><li><p>明确目标</p><p>明确改机制是要解决什么场景下的什么问题。<br>机制的一大特点，就是场景化特性非常明显，因为他们都是为了应对特定场景下的特定问题产生的，例如服务报警机制</p></li><li><p>提炼应对该场景的关键点</p><p>从你和经验丰富的人身上提炼出应对该场景的关键环节，因此，如果有成功经验，这些关键点的提炼会容易很多。<br>这里并不推荐去整理一个详细的操作文档，和一个步骤完整的文档相比，关键点提炼更为重要，这会让执行成本变低，也更具操作性。</p></li><li><p>明确监督者</p><p>也就是，由谁来确保机制的执行，以及在什么时候检查关键点，每个流程和机制的执行情况如何，谁来检查和确认</p></li><li><p>评估操作成本</p><p>确认该机制对执行者来说是可操作的，建立机制的目的是为了简化工作，理想状态是实现管理事务的“自动驾驶”，如果建立机制会给执行者带来更高的操作成本，就需要反思这个机制的合理性</p></li><li><p>形成共识</p><p>和相关执行人沟通并取得共识</p></li></ul></li><li><p>流程机制建立的原则</p><ul><li><p>可操作性</p><p>即简单原则，也就是说，机制要以最低的学习成本和操作成本为原则，这是最重要的原则，如果建立的机制不具备可操作性，那么即使管理者自我感觉再完美，能应对和解决的问题越多，也要果断抛弃</p></li><li><p>只打关键点</p><p>建立流程机制，没必要对所有细节进行完整描述，没人喜欢长篇大论的文字，技术人尤其如此，你只需要告诉大家，在那几个关键的节点要做什么即可</p></li><li><p>明确到人</p><p>问责原则。各个关键点由谁来跟进，这个问题要有明确的约定，不能完全靠人的自觉性</p></li><li><p>实用原则，要随着场景变化升级</p><p>从工作中来，到工作中去。千万不要为了建立机制而建立机制，每一个机制都要有实用价值。<br>由于机制都是有场景化特性的，当场景发生变化，机制也要升级。对于机制的重新审视和学习都意味着额外的开销，因此，每个机制的维护都是有成本的，如果没有随着场景变化而升级更新，就会成为没有意义的机制，时间长了就会变成常见的：什么机制都有，但是执行效果都不好</p></li></ul></li><li><p>流程机制的常见问题</p><ul><li><p>机制是不是越多越好</p><p>机制不是越多越好，而是越少越好。这个和机制的简单原则，实用原则一脉相承。机制的建立并不会解决问题，对机制的执行才能解决问题，而机制的建立，执行和后期维护都是需要成本的，所以不要贪多</p></li><li><p>人靠谱还是机制靠谱</p><p>人的表现波动性比较大，机制的意义在于，当人不靠谱的时候，去保证做事的下限</p></li><li><p>机制足够靠谱，是不是就不用激励了</p><p>机制是保证做事的下限，并不能替代激励的作用</p></li></ul></li></ul><ul><li><p>如何高效执行</p><p>曾经有位公司老板说，竞争对手的团队天天996，于是也想让自己的团队996。<br>问题是，他希望通过996来达成什么目的。<br>他其实并不知道为什么要996，只是希望大家努力，至于要达成什么目的，他并不清楚。<br>要记住，996只是手段，而手段必须为某个目的服务，目的还不明确的时候，手段的有效性是无法评判的。我们常常靠所谓的“理所当然”去做决策，往往达不到期待的效果，甚至事与愿违，唯一的效果就是阶段性的安慰</p></li></ul><ul><li><p>高效执行=个体产能<em>合作有效度</em>方向有效度*工作时长</p><p>很多管理者都把焦点放在了工作时长上，这就是一将无能，累死三军</p></li></ul><pre><code>- 个体产能=实力*意愿=能力培养*员工激励- 合作有效度  通过分工让大家劲往一处使，同时靠平时积累起来的信任和默契让团队有良好的协作水平- 方向有效度  - 脱离目标谈执行的问题    - 激励失效      - 工作反复切换，之前的讨论评估设计开发都成了沉没成本      - 时间越来越紧，挑战越来越大      - 员工认为管理层没想清楚，质疑管理层能力    - 协作失调      - 明确而认知一致的目标，有助于保持统一的工作步调      - 目标不清晰，会导致低效率沟通    - 忙乱无效      - 明确目标      - 明确目标的衡量指标</code></pre>]]></content>
    
    
    <summary type="html">从工作中来，到工作中去。千万不要为了建立机制而建立机制，每一个机制都要有实用价值。由于机制都是有场景化特性的，当场景发生变化，机制也要升级。对于机制的重新审视和学习都意味着额外的开销，因此，每个机制的维护都是有成本的，如果没有随着场景变化而升级更新，就会成为没有意义的机制，时间长了就会变成常见的：什么机制都有，但是执行效果都不好</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（五）—— 团队建设下篇</title>
    <link href="https://sunra.top/posts/3350143e/"/>
    <id>https://sunra.top/posts/3350143e/</id>
    <published>2023-06-07T12:52:08.000Z</published>
    <updated>2023-08-12T14:20:13.202Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>梯队</p><p>能力，激励，分工，协作这四个要素组合起来就能实现个体战斗力和团队战斗力的有力输出，但是并不能保证团队有持续的动力。<br>要提升一个团队的耐力和韧性，可以通过两个要素来做工作，梯队培养和团队文化。<br>一个团队的梯队，就像团队的骨架一样，决定了团队是否健壮；而团队文化就好像是团队的气质和调性，它会吸引气味相投的人持续加入，把不符合团队气质的人筛选出去。</p></li></ul><span id="more"></span><pre><code>- 梯队规划- 梯队培养    - 选拔和物色培养对象        - 原则            - 保持人才选拔和团队建设的一致性                - 能力：个体能力和业务特点是否相匹配，其能力潜质是否可培养                - 协作：其协作的意识和能力，与团队的要求和期待是否匹配                - 文化：其行为风格和价值观，和团队文化价值观是否匹配            - 重视和自己有互补的人              风格相近的人协作效率会更高，但是缺乏更丰富的洞见和视角。    - 培养物色出来的人        - 对齐期待          管理者和员工对该员工的个人发展的期待达成共识。常用的方式是IDP，即个人发展计划。            - 不承诺原则：即不承诺给员工任何好处              一方面，能够成为团队核心骨干，是靠自己的影响力，而不是承诺。其次，如果无法兑现，这个人可能会流失。              PS：你不承诺任何好处，他为什么要听你的？这个人可能现在就流失了        - 做好授权          能力和影响力都是在实战中积累起来的，这就需要给培养对象提供发挥空间和做事的机会。            - 事前                - 审视初衷                  要明确自己在此次授权中想要收获什么，想把某件事做出来，还是把人带出来                - 明确期待                  让培养对象明确管理者的期待                - 听其思路                  交代好授权任务之后，先听听他对这件事的看法和思路，就可以大体判断出，他独立负责这项工作道理靠不靠谱，也不失为风险把控的良方                - 重要约定                  管理者要对自己特别关心的事情和培养对象作出约定，比如，如何检查是否完成，什么时候检查等            - 事中                - 了解进度                - 给与支持            - 事后                - 评估结果                  对于任何一次授权，针对授权对象的工作结果和表现给予有理有据的评价和及时的反馈                - 洞察优势                  盘点在整个授权过程中，授权对象所表现出来的突出优势有哪些                - 积极反馈                  对于授权对象的工作，要给出一些正向的反馈                - 一条改进                  给出一两条改进的意见        - 建立反馈            - 建立周期性沟通机制，让沟通常规化            - 评审IDP，对IDP执行情况的评估和反馈，才能体现IDP的更大价值            - 安排第二导师</code></pre><ul><li><p>文化</p><ul><li><p>什么是团队文化</p><p>对于团队文化本身，没有唯一明确的定义，每个团队都有一些约定俗成的工作方式和是非判断，以至于在团队中，即使没有人告诉你什么是对的，什么是错的，你大体上也能清楚什么该做，什么不该做。</p></li></ul></li></ul><pre><code>- 团队文化的价值  鲜明的团队文化，至少会给团队带来效率，空间，归属和耐力四种价值    - 效率是由文化的秩序性带来的效果      由于团队文化中包含着约定俗成的工作标准和决策依据，并且团队成员对此都有共识，因此不必事事请示上级。一个强调“安全”的团队，每个人都会考虑工作中的安全措施，统一的行为准则和协作上的默契，会极大提高效率    - 空间是由文化的导向性带来的效果      在符合价值导向的前提下，员工可以自主选择自己的工作手段，甚至是工作内容，这位很多由主动性的员工提供了自主发挥的空间    - 归属是文化的筛选性带来的效果      团队文化有筛选器的作用，认同该文化的人会不断加入进来，而不认同的会逐渐淡出    - 耐力是由文化的延续性带来的效果      文化对一个组织，是相对稳定的元素，它能够在新老员工之间传承，不会因为个别人员的变动而产生变化- 团队文化建设的步骤    - 提炼      用合适的词句表述出来        - 误区            - 拿来主义：你团队的文化和你喜欢什么文化关系不大，而和你是什么样的人关系很大                - 面对问题，总是抱怨，那么强调积极文化是不可行的                - 面对合作，总是对抗，那么强调紧密合作是不可行的                - 面对工作，总是被动等待，那么提倡主动是不行的                - 面对下属，总是漠不关心，那么强调温暖是不行的            - 越简练越好                - 目的是让大家理解并记住，不是字数越少越好        - 方式            - 从自己身上的优秀品质中提炼，从而将优秀的特质放大到整个团队，你身上没有的特质，不适合作为团队文化去培养    - 主张      把提炼出来的文化，宣贯给整个团队，包括上级和兄弟团队        - 不是见着谁就讲，而是要有意识在一些公开或私下场合，把团队文化告诉大家    - 践行        - 员工不买账文化的原因            - 文化提炼的时候，不是从管理者自身提炼的，管理者不能以身作则，言行不一致            - 没有把团队文化和管理工作结合，光说不练，没有让员工感受到践行文化的益处</code></pre>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;梯队&lt;/p&gt;
&lt;p&gt;能力，激励，分工，协作这四个要素组合起来就能实现个体战斗力和团队战斗力的有力输出，但是并不能保证团队有持续的动力。&lt;br&gt;要提升一个团队的耐力和韧性，可以通过两个要素来做工作，梯队培养和团队文化。&lt;br&gt;一个团队的梯队，就像团队的骨架一样，决定了团队是否健壮；而团队文化就好像是团队的气质和调性，它会吸引气味相投的人持续加入，把不符合团队气质的人筛选出去。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（五）：图形学中是如何表达几何体的</title>
    <link href="https://sunra.top/posts/43b8f2f/"/>
    <id>https://sunra.top/posts/43b8f2f/</id>
    <published>2023-06-03T23:35:35.000Z</published>
    <updated>2023-08-12T14:20:13.198Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/posts/83267170/">上一篇关于如何使用贴图的博客</a>中我们讲了如何从贴图中提取我们想要的数据。</p><p>这篇博客我们先简单讲一下贴图的应用，然后从位移贴图过渡到集合体的表达。</p><h1 id="几何体的应用方式"><a href="#几何体的应用方式" class="headerlink" title="几何体的应用方式"></a>几何体的应用方式</h1><p>在GPU编程中，贴图就等于我们CPU编程中内存+范围查询，可以用贴图存储我们计算过程中的需要的数据并对数据进行范围查询。</p><p>所以贴图中不仅仅可以用来存储物体本身上点的颜色信息，还可以存储诸如环境信息，法线信息，位移信息等。</p><span id="more"></span><h2 id="环境贴图"><a href="#环境贴图" class="headerlink" title="环境贴图"></a>环境贴图</h2><p>如下图所示，本来这个茶壶上对环境的反射需要是实时计算的，但是环境时无限远的，所以茶壶相对环境位置不变，这个反射结果也是不变的，所以我们可以提前计算好，然后保存在贴图中，在做渲染的时候，将茶壶本身的颜色贴图和环境贴图的采样结果进行混合就好。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685836152/origin-of-ray/WX20230604-074845_2x_slesm0.png" alt="环境光贴图示例"></p><h2 id="凹凸贴图（法线贴图）"><a href="#凹凸贴图（法线贴图）" class="headerlink" title="凹凸贴图（法线贴图）"></a>凹凸贴图（法线贴图）</h2><p>如果我们的几何体本身比较平滑，我们想要在平滑的表面山制造出凹凸感，比如在一个平面上制造出柏油马路的观感，可以采用凹凸贴图的方式，因为本身我们看到的所谓的凹凸感也是因为光线反射的角度不同导致的，我们可以直接在计算反射角的时候通过凹凸贴图加以干预就好。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685836608/origin-of-ray/WX20230604-075634_2x_punp7t.png" alt="凹凸贴图示例"></p><h2 id="位移贴图"><a href="#位移贴图" class="headerlink" title="位移贴图"></a>位移贴图</h2><p>刚才我们说可以通过凹凸贴图的方式来改变光滑表面的每个点的反射角度来制造凹凸感，那我们其实也可以直接通过位移贴图的方式，在渲染的时候真的就改变点的位置来改变渲染效果。</p><p>这种方式和凹凸贴图的区别是，凹凸贴图不改变点的位置，只是改变法线方向，而唯一贴图是直接改变点的位置，它存储的是对应点基于原本位置的位置。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685836839/origin-of-ray/WX20230604-080024_2x_zs2mii.png" alt="位移贴图"></p><p>那这里就涉及一个问题，我改变了位置，如何计算新的法线？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685837204/origin-of-ray/WX20230604-080630_2x_hlz5v6.png" alt=""></p><blockquote><p>这里的位移贴图其实是一种几何体的表示方式，是一种显式表示方式</p></blockquote><h1 id="几何体的表示方式"><a href="#几何体的表示方式" class="headerlink" title="几何体的表示方式"></a>几何体的表示方式</h1><p>我们有很多中不同的表示几何体的方式，但是主要分为两种，一种是显式的，一种是隐式的。</p><h2 id="隐式的表示方式"><a href="#隐式的表示方式" class="headerlink" title="隐式的表示方式"></a>隐式的表示方式</h2><p>所谓的隐式的方式，它表示的是集合体上的点所满足的关系，理论上我们找到所有满足关系的点，就可以得到这个几何体。</p><p>常见的隐式表示方式有：</p><ul><li>algebraic surface </li><li>level sets </li><li>distance functions</li></ul><h3 id="algebraic-surface"><a href="#algebraic-surface" class="headerlink" title="algebraic surface"></a>algebraic surface</h3><p>对于隐式的表示方式来说，它表示的是集合上的点所满足的关系，所以它可以很简单的判断一个点是不是在几何体的面上，而他的缺点在于，你很难看出来它表示的是个什么东西，如下图</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685871570/origin-of-ray/WX20230604-173434_2x_xq4b0x.png" alt=""></p><p><strong>这里我们可能会产生一个疑问，那就是这种事方式是否只能表示比较简单且有规律的图形？</strong></p><p>其实隐式的方式可以表示非常复杂的图形的，这里提供两个思路：</p><p>第一个思路是，如果我们学过高等数学，任何函数都可以傅立叶展开多个函数相加的方式，同样的，我们可以通过足够多的函数相加拟合出任何函数，只要你有这个知识储备且愿意花时间就好。</p><p>第二个思路，比较像我们在做图表时候的思路，用多个简单的图形的拼接或者剔除等方式(即布尔运算)来做，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685873239/origin-of-ray/WX20230604-180548_2x_rkvbsv.png" alt=""></p><h3 id="distance-functions"><a href="#distance-functions" class="headerlink" title="distance functions"></a>distance functions</h3><p>如图所示，这种方式是刚才我们说的第二个思路布尔运算的一种变体</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685873316/origin-of-ray/WX20230604-180825_2x_dqnxqs.png" alt=""></p><p>符号距离函数（Signed Distance Function，简称 SDF）是一种在计算机图形学和几何处理中常用的数学表示方法。它用于描述一个点到某个形状表面的最短距离，同时包含了该点相对于形状表面的位置信息。SDF 的值可以是正数、负数或零：</p><ol><li>当点位于形状表面上时，SDF 的值为零。</li><li>当点位于形状内部时，SDF 的值为负数，表示点到形状表面的最短距离。</li><li>当点位于形状外部时，SDF 的值为正数，表示点到形状表面的最短距离。</li></ol><p>SDF 在许多应用中都有广泛应用，如光线追踪、碰撞检测、流体模拟等。它的优点在于可以高效地计算点与形状之间的距离，同时保留了点相对于形状的位置信息。</p><p>上图中我们在融合两个球的过程中，首先计算出空间中的任意点分别相对于两个球表面的距离函数，然后加权，结果为0的点留下</p><p>如果三维的比较难理解，我们可以用二维的一个图看看：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685874029/origin-of-ray/WX20230604-181955_2x_bwc80b.png" alt=""></p><h3 id="level-sets"><a href="#level-sets" class="headerlink" title="level sets"></a>level sets</h3><p>这种方式也是一种变体，针对的是我们没法写出SDF的情况，只能写出一个大致的表格映射的情况下，我们大概如何获得融合后的结果，以一条线为例：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685874317/origin-of-ray/WX20230604-182337_2x_galu1n.png" alt=""></p><h2 id="显式的表示方式"><a href="#显式的表示方式" class="headerlink" title="显式的表示方式"></a>显式的表示方式</h2><p>而显式的表示方式，就是直接给出点面的信息，或者通过参数映射的方式，比如我们非常常见的Mesh。我们刚才说的位移贴图其实就是一种映射方式，所以我们刚才说它是一种显式的几何体表示方式。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685872152/origin-of-ray/WX20230604-174903_2x_ycsu26.png" alt=""></p><p>常见的显式表示方式有：</p><ul><li>point cloud: 点云</li><li>polygon mesh：我们常见Mesh</li><li>Subdivision, simplification, regularization：细分，简化，规范化</li></ul><p>而显式的表示方式，缺点就是比较难判断一个点是否在几何体的面上。如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685872127/origin-of-ray/WX20230604-174830_2x_tblcod.png" alt=""></p><h3 id="点云"><a href="#点云" class="headerlink" title="点云"></a>点云</h3><p>这种比较好理解，就是大量的点，这些点之间也不需要连线，只要足够多，就能看不到缝隙。</p><p>因为它是一系列的点，所以用一个数组存储就好，只不过这个数据量非常大</p><h3 id="多边形网格"><a href="#多边形网格" class="headerlink" title="多边形网格"></a>多边形网格</h3><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685875059/origin-of-ray/WX20230604-183728_2x_umqfyz.png" alt=""></p><h1 id="具体的使用场景"><a href="#具体的使用场景" class="headerlink" title="具体的使用场景"></a>具体的使用场景</h1><h2 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h2><p>贝塞尔曲线是由几个点来决定曲线的一种方法，有着非常常见的应用，比如如果我们用过xmind，在不同标签之间建立连线的时候，会给我们四个点，其中两个点固定是需要连接的两个标签的位置，另外给了我们两个点可以拖动，拖动之后就可以改变曲线的形状，这个曲线就是一个三次贝塞尔曲线。</p><p>贝塞尔曲线可以有n次（n大于等于2），我们以二次贝塞尔曲线为例来解释，其他的依次类推就好</p><p>如图，假设我们有三个点，我们这三个点决定了我们曲线从$b_0$开始，$b_1$结束，起点的切线方向需要是$\vec{b_0b_1}$，终点的切线方向需要是$\vec{b_1b_2}$</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685875421/origin-of-ray/WX20230604-184317_2x_s9t7pt.png" alt=""></p><p>具体求解这曲线，我们可以采用如下方式，假设我们有一个点在时间内从$b_0$移动到$b_1$，那么在任意一个时间点t，它的位置应该是：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685875422/origin-of-ray/WX20230604-184327_2x_zwtft8.png" alt=""></p><p>图中的$b_0b_0^1$与$b_0^1b_1$的比值, $b_1b_1^1$与$b_1^1b_2$的比值，$b_0^1b_0^2$与$b_0^2b_1^1$的比值都为t/（1-t）</p><p>二次贝塞尔曲线其实就是先用三个点按比例得到了两个新的点，然后再在新的两个点的连线上按照比例得到一个点</p><p>三次的贝塞尔曲线其实就是四个点来决定曲线，相通的方式，从四个点逐步变成1个点</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685876629/origin-of-ray/WX20230604-190230_2x_jvrfhj.png" alt=""></p><p>再高次的贝塞尔曲线其实就是不断递归上述过程：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685876770/origin-of-ray/WX20230604-190558_2x_ka27xu.png" alt=""></p><p>我们刚才只讲述贝塞尔曲线的是怎么得到的，那么如何用公式表达这个过程呢？如下是二次贝塞尔曲线的结果</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685876959/origin-of-ray/WX20230604-190907_2x_p480q9.png" alt=""></p><p>这结果其实我们把等式右边的系数拿出来，是$(1 - t + t) ^ 2$的展开式</p><p>对于高阶的贝塞尔曲线，其公式如下，其中的B表示的是二项分布的展开式，即每次得到结果的概率是t，那么n次独立重复实验出现j次结果的概率：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877128/origin-of-ray/WX20230604-191159_2x_ydqw3a.png" alt=""></p><h3 id="贝塞尔曲线的拼接"><a href="#贝塞尔曲线的拼接" class="headerlink" title="贝塞尔曲线的拼接"></a>贝塞尔曲线的拼接</h3><p>当我们一个曲线是非常高阶的贝塞尔曲线的时候，其实是很难控制的，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877394/origin-of-ray/WX20230604-191433_2x_nhew7z.png" alt=""></p><p>所以我们可以采取多个低阶贝塞尔曲线拼接的方式：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877395/origin-of-ray/WX20230604-191622_2x_mejshx.png" alt=""></p><h2 id="贝塞尔曲面"><a href="#贝塞尔曲面" class="headerlink" title="贝塞尔曲面"></a>贝塞尔曲面</h2><p>贝塞尔曲面是由4*4=16个点来控制的曲面：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877530/origin-of-ray/WX20230604-191801_2x_fdb6aw.png" alt=""></p><p>如下图所示，首先水平每一行的四个点可以得到一个贝塞尔曲线，此时我们得到了四条贝塞尔曲线，然后我们再想象有一个平面竖直切下去，和四个贝塞尔曲线得到四个点，这四个点再能确定一个贝塞尔曲线，我们移动这个数值面的过程中就可以得到一个贝塞尔曲面：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877530/origin-of-ray/WX20230604-191809_2x_aojora.png" alt=""></p><p>这个过程其实还是个递归的过程：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877822/origin-of-ray/WX20230604-192243_2x_rri2kz.png" alt=""></p><h2 id="Mesh-细分"><a href="#Mesh-细分" class="headerlink" title="Mesh 细分"></a>Mesh 细分</h2><p>所谓mesh细分，指的是，将mesh中的多边形进行拆分，以获得更加光滑的效果</p><p>从定义中我们就可以看出，这个mesh细分其实有两件事情要做，第一件事是把多边形拆分，第二部要对拆分后的多边形进行调整，不然单纯的拆分并不会得到更加光滑的效果，就比如我们把一个三角形三条边中点连起来得到四个三角形，但是这四个三角形还是在一个面上，不会有更光滑的效果出来</p><h3 id="Loop-Subdvision"><a href="#Loop-Subdvision" class="headerlink" title="Loop Subdvision"></a>Loop Subdvision</h3><blockquote><p>叫Loop只是因为发明者算法的人叫Loop</p></blockquote><p>算法第一步就是把三角形的三条边的顶点连起来，我们就得到了四个三角形。</p><p>接下来我们要更新点的位置来使拆分后的面有更光滑的效果：</p><p>对于三个新的点，我们采取以下方式更新坐标</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878264/origin-of-ray/WX20230604-193041_2x_atmqd9.png" alt=""></p><p>对于原本的三个点，我们更新方式如下：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878264/origin-of-ray/WX20230604-193048_2x_zjmgjl.png" alt=""></p><h3 id="Catmull-Clark-Subdivision"><a href="#Catmull-Clark-Subdivision" class="headerlink" title="Catmull-Clark Subdivision"></a>Catmull-Clark Subdivision</h3><p>Loop细分的限制很明显，只能拆分三角面，那么对于多边形我们如何拆分呢？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878453/origin-of-ray/WX20230604-193338_2x_jacoyn.png" alt=""></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878491/origin-of-ray/WX20230604-193440_2x_m28frs.png" alt=""></p><p>可以看出来，只有第一次拆分才会增加奇异点的数量，也就是只有第一次把三角形拆分成三个四边形之后，四边形怎么拆分得到的都是四边形了。</p><p>那么我们在如何使用更新新的四边形的位置呢？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878677/origin-of-ray/WX20230604-193716_2x_ypkihf.png" alt=""></p><h2 id="Mesh-简化"><a href="#Mesh-简化" class="headerlink" title="Mesh 简化"></a>Mesh 简化</h2><h3 id="边坍缩"><a href="#边坍缩" class="headerlink" title="边坍缩"></a>边坍缩</h3><p>其实就删掉一个边，或者说把边的两个顶点合并成一个。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878849/origin-of-ray/WX20230604-194001_2x_afzlfm.png" alt="">、</p><p>这个方案听起来简单，但是有两个问题，删除哪个边，合并之后的点的位置在哪里才能引入最小的误差。</p><blockquote><p>注意，在图形学中，很多所谓的最，只是效果上可以接受的意思</p></blockquote><p>这里我们引入一个新的概念，叫做二次度量误差，即距离被删除的面L2距离和最小时候的L2距离</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685879253/origin-of-ray/WX20230604-194447_2x_eou8un.png" alt=""></p><p>我们只需要计算出所有面的二次度量误差，然后依次选取最小的删除就好。</p><p>这里其实有个问题，就是每次删除后，都会影响一些点的位置，从而影响其二次度量误差，我们需要重新计算并重新排序获得最小的进行删除。这里我们就要用到优先级队列这个数据结构，每次获取队头进行删除，然后更新被影响到的二次度量误差，再从队头获取就好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/posts/83267170/&quot;&gt;上一篇关于如何使用贴图的博客&lt;/a&gt;中我们讲了如何从贴图中提取我们想要的数据。&lt;/p&gt;
&lt;p&gt;这篇博客我们先简单讲一下贴图的应用，然后从位移贴图过渡到集合体的表达。&lt;/p&gt;
&lt;h1 id=&quot;几何体的应用方式&quot;&gt;&lt;a href=&quot;#几何体的应用方式&quot; class=&quot;headerlink&quot; title=&quot;几何体的应用方式&quot;&gt;&lt;/a&gt;几何体的应用方式&lt;/h1&gt;&lt;p&gt;在GPU编程中，贴图就等于我们CPU编程中内存+范围查询，可以用贴图存储我们计算过程中的需要的数据并对数据进行范围查询。&lt;/p&gt;
&lt;p&gt;所以贴图中不仅仅可以用来存储物体本身上点的颜色信息，还可以存储诸如环境信息，法线信息，位移信息等。&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（四）：如何应用纹理贴图</title>
    <link href="https://sunra.top/posts/83267170/"/>
    <id>https://sunra.top/posts/83267170/</id>
    <published>2023-05-25T10:43:16.000Z</published>
    <updated>2023-08-12T14:20:13.198Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/posts/2a17dbd0/">上一篇关于Shading的博客</a>中最后我们提到了Texture是我们用来对点进行输入的方式。</p><p>之前我们的说，每个点都有自己的UV坐标，然后通过UV坐标去贴图上找到对应的点，然后把值取出来就好，三角形中间的像素点我们可以通过中心坐标来进行插值。</p><p>但是问题来，如果我们的贴图过小，就可能导致模型是上多个点对应相同的UV，那么就会造成模糊，反之如果贴图过大，UV坐标差别过大，会造成最后产生锯齿或者摩尔纹的效果。</p><p>本文就来讲一下，游戏引擎是如何解决这两种问题的。</p><span id="more"></span><h1 id="基本的采样规则"><a href="#基本的采样规则" class="headerlink" title="基本的采样规则"></a>基本的采样规则</h1><p>（x,y）是屏幕上的像素坐标，（u,v）是模型上的点对应的纹理坐标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for each rasterized screen sample (x,y): </span><br><span class="line">    (u,v) = evaluate texture coordinate at (x,y) </span><br><span class="line">    texcolor = texture.sample(u,v);</span><br><span class="line">    set sample’s color to texcolor;</span><br></pre></td></tr></table></figure><h1 id="如果贴图过小会怎样"><a href="#如果贴图过小会怎样" class="headerlink" title="如果贴图过小会怎样"></a>如果贴图过小会怎样</h1><h2 id="方案一：纹理放大"><a href="#方案一：纹理放大" class="headerlink" title="方案一：纹理放大"></a>方案一：纹理放大</h2><p>这个方案是最简单的方案，贴图过小就通过一定的算法进行放大。</p><p>这里我们引入一个新的概念，叫做纹素(texel)，即纹理上的一个点（A pixel on a texture），我们的UV坐标从贴图上取到的就是一个纹素</p><p>纹理放大的算法常见的有三种：Nearest，Biliner，Bicubic</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685012251/origin-of-ray/WX20230525-185641_2x_ngjuhb.png" alt="三种算法纹理放大效果图"></p><p>我们以Biliner为例来讲解下纹理放大的过程。</p><p>假设我们要采样下图中红色点的值，我们选取该点周围的四个点，然后计算我们要采样的点与四个纹素中心之间的距离，并用这个距离进行插值：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685012555/origin-of-ray/WX20230525-190006_2x_uxgax3.png" alt="Biliner插值过程"></p><h1 id="如果纹理过大会怎样"><a href="#如果纹理过大会怎样" class="headerlink" title="如果纹理过大会怎样"></a>如果纹理过大会怎样</h1><p>首先我们看一个效果图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685012653/origin-of-ray/WX20230525-190358_2x_eujo53.png" alt=""></p><p>它在近的地方，因为贴图过大，丢失了一些细节导致出现了锯齿，而在远处，又因为过多的细节产生了摩尔纹。（原因属于个人理解，但效果是这样的没错）</p><p>当贴图过大的时候，实际上就是如下效果：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685065463/origin-of-ray/WX20230526-094407_2x_irakss.png" alt=""></p><p>也就是当我们利用一开始说的的<code>基本采样规则</code>去找贴图上的某个纹素的时候，找到的不是一个，而是一片。</p><blockquote><p>换句话说，贴图过小，多个像素找到同一个纹素，贴图过大，一个像素可以匹配多个纹素</p></blockquote><h2 id="方案一：超采样"><a href="#方案一：超采样" class="headerlink" title="方案一：超采样"></a>方案一：超采样</h2><p>这个超采样技术的算法其实和刚才的纹理放大是一样的，只不过针对贴图过小的情况，超采样针对的是原始贴图，用于生成一个分辨率更高的原始贴图，而当贴图过大时，一个像素可能对应多个纹素，那么该像素的从贴图上的采样结果是有其周围的多个纹素共同决定的。</p><p>下图为超采样的效果图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685066672/origin-of-ray/WX20230526-100416_2x_gbp78o.png" alt=""></p><p>可以看到，超采样确实是有效果的，但是问题就是，计算代价过大，每个像素都需要计算多个点的值并进行插值。</p><h2 id="方案二：求平均值"><a href="#方案二：求平均值" class="headerlink" title="方案二：求平均值"></a>方案二：求平均值</h2><p>超采样计算麻烦，我们就简单的在一个范围内求平均值就好</p><h2 id="方案三：Mipmap"><a href="#方案三：Mipmap" class="headerlink" title="方案三：Mipmap"></a>方案三：Mipmap</h2><p>这是一种更快的范围查询，是一种空间换时间的思路，需要我们事先计算好不同采样频率下范围查询的结果存储到贴图中，即生成不同程度低分辨率的贴图，当出现贴图过大的情况时，直接去更小分辨率的贴图上进行查找。</p><p>Mipmap是一种纹理映射的技术，用于在不同距离和角度下呈现不同细节的纹理。一个Mipmap纹理是由多个不同分辨率的纹理图像组成的，每个图像都是前一个图像的1/4大小。Mipmap的level是指Mipmap纹理中的第几个图像，从0开始计数，0级是原始纹理图像。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685067134/origin-of-ray/WX20230526-101158_2x_od1rbi.png" alt=""></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685067194/origin-of-ray/WX20230526-101305_2x_rznotd.png" alt=""></p><p>这种方案有两个关键点：</p><ol><li>生成不同级别的Mipmap</li><li>如何确定使用哪个级别的Mipmap</li></ol><p>第一点是图像压缩的算法，有很多，我们不多赘述，也不是渲染特有的知识，我们主要看一下如何确定级别，即这个<code>D</code></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685067404/origin-of-ray/WX20230526-101635_2x_mhbe63.png" alt=""></p><p>Mipmap的level可以通过以下公式计算：</p><p>level = log2(max(w, h))</p><p>其中，w和h是纹理图像的宽度和高度，max(w, h)表示宽度和高度中的最大值。这个公式的意思是，每个Mipmap级别的图像都是前一个级别的图像的1/4大小，因此在计算时使用对数函数以2为底数，可以得到最大级别的大小。</p><p>例如，如果原始纹理图像的大小为512x512像素，则Mipmap纹理包含8个级别，分别是0级到7级。0级是原始图像，1级是256x256像素的图像，2级是128x128像素的图像，以此类推。</p><p>我们需要采用合理的Level才会有比价好的效果，级别越高，细节越少，如果因为过小再使用贴图过小时的超采样方法，会更加模糊：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685067916/origin-of-ray/WX20230526-102501_2x_ihkpzv.png" alt=""></p><h2 id="方案四：Anisotropic-Filtering"><a href="#方案四：Anisotropic-Filtering" class="headerlink" title="方案四：Anisotropic Filtering"></a>方案四：Anisotropic Filtering</h2><p>Mipmap其实还是有限制的，它只能去对正方向的贴图做mipmap。</p><p>因为他的这个限制，一方面，在做采样的时候会用到很多用不到的点，增加计算量，其次是一些像素对应的是覆盖多个纹素的长方形，导致超采样模糊。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685068320/origin-of-ray/WX20230526-103146_2x_veggr4.png" alt=""></p><p>针对长方形的情况，我们可以采用Anisotropic Filtering</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685068399/origin-of-ray/WX20230526-103312_2x_hr9ugc.png" alt=""></p><p>按比例缩小的正方形贴图在对角线，其他位置存放一些宽度压缩活着长度压缩的图</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/posts/2a17dbd0/&quot;&gt;上一篇关于Shading的博客&lt;/a&gt;中最后我们提到了Texture是我们用来对点进行输入的方式。&lt;/p&gt;
&lt;p&gt;之前我们的说，每个点都有自己的UV坐标，然后通过UV坐标去贴图上找到对应的点，然后把值取出来就好，三角形中间的像素点我们可以通过中心坐标来进行插值。&lt;/p&gt;
&lt;p&gt;但是问题来，如果我们的贴图过小，就可能导致模型是上多个点对应相同的UV，那么就会造成模糊，反之如果贴图过大，UV坐标差别过大，会造成最后产生锯齿或者摩尔纹的效果。&lt;/p&gt;
&lt;p&gt;本文就来讲一下，游戏引擎是如何解决这两种问题的。&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（四）—— 团队建设上篇</title>
    <link href="https://sunra.top/posts/409cc99/"/>
    <id>https://sunra.top/posts/409cc99/</id>
    <published>2023-05-21T01:43:25.000Z</published>
    <updated>2023-08-12T14:20:13.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是好的团队"><a href="#什么是好的团队" class="headerlink" title="什么是好的团队"></a>什么是好的团队</h3><ul><li><p>业绩好</p><ul><li>看方向：管理规划阶段，定义何为好的业绩，并规划与之匹配的团队</li><li>带人：即团队建设阶段，不断提高团队取得业绩的能力，包括个人能力和团队能力</li><li>做事：任务管理阶段，如何通过良好的把控把计划落地执行，产出结果</li></ul></li><li><p>效率高</p><ul><li>看方向：目标越清晰，效率越高</li><li>带人：团队成员个体能力越强，团队成员间的协作水平越高，团队效率就越高</li><li>做事：流程和规则越有效率，操作越熟练，做事效率就越高</li></ul></li><li><p>可持续</p><ul><li>看方向：团队规划的合理性和有效性</li><li>带人：完善的梯度和成熟的团队文化</li><li>做事：团队的韧劲是磨练出来的，磨练离不开持续地做事</li></ul></li></ul><span id="more"></span><h3 id="团建要素"><a href="#团建要素" class="headerlink" title="团建要素"></a>团建要素</h3><h4 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h4><ul><li><p>能力的构成</p><ul><li><p>能力三核</p><ul><li><p>知识</p><ul><li>知道和理解的内容信息，一般用广度和深度来衡量</li></ul></li><li><p>技能</p><ul><li>操作和完成某项工作的技术和能力，一般用熟练度来衡量</li></ul></li><li><p>才干</p><ul><li>自发高频运用的思维，行动和感受模式，也包括品格特质等</li></ul></li></ul></li><li><p>工作能力的三个维度</p><ul><li><p>专业能力</p><ul><li><p>对于技术人来说，一般指的就是技术能力，这对于不同的团队来说不一样。可以从广度和深度来衡量</p><p>广度：代表能搞定多大规模的事情<br>深度：代表能搞定多复杂的事情</p></li></ul></li><li><p>通用能力</p><p>如：结构化思考能力。团队协作能力。项目管理能力。快速学习能力</p></li><li><p>人格力量</p><p>人格力量通常指的是一个人在面对某一情形时的稳定态度和表现，比如迎难而上，坚持不懈，积极正向等。<br>这些人格力量对于能否搞定一件事情有时至关重要，但是培养起来却不是一朝一夕的事情，往往来自于每个人长期的生活工作经历，而且一旦形成就很难改变。<br>但很难改变不意味着不能改变。为了让团队成员趋于某一特定的共同气质，管理者需要旗帜鲜明地倡导团队推崇的品格。</p></li></ul></li></ul></li><li><p>能力培养的目标</p><p>学习目标最好专题化，而不是散落一地的知识点</p></li></ul><pre><code>- 举例  - 专业能力角度    现有技术串讲    核心技术专题化学习：      架构专题      存储专题      前端专题      安全专题      运维专题      自动化测试专题    扩展新技术      业务发展需要的新技术      领域前沿技术  - 通用能力角度    项目管理能力    带人能力    沟通表达能力</code></pre><ul><li><p>能力培养的标准</p><p>提升员工能力的初衷是什么？不同的初衷决定制定什么标准，然后把这个标准写入员工的个人发展计划中，并与他们达成一致</p></li></ul><pre><code>- 避免期待不清导致期待过高或效果不佳- 合理安排管理者的精力投入，并合理分配对不同培养对象投入的精力</code></pre><ul><li><p>能力培养的方法</p><p>7成靠工作实践，2成靠互相交流，1成靠听课和看书自学</p></li><li><p>员工学习意愿</p><p>如何激发员工的学习的动力和意愿呢？</p></li></ul><pre><code>- 推：给压力，推着他学  - 提出明确的工作要求  - 建立学习机制。如强制要求遵守学习规则，并完成学习任务- 拉：给方向，引导他学  - 树立榜样  - 配备导师  - 为团队制定成长的技能图- 放手：给发挥空间，自主学习  - 给员工勇挑重担的机会  - 给员工自主空间，让他独立思考  - 给他信心和耐心，允许他犯错，走弯路</code></pre><ul><li><p>能力培养的两个信念</p><ul><li><p>相信员工能力的差异性，也就是看到差异，重视丰富性</p><p>知识经济时代，员工的创造力能为团队带来更大的价值，创造力往往来自于差异的碰撞</p></li><li><p>相信团队能力的系统性，也就是欣赏差异，重视互补性</p></li></ul></li></ul><ul><li><p>激励</p><p>个体战斗力取决于两个要素：个体能力和使用能力的意愿</p></li></ul><ul><li><p>员工激励的挑战</p><p>向上沟通，员工激励和团队凝聚力是管理者心中最有挑战性的三个管理主题</p></li></ul><pre><code>- 激励认知不系统  了解一些激励的技巧和方法，但是不了解激励的全貌，也不清楚背后的原因，因此没有系统的激励方案- 激励手段匮乏  实实在在的物质激励不受管理者掌控，“画大饼”的精神激励员工又不买账，可用的激励手段少- 激励不得要领</code></pre><ul><li><p>马斯洛需求层次理论</p><p>这个理论是否适用于中国？有什么需要因地制宜改变的吗</p></li><li><p>员工激励发展的三个阶段</p><ul><li><p>本能</p><p>主要来源于对生存和安全的渴望，需求层次处于“马斯洛需求层次模型”的最底层。</p></li></ul></li></ul><pre><code>- 外驱  基本哲学就是“寻求奖励，避免惩罚”，也就是胡萝卜加大棒。这是近200年来工业时代被广泛认同的激励方式，其核心目的在于让员工“服从”。  同一时代的泰勒的“科学管理理论”认为，工人好像就是机器上的零件，他们只需要在正确的时间用正确的方法做正确的事，以保证这台机器运转良好，在满是流水线的工业时代，工人要做的是“服从”而不是别出心裁的创造  - 存在的问题    - 对大部分管理者来说，除了画饼，物质上的激励手段不受管理者掌控    - 导致内在动机消失，降低员工自驱力    - 造成业绩下降    - 扼杀创造力    - 抑制善行      比如，当一个团队对于优秀的奖励不明显，对于错误的惩罚却很严重的时候    - 鼓励欺诈，走捷径，不道德手段    - 让人上瘾，让员工对外部激励上瘾    - 滋生短视思维    - 会逐渐被免疫，“善用威者不轻怒，善用恩者不妄施”  - 非物质激励手段    如表扬和正向反馈，其外部激励的负面危害较低，是一项可以常用的外部手段    - 具体原则：表扬的内容要具体    - 公开原则：公开表扬      - 让被表扬的员工有更大的激励      - 告诉团队每个人，什么样的行为和价值观是团队认同和倡导的    - 及时原则- 内驱  - 内驱的三个方面    - 主导自己的人生，即“自主”    - 延展自己的能力，即“专精”    - 让生活更有意义，即“目的”  - 使用内驱来激励员工，是一个不可回避的选择    - 时代的选择      知识经济时代，员工的创造力能为公司创造更多的价值，而创造力是需要自主和差异，这一点和工业时代的理念几乎相反。    - 人的选择      随着中国经济和文化的发展，物质奖惩和别人的评价变得不如以前重要了，很多职场人有自己独特的工作价值观，尤其关注自己是否愿意干  - 如何激发    - 提高员工工作的自主性，也就是，给员工一定程度的自主掌控感      - 首先是工作时间和地点的自由      - 其次是工作内容的自由度        员工可以在一定程度上选择自己的工作内容    - 提高员工专精度，让员工持续成长      这里的专精强调的不是设定目标成为某个专家，而是强调自主投入的过程，为员工创造愿意自主投入的条件      - 明确的工作目标        对员工的要求越清晰，他越愿意投入努力      - 目标要略有挑战性        对员工要求太高会带来焦虑，太低会带来无聊      - 要能发挥其优势        每个人都愿意做自己擅长的事情，如果某项工作能发挥员工的独特优势，员工必定会投入热情。        优势是可以有很多层面的，我们可能满足不了某员工所期望的工作内容，但是还可以在行为模式和思维模式上去考虑，比如让其去做一些沟通的事情    - 提高工作的意义感和使命感      在不拒绝利益的同时，追求“价值”最大化，希望自己做出来的工作是有意义和价值的      总有一批人是因为工作没有价值而离职的，他们不是矫情，而是真的需要自己的工作有价值</code></pre><ul><li><p>员工幸福感</p><ul><li><p>全面可持续幸福（PERMA）</p><p>不仅仅是情绪上的快乐，而是一种蓬勃的生命状态，马丁塞利格曼将其称之为“盛放”</p></li></ul></li></ul><pre><code>  - 正面情绪    你在营造什么样的团队氛围，团队成员之间是彼此信赖，合作愉快，互帮互助还是抱怨指责，死气沉沉？  - 人际关系    你做了什么来提高员工的归属感和融入感？是否涉及了一些活动和机制，让员工之间更愿意互相支持，比如比较常见的，是否为每个员工安排指定导师了？  - 投入    是否为员工自主投入创造了条件，比如是否设定了清晰的目标，给他们适当的挑战，并支持他们发挥自己的优势  - 成就    迎接挑战并取得成就，是大部分工程师非常享受的事情，，但是这需要一个前提，即我们对于成就的刻画。    把日常工作项目化，把大型项目里程碑化  - 人生意义</code></pre><ul><li><p>激励方案的设计</p><ul><li><p>激励对象</p><p>该激励方案是针对某个人，某个群里还是团队全员</p></li><li><p>激励目的</p><p>明确该激励方案想要达到的效果</p></li><li><p>激励类型</p><p>主要是区分该方案是重点在于短期效果还是长期效果</p></li><li><p>激励手段</p><p>选择在什么激励要素上开展工作，驱动的三个阶段的各个要素，PERMA的五个要素都可以考虑</p></li><li><p>激励对象的情况</p><p>要对被激励对象有充足的了解，，例如该对象的激励基线是什么，只有明显超过这个基线才有激励效果，如果低于这个基线，就会有明显的负激励</p></li><li><p>合理性评估</p><ul><li>从成本上要考虑性价比</li><li>风险：即会对谁造成明显的负激励</li></ul></li><li><p>激励时机</p></li></ul></li><li><p>员工激励挑战的应对</p><ul><li>激励的认知：从单一的激励维度，升级为立体的激励体系</li><li>激励功夫用在平时，而不应靠一些临时的刺激性方案</li><li>了解设计一个激励方案所需要考虑的各个要素，并能够进行操作</li></ul></li></ul><h4 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h4><ul><li><p>分工的目的</p><p>很多人第一反应是提高效率。但是，如果追求效率，应该减少分工，因为合作的人越多效率越低，所以有些团队裁员后反而业绩上升。</p></li></ul><pre><code>- 为了实现规模化，分工不是为了效率，而是为了规模- 协作：分工是手段，协作是目的- 实现专精</code></pre><ul><li><p>常见的组织结构</p><ul><li><p>矩阵式结构</p><p>员工按照角色组队，划分成不同的角色团队，每个团队都有自己的负责人。要做项目时，会有专门的项目经理来向各个团队负责人申请人力。</p></li></ul></li></ul><pre><code>  - 优点：各个角色团队的专业度都很高  - 缺点：项目执行起来比较低效- BU式结构  做某项业务的所有人员和资源都统一调配。无论这个事业部是大是小，都角色齐全。  - 优点：合作效率高  - 缺点：资源冗余</code></pre><ul><li><p>常见的分工问题</p><ul><li><p>分工模糊</p><p>这是最常见的误区，甚至有些管理者为了让大家能够互相补位，主动承担，增强互助，还会去可以模糊边界，所谓“去边界化”。<br>但是，要注意，任何不以分工清晰为前提的边界模糊化，都会事与愿违。因为：<br>只有明确的分工，才会带来归属感，才愿意主动多付出一些。只要在明白了什么是自己该做的，才能知道做了什么叫“积极主动”</p></li><li><p>分工稳定性问题</p><p>只有稳定的分工才能体现分工的价值</p></li></ul></li></ul><pre><code>  - 业务的不断调整，会造成分工不断变化  - 长期稳定的分工，在带来专精的同时，也会带来局限和怠惰，割裂的视野</code></pre><ul><li><p>虚拟组织</p><ul><li><p>优点</p><ul><li><p>高效执行</p><p>虚拟团队的组织一般都是为了专人专事，聚焦目标，高效执行</p></li><li><p>资源配置合理</p><p>对很多工作来说，专门组建一个团队不值得，但又时不时需要设立新项目，虚拟团队就为这类需求提供了解决方案，大家可以因为做事走到一起，但又不是一个独立预算的团队</p></li><li><p>保持归属感</p></li></ul></li><li><p>原则</p><ul><li><p>专人专事，不宜太多</p></li><li><p>认同员工价值</p><p>既然你同意你的员工加入到这个虚拟组织，无论做出来的业绩是否是你最看重的，都要认同他的价值。<br>很多管理者常常以员工产出对自己团队价值不大为理由压低员工绩效，这是典型的让员工背负管理者的决策后果</p></li><li><p>目标明确，职责冠名</p></li></ul></li></ul></li></ul><h4 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h4><p>  努力的方向就是：像一个人那样默契</p><ul><li><p>如何提高协作水平</p><ul><li><p>整体统筹</p><ul><li><p>评估协作水平，找到工作重点</p><p>对于协作水平，我们很难给一个衡量标准，但是协作水平属于优良中差还是能够大概感觉的。<br>主要是回答好一个问题：当前协作中的主要问题是什么，做什么事可以明显提高协作水平</p></li><li><p>主张并推进各项工作</p><p>把“协作很重要”的理念贯彻给团队成员，并推进一些让员工切身高收到的措施来促进协作</p></li><li><p>整体协调，提供仲裁</p><p>协作是一个动态过程，员工在协作过程中肯定会出现分歧和摩擦，管理者要把解决分歧作为改善协作关系的契机。<br>解决协作中的分歧和矛盾，恰恰是提升协作水平最有效的手段</p></li></ul></li><li><p>建立机制</p><p>员工之间并不会因为员工都积极主动就能协作好，管理者需要提供模版和指导，避免混乱和不知所措。<br>员工之间该如何协作，不是自然而然就清楚的，需要管理者建立一些机制来指引大家。</p></li></ul></li></ul><pre><code>- 提升互信  - 深入而立体的互相了解  - 有针对性的团建活动  - 增加合作机会，共同面对挑战- 不断练习</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是好的团队&quot;&gt;&lt;a href=&quot;#什么是好的团队&quot; class=&quot;headerlink&quot; title=&quot;什么是好的团队&quot;&gt;&lt;/a&gt;什么是好的团队&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;业绩好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看方向：管理规划阶段，定义何为好的业绩，并规划与之匹配的团队&lt;/li&gt;
&lt;li&gt;带人：即团队建设阶段，不断提高团队取得业绩的能力，包括个人能力和团队能力&lt;/li&gt;
&lt;li&gt;做事：任务管理阶段，如何通过良好的把控把计划落地执行，产出结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;效率高&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看方向：目标越清晰，效率越高&lt;/li&gt;
&lt;li&gt;带人：团队成员个体能力越强，团队成员间的协作水平越高，团队效率就越高&lt;/li&gt;
&lt;li&gt;做事：流程和规则越有效率，操作越熟练，做事效率就越高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可持续&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看方向：团队规划的合理性和有效性&lt;/li&gt;
&lt;li&gt;带人：完善的梯度和成熟的团队文化&lt;/li&gt;
&lt;li&gt;做事：团队的韧劲是磨练出来的，磨练离不开持续地做事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（三）—— 管理规划</title>
    <link href="https://sunra.top/posts/e0457b53/"/>
    <id>https://sunra.top/posts/e0457b53/</id>
    <published>2023-05-14T08:33:52.000Z</published>
    <updated>2023-08-12T14:20:13.202Z</updated>
    
    <content type="html"><![CDATA[<p>说起管理规划，大部分管理者并不陌生，因为管理者每半年或者每季度就需要做一次规划。有的公司叫制定KPI，有的公司叫梳理团队OKR，还有的公司叫季度规划或年度规划，总之就是要和上级约定，接下来我们要做什么，以及如何评估做的好不好，对管理者来说，这是和上级对齐的最重要的约定。</p><p>准确的说，完成团队KPI和OKR的设定，只是管理规划的一部分，因为这个只体现了上级对团队的期待，并不能完全涵盖你作为团队负责人对于管理工作的全部规划</p><span id="more"></span><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>基本含义</p><p>在管理者头脑中，构建自己的管理理想</p></li><li><p>呈现形式</p><p>管理者和上级达成的工作协议，实现良好的上下级协同</p></li><li><p>核心内容</p><p>管理规划要求管理者回答清楚一个这样的问题：“这个团队你打算怎么带”</p></li></ul><ul><li><p>回答上级</p><p>通常的角度是从投入和产出两个角度回答</p></li><li><p>回答自己</p><ul><li><p>职能</p><p>上级设立这个团队的目的是什么</p></li><li><p>目标</p><p>上级对这个团队的产出有什么期待</p></li><li><p>团队</p><p>上级对这个团队的发展有什么期待</p></li><li><p>路径</p><p>需要向上级申请哪些资源</p></li></ul></li></ul><h3 id="要素1-职能"><a href="#要素1-职能" class="headerlink" title="要素1:职能"></a>要素1:职能</h3><p>所谓的团队职能，就是回答“团队是干什么的”这个问题<br>从团队职责的角度来说，需要的语言越多，说明职责越不清晰</p><ul><li><p>帮助理清团队职责的三个问题</p><p>这三个问题首先需要管理者回答清楚，其次需要管理者用简洁的语言回答清楚，最后需要团队的每一个成员都清楚</p></li></ul><ul><li>公司为什么要设置这个团队，对这个团队的期望是什么</li><li>这个团队如果要持续存在下去，其独特的价值是什么</li><li>用什么来衡量团队价值的高低</li></ul><ul><li><p>回答清楚三个问题的作用</p><ul><li><p>提升团队凝聚力</p><p>只有大家都清楚自己团队是做什么的，才能明白为什么而凝聚在一起</p></li><li><p>有效激励员工</p><p>只有大家都清楚了工作的意义和价值，才能让大家工作更有成就感</p></li><li><p>提升员工主动性</p><p>如果员工不清楚团队的职责和工作范畴，不清楚什么事好坏对错，除了等和靠，他们没有其他选择</p></li></ul></li><li><p>团队职能的层次</p><ul><li><p>基本职责</p><p>团队职能的下限。至少要把工作完成，才能体现团队的基本价值。一般来说，团队的职能是上级给定的，如果心里对此不清楚，要先和上级搞清楚对团队的基本要求和核心职能</p></li><li><p>升华的使命</p><p>团队的职能上限</p></li></ul></li><li><p>团队职能设定的步骤</p><ul><li><p>第一步：收集信息</p><ul><li><p>向上沟通</p><p>听听上级对团队的期待和要求，以及希望用什么纬度来衡量自己做得好还是不好</p></li></ul></li></ul></li></ul><pre><code>- 向下沟通  探讨大家对团队的业务看法和理解，以及对未来发展的期待- 左看右看  看职能定位的边界在哪里，最好和兄弟团队的职能是无缝对接的，尤其不要覆盖兄弟团队的职责。当一个公司在高速发展的时候，可以做的事情有很多，没必要抢地盘。当然如果公司陷入迟滞，在具体看。- 自己的理解  自己对业务的理解，对领域的理解，对团队的期待，对自己的期待</code></pre><ul><li><p>第二步：提炼和升华</p><ul><li><p>职责的提炼</p><p>基于收集的信息，用易于理解的语言，对职责进行简短化提炼，并尽可能长期稳定下来，如负责服务端的开发</p></li><li><p>使命的升华</p><p>基于基本职责，寻找团队对于部门和公司的独特价值，要注意使用基于“结果”的描述，而非基于过程的描述</p></li></ul></li></ul><h3 id="要素2-目标"><a href="#要素2-目标" class="headerlink" title="要素2:目标"></a>要素2:目标</h3><p>如果说职能的界定明确了团队的价值，那么目标是要回答“通过什么来体现团队价值”</p><ul><li><p>目标设定的意义</p><ul><li>期待：最基本最核心的，包含自己和上级的诉求</li><li>有效的资源配置：明确的目标牵引着资源的调配</li><li>执行力：当目标不够清晰或者频繁变化的时候，就会表现出执行力不够</li><li>凝聚力：明确的团队目标和愿景，就是提高团队凝聚力的重要手段之一</li><li>激励：在提升员工自驱力的要素中，要让员工在工作中产生沉浸其中的状态，就要有明确的目标</li></ul></li><li><p>目标设定的原则</p><ul><li><p>SMART原则</p><ul><li>Specific：明确的</li><li>Measurable：可衡量的</li><li>Attainable：可达的</li><li>Relevant：相关的</li><li>Time-bound：有时限的</li></ul></li><li><p>尽可能少，过多的目标违背了设置目标的初衷：资源配置</p></li></ul></li><li><p>目标设定的维度</p><ul><li><p>业务目标</p><ul><li>必选的，接下来团队的产出要达到什么标准，比如KPI和OKR等就是为了这个目标，属于外在目标</li></ul></li><li><p>团建目标</p><ul><li>希望接下来团队的规模和梯度得到怎样的成长和发展</li></ul></li><li><p>专业目标</p><ul><li>加下来团队从专业能力的角度达到什么目标，比如稳定性达到什么级别等</li></ul></li></ul></li><li><p>目标设定的形式</p><p>KPI暗含这O，没有O就定不出KPI<br>OKR暗含KPI，OKR里的KR就包含可量化的结果KPI和不可量化的结果KRA</p><p>OKR不是对KPI的否定，两者都可以作为目标管理的手段使用<br>OKR更强调目标和手段的一致，KPI则更关注对结果考核，两者各有侧重</p></li></ul><ul><li><p>描述形式</p><ul><li><p>可以量化的指标</p><p>大家常说的的KPI，即到某时间点，什么指标达到什么数字</p></li><li><p>不可量化的目标</p><p>用关键结果来衡量。比如我们常说的KRA或者OKR。描述形式大致是：到某时间点，完成什么工作，该工作实现了哪些功能或达到了哪些效果</p></li></ul></li><li><p>对比</p><p>OKR更适合开放性强，追求创造的组织。而KPI更适用于规则成熟，追求之行的组织</p></li></ul><pre><code>- KPI的基本逻辑  无论如何确保KPI的完成，追求的是结果达成的确定性。这和工业时代强调追求业绩的确定性是相匹配的。而工业时代因为操作规程都有明确的要求，所以业绩达成是可控的。在这种情境下，KPI更为合适- OKR的基本逻辑  对O有帮助的事情都可以做，注重的是目标达成的可能性。这与知识经济时代追求创造性是相匹配的。在种情境下，OKR更为合适</code></pre><ul><li><p>目标设定可能遇到的挑战</p><ul><li><p>基于现有资源做目标，而不是基于远方的目标往前推</p><p>常见说法为：我们团队只能做到这个程度了，这个项目能完成就不错了。更合理的做法是：从上级的角度考虑，你的团队需要保证哪几项重要的结果，然后看看如何调整</p><p>解决方法为：以终为始的出发点</p></li><li><p>目标不明确</p><p>过程化的描述：在十月底完成架构改造。<br>这种描述值强调了做什么，没有交代完成之后的效果</p><p>解决方式为：结果导向的描述</p></li></ul></li></ul><ul><li><p>目标设定好之后，不向下传达</p><p>如果不向下传达，团队成员对于整个团队的方向感不清晰，于是我们前面提到的目标带来的效果就无法体现</p></li></ul><ul><li><p>苦恼于目标的频繁调整</p><p>业务目标经常变换的时候，就需要为团队设置技术目标，也叫做专业目标或者内部目标</p><p>设立的步骤有两步：</p><ol><li>选择要提升的关键维度，主要来源有，最能体现团队核心技术的技术维度，重大的技术攻坚方向或者技术债务偿还，新的技术储备等。</li><li>设定目标。可以是量化的KPI，也可以非量化的KRA，就像每个人有自己的价值观一样，每个团队都有自己最核心的评价维度，这是由团队职能决定的，如，服务端团队的稳定性和性能，数据团队的准确性和安全性，功能团队的高效和质量</li></ol></li></ul><h3 id="要素3-团队"><a href="#要素3-团队" class="headerlink" title="要素3:团队"></a>要素3:团队</h3><ul><li><p>角度</p><ul><li><p>从团建目标的视角来看</p><p>所谓团建目标，就是希望把团队发展成什么样子</p></li></ul></li></ul><pre><code>- 团队的规模- 团队的分工- 团队的梯度</code></pre><ul><li><p>从资源视角</p><p>从资源视角来看团队，是一个成熟管理者的标志之一。<br>既然站在公司的角度，每个团队都是一笔资源和成本，那么作为管理者在盘点自己当前人力和预算人力的时候，都要有成本意识</p></li></ul><pre><code>- 如何合理推算成本  - 对业务理解    通过对业务的理解，以及你希望达成的目标。需要投入的人力和目标是息息相关的，和手段的选择也是息息相关的 ，你的各项决策都能影响资源的估算  - 参照行业资源配比情况</code></pre><ul><li><p>人才培养视角</p><p>到下一个节点，你需要重点培养哪些人，给他们什么样的平台和空间，以及你有能力提供给他们什么样的指导和支持，期待他们能够胜任什么角色。</p></li></ul><pre><code>- 团队消化能力  一个团队能够良性吸纳的新人是有限的，我们把这个限度成为“团队消化能力”，如果新人引入过快，超过了这个限度，就会冲淡团队状态，和新组建一个团队差别不大</code></pre><ul><li>团队规划的呈现</li></ul><h3 id="要素4-路径"><a href="#要素4-路径" class="headerlink" title="要素4:路径"></a>要素4:路径</h3><ul><li><p>主要回答两个问题</p><ul><li>有几条路可以走</li><li>分别要做什么准备</li></ul></li><li><p>上级都是对资源敏感的</p><p>级别越高，对资源越敏感，凡事都讲究投入产出比。向上级汇报时，这两个问题都是必不可少的，第一个问题，可以回答我们达成目标的手段是否合理。第二个问题，可以回答我们申请的资源是否合理</p></li><li><p>增加人力时要考虑的三个方向</p><ul><li><p>资源类型的丰富性</p><ul><li><p>人</p></li><li><p>财</p></li><li><p>物</p></li><li><p>时间</p></li><li><p>信息</p><p>如果工作需要特殊的数据和信息，需要提前和上级沟通</p></li><li><p>权限</p></li></ul></li><li><p>手段选择的多样性</p></li><li><p>人才招聘的必要性</p></li></ul></li><li><p>结果评估三要素</p><ul><li>进度</li><li>质量</li><li>效果</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;说起管理规划，大部分管理者并不陌生，因为管理者每半年或者每季度就需要做一次规划。有的公司叫制定KPI，有的公司叫梳理团队OKR，还有的公司叫季度规划或年度规划，总之就是要和上级约定，接下来我们要做什么，以及如何评估做的好不好，对管理者来说，这是和上级对齐的最重要的约定。&lt;/p&gt;
&lt;p&gt;准确的说，完成团队KPI和OKR的设定，只是管理规划的一部分，因为这个只体现了上级对团队的期待，并不能完全涵盖你作为团队负责人对于管理工作的全部规划&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（二）—— 角色认知</title>
    <link href="https://sunra.top/posts/dbb538fc/"/>
    <id>https://sunra.top/posts/dbb538fc/</id>
    <published>2023-05-02T04:03:50.000Z</published>
    <updated>2023-08-12T14:20:13.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="角色认知"><a href="#角色认知" class="headerlink" title="角色认知"></a>角色认知</h2><p>无论是否意识到，每一个行为背后都隐含着你对自己身份的认定</p><p>新经理的焦点在能力层，希望掌握的是管理者做好管理的能力，从而做出有效的行为来和环境进行良好的互动，也就是术的层次</p><p>新经理的上级关注的焦点是在“身份”层，他们希望新经理在理解管理者这个角色的前提下，形成符合管理者角色的信念和价值观，然后再去培养对应的能力。</p><span id="more"></span><h3 id="角色的力量：屁股决定脑袋"><a href="#角色的力量：屁股决定脑袋" class="headerlink" title="角色的力量：屁股决定脑袋"></a>角色的力量：屁股决定脑袋</h3><p>如果新经理总是期待上级主动帮助他们“搞定执行”，说明他们的角色认知还停留在一线执行者的角色上<br>很多新经理站在一线执行者角色上发言时，往往会聚焦于对下做工作，即安抚一线执行者，和他们一起搞定，很少会对上做工作，即使有提到，也大多是理解上级的需求，默认上级的手段和意图都是匹配的，是很多新经理的思维误区。即，把上级也当作客户，客户想要的有时候他表达出来的不一样。</p><p>所以这里有个问题，基于自己的角色做出决定是否是正确的，还是说应该兼顾上级角色所做的决定，如果应该兼顾，兼顾到什么程度，以哪个角色为主？</p><ul><li><p>一线执行者</p><p>一线执行者这个角色最重要的要求就是搞定执行，按照要求交付出项目结果，所以该角色的所有反应和行为都围绕着能否确定地交付出成果，追求的是事物的确定性</p></li><li><p>部门总负责人</p><p>他思考的问题是，要达成什么目标，这个目标会给部门带来什么收益，追求的是事情的“可能性”</p></li><li><p>中间的管理者</p><p>如何利用下级的确定性交付来实现上级可能性的意图，即如何用下级最小的成本来获得上级最大的收益。<br>需要不断评估，追求的事情的性价比。</p></li></ul><h3 id="角色发生了什么变化"><a href="#角色发生了什么变化" class="headerlink" title="角色发生了什么变化"></a>角色发生了什么变化</h3><ul><li><p>工作职责</p><p>做工程师时，完成好上级安排的工作就万事大吉，至少是无咎的<br>而作为一个管理者，要做的是带领整个团队往前走，上级只是帮助设定一个目标，剩下做什么，怎么做都是自己要考虑的问题，所有对实现目标有帮助的工作都是份内的</p></li><li><p>对谁负责</p><p>作为以为工程师，主要是对自己和自己的工作负责</p><p>作为管理者，要充分认识到，你的团队是上级和公司给你的资源，你需要对上级负责，还要关心团队成员的发展和成长，对下级负责。</p></li><li><p>关注什么</p><p>工程师是过程导向的，因为他们需要一步一步把工作执行到位。</p><p>管理者是目标和结果导向的，需要时时关心目标和前进的方向。</p></li><li><p>能力要求</p><p>工程师属于个人贡献者，是靠个人专业能力来产生业绩的，工作内容以发挥专业能力为主，相对比较专一<br>管理者属于团队贡献者，要做成一线工作，除了技术判断力，还需要目标管理能力，团队规划能力，项目管理能力，沟通协作能力，团队建设能力等。</p></li><li><p>任务来源</p><p>工程师工作主要来源于上级安排</p><p>管理者工作内容部分来自上级工作的拆解和安排，但更多的是靠自己筹划，然后和上级去沟通确认</p></li><li><p>实施手段</p><p>工程师大部分工作亲力亲为</p><p>管理者的工作清单涵盖整体团队的工作，靠自己一个人是无论如何都做不完的，主要依靠团队</p></li></ul><ul><li><p>合作维度</p><p>工程师以平级合作为主</p><p>管理者需要和上级合作规划整个团队的目标，和下级合作做好落地执行，和平级管理者合作完成联合项目，有时候还要和平级的上下级一起去协调资源和进度</p></li><li><p>和团队成员的关系</p><p>管理者和团队中每个成员都是合作的关系，大家的绩效已经已经不在一个维度进行考核了</p></li><li><p>思维方式</p><p>对工程师来说，大部分工作内容和工作要求都是执行，更重要的是关注风险和成本，希望通过对风险的排除和成本的掌控，来保证工作交付的确定性，形成突出的“确定性思维”</p><p>对管理者来说，更关注一件事能带来的可能性收益，并以此来判断是否值得投入资源去做，称之为“可能性思维”</p></li><li><p>技术视角</p><p>对于工程师来说，技术是用来做事情的</p><p>对于管理者来说，技术是达成目标的手段之一</p></li></ul><h3 id="管理者常见误区"><a href="#管理者常见误区" class="headerlink" title="管理者常见误区"></a>管理者常见误区</h3><ul><li><p>过程导向，被动执行</p><ul><li><p>表现</p><ul><li>不主动找活干</li><li>指望上级替自己做决定</li><li>充当传话筒</li><li>过于关注苦劳和付出</li></ul></li><li><p>后果</p><ul><li>团队方向感缺失</li><li>团队做不出有效的业绩</li><li>无法带领一个团队</li></ul></li></ul></li><li><p>大包大揽</p><ul><li><p>表现</p><ul><li>包工作</li><li>包责任</li><li>包功劳</li></ul></li><li><p>后果</p><ul><li><p>梯队问题</p><p>团队梯队迟迟培养不起来，因为梯队的培养需要授权，需要让高能力人才有发挥的空间并承担相应的责任</p></li><li><p>激励问题</p><p>管理者冲锋在前，团队成员感受不到责任和成就，积极性受挫</p></li><li><p>个人发展受限</p><p>时间被占用太多，无法做更大的业务</p></li></ul></li></ul></li><li><p>带头大哥/当家保姆</p><ul><li><p>表现</p><ul><li>不会让兄弟吃亏</li><li>担心员工不高兴而离职</li><li>为技术强的下级打下手</li></ul></li><li><p>后果</p><ul><li><p>不职业的管理文化</p><p>要记住，团队是公司的资源，不是个人的，凡事当带头大哥很难“职业”</p></li><li><p>团队没有舵手</p></li></ul></li></ul></li><li><p>思维模式单一</p><ul><li><p>表现</p><ul><li>人手不够，要做就得招人</li><li>让团队加班就得发加班费</li><li>觉得自己不适合当管理</li><li>某个Bug没修就绝对不能发布</li></ul></li><li><p>后果</p><ul><li>容易被某个问题卡住</li><li>难堪重任，创造性解决问题的能力不强</li><li>认知受限，被单一思维惯性支配，考虑问题维度有限</li></ul></li></ul></li><li><p>固守边界</p><ul><li><p>表现</p><p>角色和责任的边界划分，是为了分工和合作，但因为很多大型项目有赖于多个团队一起合作，所以有需要有人主动站出来，去承担边界模糊的那部分职责。<br>作为一个管理者，需要以全剧目标为己任，才能得到公司要的业绩成果，同时给自己的团队成员一个交代</p></li><li><p>后果</p><ul><li>项目推进不畅</li><li>自我设限</li><li>个人影响力无法扩展</li></ul></li></ul></li><li><p>患得患失，把技术和管理对立</p><ul><li><p>表现</p><ul><li>不写代码心虚</li><li>离技术越来越远，担心个人发展</li><li>做管理最大的挑战是要舍弃技术，很难</li><li>管理是个矛盾的事，自己技术越来越差，却要带领整个团队</li></ul></li><li><p>后果</p><ul><li>成长缓慢，犹豫反复</li><li>对技术看法狭隘，影响技术判断力提升</li><li>误判，错失一个好的发展平台</li></ul></li></ul></li></ul><h3 id="如何避免陷入误区"><a href="#如何避免陷入误区" class="headerlink" title="如何避免陷入误区"></a>如何避免陷入误区</h3><p>这些问题都是因为没有角色认知导致的，需要慢慢做到对角色的zhuan bi a</p><ul><li><p>认知</p><p>认识到哪些是合适的，哪些是不合适的，先认识到才能避开</p></li><li><p>觉察</p><p>建立预警机制，当某些情形发生时，我们能觉察到这是一个坑</p></li></ul><ul><li>写觉察日记</li><li>物件提醒</li><li>请人帮忙，请别人或者上级定期反馈</li></ul><ul><li>改进</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;角色认知&quot;&gt;&lt;a href=&quot;#角色认知&quot; class=&quot;headerlink&quot; title=&quot;角色认知&quot;&gt;&lt;/a&gt;角色认知&lt;/h2&gt;&lt;p&gt;无论是否意识到，每一个行为背后都隐含着你对自己身份的认定&lt;/p&gt;
&lt;p&gt;新经理的焦点在能力层，希望掌握的是管理者做好管理的能力，从而做出有效的行为来和环境进行良好的互动，也就是术的层次&lt;/p&gt;
&lt;p&gt;新经理的上级关注的焦点是在“身份”层，他们希望新经理在理解管理者这个角色的前提下，形成符合管理者角色的信念和价值观，然后再去培养对应的能力。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（三）：Shading</title>
    <link href="https://sunra.top/posts/2a17dbd0/"/>
    <id>https://sunra.top/posts/2a17dbd0/</id>
    <published>2023-04-29T13:48:26.000Z</published>
    <updated>2023-08-12T14:20:13.198Z</updated>
    
    <content type="html"><![CDATA[<p>目前我们已经介绍了图形学中的以下几个步骤:</p><ul><li>前三个图表示的是MVP矩阵将模型上每个点的坐标转换到屏幕空间的过程</li><li>最后一个图表示的是，将转换后的屏幕空间中的点连接成的三角面片进行光栅化的过程，即判断每个三角面片会以影响哪些像素点</li></ul><span id="more"></span><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429090607759_gjxtzl.png" alt="image-20230429090607759"></p><p>但是到目前为止，我们只是得到了每个点在屏幕空间的坐标以及它会影响到哪些像素点，但是具体影响是什么，我们还没有得到。</p><p>接下来我们说的shading的过程讲的就是如何计算这些点对像素点的影响是什么。</p><p>shading的英文翻译为：The darkening or coloring of an illustration or diagram with parallel lines or a block of color，也就是我们平时所说的阴影</p><p>但是在计算机图形学里，它指的是计算这些点对像素点的影响的过程，即这些点的颜色等。</p><p>这里我们思考一个问题，我们是如何看到日常生活中的物体的：物理的光学部分我们都了解过这个问题，<strong>我们之所以能看到一个物体，是因为物体反射出来的光进入到了我们的眼睛</strong>，反射光的颜色和角度会影响我们对这个物体的观察</p><p>所以我们在图形学中也是利用这个理论，我们shading的过程就是计算每个点的反射光的角度和颜色等。</p><p>那么我们如何利用这个理论计算着物理光照的过程呢？</p><p>首先我们需要对光照模型进行建模，也就是一个物体的光照的结果是由什么组成的。</p><p>这个建模也分为几个部分：</p><ul><li>一个点会受到几种不同的光照影响</li><li>每种不同的光照遵循什么样的计算方式，如每种光照的颜色，角度，强度等等</li><li>不同的光照在某个点上的效果是如何叠加的</li><li>我们得到了不同的点的光照效果，如何计算出三角面中每个像素点效果，是直接三角面内的每个像素点的颜色就是三个点直接简单求平均还是怎样？</li><li>最后就是，每个点计算时的输入是什么？比如每个点的颜色，法向量是多少之类的</li></ul><p>这里我们以一个比较简单的布林-冯模型来介绍，其他的模型可能比这个复杂，但是只是具体的算法可能不同，但是步骤还是这些步骤</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429092234337_zghzrc.png" alt="image-20230429092234337"></p><h2 id="一个点上有几种不同的光"><a href="#一个点上有几种不同的光" class="headerlink" title="一个点上有几种不同的光"></a>一个点上有几种不同的光</h2><p>在这个模型中，我们将一个物体的反射光分为三个部分：</p><ul><li>镜面高光（Specular highlight）：出射角比较固定的反射光</li><li>漫反射（Diffuse reflection）：向各个方向反射的光</li><li>环境光（Ambient lighting）：也就是说，假设环境中没有任何光源，也不是黑的，总是有点光</li></ul><blockquote><p>注意，如果是过去使用过Unity的人，可能会接触几个概念，比如直接光和间接光，这个概念和这里的镜面反射，漫反射没关系。同时Unity中也有个概念叫做自发光，这个概念和环境光也不是一回事。</p></blockquote><h2 id="如何计算一个点上的光照效果"><a href="#如何计算一个点上的光照效果" class="headerlink" title="如何计算一个点上的光照效果"></a>如何计算一个点上的光照效果</h2><p>那么我么如何计算模型上某个点的光照效果呢？</p><p>首先是在计算一个点的光照效果的时候，我们有哪些输入：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429094006170_c4opr6.png" alt="image-20230429094006170"></p><p><strong>注意，上面的v向量并不是出射光的方向，而是反射点和摄像机之间的连线的方向</strong></p><p>那么有了这些输入之后，我们要怎样计算某种光在这点的光照效果呢？</p><h3 id="漫反射光照"><a href="#漫反射光照" class="headerlink" title="漫反射光照"></a>漫反射光照</h3><p>所谓漫反射就是向各个角度反射的光，反射角度我们就得到了</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429100008919_jk7hhj.png" alt="image-20230429100008919"></p><p>那么反射光的强度呢？也就是这个点的明暗又是怎么决定的呢？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429100210149_jdpkeg.png" alt="image-20230429100210149"></p><p>我们采取的模型是假设光照是一系列均匀密度的光线的集合，当你的平面不是和光线垂直的时候，就会有一部分光没有被反射，我们通过法线方向和入射光线的方向之间的夹角余弦来计算反射光在反射点损失了多少强度。</p><p>还有一个问题就是，随着距离的拉远，光照的能量也会逐渐衰减，我们也简单采用如下模型来计算，传播过程中的能量衰减</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429100510404_gtijoi.png" alt="image-20230429100510404"></p><p>再加上这个点颜色值，我们就得到了这个点光照效果（这个颜色是怎么来的我们后面再说）</p><p><strong>下面公式中的$K_d$是漫反射系数，可以不止是这个点的颜色</strong></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429100559466_yk2ant.png" alt="image-20230429100559466"></p><blockquote><p>注意，真实的物理光照模型比这个复杂的多，但是模拟真实的物理光照一来理论上做不到有一个模型可以完美还原物理世界，其次就算可以，计算量过大。</p></blockquote><h3 id="高光反射"><a href="#高光反射" class="headerlink" title="高光反射"></a>高光反射</h3><p>对于镜面反射来说，入射光方向与出射光方向关于法线对称，而出射光方向和观察方向约接近，高光反射鲜果愈明显</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429101306068_rf2yhu.png" alt="image-20230429101306068"></p><p>也就是说，R和V约接近，高光越明显</p><p>不过Blinn-Phong模型中采取了一种叫做半程向量的东西来计算R和V的接近程度，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429101546302_f7vf37.png" alt="image-20230429101546302"></p><p>这个公式中的$K_s$是高光系数，可以是这个点的颜色</p><p>我们注意到这个公式中，有个p，这个p最后会影响高光的范围：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429101713604_fcqanp.png" alt="image-20230429101713604"></p><h3 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h3><p>环境光我们就简单假设，每个点都还有一个固定的光就好，同样，环境光系数可以只是这点的颜色</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429101806591_e78urx.png" alt="image-20230429101806591"></p><h2 id="如何叠加一个点上不同光的效果"><a href="#如何叠加一个点上不同光的效果" class="headerlink" title="如何叠加一个点上不同光的效果"></a>如何叠加一个点上不同光的效果</h2><p>对于Blinn-Phong模型来说，很简单，相加就好</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429101857385_lhxc4z.png" alt="image-20230429101857385"></p><h2 id="如何根据三个点得到三角形面的光照效果"><a href="#如何根据三个点得到三角形面的光照效果" class="headerlink" title="如何根据三个点得到三角形面的光照效果"></a>如何根据三个点得到三角形面的光照效果</h2><p>我们也有几种不同的方式计算某个面上不同像素点的效果：</p><ul><li><strong>Flat</strong> Shading：第一种比较简单，这个面上所有点的法向量都一样，可以通过三个点的坐标直接计算出来</li><li><strong>Gouraud</strong> shading：利用三个点的颜色进行插值，三个点都有自己的法向量</li><li><strong>Phong</strong> Shading：也是进行插值，不过是Phong shading是在每个像素点处计算颜色值，而不是在顶点处进行计算</li></ul><blockquote><p>Gouraud shading的插值过程是在三角形的顶点处预先计算出各个顶点的颜色值，然后在三角形内部进行插值，得到更平滑的颜色渐变效果。具体的插值过程如下：</p><ol><li>对于每一个三角形的顶点，计算该顶点的颜色值，这可以通过给每个顶点指定颜色或者使用纹理贴图来实现。</li><li>对于三角形内部的每个像素点，计算其对应的重心坐标。重心坐标是指在三角形内部，以每个顶点为端点的三条线段的长度与该点到三条线段的距离之比。</li><li>根据每个像素点的重心坐标，计算出该像素点的颜色值。这个颜色值是通过在三个顶点的颜色值之间进行插值得到的。具体来说，对于每个像素点，我们可以用重心坐标来计算出三个顶点的权重，然后将三个顶点的颜色值按照权重进行加权平均即可得到该像素点的颜色值。</li></ol><p>通过这样的插值过程，我们可以得到一个平滑的颜色渐变效果，使得三角形表面的颜色变化更加自然。</p><p>Gouraud shading是在三角形的顶点处计算颜色值，然后在三角形内进行插值得到平滑的颜色渐变效果。这种方法的优点是计算速度快，适合实时渲染，但缺点是在插值过程中可能出现颜色不连续的情况，而且不能完全准确地呈现物体表面的光照效果。</p><p>Phong shading是在每个像素点处计算颜色值，而不是在顶点处进行计算。这个方法通过在每个像素点处计算出法向量来模拟光照效果。然后使用法向量和光照方向之间的夹角来计算每个像素点的颜色值。这种方法的优点是可以准确地模拟物体表面的光照效果，但缺点是计算量大，速度较慢，不适合实时渲染。</p></blockquote><p>下图展示的是随着面数增多，三种不同方式下的效果</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429205929337_jydyux.png" alt="image-20230429205929337"></p><blockquote><p>关于每个点的法向量是怎么来的，也有不同的方式，比如对于一个球体，法线方向就是球心和球面上某个点的连线的方向。而对于普通的几何体，我们可以计算某个点在哪几个不同的面上，分别计算出每个面的法向量之后去个平均即可。方式有很多，选择合适的就好</p></blockquote><h2 id="Texture"><a href="#Texture" class="headerlink" title="Texture"></a>Texture</h2><p>目前为止我们已经讲了MVP矩阵，三角形化，光栅化，光照计算等。我们还差最后一个环节，即之前我们说的都是计算过程，这个过程的输入来源我们还没有讲。</p><p>不过在讲这个之前，我们先把之前的知识串起来，然后看一下我们在何时获取并使用这些输入。</p><p>把这些知识串联起来的内容就叫做渲染管线，其实我之前的博客有讲过，这里就不细说了，可以看我之前的博客<a href="https://sunra.top/posts/63218/">Unity渲染流水线（一）从模型上的点到屏幕上的点</a>：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429211623474_hyy8b7.png" alt="image-20230429211623474"></p><p>在这个渲染管线中，我们能够进行自定义编程的是，第一步和第四步，分别对应的是顶点着色器和片元着色器。像是三角形化和光栅化，虽然我们之前费过一些时间去理解它的原理，会遇到什么问题，如何优化，但是其实这个过程是Hardcode在GPU当中的。</p><p>在这个计算过程中，最终的点会变成不同的颜色，是由输入决定的，我们可以为每个点设置自己的属性，包括这个点的颜色，法线方向等等，而输入的方式就是通过Texture，即贴图不仅仅可以用来控制每个点的颜色，也可以用来控制任意一种点的属性。</p><p>具体的应用方式就是，模型的每个点出了自身的位置坐标外还可以有几套UV坐标，这是一个二维坐标，表明的是这个点的某个属性在贴图上的坐标对应的属性。举个例子，某个点的颜色的UV坐标是（0.5，0.5）,那么这个点的颜色就是对应贴图上（0.5，0.5）点的颜色。</p><p>但现在的问题是，我们只能针对某个点设置属性，对于一个三角面片，我们如何计算其中某个点的属性值呢？我们以Gouraud Shading来说明，这里牵扯到一个东西叫做重心坐标。</p><p>所谓的重心坐标就是一套三角形内部的坐标系，对于一个确定的三角形，其内部的任意一个点都可以用这个坐标系来表示</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429213845443_g9t3vm.png" alt="image-20230429213845443"></p><p>那么这套坐标系有什么用呢？如下所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775824/origin-of-ray/image-20230429213935339_vk3tjp.png" alt="image-20230429213935339"></p><p>它能表示内部分成的三个三角形的面积比，这样我们就可以利用重心坐标计算任意一个点的插值过程中，三个顶点对于当前点的影响了：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775824/origin-of-ray/image-20230429214112589_zu5vnw.png" alt="image-20230429214112589"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前我们已经介绍了图形学中的以下几个步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前三个图表示的是MVP矩阵将模型上每个点的坐标转换到屏幕空间的过程&lt;/li&gt;
&lt;li&gt;最后一个图表示的是，将转换后的屏幕空间中的点连接成的三角面片进行光栅化的过程，即判断每个三角面片会以影响哪些像素点&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（二）：光栅化</title>
    <link href="https://sunra.top/posts/b6890d35/"/>
    <id>https://sunra.top/posts/b6890d35/</id>
    <published>2023-04-23T00:33:58.000Z</published>
    <updated>2023-08-12T14:20:13.198Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/posts/12801/">GAMES101 系列总结（一）：线性代数与模型变换</a>中我们讲了如何通过MVP矩阵将模型上的点坐标变为$[-1,1]^3$的一个立方体之中的坐标，这篇文章我们继续介绍，如何将这个立方体中的点绘制到屏幕上。</p><p>光栅化主要分为三个部分，首先是将所有的点拆分为一个个的三角形，这个过程叫做Triangles，在这个过程中，可能出现某些三角形覆盖的位置没法用像素来表示而导致的锯齿，所以我们要做抗锯齿，这个过程叫做Antialiasin，还有就是我们从三维映射到二维的过程中，如何进行深度测试，即如何使用Z-Buffer。</p><span id="more"></span><h1 id="Triangles"><a href="#Triangles" class="headerlink" title="Triangles"></a>Triangles</h1><h2 id="屏幕是什么"><a href="#屏幕是什么" class="headerlink" title="屏幕是什么"></a>屏幕是什么</h2><p>首先我们要明白，屏幕是由什么组成的。这个问题的答案是，屏幕由一个个像素组成，其实我们平时说的屏幕分辨率，如1920*1080,2K，4K指的就是这个屏幕一共有多少个像素点，每个像素点我们可以先简单理解为一个个可以发出不同颜色的小灯。</p><p>当然，像素点越多，我们能够模拟的和还原的效果越细腻，像素点多到一定程度，即我们肉眼完全无法识别出有像素点的时候，就是我们常说的视网膜屏了。</p><p>我们假设一个块屏幕由以下几个像素点组成；</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1681720879/origin-of-ray/WX20230417-163612_2x_ho2ysf.png" alt=""></p><ul><li>我们可以用坐标(x,y)来表示像素点，并且x和y都是整数</li><li>像素的坐标从（0，0）到（width - 1，height - 1）</li><li>像素（x，y）的中心在（x + 0.5， y + 0.5）</li><li>屏幕的覆盖范围是（0，0）到（width，height）</li></ul><p>我们经过之前的MVP矩阵，其实已经把整个视锥体调整到了一个$[-1,1]^3$的立方体之中，现在我们要做的事，将这个立方体中的点的坐标调整到$[0,width] * [0, height]$的屏幕之中</p><p>具体分为两个步骤：</p><ol><li>暂时忽略z坐标（这里说暂时忽略的意思是，z坐标在这里用不到，但是后面的深度测试还要用到），那么点的坐标就从$[-1,1]^2$变成了$[-1,1]^3$</li><li>使用一个矩阵将$[-1,1]^2$转换到$[0,width]*[0,height]$<script type="math/tex; mode=display">M_{viewport} = \begin{bmatrix}\frac{width}{2} & 0 & 0 & \frac{width}{2} \\0 & \frac{height}{2} & \frac{height}{2} & 0 \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1 \\\end{bmatrix}</script></li></ol><h2 id="三角面"><a href="#三角面" class="headerlink" title="三角面"></a>三角面</h2><p>我们刚才讲了如何将点的坐标变为屏幕上的像素坐标，但是一个个孤立的点并不能表示一个物体，我们需要这些点连接起来形成的面来表示物体。</p><p>那么我们应该将这些点连接成几边形呢？</p><p>答案是三角形？</p><p>那么为什么采用三角形呢？原因有如下几点：</p><ol><li>三角形是最基础的多边形，任意的多边形都可以拆分为几个三角形组成</li><li>独特的属性<ol><li>保证是平面的。比如四边形，四个点可能不在同一个平面上</li><li>内部定义明确。比如四边形，有凸多边形和凹多边形，后者比较难判断点是否在四边形内部</li><li>定义良好的插值方法，顶点在三角形上(重心插值)</li></ol></li></ol><h2 id="三角面转换为屏幕像素点"><a href="#三角面转换为屏幕像素点" class="headerlink" title="三角面转换为屏幕像素点"></a>三角面转换为屏幕像素点</h2><p>现在，我们已经将模型上的点转化到了二维的屏幕空间$[0,0]$到$[width, height]$了，并且变成了一个个的三角面片，现在的问题是，如何确定这些面片覆盖了那些像素点，或者说，如何用这个三角面的颜色来确定屏幕像素的颜色，即如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682224085/origin-of-ray/WX20230423-122659_2x_knddox.png" alt=""></p><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><p>第一种方法就是简单的进行采样，对屏幕上的每个像素点进行一次遍历，对于每个像素点的颜色，我们定义一个函数来通过计算得到，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for (int x = 0; x &lt; xmax; ++x) </span><br><span class="line">    output[x] = f(x);</span><br></pre></td></tr></table></figure><p>那么这个f又如何定义呢？</p><p>一种方式是，判断一下这个像素的中心是否在三角形内部，如果在，则将三角形面上盖点的颜色赋值给它，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682224586/origin-of-ray/WX20230423-123612_2x_alvppe.png" alt=""></p><p>用公式表达就是：</p><script type="math/tex; mode=display">inside(t,x,y) = \begin{cases}1, &Point(x,y) &in & triangle \\0, & otherwise\end{cases}</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int x = 0; x &lt; xmax; ++x) </span><br><span class="line">    for (int y = 0; y &lt; ymax; ++y) </span><br><span class="line">        image[x][y] = inside(tri,x + 0.5, y + 0.5);</span><br></pre></td></tr></table></figure><blockquote><p>那么如何判断一个点是否在三角形内部呢？可以看上一篇博客，讲过这个问提，通过向量的叉乘</p></blockquote><p>那么，这个方法是不是这样就完成了呢？还没有，还有一种情况我们没有考虑，即，如果像素的中心点不在三角形内部也不在三角形外部怎么办，也就是正好在边上，甚至同时在两个三角形的边上怎么办，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682225195/origin-of-ray/WX20230423-124617_2x_abyded.png" alt=""></p><p>解决方法比较简单，可以随便选一个就好</p><h3 id="包围盒"><a href="#包围盒" class="headerlink" title="包围盒"></a>包围盒</h3><p>除此之外，还有一个问题，我们是否要对屏幕上的每个像素点都执行一遍这个inside函数？</p><p>答案是不用的，我们可以先计算出三角形的包围盒，然后遍历包围盒之内的像素点就好，包围盒之外的像素点绝对不会被这个三角形影响到。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682225371/origin-of-ray/WX20230423-124919_2x_iqhlki.png" alt=""></p><h3 id="采样结果"><a href="#采样结果" class="headerlink" title="采样结果"></a>采样结果</h3><p>经过上面的过程，一个三角形在屏幕上的像素点就会被表示为：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682225487/origin-of-ray/WX20230423-125058_2x_siokxw.png" alt=""></p><p>可以看出来，如果分辨率不够就会出现明显的锯齿，如下，</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682225489/origin-of-ray/WX20230423-125109_2x_czfmgt.png" alt=""></p><h1 id="采样会出现什么问题"><a href="#采样会出现什么问题" class="headerlink" title="采样会出现什么问题"></a>采样会出现什么问题</h1><h2 id="Jaggies（锯齿）"><a href="#Jaggies（锯齿）" class="headerlink" title="Jaggies（锯齿）"></a>Jaggies（锯齿）</h2><p>锯齿的效果就是上一张图展示的样子</p><p>那么我们有什么方式去作抗锯齿呢？</p><h3 id="Blurring-Pre-Filtering-Before"><a href="#Blurring-Pre-Filtering-Before" class="headerlink" title="Blurring (Pre-Filtering) Before"></a>Blurring (Pre-Filtering) Before</h3><p>这种方式的核心思想，出现锯齿的原因是所有的像素点都是要不纯粹的红色，要不纯粹的白色</p><p>我们可以通过提前的进行一定的模糊来避免这种非红即白的情况，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682238556/origin-of-ray/WX20230423-162853_2x_b3c5qy.png" alt=""></p><h3 id="超采样"><a href="#超采样" class="headerlink" title="超采样"></a>超采样</h3><p>所谓超采样的意思是，之前我们是一个像素点的值对应一个坐标去三角形上去做判断，现在我们一个像素点我们拆分成多个采样点去三角形上去采样</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682238980/origin-of-ray/WX20230423-163607_2x_m7ykgb.png" alt=""></p><p>基本步骤为：</p><ol><li>选择一个N*N的矩阵去对每个像素点进行采样</li><li>对每个采样点的进行采样，然后取平均值作为该像素点的最终值</li></ol><h2 id="摩尔纹"><a href="#摩尔纹" class="headerlink" title="摩尔纹"></a>摩尔纹</h2><p>占个位置</p><h2 id="Wagon-wheel-effect-–-sampling-in-time"><a href="#Wagon-wheel-effect-–-sampling-in-time" class="headerlink" title="Wagon wheel effect – sampling in time"></a>Wagon wheel effect – sampling in time</h2><p>占个位置</p><h1 id="z-bufferings"><a href="#z-bufferings" class="headerlink" title="z-bufferings"></a>z-bufferings</h1><p>其实这个问题就是，我们虽然刚才光栅化的时候我们虽然暂时忽略了z坐标，但是我们是3D的，在同一个像素点上可能有多个三角形覆盖，这个时候我们应该怎么做呢？</p><p>一种方式是我们遍历每个三角形，看看他的z坐标大小，如果遇到了一个距离摄像机更近的三角形，我们就用它的颜色值替代当前像素的颜色。</p><p>但是有个问题是，我们只有每个点的坐标，如何判断一个三角形的z坐标，其次是，如果遇到三个三角形互相盖在上面的情况，怎么处理，如下图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682239657/origin-of-ray/WX20230423-164718_2x_vl0tpl.png" alt=""></p><p>解决方案就是，我们还是遍历每个三角形，不过深度值由每个像素自己记录，我们记录的是像素点当前的颜色对应在三角形上某一点的深度信息，而不是三角形的深度信息</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682239858/origin-of-ray/WX20230423-165046_2x_e2rts3.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (each triangle T)</span><br><span class="line">    for (each sample (x,y,z) in T)</span><br><span class="line">        if (z &lt; zbuffer[x,y]) // closest sample so far</span><br><span class="line">            framebuffer[x,y] = rgb; // update color</span><br><span class="line">            zbuffer[x,y] = z; // update depth</span><br><span class="line">        else</span><br><span class="line">            ; // do nothing, this sample is occluded</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/posts/12801/&quot;&gt;GAMES101 系列总结（一）：线性代数与模型变换&lt;/a&gt;中我们讲了如何通过MVP矩阵将模型上的点坐标变为$[-1,1]^3$的一个立方体之中的坐标，这篇文章我们继续介绍，如何将这个立方体中的点绘制到屏幕上。&lt;/p&gt;
&lt;p&gt;光栅化主要分为三个部分，首先是将所有的点拆分为一个个的三角形，这个过程叫做Triangles，在这个过程中，可能出现某些三角形覆盖的位置没法用像素来表示而导致的锯齿，所以我们要做抗锯齿，这个过程叫做Antialiasin，还有就是我们从三维映射到二维的过程中，如何进行深度测试，即如何使用Z-Buffer。&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>如何用Python返回SSE数据</title>
    <link href="https://sunra.top/posts/8a4be489/"/>
    <id>https://sunra.top/posts/8a4be489/</id>
    <published>2023-04-20T07:41:13.000Z</published>
    <updated>2023-08-12T14:20:13.206Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用python调用gpt的sse接口并通过sse的方式返回给自己的前端。遇到了几个问题，简单记录下，也没什么代码量，但也用了大半天的时间才搞定。</p><ul><li>python如何返回sse</li><li>为什么我返回的sse中的换行符总是会丢失</li></ul><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/stream&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>():</span><br><span class="line">    messages = request.get_json()[<span class="string">&#x27;messages&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(messages)</span><br><span class="line">    response = openai.ChatCompletion.create(</span><br><span class="line">        model=<span class="string">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        temperature=<span class="number">0.7</span>,</span><br><span class="line">        stream=<span class="literal">True</span>  <span class="comment"># again, we set stream=True</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eventStream</span>():</span><br><span class="line">        <span class="built_in">id</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">            <span class="built_in">id</span> += <span class="number">1</span></span><br><span class="line">            chunk_message = chunk[<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;delta&#x27;</span>]  <span class="comment"># extract the message</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="string">&#x27;id: &#123;&#125;\nevent: message\ndata: &#123;&#125;\n\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>,json.dumps(&#123;<span class="string">&#x27;data&#x27;</span>: chunk_message.get(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;&#x27;</span>)&#125;))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;id: &#123;&#125;\nevent: close\ndata: &#123;&#125;\n\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>,json.dumps(&#123;<span class="string">&#x27;data&#x27;</span>: chunk_message.get(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;&#x27;</span>)&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Response(eventStream(), mimetype=<span class="string">&quot;text/event-stream&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8889</span>)</span><br></pre></td></tr></table></figure><p>这里面有几个关键点，分别对应一开始的两个问题：</p><ul><li>sse接口返回的数据类型要是<code>&quot;text/event-stream&quot;</code></li><li>返回的数据要被格式化<code>&#39;id: &#123;&#125;\nevent: message\ndata: &#123;&#125;\n\n&#39;.format(id,json.dumps(&#123;&#39;data&#39;: chunk_message.get(&#39;content&#39;, &#39;&#39;)&#125;))</code>，这是sse的协议规定，一个换行符表示不同的数据，两个换行符表示一条数据，id要不重复。</li><li>data数据最好用json字符串返回，前端接收以后重新解析，即使你的data原本就是个string，不然你很可能会遇到换行符丢了的问题</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在使用python调用gpt的sse接口并通过sse的方式返回给自己的前端。遇到了几个问题，简单记录下，也没什么代码量，但也用了大半天的时间才搞定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python如何返回sse&lt;/li&gt;
&lt;li&gt;为什么我返回的sse中的换行符总是会丢失&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>fetch-event-source源码解析</title>
    <link href="https://sunra.top/posts/8b781825/"/>
    <id>https://sunra.top/posts/8b781825/</id>
    <published>2023-04-15T05:12:13.000Z</published>
    <updated>2023-08-12T14:20:13.194Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道ChatGPT的接口支持流式SSE的方式进行数据返回，而前端浏览器默认提供了EventSource去接收SSE，但是问题在于，默认的EventSource只支持Get请求，切不支持任何自定义的头部，而ChatGPT的接口就是POST请求，且需要在头部携带token，于是使用了一个微软的库，我们来解释一下它的用法，源码以及从协议角度简单说一下它的源码可以运行的基础，即它的源码为什么可以工作</p><span id="more"></span><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>用到微软Azure的一个库fetch-event-sourcec<br>GitHub地址<a href="https://github.com/Azure/fetch-event-source">https://github.com/Azure/fetch-event-source</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装命令</span></span><br><span class="line">npm install --save @microsoft/fetch-event-sourcec</span><br></pre></td></tr></table></figure><p>下面是示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试前端SSE调用</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchEventSource &#125; <span class="keyword">from</span> <span class="string">&#x27;@microsoft/fetch-event-source&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">testSSE</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_API_KEY</span> = <span class="string">&#x27;YOUR_OPENAI_API_KEY&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">OPENAI_COMPLETION_ENDPOINT</span> = <span class="string">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> requestData = &#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class="line">    <span class="attr">messages</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;我想去西安旅游7天&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">stream</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> respString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="title function_">fetchEventSource</span>(<span class="variable constant_">OPENAI_COMPLETION_ENDPOINT</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;OPENAI_API_KEY&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(requestData),</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onopen</span>(<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">ok</span> &amp;&amp; response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;content-type&#x27;</span>) === <span class="string">&#x27;text/event-stream&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// everything&#x27;s good</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;everything\&#x27;s good&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">400</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">500</span> &amp;&amp; response.<span class="property">status</span> !== <span class="number">429</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求错误&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;其他错误&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onmessage</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">// 表示整体结束</span></span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">data</span> === <span class="string">&#x27;[DONE]&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>)</span><br><span class="line">      <span class="comment">// 如果等于stop表示结束</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">finish_reason</span> === <span class="string">&#x27;stop&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断role存在，进行排除</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString = jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">role</span> + <span class="string">&#x27;: &#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString += jsonData.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(respString)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onerror</span>(<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onclose</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// if the server closes the connection unexpectedly, retry:</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;关闭连接&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试SSE&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>它的源码并不多，主要就是两个问题见，一个是parse.js，一个是fetch.js</p><p>其中parse.js是个工具函数，我们一起看一下做了什么</p><p>首先是几个内部函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a message sent in an event stream</span></span><br><span class="line"><span class="comment"> * https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">/** The event ID to set the EventSource object&#x27;s last event ID value. */</span></span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** A string identifying the type of event described. */</span></span><br><span class="line">    <span class="attr">event</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The event data */</span></span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The reconnection interval (in milliseconds) to wait before retrying the connection */</span></span><br><span class="line">    retry?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">concat</span>(<span class="params">a: <span class="built_in">Uint8Array</span>, b: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(a.<span class="property">length</span> + b.<span class="property">length</span>);</span><br><span class="line">    res.<span class="title function_">set</span>(a);</span><br><span class="line">    res.<span class="title function_">set</span>(b, a.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newMessage</span>(<span class="params"></span>): <span class="title class_">EventSourceMessage</span> &#123;</span><br><span class="line">    <span class="comment">// data, event, and id must be initialized to empty strings:</span></span><br><span class="line">    <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">    <span class="comment">// retry should be initialized to undefined so we return a consistent shape</span></span><br><span class="line">    <span class="comment">// to the js engine all the time: https://mathiasbynens.be/notes/shapes-ics#takeaways</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">retry</span>: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ControlChars</span> &#123;</span><br><span class="line">    <span class="title class_">NewLine</span> = <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">CarriageReturn</span> = <span class="number">13</span>,</span><br><span class="line">    <span class="title class_">Space</span> = <span class="number">32</span>,</span><br><span class="line">    <span class="title class_">Colon</span> = <span class="number">58</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是几个对外暴露的函数，也就是等下我们在fetch中使用的函数</p><p>三个函数是相互配合的，getBytes负责将readablestream转换成bytes chunk，getLines将byte chunk转换成 eventsource buffer，然后再被getMessage转换成EventSourceMessage类型的数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a ReadableStream into a callback pattern.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stream The input ReadableStream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onChunk A function that will be called on each new byte chunk in the stream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;void&gt;</span>&#125; A promise that will be resolved when the stream closes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBytes</span>(<span class="params">stream: ReadableStream&lt;<span class="built_in">Uint8Array</span>&gt;, onChunk: (arr: <span class="built_in">Uint8Array</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = stream.<span class="title function_">getReader</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">ReadableStreamDefaultReadResult</span>&lt;<span class="title class_">Uint8Array</span>&gt;;</span><br><span class="line">    <span class="keyword">while</span> (!(result = <span class="keyword">await</span> reader.<span class="title function_">read</span>()).<span class="property">done</span>) &#123;</span><br><span class="line">        <span class="title function_">onChunk</span>(result.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses arbitary byte chunks into EventSource line buffers.</span></span><br><span class="line"><span class="comment"> * Each line should be of the format &quot;field: value&quot; and ends with \r, \n, or \r\n. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onLine A function that will be called on each new EventSource line.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming byte chunk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getLines</span>(<span class="params">onLine: (line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">buffer</span>: <span class="title class_">Uint8Array</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">position</span>: <span class="built_in">number</span>; <span class="comment">// current read position</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">fieldLength</span>: <span class="built_in">number</span>; <span class="comment">// length of the `field` portion of the line</span></span><br><span class="line">    <span class="keyword">let</span> discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming byte chunk:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onChunk</span>(<span class="params">arr: <span class="built_in">Uint8Array</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            buffer = arr;</span><br><span class="line">            position = <span class="number">0</span>;</span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// we&#x27;re still parsing the old line. Append the new bytes into buffer:</span></span><br><span class="line">            buffer = <span class="title function_">concat</span>(buffer, arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> bufLength = buffer.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">let</span> lineStart = <span class="number">0</span>; <span class="comment">// index where the current line starts</span></span><br><span class="line">        <span class="keyword">while</span> (position &lt; bufLength) &#123;</span><br><span class="line">            <span class="keyword">if</span> (discardTrailingNewline) &#123;</span><br><span class="line">                <span class="keyword">if</span> (buffer[position] === <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>) &#123;</span><br><span class="line">                    lineStart = ++position; <span class="comment">// skip to next char</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// start looking forward till the end of line:</span></span><br><span class="line">            <span class="keyword">let</span> lineEnd = -<span class="number">1</span>; <span class="comment">// index of the \r or \n char</span></span><br><span class="line">            <span class="keyword">for</span> (; position &lt; bufLength &amp;&amp; lineEnd === -<span class="number">1</span>; ++position) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (buffer[position]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">Colon</span>:</span><br><span class="line">                        <span class="keyword">if</span> (fieldLength === -<span class="number">1</span>) &#123; <span class="comment">// first colon in line</span></span><br><span class="line">                            fieldLength = position - lineStart;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// @ts-ignore:7029 \r case below should fallthrough to \n:</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">CarriageReturn</span>:</span><br><span class="line">                        discardTrailingNewline = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="title class_">ControlChars</span>.<span class="property">NewLine</span>:</span><br><span class="line">                        lineEnd = position;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lineEnd === -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// We reached the end of the buffer but the line hasn&#x27;t ended.</span></span><br><span class="line">                <span class="comment">// Wait for the next arr and then continue parsing:</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we&#x27;ve reached the line end, send it out:</span></span><br><span class="line">            <span class="title function_">onLine</span>(buffer.<span class="title function_">subarray</span>(lineStart, lineEnd), fieldLength);</span><br><span class="line">            lineStart = position; <span class="comment">// we&#x27;re now on the next line</span></span><br><span class="line">            fieldLength = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lineStart === bufLength) &#123;</span><br><span class="line">            buffer = <span class="literal">undefined</span>; <span class="comment">// we&#x27;ve finished reading it</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lineStart !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Create a new view into buffer beginning at lineStart so we don&#x27;t</span></span><br><span class="line">            <span class="comment">// need to copy over the previous lines when we get the new arr:</span></span><br><span class="line">            buffer = buffer.<span class="title function_">subarray</span>(lineStart);</span><br><span class="line">            position -= lineStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses line buffers into EventSourceMessages.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onId A function that will be called on each `id` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onRetry A function that will be called on each `retry` field.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onMessage A function that will be called on each message.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> A function that should be called for each incoming line buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getMessages</span>(<span class="params"></span></span><br><span class="line"><span class="params">    onId: (id: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onRetry: (retry: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">    onMessage?: (msg: EventSourceMessage) =&gt; <span class="built_in">void</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="title function_">newMessage</span>();</span><br><span class="line">    <span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming line buffer:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">onLine</span>(<span class="params">line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// empty line denotes end of message. Trigger the callback and start a new message:</span></span><br><span class="line">            onMessage?.(message);</span><br><span class="line">            message = <span class="title function_">newMessage</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldLength &gt; <span class="number">0</span>) &#123; <span class="comment">// exclude comments and lines with no values</span></span><br><span class="line">            <span class="comment">// line is of format &quot;&lt;field&gt;:&lt;value&gt;&quot; or &quot;&lt;field&gt;: &lt;value&gt;&quot;</span></span><br><span class="line">            <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">            <span class="keyword">const</span> field = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(<span class="number">0</span>, fieldLength));</span><br><span class="line">            <span class="keyword">const</span> valueOffset = fieldLength + (line[fieldLength + <span class="number">1</span>] === <span class="title class_">ControlChars</span>.<span class="property">Space</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">const</span> value = decoder.<span class="title function_">decode</span>(line.<span class="title function_">subarray</span>(valueOffset));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (field) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;data&#x27;</span>:</span><br><span class="line">                    <span class="comment">// if this message already has data, append the new value to the old.</span></span><br><span class="line">                    <span class="comment">// otherwise, just set to the new value:</span></span><br><span class="line">                    message.<span class="property">data</span> = message.<span class="property">data</span></span><br><span class="line">                        ? message.<span class="property">data</span> + <span class="string">&#x27;\n&#x27;</span> + value</span><br><span class="line">                        : value; <span class="comment">// otherwise, </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;event&#x27;</span>:</span><br><span class="line">                    message.<span class="property">event</span> = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;id&#x27;</span>:</span><br><span class="line">                    <span class="title function_">onId</span>(message.<span class="property">id</span> = value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;retry&#x27;</span>:</span><br><span class="line">                    <span class="keyword">const</span> retry = <span class="built_in">parseInt</span>(value, <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(retry)) &#123; <span class="comment">// per spec, ignore non-integers</span></span><br><span class="line">                        <span class="title function_">onRetry</span>(message.<span class="property">retry</span> = retry);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是重头戏了，fetch.ts，其实这个文件的内容反而相对简单</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EventSourceMessage</span>, getBytes, getLines, getMessages &#125; <span class="keyword">from</span> <span class="string">&#x27;./parse&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventStreamContentType</span> = <span class="string">&#x27;text/event-stream&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DefaultRetryInterval</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LastEventId</span> = <span class="string">&#x27;last-event-id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">FetchEventSourceInit</span> <span class="keyword">extends</span> <span class="title class_">RequestInit</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The request headers. FetchEventSource only supports the Record&lt;string,string&gt; format.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    headers?: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response is received. Use this to validate that the response</span></span><br><span class="line"><span class="comment">     * actually matches what you expect (and throw if it doesn&#x27;t.) If not provided,</span></span><br><span class="line"><span class="comment">     * will default to a basic validation to ensure the content-type is text/event-stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onopen?: <span class="function">(<span class="params">response: Response</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a message is received. <span class="doctag">NOTE:</span> Unlike the default browser</span></span><br><span class="line"><span class="comment">     * EventSource.onmessage, this callback is called for _all_ events,</span></span><br><span class="line"><span class="comment">     * even ones with a custom `event` field.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onmessage?: <span class="function">(<span class="params">ev: EventSourceMessage</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response finishes. If you don&#x27;t expect the server to kill</span></span><br><span class="line"><span class="comment">     * the connection, you can throw an exception here and retry using onerror.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onclose?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when there is any error making the request / processing messages /</span></span><br><span class="line"><span class="comment">     * handling callbacks etc. Use this to control the retry strategy: if the</span></span><br><span class="line"><span class="comment">     * error is fatal, rethrow the error inside the callback to stop the entire</span></span><br><span class="line"><span class="comment">     * operation. Otherwise, you can return an interval (in milliseconds) after</span></span><br><span class="line"><span class="comment">     * which the request will automatically retry (with the last-event-id).</span></span><br><span class="line"><span class="comment">     * If this callback is not specified, or it returns undefined, fetchEventSource</span></span><br><span class="line"><span class="comment">     * will treat every error as retriable and will try again after 1 second.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onerror?: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">void</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If true, will keep the request open even if the document is hidden.</span></span><br><span class="line"><span class="comment">     * By default, fetchEventSource will close the request and reopen it</span></span><br><span class="line"><span class="comment">     * automatically when the document becomes visible again.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    openWhenHidden?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The Fetch function to use. Defaults to window.fetch */</span></span><br><span class="line">    fetch?: <span class="keyword">typeof</span> fetch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchEventSource</span>(<span class="params">input: RequestInfo, &#123;</span></span><br><span class="line"><span class="params">    signal: inputSignal,</span></span><br><span class="line"><span class="params">    headers: inputHeaders,</span></span><br><span class="line"><span class="params">    onopen: inputOnOpen,</span></span><br><span class="line"><span class="params">    onmessage,</span></span><br><span class="line"><span class="params">    onclose,</span></span><br><span class="line"><span class="params">    onerror,</span></span><br><span class="line"><span class="params">    openWhenHidden,</span></span><br><span class="line"><span class="params">    fetch: inputFetch,</span></span><br><span class="line"><span class="params">    ...rest</span></span><br><span class="line"><span class="params">&#125;: FetchEventSourceInit</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// make a copy of the input headers since we may modify it below:</span></span><br><span class="line">        <span class="keyword">const</span> headers = &#123; ...inputHeaders &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!headers.<span class="property">accept</span>) &#123;</span><br><span class="line">            headers.<span class="property">accept</span> = <span class="title class_">EventStreamContentType</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">curRequestController</span>: <span class="title class_">AbortController</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">onVisibilityChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>(); <span class="comment">// close existing request on every visibility change</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">                <span class="title function_">create</span>(); <span class="comment">// page is now visible again, recreate request.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!openWhenHidden) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> retryInterval = <span class="title class_">DefaultRetryInterval</span>;</span><br><span class="line">        <span class="keyword">let</span> retryTimer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, onVisibilityChange);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">            curRequestController.<span class="title function_">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if the incoming signal aborts, dispose resources and resolve:</span></span><br><span class="line">        inputSignal?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">dispose</span>();</span><br><span class="line">            <span class="title function_">resolve</span>(); <span class="comment">// don&#x27;t waste time constructing/logging errors</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> fetch = inputFetch ?? <span class="variable language_">window</span>.<span class="property">fetch</span>;</span><br><span class="line">        <span class="keyword">const</span> onopen = inputOnOpen ?? defaultOnOpen;</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">            curRequestController = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(input, &#123;</span><br><span class="line">                    ...rest,</span><br><span class="line">                    headers,</span><br><span class="line">                    <span class="attr">signal</span>: curRequestController.<span class="property">signal</span>,</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">onopen</span>(response);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">getBytes</span>(response.<span class="property">body</span>!, <span class="title function_">getLines</span>(<span class="title function_">getMessages</span>(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">                        <span class="comment">// store the id and send it back on the next retry:</span></span><br><span class="line">                        headers[<span class="title class_">LastEventId</span>] = id;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// don&#x27;t send the last-event-id header anymore:</span></span><br><span class="line">                        <span class="keyword">delete</span> headers[<span class="title class_">LastEventId</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="function"><span class="params">retry</span> =&gt;</span> &#123;</span><br><span class="line">                    retryInterval = retry;</span><br><span class="line">                &#125;, onmessage)));</span><br><span class="line"></span><br><span class="line">                onclose?.();</span><br><span class="line">                <span class="title function_">dispose</span>();</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!curRequestController.<span class="property">signal</span>.<span class="property">aborted</span>) &#123;</span><br><span class="line">                    <span class="comment">// if we haven&#x27;t aborted the request ourselves:</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// check if we need to retry:</span></span><br><span class="line">                        <span class="keyword">const</span> <span class="attr">interval</span>: <span class="built_in">any</span> = onerror?.(err) ?? retryInterval;</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(retryTimer);</span><br><span class="line">                        retryTimer = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(create, interval);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (innerErr) &#123;</span><br><span class="line">                        <span class="comment">// we should not retry anymore:</span></span><br><span class="line">                        <span class="title function_">dispose</span>();</span><br><span class="line">                        <span class="title function_">reject</span>(innerErr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">create</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultOnOpen</span>(<span class="params">response: Response</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> contentType = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!contentType?.<span class="title function_">startsWith</span>(<span class="title class_">EventStreamContentType</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected content-type to be <span class="subst">$&#123;EventStreamContentType&#125;</span>, Actual: <span class="subst">$&#123;contentType&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中有一些其他的处理，比如自动重试，比如页面非活动状态的时候将请求关闭，重新进入活动状态时重新创建新请求。</p><p>但是核心功能就是通过fetch接口去建立连接，然后通过getBytes方法来不断接受response.body，然后通过getLines和getMessage不断去将字节流解析为EventSource的message形式。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>这段代码看起来很简单，但是问题在于，为什么可以这样写，即，有这么两个问题：</p><ul><li>为什么fetch api可以建立SSE的链接</li><li>为什么fetch api 的response.body可以被不断解析，而不是我么常见的那种就是个json object的形式</li><li>为什么getMessage可以讲line buffer解析正确</li></ul><p>首先第一点，简单来说，SSE本质上还是基于HTTP的，所以可以通过HTTP请求建立连接<br>第二点，因为我们平时的api接口返回的数据格式是<code>application/json</code>这种，而sse接口返回的格式是<code>text/event-stream</code>，所以response.body其实是个readableStream，所以可以不断传输数据回来。<br>第三点，因为这是协议规定的，按照协议来就好，这个是协议的规定：<a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation，也可以看这篇文章：https://www.cnblogs.com/goloving/p/9196066.html">https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation，也可以看这篇文章：https://www.cnblogs.com/goloving/p/9196066.html</a></p><p>然后这里有可以引出一个新的问题，为什么SSE返回的可以是个流，也就是说HTTP为什么可以支持流输出：</p><p>其实答案很简单：HTTP本来就支持，只是我们之前的那种常见的restful api都是短连接，一次性获取到json数据后就直接关闭连接了，让我们忘记了HTTP是可以支持不断返回数据的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们都知道ChatGPT的接口支持流式SSE的方式进行数据返回，而前端浏览器默认提供了EventSource去接收SSE，但是问题在于，默认的EventSource只支持Get请求，切不支持任何自定义的头部，而ChatGPT的接口就是POST请求，且需要在头部携带token，于是使用了一个微软的库，我们来解释一下它的用法，源码以及从协议角度简单说一下它的源码可以运行的基础，即它的源码为什么可以工作&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Web即时通信方案梳理</title>
    <link href="https://sunra.top/posts/60091/"/>
    <id>https://sunra.top/posts/60091/</id>
    <published>2023-04-08T01:35:32.000Z</published>
    <updated>2023-08-12T14:20:13.210Z</updated>
    
    <content type="html"><![CDATA[<p>最近对chatgpt能够进行流式请求返回的协议产生了一点好奇，于是就去了解了一下，一开始我以为是HTTP2，或者是WS协议，后来发现都不是，而是一种叫做SSE（Server-Sent Events）的协议。</p><span id="more"></span><h1 id="即时通讯协议分类"><a href="#即时通讯协议分类" class="headerlink" title="即时通讯协议分类"></a>即时通讯协议分类</h1><h2 id="HTTP与HTTP2"><a href="#HTTP与HTTP2" class="headerlink" title="HTTP与HTTP2"></a>HTTP与HTTP2</h2><p>HTTP协议是我们最常见的前后端即时通讯的协议了，比较常见的是HTTP1，后来为了解决它的一些问题，我们提出了HTTP2，但是本质上没有特别大的变化。</p><p>http1的缺点</p><ul><li>线头阻塞：方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</li><li>没有充分的利用TCP链接： HTTP 1.x 中，如果想并发多个请求，必须使用多个 TCP 链接，且浏览器为了控制资源，还会对单个域名有 6-8个的TCP链接请求限制</li></ul><p>http2优点</p><ul><li>多路复用：最有价值的优点，解决了线头阻塞的问题，允许单一的http2连接可以发送多重的请求和响应，充分的利用TCP。 使得 资源分域名、雪碧图、内联样式等不再适用。</li><li>header压缩：HTTP2.0可以在客户端和服务器端维护静态字典和动态字典用来压缩和差量更新HTTP头部，大大降低因头部传输产生的流量。非两个字典内的header可以适用哈夫曼压缩方式进行压缩。</li><li>新的二进制格式：http1.x 是文本格式传输，http2是二进制格式传输。</li><li>服务端推送：服务器端可以主动向客户端推送资源。</li></ul><p>这里重点提一下这个服务端推送，他这个推送和websocket不一样，它这里的服务端推送，是说服务端可以在发送页面HTML时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。例如服务端可以主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。</p><p>服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，服务器不会随便推送第三方资源给客户端。</p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>在新一代html标准html5中提供了一种浏览器和服务器间进行全双工通讯的网络技术Websocket。从Websocket草案得知，Websocket是一个全新的、独立的协议，基于TCP协议，与http协议兼容、却不会融入http协议，仅仅作为html5的一部分。于是乎脚本又被赋予了另一种能力：发起websocket请求。这种方式我们应该很熟悉，因为Ajax就是这么做的，所不同的是，Ajax发起的是http请求而已。</p><p>与http协议不同的请求/响应模式不同，Websocket在建立连接之前有一个Handshake（Opening Handshake）过程，在关闭连接前也有一个Handshake（Closing Handshake）过程，建立连接之后，双方即可双向通信。</p><p>从浏览器支持角度来看，WebSocket已经近在眼前，但仍有一段较长的路要走，特别是在中国这个IE6、7、8依然盛行的国家，旧版本浏览器的消亡需要很长一段时间，在完全实现浏览器全兼容前，Comet技术可能仍然是最好的解决方案。不过，当前也已存在一些比较成熟的封装方案来解决这种兼容性限制</p><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2><p>SSE（Server-Sent Event，服务端推送事件）是一种允许服务端向客户端推送新数据的HTML5技术。与由客户端每隔几秒从服务端轮询拉取新数据相比，这是一种更优的解决方案。</p><p>与WebSocket相比，它也能从服务端向客户端推送数据。那如何决定你是用SSE还是WebSocket呢？概括来说，WebSocket能做的，SSE也能做，反之亦然，但在完成某些任务方面，它们各有千秋。</p><p>WebSocket是一种更为复杂的服务端实现技术，但它是真正的双向传输技术，既能从服务端向客户端推送数据，也能从客户端向服务端推送数据。</p><p>WebSocket和SSE的浏览器支持率差不多，大多数主流桌面浏览器两者都支持。在Android 4.3以及更早的版本中，系统默认浏览器两者都不支持，Firefox和Chrome则完全支持；Android 4.4中，系统默认浏览器两者都支持；Safari从5.0开始支持SSE（iOS系统从4.0开始），但直到6.0才正确地支持WebSocket（6.0之前的Safari所实现的WebSocket协议存在安全问题，所以一些主流浏览器已经禁用了基于这个协议的实现）。</p><p>与WebSocket相比，SSE有一些显著的优势。个人认为它最大的优势就是便利：不需要添加任何新组件，用任何你习惯的后端语言和框架就能继续使用。你不用为新建虚拟机、弄一个新的IP或新的端口号而劳神，就像在现有网站中新增一个页面那样简单。我喜欢把这称为既存基础设施优势。</p><p>SSE的第二个优势是服务端的简洁。相对而言，WebSocket则很复杂，不借助辅助类库基本搞不定。</p><p>因为SSE能在现有的HTTP/HTTPS协议上运作，所以它能直接运行于现有的代理服务器和认证技术。而对WebSocket而言，代理服务器需要做一些开发（或其他工作）才能支持，在写这本书时，很多服务器还没有（虽然这种状况会改善）。SSE还有一个优势：它是一种文本协议，脚本调试非常容易。</p><p>不过，这就引出了WebSocket相较SSE的一个潜在优势：WebSocket是二进制协议，而SSE是文本协议（通常使用UTF-8编码）。当然，我们可以通过SSE连接传输二进制数据：在SSE中，只有两个具有特殊意义的字符，它们是CR和LF，而对它们进行转码并不难。但用SSE传输二进制数据时数据会变大，如果需要从服务端到客户端传输大量的二进制数据，最好还是用WebSocket。</p><p><strong>WebSocket相较SSE最大的优势在于它是双向交流的，这意味向服务端发送数据就像从服务端接收数据一样简单。用SSE时，一般通过一个独立的Ajax请求从客户端向服务端传送数据。</strong>相对于WebSocket，这样使用Ajax会增加开销，但也就多一点点而已。如此一来，问题就变成了“什么时候需要关心这个差异？”如果需要以1次/秒或者更快的频率向服务端传输数据，那应该用WebSocket。0.2次/秒到1次/秒的频率是一个灰色地带，用WebSocket和用SSE差别不大；但如果你期望重负载，那就有必要确定基准点。频率低于0.2次/秒左右时，两者差别不大。</p><p>从服务端向客户端传输数据的性能如何？如果是文本数据而非二进制数据（如前文所提到的），SSE和WebSocket没什么区别。它们都用TCP/IP套接字，都是轻量级协议。延迟、带宽、服务器负载等都没有区别，除非……呃？除非什么？</p><p>当你在享用SSE的既存基础设施优势，并在客户端和服务端脚本之间设了一个网络服务器，区别就显现出来了。一个SSE连接不仅使用一个套接字，还会占用一个Apache线程或进程，如果用PHP，它会为这个连接专门创建一个PHP新实例。Apache和PHP会使用大量的内存，这会限制服务器所能支持的并行连接数。所以，要做到用SSE在数据传输性能上和WebSocket完全一样，需要写一个自己的后端服务器，当然，那些在任何情况下都会用自己的服务器并使用Node.js的人，会觉得这有什么稀奇的。</p><p>说一下WebSocket在旧版本浏览器上的兼容。当前，大约超过2/3的浏览器支持这些新技术，移动端浏览器的支持率会低一些。依惯例，每当需要双向套接字时，就会用到Flash，并且WebSocket的向后兼容通常是用Flash来做，这已经相当复杂了，如果浏览器上没有Flash，情况更糟。概括来说，WebSocket难兼容，SSE易兼容。</p><h1 id="即时通讯方法概述"><a href="#即时通讯方法概述" class="headerlink" title="即时通讯方法概述"></a>即时通讯方法概述</h1><p>1996年IETF  HTTP工作组发布了HTTP协议的1.0版本 ，到现在普遍使用的版本1.1，HTTP协议经历了17 年的发展。这种分布式、无状态、基于TCP的请求/响应式、在互联网盛行的今天得到广泛应用的协议，相对于互联网的迅猛发展，它似乎进步地很慢。互联网从兴起到现在，经历了门户网站盛行的web1.0时代，而后随着ajax技术的出现，发展为web应用盛行的web2.0时代，如今又朝着web3.0的方向迈进。反观http协议，从版本1.0发展到1.1，除了默认长连接之外就是缓存处理、带宽优化和安全性等方面的不痛不痒的改进。它一直保留着无状态、请求/响应模式，似乎从来没意识到这应该有所改变。</p><p>好在HTML5的时代已经到来，为Web端即时通讯的实现带来了WebSocket和SSE（Server-sent Events）两种技术方案</p><h2 id="Ajax短轮询：脚本发送http请求"><a href="#Ajax短轮询：脚本发送http请求" class="headerlink" title="Ajax短轮询：脚本发送http请求"></a>Ajax短轮询：脚本发送http请求</h2><p>传统的web应用要想与服务器交互，必须提交一个表单（form），服务器接收并处理传来的表单，然后返回全新的页面，因为前后两个页面的数据大部分都是相同的，这个过程传输了很多冗余的数据、浪费了带宽。于是Ajax技术便应运而生。</p><p>Ajax是Asynchronous JavaScript and XML的简称，由Jesse James Garrett 首先提出。这种技术开创性地允许浏览器脚本（JS）发送http请求。Outlook Web Access小组于98年使用，并很快成为IE4.0的一部分，但是这个技术一直很小众，直到2005年初，google在他的goole groups、gmail等交互式应用中广泛使用此种技术，才使得Ajax迅速被大家所接受。</p><p>Ajax的出现使客户端与服务器端传输数据少了很多，也快了很多，也满足了以丰富用户体验为特点的web2.0时代 初期发展的需要，但是慢慢地也暴露了他的弊端。比如无法满足即时通信等富交互式应用的实时更新数据的要求。这种浏览器端的小技术毕竟还是基于http协议，http协议要求的请求/响应的模式也是无法改变的，除非http协议本身有所改变。</p><h2 id="Comet：一种Hack技术（仍然是HTTP协议）"><a href="#Comet：一种Hack技术（仍然是HTTP协议）" class="headerlink" title="Comet：一种Hack技术（仍然是HTTP协议）"></a>Comet：一种Hack技术（仍然是HTTP协议）</h2><p>以即时通信为代表的web应用程序对数据的Low Latency要求，传统的基于轮询的方式已经无法满足，而且也会带来不好的用户体验。于是一种基于http长连接的“服务器推”技术便被hack出来。这种技术被命名为Comet，这个术语由Dojo Toolkit 的项目主管Alex Russell在博文Comet: Low Latency Data for the Browser首次提出，并沿用下来。</p><p>其实，服务器推很早就存在了，在经典的client/server模型中有广泛使用，只是浏览器太懒了，并没有对这种技术提供很好的支持。但是Ajax的出现使这种技术在浏览器上实现成为可能， google的gmail和gtalk的整合首先使用了这种技术。随着一些关键问题的解决（比如 IE 的加载显示问题），很快这种技术得到了认可，目前已经有很多成熟的开源Comet框架。</p><p>以下是典型的Ajax和Comet数据传输方式的对比，区别简单明了。典型的Ajax通信方式也是http协议的经典使用方式，要想取得数据，必须首先发送请求。在Low Latency要求比较高的web应用中，只能增加服务器请求的频率。Comet则不同，客户端与服务器端保持一个长连接，只有客户端需要的数据更新时，服务器才主动将数据推送给客户端。</p><p>Comet的实现主要有两种方式，基于Ajax的长轮询（long-polling）方式和基于 Iframe 及 htmlfile 的流（http streaming）方式。</p><h3 id="基于Ajax长轮询"><a href="#基于Ajax长轮询" class="headerlink" title="基于Ajax长轮询"></a>基于Ajax长轮询</h3><p>浏览器发出XMLHttpRequest 请求，服务器端接收到请求后，会阻塞请求直到有数据或者超时才返回，浏览器JS在处理请求返回信息（超时或有效数据）后再次发出请求，重新建立连接。在此期间服务器端可能已经有新的数据到达，服务器会选择把数据保存，直到重新建立连接，浏览器会把所有数据一次性取回。</p><h3 id="基于Iframe及htmlfile的流"><a href="#基于Iframe及htmlfile的流" class="headerlink" title="基于Iframe及htmlfile的流"></a>基于Iframe及htmlfile的流</h3><p>Iframe是html标记，这个标记的src属性会保持对指定服务器的长连接请求，服务器端则可以不停地返回数据，相对于第一种方式，这种方式跟传统的服务器推则更接近。</p><p>在第一种方式中，浏览器在收到数据后会直接调用JS回调函数，但是这种方式该如何响应数据呢？可以通过在返回数据中嵌入JS脚本的方式，如<code>&lt;script type=&quot;text/javascript&quot;&gt;js_func(“data from server ”)&lt;/script&gt;</code>，服务器端将返回的数据作为回调函数的参数，浏览器在收到数据后就会执行这段JS脚本。</p><h3 id="WebSocket-1"><a href="#WebSocket-1" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>WebScoket是一种新的协议，自然也是一种新的解决方案</p><h3 id="SSE-1"><a href="#SSE-1" class="headerlink" title="SSE"></a>SSE</h3><p>SSE是一种新的协议，自然也是一种新的解决方案</p><h1 id="即时通讯方案简单原理解析"><a href="#即时通讯方案简单原理解析" class="headerlink" title="即时通讯方案简单原理解析"></a>即时通讯方案简单原理解析</h1><h2 id="传统Web的通信原理"><a href="#传统Web的通信原理" class="headerlink" title="传统Web的通信原理"></a>传统Web的通信原理</h2><p>浏览器本身作为一个瘦客户端，不具备直接通过系统调用来达到和处于异地的另外一个客户端浏览器通信的功能。这和我们桌面应用的工作方式是不同的，通常桌面应用通过socket可以和远程主机上另外一端的一个进程建立TCP连接，从而达到全双工的即时通信。</p><p>浏览器从诞生开始一直走的是客户端请求服务器，服务器返回结果的模式，即使发展至今仍然没有任何改变。所以可以肯定的是，要想实现两个客户端的通信，必然要通过服务器进行信息的转发。例如A要和B通信，则应该是A先把信息发送给IM应用服务器，服务器根据A信息中携带的接收者将它再转发给B，同样B到A也是这种模式。</p><h2 id="传统通信模式实现IM应用需要解决的问题"><a href="#传统通信模式实现IM应用需要解决的问题" class="headerlink" title="传统通信模式实现IM应用需要解决的问题"></a>传统通信模式实现IM应用需要解决的问题</h2><p>我们认识到基于web实现IM软件依然要走浏览器请求服务器的模式，这这种方式下，针对IM软件的开发需要解决如下三个问题：</p><ul><li>双全工通信：即达到浏览器拉取（pull）服务器数据，服务器推送（push）数据到浏览器；</li><li>低延迟：即浏览器A发送给B的信息经过服务器要快速转发给B，同理B的信息也要快速交给A，实际上就是要求任何浏览器能够快速请求服务器的数据，服务器能够快速推送数据到浏览器；</li><li>支持跨域：通常客户端浏览器和服务器都是处于网络的不同位置，浏览器本身不允许通过脚本直接访问不同域名下的服务器，即使IP地址相同域名不同也不行，域名相同端口不同也不行，这方面主要是为了安全考虑。</li></ul><h2 id="全双工低延迟解决方案"><a href="#全双工低延迟解决方案" class="headerlink" title="全双工低延迟解决方案"></a>全双工低延迟解决方案</h2><h3 id="客户端浏览器短轮询"><a href="#客户端浏览器短轮询" class="headerlink" title="客户端浏览器短轮询"></a>客户端浏览器短轮询</h3><p>这是最简单的一种解决方案，其原理是在客户端通过Ajax的方式的方式每隔一小段时间就发送一个请求到服务器，服务器返回最新数据，然后客户端根据获得的数据来更新界面，这样就间接实现了即时通信。优点是简单，缺点是对服务器压力较大，浪费带宽流量（通常情况下数据都是没有发生改变的）</p><h3 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询"></a>长轮询</h3><p>在上面的轮询解决方案中，由于每次都要发送一个请求，服务端不管数据是否发生变化都发送数据，请求完成后连接关闭。这中间经过的很多通信是不必要的，于是又出现了长轮询（long-polling）方式。这种方式是客户端发送一个请求到服务器，服务器查看客户端请求的数据是否发生了变化（是否有最新数据），如果发生变化则立即响应返回，否则保持这个连接并定期检查最新数据，直到发生了数据更新或连接超时。同时客户端连接一旦断开，则再次发出请求，这样在相同时间内大大减少了客户端请求服务器的次数。</p><h3 id="基于http-stream通信"><a href="#基于http-stream通信" class="headerlink" title="基于http-stream通信"></a>基于http-stream通信</h3><p>还存在一种基于http-stream流的通信方式。其原理是让客户端在一次请求中保持和服务端连接不断开，然后服务端源源不断传送数据给客户端，就好比数据流一样，并不是一次性将数据全部发给客户端。它与polling方式的区别在于整个通信过程客户端只发送一次请求，然后服务端保持与客户端的长连接，并利用这个连接在回送数据给客户端。</p><p>这种方案有分为几种不同的数据流传输方式。</p><h4 id="基于XHR对象的streaming方式"><a href="#基于XHR对象的streaming方式" class="headerlink" title="基于XHR对象的streaming方式"></a>基于XHR对象的streaming方式</h4><p>这种方式的思想是构造一个XHR对象，通过监听它的onreadystatechange事件，当它的readyState为3的时候，获取它的responseText然后进行处理，readyState为3表示数据传送中，整个通信过程还没有结束，所以它还在不断获取服务端发送过来的数据，直到readyState为4的时候才表示数据发送完毕，一次通信过程结束。在这个过程中，服务端传给客户端的数据是分多次以stream的形式发送给客户端，客户端也是通过stream形式来获取的，所以称作http-streaming数据流方式，</p><p>这里由于客户端收到的数据是分段发过来的，所以最好定义一个游标received，来获取最新数据而舍弃之前已经接收到的数据，通过这个游标每次将接收到的最新数据打印出来，并且在通信结束后打印出整个responseText。</p><h4 id="基于iframe数据流"><a href="#基于iframe数据流" class="headerlink" title="基于iframe数据流"></a>基于iframe数据流</h4><p>由于低版本的IE不允许在XHR的readyState为3的时候获取其responseText属性，为了达到在IE上使用这个技术，又出现了基于iframe的数据流通信方式。具体来讲，就是在浏览器中动态载入一个iframe,让它的src属性指向请求的服务器的URL，实际上就是向服务器发送了一个http请求，然后在浏览器端创建一个处理数据的函数，在服务端通过iframe与浏览器的长连接定时输出数据给客户端，但是这个返回的数据并不是一般的数据，而是一个类似于<code>&lt;script type=\&quot;text/javascript\&quot;&gt;parent.process(&#39;&quot;+randomNum.toString()+&quot;&#39;)&lt;/script&gt;</code>脚本执行的方式，浏览器接收到这个数据就会将它解析成js代码并找到页面上指定的函数去执行，实际上是服务端间接使用自己的数据间接调用了客户端的代码，达到实时更新客户端的目的。</p><h4 id="基于htmlfile的数据流通信"><a href="#基于htmlfile的数据流通信" class="headerlink" title="基于htmlfile的数据流通信"></a>基于htmlfile的数据流通信</h4><p>又出现新问题了，在IE中，使用iframe请求服务端，服务端保持通信连接没有全部返回之前，浏览器title一直处于加载状态，并且底部也显示正在加载，这对于一个产品来讲用户体验是不好的，于是谷歌的天才们又想出了一中hack方式。就是在IE中，动态生成一个htmlfile对象，这个对象ActiveX形式的com组件，它实际上就是一个在内存中实现的HTML文档，通过将生成的iframe添加到这个内存中的HTMLfile中，并利用iframe的数据流通信方式达到上面的效果。同时由于HTMLfile对象并不是直接添加到页面上的，所以并没有造成浏览器显示正在加载的现象。</p><h4 id="SSE-2"><a href="#SSE-2" class="headerlink" title="SSE"></a>SSE</h4><p>为了解决浏览器只能够单向传输数据到服务端，HTML5提供了一种新的技术叫做服务器推送事件SSE，它能够实现客户端请求服务端，然后服务端利用与客户端建立的这条通信连接push数据给客户端，客户端接收数据并处理的目的。从独立的角度看，SSE技术提供的是从服务器单向推送数据给浏览器的功能，但是配合浏览器主动请求，实际上就实现了客户端和服务器的双向通信。它的原理是在客户端构造一个eventSource对象，该对象具有readySate属性，分别表示如下：</p><p>0：正在连接到服务器；<br>1：打开了连接；<br>2：关闭了连接。</p><p>同时eventSource对象会保持与服务器的长连接，断开后会自动重连，如果要强制连接可以调用它的close方法。可以它的监听onmessage事件，服务端遵循SSE数据传输的格式给客户端，客户端在onmessage事件触发时就能够接收到数据，从而进行某种处理</p><blockquote><p>浏览器原生API EventSource对SSE有一些限制，比如无法支持POST请求和自定义头部等等，可以采用<code>@microsoft/fetch-event-source</code>来进行增强</p></blockquote><h4 id="WebSocket-2"><a href="#WebSocket-2" class="headerlink" title="WebSocket"></a>WebSocket</h4><p>在上面的这些解决方案中，都是利用浏览器单向请求服务器或者服务器单向推送数据到浏览器这些技术组合在一起而形成的hack技术，在HTML5中，为了加强web的功能，提供了websocket技术，它不仅是一种web通信方式，也是一种应用层协议。它提供了浏览器和服务器之间原生的双全工跨域通信，通过浏览器和服务器之间建立websocket连接（实际上是TCP连接）,在同一时刻能够实现客户端到服务器和服务器到客户端的数据发送。关于该技术的原理，请参见：《WebSocket详解（一）：初步认识WebSocket技术》、《WebSocket详解（二）：技术原理、代码演示和应用案例》、《WebSocket详解（三）：深入WebSocket通信协议细节》，此处就不在赘述了，直接给出代码。在看代码之前，需要先了解websocket整个工作过程。</p><p>首先是客户端new 一个websocket对象，该对象会发送一个http请求到服务端，服务端发现这是个webscoket请求，会同意协议转换，发送回客户端一个101状态码的response，以上过程称之为一次握手，经过这次握手之后，客户端就和服务端建立了一条TCP连接，在该连接上，服务端和客户端就可以进行双向通信了。这时的双向通信在应用层走的就是ws或者wss协议了，和http就没有关系了。所谓的ws协议，就是要求客户端和服务端遵循某种格式发送数据报文（帧），然后对方才能够理解。</p><p>参考文章：<br><a href="http://www.52im.net/thread-336-1-1.html">Web端即时通讯技术盘点：短轮询、Comet、Websocket、SSE</a><br><a href="http://www.52im.net/thread-338-1-1.html">新手入门贴：史上最全Web端即时通讯技术原理详解</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近对chatgpt能够进行流式请求返回的协议产生了一点好奇，于是就去了解了一下，一开始我以为是HTTP2，或者是WS协议，后来发现都不是，而是一种叫做SSE（Server-Sent Events）的协议。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
</feed>
