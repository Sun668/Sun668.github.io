<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>一起探索互联网的秘密</subtitle>
  <link href="https://sunra.top/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/"/>
  <updated>2022-12-26T13:20:32.866Z</updated>
  <id>https://sunra.top/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 设计模式学习与实践（三）</title>
    <link href="https://sunra.top/2022/12/24/javascript-design-pattern-3/"/>
    <id>https://sunra.top/2022/12/24/javascript-design-pattern-3/</id>
    <published>2022-12-24T06:13:17.000Z</published>
    <updated>2022-12-26T13:20:32.866Z</updated>
    
    <content type="html"><![CDATA[<p>本文进行迭代器模式和发布订阅模式的总结。这两个模式算是比较经典的模式，甚至已经到了语法本身支持的程度。</p><a id="more"></a><h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>迭代器模式是指提供一种方法顺序访问一个<strong>聚合对象</strong>中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。</p><p>比如我们定义一个数据结构，内部是用链表构造的一个队列，只需要对外提供一个方法可以顺序遍历这个队列就行，并不需要让外部了解到这个队列用的是怎样的技术去实现的。</p><h2 id="内部迭代器和外部迭代器"><a href="#内部迭代器和外部迭代器" class="headerlink" title="内部迭代器和外部迭代器"></a>内部迭代器和外部迭代器</h2><p>我们来实现一个迭代器each函数，接受两个参数，第一个位被循环的数组，第二个为循环中每一步后将被触发的回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">arr, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        callback.call(arr[i], i, arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">index, n</span>)) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个each函数就属于内部迭代器，each函数的内部已经定义好了迭代规则，完全接手整个迭代过程，外部只需要一次初始调用。</p><p>内部迭代器在调用的时候非常方便，外界不关心迭代器内部的实现，跟迭代器的交互仅是一次初始调用，但这也正好是内部迭代器的缺点。</p><p>由于内部迭代器的迭代规则已经被提前定义，上面的each函数就无法同时迭代两个数组。</p><p>比如现在有个需求，比较两个数组的元素是否完全相同，如果不改写each函数，我们能够入手的地方似乎只剩下each的回调函数了，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1.length !== arr2.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"arr1 and arr2 is not equal"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    each(arr1, <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n !== arr2[i]) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"arr1 and arr2 is not equal"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    alert(<span class="string">"arr1 and arr2 is equal"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compare([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>在一些没有闭包的语言中，内部迭代器本身的实现也相当复杂。比如C语言中的内部迭代器，利用函数指针实现的，循环处理的函数都要通过参数的形式明确从外面传递进去。</p><p>相比于内部迭代器，外部迭代器则是必须显式地请求迭代下一个元素。</p><p>外部迭代器增加了一些调用的复杂度，但是也增加了迭代器的灵活性，我们可以手工控制迭代的过程和顺序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        current++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        current &gt;= obj.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getCurrent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj[current];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next,</span><br><span class="line">        isDone,</span><br><span class="line">        getCurrent,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">iterator1, iterator2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (iterator1.getCurrent() !== iterator2.getCurrent()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"iterator1 and iterator2 is not equal"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        iterator1.next();</span><br><span class="line">        iterator2.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iterator1.isDone() &amp;&amp; iterator2.isDone()) &#123;</span><br><span class="line">        alert(<span class="string">'iterator1 and iterator2 is equal'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'iterator1 and iterator2 is not equal'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compare(Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]), Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure><h2 id="中止迭代器"><a href="#中止迭代器" class="headerlink" title="中止迭代器"></a>中止迭代器</h2><p>迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">arr, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback.call(arr[i], i, arr[i]) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="迭代器模式举例"><a href="#迭代器模式举例" class="headerlink" title="迭代器模式举例"></a>迭代器模式举例</h2><p>假设有如下代码，可以根据不同的浏览器获取不同的上传组件对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFINActiveX.FTNUpload"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">"&lt;object type='application/x-shockwave-flash'&gt;&lt;/object&gt;"</span></span><br><span class="line">            <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">"&lt;input name='file' type='file'/&gt;"</span></span><br><span class="line">            <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用迭代器模式改造一下上面那段代码，将每种获取上传组件的方法封装为一个函数，然后见这些函数放入一个数组中去迭代，直到有一个可以正确返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iteratorUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> uploadObjCreators = <span class="built_in">Array</span>.prototype.slice(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uploadObjCreators.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> uploadObj = uploadObjCreators[i]();</span><br><span class="line">        <span class="keyword">if</span> (uploadObj !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> uploadObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFINActiveX.FTNUpload"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"&lt;object type='application/x-shockwave-flash'&gt;&lt;/object&gt;"</span></span><br><span class="line">        <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"&lt;input name='file' type='file'/&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFormUploadObj);</span><br></pre></td></tr></table></figure><h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><p>发布订阅模式又叫做观察者模式，它定义对象之间的一种一对多的依赖关系，当一个对象的状态发生改变的时候，所有依赖它的对象都会得到通知。</p><p>在JavaScript中，我们一般用事件模式来代替发布订阅模式。</p><p>发布订阅模式可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。同时，发布订阅模式可以取代对象之间硬编码的通知机制，一个对象不再显式地调用另外一个对象的某个接口。发布订阅模式让两个对象松耦合地联系在一起。</p><h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><p>实际上，只要我们曾经在DOM节点上绑定过事件函数，那我们就曾经使用过发布订阅模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.click();</span><br></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>除了DOM事件，我们经常还会实现一些自定义事件，这种依靠自定义事件完成的发布订阅模式可以用于任何JavaScript代码中。</p><p>我们看看如何一步步实现发布订阅模式</p><ul><li>首先要指定好谁充当发布者</li><li>然后给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者</li><li>最后发布消息时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者回调函数</li></ul><p>另外，我们还可以往回调函数里填入一些参数，订阅者可以接收这些参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">salesOffices.clientList = [];</span><br><span class="line"></span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clientList.push(fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> <span class="keyword">this</span>.clientList) &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price, squareMeter</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A know:"</span>, price, squareMeter);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price, squareMeter</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B know:"</span>, price, squareMeter);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="number">2000000</span>, <span class="number">80</span>);</span><br><span class="line">salesOffices.trigger(<span class="number">3000000</span>, <span class="number">110</span>);</span><br></pre></td></tr></table></figure><p>至此，我们实现了一个简单的发布订阅模式，但这里还存在一些问题。我们看到订阅者接收到了发布者发布的每个消息，虽然A只想买88平方米的房子，但是发布者会把110房子的消息也推送给A，这是没有必要的，所以我们可以优化一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">salesOffices.clientList = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.clentList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clentList[key].push(fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">const</span> fns = <span class="keyword">this</span>.clentList[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> fns) &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter80'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A know:"</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter110'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B know:"</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter80'</span>, <span class="number">2000000</span>);</span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter110'</span>, <span class="number">3000000</span>);</span><br></pre></td></tr></table></figure><h2 id="发布订阅的通用实现"><a href="#发布订阅的通用实现" class="headerlink" title="发布订阅的通用实现"></a>发布订阅的通用实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line">    clientList: &#123;&#125;,</span><br><span class="line">    listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.clentList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.clentList[key].push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">const</span> fns = <span class="keyword">this</span>.clentList[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> fns) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为任何对象安装发布订阅模式</span></span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">        obj[i] = event[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">installEvent(salesOffices);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter80'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A know:"</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter110'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B know:"</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter80'</span>, <span class="number">2000000</span>);</span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter110'</span>, <span class="number">3000000</span>);</span><br></pre></td></tr></table></figure><p>当然，我们也可以先发布，再订阅，当暂时没有订阅者时将消息缓存起来，一旦出现订阅者再依次调用订阅者并清空消息</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文进行迭代器模式和发布订阅模式的总结。这两个模式算是比较经典的模式，甚至已经到了语法本身支持的程度。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Router 源码解析（二）内部路由的跳转</title>
    <link href="https://sunra.top/2022/12/16/vue-router-source-code-2/"/>
    <id>https://sunra.top/2022/12/16/vue-router-source-code-2/</id>
    <published>2022-12-16T08:28:29.000Z</published>
    <updated>2022-12-18T03:11:31.383Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/2022/12/10/vue-router-source-code-1/">之前的博客</a>我们讲了我们创建VueRouter实例并通过Vue.use应用之后，VueRouter内部如何生成一整套自己的数据结构来存储路由配置的，这次博客我们继续解读Vue Router的源码，大致内容是Vue Router的路由守卫的执行逻辑。</p><a id="more"></a><h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><p>这个是VueRouter的路由守卫的官方地址：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" rel="external nofollow noopener noreferrer" target="_blank">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></p><p>整个路由变化过程中路由守卫的执行的顺序如下：</p><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter。</code></li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter。</code></li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h1 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h1><p>还是先讲一下我们本次博客基于的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; </span><br><span class="line">  template: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span>,</span><br><span class="line">  beforeRouteEnter(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被验证前调用</span></span><br><span class="line">    <span class="comment">// 不能获取组件实例 `this` ！</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行时，组件实例还没被创建！</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 在导航离开渲染该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Baz = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;baz&lt;/div&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: __dirname,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">      <span class="comment">// a single route can define multiple named components</span></span><br><span class="line">      <span class="comment">// which will be rendered into &lt;router-view&gt;s with corresponding names.</span></span><br><span class="line">      components: &#123;</span><br><span class="line">        <span class="keyword">default</span>: Foo,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Baz</span><br><span class="line">        beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(bar);</span><br><span class="line">          <span class="comment">// reject the navigation</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/other'</span>,</span><br><span class="line">      components: &#123;</span><br><span class="line">        <span class="keyword">default</span>: Baz,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Foo</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// canUserAccess() 返回 `true` 或 `false`</span></span><br><span class="line">  <span class="keyword">const</span> canAccess = <span class="keyword">await</span> canUserAccess(to)</span><br><span class="line">  <span class="keyword">if</span> (!canAccess) <span class="keyword">return</span> <span class="string">'/login'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// router.beforeEach支持第三个参数next</span></span><br><span class="line"><span class="comment">// router.beforeEach((to, from, next) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   if (to.name !== 'Login' &amp;&amp; !isAuthenticated) next(&#123; name: 'Login' &#125;)</span></span><br><span class="line"><span class="comment">//   else next()</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">router.beforeResolve(<span class="keyword">async</span> to =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.meta.requiresCamera) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> askForCameraPermission()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> NotAllowedError) &#123;</span><br><span class="line">        <span class="comment">// ... 处理错误，然后取消导航</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">        <span class="keyword">throw</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// afterEach不支持next</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  sendToAnalytics(to.fullPath)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div id="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Named Views&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;router-link to="/"&gt;/&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;router-link to="/other"&gt;/other&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view class="view one"&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view class="view two" name="a"&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view class="view three" name="b"&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>我们从VueRouter.prototype.push开始分析调用路由切换之后发生了什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">if</span> (!onComplete &amp;&amp; !onAbort &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.history.push(location, resolve, reject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.push(location, onComplete, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个参数分别为RawLocation，成功时的回调函数以及失败时的回调函数，RawLocation其实就是我们在正式使用时push函数传入的参数类型，具体定义如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> Location = &#123;</span><br><span class="line">  _normalized?: <span class="built_in">boolean</span>;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  path?: <span class="built_in">string</span>;</span><br><span class="line">  hash?: <span class="built_in">string</span>;</span><br><span class="line">  query?: Dictionary&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">  params?: Dictionary&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">  append?: <span class="built_in">boolean</span>;</span><br><span class="line">  replace?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> RawLocation = <span class="built_in">string</span> | Location</span><br></pre></td></tr></table></figure><p><a href="https://sunra.top/2022/12/10/vue-router-source-code-1/">之前的博客</a>我们this.history会根据mode不同实例化为不同的对象，我们以HTML5History来分析</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; current: fromRoute &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.transitionTo(location, <span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      pushState(cleanPath(<span class="keyword">this</span>.base + route.fullPath))</span><br><span class="line">      handleScroll(<span class="keyword">this</span>.router, route, fromRoute, <span class="literal">false</span>)</span><br><span class="line">      onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    &#125;, onAbort)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先是获取当前的路由：current，它的类型是Route</p><p>然后调用了<code>transitionTo</code>函数，传入了两个参数，第一个是location，第二个是回调函数，我们看一下这个<code>transitionTo</code>做了什么</p><h2 id="transitionTo"><a href="#transitionTo" class="headerlink" title="transitionTo"></a>transitionTo</h2><p>在看<code>transtitionTo</code>函数之前，我们看一下几个工具函数</p><h3 id="runQueue"><a href="#runQueue" class="headerlink" title="runQueue"></a>runQueue</h3><p>首先是<code>runQueue</code>:</p><p>这个函数有三个参数，分别是：</p><ul><li>queue：一个参数的数组</li><li>fn：实际执行函数，其参数也有两个，第一个是queue中的每一项，第二个是fn执行完成后的回调函数</li><li>cb：针对queue中的每一项都执行过fn后的最终的回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">runQueue</span> (<span class="params">queue: Array&lt;?NavigationGuard&gt;, fn: Function, cb: Function</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> step = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= queue.length) &#123;</span><br><span class="line">      cb()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue[index]) &#123;</span><br><span class="line">        fn(queue[index], () =&gt; &#123;</span><br><span class="line">          step(index + <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        step(index + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  step(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="extractGuards"><a href="#extractGuards" class="headerlink" title="extractGuards"></a>extractGuards</h3><p>简单来说，这个函数的的作用就是从传入的一系列<code>RouteRecord</code>中，依次抽取出组件内部的路由守卫，然后将这些路由守卫的上下文，也就是this指针通过apply函数指定为自身，如果最后一个参数为true，那就反转这些路由守卫的顺序。</p><p>直接对外暴露的函数是，如extractLeaveGuards，它实际上就是调用<code>extractGuards(deactivated, &#39;beforeRouteLeave&#39;, bindGuard, true)</code>，也就是从反激活的一系列组件中，获取<code>beforeRouteLeave</code>函数，拼装起来后再反转。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractGuards</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  records: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  bind: <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  reverse?: <span class="built_in">boolean</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Array</span>&lt;?<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> guards = flatMapComponents(records, <span class="function">(<span class="params">def, instance, match, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> guard = extractGuard(def, name)</span><br><span class="line">    <span class="keyword">if</span> (guard) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(guard)</span><br><span class="line">        ? guard.map(<span class="function"><span class="params">guard</span> =&gt;</span> bind(guard, instance, match, key))</span><br><span class="line">        : bind(guard, instance, match, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> flatten(reverse ? guards.reverse() : guards)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractGuard</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  def: <span class="built_in">Object</span> | <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">NavigationGuard</span> | <span class="title">Array</span>&lt;<span class="title">NavigationGuard</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> def !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// extend now so that global mixins are applied.</span></span><br><span class="line">    def = _Vue.extend(def)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> def.options[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractLeaveGuards</span> (<span class="params">deactivated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span>): <span class="title">Array</span>&lt;?<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extractGuards(deactivated, <span class="string">'beforeRouteLeave'</span>, bindGuard, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractUpdateHooks</span> (<span class="params">updated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span>): <span class="title">Array</span>&lt;?<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extractGuards(updated, <span class="string">'beforeRouteUpdate'</span>, bindGuard)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindGuard</span> (<span class="params">guard: NavigationGuard, instance: ?_Vue</span>): ?<span class="title">NavigationGuard</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">boundRouteGuard</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> guard.apply(instance, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="confirmTransition（第1-8步）"><a href="#confirmTransition（第1-8步）" class="headerlink" title="confirmTransition（第1-8步）"></a>confirmTransition（第1-8步）</h3><p>然后是，<code>confirmTransition</code>：</p><p>这个函数大致分为三部分：</p><ul><li>判断是否需要abort，如果需要则退出</li><li>生成要执行的路由守卫的数组</li><li>依次执行路由守卫的数组</li></ul><p>首先是判断一下传入的route和当前的route是否是同一个，如果是的话，直接调用abort并退出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> current = <span class="keyword">this</span>.current</span><br><span class="line"><span class="keyword">this</span>.pending = route</span><br><span class="line"><span class="keyword">const</span> abort = <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// changed after adding errors with</span></span><br><span class="line">  <span class="comment">// https://github.com/vuejs/vue-router/pull/3047 before that change,</span></span><br><span class="line">  <span class="comment">// redirect and aborted navigation would produce an err == null</span></span><br><span class="line">  <span class="keyword">if</span> (!isNavigationFailure(err) &amp;&amp; isError(err)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.errorCbs.length) &#123;</span><br><span class="line">      <span class="keyword">this</span>.errorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">        cb(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        warn(<span class="literal">false</span>, <span class="string">'uncaught error during route navigation:'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  onAbort &amp;&amp; onAbort(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lastRouteIndex = route.matched.length - <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> lastCurrentIndex = current.matched.length - <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  isSameRoute(route, current) &amp;&amp;</span><br><span class="line">  <span class="comment">// in the case the route map has been dynamically appended to</span></span><br><span class="line">  lastRouteIndex === lastCurrentIndex &amp;&amp;</span><br><span class="line">  route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">this</span>.ensureURL()</span><br><span class="line">  <span class="keyword">if</span> (route.hash) &#123;</span><br><span class="line">    handleScroll(<span class="keyword">this</span>.router, current, route, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> abort(createNavigationDuplicatedError(current, route))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是一段生成路由守卫执行顺序的函数逻辑：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; updated, deactivated, activated &#125; = resolveQueue(</span><br><span class="line">  <span class="keyword">this</span>.current.matched,</span><br><span class="line">  route.matched</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue: <span class="built_in">Array</span>&lt;?NavigationGuard&gt; = [].concat(</span><br><span class="line">  <span class="comment">// in-component leave guards</span></span><br><span class="line">  extractLeaveGuards(deactivated),</span><br><span class="line">  <span class="comment">// global before hooks</span></span><br><span class="line">  <span class="keyword">this</span>.router.beforeHooks,</span><br><span class="line">  <span class="comment">// in-component update hooks</span></span><br><span class="line">  extractUpdateHooks(updated),</span><br><span class="line">  <span class="comment">// in-config enter guards</span></span><br><span class="line">  activated.map(<span class="function"><span class="params">m</span> =&gt;</span> m.beforeEnter),</span><br><span class="line">  <span class="comment">// async components</span></span><br><span class="line">  resolveAsyncComponents(activated)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一行的<code>resolveQueue</code>的作用是比较当前的路由和即将跳转的路由之间的变化，它的两个参数的类型都是<code>Array&lt;RouteRecord&gt;</code>，它的逻辑也比较简单，就是比较两个数组之间的差异：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveQueue</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  next: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  updated: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span><br><span class="line">  activated: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span><br><span class="line">  deactivated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> max = <span class="built_in">Math</span>.max(current.length, next.length)</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current[i] !== next[i]) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    updated: next.slice(<span class="number">0</span>, i),</span><br><span class="line">    activated: next.slice(i),</span><br><span class="line">    deactivated: current.slice(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而queue数字中的路由守卫依次是：</p><ul><li>所有 deactivated 组件中的 beforeRouteLeave 函数，然后反转顺序</li><li>全局的 beforeHooks 函数</li><li>所有 updated 组件中的 beforeRouteUpdate 函数</li><li>所有 activated 组件对应的路由配置中的 beforeEnter 函数</li><li>加载所有 activated 中异步组件的函数</li></ul><p>这五步也对应着一开始我们说的路由守卫执行顺序中的2-6步</p><p>得到了正确的路由守卫执行顺序的数组后，就是正式执行了，这里就用到了我们刚才说的工具函数： runQueue 了，代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterator = <span class="function">(<span class="params">hook: NavigationGuard, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.pending !== route) &#123;</span><br><span class="line">    <span class="keyword">return</span> abort(createNavigationCancelledError(current, route))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    hook(route, current, <span class="function">(<span class="params">to: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (to === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// next(false) -&gt; abort navigation, ensure current URL</span></span><br><span class="line">        <span class="keyword">this</span>.ensureURL(<span class="literal">true</span>)</span><br><span class="line">        abort(createNavigationAbortedError(current, route))</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isError(to)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ensureURL(<span class="literal">true</span>)</span><br><span class="line">        abort(to)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        <span class="keyword">typeof</span> to === <span class="string">'string'</span> ||</span><br><span class="line">        (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">          (<span class="keyword">typeof</span> to.path === <span class="string">'string'</span> || <span class="keyword">typeof</span> to.name === <span class="string">'string'</span>))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// next('/') or next(&#123; path: '/' &#125;) -&gt; redirect</span></span><br><span class="line">        abort(createNavigationRedirectedError(current, route))</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp; to.replace) &#123;</span><br><span class="line">          <span class="keyword">this</span>.replace(to)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.push(to)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// confirm transition and pass on the value</span></span><br><span class="line">        next(to)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    abort(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runQueue(queue, iterator, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// wait until async components are resolved before</span></span><br><span class="line">  <span class="comment">// extracting in-component enter guards</span></span><br><span class="line">  <span class="keyword">const</span> enterGuards = extractEnterGuards(activated)</span><br><span class="line">  <span class="keyword">const</span> queue = enterGuards.concat(<span class="keyword">this</span>.router.resolveHooks)</span><br><span class="line">  runQueue(queue, iterator, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pending !== route) &#123;</span><br><span class="line">      <span class="keyword">return</span> abort(createNavigationCancelledError(current, route))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.pending = <span class="literal">null</span></span><br><span class="line">    onComplete(route)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.router.app) &#123;</span><br><span class="line">      <span class="keyword">this</span>.router.app.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        handleRouteEntered(route)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先<code>iterator</code>函数，两个参数为</p><ul><li>要执行的路由守卫</li><li>执行成功以后的回调函数</li></ul><p>然后我们的runQueue，嵌套了两层：</p><ul><li>第一层首先是传入了刚才我们生成的queue，也就是2-6步的路由守卫函数，fn就是我们的iterator函数，结合我们一开始解读的runQueue的源码，总起来第一层做的事情就是，依次执行我们2-6步的路由守卫，每次执行完成一个通过调用hook中的next来调用runQueue中的step来执行下一个hook</li><li>第一层把所有queue执行完成之后的回调函数中，我们又生成了一层runQueue函数，区别就在于这一次，我们传入的queue不同了，这一次我们的queue生成方法为：<code>const enterGuards = extractEnterGuards(activated); const queue = enterGuards.concat(this.router.resolveHooks)</code>，两部分组成，第一部分是所有activated组件的 beforeRouteEnter 函数，然后是 this.router.resolveHooks，也就是全局的 beforeResolve ，这里就是路由守卫顺序中的第7，8步</li><li>在第二层的runQueue的回调函数中，我们就可以调用confirmTransition的的onComplete函数了</li></ul><p>然后我们想要了解这个onComplete做了什么，就要看transitionTo在调用confirmTransition的时候传入了什么函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.confirmTransition(</span><br><span class="line">  route,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">    onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    <span class="keyword">this</span>.ensureURL()</span><br><span class="line">    <span class="keyword">this</span>.router.afterHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">      hook &amp;&amp; hook(route, prev)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fire ready cbs once</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">        cb(route)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (onAbort) &#123;</span><br><span class="line">      onAbort(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; !<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">      <span class="comment">// Initial redirection should not mark the history as ready yet</span></span><br><span class="line">      <span class="comment">// because it's triggered by the redirection instead</span></span><br><span class="line">      <span class="comment">// https://github.com/vuejs/vue-router/issues/3225</span></span><br><span class="line">      <span class="comment">// https://github.com/vuejs/vue-router/issues/3331</span></span><br><span class="line">      <span class="keyword">if</span> (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.readyErrorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">          cb(err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="comfirmTransition成功回调（第9-12步）"><a href="#comfirmTransition成功回调（第9-12步）" class="headerlink" title="comfirmTransition成功回调（第9-12步）"></a>comfirmTransition成功回调（第9-12步）</h3><p>可以看到，我们的onComplete其实就是这一段：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">onComplete &amp;&amp; onComplete(route)</span><br><span class="line"><span class="keyword">this</span>.ensureURL()</span><br><span class="line"><span class="keyword">this</span>.router.afterHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">  hook &amp;&amp; hook(route, prev)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fire ready cbs once</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">  <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">    cb(route)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一步，调用updateRoute函数，这个函数内部其实就是history.listen函数传入的回调函数，这个比较重要，这个回调函数会修改$route的值，而这个值是响应式的，在route-view组件中会使用到，也就是说改变这个值会导致route-view重新调用render函数，也就出发了视图的更新</li><li>第二步如果transitionTo有onComplete函数那么调用</li><li>依次调用 afterHooks 函数，这个其实就是全局注册的 afterEach 的数组，至此，第11步也完成了</li></ul><p>那么最后一步，重新执行beforeRouterEnter，并通过next返回实例是怎么做到的呢？这一点其实和第七步生成的beforeRouterEnter的回调方式有关，这个<code>extractEnterGuards</code>和其另两个 <code>extractLeaveGuards</code>，和 <code>extractUpdateHooks</code>不一样，它的bind函数不是简单的apply，而是调用成功之后再执行next回调函数，具体如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractEnterGuards</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  activated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Array</span>&lt;?<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extractGuards(</span><br><span class="line">    activated,</span><br><span class="line">    <span class="string">'beforeRouteEnter'</span>,</span><br><span class="line">    (guard, _, match, key) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> bindEnterGuard(guard, match, key)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEnterGuard</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  guard: NavigationGuard,</span></span></span><br><span class="line"><span class="function"><span class="params">  match: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">NavigationGuard</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">routeEnterGuard</span> (<span class="params">to, <span class="keyword">from</span>, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> guard(to, <span class="keyword">from</span>, <span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> cb === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!match.enteredCbs[key]) &#123;</span><br><span class="line">          match.enteredCbs[key] = []</span><br><span class="line">        &#125;</span><br><span class="line">        match.enteredCbs[key].push(cb)</span><br><span class="line">      &#125;</span><br><span class="line">      next(cb)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成了修改路由之后的1-12的函数执行，并且成功通过响应式的的方法触发了router-view的改变。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/2022/12/10/vue-router-source-code-1/&quot;&gt;之前的博客&lt;/a&gt;我们讲了我们创建VueRouter实例并通过Vue.use应用之后，VueRouter内部如何生成一整套自己的数据结构来存储路由配置的，这次博客我们继续解读Vue Router的源码，大致内容是Vue Router的路由守卫的执行逻辑。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://sunra.top/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Router 源码解析（一）内部路由配置的生成</title>
    <link href="https://sunra.top/2022/12/10/vue-router-source-code-1/"/>
    <id>https://sunra.top/2022/12/10/vue-router-source-code-1/</id>
    <published>2022-12-10T02:07:58.000Z</published>
    <updated>2022-12-17T11:17:19.193Z</updated>
    
    <content type="html"><![CDATA[<p>这几天遇到个问题，就是在vue-router嵌套子路由的时候，如果深层的router-view组件没有声明key，且路由配置中的component是函数式的组件，就会导致在router.push的时候无法更新。</p><p>对于函数式组件和函数式编程，需要了记得可以我之前的<a href="https://sunra.top/2022/12/10/functional-programming-and-component/">相关博客</a>;</p><p>本文主要是分析vue-router的源码，vue-router的源码主要是两部分，第一部分是做路由匹配，第二部分是做路由跳转的，本文先主要关注第一部分</p><a id="more"></a><p>我们以<code>3.6.5</code>版本的的vue-router来讲</p><p>首先看一下src的目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── components // vue-router提供的两个组件，即router-view和router-link</span><br><span class="line">│   ├── link.js</span><br><span class="line">│   └── view.js</span><br><span class="line">├── composables // 暂时不需要关心这个目录</span><br><span class="line">│   ├── globals.js</span><br><span class="line">│   ├── guards.js</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── useLink.js</span><br><span class="line">│   └── utils.js</span><br><span class="line">├── create-matcher.js // 初始化路由的时候，创建matcher，用于后续进行路由匹配</span><br><span class="line">├── create-route-map.js // 初始化路由时，创建route-map用于matcher</span><br><span class="line">├── entries // 打包入口文件</span><br><span class="line">│   ├── cjs.js</span><br><span class="line">│   └── esm.js</span><br><span class="line">├── history // 不同的路由模式下的路由切换实现</span><br><span class="line">│   ├── abstract.js // 非浏览器环境下的路由切换</span><br><span class="line">│   ├── base.js // 路由切换的基类</span><br><span class="line">│   ├── hash.js // hash路由模式</span><br><span class="line">│   └── html5.js // HTML5模式</span><br><span class="line">├── index.js</span><br><span class="line">├── install.js // Vue.use调用的文件</span><br><span class="line">├── router.js // Vue-router对外暴露的api</span><br><span class="line">└── util</span><br><span class="line">    ├── async.js</span><br><span class="line">    ├── dom.js</span><br><span class="line">    ├── errors.js</span><br><span class="line">    ├── location.js</span><br><span class="line">    ├── misc.js</span><br><span class="line">    ├── params.js</span><br><span class="line">    ├── path.js</span><br><span class="line">    ├── push-state.js</span><br><span class="line">    ├── query.js</span><br><span class="line">    ├── resolve-components.js</span><br><span class="line">    ├── route.js</span><br><span class="line">    ├── scroll.js</span><br><span class="line">    ├── state-key.js</span><br><span class="line">    └── warn.js</span><br></pre></td></tr></table></figure><h2 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h2><p>我们下面的代码讲解给予这个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 如果使用模块化机制编程，导入 Vue 和 VueRouter，要调用 Vue.use(VueRouter)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1. 定义（路由）组件。</span></span><br><span class="line"><span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span><br><span class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></span><br><span class="line"><span class="comment">// 我们晚点再讨论嵌套路由。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes <span class="comment">// （缩写）相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="内部类型"><a href="#内部类型" class="headerlink" title="内部类型"></a>内部类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="built_in">document</span>: Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> RouteRegExp <span class="keyword">extends</span> <span class="built_in">RegExp</span> &#123;</span><br><span class="line">  keys: <span class="built_in">Array</span>&lt;&#123; name: <span class="built_in">string</span>, optional: <span class="built_in">boolean</span> &#125;&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> PathToRegexpOptions = &#123;</span><br><span class="line">  sensitive?: <span class="built_in">boolean</span>,</span><br><span class="line">  strict?: <span class="built_in">boolean</span>,</span><br><span class="line">  end?: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'path-to-regexp' &#123;</span><br><span class="line">  <span class="keyword">declare</span> <span class="built_in">module</span>.exports: &#123;</span><br><span class="line">    (path: <span class="built_in">string</span>, keys?: <span class="built_in">Array</span>&lt;?&#123; name: <span class="built_in">string</span> &#125;&gt;, options?: PathToRegexpOptions): RouteRegExp;</span><br><span class="line">    compile: <span class="function">(<span class="params">path: <span class="built_in">string</span></span>) =&gt;</span> (params: <span class="built_in">Object</span>) =&gt; <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> Dictionary&lt;T&gt; = &#123; [key: <span class="built_in">string</span>]: T &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> NavigationGuard = (</span><br><span class="line">  to: Route,</span><br><span class="line">  <span class="keyword">from</span>: Route,</span><br><span class="line">  next: <span class="function">(<span class="params">to?: RawLocation | <span class="literal">false</span> | <span class="built_in">Function</span> | <span class="built_in">void</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">) =&gt; <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> AfterNavigationHook = <span class="function">(<span class="params">to: Route, <span class="keyword">from</span>: Route</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Position = &#123; x: <span class="built_in">number</span>, y: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> PositionResult = Position | &#123; selector: <span class="built_in">string</span>, offset?: Position &#125; | <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> RouterOptions = &#123;</span><br><span class="line">  routes?: <span class="built_in">Array</span>&lt;RouteConfig&gt;;</span><br><span class="line">  mode?: <span class="built_in">string</span>;</span><br><span class="line">  fallback?: <span class="built_in">boolean</span>;</span><br><span class="line">  base?: <span class="built_in">string</span>;</span><br><span class="line">  linkActiveClass?: <span class="built_in">string</span>;</span><br><span class="line">  linkExactActiveClass?: <span class="built_in">string</span>;</span><br><span class="line">  parseQuery?: <span class="function">(<span class="params">query: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">Object</span>;</span><br><span class="line">  stringifyQuery?: <span class="function">(<span class="params">query: <span class="built_in">Object</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  scrollBehavior?: (</span><br><span class="line">    to: Route,</span><br><span class="line">    <span class="keyword">from</span>: Route,</span><br><span class="line">    savedPosition: ?Position</span><br><span class="line">  ) =&gt; PositionResult | <span class="built_in">Promise</span>&lt;PositionResult&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> RedirectOption = RawLocation | <span class="function">(<span class="params">(<span class="params">to: Route</span>) =&gt; RawLocation</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">RouteConfig</span> = &#123;</span></span><br><span class="line"><span class="function">  <span class="params">path</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">name</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">component</span>?: <span class="params">any</span>;</span></span><br><span class="line"><span class="function">  <span class="params">components</span>?: <span class="params">Dictionary</span>&lt;<span class="params">any</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">redirect</span>?: <span class="params">RedirectOption</span>;</span></span><br><span class="line"><span class="function">  <span class="params">alias</span>?: <span class="params">string</span> | <span class="params">Array</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">children</span>?: <span class="params">Array</span>&lt;<span class="params">RouteConfig</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">beforeEnter</span>?: <span class="params">NavigationGuard</span>;</span></span><br><span class="line"><span class="function">  <span class="params">meta</span>?: <span class="params">any</span>;</span></span><br><span class="line"><span class="function">  <span class="params">props</span>?: <span class="params">boolean</span> | <span class="params">Object</span> | <span class="params">Function</span>;</span></span><br><span class="line"><span class="function">  <span class="params">caseSensitive</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="params">pathToRegexpOptions</span>?: <span class="params">PathToRegexpOptions</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">RouteRecord</span> = &#123;</span></span><br><span class="line"><span class="function">  <span class="params">path</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">alias</span>: <span class="params">Array</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">regex</span>: <span class="params">RouteRegExp</span>;</span></span><br><span class="line"><span class="function">  <span class="params">components</span>: <span class="params">Dictionary</span>&lt;<span class="params">any</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">instances</span>: <span class="params">Dictionary</span>&lt;<span class="params">any</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">enteredCbs</span>: <span class="params">Dictionary</span>&lt;<span class="params">Array</span>&lt;<span class="params">Function</span>&gt;&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">name</span>: ?<span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">parent</span>: ?<span class="params">RouteRecord</span>;</span></span><br><span class="line"><span class="function">  <span class="params">redirect</span>: ?<span class="params">RedirectOption</span>;</span></span><br><span class="line"><span class="function">  <span class="params">matchAs</span>: ?<span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">beforeEnter</span>: ?<span class="params">NavigationGuard</span>;</span></span><br><span class="line"><span class="function">  <span class="params">meta</span>: <span class="params">any</span>;</span></span><br><span class="line"><span class="function">  <span class="params">props</span>: <span class="params">boolean</span> | <span class="params">Object</span> | <span class="params">Function</span> | <span class="params">Dictionary</span>&lt;<span class="params">boolean</span> | <span class="params">Object</span> | <span class="params">Function</span>&gt;;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">Location</span> = &#123;</span></span><br><span class="line"><span class="function">  _<span class="params">normalized</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="params">name</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">path</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">hash</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">query</span>?: <span class="params">Dictionary</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">params</span>?: <span class="params">Dictionary</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">append</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="params">replace</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">RawLocation</span> = <span class="params">string</span> | <span class="params">Location</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">Route</span> = &#123;</span></span><br><span class="line"><span class="function">  <span class="params">path</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">name</span>: ?<span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">hash</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">query</span>: <span class="params">Dictionary</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">params</span>: <span class="params">Dictionary</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">fullPath</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">matched</span>: <span class="params">Array</span>&lt;<span class="params">RouteRecord</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">redirectedFrom</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">meta</span>?: <span class="params">any</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="install-js-安装全局钩子"><a href="#install-js-安装全局钩子" class="headerlink" title="install.js 安装全局钩子"></a>install.js 安装全局钩子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">'./components/view'</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'./components/link'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> _Vue</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 防止重复安装</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class="keyword">return</span></span><br><span class="line">  install.installed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存Vue实例，并export出来供内部使用</span></span><br><span class="line">  _Vue = Vue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isDef = <span class="function"><span class="params">v</span> =&gt;</span> v !== <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> registerInstance = <span class="function">(<span class="params">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = vm.$options._parentVnode</span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class="line">      i(vm, callVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局混入配置，为每个vue组件都添加钩子函数</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line"><span class="comment">// 如果本身定义了router参数，这里只会出现在跟组件的情况下，因为我们在new Vue并挂载到#app的时候传入的参数</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line"><span class="comment">// _routerRoot 指向根组件</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line"><span class="comment">// 定义在router.js中，具体看后面的解析</span></span><br><span class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line"><span class="comment">// 进入这里的时候，this是根vue实例，this._route指向的是this._router.history.current</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 进入这里说明不是根Vue组件，那么子组件的_routerRoot就是副组件上的_routerRoot</span></span><br><span class="line"><span class="comment">// 这里不需要递归向上寻找是因为Vue组件树的构建是自上而下的，所以只需要寻找上一层就好</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// _routerRoot都指向根Vue实例，则this._routerRoot._router指向的就是new Vue时传入的vue-router实例</span></span><br><span class="line"><span class="comment">// 所以每个Vue组件中的this.$router，会通过原型链找到Vue.prototype.$router，就会找到new Vue时传入的vue-router实例</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// _routerRoot都指向根Vue实例，则this._routerRoot._route指向的就是this._router.history.current</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Vue.component(<span class="string">'RouterView'</span>, View)</span><br><span class="line">  Vue.component(<span class="string">'RouterLink'</span>, Link)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h2><p>上面我们通过install.js挂载VueRouter，我们看一下这个VueRouter是什么。</p><p>这个VueRouter是通过import index.js引入的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'./entries/cjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p><code>./entries/cj</code>内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'../router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p>然后就是router.js的内容了：</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span> (<span class="params">options: RouterOptions = &#123;&#125;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">warn(<span class="keyword">this</span> <span class="keyword">instanceof</span> VueRouter, <span class="string">`Router must be called with the new operator.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.app = <span class="literal">null</span></span><br><span class="line"><span class="keyword">this</span>.apps = []</span><br><span class="line"><span class="keyword">this</span>.options = options</span><br><span class="line"><span class="keyword">this</span>.beforeHooks = []</span><br><span class="line"><span class="keyword">this</span>.resolveHooks = []</span><br><span class="line"><span class="keyword">this</span>.afterHooks = []</span><br><span class="line"><span class="comment">// 这里很关键，matcher根据我们new Router的时候传入的routes构造路由匹配器，我们后面再说</span></span><br><span class="line"><span class="keyword">this</span>.matcher = createMatcher(options.routes || [], <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传入的mode，默认为hash，模式</span></span><br><span class="line"><span class="keyword">let</span> mode = options.mode || <span class="string">'hash'</span></span><br><span class="line"><span class="comment">// supportsPushState 表示当前路由器是否支持pushstate方法，支持了才能使用history api</span></span><br><span class="line"><span class="keyword">this</span>.fallback =</span><br><span class="line">mode === <span class="string">'history'</span> &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.fallback) &#123;</span><br><span class="line">mode = <span class="string">'hash'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!inBrowser) &#123;</span><br><span class="line">mode = <span class="string">'abstract'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.mode = mode</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据不同的模式采取不同的路由history</span></span><br><span class="line"><span class="keyword">switch</span> (mode) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'history'</span>:</span><br><span class="line"><span class="keyword">this</span>.history = <span class="keyword">new</span> HTML5History(<span class="keyword">this</span>, options.base)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'hash'</span>:</span><br><span class="line"><span class="keyword">this</span>.history = <span class="keyword">new</span> HashHistory(<span class="keyword">this</span>, options.base, <span class="keyword">this</span>.fallback)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'abstract'</span>:</span><br><span class="line"><span class="keyword">this</span>.history = <span class="keyword">new</span> AbstractHistory(<span class="keyword">this</span>, options.base)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">assert(<span class="literal">false</span>, <span class="string">`invalid mode: <span class="subst">$&#123;mode&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>这个函数其实就是install.js里面调用的init方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">init (app: <span class="built_in">any</span> <span class="comment">/* Vue component instance */</span>) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">      assert(</span><br><span class="line">        install.installed,</span><br><span class="line">        <span class="string">`not installed. Make sure to call \`Vue.use(VueRouter)\` `</span> +</span><br><span class="line">          <span class="string">`before creating root instance.`</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue-router实际上支持多实例的模式，不过一般用不到</span></span><br><span class="line">    <span class="keyword">this</span>.apps.push(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set up app destroyed handler</span></span><br><span class="line">    <span class="comment">// https://github.com/vuejs/vue-router/issues/2639</span></span><br><span class="line">    app.$once(<span class="string">'hook:destroyed'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// clean out app from this.apps array once destroyed</span></span><br><span class="line">      <span class="keyword">const</span> index = <span class="keyword">this</span>.apps.indexOf(app)</span><br><span class="line">      <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) <span class="keyword">this</span>.apps.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="comment">// ensure we still have a main app or null if no apps</span></span><br><span class="line">      <span class="comment">// we do not release the router so it can be reused</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.app === app) <span class="keyword">this</span>.app = <span class="keyword">this</span>.apps[<span class="number">0</span>] || <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.app) <span class="keyword">this</span>.history.teardown()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main app previously initialized</span></span><br><span class="line">    <span class="comment">// return as we don't need to set up new history listener</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.app = app</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.history</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是HTML5History或者HashHistory，调用二者的setupListeners</span></span><br><span class="line">    <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HTML5History || history <span class="keyword">instanceof</span> HashHistory) &#123;</span><br><span class="line">      <span class="keyword">const</span> handleInitialScroll = <span class="function"><span class="params">routeOrError</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">from</span> = history.current</span><br><span class="line">        <span class="keyword">const</span> expectScroll = <span class="keyword">this</span>.options.scrollBehavior</span><br><span class="line">        <span class="keyword">const</span> supportsScroll = supportsPushState &amp;&amp; expectScroll</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (supportsScroll &amp;&amp; <span class="string">'fullPath'</span> <span class="keyword">in</span> routeOrError) &#123;</span><br><span class="line">          handleScroll(<span class="keyword">this</span>, routeOrError, <span class="keyword">from</span>, <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> setupListeners = <span class="function"><span class="params">routeOrError</span> =&gt;</span> &#123;</span><br><span class="line">        history.setupListeners()</span><br><span class="line">        handleInitialScroll(routeOrError)</span><br><span class="line">      &#125;</span><br><span class="line">      history.transitionTo(</span><br><span class="line">        history.getCurrentLocation(),</span><br><span class="line">        setupListeners,</span><br><span class="line">        setupListeners</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    history.listen(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.apps.forEach(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">        app._route = route</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="create-matcher-js"><a href="#create-matcher-js" class="headerlink" title="create-matcher.js"></a>create-matcher.js</h2><p>这个函数返回了一个Matcher，它的类型声明如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Matcher = &#123;</span><br><span class="line">  match: <span class="function">(<span class="params">raw: RawLocation, current?: Route, redirectedFrom?: Location</span>) =&gt;</span> Route;</span><br><span class="line">  addRoutes: <span class="function">(<span class="params">routes: <span class="built_in">Array</span>&lt;RouteConfig&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  addRoute: <span class="function">(<span class="params">parentNameOrRoute: <span class="built_in">string</span> | RouteConfig, route?: RouteConfig</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  getRoutes: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Array</span>&lt;RouteRecord&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码第一行：<code>const { pathList, pathMap, nameMap } = createRouteMap(routes)</code></p><h3 id="create-route-map-js"><a href="#create-route-map-js" class="headerlink" title="create-route-map.js"></a>create-route-map.js</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouteMap</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  routes: <span class="built_in">Array</span>&lt;RouteConfig&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldPathList?: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldPathMap?: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldNameMap?: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentRoute?: RouteRecord</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  pathList: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;,</span><br><span class="line">  pathMap: Dictionary&lt;RouteRecord&gt;,</span><br><span class="line">  nameMap: Dictionary&lt;RouteRecord&gt;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="comment">// the path list is used to control path matching priority</span></span><br><span class="line">  <span class="keyword">const</span> pathList: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = oldPathList || []</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> pathMap: Dictionary&lt;RouteRecord&gt; = oldPathMap || <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> nameMap: Dictionary&lt;RouteRecord&gt; = oldNameMap || <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历传入的routes，这里只需要遍历第一层是因为addRouteRecord本身就会进行递归</span></span><br><span class="line"><span class="comment">// 这段代码就是一个多源DFS遍历路由配置，然后为每一个路由配置生成record，存储进pathList，pathMap，nameMap中</span></span><br><span class="line">  routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    addRouteRecord(pathList, pathMap, nameMap, route, parentRoute)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 * 的路由放在最后</span></span><br><span class="line">  <span class="comment">// ensure wildcard routes are always at the end</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = pathList.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathList[i] === <span class="string">'*'</span>) &#123;</span><br><span class="line">      pathList.push(pathList.splice(i, <span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">      l--</span><br><span class="line">      i--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="comment">// warn if routes do not include leading slashes</span></span><br><span class="line">    <span class="keyword">const</span> found = pathList</span><br><span class="line">    <span class="comment">// check for missing leading slash</span></span><br><span class="line">      .filter(<span class="function"><span class="params">path</span> =&gt;</span> path &amp;&amp; path.charAt(<span class="number">0</span>) !== <span class="string">'*'</span> &amp;&amp; path.charAt(<span class="number">0</span>) !== <span class="string">'/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (found.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> pathNames = found.map(<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">`- <span class="subst">$&#123;path&#125;</span>`</span>).join(<span class="string">'\n'</span>)</span><br><span class="line">      warn(<span class="literal">false</span>, <span class="string">`Non-nested routes must include a leading slash character. Fix the following routes: \n<span class="subst">$&#123;pathNames&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    pathList,</span><br><span class="line">    pathMap,</span><br><span class="line">    nameMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRouteRecord</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  pathList: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  pathMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  nameMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  route: RouteConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">  parent?: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  matchAs?: <span class="built_in">string</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; path, name &#125; = route</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assert(path != <span class="literal">null</span>, <span class="string">`"path" is required in a route configuration.`</span>)</span><br><span class="line">    assert(</span><br><span class="line">      <span class="keyword">typeof</span> route.component !== <span class="string">'string'</span>,</span><br><span class="line">      <span class="string">`route config "component" for path: <span class="subst">$&#123;<span class="built_in">String</span>(</span></span></span><br><span class="line"><span class="string"><span class="subst">        path || name</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span> cannot be a `</span> + <span class="string">`string id. Use an actual component instead.`</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    warn(</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-control-regex</span></span><br><span class="line">      !<span class="regexp">/[^\u0000-\u007F]+/</span>.test(path),</span><br><span class="line">      <span class="string">`Route with path "<span class="subst">$&#123;path&#125;</span>" contains unencoded characters, make sure `</span> +</span><br><span class="line">        <span class="string">`your path is correctly encoded before passing it to the router. Use `</span> +</span><br><span class="line">        <span class="string">`encodeURI to encode static segments of your path.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的内容主要是参数检测，可以不看</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pathToRegexpOptions: PathToRegexpOptions =</span><br><span class="line">    route.pathToRegexpOptions || &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化路径，并且把子路由的路径和它的父级路由拼接，比如把/foo和/bar拼接起来</span></span><br><span class="line">  <span class="keyword">const</span> normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> route.caseSensitive === <span class="string">'boolean'</span>) &#123;</span><br><span class="line">    pathToRegexpOptions.sensitive = route.caseSensitive</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> record: RouteRecord = &#123;</span><br><span class="line">    path: normalizedPath,</span><br><span class="line">    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),</span><br><span class="line">    components: route.components || &#123; <span class="keyword">default</span>: route.component &#125;,</span><br><span class="line">    alias: route.alias</span><br><span class="line">      ? <span class="keyword">typeof</span> route.alias === <span class="string">'string'</span></span><br><span class="line">        ? [route.alias]</span><br><span class="line">        : route.alias</span><br><span class="line">      : [],</span><br><span class="line">    instances: &#123;&#125;,</span><br><span class="line">    enteredCbs: &#123;&#125;,</span><br><span class="line">    name,</span><br><span class="line">    parent,</span><br><span class="line">    matchAs,</span><br><span class="line">    redirect: route.redirect,</span><br><span class="line">    beforeEnter: route.beforeEnter,</span><br><span class="line">    meta: route.meta || &#123;&#125;,</span><br><span class="line">    props:</span><br><span class="line">      route.props == <span class="literal">null</span></span><br><span class="line">        ? &#123;&#125;</span><br><span class="line">        : route.components</span><br><span class="line">          ? route.props</span><br><span class="line">          : &#123; <span class="keyword">default</span>: route.props &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有children嵌套路由，递归调用本身</span></span><br><span class="line">  <span class="keyword">if</span> (route.children) &#123;</span><br><span class="line">    <span class="comment">// Warn if route is named, does not redirect and has a default child route.</span></span><br><span class="line">    <span class="comment">// If users navigate to this route by name, the default child will</span></span><br><span class="line">    <span class="comment">// not be rendered (GH Issue #629)</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        route.name &amp;&amp;</span><br><span class="line">        !route.redirect &amp;&amp;</span><br><span class="line">        route.children.some(<span class="function"><span class="params">child</span> =&gt;</span> /^\/?$/.test(child.path))</span><br><span class="line">      ) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="string">`Named Route '<span class="subst">$&#123;route.name&#125;</span>' has a default child route. `</span> +</span><br><span class="line">            <span class="string">`When navigating to this named route (:to="&#123;name: '<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">              route.name</span></span></span><br><span class="line"><span class="string"><span class="subst">            &#125;</span>'&#125;"), `</span> +</span><br><span class="line">            <span class="string">`the default child route will not be rendered. Remove the name from `</span> +</span><br><span class="line">            <span class="string">`this route and use the name of the default child route for named `</span> +</span><br><span class="line">            <span class="string">`links instead.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    route.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> childMatchAs = matchAs</span><br><span class="line">        ? cleanPath(<span class="string">`<span class="subst">$&#123;matchAs&#125;</span>/<span class="subst">$&#123;child.path&#125;</span>`</span>)</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将计算出来的record存储到pathList和pathMap中</span></span><br><span class="line">  <span class="keyword">if</span> (!pathMap[record.path]) &#123;</span><br><span class="line">    pathList.push(record.path)</span><br><span class="line">    pathMap[record.path] = record</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (route.alias !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> aliases = <span class="built_in">Array</span>.isArray(route.alias) ? route.alias : [route.alias]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aliases.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">const</span> alias = aliases[i]</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; alias === path) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="string">`Found an alias with the same value as the path: "<span class="subst">$&#123;path&#125;</span>". You have to remove that alias. It will be ignored in development.`</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// skip in dev to make it work</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> aliasRoute = &#123;</span><br><span class="line">        path: alias,</span><br><span class="line">        children: route.children</span><br><span class="line">      &#125;</span><br><span class="line">      addRouteRecord(</span><br><span class="line">        pathList,</span><br><span class="line">        pathMap,</span><br><span class="line">        nameMap,</span><br><span class="line">        aliasRoute,</span><br><span class="line">        parent,</span><br><span class="line">        record.path || <span class="string">'/'</span> <span class="comment">// matchAs</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果路由配置中有name属性，添加name和routeConfig的映射</span></span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nameMap[name]) &#123;</span><br><span class="line">      nameMap[name] = record</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !matchAs) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">`Duplicate named routes definition: `</span> +</span><br><span class="line">          <span class="string">`&#123; name: "<span class="subst">$&#123;name&#125;</span>", path: "<span class="subst">$&#123;record.path&#125;</span>" &#125;`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天遇到个问题，就是在vue-router嵌套子路由的时候，如果深层的router-view组件没有声明key，且路由配置中的component是函数式的组件，就会导致在router.push的时候无法更新。&lt;/p&gt;
&lt;p&gt;对于函数式组件和函数式编程，需要了记得可以我之前的&lt;a href=&quot;https://sunra.top/2022/12/10/functional-programming-and-component/&quot;&gt;相关博客&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;本文主要是分析vue-router的源码，vue-router的源码主要是两部分，第一部分是做路由匹配，第二部分是做路由跳转的，本文先主要关注第一部分&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://sunra.top/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>函数式组件与函数式编程</title>
    <link href="https://sunra.top/2022/12/10/functional-programming-and-component/"/>
    <id>https://sunra.top/2022/12/10/functional-programming-and-component/</id>
    <published>2022-12-10T00:51:27.000Z</published>
    <updated>2022-12-10T13:02:16.458Z</updated>
    
    <content type="html"><![CDATA[<p>函数式编程和函数式组件是现在开发的一个趋势，过去一直在用，但是没有从概念上理解，本文就把二者放在一起总结一下并进行一定的对比。</p><p>函数式编程是一种编程范式，而函数式组件是这种范式下的一种产物。</p><a id="more"></a><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><p>编程范型、编程范式或程序设计法（英语：Programming paradigm），是指软件工程中的一类典型的编程风格。常见的编程范型有：函数式编程、指令式编程、过程式编程、面向对象编程等等。</p><p>编程范型提供并决定了程序员对程序执行的看法。例如，在面向对象编程中，程序员认为程序是一系列相互作用的对象，由于方法论的不同，面向对象编程范型又分为基于类编程和基于原型编程，而在函数式编程中一个程序会被看作是一个无状态的函数计算的序列。</p><blockquote><p>编程范式与编程语言不同，比如面向对象语言，只是说该语言提供了比较方便的封装，继承，多态的语法，不代表你只能写出面向对象的代码，也不代表你写出来的代码符合面向对象的范式</p></blockquote><p>编程范式还有很多，这里贴一下维基百科的目录：</p><ul><li>指令式<ul><li>过程式</li><li>块结构</li><li>结构化</li><li>模块化</li></ul></li><li>函数式<ul><li>头等函数</li><li>纯函数式</li><li>隐式</li><li>模式匹配</li><li>推导式</li></ul></li><li>面向对象<ul><li>基于类</li><li>基于原型</li><li>契约式</li><li>面向切面</li><li>面向代理</li></ul></li><li>阵列式</li><li>数据流程<ul><li>同步式</li><li>响应式</li><li>流处理</li><li>基于流程</li></ul></li></ul><h2 id="函数式编程是一种编程范式"><a href="#函数式编程是一种编程范式" class="headerlink" title="函数式编程是一种编程范式"></a>函数式编程是一种编程范式</h2><p>函数式编程，或称函数程序设计、泛函编程（英语：Functional programming），是一种编程范型，它将电脑运算视为函数运算，并且避免使用程序状态以及可变对象。</p><p><strong>在函数式编程中，函数是头等对象即头等函数，这意味着一个函数，既可以作为其它函数的输入参数值，也可以从函数中返回值</strong>，被修改或者被分配给一个变量。λ演算是这种范型最重要的基础，λ演算的函数可以接受函数作为输入参数和输出返回值。</p><p><strong>比起指令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程</strong>。</p><h2 id="什么叫函数式编程"><a href="#什么叫函数式编程" class="headerlink" title="什么叫函数式编程"></a>什么叫函数式编程</h2><p>从上面那段定义可以提取出这几个关键词：</p><ol><li>避免状态变更</li><li>函数作为输入输出</li><li>和λ演算有关</li></ol><p>关于这段定义，如果只是想简单理解函数式编程的表现形式是怎样的，可以看一下<a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html" rel="external nofollow noopener noreferrer" target="_blank">阮一峰的这篇博客</a></p><p>如果想深入理解，也建议先读读上面那个博客，很短，但是有助于理解下面的某些公式的形式。</p><p>避免状态变更和函数作为输入输出都比较好理解，，那什么叫做lambda演算呢？要理解lambda演算，就会扯出图灵完备，图灵机。接下来我简单和大家解释一下。</p><h3 id="什么叫表达式"><a href="#什么叫表达式" class="headerlink" title="什么叫表达式"></a>什么叫表达式</h3><p>λ演算（英语：lambda calculus，λ-calculus）是一套从数学逻辑中发展，以变量绑定和替换的规则，来研究函数如何抽象化定义、函数如何被应用以及递归的形式系统。它由数学家阿隆佐·邱奇在20世纪30年代首次发表。<strong>lambda演算作为一种广泛用途的计算模型，可以清晰地定义什么是一个可计算函数，而任何可计算函数都能以这种形式表达和求值，它能模拟单一磁带图灵机的计算过程</strong>；尽管如此，lambda演算强调的是变换规则的运用，而非实现它们的具体机器。</p><p><strong>lambda演算可比拟是最根本的编程语言，它包括了一条变换规则（变量替换）和一条将函数抽象化定义的方式</strong>。因此普遍公认是一种更接近软件而非硬件的方式。对函数式编程语言造成很大影响，比如Lisp、ML语言和Haskell语言。在1936年邱奇利用λ演算给出了对于判定性问题（Entscheidungsproblem）的否定：关于两个lambda表达式是否等价的命题，无法由一个“通用的算法”判断，这是不可判定性能够证明的头一个问题，甚至还在<a href="https://zh.m.wikipedia.org/zh-cn/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98" rel="external nofollow noopener noreferrer" target="_blank">停机问题</a>之先。</p><p>lambda演算包括了建构lambda项，和对lambda项执行归约的操作。在最简单的lambda演算中，只使用以下的规则来建构lambda项：</p><div class="table-container"><table><thead><tr><th>语法</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>变量</td><td>用字符或字符串来表示参数或者数学上的值或者表示逻辑上的值</td></tr><tr><td>(λx.M)</td><td>抽象化</td><td>一个完整的函数定义（M是一个 lambda 项），在表达式中的 x 都会绑定为变量 x。</td></tr><tr><td>(M N)</td><td>应用</td><td>将函数M作用于参数N。 M 和 N 是 lambda 项。</td></tr></tbody></table></div><p>产生了诸如：(λx.λy.(λz.(λx.zx)(λy.zy))(x y))的表达式。如果表达式是明确而没有歧义的，则括号可以省略。对于某些应用，其中可能包括了逻辑和数学的常量以及相关操作。</p><p><strong>λ演算是图灵完备的，也就是说，这是一个可以用于模拟任何图灵机的通用模型</strong>。λ也被用在λ表达式和λ项中，用来表示将一个变量绑定在一个函数上。</p><p>λ演算可以是有类型或者无类型的，在有类型λ演算中（上文所述是无类型的），函数只能在参数类型和输入类型符合时被应用。有类型λ演算比无类型λ演算要弱——后者是这个条目的主要部分——因为有类型的λ运算能表达的比无类型λ演算少；与此同时，前者使得更多定理能被证明。例如，在简单类型λ演算中，运算总是能够停止，然而无类型λ演算中这是不一定的（因为停机问题）。目前有许多种有类型λ演算的一个原因是它们被期望能做到更多（做到某些以前的有类型λ演算做不到的）的同时又希望能用以证明更多定理。</p><p>λ演算在数学、哲学、语言学和计算机科学中都有许多应用。它在编程语言理论中占有重要地位，函数式编程实现了λ演算支持。λ演算在范畴论中也是一个研究热点。</p><p>λ演算式就三个要点：</p><ul><li>绑定关系。变量任意性，x、y和z都行，它仅仅是具体数据的代称。</li><li>递归定义。λ项递归定义，M可以是一个λ项。</li><li>替换归约。λ项可应用，空格分隔表示对M应用N，N可以是一个λ项。</li></ul><p>通过变量代换（substitution）和归约（reduction），我们可以像化简方程一样处理我们的演算。</p><p>举个例子，刚才我们说的<code>(λx.λy.(λz.(λx.zx)(λy.zy))(x y))</code>，首先<code>(λx.zx)</code>表示<code>f(x) = zx</code>，那么 <code>(λx.zx) 3</code> 就是<code>3z</code></p><h3 id="演算：变量的含义"><a href="#演算：变量的含义" class="headerlink" title="演算：变量的含义"></a>演算：变量的含义</h3><p>在λ演算中我们的表达式只有一个参数，那它怎么实现两个数字的二元操作呢？比如加法a + b，需要两个参数。</p><p>这时，我们要把函数本身也视为值，可以通过把一个变量绑定到上下文，然后返回一个新的函数，来实现数据（或者说是状态）的保存和传递，被绑定的变量可以在需要实际使用的时候从上下文中引用到。</p><p>比如：<code>λm.λn.m + n 5 = λn.5 + n</code>,第一次函数调用传入m=5，返回一个新函数，这个新函数接收一个参数n，并返回m + n的结果。像这种情况产生的上下文，<strong>就是Closure（闭包，函数式编程常用的状态保存和引用手段）</strong>，我们称变量m是被绑定（binding）到了第二个函数的上下文。</p><p>除了绑定的变量，λ演算也支持自由的变量，比如这个y：<code>λm.λn.m + n + y</code>,这里的y是一个没有绑定到参数位置的变量，被称为一个自由变量。</p><p>绑定变量和自由变量是函数的两种状态来源，一个可以被代换，另一个不能。实际程序中，<strong>通常把绑定变量实现为局部变量或者参数，自由变量实现为全局变量或者环境变量</strong>。</p><h3 id="演算：代换和归约"><a href="#演算：代换和归约" class="headerlink" title="演算：代换和归约"></a>演算：代换和归约</h3><p>演算分为Alpha代换和Beta归约。 前面章节我们实际上已经涉及这两个概念，下面来介绍一下它们。</p><p>Alpha代换指的是变量的名称是不重要的，你可以写λm.λn.m + n，也可以写λx.λy.x + y，在演算过程中它们表示同一个函数。也就是说我们只关心计算的形式，而不关心细节用什么变量去实现。这方便我们不改变运算结果的前提下去修改变量命名，以方便在函数比较复杂的情况下进行化简操作。实际上，连整个lambda演算式的名字也是不重要的，我们只需要这种形式的计算，而不在乎这个形式的命名。</p><p>Beta归约指的是如果你有一个函数应用（函数调用），那么你可以对这个函数体中与标识符对应的部分做代换（substitution），方式为使用参数（可能是另一个演算式）去替换标识符。听起来有点绕口，但是它实际上就是函数调用的参数替换。比如：<code>(λm.λn.m + n) 1 3 = (λn.1 + n) 3 = 1 + 3 = 4</code></p><p>可以使用1替换m，3替换n，那么整个表达式可以化简为4。这也是函数式编程里面的<a href="https://caowenwei.github.io/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/pure-function-rt/" rel="external nofollow noopener noreferrer" target="_blank">引用透明性</a>的由来。需要注意的是，这里的1和3表示表达式运算值，可以替换为其他表达式。比如把1替换为(λm.λn.m + n 1 3)，这里就需要做两次归约</p><h3 id="JavaScript中的λ表达式：箭头函数"><a href="#JavaScript中的λ表达式：箭头函数" class="headerlink" title="JavaScript中的λ表达式：箭头函数"></a>JavaScript中的λ表达式：箭头函数</h3><p>ECMAScript 2015规范引入了箭头函数，它没有this，没有arguments。只能作为一个表达式（expression）而不能作为一个声明式（statement），表达式产生一个箭头函数引用，该箭头函数引用仍然有name和length属性，分别表示箭头函数的名字、形参（parameters）长度。一个箭头函数就是一个单纯的运算式，箭头函数我们也可以称为lambda函数，它在书写形式上就像是一个λ演算式。</p><p>可以利用箭头函数做一些简单的运算，下例比较了四种箭头函数的使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add_1 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y; <span class="comment">// 全部为局部变量</span></span><br><span class="line"><span class="keyword">const</span> add_2 = <span class="function"><span class="params">x</span> =&gt;</span> x + y; <span class="comment">// y为全局变量</span></span><br><span class="line"><span class="keyword">const</span> add_3 = <span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y; <span class="comment">// 闭包串联参数，柯里化</span></span><br><span class="line"><span class="keyword">const</span> add_4 = <span class="function"><span class="params">b</span> =&gt;</span> <span class="function"><span class="params">a</span> =&gt;</span> a + b; <span class="comment">// 参数命名和表达式结果无关</span></span><br></pre></td></tr></table></figure><p>这是直接针对数字（基本数据类型）的情况，如果是针对函数做运算（引用数据类型），事情就变得有趣起来了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn_1 = <span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x(y);</span><br><span class="line"><span class="keyword">const</span> fn_2 = <span class="function"><span class="params">f</span> =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> f(x);</span><br><span class="line"><span class="keyword">const</span> add_1 = (<span class="function"><span class="params">f</span> =&gt;</span> f(<span class="number">5</span>))(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> add_2 = (<span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y)(<span class="number">2</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> add_3 = (<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>)(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>fn_x类型，表明我们可以利用函数内的函数，当函数被当作数据传递的时候，就可以对函数进行应用（apply），生成更高阶的操作。 并且x =&gt; y =&gt; x(y)可以有两种理解，一种是x =&gt; y函数传入X =&gt; x(y)，另一种是x传入y =&gt; x(y)。</p><p>add_x类型表明，一个运算式可以有很多不同的路径来实现。</p><h3 id="函数式编程基础：函数的元、柯里化和Point-Free"><a href="#函数式编程基础：函数的元、柯里化和Point-Free" class="headerlink" title="函数式编程基础：函数的元、柯里化和Point-Free"></a>函数式编程基础：函数的元、柯里化和Point-Free</h3><p>回到JavaScript本身，我们要探究函数本身能不能带给我们更多的东西？我们在JavaScript中有很多创建函数的方式：</p><p>可以通过声明式，表达式，箭头函数，new Function等方式</p><p>虽然函数有这么多定义，但function关键字声明的函数带有arguments和this关键字，这让他们看起来更像是对象方法（method），而不是函数（function） 。</p><p>况且function定义的函数大多数还能被构造（比如new Array）。</p><p>接下来我们将只研究箭头函数，因为它更像是数学意义上的函数（仅执行计算过程）。</p><ul><li>没有arguments和this。</li><li>不可以被构造new。</li></ul><h4 id="函数的元"><a href="#函数的元" class="headerlink" title="函数的元"></a>函数的元</h4><p>不论使用何种方式去构造一个函数，这个函数都有两个固定的信息可以获取：</p><ul><li>name 表示当前标识符指向的函数的名字。</li><li>length 表示当前标识符指向的函数定义时的参数列表长度。</li></ul><p>在数学上，我们定义f(x) = x是一个一元函数，而f(x, y) = x + y是一个二元函数。在JavaScript中我们可以使用函数定义时的length来定义它的元。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="function"><span class="params">a</span> =&gt;</span> a;</span><br><span class="line"><span class="keyword">const</span> two = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">const</span> three = <span class="function">(<span class="params">a, b, c</span>) =&gt;</span> a + b + c;</span><br></pre></td></tr></table></figure><p>定义函数的元的意义在于，我们可以对函数进行归类，并且可以明确一个函数需要的确切参数个数。函数的元在编译期（类型检查、重载）和运行时（异常处理、动态生成代码）都有重要作用。</p><p>如果我给你一个二元函数，你就知道需要传递两个参数。比如+就可以看成是一个二元函数，它的左边接受一个参数，右边接受一个参数，返回它们的和（或字符串连接）。</p><p>在一些其他语言中，+确实也是由抽象类来定义实现的，比如Rust语言的trait Add。</p><p>但我们上面看到的λ演算，每个函数都只有一个元。为什么呢？</p><p>只有一个元的函数方便我们进行代数运算。λ演算的参数列表使用λx.λy.λz的格式进行分割，返回值一般都是函数，如果一个二元函数，调用时只使用了一个参数，则返回一个「不完全调用函数」。这里用三个例子解释“不完全调用”。</p><h4 id="柯里化函数：函数元降维技术"><a href="#柯里化函数：函数元降维技术" class="headerlink" title="柯里化函数：函数元降维技术"></a>柯里化函数：函数元降维技术</h4><p>柯里化（curry）函数是一种把函数的元降维的技术，这个名词是为了纪念我们上文提到的数学家阿隆佐·邱奇。</p><p>柯里化函数帮助我们把一个多元函数变成一个不完全调用，利用Closure的魔法，把函数调用变成延迟的偏函数(不完全调用函数)调用。这在函数组合、复用等场景非常有用</p><h4 id="Point-Free｜无参风格：函数的高阶组合"><a href="#Point-Free｜无参风格：函数的高阶组合" class="headerlink" title="Point-Free｜无参风格：函数的高阶组合"></a>Point-Free｜无参风格：函数的高阶组合</h4><p>函数式编程中有一种Point-Free风格，中文语境大概可以把point认为是参数点，对应λ演算中的函数应用（Function Apply），或者JavaScript中的函数调用（Function Call），所以可以理解Point-Free就指的是无参调用。</p><p>来看一个日常的例子，把二进制数据转换为八进制数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strNums = [<span class="string">'01'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'1110'</span>];</span><br><span class="line">strNums.map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">2</span>)).map(<span class="function"><span class="params">x</span> =&gt;</span> x.toString(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>这段代码运行起来没有问题，但我们为了处理这个转换，需要了解 parseInt(x, 2) 和 toString(8) 这两个函数（为什么有魔法数字2和魔法数字8），并且要关心数据（函数类型a -&gt; b）在每个节点的形态（关心数据的流向）。有没有一种方式，可以让我们只关心入参和出参，不关心数据流动过程呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toBinary = <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x,  <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> toString0x =&gt; <span class="function"><span class="params">x</span> =&gt;</span> x.toString(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> pipe = <span class="function">(<span class="params">...fns</span>) =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> fns.reduce(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> fn(acc), x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strNums = [<span class="string">'01'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'1110'</span>];</span><br><span class="line">strNums.map(pipe(toBinary, toString0x));</span><br></pre></td></tr></table></figure><h1 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h1><h2 id="什么叫函数式组件"><a href="#什么叫函数式组件" class="headerlink" title="什么叫函数式组件"></a>什么叫函数式组件</h2><p>函数式组件就是函数是组件，组件是函数，它的特征是没有内部状态、没有生命周期钩子函数、没有this（不需要实例化的组件）。</p><p>在日常开发中，我们经常会开发一些纯展示性的业务组件，比如一些详情页面，列表界面等，它们有一个共同的特点是：</p><p>只要你传入数据，我就进行展现。</p><p>不需要有内部状态，不需要在生命周期钩子函数里面做处理。</p><p>这时候你就可以用函数式组件。</p><h2 id="为什么要用函数式组件"><a href="#为什么要用函数式组件" class="headerlink" title="为什么要用函数式组件"></a>为什么要用函数式组件</h2><p>函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件</p><p>函数式组件结构更简单，代码结构更清晰</p><h2 id="Vue2-的函数式组件"><a href="#Vue2-的函数式组件" class="headerlink" title="Vue2 的函数式组件"></a>Vue2 的函数式组件</h2><ol><li><p>函数式组件需要在声明组件是指定functional。</p></li><li><p>函数式组件不需要实例化，所以没有this，this通过render函数的第二个参数来代替。</p></li><li><p>函数式组件没有生命周期钩子函数，不能使用计算属性，watch等等。</p></li><li><p>函数式组件不能通过$emit对外暴露事件，调用事件只能通过context.listeners.click的方式调用外部传入的事件。</p></li><li><p>因为函数式组件是没有实例化的，所以在外部通过ref去引用组件时，实际引用的是HTMLElement。</p></li><li><p>函数式组件的props可以只声明一部分或者全都不声明，所有没有在props里面声明的属性都会被自动隐式解析为prop，而普通组件所有未声明的属性都被解析到$attrs里面，并自动挂载到组件根元素上面(可以通过inheritAttrs属性禁止)。</p></li></ol><p>上面已经反复强调，凡是不需要实例化，无状态，没有生命周期的组件，除了props之外没有别的配置项，都可以改写成函数式组件。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;func text=<span class="string">"aaaaaaaa"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> func <span class="keyword">from</span> <span class="string">'@/components/func.vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    func</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;props.text ? props.text : <span class="string">'哈哈'</span>&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意，没有<code>&lt;script&gt;...&lt;/script&gt;</code>部分。</p></blockquote><h4 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    text: &#123;</span><br><span class="line">      type: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 渲染函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">h</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>context 函数式组件没有this, props, slots等都在context上面挂着</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  render(h, context) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(context);</span><br><span class="line">    <span class="keyword">const</span> &#123; props &#125; = context</span><br><span class="line">    <span class="keyword">if</span> (props.text) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈嗝<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue3-的函数式组件"><a href="#Vue3-的函数式组件" class="headerlink" title="Vue3 的函数式组件"></a>Vue3 的函数式组件</h2><p><a href="https://www.javascriptc.com/vue3js/guide/migration/functional-components.html#%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6" rel="external nofollow noopener noreferrer" target="_blank">Vue3 函数式组件</a></p><h2 id="React-的函数式组件"><a href="#React-的函数式组件" class="headerlink" title="React 的函数式组件"></a>React 的函数式组件</h2><p><a href="https://zh-hans.reactjs.org/docs/components-and-props.html" rel="external nofollow noopener noreferrer" target="_blank">React 函数式组件</a></p><p>参考文章：</p><p><a href="https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html" rel="external nofollow noopener noreferrer" target="_blank">https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html</a></p><p><a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.ruanyifeng.com/blog/2012/04/functional_programming.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数式编程和函数式组件是现在开发的一个趋势，过去一直在用，但是没有从概念上理解，本文就把二者放在一起总结一下并进行一定的对比。&lt;/p&gt;
&lt;p&gt;函数式编程是一种编程范式，而函数式组件是这种范式下的一种产物。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 设计模式学习与实践（二）</title>
    <link href="https://sunra.top/2022/11/28/javascript-design-pattern-2/"/>
    <id>https://sunra.top/2022/11/28/javascript-design-pattern-2/</id>
    <published>2022-11-28T01:40:55.000Z</published>
    <updated>2022-11-28T07:47:56.037Z</updated>
    
    <content type="html"><![CDATA[<p>我们接着上一篇博客继续总结和学习JavaScript的常用设计模式，这一次我们总结两个在JavaScript角度来讲比较像的模式，也就是代理模式，策略模式。</p><p>这两个模式在非函数式编程编程的语言中，如Java中区别是比较明显的，但是用JavaScript来看则是比较相似的。</p><a id="more"></a><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="策略模式定义"><a href="#策略模式定义" class="headerlink" title="策略模式定义"></a>策略模式定义</h3><p>在程序设计中，我们常常遇到这种情况，要实现某一个功能有多种方案可供选择。比如一个压缩文件的程序，既可以选择zip算法，也可以选择gzip算法</p><p>这些算法灵活多样，而且可以随意互相替。这种解决方案就是策略模式。</p><p>策略模式的定义是：<strong>定义一系列的算法，把它们一个个封装起来，并且使他们可以相互替换</strong>。</p><h3 id="使用策略模式计算奖金"><a href="#使用策略模式计算奖金" class="headerlink" title="使用策略模式计算奖金"></a>使用策略模式计算奖金</h3><p>比如我们现在有个需求，年底发放的奖金是根据绩效决定的，绩效S的是4个月的工资，A的3个月，B的2个月</p><h4 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'S'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'A'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'B'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码十分简单，但是也存在很多的缺点：</p><ul><li>calculateBonus函数比较庞大，包含了很多if-else语句，这些语句需要覆盖所有分支</li><li>calculateBonus函数缺乏弹性，如果增加一种新的绩效等级C，或者想把绩效系数改为5，我们必须深入calculateBonus函数内部实现，这违反开闭原则</li><li>算法的复用性差，如果在程序的其他地方复用其中部分奖金的算法，只有复制粘贴</li></ul><h4 id="使用策略模式重构代码"><a href="#使用策略模式重构代码" class="headerlink" title="使用策略模式重构代码"></a>使用策略模式重构代码</h4><p>将不变的部分和变化的部分分隔开是每个设计模式的主题，策略模式也不例外，<strong>策略模式的目的是将算法的使用与算法的实现分离开来</strong>。</p><p>在我们的这个例子中，算法的使用方式是不变的，都是根据某个算法取得计算后的奖金数额。而算法的实现是变化的，不同的绩效对应着不同的的计算规则</p><p>一个基于策略模式的程序至少有两部分组成，第一部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二部分是环境类Context，Context接受客户的请求，随后把请求委托给一个具体的策略类。要做到这一点，说明Context中要维持对某个策略对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performanceS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceS.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceA.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceB.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Bonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.strategy = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bonus.prototype.setSalary = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bonus.prototype.setStrategy = <span class="function"><span class="keyword">function</span>(<span class="params">strategy</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bonus.prototype.getBonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calculate(<span class="keyword">this</span>.salary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在客户对Context发起请求时，Context总是把请求委托给这些策略对象中的一种。</p><h4 id="JavaScript版本的策略模式"><a href="#JavaScript版本的策略模式" class="headerlink" title="JavaScript版本的策略模式"></a>JavaScript版本的策略模式</h4><p>我们一开始就说过，JavaScript的函数式编程会让某些设计模式具体实现变得不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    <span class="string">'S'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'A'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'B'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span> (<span class="params">level, salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="代理模式定义"><a href="#代理模式定义" class="headerlink" title="代理模式定义"></a>代理模式定义</h3><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对他的访问。</p><p>代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求作出一些处理后，再把请求转交给对象本身。</p><p>当策略模式只有一个策略的时候，代理模式和策略模式看起来比较像，主要区别是，代理模式是代理对目标对象的访问，而策略模式则是执行不同的策略。</p><h3 id="使用代理模式来送花"><a href="#使用代理模式来送花" class="headerlink" title="使用代理模式来送花"></a>使用代理模式来送花</h3><p>假设小明想要送花给A，我们用代码来模拟这个过程就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">        target.receiveFlower(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        consoloe.log(<span class="string">`收到<span class="subst">$&#123;flower&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(A);</span><br></pre></td></tr></table></figure><p>我们引入B来帮我们送花的话，就是代理模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">        target.receiveFlower(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        A.receiveFlower(flower)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        consoloe.log(<span class="string">`收到<span class="subst">$&#123;flower&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(B);</span><br></pre></td></tr></table></figure><p>但是这段代码看起来好像除了绕了一圈，并没有什么实际用处。</p><p>当然，也确实如此，不过如果我们再加一个需求就是，我们需要A心情好的时候再送花，而只有B知道A什么时候心情好，这个代理模式就有用处了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">        target.receiveFlower(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        A.listenGoodMoon(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            A.receiveFlower(flower)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        consoloe.log(<span class="string">`收到<span class="subst">$&#123;flower&#125;</span>`</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    listenGoodMood: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        callback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(B);</span><br></pre></td></tr></table></figure><h3 id="保护代理和虚拟代理"><a href="#保护代理和虚拟代理" class="headerlink" title="保护代理和虚拟代理"></a>保护代理和虚拟代理</h3><p>上面的例子虽然简单，但是我们可以看到两种代理的身影。代理B可以帮助代理A过滤到一些请求，这种就叫做保护代理。</p><p>而如果new Flower是一个代价比较大的操作，我们可以将new Flower的操作交给B去做，从而节省开销，这种就叫做虚拟代理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        A.listenGoodMoon(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">            A.receiveFlower(flower);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h3><p>在web开发中，如果给某个img标签节点设置src属性，如果图片过大或者网络不佳，图片的位置往往有一段时间是空白的。</p><p>常见的做法是先用一张loading图占位，然后异步的方式去加载图片，图片加载好以后再填充到img中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> imageNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(imageNode);</span><br><span class="line">        imageNode.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="keyword">this</span>.src)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            myImage.setSrc(<span class="string">'file://loading.png'</span>);</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">proxyImage.setSrc(<span class="string">'http://imgcache.com/music/aaa.jpg'</span>);</span><br></pre></td></tr></table></figure><h3 id="代理模式的意义"><a href="#代理模式的意义" class="headerlink" title="代理模式的意义"></a>代理模式的意义</h3><p>我们也许会疑惑，不过是实现一个预加载的功能，即使不需要引入任何模式也能做，那么引入代理模式的好处在哪里呢？我们看一下不用代理模式来做图片预加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imageNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(imageNode);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        imageNode.setSrc(<span class="keyword">this</span>.src)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            imageNode.src = <span class="string">'file://loading.png'</span>;</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>为了说明代理模式的意义，我们引入一个面向对象的设计的原则————单一职责原则。</p><p>单一职责原则指的是，就一个类（通常也包含对象和函数）而言，应该仅有一个引起它变化的原因。如果一个对象承担了多项职责，就意味着这个对象将变得巨大，引起它变化的原因可以有多个。</p><p>面向对象设计鼓励将行为分布到细粒度的对象之中，如果一个对象承担的职责过多，等于把这些职责耦合到一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能会遭到意外的破坏。</p><p>职责被定义为“引起变化的原因”。上段代码中的MyImage对象除了负责给img节点设置src外，还要负责预加载图片。我们在处理其中一个职责时，有可能因为其强耦合性影响另外一个职责的实现。</p><h3 id="代理和本体接口的一致性"><a href="#代理和本体接口的一致性" class="headerlink" title="代理和本体接口的一致性"></a>代理和本体接口的一致性</h3><p>如果我们有一天我们不再需要预加载，那么就不再需要代理对象，可以选择直接请求本体。其中的关键是代理对象和本体都对外提供了setSrc方法，在客户看来，代理对象和本体是一致的，代理接收请求的过程对用户来说是透明的。</p><p>在Java等语言中，代理和本体都需要显式实现同一个接口，一方面接口保证了它们有同样的方法，另一方面，面向接口编程迎合依赖倒置原则，通过接口进行向上转型。</p><p>值得一提的是，如果代理本体和对象都为一个函数，函数必然能被执行，则可以认为它们也有一致的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imageNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(imageNode);</span><br><span class="line">    imageNode.src = src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="keyword">this</span>.src)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="string">'file://loading.png'</span>);</span><br><span class="line">        img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">proxyImage(<span class="string">'http://imgcache.com/music/aaa.jpg'</span>);</span><br></pre></td></tr></table></figure><h3 id="其他的代理模式"><a href="#其他的代理模式" class="headerlink" title="其他的代理模式"></a>其他的代理模式</h3><p>其实我们平时开发用了很多的代理模式，比如我们常用的防抖和节流，其实就是一种代理，将多个请求合并为一次处理。</p><p>再比如我们的缓存和缓冲代理，把我们对数据库的直接访问变为对缓冲区的访问，如果缓冲区没有，那么缓冲区再去数据库查询。</p><p>再比如我们平时常用的消息队列，其实也可以是代理模式的一种思想。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们接着上一篇博客继续总结和学习JavaScript的常用设计模式，这一次我们总结两个在JavaScript角度来讲比较像的模式，也就是代理模式，策略模式。&lt;/p&gt;
&lt;p&gt;这两个模式在非函数式编程编程的语言中，如Java中区别是比较明显的，但是用JavaScript来看则是比较相似的。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>微前端框架 Qiankun 源码解析</title>
    <link href="https://sunra.top/2022/11/24/micro-frontend-qiankun-code/"/>
    <id>https://sunra.top/2022/11/24/micro-frontend-qiankun-code/</id>
    <published>2022-11-24T08:17:34.000Z</published>
    <updated>2022-11-25T09:14:02.494Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/2022/11/22/micro-frontend-qiankun-sandbox/">上一篇博客</a>我们介绍了Qiankun的沙盒机制，也就是不同的子应用之间是如何做环境隔离的，这篇博客我们就基于上一篇博客讲一下如何利用沙盒去进行子应用的加载和切换。</p><p>qiankun是基于single-spa实现的，所有内部用到了部分single-spa的接口，简单说一下single-spa和qiankun的区别，single-spa只做了子应用的注册，切换，路由监听等，还没有达到一个商用的水准，而qiankun在此之上加了js和css的沙箱隔离，按照官方文档，qiankun是达到了商用的要求。</p><a id="more"></a><h2 id="globalState-全局状态的保存和修改"><a href="#globalState-全局状态的保存和修改" class="headerlink" title="globalState 全局状态的保存和修改"></a>globalState 全局状态的保存和修改</h2><p>下面的代码我会加上自己的注释，同时有两点需要注意：</p><ul><li>这个全局状态，即globalState是唯一的，也就是说所有的子应用都用的同一个全局状态对象</li><li>但是每个子应用都可以为全局状态的改变注册自己的回调函数，以appInstanceId为key存储在deps数组中，虽然当状态改变的时候所有的deps都会触发，但是通过appInstanceId为key可以在子应用被销毁的时候正确地注销该应用的回调函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author dbkillerf6</span></span><br><span class="line"><span class="comment"> * @since 2020-04-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; OnGlobalStateChangeCallback, MicroAppStateActions &#125; <span class="keyword">from</span> <span class="string">'./interfaces'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局状态，所有子应用共享</span></span><br><span class="line"><span class="keyword">let</span> globalState: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态改变时的回调函数，key是app的id，value是回调函数</span></span><br><span class="line"><span class="keyword">const</span> deps: Record&lt;<span class="built_in">string</span>, OnGlobalStateChangeCallback&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发全局监听，遍历所有的deps并挨个触发</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emitGlobal</span>(<span class="params">state: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;, prevState: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(deps).forEach(<span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (deps[id] <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">      deps[id](cloneDeep(state), cloneDeep(prevState));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露一个接口，提供一种独立于子应用之外的手段去修改全局状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initGlobalState</span>(<span class="params">state: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">`[qiankun] globalState tools will be removed in 3.0, pls don't use it!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state === globalState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'[qiankun] state has not changed！'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> prevGlobalState = cloneDeep(globalState);</span><br><span class="line">    globalState = cloneDeep(state);</span><br><span class="line">    emitGlobal(globalState, prevGlobalState);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getMicroAppStateActions(<span class="string">`global-<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getMicroAppStateActions</span>(<span class="params">id: <span class="built_in">string</span>, isMaster?: <span class="built_in">boolean</span></span>): <span class="title">MicroAppStateActions</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * onGlobalStateChange 全局依赖监听</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 收集 setState 时所需要触发的依赖</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 限制条件：每个子应用只有一个激活状态的全局监听，新监听覆盖旧监听，若只是监听部分属性，请使用 onGlobalStateChange</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这么设计是为了减少全局监听滥用导致的内存爆炸</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 依赖数据结构为：</span></span><br><span class="line"><span class="comment">     * &#123;</span></span><br><span class="line"><span class="comment">     *   &#123;id&#125;: callback</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param callback</span></span><br><span class="line"><span class="comment">     * @param fireImmediately</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onGlobalStateChange(callback: OnGlobalStateChangeCallback, fireImmediately?: <span class="built_in">boolean</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(callback <span class="keyword">instanceof</span> <span class="built_in">Function</span>)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'[qiankun] callback must be function!'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (deps[id]) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">`[qiankun] '<span class="subst">$&#123;id&#125;</span>' global listener already exists before this, new listener will overwrite it.`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      deps[id] = callback;</span><br><span class="line">      <span class="keyword">if</span> (fireImmediately) &#123;</span><br><span class="line">        <span class="keyword">const</span> cloneState = cloneDeep(globalState);</span><br><span class="line">        callback(cloneState, cloneState);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * setGlobalState 更新 store 数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 对输入 state 的第一层属性做校验，只有初始化时声明过的第一层（bucket）属性才会被更改</span></span><br><span class="line"><span class="comment">     * 2. 修改 store 并触发全局监听</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param state</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    setGlobalState(state: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (state === globalState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">'[qiankun] state has not changed！'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> changeKeys: <span class="built_in">string</span>[] = [];</span><br><span class="line">      <span class="keyword">const</span> prevGlobalState = cloneDeep(globalState);</span><br><span class="line">      globalState = cloneDeep(</span><br><span class="line">        <span class="built_in">Object</span>.keys(state).reduce(<span class="function">(<span class="params">_globalState, changeKey</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (isMaster || _globalState.hasOwnProperty(changeKey)) &#123;</span><br><span class="line">            changeKeys.push(changeKey);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(_globalState, &#123; [changeKey]: state[changeKey] &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">console</span>.warn(<span class="string">`[qiankun] '<span class="subst">$&#123;changeKey&#125;</span>' not declared when init state！`</span>);</span><br><span class="line">          <span class="keyword">return</span> _globalState;</span><br><span class="line">        &#125;, globalState),</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (changeKeys.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">'[qiankun] state has not changed！'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      emitGlobal(globalState, prevGlobalState);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注销该应用下的依赖</span></span><br><span class="line">    offGlobalStateChange() &#123;</span><br><span class="line">      <span class="keyword">delete</span> deps[id];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="prefetch-预加载子应用资源"><a href="#prefetch-预加载子应用资源" class="headerlink" title="prefetch 预加载子应用资源"></a>prefetch 预加载子应用资源</h2><p>这里主要是提供预加载子应用的策略和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author Kuitos</span></span><br><span class="line"><span class="comment"> * @since 2019-02-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; Entry, ImportEntryOpts &#125; <span class="keyword">from</span> <span class="string">'import-html-entry'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; importEntry &#125; <span class="keyword">from</span> <span class="string">'import-html-entry'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isFunction &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getAppStatus, getMountedApps, NOT_LOADED &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; AppMetadata, PrefetchStrategy &#125; <span class="keyword">from</span> <span class="string">'./interfaces'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> NetworkInformation &#123;</span><br><span class="line">    saveData: <span class="built_in">boolean</span>;</span><br><span class="line">    effectiveType: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果浏览器不支持requestIdleCallback，降级为setTimeout</span></span><br><span class="line"><span class="comment">// RIC and shim for browsers setTimeout() without it</span></span><br><span class="line"><span class="keyword">const</span> requestIdleCallback =</span><br><span class="line">  <span class="built_in">window</span>.requestIdleCallback ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">requestIdleCallback</span>(<span class="params">cb: CallableFunction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cb(&#123;</span><br><span class="line">        didTimeout: <span class="literal">false</span>,</span><br><span class="line">        timeRemaining() &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">50</span> - (<span class="built_in">Date</span>.now() - start));</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> Navigator &#123;</span><br><span class="line">    connection: &#123;</span><br><span class="line">      saveData: <span class="built_in">boolean</span>;</span><br><span class="line">      effectiveType: <span class="built_in">string</span>;</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'bluetooth'</span> | <span class="string">'cellular'</span> | <span class="string">'ethernet'</span> | <span class="string">'none'</span> | <span class="string">'wifi'</span> | <span class="string">'wimax'</span> | <span class="string">'other'</span> | <span class="string">'unknown'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isSlowNetwork = navigator.connection</span><br><span class="line">  ? navigator.connection.saveData ||</span><br><span class="line">    (navigator.connection.type !== <span class="string">'wifi'</span> &amp;&amp;</span><br><span class="line">      navigator.connection.type !== <span class="string">'ethernet'</span> &amp;&amp;</span><br><span class="line">      /([<span class="number">23</span>])g/.test(navigator.connection.effectiveType))</span><br><span class="line">  : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * prefetch assets, do nothing while in mobile network</span></span><br><span class="line"><span class="comment"> * 通过指定入口的方式，加载指定的子应用</span></span><br><span class="line"><span class="comment"> * @param entry</span></span><br><span class="line"><span class="comment"> * @param opts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefetch</span>(<span class="params">entry: Entry, opts?: ImportEntryOpts</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!navigator.onLine || isSlowNetwork) &#123;</span><br><span class="line">    <span class="comment">// Don't prefetch if in a slow network or offline</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用single-spa的importEntry接口去加载子应用入口，返回加载js和css的函数，然后利用requestIdleCallback函数在空闲时加载</span></span><br><span class="line">  requestIdleCallback(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getExternalScripts, getExternalStyleSheets &#125; = <span class="keyword">await</span> importEntry(entry, opts);</span><br><span class="line">    requestIdleCallback(getExternalStyleSheets);</span><br><span class="line">    requestIdleCallback(getExternalScripts);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当single-spa first-mount事件触发时，查询所有app中尚未加载的，然后进行预加载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefetchAfterFirstMounted</span>(<span class="params">apps: AppMetadata[], opts?: ImportEntryOpts</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'single-spa:first-mount'</span>, <span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> notLoadedApps = apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> getAppStatus(app.name) === NOT_LOADED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> mountedApps = getMountedApps();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`[qiankun] prefetch starting after <span class="subst">$&#123;mountedApps&#125;</span> mounted...`</span>, notLoadedApps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notLoadedApps.forEach(<span class="function">(<span class="params">&#123; entry &#125;</span>) =&gt;</span> prefetch(entry, opts));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'single-spa:first-mount'</span>, listener);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行预加载，并且不会从apps中过滤已经加载过的</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">prefetchImmediately</span>(<span class="params">apps: AppMetadata[], opts?: ImportEntryOpts</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[qiankun] prefetch starting for apps...'</span>, apps);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  apps.forEach(<span class="function">(<span class="params">&#123; entry &#125;</span>) =&gt;</span> prefetch(entry, opts));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据参数重传入的策略配置选择适当的预加载策略</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">doPrefetchStrategy</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  apps: AppMetadata[],</span></span></span><br><span class="line"><span class="function"><span class="params">  prefetchStrategy: PrefetchStrategy,</span></span></span><br><span class="line"><span class="function"><span class="params">  importEntryOpts?: ImportEntryOpts,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appsName2Apps = <span class="function">(<span class="params">names: <span class="built_in">string</span>[]</span>): <span class="params">AppMetadata</span>[] =&gt;</span> apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> names.includes(app.name));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(prefetchStrategy)) &#123;</span><br><span class="line">    prefetchAfterFirstMounted(appsName2Apps(prefetchStrategy <span class="keyword">as</span> <span class="built_in">string</span>[]), importEntryOpts);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFunction(prefetchStrategy)) &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// critical rendering apps would be prefetch as earlier as possible</span></span><br><span class="line">      <span class="keyword">const</span> &#123; criticalAppNames = [], minorAppsName = [] &#125; = <span class="keyword">await</span> prefetchStrategy(apps);</span><br><span class="line">      prefetchImmediately(appsName2Apps(criticalAppNames), importEntryOpts);</span><br><span class="line">      prefetchAfterFirstMounted(appsName2Apps(minorAppsName), importEntryOpts);</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (prefetchStrategy) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        prefetchAfterFirstMounted(apps, importEntryOpts);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'all'</span>:</span><br><span class="line">        prefetchImmediately(apps, importEntryOpts);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loader-子应用加载器"><a href="#loader-子应用加载器" class="headerlink" title="loader 子应用加载器"></a>loader 子应用加载器</h2><h3 id="loader内部工具函数"><a href="#loader内部工具函数" class="headerlink" title="loader内部工具函数"></a>loader内部工具函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertElementExist</span>(<span class="params">element: Element | <span class="literal">null</span> | <span class="literal">undefined</span>, msg?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(<span class="string">'element not existed!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execHooksChain</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  hooks: <span class="built_in">Array</span>&lt;LifeCycleFn&lt;T&gt;&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  app: LoadableApp&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  global = <span class="built_in">window</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hooks.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> hooks.reduce(<span class="function">(<span class="params">chain, hook</span>) =&gt;</span> chain.then(<span class="function"><span class="params">()</span> =&gt;</span> hook(app, global)), <span class="built_in">Promise</span>.resolve());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">validateSingularMode</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  validate: FrameworkConfiguration['singular'],</span></span></span><br><span class="line"><span class="function"><span class="params">  app: LoadableApp&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">boolean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> validate === <span class="string">'function'</span> ? validate(app) : !!validate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> supportShadowDOM = !!<span class="built_in">document</span>.head.attachShadow || !!(<span class="built_in">document</span>.head <span class="keyword">as</span> <span class="built_in">any</span>).createShadowRoot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLifecyclesFromExports</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  scriptExports: LifeCycles&lt;<span class="built_in">any</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  global: WindowProxy,</span></span></span><br><span class="line"><span class="function"><span class="params">  globalLatestSetProp?: PropertyKey | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (validateExportLifecycle(scriptExports)) &#123;</span><br><span class="line">    <span class="keyword">return</span> scriptExports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fallback to sandbox latest set property if it had</span></span><br><span class="line">  <span class="keyword">if</span> (globalLatestSetProp) &#123;</span><br><span class="line">    <span class="keyword">const</span> lifecycles = (&lt;<span class="built_in">any</span>&gt;global)[globalLatestSetProp];</span><br><span class="line">    <span class="keyword">if</span> (validateExportLifecycle(lifecycles)) &#123;</span><br><span class="line">      <span class="keyword">return</span> lifecycles;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(</span><br><span class="line">      <span class="string">`[qiankun] lifecycle not found from <span class="subst">$&#123;appName&#125;</span> entry exports, fallback to get from window['<span class="subst">$&#123;appName&#125;</span>']`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fallback to global variable who named with $&#123;appName&#125; while module exports not found</span></span><br><span class="line">  <span class="keyword">const</span> globalVariableExports = (global <span class="keyword">as</span> <span class="built_in">any</span>)[appName];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (validateExportLifecycle(globalVariableExports)) &#123;</span><br><span class="line">    <span class="keyword">return</span> globalVariableExports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(<span class="string">`You need to export lifecycle functions in <span class="subst">$&#123;appName&#125;</span> entry`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><p>创建新的元素，参数列表为：</p><ul><li>appContent：字符串类型，需要传入html文本</li><li>strictStyleIsolation：是否使用独立的shadow dom，如果为真，并且当前浏览器支持shadow dom，那么appContent中的内容会在一个shadow dom内部</li><li>scopedCSS：如果为真，则将本次创建的html中的所有css内容加上前缀，具体操作看我的另一篇博客，qiankun如何做css隔离的</li><li>appInstanceId：字符串类型，子应用的id</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appContent: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  strictStyleIsolation: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  appInstanceId: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> containerElement = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  containerElement.innerHTML = appContent;</span><br><span class="line">  <span class="comment">// appContent always wrapped with a singular div</span></span><br><span class="line">  <span class="keyword">const</span> appElement = containerElement.firstChild <span class="keyword">as</span> HTMLElement;</span><br><span class="line">  <span class="keyword">if</span> (strictStyleIsolation) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!supportShadowDOM) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(</span><br><span class="line">        <span class="string">'[qiankun]: As current browser not support shadow dom, your strictStyleIsolation configuration will be ignored!'</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; innerHTML &#125; = appElement;</span><br><span class="line">      appElement.innerHTML = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">let</span> shadow: ShadowRoot;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (appElement.attachShadow) &#123;</span><br><span class="line">        shadow = appElement.attachShadow(&#123; mode: <span class="string">'open'</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// createShadowRoot was proposed in initial spec, which has then been deprecated</span></span><br><span class="line">        shadow = (appElement <span class="keyword">as</span> <span class="built_in">any</span>).createShadowRoot();</span><br><span class="line">      &#125;</span><br><span class="line">      shadow.innerHTML = innerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (scopedCSS) &#123;</span><br><span class="line">    <span class="keyword">const</span> attr = appElement.getAttribute(css.QiankunCSSRewriteAttr);</span><br><span class="line">    <span class="keyword">if</span> (!attr) &#123;</span><br><span class="line">      appElement.setAttribute(css.QiankunCSSRewriteAttr, appInstanceId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> styleNodes = appElement.querySelectorAll(<span class="string">'style'</span>) || [];</span><br><span class="line">    forEach(styleNodes, <span class="function">(<span class="params">stylesheetElement: HTMLStyleElement</span>) =&gt;</span> &#123;</span><br><span class="line">      css.process(appElement!, stylesheetElement, appInstanceId);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> appElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getAppWrapperGetter"><a href="#getAppWrapperGetter" class="headerlink" title="getAppWrapperGetter"></a>getAppWrapperGetter</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAppWrapperGetter</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appInstanceId: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  useLegacyRender: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  strictStyleIsolation: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elementGetter: () =&gt; HTMLElement | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (useLegacyRender) &#123;</span><br><span class="line">      <span class="keyword">if</span> (strictStyleIsolation) <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(<span class="string">'strictStyleIsolation can not be used with legacy render!'</span>);</span><br><span class="line">      <span class="keyword">if</span> (scopedCSS) <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(<span class="string">'experimentalStyleIsolation can not be used with legacy render!'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> appWrapper = <span class="built_in">document</span>.getElementById(getWrapperId(appInstanceId));</span><br><span class="line">      assertElementExist(appWrapper, <span class="string">`Wrapper element for <span class="subst">$&#123;appInstanceId&#125;</span> is not existed!`</span>);</span><br><span class="line">      <span class="keyword">return</span> appWrapper!;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> element = elementGetter();</span><br><span class="line">    assertElementExist(element, <span class="string">`Wrapper element for <span class="subst">$&#123;appInstanceId&#125;</span> is not existed!`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strictStyleIsolation &amp;&amp; supportShadowDOM) &#123;</span><br><span class="line">      <span class="keyword">return</span> element!.shadowRoot!;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element!;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getRender"><a href="#getRender" class="headerlink" title="getRender"></a>getRender</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the render function</span></span><br><span class="line"><span class="comment"> * If the legacy render function is provide, used as it, otherwise we will insert the app element to target container by qiankun</span></span><br><span class="line"><span class="comment"> * @param appInstanceId</span></span><br><span class="line"><span class="comment"> * @param appContent</span></span><br><span class="line"><span class="comment"> * @param legacyRender</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRender</span>(<span class="params">appInstanceId: <span class="built_in">string</span>, appContent: <span class="built_in">string</span>, legacyRender?: HTMLContentRender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> render: ElementRender = <span class="function">(<span class="params">&#123; element, loading, container &#125;, phase</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (legacyRender) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(</span><br><span class="line">          <span class="string">'[qiankun] Custom rendering function is deprecated and will be removed in 3.0, you can use the container element setting instead!'</span>,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> legacyRender(&#123; loading, appContent: element ? appContent : <span class="string">''</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> containerElement = getContainer(container!);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The container might have be removed after micro app unmounted.</span></span><br><span class="line">    <span class="comment">// Such as the micro app unmount lifecycle called by a react componentWillUnmount lifecycle, after micro app unmounted, the react component might also be removed</span></span><br><span class="line">    <span class="keyword">if</span> (phase !== <span class="string">'unmounted'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> errorMsg = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">switch</span> (<span class="params">phase</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">case</span> 'loading':</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">case</span> 'mounting':</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> `Target container <span class="keyword">with</span> $&#123;container&#125; not existed <span class="keyword">while</span> $&#123;appInstanceId&#125; $&#123;phase&#125;!`;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">case</span> 'mounted':</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> `Target container <span class="keyword">with</span> $&#123;container&#125; not existed after $&#123;appInstanceId&#125; $&#123;phase&#125;!`;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">default</span>:</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> `Target container <span class="keyword">with</span> $&#123;container&#125; not existed <span class="keyword">while</span> $&#123;appInstanceId&#125; rendering!`;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function">      <span class="params">assertElementExist</span>(<span class="params">containerElement, errorMsg</span>);</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">containerElement &amp;&amp; !containerElement.contains(<span class="params">element</span>)</span>) &#123;</span></span><br><span class="line"><span class="function">      // <span class="params">clear</span> <span class="params">the</span> <span class="params">container</span></span></span><br><span class="line"><span class="function">      <span class="params">while</span> (<span class="params">containerElement!.firstChild</span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">rawRemoveChild</span>.<span class="params">call</span>(<span class="params">containerElement, containerElement!.firstChild</span>);</span></span><br><span class="line"><span class="function">      &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">      // <span class="params">append</span> <span class="params">the</span> <span class="params">element</span> <span class="params">to</span> <span class="params">container</span> <span class="params">if</span> <span class="params">it</span> <span class="params">exist</span></span></span><br><span class="line"><span class="function">      <span class="params">if</span> (<span class="params">element</span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">rawAppendChild</span>.<span class="params">call</span>(<span class="params">containerElement, element</span>);</span></span><br><span class="line"><span class="function">      &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">return</span> <span class="params">undefined</span>;</span></span><br><span class="line"><span class="function">  &#125;;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="params">return</span> <span class="params">render</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="loadAPP"><a href="#loadAPP" class="headerlink" title="loadAPP"></a>loadAPP</h3><p>代码很长，简单分析下分别做了什么：</p><ul><li>调用single-spa的<code>importEntry</code>接口，获取子应用的加载入口等信息</li><li>上一步解析出来的html entry会作为appContent传入createElement函数，创建一个新节点，并把html entry挂载到该节点之下，然后返回新的节点，赋值给<code>initialAppWrapperElement</code></li><li>调用<code>getRender</code>获取渲染函数，赋值给<code>render</code></li><li>将<code>initialAppWrapperElement</code>传入<code>render</code>函数</li><li>调用<code>getAppWrapperGetter</code>获取增强过的函数<code>initialAppWrapperGetter</code>，内部会做一些判断，如果判断没有问题，返回的函数<code>initialAppWrapperGetter</code>会返回<code>initialAppWrapperElement</code></li><li>如果选择启动沙箱功能，则调用createSandboxContainer去返回sandboxContainer，并将全局对象赋值为sandboxContainer的proxy，启动沙箱功能</li><li>通过调用getAddOns来获取所有的生命周期函数</li><li>调用execHooksChain来执行上一步获得的生命周期中的beforeLoad函数</li><li>通过execScripts（第一步single-spa的解析结果）配合getLifecyclesFromExports来获取子应用的生命周期钩子函数</li><li>最终生成parcelConfigGetter函数，该函数会返回关于该子应用的 bootstrap，mount，和unmount方法，这些方法中会按顺序分别调用前面获取的不同的生命周期函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadApp</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  app: LoadableApp&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  configuration: FrameworkConfiguration = &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  lifeCycles?: FrameworkLifeCycles&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">ParcelConfigObjectGetter</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; entry, name: appName &#125; = app;</span><br><span class="line">  <span class="keyword">const</span> appInstanceId = genAppInstanceIdByName(appName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> markName = <span class="string">`[qiankun] App <span class="subst">$&#123;appInstanceId&#125;</span> Loading`</span>;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    performanceMark(markName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    singular = <span class="literal">false</span>,</span><br><span class="line">    sandbox = <span class="literal">true</span>,</span><br><span class="line">    excludeAssetFilter,</span><br><span class="line">    globalContext = <span class="built_in">window</span>,</span><br><span class="line">    ...importEntryOpts</span><br><span class="line">  &#125; = configuration;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get the entry html content and script executor</span></span><br><span class="line">  <span class="keyword">const</span> &#123; template, execScripts, assetPublicPath &#125; = <span class="keyword">await</span> importEntry(entry, importEntryOpts);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// as single-spa load and bootstrap new app parallel with other apps unmounting</span></span><br><span class="line">  <span class="comment">// (see https://github.com/CanopyTax/single-spa/blob/master/src/navigation/reroute.js#L74)</span></span><br><span class="line">  <span class="comment">// we need wait to load the app until all apps are finishing unmount in singular mode</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">await</span> validateSingularMode(singular, app)) &#123;</span><br><span class="line">    <span class="keyword">await</span> (prevAppUnmountedDeferred &amp;&amp; prevAppUnmountedDeferred.promise);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> appContent = getDefaultTplWrapper(appInstanceId)(template);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> strictStyleIsolation = <span class="keyword">typeof</span> sandbox === <span class="string">'object'</span> &amp;&amp; !!sandbox.strictStyleIsolation;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span> &amp;&amp; strictStyleIsolation) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(</span><br><span class="line">      <span class="string">"[qiankun] strictStyleIsolation configuration will be removed in 3.0, pls don't depend on it or use experimentalStyleIsolation instead!"</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> scopedCSS = isEnableScopedCSS(sandbox);</span><br><span class="line">  <span class="keyword">let</span> initialAppWrapperElement: HTMLElement | <span class="literal">null</span> = createElement(</span><br><span class="line">    appContent,</span><br><span class="line">    strictStyleIsolation,</span><br><span class="line">    scopedCSS,</span><br><span class="line">    appInstanceId,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> initialContainer = <span class="string">'container'</span> <span class="keyword">in</span> app ? app.container : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">const</span> legacyRender = <span class="string">'render'</span> <span class="keyword">in</span> app ? app.render : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> render = getRender(appInstanceId, appContent, legacyRender);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一次加载设置应用可见区域 dom 结构</span></span><br><span class="line">  <span class="comment">// 确保每次应用加载前容器 dom 结构已经设置完毕</span></span><br><span class="line">  render(&#123; element: initialAppWrapperElement, loading: <span class="literal">true</span>, container: initialContainer &#125;, <span class="string">'loading'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> initialAppWrapperGetter = getAppWrapperGetter(</span><br><span class="line">    appInstanceId,</span><br><span class="line">    !!legacyRender,</span><br><span class="line">    strictStyleIsolation,</span><br><span class="line">    scopedCSS,</span><br><span class="line">    () =&gt; initialAppWrapperElement,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> global = globalContext;</span><br><span class="line">  <span class="keyword">let</span> mountSandbox = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  <span class="keyword">let</span> unmountSandbox = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  <span class="keyword">const</span> useLooseSandbox = <span class="keyword">typeof</span> sandbox === <span class="string">'object'</span> &amp;&amp; !!sandbox.loose;</span><br><span class="line">  <span class="keyword">const</span> speedySandbox = <span class="keyword">typeof</span> sandbox === <span class="string">'object'</span> &amp;&amp; !!sandbox.speedy;</span><br><span class="line">  <span class="keyword">let</span> sandboxContainer;</span><br><span class="line">  <span class="keyword">if</span> (sandbox) &#123;</span><br><span class="line">    sandboxContainer = createSandboxContainer(</span><br><span class="line">      appInstanceId,</span><br><span class="line">      <span class="comment">// FIXME should use a strict sandbox logic while remount, see https://github.com/umijs/qiankun/issues/518</span></span><br><span class="line">      initialAppWrapperGetter,</span><br><span class="line">      scopedCSS,</span><br><span class="line">      useLooseSandbox,</span><br><span class="line">      excludeAssetFilter,</span><br><span class="line">      global,</span><br><span class="line">      speedySandbox,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 用沙箱的代理对象作为接下来使用的全局对象</span></span><br><span class="line">    global = sandboxContainer.instance.proxy <span class="keyword">as</span> <span class="keyword">typeof</span> <span class="built_in">window</span>;</span><br><span class="line">    mountSandbox = sandboxContainer.mount;</span><br><span class="line">    unmountSandbox = sandboxContainer.unmount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    beforeUnmount = [],</span><br><span class="line">    afterUnmount = [],</span><br><span class="line">    afterMount = [],</span><br><span class="line">    beforeMount = [],</span><br><span class="line">    beforeLoad = [],</span><br><span class="line">  &#125; = mergeWith(&#123;&#125;, getAddOns(global, assetPublicPath), lifeCycles, <span class="function">(<span class="params">v1, v2</span>) =&gt;</span> concat(v1 ?? [], v2 ?? []));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> execHooksChain(toArray(beforeLoad), app, global);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get the lifecycle hooks from module exports</span></span><br><span class="line">  <span class="keyword">const</span> scriptExports: <span class="built_in">any</span> = <span class="keyword">await</span> execScripts(global, sandbox &amp;&amp; !useLooseSandbox, &#123;</span><br><span class="line">    scopedGlobalVariables: speedySandbox ? trustedGlobals : [],</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> &#123; bootstrap, mount, unmount, update &#125; = getLifecyclesFromExports(</span><br><span class="line">    scriptExports,</span><br><span class="line">    appName,</span><br><span class="line">    global,</span><br><span class="line">    sandboxContainer?.instance?.latestSetProp,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; onGlobalStateChange, setGlobalState, offGlobalStateChange &#125;: Record&lt;<span class="built_in">string</span>, CallableFunction&gt; =</span><br><span class="line">    getMicroAppStateActions(appInstanceId);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// FIXME temporary way</span></span><br><span class="line">  <span class="keyword">const</span> syncAppWrapperElement2Sandbox = <span class="function">(<span class="params">element: HTMLElement | <span class="literal">null</span></span>) =&gt;</span> (initialAppWrapperElement = element);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parcelConfigGetter: ParcelConfigObjectGetter = <span class="function">(<span class="params">remountContainer = initialContainer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> appWrapperElement: HTMLElement | <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> appWrapperGetter: ReturnType&lt;<span class="keyword">typeof</span> getAppWrapperGetter&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> parcelConfig: ParcelConfigObject = &#123;</span><br><span class="line">      name: appInstanceId,</span><br><span class="line">      bootstrap,</span><br><span class="line">      mount: [</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> marks = performanceGetEntriesByName(markName, <span class="string">'mark'</span>);</span><br><span class="line">            <span class="comment">// mark length is zero means the app is remounting</span></span><br><span class="line">            <span class="keyword">if</span> (marks &amp;&amp; !marks.length) &#123;</span><br><span class="line">              performanceMark(markName);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> ((<span class="keyword">await</span> validateSingularMode(singular, app)) &amp;&amp; prevAppUnmountedDeferred) &#123;</span><br><span class="line">            <span class="keyword">return</span> prevAppUnmountedDeferred.promise;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// initial wrapper element before app mount/remount</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          appWrapperElement = initialAppWrapperElement;</span><br><span class="line">          appWrapperGetter = getAppWrapperGetter(</span><br><span class="line">            appInstanceId,</span><br><span class="line">            !!legacyRender,</span><br><span class="line">            strictStyleIsolation,</span><br><span class="line">            scopedCSS,</span><br><span class="line">            () =&gt; appWrapperElement,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 添加 mount hook, 确保每次应用加载前容器 dom 结构已经设置完毕</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">const</span> useNewContainer = remountContainer !== initialContainer;</span><br><span class="line">          <span class="keyword">if</span> (useNewContainer || !appWrapperElement) &#123;</span><br><span class="line">            <span class="comment">// element will be destroyed after unmounted, we need to recreate it if it not exist</span></span><br><span class="line">            <span class="comment">// or we try to remount into a new container</span></span><br><span class="line">            appWrapperElement = createElement(appContent, strictStyleIsolation, scopedCSS, appInstanceId);</span><br><span class="line">            syncAppWrapperElement2Sandbox(appWrapperElement);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          render(&#123; element: appWrapperElement, loading: <span class="literal">true</span>, container: remountContainer &#125;, <span class="string">'mounting'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        mountSandbox,</span><br><span class="line">        <span class="comment">// exec the chain after rendering to keep the behavior with beforeLoad</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; execHooksChain(toArray(beforeMount), app, global),</span><br><span class="line">        <span class="keyword">async</span> (props) =&gt; mount(&#123; ...props, container: appWrapperGetter(), setGlobalState, onGlobalStateChange &#125;),</span><br><span class="line">        <span class="comment">// finish loading after app mounted</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; render(&#123; element: appWrapperElement, loading: <span class="literal">false</span>, container: remountContainer &#125;, <span class="string">'mounted'</span>),</span><br><span class="line">        <span class="keyword">async</span> () =&gt; execHooksChain(toArray(afterMount), app, global),</span><br><span class="line">        <span class="comment">// initialize the unmount defer after app mounted and resolve the defer after it unmounted</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">await</span> validateSingularMode(singular, app)) &#123;</span><br><span class="line">            prevAppUnmountedDeferred = <span class="keyword">new</span> Deferred&lt;<span class="built_in">void</span>&gt;();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> measureName = <span class="string">`[qiankun] App <span class="subst">$&#123;appInstanceId&#125;</span> Loading Consuming`</span>;</span><br><span class="line">            performanceMeasure(measureName, markName);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      unmount: [</span><br><span class="line">        <span class="keyword">async</span> () =&gt; execHooksChain(toArray(beforeUnmount), app, global),</span><br><span class="line">        <span class="keyword">async</span> (props) =&gt; unmount(&#123; ...props, container: appWrapperGetter() &#125;),</span><br><span class="line">        unmountSandbox,</span><br><span class="line">        <span class="keyword">async</span> () =&gt; execHooksChain(toArray(afterUnmount), app, global),</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          render(&#123; element: <span class="literal">null</span>, loading: <span class="literal">false</span>, container: remountContainer &#125;, <span class="string">'unmounted'</span>);</span><br><span class="line">          offGlobalStateChange(appInstanceId);</span><br><span class="line">          <span class="comment">// for gc</span></span><br><span class="line">          appWrapperElement = <span class="literal">null</span>;</span><br><span class="line">          syncAppWrapperElement2Sandbox(appWrapperElement);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> ((<span class="keyword">await</span> validateSingularMode(singular, app)) &amp;&amp; prevAppUnmountedDeferred) &#123;</span><br><span class="line">            prevAppUnmountedDeferred.resolve();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> update === <span class="string">'function'</span>) &#123;</span><br><span class="line">      parcelConfig.update = update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parcelConfig;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parcelConfigGetter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h2><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>这里就是声明了一个Error类而已</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> QiankunError <span class="keyword">extends</span> <span class="built_in">Error</span> &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">`[qiankun]: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="errorHandler"><a href="#errorHandler" class="headerlink" title="errorHandler"></a>errorHandler</h3><p>暴露一个方法去添加全局的错误处理监听函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author Kuitos</span></span><br><span class="line"><span class="comment"> * @since 2020-02-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; addErrorHandler, removeErrorHandler &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addGlobalUncaughtErrorHandler</span>(<span class="params">errorHandler: OnErrorEventHandlerNonNull</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, errorHandler);</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'unhandledrejection'</span>, errorHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeGlobalUncaughtErrorHandler</span>(<span class="params">errorHandler: (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">'error'</span>, errorHandler);</span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">'unhandledrejection'</span>, errorHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>这里的只列举函数签名及其作用，具体代码实现就不贴在这里了</p><ul><li>function toArray<t>(array: T | T[]): T[]</t></li><li>function sleep(ms: number)</li><li>function nextTask(cb: () =&gt; void): void</li><li>function isConstructable(fn: () =&gt; any | FunctionConstructor)</li><li>function isCallable(fn: any)</li><li>function isPropertyFrozen(target: any, p?: PropertyKey): boolean</li><li>function isBoundedFunction(fn: CallableFunction)</li><li>const qiankunHeadTagName = ‘qiankun-head’;</li><li>function getDefaultTplWrapper(name: string)</li><li>function getWrapperId(name: string)</li><li>const nativeGlobal = new Function(‘return this’)()</li><li>const genAppInstanceIdByName = (appName: string): string</li><li>function validateExportLifecycle(exports: any)</li><li>function performanceGetEntriesByName(markName: string, type?: string)</li><li>function performanceMark(markName: string)</li><li>function performanceMeasure(measureName: string, markName: string)</li><li>function isEnableScopedCSS(sandbox: FrameworkConfiguration[‘sandbox’])</li><li>function getXPathForElement(el: Node, document: Document): string | void</li></ul><h2 id="qiankun-api"><a href="#qiankun-api" class="headerlink" title="qiankun api"></a>qiankun api</h2><p>这一部分是qiankun对外暴露和使用的主要api</p><h3 id="工具方法引入"><a href="#工具方法引入" class="headerlink" title="工具方法引入"></a>工具方法引入</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; ParcelConfigObject &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mountRootParcel, registerApplication, start <span class="keyword">as</span> startSingleSpa &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;</span><br><span class="line">  FrameworkConfiguration,</span><br><span class="line">  FrameworkLifeCycles,</span><br><span class="line">  LoadableApp,</span><br><span class="line">  MicroApp,</span><br><span class="line">  ObjectType,</span><br><span class="line">  RegistrableApp,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; ParcelConfigObjectGetter &#125; <span class="keyword">from</span> <span class="string">'./loader'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loadApp &#125; <span class="keyword">from</span> <span class="string">'./loader'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; doPrefetchStrategy &#125; <span class="keyword">from</span> <span class="string">'./prefetch'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Deferred, getContainerXPath, toArray &#125; <span class="keyword">from</span> <span class="string">'./utils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> microApps: <span class="built_in">Array</span>&lt;RegistrableApp&lt;Record&lt;<span class="built_in">string</span>, unknown&gt;&gt;&gt; = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> frameworkConfiguration: FrameworkConfiguration = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> started = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> defaultUrlRerouteOnly = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> frameworkStartedDefer = <span class="keyword">new</span> Deferred&lt;<span class="built_in">void</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> autoDowngradeForLowVersionBrowser = (configuration: FrameworkConfiguration): <span class="function"><span class="params">FrameworkConfiguration</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; sandbox, singular &#125; = configuration;</span><br><span class="line">  <span class="keyword">if</span> (sandbox) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.Proxy) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">'[qiankun] Miss window.Proxy, proxySandbox will degenerate into snapshotSandbox'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (singular === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(</span><br><span class="line">          <span class="string">'[qiankun] Setting singular as false may cause unexpected behavior while your browser not support window.Proxy'</span>,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; ...configuration, sandbox: <span class="keyword">typeof</span> sandbox === <span class="string">'object'</span> ? &#123; ...sandbox, loose: <span class="literal">true</span> &#125; : &#123; loose: <span class="literal">true</span> &#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> configuration;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="registerMicroApps"><a href="#registerMicroApps" class="headerlink" title="registerMicroApps"></a>registerMicroApps</h3><p>利用single-spa的接口<code>registerApplication</code>来注册子应用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">registerMicroApps</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  apps: <span class="built_in">Array</span>&lt;RegistrableApp&lt;T&gt;&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  lifeCycles?: FrameworkLifeCycles&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Each app only needs to be registered once</span></span><br><span class="line">  <span class="keyword">const</span> unregisteredApps = apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> !microApps.some(<span class="function">(<span class="params">registeredApp</span>) =&gt;</span> registeredApp.name === app.name));</span><br><span class="line"></span><br><span class="line">  microApps = [...microApps, ...unregisteredApps];</span><br><span class="line"></span><br><span class="line">  unregisteredApps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, activeRule, loader = noop, props, ...appConfig &#125; = app;</span><br><span class="line"></span><br><span class="line">    registerApplication(&#123;</span><br><span class="line">      name,</span><br><span class="line">      app: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        loader(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">await</span> frameworkStartedDefer.promise;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; mount, ...otherMicroAppConfigs &#125; = (</span><br><span class="line">          <span class="keyword">await</span> loadApp(&#123; name, props, ...appConfig &#125;, frameworkConfiguration, lifeCycles)</span><br><span class="line">        )();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          mount: [<span class="keyword">async</span> () =&gt; loader(<span class="literal">true</span>), ...toArray(mount), <span class="keyword">async</span> () =&gt; loader(<span class="literal">false</span>)],</span><br><span class="line">          ...otherMicroAppConfigs,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      activeWhen: activeRule,</span><br><span class="line">      customProps: props,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loadMicroApp"><a href="#loadMicroApp" class="headerlink" title="loadMicroApp"></a>loadMicroApp</h3><p>这个函数的功能就是调用loader的loadApp，然后使用single-spa的startSingleSpa去启动</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadMicroApp</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  app: LoadableApp&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  configuration?: FrameworkConfiguration &amp; &#123; autoStart?: <span class="built_in">boolean</span> &#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  lifeCycles?: FrameworkLifeCycles&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">MicroApp</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; props, name &#125; = app;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> container = <span class="string">'container'</span> <span class="keyword">in</span> app ? app.container : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// Must compute the container xpath at beginning to keep it consist around app running</span></span><br><span class="line">  <span class="comment">// If we compute it every time, the container dom structure most probably been changed and result in a different xpath value</span></span><br><span class="line">  <span class="keyword">const</span> containerXPath = getContainerXPath(container);</span><br><span class="line">  <span class="keyword">const</span> appContainerXPathKey = <span class="string">`<span class="subst">$&#123;name&#125;</span>-<span class="subst">$&#123;containerXPath&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> microApp: MicroApp;</span><br><span class="line">  <span class="keyword">const</span> wrapParcelConfigForRemount = (config: ParcelConfigObject): <span class="function"><span class="params">ParcelConfigObject</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> microAppConfig = config;</span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      <span class="keyword">if</span> (containerXPath) &#123;</span><br><span class="line">        <span class="keyword">const</span> containerMicroApps = containerMicroAppsMap.get(appContainerXPathKey);</span><br><span class="line">        <span class="keyword">if</span> (containerMicroApps?.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> mount = [</span><br><span class="line">            <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">              <span class="comment">// While there are multiple micro apps mounted on the same container, we must wait until the prev instances all had unmounted</span></span><br><span class="line">              <span class="comment">// Otherwise it will lead some concurrent issues</span></span><br><span class="line">              <span class="keyword">const</span> prevLoadMicroApps = containerMicroApps.slice(<span class="number">0</span>, containerMicroApps.indexOf(microApp));</span><br><span class="line">              <span class="keyword">const</span> prevLoadMicroAppsWhichNotBroken = prevLoadMicroApps.filter(</span><br><span class="line">                (v) =&gt; v.getStatus() !== <span class="string">'LOAD_ERROR'</span> &amp;&amp; v.getStatus() !== <span class="string">'SKIP_BECAUSE_BROKEN'</span>,</span><br><span class="line">              );</span><br><span class="line">              <span class="keyword">await</span> <span class="built_in">Promise</span>.all(prevLoadMicroAppsWhichNotBroken.map(<span class="function">(<span class="params">v</span>) =&gt;</span> v.unmountPromise));</span><br><span class="line">            &#125;,</span><br><span class="line">            ...toArray(microAppConfig.mount),</span><br><span class="line">          ];</span><br><span class="line"></span><br><span class="line">          microAppConfig = &#123;</span><br><span class="line">            ...config,</span><br><span class="line">            mount,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...microAppConfig,</span><br><span class="line">      <span class="comment">// empty bootstrap hook which should not run twice while it calling from cached micro app</span></span><br><span class="line">      bootstrap: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * using name + container xpath as the micro app instance id,</span></span><br><span class="line"><span class="comment">   * it means if you rendering a micro app to a dom which have been rendered before,</span></span><br><span class="line"><span class="comment">   * the micro app would not load and evaluate its lifecycles again</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> memorizedLoadingFn = <span class="keyword">async</span> (): <span class="built_in">Promise</span>&lt;ParcelConfigObject&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> userConfiguration = autoDowngradeForLowVersionBrowser(</span><br><span class="line">      configuration ?? &#123; ...frameworkConfiguration, singular: <span class="literal">false</span> &#125;,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> &#123; $$cacheLifecycleByAppName &#125; = userConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      <span class="comment">// using appName as cache for internal experimental scenario</span></span><br><span class="line">      <span class="keyword">if</span> ($$cacheLifecycleByAppName) &#123;</span><br><span class="line">        <span class="keyword">const</span> parcelConfigGetterPromise = appConfigPromiseGetterMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (parcelConfigGetterPromise) <span class="keyword">return</span> wrapParcelConfigForRemount((<span class="keyword">await</span> parcelConfigGetterPromise)(container));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (containerXPath) &#123;</span><br><span class="line">        <span class="keyword">const</span> parcelConfigGetterPromise = appConfigPromiseGetterMap.get(appContainerXPathKey);</span><br><span class="line">        <span class="keyword">if</span> (parcelConfigGetterPromise) <span class="keyword">return</span> wrapParcelConfigForRemount((<span class="keyword">await</span> parcelConfigGetterPromise)(container));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> parcelConfigObjectGetterPromise = loadApp(app, userConfiguration, lifeCycles);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      <span class="keyword">if</span> ($$cacheLifecycleByAppName) &#123;</span><br><span class="line">        appConfigPromiseGetterMap.set(name, parcelConfigObjectGetterPromise);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (containerXPath) appConfigPromiseGetterMap.set(appContainerXPathKey, parcelConfigObjectGetterPromise);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> parcelConfigObjectGetterPromise)(container);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!started &amp;&amp; configuration?.autoStart !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// We need to invoke start method of single-spa as the popstate event should be dispatched while the main app calling pushState/replaceState automatically,</span></span><br><span class="line">    <span class="comment">// but in single-spa it will check the start status before it dispatch popstate</span></span><br><span class="line">    <span class="comment">// see https://github.com/single-spa/single-spa/blob/f28b5963be1484583a072c8145ac0b5a28d91235/src/navigation/navigation-events.js#L101</span></span><br><span class="line">    <span class="comment">// ref https://github.com/umijs/qiankun/pull/1071</span></span><br><span class="line">    startSingleSpa(&#123; urlRerouteOnly: frameworkConfiguration.urlRerouteOnly ?? defaultUrlRerouteOnly &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  microApp = mountRootParcel(memorizedLoadingFn, &#123; domElement: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>), ...props &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (container) &#123;</span><br><span class="line">    <span class="keyword">if</span> (containerXPath) &#123;</span><br><span class="line">      <span class="comment">// Store the microApps which they mounted on the same container</span></span><br><span class="line">      <span class="keyword">const</span> microAppsRef = containerMicroAppsMap.get(appContainerXPathKey) || [];</span><br><span class="line">      microAppsRef.push(microApp);</span><br><span class="line">      containerMicroAppsMap.set(appContainerXPathKey, microAppsRef);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> cleanup = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> index = microAppsRef.indexOf(microApp);</span><br><span class="line">        microAppsRef.splice(index, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        microApp = <span class="literal">null</span>;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// gc after unmount</span></span><br><span class="line">      microApp.unmountPromise.then(cleanup).catch(cleanup);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> microApp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">opts: FrameworkConfiguration = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  frameworkConfiguration = &#123; prefetch: <span class="literal">true</span>, singular: <span class="literal">true</span>, sandbox: <span class="literal">true</span>, ...opts &#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    prefetch,</span><br><span class="line">    sandbox,</span><br><span class="line">    singular,</span><br><span class="line">    urlRerouteOnly = defaultUrlRerouteOnly,</span><br><span class="line">    ...importEntryOpts</span><br><span class="line">  &#125; = frameworkConfiguration;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prefetch) &#123;</span><br><span class="line">    doPrefetchStrategy(microApps, prefetch, importEntryOpts);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  frameworkConfiguration = autoDowngradeForLowVersionBrowser(frameworkConfiguration);</span><br><span class="line"></span><br><span class="line">  startSingleSpa(&#123; urlRerouteOnly &#125;);</span><br><span class="line">  started = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  frameworkStartedDefer.resolve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，内部的api分工如下：</p><ul><li>prefetch提供了预加载所有子应用资源的方法，</li><li>loader提供了根据子应用的入口去加载资源，执行入口文件，然后将结果html挂载到一个新建的div上</li><li>qiankun对外暴露的api主要是两个<ul><li>registerMicroApps主要是调用sigle-spa的register接口去注册子应用</li><li>loadMicroApp会调用loader中的方法去加载子应用，loader内部其实最终还是调用了single-spa的load方法，只是做了一些沙箱的隔离，css的隔离等。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/2022/11/22/micro-frontend-qiankun-sandbox/&quot;&gt;上一篇博客&lt;/a&gt;我们介绍了Qiankun的沙盒机制，也就是不同的子应用之间是如何做环境隔离的，这篇博客我们就基于上一篇博客讲一下如何利用沙盒去进行子应用的加载和切换。&lt;/p&gt;
&lt;p&gt;qiankun是基于single-spa实现的，所有内部用到了部分single-spa的接口，简单说一下single-spa和qiankun的区别，single-spa只做了子应用的注册，切换，路由监听等，还没有达到一个商用的水准，而qiankun在此之上加了js和css的沙箱隔离，按照官方文档，qiankun是达到了商用的要求。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>微前端框架 Qiankun 沙箱原理</title>
    <link href="https://sunra.top/2022/11/22/micro-frontend-qiankun-sandbox/"/>
    <id>https://sunra.top/2022/11/22/micro-frontend-qiankun-sandbox/</id>
    <published>2022-11-22T02:20:26.000Z</published>
    <updated>2022-11-23T03:04:07.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要微前端"><a href="#为什么需要微前端" class="headerlink" title="为什么需要微前端"></a>为什么需要微前端</h2><p>微前端其实诞生两个大的背景下，在提倡拥抱变化的前端社区可以看到新的框架、技术、概念层出不穷，并且随着WEB标准的演进，前端应用已经具备更好的性能、更快的开发效率。但随着而来的是应用的复杂程度更高、涉及的团队规模更广、更高的性能要求，应用复杂度已经成为阻塞业务发展的重要瓶颈。如何让现有系统拥抱最新技术提高生产力、并且解耦单体应用，是现在前端工程不得不面临的挑战。</p><a id="more"></a><p>如果你遇到以下的情况，可能你需要微前端：</p><ul><li>你的单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用后，随之而来的应用不可维护的问题</li><li>作为一个门户网站，需要集成很多的系统，这些系统由不同的团队维护、有风格各异的代码、有形形色色的技术栈，为了聚合只能采取iframe或者使用MPA的形式进行聚合</li></ul><h2 id="为什么需要沙箱"><a href="#为什么需要沙箱" class="headerlink" title="为什么需要沙箱"></a>为什么需要沙箱</h2><p>在微前端的场景，由于多个独立的应用被组织到了一起，在没有类似iframe的原生隔离下，势必会出现冲突，如全局变量冲突、样式冲突，这些冲突可能会导致应用样式异常，甚至功能不可用。所以想让微前端达到生产可用的程度，让每个子应用之间达到一定程度隔离的沙箱机制是必不可少的。</p><h2 id="如何实现一个沙箱"><a href="#如何实现一个沙箱" class="headerlink" title="如何实现一个沙箱"></a>如何实现一个沙箱</h2><h3 id="手动执行代码"><a href="#手动执行代码" class="headerlink" title="手动执行代码"></a>手动执行代码</h3><p>常规的脚本加载，是通过script标签去执行的，要实现沙箱，因为需要控制沙箱的开启和关闭，我们就需要精确掌握脚本的执行时机，所以我们需要寻找一种合适的能手动执行代码的方法</p><p>首先我们想到的是eval，由于eval有安全、性能等问题，同时也不利于调试，所以在以前我们听到的都是不推荐使用eval这个api。</p><p>但是在微前端的沙箱场景，eval确实是一个比较好的解决方案，比如qiankun就采用了eval作为代码执行器。</p><p>new Function通过传入一个string作为函数的的主体同时返回一个新函数，可以作为eval的一个替代品</p><p>对比eval，有两点比较重要的不同：</p><ul><li>不能访问当前环境的变量，但是可以访问全局变量，安全性更高</li><li>仅需要处理传入的字符串一次，后面重复执行都是同一个函数，而eval需要每次都处理，性能更高</li></ul><h3 id="快照沙箱"><a href="#快照沙箱" class="headerlink" title="快照沙箱"></a>快照沙箱</h3><p>顾名思义，即在某个阶段给当前的运行环境打一个快照，再在需要的时候把快照恢复，从而实现隔离。</p><p>这个东西的原理和操作系统中的CPU进程切换很像，每个进程获得CPU使用权时把PCB（进程控制块）中的上下文装载到对应的寄存器中，然后CPU开始继续执行，等到失去使用权时再将当前寄存器中的信息重新保存回PCB中。快照沙箱也是这样，对于每一个子应用，运行时将其内部保存的上下文加载到对应的变量上，销毁时再将当前浏览器环境中各个变量的值保存到快照中。</p><p>我们来看一下qiankun中快照沙箱的源码，源码上添加了我的注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author <span class="variable">Hydrogen</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>2020-3-8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> type &#123; SandBox &#125; <span class="keyword">from</span> <span class="string">'../interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SandBoxType &#125; <span class="keyword">from</span> <span class="string">'../interfaces'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iter</span>(<span class="params">obj: typeof window, callbackFn: (prop: any</span>) =&gt; <span class="title">void</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line guard-for-in, no-restricted-syntax</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// patch for clearInterval for compatible reason, see #1490</span></span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(prop) || prop === <span class="string">'clearInterval'</span>) &#123;</span><br><span class="line">      callbackFn(prop);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于 diff 方式实现的沙箱，用于不支持 Proxy 的低版本浏览器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SnapshotSandbox</span> <span class="title">implements</span> <span class="title">SandBox</span> </span>&#123;</span><br><span class="line">  proxy: WindowProxy;</span><br><span class="line"></span><br><span class="line">  name: string;</span><br><span class="line"></span><br><span class="line">  type: SandBoxType;</span><br><span class="line"></span><br><span class="line">  sandboxRunning = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// windows对象的快照，用于保存当前沙盒active之前的window对象的状态</span></span><br><span class="line">  private windowSnapshot!: Window;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前沙盒在active和inactive之间window对象上修改过的值</span></span><br><span class="line">  private modifyPropsMap: Record&lt;any, any&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.proxy = <span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">this</span>.type = SandBoxType.Snapshot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  active() &#123;</span><br><span class="line">    <span class="comment">// 记录当前快照，用于在inactive时比较哪些属性发生了变化</span></span><br><span class="line">    <span class="keyword">this</span>.windowSnapshot = &#123;&#125; <span class="keyword">as</span> Window;</span><br><span class="line">    iter(<span class="built_in">window</span>, (prop) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.windowSnapshot[prop] = <span class="built_in">window</span>[prop];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复之前的变更，也就是上一次active和inactive之间修改过的变量</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.modifyPropsMap).forEach(<span class="function">(<span class="params">p: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>[p] = <span class="keyword">this</span>.modifyPropsMap[p];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sandboxRunning = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inactive() &#123;</span><br><span class="line">    <span class="keyword">this</span>.modifyPropsMap = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较当前window对象上的属性和active之前的window对象上的属性，如果有不同，记录进modifyPropsMap中，下次在active时重新赋值回window</span></span><br><span class="line">    iter(<span class="built_in">window</span>, (prop) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>[prop] !== <span class="keyword">this</span>.windowSnapshot[prop]) &#123;</span><br><span class="line">        <span class="comment">// 记录变更，恢复环境</span></span><br><span class="line">        <span class="keyword">this</span>.modifyPropsMap[prop] = <span class="built_in">window</span>[prop];</span><br><span class="line">        <span class="built_in">window</span>[prop] = <span class="keyword">this</span>.windowSnapshot[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">`[qiankun:sandbox] <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> origin window restore...`</span>, <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.modifyPropsMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sandboxRunning = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理沙箱"><a href="#代理沙箱" class="headerlink" title="代理沙箱"></a>代理沙箱</h3><p>代理沙箱主要是通过为每个沙盒创建一个fakeWindow，然后为这个fakeWindow设置代理，通过代理来访问这个fakeWindow，所以它的源码主要分为两部分：</p><ul><li>通过<code>createFakeWindow</code>函数创建一个fakeWindow，这个fakeWindow上只会克隆window对象上可以修改的属性</li><li>创建ProxySandbox类，内部使用<code>createFakeWindow</code>创建的fakeWindow</li></ul><p>我们先看一下<code>createFakeWindow</code>，说起来这个函数做的事情就是它注释上说的：<code>copy the non-configurable property of global to fakeWindow</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFakeWindow</span>(<span class="params">globalContext: Window</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// map always has the fastest performance in has check scenario</span></span><br><span class="line">  <span class="comment">// see https://jsperf.com/array-indexof-vs-set-has/23</span></span><br><span class="line">  <span class="keyword">const</span> propertiesWithGetter = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;PropertyKey, boolean&gt;();</span><br><span class="line">  <span class="keyword">const</span> fakeWindow = &#123;&#125; <span class="keyword">as</span> FakeWindow;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   copy the non-configurable property of global to fakeWindow</span></span><br><span class="line"><span class="comment">   see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor</span></span><br><span class="line"><span class="comment">   &gt; A property cannot be reported as non-configurable, if it does not exist as an own property of the target object or if it exists as a configurable own property of the target object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyNames(globalContext)</span><br><span class="line">    .filter(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line">      <span class="keyword">return</span> !descriptor?.configurable;</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line">      <span class="keyword">if</span> (descriptor) &#123;</span><br><span class="line">        <span class="keyword">const</span> hasGetter = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(descriptor, <span class="string">'get'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         make top/self/window property configurable and writable, otherwise it will cause TypeError while get trap return.</span></span><br><span class="line"><span class="comment">         see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get</span></span><br><span class="line"><span class="comment">         &gt; The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable data property.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          p === <span class="string">'top'</span> ||</span><br><span class="line">          p === <span class="string">'parent'</span> ||</span><br><span class="line">          p === <span class="string">'self'</span> ||</span><br><span class="line">          p === <span class="string">'window'</span> ||</span><br><span class="line">          (process.env.NODE_ENV === <span class="string">'test'</span> &amp;&amp; (p === <span class="string">'mockTop'</span> || p === <span class="string">'mockSafariTop'</span>))</span><br><span class="line">        ) &#123;</span><br><span class="line">          descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">           The descriptor of window.window/window.top/window.self in Safari/FF are accessor descriptors, we need to avoid adding a data descriptor while it was</span></span><br><span class="line"><span class="comment">           Example:</span></span><br><span class="line"><span class="comment">            Safari/FF: Object.getOwnPropertyDescriptor(window, 'top') -&gt; &#123;get: function, set: undefined, enumerable: true, configurable: false&#125;</span></span><br><span class="line"><span class="comment">            Chrome: Object.getOwnPropertyDescriptor(window, 'top') -&gt; &#123;value: Window, writable: false, enumerable: true, configurable: false&#125;</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="keyword">if</span> (!hasGetter) &#123;</span><br><span class="line">            descriptor.writable = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasGetter) propertiesWithGetter.set(p, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// freeze the descriptor to avoid being modified by zone.js</span></span><br><span class="line">        <span class="comment">// see https://github.com/angular/zone.js/blob/a5fe09b0fac27ac5df1fa746042f96f05ccb6a00/lib/browser/define-property.ts#L71</span></span><br><span class="line">        rawObjectDefineProperty(fakeWindow, p, <span class="built_in">Object</span>.freeze(descriptor));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    fakeWindow,</span><br><span class="line">    propertiesWithGetter,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是ProxySandbox的实现了，比较关键的就是它的构造函数中通过proxy劫持了对fakeWindow的set方法，然后通过这种方式去统计有那些属性发生了改变，同时如果是<code>globalVariableWhiteList</code>中的成员，那么就将其descriptor存储到<code>globalWhitelistPrevDescriptor</code>中，在inactive的时候恢复</p><p>我们首先看下这个<code>globalVariableWhiteList</code>是什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variableWhiteListInDev =</span><br><span class="line">  process.env.NODE_ENV === <span class="string">'test'</span> || process.env.NODE_ENV === <span class="string">'development'</span> || <span class="built_in">window</span>.__QIANKUN_DEVELOPMENT__</span><br><span class="line">    ? [</span><br><span class="line">        <span class="comment">// for react hot reload</span></span><br><span class="line">        <span class="comment">// see https://github.com/facebook/create-react-app/blob/66bf7dfc43350249e2f09d138a20840dae8a0a4a/packages/react-error-overlay/src/index.js#L180</span></span><br><span class="line">        <span class="string">'__REACT_ERROR_OVERLAY_GLOBAL_HOOK__'</span>,</span><br><span class="line">      ]</span><br><span class="line">    : [];</span><br><span class="line"><span class="comment">// who could escape the sandbox</span></span><br><span class="line"><span class="keyword">const</span> globalVariableWhiteList: string[] = [</span><br><span class="line">  <span class="comment">// FIXME System.js used a indirect call with eval, which would make it scope escape to global</span></span><br><span class="line">  <span class="comment">// To make System.js works well, we write it back to global window temporary</span></span><br><span class="line">  <span class="comment">// see https://github.com/systemjs/systemjs/blob/457f5b7e8af6bd120a279540477552a07d5de086/src/evaluate.js#L106</span></span><br><span class="line">  <span class="string">'System'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// see https://github.com/systemjs/systemjs/blob/457f5b7e8af6bd120a279540477552a07d5de086/src/instantiate.js#L357</span></span><br><span class="line">  <span class="string">'__cjsWrapper'</span>,</span><br><span class="line">  ...variableWhiteListInDev,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后看一下ProxySandbox的大致结构，这里我先把Proxy隐藏，后面再一个个介绍：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ProxySandbox <span class="keyword">implements</span> SandBox &#123;</span><br><span class="line">  <span class="comment">/** window 值变更记录 */</span></span><br><span class="line">  <span class="keyword">private</span> updatedValueSet = <span class="keyword">new</span> Set&lt;PropertyKey&gt;();</span><br><span class="line"></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span>: SandBoxType;</span><br><span class="line"></span><br><span class="line">  proxy: WindowProxy;</span><br><span class="line">  sandboxRunning = <span class="literal">true</span>;</span><br><span class="line">  latestSetProp: PropertyKey | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  active() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.sandboxRunning) activeSandboxCount++;</span><br><span class="line">    <span class="keyword">this</span>.sandboxRunning = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inactive() &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">`[qiankun:sandbox] <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> modified global properties restore...`</span>, [</span><br><span class="line">        ...this.updatedValueSet.keys(),</span><br><span class="line">      ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'test'</span> || --activeSandboxCount === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// reset the global value to the prev value</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.globalWhitelistPrevDescriptor).forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> descriptor = <span class="keyword">this</span>.globalWhitelistPrevDescriptor[p];</span><br><span class="line">        <span class="keyword">if</span> (descriptor) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.globalContext, p, descriptor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// @ts-ignore</span></span><br><span class="line">          <span class="keyword">delete</span> <span class="keyword">this</span>.globalContext[p];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sandboxRunning = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the descriptor of global variables in whitelist before it been modified</span></span><br><span class="line">  globalWhitelistPrevDescriptor: &#123; [p <span class="keyword">in</span> <span class="keyword">typeof</span> globalVariableWhiteList[<span class="built_in">number</span>]]: PropertyDescriptor | <span class="literal">undefined</span> &#125; = &#123;&#125;;</span><br><span class="line">  globalContext: <span class="keyword">typeof</span> <span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, globalContext = <span class="built_in">window</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.globalContext = globalContext;</span><br><span class="line">    <span class="keyword">this</span>.type = SandBoxType.Proxy;</span><br><span class="line">    <span class="keyword">const</span> &#123; updatedValueSet &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; fakeWindow, propertiesWithGetter &#125; = createFakeWindow(globalContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> descriptorTargetMap = <span class="keyword">new</span> Map&lt;PropertyKey, SymbolTarget&gt;();</span><br><span class="line">    <span class="keyword">const</span> hasOwnProperty = <span class="function">(<span class="params">key: PropertyKey</span>) =&gt;</span> fakeWindow.hasOwnProperty(key) || globalContext.hasOwnProperty(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> Proxy(fakeWindow, &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.proxy = proxy;</span><br><span class="line"></span><br><span class="line">    activeSandboxCount++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> registerRunningApp(name: <span class="built_in">string</span>, proxy: Window) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.sandboxRunning) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentRunningApp = getCurrentRunningApp();</span><br><span class="line">      <span class="keyword">if</span> (!currentRunningApp || currentRunningApp.name !== name) &#123;</span><br><span class="line">        setCurrentRunningApp(&#123; name, <span class="built_in">window</span>: proxy &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// FIXME if you have any other good ideas</span></span><br><span class="line">      <span class="comment">// remove the mark in next tick, thus we can identify whether it in micro app or not</span></span><br><span class="line">      <span class="comment">// this approach is just a workaround, it could not cover all complex cases, such as the micro app runs in the same task context with master in some case</span></span><br><span class="line">      nextTask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setCurrentRunningApp(<span class="literal">null</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们暂时看不出这<code>latestSetProp, globalWhitelistPrevDescriptor</code>几个变量的作用，我们继续看一下Proxy中的各个配置：</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set拦截其中会检测fakeWindow和globalContext是否都有当前要修改的属性，如果有，那么直接给fakeWindow上的该属性赋值，如果没有，只有globalContext上有，看一下这个属性是否是writable或者有set方法，只有这两个有其一，才表明这个属性本身是可以修改的，我们给fakeWindow上添加这个属性并修改才是有意义的</p><p>同时set方法中也会查看当前修改的属性是否是globalVariableWhiteList中的一个，如果是，将其descriptor添加到globalWhitelistPrevDescriptor中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>: (target: FakeWindow, p: PropertyKey, value: <span class="built_in">any</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.sandboxRunning) &#123;</span><br><span class="line"><span class="keyword">this</span>.registerRunningApp(name, proxy);</span><br><span class="line"><span class="comment">// We must keep its description while the property existed in globalContext before</span></span><br><span class="line"><span class="keyword">if</span> (!target.hasOwnProperty(p) &amp;&amp; globalContext.hasOwnProperty(p)) &#123;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line"><span class="keyword">const</span> &#123; writable, configurable, enumerable, <span class="keyword">set</span> &#125; = descriptor!;</span><br><span class="line"><span class="comment">// only writable property can be overwritten</span></span><br><span class="line"><span class="comment">// here we ignored accessor descriptor of globalContext as it makes no sense to trigger its logic(which might make sandbox escaping instead)</span></span><br><span class="line"><span class="comment">// we force to set value by data descriptor</span></span><br><span class="line"><span class="keyword">if</span> (writable || <span class="keyword">set</span>) &#123;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(target, p, &#123; configurable, enumerable, writable: <span class="literal">true</span>, value &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">target[p] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sync the property to globalContext</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> p === <span class="string">'string'</span> &amp;&amp; globalVariableWhiteList.indexOf(p) !== <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.globalWhitelistPrevDescriptor[p] = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">globalContext[p] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updatedValueSet.add(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.latestSetProp = p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">`[qiankun] Set window.<span class="subst">$&#123;p.toString()&#125;</span> while sandbox destroyed or inactive in <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 strict-mode 下，Proxy 的 handler.set 返回 false 会抛出 TypeError，在沙箱卸载的情况下应该忽略错误</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>这个get其实就是做了很多的检测，比如如果要获取的属性是window或者self，这种，返回proxy本身这种，具体很多分支大家可以看一下下面的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>: (target: FakeWindow, p: PropertyKey): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.registerRunningApp(name, proxy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p === Symbol.unscopables) <span class="keyword">return</span> unscopables;</span><br><span class="line"><span class="comment">// avoid who using window.window or window.self to escape the sandbox environment to touch the really window</span></span><br><span class="line"><span class="comment">// see https://github.com/eligrey/FileSaver.js/blob/master/src/FileSaver.js#L13</span></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'window'</span> || p === <span class="string">'self'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hijack globalWindow accessing with globalThis keyword</span></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'globalThis'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">p === <span class="string">'top'</span> ||</span><br><span class="line">p === <span class="string">'parent'</span> ||</span><br><span class="line">(process.env.NODE_ENV === <span class="string">'test'</span> &amp;&amp; (p === <span class="string">'mockTop'</span> || p === <span class="string">'mockSafariTop'</span>))</span><br><span class="line">) &#123;</span><br><span class="line"><span class="comment">// if your master app in an iframe context, allow these props escape the sandbox</span></span><br><span class="line"><span class="keyword">if</span> (globalContext === globalContext.parent) &#123;</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (globalContext <span class="keyword">as</span> <span class="built_in">any</span>)[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy.hasOwnProperty would invoke getter firstly, then its value represented as globalContext.hasOwnProperty</span></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'hasOwnProperty'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> hasOwnProperty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'document'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'eval'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">eval</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actualTarget = propertiesWithGetter.has(p) ? globalContext : p <span class="keyword">in</span> target ? target : globalContext;</span><br><span class="line"><span class="keyword">const</span> value = actualTarget[p];</span><br><span class="line"></span><br><span class="line"><span class="comment">// frozen value should return directly, see https://github.com/umijs/qiankun/issues/2015</span></span><br><span class="line"><span class="keyword">if</span> (isPropertyFrozen(actualTarget, p)) &#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Some dom api must be bound to native window, otherwise it would cause exception like 'TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation'</span></span><br><span class="line"><span class="comment">See this code:</span></span><br><span class="line"><span class="comment">const proxy = new Proxy(window, &#123;&#125;);</span></span><br><span class="line"><span class="comment">const proxyFetch = fetch.bind(proxy);</span></span><br><span class="line"><span class="comment">proxyFetch('https://qiankun.com');</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> boundTarget = useNativeWindowForBindingsProps.get(p) ? nativeGlobal : globalContext;</span><br><span class="line"><span class="keyword">return</span> getTargetValue(boundTarget, value);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">has(target: FakeWindow, p: <span class="built_in">string</span> | <span class="built_in">number</span> | symbol): <span class="built_in">boolean</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p <span class="keyword">in</span> unscopables || p <span class="keyword">in</span> target || p <span class="keyword">in</span> globalContext;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getOwnPropertyDescriptor(target: FakeWindow, p: <span class="built_in">string</span> | <span class="built_in">number</span> | symbol): PropertyDescriptor | <span class="literal">undefined</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">as the descriptor of top/self/window/mockTop in raw window are configurable but not in proxy target, we need to get it from target to avoid TypeError</span></span><br><span class="line"><span class="comment">see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor</span></span><br><span class="line"><span class="comment">&gt; A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (target.hasOwnProperty(p)) &#123;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, p);</span><br><span class="line">descriptorTargetMap.set(p, <span class="string">'target'</span>);</span><br><span class="line"><span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (globalContext.hasOwnProperty(p)) &#123;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line">descriptorTargetMap.set(p, <span class="string">'globalContext'</span>);</span><br><span class="line"><span class="comment">// A property cannot be reported as non-configurable, if it does not exists as an own property of the target object</span></span><br><span class="line"><span class="keyword">if</span> (descriptor &amp;&amp; !descriptor.configurable) &#123;</span><br><span class="line">descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// trap to support iterator with sandbox</span></span><br><span class="line">ownKeys(target: FakeWindow): ArrayLike&lt;<span class="built_in">string</span> | symbol&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> uniq(Reflect.ownKeys(globalContext).concat(Reflect.ownKeys(target)));</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">defineProperty(target: Window, p: PropertyKey, attributes: PropertyDescriptor): <span class="built_in">boolean</span> &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">from</span> = descriptorTargetMap.get(p);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Descriptor must be defined to native window while it comes from native window via Object.getOwnPropertyDescriptor(window, p),</span></span><br><span class="line"><span class="comment">otherwise it would cause a TypeError with illegal invocation.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">from</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'globalContext'</span>:</span><br><span class="line"><span class="keyword">return</span> Reflect.defineProperty(globalContext, p, attributes);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> Reflect.defineProperty(target, p, attributes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">deleteProperty: (target: FakeWindow, p: <span class="built_in">string</span> | <span class="built_in">number</span> | symbol): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.registerRunningApp(name, proxy);</span><br><span class="line"><span class="keyword">if</span> (target.hasOwnProperty(p)) &#123;</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">delete</span> target[p];</span><br><span class="line">updatedValueSet.delete(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// makes sure `window instanceof Window` returns truthy in micro app</span></span><br><span class="line">getPrototypeOf() &#123;</span><br><span class="line"><span class="keyword">return</span> Reflect.getPrototypeOf(globalContext);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="patchers"><a href="#patchers" class="headerlink" title="patchers"></a>patchers</h3><h4 id="劫持interval"><a href="#劫持interval" class="headerlink" title="劫持interval"></a>劫持interval</h4><p>这部分功能主要是用于拦截sandbox运行期间的定时器，收集有哪些定时器，并能够在sandbox退出事把所有定时器清空</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rawWindowInterval = <span class="built_in">window</span>.setInterval;</span><br><span class="line"><span class="keyword">const</span> rawWindowClearInterval = <span class="built_in">window</span>.clearInterval;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">global: Window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> intervals: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  global.clearInterval = <span class="function">(<span class="params">intervalId: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    intervals = intervals.filter(<span class="function">(<span class="params">id</span>) =&gt;</span> id !== intervalId);</span><br><span class="line">    <span class="keyword">return</span> rawWindowClearInterval.call(<span class="built_in">window</span>, intervalId <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  global.setInterval = <span class="function">(<span class="params">handler: CallableFunction, timeout?: <span class="built_in">number</span>, ...args: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> intervalId = rawWindowInterval(handler, timeout, ...args);</span><br><span class="line">    intervals = [...intervals, intervalId];</span><br><span class="line">    <span class="keyword">return</span> intervalId;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    intervals.forEach(<span class="function">(<span class="params">id</span>) =&gt;</span> global.clearInterval(id));</span><br><span class="line">    global.setInterval = rawWindowInterval;</span><br><span class="line">    global.clearInterval = rawWindowClearInterval;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> noop;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="劫持eventListener"><a href="#劫持eventListener" class="headerlink" title="劫持eventListener"></a>劫持eventListener</h4><p>这个的功能与劫持interval相同，这里是劫持所有的eventListener，收集所有的事件监听器，并提供函数能在sandbox退出时清空所有的事件监听器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rawAddEventListener = <span class="built_in">window</span>.addEventListener;</span><br><span class="line"><span class="keyword">const</span> rawRemoveEventListener = <span class="built_in">window</span>.removeEventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">global: WindowProxy</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listenerMap = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, EventListenerOrEventListenerObject[]&gt;();</span><br><span class="line"></span><br><span class="line">  global.addEventListener = (</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>,</span><br><span class="line">    listener: EventListenerOrEventListenerObject,</span><br><span class="line">    options?: <span class="built_in">boolean</span> | AddEventListenerOptions,</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> listeners = listenerMap.get(<span class="keyword">type</span>) || [];</span><br><span class="line">    listenerMap.set(<span class="keyword">type</span>, [...listeners, listener]);</span><br><span class="line">    <span class="keyword">return</span> rawAddEventListener.call(<span class="built_in">window</span>, <span class="keyword">type</span>, listener, options);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  global.removeEventListener = (</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>,</span><br><span class="line">    listener: EventListenerOrEventListenerObject,</span><br><span class="line">    options?: <span class="built_in">boolean</span> | AddEventListenerOptions,</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> storedTypeListeners = listenerMap.get(<span class="keyword">type</span>);</span><br><span class="line">    <span class="keyword">if</span> (storedTypeListeners &amp;&amp; storedTypeListeners.length &amp;&amp; storedTypeListeners.indexOf(listener) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      storedTypeListeners.splice(storedTypeListeners.indexOf(listener), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rawRemoveEventListener.call(<span class="built_in">window</span>, <span class="keyword">type</span>, listener, options);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    listenerMap.forEach(<span class="function">(<span class="params">listeners, <span class="keyword">type</span></span>) =&gt;</span></span><br><span class="line">      [...listeners].forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> global.removeEventListener(<span class="keyword">type</span>, listener)),</span><br><span class="line">    );</span><br><span class="line">    global.addEventListener = rawAddEventListener;</span><br><span class="line">    global.removeEventListener = rawRemoveEventListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> noop;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="劫持historyListener（针对umi框架）"><a href="#劫持historyListener（针对umi框架）" class="headerlink" title="劫持historyListener（针对umi框架）"></a>劫持historyListener（针对umi框架）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isFunction, noop &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// FIXME umi unmount feature request</span></span><br><span class="line">  <span class="comment">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span><br><span class="line">  <span class="keyword">let</span> rawHistoryListen = <span class="function">(<span class="params">_: <span class="built_in">any</span></span>) =&gt;</span> noop;</span><br><span class="line">  <span class="keyword">const</span> historyListeners: <span class="built_in">Array</span>&lt;<span class="keyword">typeof</span> noop&gt; = [];</span><br><span class="line">  <span class="keyword">const</span> historyUnListens: <span class="built_in">Array</span>&lt;<span class="keyword">typeof</span> noop&gt; = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history &amp;&amp; isFunction((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen)) &#123;</span><br><span class="line">    rawHistoryListen = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen.bind((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history);</span><br><span class="line"></span><br><span class="line">    (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen = <span class="function">(<span class="params">listener: <span class="keyword">typeof</span> noop</span>) =&gt;</span> &#123;</span><br><span class="line">      historyListeners.push(listener);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> unListen = rawHistoryListen(listener);</span><br><span class="line">      historyUnListens.push(unListen);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        unListen();</span><br><span class="line">        historyUnListens.splice(historyUnListens.indexOf(unListen), <span class="number">1</span>);</span><br><span class="line">        historyListeners.splice(historyListeners.indexOf(listener), <span class="number">1</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rebuild = noop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     还存在余量 listener 表明未被卸载，存在两种情况</span></span><br><span class="line"><span class="comment">     1. 应用在 unmout 时未正确卸载 listener</span></span><br><span class="line"><span class="comment">     2. listener 是应用 mount 之前绑定的，</span></span><br><span class="line"><span class="comment">     第二种情况下应用在下次 mount 之前需重新绑定该 listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (historyListeners.length) &#123;</span><br><span class="line">      rebuild = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 必须使用 window.g_history.listen 的方式重新绑定 listener，从而能保证 rebuild 这部分也能被捕获到，否则在应用卸载后无法正确的移除这部分副作用</span></span><br><span class="line">        historyListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen(listener));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卸载余下的 listener</span></span><br><span class="line">    historyUnListens.forEach(<span class="function">(<span class="params">unListen</span>) =&gt;</span> unListen());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// restore</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history &amp;&amp; isFunction((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen)) &#123;</span><br><span class="line">      (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen = rawHistoryListen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rebuild;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="patch-sandbox"><a href="#patch-sandbox" class="headerlink" title="patch sandbox"></a>patch sandbox</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patchLooseSandbox</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  appWrapperGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  proxy: Window,</span></span></span><br><span class="line"><span class="function"><span class="params">  mounting = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: CallableFunction,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Freer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dynamicStyleSheetElements: <span class="built_in">Array</span>&lt;HTMLLinkElement | HTMLStyleElement&gt; = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unpatchDynamicAppendPrototypeFunctions = patchHTMLDynamicAppendPrototypeFunctions(</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      check if the currently specified application is active</span></span><br><span class="line"><span class="comment">      While we switch page from qiankun app to a normal react routing page, the normal one may load stylesheet dynamically while page rendering,</span></span><br><span class="line"><span class="comment">      but the url change listener must to wait until the current call stack is flushed.</span></span><br><span class="line"><span class="comment">      This scenario may cause we record the stylesheet from react routing page dynamic injection,</span></span><br><span class="line"><span class="comment">      and remove them after the url change triggered and qiankun app is unmouting</span></span><br><span class="line"><span class="comment">      see https://github.com/ReactTraining/history/blob/master/modules/createHashHistory.js#L222-L230</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    () =&gt; checkActivityFunctions(<span class="built_in">window</span>.location).some(<span class="function">(<span class="params">name</span>) =&gt;</span> name === appName),</span><br><span class="line">    () =&gt; (&#123;</span><br><span class="line">      appName,</span><br><span class="line">      appWrapperGetter,</span><br><span class="line">      proxy,</span><br><span class="line">      strictGlobal: <span class="literal">false</span>,</span><br><span class="line">      speedySandbox: <span class="literal">false</span>,</span><br><span class="line">      scopedCSS,</span><br><span class="line">      dynamicStyleSheetElements,</span><br><span class="line">      excludeAssetFilter,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!mounting) calcAppCount(appName, <span class="string">'increase'</span>, <span class="string">'bootstrapping'</span>);</span><br><span class="line">  <span class="keyword">if</span> (mounting) calcAppCount(appName, <span class="string">'increase'</span>, <span class="string">'mounting'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mounting) calcAppCount(appName, <span class="string">'decrease'</span>, <span class="string">'bootstrapping'</span>);</span><br><span class="line">    <span class="keyword">if</span> (mounting) calcAppCount(appName, <span class="string">'decrease'</span>, <span class="string">'mounting'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// release the overwrite prototype after all the micro apps unmounted</span></span><br><span class="line">    <span class="keyword">if</span> (isAllAppsUnmounted()) unpatchDynamicAppendPrototypeFunctions();</span><br><span class="line"></span><br><span class="line">    recordStyledComponentsCSSRules(dynamicStyleSheetElements);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// As now the sub app content all wrapped with a special id container,</span></span><br><span class="line">    <span class="comment">// the dynamic style sheet would be removed automatically while unmoutting</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">rebuild</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      rebuildCSSRules(dynamicStyleSheetElements, <span class="function">(<span class="params">stylesheetElement</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> appWrapper = appWrapperGetter();</span><br><span class="line">        <span class="keyword">if</span> (!appWrapper.contains(stylesheetElement)) &#123;</span><br><span class="line">          <span class="comment">// Using document.head.appendChild ensures that appendChild invocation can also directly use the HTMLHeadElement.prototype.appendChild method which is overwritten at mounting phase</span></span><br><span class="line">          <span class="built_in">document</span>.head.appendChild.call(appWrapper, stylesheetElement);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// As the patcher will be invoked every mounting phase, we could release the cache for gc after rebuilding</span></span><br><span class="line">      <span class="keyword">if</span> (mounting) &#123;</span><br><span class="line">        dynamicStyleSheetElements = [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get native global window with a sandbox disgusted way, thus we could share it between qiankun instances🤪</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(nativeGlobal, <span class="string">'__proxyAttachContainerConfigMap__'</span>, &#123; enumerable: <span class="literal">false</span>, writable: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Share proxyAttachContainerConfigMap between multiple qiankun instance, thus they could access the same record</span></span><br><span class="line">nativeGlobal.__proxyAttachContainerConfigMap__ =</span><br><span class="line">  nativeGlobal.__proxyAttachContainerConfigMap__ || <span class="keyword">new</span> WeakMap&lt;WindowProxy, ContainerConfig&gt;();</span><br><span class="line"><span class="keyword">const</span> proxyAttachContainerConfigMap: WeakMap&lt;WindowProxy, ContainerConfig&gt; =</span><br><span class="line">  nativeGlobal.__proxyAttachContainerConfigMap__;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elementAttachContainerConfigMap = <span class="keyword">new</span> WeakMap&lt;HTMLElement, ContainerConfig&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> docCreatePatchedMap = <span class="keyword">new</span> WeakMap&lt;<span class="keyword">typeof</span> <span class="built_in">document</span>.createElement, <span class="keyword">typeof</span> <span class="built_in">document</span>.createElement&gt;();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchDocumentCreateElement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> docCreateElementFnBeforeOverwrite = docCreatePatchedMap.get(<span class="built_in">document</span>.createElement);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!docCreateElementFnBeforeOverwrite) &#123;</span><br><span class="line">    <span class="keyword">const</span> rawDocumentCreateElement = <span class="built_in">document</span>.createElement;</span><br><span class="line">    Document.prototype.createElement = <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>&lt;<span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">HTMLElementTagNameMap</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">this</span>: Document,</span></span></span><br><span class="line"><span class="function"><span class="params">      tagName: K,</span></span></span><br><span class="line"><span class="function"><span class="params">      options?: ElementCreationOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>): <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> element = rawDocumentCreateElement.call(<span class="keyword">this</span>, tagName, options);</span><br><span class="line">      <span class="keyword">if</span> (isHijackingTag(tagName)) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="built_in">window</span>: currentRunningSandboxProxy &#125; = getCurrentRunningApp() || &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (currentRunningSandboxProxy) &#123;</span><br><span class="line">          <span class="keyword">const</span> proxyContainerConfig = proxyAttachContainerConfigMap.get(currentRunningSandboxProxy);</span><br><span class="line">          <span class="keyword">if</span> (proxyContainerConfig) &#123;</span><br><span class="line">            elementAttachContainerConfigMap.set(element, proxyContainerConfig);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// It means it have been overwritten while createElement is an own property of document</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hasOwnProperty(<span class="string">'createElement'</span>)) &#123;</span><br><span class="line">      <span class="built_in">document</span>.createElement = Document.prototype.createElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    docCreatePatchedMap.set(Document.prototype.createElement, rawDocumentCreateElement);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unpatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (docCreateElementFnBeforeOverwrite) &#123;</span><br><span class="line">      Document.prototype.createElement = docCreateElementFnBeforeOverwrite;</span><br><span class="line">      <span class="built_in">document</span>.createElement = docCreateElementFnBeforeOverwrite;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patchStrictSandbox</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  appWrapperGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  proxy: Window,</span></span></span><br><span class="line"><span class="function"><span class="params">  mounting = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: CallableFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">  speedySandbox = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Freer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> containerConfig = proxyAttachContainerConfigMap.get(proxy);</span><br><span class="line">  <span class="keyword">if</span> (!containerConfig) &#123;</span><br><span class="line">    containerConfig = &#123;</span><br><span class="line">      appName,</span><br><span class="line">      proxy,</span><br><span class="line">      appWrapperGetter,</span><br><span class="line">      dynamicStyleSheetElements: [],</span><br><span class="line">      strictGlobal: <span class="literal">true</span>,</span><br><span class="line">      speedySandbox,</span><br><span class="line">      excludeAssetFilter,</span><br><span class="line">      scopedCSS,</span><br><span class="line">    &#125;;</span><br><span class="line">    proxyAttachContainerConfigMap.set(proxy, containerConfig);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// all dynamic style sheets are stored in proxy container</span></span><br><span class="line">  <span class="keyword">const</span> &#123; dynamicStyleSheetElements &#125; = containerConfig;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unpatchDocumentCreate = patchDocumentCreateElement();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unpatchDynamicAppendPrototypeFunctions = patchHTMLDynamicAppendPrototypeFunctions(</span><br><span class="line">    (element) =&gt; elementAttachContainerConfigMap.has(element),</span><br><span class="line">    (element) =&gt; elementAttachContainerConfigMap.get(element)!,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!mounting) calcAppCount(appName, <span class="string">'increase'</span>, <span class="string">'bootstrapping'</span>);</span><br><span class="line">  <span class="keyword">if</span> (mounting) calcAppCount(appName, <span class="string">'increase'</span>, <span class="string">'mounting'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mounting) calcAppCount(appName, <span class="string">'decrease'</span>, <span class="string">'bootstrapping'</span>);</span><br><span class="line">    <span class="keyword">if</span> (mounting) calcAppCount(appName, <span class="string">'decrease'</span>, <span class="string">'mounting'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// release the overwritten prototype after all the micro apps unmounted</span></span><br><span class="line">    <span class="keyword">if</span> (isAllAppsUnmounted()) &#123;</span><br><span class="line">      unpatchDynamicAppendPrototypeFunctions();</span><br><span class="line">      unpatchDocumentCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    recordStyledComponentsCSSRules(dynamicStyleSheetElements);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// As now the sub app content all wrapped with a special id container,</span></span><br><span class="line">    <span class="comment">// the dynamic style sheet would be removed automatically while unmoutting</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">rebuild</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      rebuildCSSRules(dynamicStyleSheetElements, <span class="function">(<span class="params">stylesheetElement</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> appWrapper = appWrapperGetter();</span><br><span class="line">        <span class="keyword">if</span> (!appWrapper.contains(stylesheetElement)) &#123;</span><br><span class="line">          <span class="keyword">const</span> mountDom =</span><br><span class="line">            stylesheetElement[styleElementTargetSymbol] === <span class="string">'head'</span> ? getAppWrapperHeadElement(appWrapper) : appWrapper;</span><br><span class="line">          rawHeadAppendChild.call(mountDom, stylesheetElement);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="patchers-集成导出"><a href="#patchers-集成导出" class="headerlink" title="patchers 集成导出"></a>patchers 集成导出</h4><p>简单总结下patcher是做什么的：</p><ul><li>执行过程中会对一些全局的定时器或者监听器或者某些全局变量进行拦截统计，我们统称为副作用，然后返回free函数用于子应用卸载时（即unmount）调用</li><li>free函数内部会对上一部统计到的副作用进行清空，同时如果有部分副作用是需要下次子应用重新激活时重新启动的，放到free函数最终返回的rebuild中，最终会在mount时调用rebuild</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; Freer, SandBox &#125; <span class="keyword">from</span> <span class="string">'../../interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SandBoxType &#125; <span class="keyword">from</span> <span class="string">'../../interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> css <span class="keyword">from</span> <span class="string">'./css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; patchLooseSandbox, patchStrictSandbox &#125; <span class="keyword">from</span> <span class="string">'./dynamicAppend'</span>;</span><br><span class="line"><span class="keyword">import</span> patchHistoryListener <span class="keyword">from</span> <span class="string">'./historyListener'</span>;</span><br><span class="line"><span class="keyword">import</span> patchInterval <span class="keyword">from</span> <span class="string">'./interval'</span>;</span><br><span class="line"><span class="keyword">import</span> patchWindowListener <span class="keyword">from</span> <span class="string">'./windowListener'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patchAtMounting</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elementGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  sandbox: SandBox,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: CallableFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">  speedySandBox?: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Freer</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> basePatchers = [</span><br><span class="line">    () =&gt; patchInterval(sandbox.proxy),</span><br><span class="line">    () =&gt; patchWindowListener(sandbox.proxy),</span><br><span class="line">    () =&gt; patchHistoryListener(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> patchersInSandbox = &#123;</span><br><span class="line">    [SandBoxType.LegacyProxy]: [</span><br><span class="line">      ...basePatchers,</span><br><span class="line">      () =&gt; patchLooseSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">true</span>, scopedCSS, excludeAssetFilter),</span><br><span class="line">    ],</span><br><span class="line">    [SandBoxType.Proxy]: [</span><br><span class="line">      ...basePatchers,</span><br><span class="line">      () =&gt;</span><br><span class="line">        patchStrictSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">true</span>, scopedCSS, excludeAssetFilter, speedySandBox),</span><br><span class="line">    ],</span><br><span class="line">    [SandBoxType.Snapshot]: [</span><br><span class="line">      ...basePatchers,</span><br><span class="line">      () =&gt; patchLooseSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">true</span>, scopedCSS, excludeAssetFilter),</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> patchersInSandbox[sandbox.type]?.map(<span class="function">(<span class="params">patch</span>) =&gt;</span> patch());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patchAtBootstrapping</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elementGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  sandbox: SandBox,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: CallableFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">  speedySandBox?: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Freer</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> patchersInSandbox = &#123;</span><br><span class="line">    [SandBoxType.LegacyProxy]: [</span><br><span class="line">      () =&gt; patchLooseSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">false</span>, scopedCSS, excludeAssetFilter),</span><br><span class="line">    ],</span><br><span class="line">    [SandBoxType.Proxy]: [</span><br><span class="line">      () =&gt;</span><br><span class="line">        patchStrictSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">false</span>, scopedCSS, excludeAssetFilter, speedySandBox),</span><br><span class="line">    ],</span><br><span class="line">    [SandBoxType.Snapshot]: [</span><br><span class="line">      () =&gt; patchLooseSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">false</span>, scopedCSS, excludeAssetFilter),</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> patchersInSandbox[sandbox.type]?.map(<span class="function">(<span class="params">patch</span>) =&gt;</span> patch());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; css &#125;;</span><br></pre></td></tr></table></figure><h3 id="Sandbox集合"><a href="#Sandbox集合" class="headerlink" title="Sandbox集合"></a>Sandbox集合</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; Freer, Rebuilder, SandBox &#125; <span class="keyword">from</span> <span class="string">'../interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> LegacySandbox <span class="keyword">from</span> <span class="string">'./legacy/sandbox'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; patchAtBootstrapping, patchAtMounting &#125; <span class="keyword">from</span> <span class="string">'./patchers'</span>;</span><br><span class="line"><span class="keyword">import</span> ProxySandbox <span class="keyword">from</span> <span class="string">'./proxySandbox'</span>;</span><br><span class="line"><span class="keyword">import</span> SnapshotSandbox <span class="keyword">from</span> <span class="string">'./snapshotSandbox'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; getCurrentRunningApp &#125; <span class="keyword">from</span> <span class="string">'./common'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">'./patchers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成应用运行时沙箱</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 沙箱分两个类型：</span></span><br><span class="line"><span class="comment"> * 1. app 环境沙箱</span></span><br><span class="line"><span class="comment"> *  app 环境沙箱是指应用初始化过之后，应用会在什么样的上下文环境运行。每个应用的环境沙箱只会初始化一次，因为子应用只会触发一次 bootstrap 。</span></span><br><span class="line"><span class="comment"> *  子应用在切换时，实际上切换的是 app 环境沙箱。</span></span><br><span class="line"><span class="comment"> * 2. render 沙箱</span></span><br><span class="line"><span class="comment"> *  子应用在 app mount 开始前生成好的的沙箱。每次子应用切换过后，render 沙箱都会重现初始化。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这么设计的目的是为了保证每个子应用切换回来之后，还能运行在应用 bootstrap 之后的环境下。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param appName</span></span><br><span class="line"><span class="comment"> * @param elementGetter</span></span><br><span class="line"><span class="comment"> * @param scopedCSS</span></span><br><span class="line"><span class="comment"> * @param useLooseSandbox</span></span><br><span class="line"><span class="comment"> * @param excludeAssetFilter</span></span><br><span class="line"><span class="comment"> * @param globalContext</span></span><br><span class="line"><span class="comment"> * @param speedySandBox</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createSandboxContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elementGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  useLooseSandbox?: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: (url: <span class="built_in">string</span>) =&gt; <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  globalContext?: <span class="keyword">typeof</span> <span class="built_in">window</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  speedySandBox?: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sandbox: SandBox;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.Proxy) &#123;</span><br><span class="line">    sandbox = useLooseSandbox ? <span class="keyword">new</span> LegacySandbox(appName, globalContext) : <span class="keyword">new</span> ProxySandbox(appName, globalContext);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sandbox = <span class="keyword">new</span> SnapshotSandbox(appName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// some side effect could be be invoked while bootstrapping, such as dynamic stylesheet injection with style-loader, especially during the development phase</span></span><br><span class="line">  <span class="keyword">const</span> bootstrappingFreers = patchAtBootstrapping(</span><br><span class="line">    appName,</span><br><span class="line">    elementGetter,</span><br><span class="line">    sandbox,</span><br><span class="line">    scopedCSS,</span><br><span class="line">    excludeAssetFilter,</span><br><span class="line">    speedySandBox,</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// mounting freers are one-off and should be re-init at every mounting time</span></span><br><span class="line">  <span class="keyword">let</span> mountingFreers: Freer[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sideEffectsRebuilders: Rebuilder[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    instance: sandbox,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 沙箱被 mount</span></span><br><span class="line"><span class="comment">     * 可能是从 bootstrap 状态进入的 mount</span></span><br><span class="line"><span class="comment">     * 也可能是从 unmount 之后再次唤醒进入 mount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> mount() &#123;</span><br><span class="line">      <span class="comment">/* ------------------------------------------ 因为有上下文依赖（window），以下代码执行顺序不能变 ------------------------------------------ */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* ------------------------------------------ 1. 启动/恢复 沙箱------------------------------------------ */</span></span><br><span class="line">      sandbox.active();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(<span class="number">0</span>, bootstrappingFreers.length);</span><br><span class="line">      <span class="keyword">const</span> sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// must rebuild the side effects which added at bootstrapping firstly to recovery to nature state</span></span><br><span class="line">      <span class="keyword">if</span> (sideEffectsRebuildersAtBootstrapping.length) &#123;</span><br><span class="line">        sideEffectsRebuildersAtBootstrapping.forEach(<span class="function">(<span class="params">rebuild</span>) =&gt;</span> rebuild());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* ------------------------------------------ 2. 开启全局变量补丁 ------------------------------------------*/</span></span><br><span class="line">      <span class="comment">// render 沙箱启动时开始劫持各类全局监听，尽量不要在应用初始化阶段有 事件监听/定时器 等副作用</span></span><br><span class="line">      mountingFreers = patchAtMounting(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* ------------------------------------------ 3. 重置一些初始化时的副作用 ------------------------------------------*/</span></span><br><span class="line">      <span class="comment">// 存在 rebuilder 则表明有些副作用需要重建</span></span><br><span class="line">      <span class="keyword">if</span> (sideEffectsRebuildersAtMounting.length) &#123;</span><br><span class="line">        sideEffectsRebuildersAtMounting.forEach(<span class="function">(<span class="params">rebuild</span>) =&gt;</span> rebuild());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// clean up rebuilders</span></span><br><span class="line">      sideEffectsRebuilders = [];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复 global 状态，使其能回到应用加载之前的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> unmount() &#123;</span><br><span class="line">      <span class="comment">// record the rebuilders of window side effects (event listeners or timers)</span></span><br><span class="line">      <span class="comment">// note that the frees of mounting phase are one-off as it will be re-init at next mounting</span></span><br><span class="line">      sideEffectsRebuilders = [...bootstrappingFreers, ...mountingFreers].map(<span class="function">(<span class="params">free</span>) =&gt;</span> free());</span><br><span class="line"></span><br><span class="line">      sandbox.inactive();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么需要微前端&quot;&gt;&lt;a href=&quot;#为什么需要微前端&quot; class=&quot;headerlink&quot; title=&quot;为什么需要微前端&quot;&gt;&lt;/a&gt;为什么需要微前端&lt;/h2&gt;&lt;p&gt;微前端其实诞生两个大的背景下，在提倡拥抱变化的前端社区可以看到新的框架、技术、概念层出不穷，并且随着WEB标准的演进，前端应用已经具备更好的性能、更快的开发效率。但随着而来的是应用的复杂程度更高、涉及的团队规模更广、更高的性能要求，应用复杂度已经成为阻塞业务发展的重要瓶颈。如何让现有系统拥抱最新技术提高生产力、并且解耦单体应用，是现在前端工程不得不面临的挑战。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 设计模式学习与实践（一）</title>
    <link href="https://sunra.top/2022/11/19/javascript-design-parttern-1/"/>
    <id>https://sunra.top/2022/11/19/javascript-design-parttern-1/</id>
    <published>2022-11-19T06:24:48.000Z</published>
    <updated>2022-12-10T03:07:21.129Z</updated>
    
    <content type="html"><![CDATA[<p>随着对JS的知识的了解和实际的开发需要，内心对于重读设计模式的感触越来越深，所以就重新拿起了《JavaScrip设计模式与开发实践》一书，并结合《设计模式之美》的部分内容，先做个总结，并先讲一下单例模式，剩下的后续慢慢讲。</p><p>首先提出几个问题，也是我这次的几个比较总结性的收获：</p><ul><li>JavaScript是面向对象还是面向过程</li><li>函数是一等公民这一点是面向对象还是面向过程</li></ul><p>然后抛出我这次对设计模式的一个最大的收获，就是<strong>所有的设计模式，其实都是识别出代码中不变的部分和易变的部分，分别封装起来，然后组合二者,而要准确地识别出这一点，不仅需要代码能力的深厚，更是要真正地去理解业务</strong>。</p><p>比如策略模式，一个个策略就是易变的部分，而对策略的调用则是不变的部分。代理模式中，被代理的操作就是不变的，而代理本身就是易变的。</p><p>其实，设计模式的出现某种程度上就是为了弥补语言的不足，比如原型模式算是一种设计模式，但是JavaScript本身就通过原型链支持了这种模式。</p><a id="more"></a><h2 id="JavaScript是面向对象还是面向过程"><a href="#JavaScript是面向对象还是面向过程" class="headerlink" title="JavaScript是面向对象还是面向过程"></a>JavaScript是面向对象还是面向过程</h2><p>首先在最近相关的学习中，我逐渐明白了一些过去迷惑的概念，比如JavaScript到底是面向对象和面向过程这个问题？</p><p>面向对象编程是建立类与类之间的联系和协作模式，面向过程编程则是建立一个又一个的过程，每个过程处理某个或者某几个类，举个例子，面向过程像是构造一个过程教会一个小孩子语文，再构造一个过程教会他数学。而面向对象则是建立小孩子与语文，数学之间的关系</p><p>实际上，面向过程编程和面向过程编程语言并没有严格的官方定义。理解这两个概念最好的方式是跟面向对象编程和面向对象编程语言进行对比。相较于面向对象编程以类为组织代码的基本单元，面向过程编程则是以过程（或方法）作为组织代码的基本单元。它最主要的特点就是数据和方法相分离。相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。</p><p>也就是说理论上提供，继承，多态，封装的语言就可以算是面向对象的语言，那么JavaScript算是面向对象的语言吗？</p><p>笔者个人认为：<strong>JavaScript算是一门面向对象的语言，只是它的继承并不是通过类的形式，而是通过原型链的方式，虽然ES6后面也实现了class的语法，但本质上还是通过原型链的方式</strong>。</p><p>首先说继承，通过类的方式实现继承和通过原型链的方式有什么区别呢？<strong>通过类的方式是一种is-a的关系，也就是说子类是父类的一种，而原型链继承则是有点类似接口（has-a）的方式，或者说有点像鸭子类型，也就是说，我现在需要一个变量，我更关注的是它有没有say这个方法，而不是他是不是Duck的实例，即便他是Chicken的实例，他有say的方法，那也是我要的</strong>。</p><p><strong>原型链式的继承的本质就是原型链的委托机制，要得到一个对象，不是实例化一个类，而是找到一个对象作为原型并克隆它，对象会将请求委托给它构造器的原型，比如JavaScript就提供Object.create的方式</strong></p><p>面向接口编程是设计模式中最重要的思想，但是在JavaScript中，因为它是基于原型链继承的，所以它天生就暗含了面向接口编程的思想，面向接口编程与主流语言并不相同，更为简单。</p><p>再说多态，多态的含义是：统一操作作用于不同对象上面，可以产生不同的解释和不同的执行结果。换句话说，给不同的对象发送同一个消息时，这些对象会根据这个消息分别给出不同的反馈。</p><p>多态背后的思想是：讲“做什么”和“谁去做以及怎样做”分离开来，也就是将“不变的食物”和“可能改变的事物”分离开来。将二者分开，分别封装，给予了我们扩展程序的能力，程序看起来是可生长的，这也符合开闭原则。</p><p>使用继承来实现多态，是让对象表现出多态性的一个最常见的手段。继承分为实现继承和接口继承，前者就是基于父子类的方式，后者就是通过接口的方式。</p><p>多态本质是把做什么和谁去做分开，要实现这一点，就需要先消除类型之间的耦合关系，在Java中，我们需要通过向上转型来实现，而在JavaScript中，变量类型在运行时是可变的，一个对象，既可以是Duck类型，又可以是Chicken类型，我需要的是它say这个方法，这意味着<strong>JavaScript中，对象的多态性是与生俱来的</strong>。</p><p>多态的最根本的好处在于，你不必再向对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，你只管调用就行了，其他一切多态机制都会为你安排妥当。换句话说，多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p><h2 id="什么叫函数式编程"><a href="#什么叫函数式编程" class="headerlink" title="什么叫函数式编程"></a>什么叫函数式编程</h2><p>在函数式编程中，函数是头等对象即头等函数，这意味着一个函数，既可以作为其它函数的输入参数值，也可以从函数中返回值，被修改或者被分配给一个变量。λ演算是这种范型最重要的基础，λ演算的函数可以接受函数作为输入参数和输出返回值。</p><p>比起指令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。</p><p>所以说，<strong>是否是函数式编程并不影响是面向对象还是面向过程，但是函数式编程会对我们具体实现一些设计模式的时候的代码产生影响</strong>，也就是说，设计模式是一种思想层面的，结合具体的语言实现不同，而函数式编程语言函数可以作为入参和出参，这件事会对JavaScript实现设计模式产生影响。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>我们先来介绍下单例模式的定义：保证一个类仅有一个实例，并提供一个访问它的的全局访问点</p><h3 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">        <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">'sun1'</span>);</span><br><span class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">'sun2'</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们通过Singleton.getInstance来获取类唯一的对象，这种方式相对简单，但是有个问题，我们增加了这个类的不确定性，Singleton类的使用者必须知道这是一个单例类，并通过与以往new XXX的方式不同的方式来获取对象</p><h3 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h3><p>我们现在的目标是实现一个透明的单例类，用户从这类中创建对象的时候，可以像使用其他任何普通的类一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.html = html;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CreateDiv;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CreateDiv(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> CreateDiv(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>为了把instance封装起来，我们使用了自执行的匿名函数和闭包，并且让这个匿名函数返回真正的Singleton的构造方法，这增加了一些程序的复杂度，阅读起来也不是很舒服。</p><p>而且我们观察Singleton的构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，CreateDiv的构造函数实际上负责了两件事情，第一是创建对象和执行初始化init方法，第二是保证只有一个对象，<strong>这不符合单一职责原则</strong>。</p><p>假设某天我们要利用这个类，在页面中创建千千万万的div，即让这个类变回一个普通的类，我们必须改写CreateDiv的构造方法，把创建唯一对象的那段代码去掉，这又<strong>违反了开闭原则</strong>。</p><h3 id="通过代理实现单例模式"><a href="#通过代理实现单例模式" class="headerlink" title="通过代理实现单例模式"></a>通过代理实现单例模式</h3><p>现在我们通过引入代理的方式解决上述问题，首先我们从CreateDiv的构造函数中将负责管理单例的代码移除出去，使它成为一个普通的类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们引入代理类，proxySingletonCreateDiv</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> CreateDiv(html);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = proxySingletonCreateDiv(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> b = proxySingletonCreateDiv(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript中的单例模式"><a href="#JavaScript中的单例模式" class="headerlink" title="JavaScript中的单例模式"></a>JavaScript中的单例模式</h3><p>上面几种单例模式的实现，更多的是接近传统面向对象语言中的实现，单例对象从“类”中创建而来。在以类为中心的语言中，这是很自然的做法。比如在java中，如果需要某个对象，就必须先定义一个类，对象总是从类中来的。</p><p>JavaScript其实是一门无类的语言，也正是因为如此，生搬单例模式的概念并无意义。在JavaScript中创建对象的方法非常简单，既然我们需要一个唯一的对象，我们为什么要先为它创建一个类呢？这是多此一举。</p><p>要记住，<strong>单例模式的核心是，确保只有一个实例，并提供全局访问</strong>。</p><p><strong>全局变量不是单例模式，但是在JavaScript中，我们常用全局变量来实现单例模式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>这个a就是一个单例，它既满足只有一个实例，并且如果它声明在全局作用域，它就能够被全局访问。</p><p>但是全局变量存在很多问题，比如造成命名空间污染，在大中型项目中，如果不佳已管理，程序中可能存在很多这种变量，作为普通开发者，我们要尽量减少全局变量的使用，即使要使用，也要尽量降低它的影响。</p><p>我们可以使用以下几种方式降低全局变量带来的命名污染：</p><p><strong>1. 使用命名空间</strong></p><p>适当使用命名空间，并不会杜绝全局变量，但可以减少全局变量的数量，最简单的方法依然是使用对象字面量的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">    a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 使用闭包封装私有变量</strong></p><p>这种方法把一些变量封装在闭包内部，只暴露一些接口与外界通信：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> __name = <span class="string">'sun'</span>,</span><br><span class="line">        __age = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> __name + <span class="string">'-'</span> + __age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><p>前面我们了解了单例模式的一些实现方法，本节我们来了解惰性单例。</p><p>惰性单例指的是在需要的时候才创建对象的实例。惰性单例是单例模式的重点，这种技术在开发中十分有用。</p><p>实际上一开始我们使用Singleton.getInstance的就是这种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不过这是基于类的单例模式，前面说过，基于“类”的单例模式在JavaScript中并不适用</p><p>我们设想一个场景，点击登陆按钮后再创建一个全局唯一的登陆浮窗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"loginBtn"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            if (!div) &#123;</span><br><span class="line"><span class="javascript">                div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">                div.innerHTML = <span class="string">"登陆浮窗"</span>；</span></span><br><span class="line"><span class="javascript">                div.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.appendChild(div);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> div;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> loginLayer = createLoginLayer();</span></span><br><span class="line"><span class="javascript">        loginLayer.style.display = <span class="string">'block'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通用惰性单例"><a href="#通用惰性单例" class="headerlink" title="通用惰性单例"></a>通用惰性单例</h3><p>上一节我们完成了一个可用的惰性单例，但是我们发现它还有以下一些问题：</p><ul><li>这段代码仍然违反单一职责原则，创建对象和管理单例的逻辑都放在了createLoginLayer对象内部</li><li>如果我们下次需要创建页面中唯一的iframe，或者script，那么我们必须把createLoginLayer函数几乎是照抄一遍</li></ul><p>我们需要把不变的部分隔离出来，先不考虑创建一个div和iframe有多少差异，管理单例的逻辑可以抽离出来，这个逻辑始终是一致的，用一个对象标志是否创建过对象，如果是，则下次直接返回这个已经创建好的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">    obj = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在就把管理单例的逻辑从原本的代码中抽离出来，这些逻辑被封装在getSingle函数内部，创建方法fn被当作参数动态传入getSingle中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们可以讲用于创建登陆浮窗的方法用参数fn的形式传入getSingle，我们不仅可以传入createLoginLayer，我们还可以传入createScipt等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="string">"登陆浮窗"</span>；</span><br><span class="line">    div.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们把创建实例对象的职责和管理单例的职责分别放置在两个方法例，这两个方法可以独立变化而互不影响，合在一起就完成了单例的创建。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着对JS的知识的了解和实际的开发需要，内心对于重读设计模式的感触越来越深，所以就重新拿起了《JavaScrip设计模式与开发实践》一书，并结合《设计模式之美》的部分内容，先做个总结，并先讲一下单例模式，剩下的后续慢慢讲。&lt;/p&gt;
&lt;p&gt;首先提出几个问题，也是我这次的几个比较总结性的收获：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript是面向对象还是面向过程&lt;/li&gt;
&lt;li&gt;函数是一等公民这一点是面向对象还是面向过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后抛出我这次对设计模式的一个最大的收获，就是&lt;strong&gt;所有的设计模式，其实都是识别出代码中不变的部分和易变的部分，分别封装起来，然后组合二者,而要准确地识别出这一点，不仅需要代码能力的深厚，更是要真正地去理解业务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如策略模式，一个个策略就是易变的部分，而对策略的调用则是不变的部分。代理模式中，被代理的操作就是不变的，而代理本身就是易变的。&lt;/p&gt;
&lt;p&gt;其实，设计模式的出现某种程度上就是为了弥补语言的不足，比如原型模式算是一种设计模式，但是JavaScript本身就通过原型链支持了这种模式。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript中Set，Map和Object的区别</title>
    <link href="https://sunra.top/2022/11/11/javascript-set-map-obj/"/>
    <id>https://sunra.top/2022/11/11/javascript-set-map-obj/</id>
    <published>2022-11-11T10:21:47.000Z</published>
    <updated>2022-11-14T03:42:22.614Z</updated>
    
    <content type="html"><![CDATA[<p>最近在阅读《Web高效编程与实践优化》的计算机基础一节，看到他讲了JS中Set和Map的区别，以及Object的实现，算是解决了往常的一点疑惑吧，这里简单总结下：</p><a id="more"></a><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set一般是使用红黑树实现的，红黑树是一种平衡查找二叉树，它的查找时间复杂度为O（logN）。实际上，Chrome V8的Set是用哈希实现的，它是一个哈希Set</p><p>假设我们有这样一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set(); </span><br><span class="line">//数据为20个数 </span><br><span class="line">var data = [3, 62, 38, 42, 14, 4, 14, 33, 56, 20, 21, 63, 49, 41, 10, 14, 24, 59, 49, 29]; </span><br><span class="line">for(var i = 0; i &lt; data.length; i++)&#123; </span><br><span class="line">    <span class="keyword">set</span>.add(data[i]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哈希的一个关键的地方是哈希算法，即对一堆数或者字符串做哈希运算得到它们的随机值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComputeIntegerHash</span>(<span class="params">key, seed</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> hash = key; </span><br><span class="line">    hash = hash ^ seed; <span class="comment">//seed = 505553720 </span></span><br><span class="line">    hash = ~hash + (hash &lt;&lt; <span class="number">15</span>); <span class="comment">// hash = (hash &lt;&lt; 15) - hash - 1; </span></span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">12</span>); </span><br><span class="line">    hash = hash + (hash &lt;&lt; <span class="number">2</span>); </span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">4</span>); </span><br><span class="line">    hash = (hash * <span class="number">2057</span>) | <span class="number">0</span>; <span class="comment">// hash = (hash + (hash &lt;&lt; 3)) + (hash &lt;&lt; 11); </span></span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">16</span>); </span><br><span class="line">    <span class="keyword">return</span> hash &amp; <span class="number">0x3fffffff</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把数字进行各种位运算，得到一个比较随机的数，然后对这个数进行散射散射的目的是得到这个数放在数组的哪个index。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> capacity = <span class="number">64</span>; </span><br><span class="line"><span class="keyword">var</span> indexes = []; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++)&#123; </span><br><span class="line">    indexes.push(ComputeIntegerHash(data[i], seed)  &amp; (capacity - <span class="number">1</span>)); <span class="comment">//去掉高位 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(indexes)</span><br></pre></td></tr></table></figure><p>有20个数，容量capacity从16开始增长，每次扩大一倍，到64的时候，可以保证capacity&gt;size<em>2，因为<em>*只有容量是实际存储大小的两倍时，散射结果重复值才能比较低</em></em>。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668209218/origin-of-ray/f530bc8e-4ea0-4fed-8cd3-c849a672889f_lts2tw.png" alt></p><p>现在要查找key=56是否存在这个Set里面，先把56进行哈希，然后散射，按照存放的时候同样的过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SetHas</span>(<span class="params">key</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> index = ComputeIntegerHash(<span class="number">56</span>, seed) &amp; <span class="keyword">this</span>.capacity; </span><br><span class="line">    <span class="comment">//可能会有重复值，所以需要验证命中的index所存放的key是相等的 </span></span><br><span class="line">    <span class="keyword">return</span> setArray[index] !== <span class="literal">null</span>  &amp;&amp; setArray[index] === key; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是哈希存储结构的一个典型实现，但是<strong>Chrome的V8的Set/Map 并不是这样实现的，略有不同</strong>。 </p><p><strong>哈希算法是一样的，但是散射的时候用来去掉高位的并不是用 capacity，而是用capacity的一半，叫做buckets的数量</strong>，这个去掉高位其实就是通过hash值和容量做一个按位与运算，效果等同于取余。</p><h3 id="插入过程"><a href="#插入过程" class="headerlink" title="插入过程"></a>插入过程</h3><p>假设我们依次插入9，33，68，57</p><p>Set的存储结构分成三部分，第一部分有3个元素，分别表示有效元素个数、被删除的个数、buckets的数量，前两个数相加就表示总的元素个数。</p><p>插入9之后，元素个数加1变成1，初始化的buckets数量为2。</p><p>第二部分对应buckets，buckets[0]表示第1个bucket所存放的原始数据的index，源码里面叫做entry，9在data这个数组里面 的index为0，所以它在bucket的存放值为0，并且bucket的散射值为0，所以bucket[0]=0。</p><p>第三部分是记录key值的空间，9的entry为0，所以它放在了3+buckets.length+entry*2=5的位置，每个key值都有两个元素空 间，第一个存放key值，第二个是keyChain，它的作用下面将提到</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668344952/origin-of-ray/fe04589b-3119-4dab-a323-0d42b44c1576_oecgin.png" alt></p><p>插入33之后</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345195/origin-of-ray/67b65186-fc61-4c38-8ca4-a32ecc812813_ykt8dm.png" alt></p><p>插入68，68的bucket值也为1，和33重复了，因为entry=buckets[1]=1，不为 空，说明之前已经存过了，entry为1指向的数组的位置为 3+buckets.length+entry*2=7，也就是说之前的那个数是放在数组7的位 置，所以68的相邻元素存放值keyChain为7，同时bucket[1]变成68的 entry为2</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345886/origin-of-ray/2cc66895-f27b-4c7a-93bd-6cb29c3764a0_wsksby.png" alt></p><p>插入57</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345953/origin-of-ray/d4f21b37-df29-497a-b109-f04af2790a75_ib658e.png" alt></p><h3 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h3><p>现在要查找33这个数，通过同样的哈希散射，得到33的bucket=1， bucket[1]=3，3指向的index位置为11，但是11放的是57，不是要找的 33，于是查看相邻的元素为9，非空，可继续查找，位置9存放的是 68，同样不等于33，而相邻的index=10指向位置7，而7存放的就是33 了，通过比较key值相等，所以这个Set里面有33这个数</p><p>这里有亮点需要注意：</p><ul><li><p>这里的数据总共是4个数，但是需要比较的次数比较多，key值就 比较了3次，key值的相邻keyChain值比较了2次，总共是5次，比直接来 个for循环还要多。所以数据量比较小时，使用哈希存储速度反而更 慢，但是当数据量偏大时优势会比较明显</p></li><li><p>还有一个问题就是一旦容量不够，就会触发扩容，会把上述所有的hash计算过程重新来一遍。</p></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>和Set基本一致，不同的地方是，map多了存储value的地方，</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668346080/origin-of-ray/f342d1e1-b53d-4772-bbc4-d7afee416f53_yq0evb.png" alt></p><p>当然它不是直接存放字符串“hello”，而是存放hello的指针地址， 指向实际存放hello的内存位置。</p><h2 id="JS-Object"><a href="#JS-Object" class="headerlink" title="JS Object"></a>JS Object</h2><p>这个可以参考这篇博客：<a href="https://sunra.top/2021/07/27/javascript-obj-attr-search/">https://sunra.top/2021/07/27/javascript-obj-attr-search/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在阅读《Web高效编程与实践优化》的计算机基础一节，看到他讲了JS中Set和Map的区别，以及Object的实现，算是解决了往常的一点疑惑吧，这里简单总结下：&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>如何理解JS的多线程</title>
    <link href="https://sunra.top/2022/11/06/javascript-mulit-thread/"/>
    <id>https://sunra.top/2022/11/06/javascript-mulit-thread/</id>
    <published>2022-11-06T12:02:58.000Z</published>
    <updated>2022-11-06T13:50:32.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>首先我们回顾下操作系统的知识，即：</p><ul><li>为什么会出现进程和线程的概念，他们的出现是为了解决什么问题</li><li>进程和线程的概念与定义</li><li>线程的调度</li><li>线程的同步与互斥</li><li>死锁问题</li></ul><a id="more"></a><h3 id="进程与线程的由来"><a href="#进程与线程的由来" class="headerlink" title="进程与线程的由来"></a>进程与线程的由来</h3><p>要解释这个问题，要从操作系统的分类和发展历程来讲，我们平时接触比较多的计算机都是基于时间片进行调度的分时系统，但其实操作系统还有其他很多种类型，分时操作系统并不是一开始就有的，同样进程和线程的概念也不是一开始就有的。<br>操作系统的大致发展历程如下，我们简单了解下就好：</p><ul><li>手工操作阶段（此阶段无操作系统）</li><li>批处理操作系统<ul><li>单道批处理系统</li><li>多道批处理系统</li></ul></li><li>分时操作系统</li><li>实时操作系统<ul><li>硬实时操作系统</li><li>软实时操作系统</li></ul></li><li>网络操作系统和分布式操作系统</li></ul><p>上面不同的操作系统的资源调度算法都不尽相同，比如人硬实时系统就不是基于时间片调度的，他是基于优先级的。我们主要关注单道操作系统到多道操作系统的变换。</p><p>对于单道操作系统来讲，没必要出现进程和线程的概念，它就是按次序执行作业，不存在一段时间内多个作业并行的情况。</p><p>当然我们我们也能看出单道操作系统的问题，就是各种计算机资源利用效率很低，比如一个作业在等待I/O的时候，CPU是空闲的。</p><p>为了提高各种资源的利用效率，提出了多道批处理系统，这也是操作系统复杂度的一个很重要的来源：</p><ul><li>因为要并发，就存在程序的切换，切换之前要从备选项中选择一个进行运行，这个选择的过程就是调度，有多种不同的调度算法，比如FCFS，SJF，时间片等等。</li><li>因为并发带来了异步性，各个程序的执行顺序是不确定的，所有可能会对临界资源产生争抢，为了避免这种争抢，我们提出了互斥锁；另一种情况是我们需要某些程序按一定的顺序执行，所以我们提出了同步的概念。</li><li>因为互斥锁的提出，导致可能出现死锁的问题，比如A程序申请了P资源，等待Q资源，而B程序申请了Q资源但是在等待P资源，A和B之间就形成了循环依赖且二者都不愿意放弃到手资源，那么A和B程序之间就形成了死锁。</li></ul><p>为了描述上面的调度，互斥，同步，死锁问题，我们需要引入一个新的概念描述程序执行过程中状态，并且在程序切换时保存当时执行的上下文，这个概念就是进程。</p><p>然后后面我们发现相比于其他资源，CPU资源的调度非常频繁，所以我们单独为CPU调度抽取出一个概念，叫做线程。</p><h3 id="进程与线程的概念"><a href="#进程与线程的概念" class="headerlink" title="进程与线程的概念"></a>进程与线程的概念</h3><p>到现在，我们有这么几个概念：</p><ul><li>作业：可以理解为我们硬盘上的一个个还没执行的程序</li><li>进程：出了CPU之外的资源调度基本单位。当我们选择执行一个程序时，就是为该作业申请内存等资源，然后进程默认会启动一个线程，用于申请CPU资源</li><li>线程：CPU调度的基本单位。同一个进程的线程共享同一套资源，比如同一个内存空间，也就是说同一个进程的线程之间的数据是可以直接修改的</li></ul><p>线程又分为内核级线程（KLT）和用户级线程（ULT），内核级线程意思就是说，操作系统中真的存在多个线程，线程的切换需要用到操作系统的原语进行上下文的切换，寄存器等的保存与装载等等，我们确实切换了线程；而用户级线程的意思则是说，操作系统本身完全没有感知到线程切换，我们是在线程内部自己模拟了寄存器等的切换，二者各有各的好处，后者有时候也被称为协程，它的好处就是切换消耗少，不需要用到操作系统的中断处理来进行上下文切换，缺点就是并不能发挥多核处理器优势，因为不管你有多少个线程，在操作系统看起来都是一个。</p><h3 id="线程的调度算法"><a href="#线程的调度算法" class="headerlink" title="线程的调度算法"></a>线程的调度算法</h3><ul><li>FCFS，先来先服务算法，属于不可剥夺算法，不适用于分时系统和实时系统。表面上对所有作业是公平的，但是如果一个长作业先到了系统，就会是后面的短作业等待很长时间</li><li>SJF，短作业优先算法。对长作业不利，而且可能会导致长作业“饥饿”</li><li>优先级调度算法，按照高优先级作业到达是否中断当前作业分为抢占式和非抢占式，按照优先级是否可以在运行时改变分为静态优先级和动态优先级</li><li>高响应比优先算法。响应比=（等待时间+要求服务时间）/ 要求服务时间</li><li>时间片轮转调度算法。</li><li>多级队列调度算法。针对不同的CPU设置多个队列，每个队列采取不同的调度算法</li><li>多级反馈队列调度算法</li></ul><h3 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h3><p>同步是直接制约关系，比如A就是要比B先执行，而互斥是间接制约关系，比如A和B都要使用唯一的打印机资源，A占用了，B就只能阻塞。<br>临界区实现互斥的基本方法</p><h4 id="软件方法"><a href="#软件方法" class="headerlink" title="软件方法"></a>软件方法</h4><ol><li>单标志法</li><li>双标志法</li><li>双标志后检查法</li><li>Peterson’s Algothrim<h4 id="硬件实现方法"><a href="#硬件实现方法" class="headerlink" title="硬件实现方法"></a>硬件实现方法</h4></li><li>中断屏蔽算法：关中断，因为CPU只有在中断时可以进行进程切换，关中断可以直接阻止一切的进程切换</li><li>硬件指令方法：TestAndSet</li></ol><h4 id="互斥锁（mutex-lock）"><a href="#互斥锁（mutex-lock）" class="headerlink" title="互斥锁（mutex lock）"></a>互斥锁（mutex lock）</h4><p>一个进程在进入临界区时获得锁，在退出临界区时释放锁</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>信号量机制是一种功能较强的机制，可以用来解决互斥与同步问题，只能被两个标准的原语wait和signal访问，也可记录为P操作和V操作，分为两种：</p><ul><li>整型信号量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wait(S) &#123;</span><br><span class="line">    while(S &lt;=0);</span><br><span class="line">    S = S - 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal(S) &#123;</span><br><span class="line">    S = S + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>记录型信号量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wait(semaphore S) &#123;</span><br><span class="line">    S.value--;</span><br><span class="line">    if (S.value &lt; 0) &#123;</span><br><span class="line">        add this process to S.L;</span><br><span class="line">        block(S.L)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal(semaphore S) &#123;</span><br><span class="line">    S.value++;</span><br><span class="line">    if (S.value &lt;= 0) &#123;</span><br><span class="line">        remove a process P from S.L;</span><br><span class="line">        wakeup(P)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四核八线程是什么意思"><a href="#四核八线程是什么意思" class="headerlink" title="四核八线程是什么意思"></a>四核八线程是什么意思</h3><p>我们总是会提到一个计算机是四核八线程，这是个什么概念呢？</p><p>我们刚才说到的，无论是单道还是多道操作系统，它的并发都是基于只有一个CPU核心的基础上的，也就是说它在同一时刻，只能有一个程序在执行，只有一个程序计数器。</p><p>我们要实现真正意义上的多个程序在同一时刻执行，方法就是多几个CPU核心，也就是这里说的四核。</p><p>理论上四个核心就只能有四个线程并行，之所以出现四核八线程，其实还是一个核上模拟了两个核心，让上层操作系统以为它有八个核心而已，实际上还是4个核心。这是计算机虚拟技术的一种实现。</p><h2 id="理解JS的多线程"><a href="#理解JS的多线程" class="headerlink" title="理解JS的多线程"></a>理解JS的多线程</h2><h3 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h3><p>理解了多线程的概念后，我们可以来说JS的多线程Web Workers 了。                </p><p>HTML5引入了Web Workers，让JS支持线程。</p><p>JS的多线程是OS级别的 ，也就是说JS的多线程是真的多线程，也就是上面说的内核级线程 。</p><h3 id="JS没有线程同步的概念"><a href="#JS没有线程同步的概念" class="headerlink" title="JS没有线程同步的概念"></a>JS没有线程同步的概念</h3><p>JS的多线程无法操作DOM，没有window对象，每个线程的数据都 是独立的。主线程传给子线程的数据是通过拷贝复制，同样的子线程 给主线程的数据也是通过拷贝复制，而不是共享同一块内存区域。 </p><p>从这一点来看，JS的多线程并不属于同一个进程，或者说是内部有什么隔离机制</p><p>所以Web Workers基本上出不了什么错。 </p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1667742557/origin-of-ray/d7uwzsgurkb9f4gvvpnu.png" alt></p><p>在主逻辑里面fun1和fun2的调用是连在一起的，它是一个执行单 元，要么还没执行，要么得一口气执行完。执行完之后，再执行 setTimout append到后面的。然后由于已经超过了setInterval定的20ms， 所以又马上执行setInterval的函数。这里可以看出setTimeout的计时是从 逻辑单元执行完了才开始计时，而setInterval是执行到这一行的时候就 开始计时了。 </p><p>单线程里面的特例如异步回调，异步回调是Chrome自己的IO线程 处理的，每发一个请求必须要有一个线程跟着，Chrome限制了同一个 域最多同时只能发6个请求 </p><h3 id="Chrome的多线程模型"><a href="#Chrome的多线程模型" class="headerlink" title="Chrome的多线程模型"></a>Chrome的多线程模型</h3><p>我们从click事件来看一下Chrome的线程模式是怎么样的</p><p>每开一个tab，Chrome就会创建一个进程，进程是线程的容器 ，同一个域名的Tab是同一个进程</p><p>首先用户单击了鼠标，浏览器的UI线程收到之后，把这个消息数 据封装成一个鼠标事件发送给IO线程，IO线程再分配给具体页面的渲 染线程。其中IO线程和UI线程是浏览器的线程，而渲染线程是每个页 面自己的线程。 </p><p>如果在执行一段很耗时的JS代码，渲染线程里的render线程将会被 堵塞，而main线程继续接收IO线程发过来的消息并排队，等待render线 程处理。也就是说当页面卡住的时候，不断地单击鼠标，等页面空闲 了，单击的事件会再继续触发。 </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;首先我们回顾下操作系统的知识，即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么会出现进程和线程的概念，他们的出现是为了解决什么问题&lt;/li&gt;
&lt;li&gt;进程和线程的概念与定义&lt;/li&gt;
&lt;li&gt;线程的调度&lt;/li&gt;
&lt;li&gt;线程的同步与互斥&lt;/li&gt;
&lt;li&gt;死锁问题&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Redux 源码解析</title>
    <link href="https://sunra.top/2022/10/28/redux-origin-code/"/>
    <id>https://sunra.top/2022/10/28/redux-origin-code/</id>
    <published>2022-10-28T08:00:20.000Z</published>
    <updated>2022-10-29T23:40:18.845Z</updated>
    
    <content type="html"><![CDATA[<p>Redux是一个web前端的状态管理库，通用与所有前端页面，并不依赖于什么框架，是一个纯js的项目，其原理和源码比较简单，我们先要理解redux源码，再去看redux-toolkit源码，才能明白redux-toolkit的源码为什么要那么写，然后才能结合react源码理解react-redux的源码。这次我们就先来理解redux的源码。</p><a id="more"></a><h2 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h2><p>redux的项目结构很简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── applyMiddleware.ts</span><br><span class="line">├── bindActionCreators.ts</span><br><span class="line">├── combineReducers.ts</span><br><span class="line">├── compose.ts</span><br><span class="line">├── createStore.ts</span><br><span class="line">├── index.ts</span><br><span class="line">├── tree.txt</span><br><span class="line">├── types</span><br><span class="line">│   ├── actions.ts</span><br><span class="line">│   ├── middleware.ts</span><br><span class="line">│   ├── reducers.ts</span><br><span class="line">│   └── store.ts</span><br><span class="line">└── utils</span><br><span class="line">    ├── actionTypes.ts</span><br><span class="line">    ├── formatProdErrorMessage.ts</span><br><span class="line">    ├── isPlainObject.ts</span><br><span class="line">    ├── kindOf.ts</span><br><span class="line">    ├── symbol-observable.ts</span><br><span class="line">    └── warning.ts</span><br></pre></td></tr></table></figure><p>types文件见中都是些ts的接口或者类型定义，utils文件夹中都是些工具类，从文件名也能看出这些工具是做什么的</p><p>入口文件事index.ts，它就是export了其他几个文件的函数，主要代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">'./createStore'</span></span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./combineReducers'</span></span><br><span class="line"><span class="keyword">import</span> bindActionCreators <span class="keyword">from</span> <span class="string">'./bindActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> applyMiddleware <span class="keyword">from</span> <span class="string">'./applyMiddleware'</span></span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators,</span><br><span class="line">  applyMiddleware,</span><br><span class="line">  compose,</span><br><span class="line">  __DO_NOT_USE__ActionTypes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="createStore：创建-Store"><a href="#createStore：创建-Store" class="headerlink" title="createStore：创建 Store"></a>createStore：创建 Store</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">S</span>,</span></span><br><span class="line"><span class="function">  <span class="title">A</span> <span class="title">extends</span> <span class="title">Action</span>,</span></span><br><span class="line"><span class="function">  <span class="title">Ext</span> = </span>&#123;&#125;,</span><br><span class="line">  StateExt = never</span><br><span class="line">&gt;(</span><br><span class="line">  reducer: Reducer&lt;S, A&gt;,</span><br><span class="line">  preloadedState?: PreloadedState&lt;S&gt; | StoreEnhancer&lt;Ext, StateExt&gt;,</span><br><span class="line">  enhancer?: StoreEnhancer&lt;Ext, StateExt&gt;</span><br><span class="line">): Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext</span><br></pre></td></tr></table></figure><p>这个是该函数的声明，参数就是我们平时使用createStore时传入的，reducer，初始化的状态，以及最后一个我们平时不怎么用的enhancer</p><p>函数内部首先进行了一些检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'function'</span>) ||</span><br><span class="line">  (<span class="keyword">typeof</span> enhancer === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">3</span>] === <span class="string">'function'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">    <span class="string">'It looks like you are passing several store enhancers to '</span> +</span><br><span class="line">      <span class="string">'createStore(). This is not supported. Instead, compose them '</span> +</span><br><span class="line">      <span class="string">'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  enhancer = preloadedState <span class="keyword">as</span> StoreEnhancer&lt;Ext, StateExt&gt;</span><br><span class="line">  preloadedState = <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里之前的代码保证，传入的后两个参数不全是 function ，且如果一共只有两个参数，同时第二个参数是function，那么认为第二个参数是enhancer而非初始化状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有enhancer，那么返回 enhancer 之后的 createStore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Expected the enhancer to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">        enhancer</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>'`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> enhancer(createStore)(</span><br><span class="line">    reducer,</span><br><span class="line">    preloadedState <span class="keyword">as</span> PreloadedState&lt;S&gt;</span><br><span class="line">  ) <span class="keyword">as</span> Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">    <span class="string">`Expected the root reducer to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">      reducer</span></span></span><br><span class="line"><span class="string"><span class="subst">    )&#125;</span>'`</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="几个内部变量："><a href="#几个内部变量：" class="headerlink" title="几个内部变量："></a>几个内部变量：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentReducer = reducer</span><br><span class="line"><span class="keyword">let</span> currentState = preloadedState <span class="keyword">as</span> S</span><br><span class="line"><span class="keyword">let</span> currentListeners: <span class="function">(<span class="params">(<span class="params"></span>) =&gt; <span class="built_in">void</span></span>)[] | <span class="params">null</span> = []</span></span><br><span class="line"><span class="function"><span class="params">let</span> <span class="params">nextListeners</span> = <span class="params">currentListeners</span></span></span><br><span class="line"><span class="function"><span class="params">let</span> <span class="params">isDispatching</span> = <span class="params">false</span></span></span><br></pre></td></tr></table></figure><h3 id="内部工具函数"><a href="#内部工具函数" class="headerlink" title="内部工具函数"></a>内部工具函数</h3><h4 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reads the state tree managed by the store.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns The current state tree of your application.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>): <span class="title">S</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class="line">        <span class="string">'The reducer has already received the state as an argument. '</span> +</span><br><span class="line">        <span class="string">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> currentState <span class="keyword">as</span> S</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h4><ul><li>ensureCanMutateNextListeners 函数用于将 currentListeners 浅复制赋值给 nextListeners，这样可以保证依次执行 currentListeners 时不影响为 nextListeners 添加新的监听器</li><li>subscribe 添加新的 listener 到 nextListeners ，并且返回一个闭包函数，用于取消该订阅</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This makes a shallow copy of currentListeners so we can use</span></span><br><span class="line"><span class="comment"> * nextListeners as a temporary list while dispatching.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This prevents any bugs around consumers calling</span></span><br><span class="line"><span class="comment"> * subscribe/unsubscribe in the middle of a dispatch.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">    nextListeners = currentListeners.slice()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a change listener. It will be called any time an action is dispatched,</span></span><br><span class="line"><span class="comment"> * and some part of the state tree may potentially have changed. You may then</span></span><br><span class="line"><span class="comment"> * call `getState()` to read the current state tree inside the callback.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You may call `dispatch()` from a change listener, with the following</span></span><br><span class="line"><span class="comment"> * caveats:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. The subscriptions are snapshotted just before every `dispatch()` call.</span></span><br><span class="line"><span class="comment"> * If you subscribe or unsubscribe while the listeners are being invoked, this</span></span><br><span class="line"><span class="comment"> * will not have any effect on the `dispatch()` that is currently in progress.</span></span><br><span class="line"><span class="comment"> * However, the next `dispatch()` call, whether nested or not, will use a more</span></span><br><span class="line"><span class="comment"> * recent snapshot of the subscription list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. The listener should not expect to see all state changes, as the state</span></span><br><span class="line"><span class="comment"> * might have been updated multiple times during a nested `dispatch()` before</span></span><br><span class="line"><span class="comment"> * the listener is called. It is, however, guaranteed that all subscribers</span></span><br><span class="line"><span class="comment"> * registered before the `dispatch()` started will be called with the latest</span></span><br><span class="line"><span class="comment"> * state by the time it exits.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param listener A callback to be invoked on every dispatch.</span></span><br><span class="line"><span class="comment"> * @returns A function to remove this change listener.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener: () =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Expected the listener to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">        listener</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>'`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class="line">        <span class="string">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class="line">        <span class="string">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class="line">        <span class="string">'See https://redux.js.org/api/store#subscribelistener for more details.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  ensureCanMutateNextListeners()</span><br><span class="line">  nextListeners.push(listener)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class="line">          <span class="string">'See https://redux.js.org/api/store#subscribelistener for more details.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">    nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">    currentListeners = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h4><p>执行currentReducer，参数为 currentState和传入的action，同时遍历currentListeners依次执行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dispatches an action. It is the only way to trigger a state change.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The `reducer` function, used to create the store, will be called with the</span></span><br><span class="line"><span class="comment"> * current state tree and the given `action`. Its return value will</span></span><br><span class="line"><span class="comment"> * be considered the **next** state of the tree, and the change listeners</span></span><br><span class="line"><span class="comment"> * will be notified.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The base implementation only supports plain object actions. If you want to</span></span><br><span class="line"><span class="comment"> * dispatch a Promise, an Observable, a thunk, or something else, you need to</span></span><br><span class="line"><span class="comment"> * wrap your store creating function into the corresponding middleware. For</span></span><br><span class="line"><span class="comment"> * example, see the documentation for the `redux-thunk` package. Even the</span></span><br><span class="line"><span class="comment"> * middleware will eventually dispatch plain object actions using this method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param action A plain object representing “what changed”. It is</span></span><br><span class="line"><span class="comment"> * a good idea to keep actions serializable so you can record and replay user</span></span><br><span class="line"><span class="comment"> * sessions, or use the time travelling `redux-devtools`. An action must have</span></span><br><span class="line"><span class="comment"> * a `type` property which may not be `undefined`. It is a good idea to use</span></span><br><span class="line"><span class="comment"> * string constants for action types.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns For convenience, the same action object you dispatched.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that, if you use a custom middleware, it may wrap `dispatch()` to</span></span><br><span class="line"><span class="comment"> * return something else (for example, a Promise you can await).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action: A</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">    <span class="string">`Actions must be plain objects. Instead, the actual type was: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">      action</span></span></span><br><span class="line"><span class="string"><span class="subst">    )&#125;</span>'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">    <span class="string">'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.'</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  isDispatching = <span class="literal">true</span></span><br><span class="line">  currentState = currentReducer(currentState, action)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  isDispatching = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">  listener()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="replaceReducer"><a href="#replaceReducer" class="headerlink" title="replaceReducer"></a>replaceReducer</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces the reducer currently used by the store to calculate the state.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You might need this if your app implements code splitting and you want to</span></span><br><span class="line"><span class="comment"> * load some of the reducers dynamically. You might also need this if you</span></span><br><span class="line"><span class="comment"> * implement a hot reloading mechanism for Redux.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param nextReducer The reducer for the store to use instead.</span></span><br><span class="line"><span class="comment"> * @returns The same store instance with a new reducer in place.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>&lt;<span class="title">NewState</span>, <span class="title">NewActions</span> <span class="title">extends</span> <span class="title">A</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  nextReducer: Reducer&lt;NewState, NewActions&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Store</span>&lt;<span class="title">ExtendState</span>&lt;<span class="title">NewState</span>, <span class="title">StateExt</span>&gt;, <span class="title">NewActions</span>, <span class="title">StateExt</span>, <span class="title">Ext</span>&gt; &amp; <span class="title">Ext</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Expected the nextReducer to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">        nextReducer</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> do this more elegantly</span></span><br><span class="line">  ;(currentReducer <span class="keyword">as</span> unknown <span class="keyword">as</span> Reducer&lt;NewState, NewActions&gt;) = nextReducer</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This action has a similar effect to ActionTypes.INIT.</span></span><br><span class="line">  <span class="comment">// Any reducers that existed in both the new and old rootReducer</span></span><br><span class="line">  <span class="comment">// will receive the previous state. This effectively populates</span></span><br><span class="line">  <span class="comment">// the new state tree with any relevant data from the old one.</span></span><br><span class="line">  dispatch(&#123; <span class="keyword">type</span>: ActionTypes.REPLACE &#125; <span class="keyword">as</span> A)</span><br><span class="line">  <span class="comment">// change the type of the store by casting it to the new store</span></span><br><span class="line">  <span class="keyword">return</span> store <span class="keyword">as</span> unknown <span class="keyword">as</span> Store&lt;</span><br><span class="line">    ExtendState&lt;NewState, StateExt&gt;,</span><br><span class="line">    NewActions,</span><br><span class="line">    StateExt,</span><br><span class="line">    Ext</span><br><span class="line">  &gt; &amp;</span><br><span class="line">    Ext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interoperability point for observable/reactive libraries.</span></span><br><span class="line"><span class="comment"> * @returns A minimal observable of state changes.</span></span><br><span class="line"><span class="comment"> * For more information, see the observable proposal:</span></span><br><span class="line"><span class="comment"> * https://github.com/tc39/proposal-observable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> outerSubscribe = subscribe</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The minimal observable subscription method.</span></span><br><span class="line"><span class="comment">     * @param observer Any object that can be used as an observer.</span></span><br><span class="line"><span class="comment">     * The observer object should have a `next` method.</span></span><br><span class="line"><span class="comment">     * @returns An object with an `unsubscribe` method that can</span></span><br><span class="line"><span class="comment">     * be used to unsubscribe the observable from the store, and prevent further</span></span><br><span class="line"><span class="comment">     * emission of values from the observable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    subscribe(observer: unknown) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> observer !== <span class="string">'object'</span> || observer === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">          <span class="string">`Expected the observer to be an object. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">            observer</span></span></span><br><span class="line"><span class="string"><span class="subst">          )&#125;</span>'`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">observeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> observerAsObserver = observer <span class="keyword">as</span> Observer&lt;S&gt;</span><br><span class="line">        <span class="keyword">if</span> (observerAsObserver.next) &#123;</span><br><span class="line">          observerAsObserver.next(getState())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      observeState()</span><br><span class="line">      <span class="keyword">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class="line">      <span class="keyword">return</span> &#123; unsubscribe &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [$$observable]() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化并返回结果"><a href="#初始化并返回结果" class="headerlink" title="初始化并返回结果"></a>初始化并返回结果</h3><p>首先自动dispatch一个action：{ type: ActionTypes.INIT }，然后返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When a store is created, an "INIT" action is dispatched so that every</span></span><br><span class="line"><span class="comment">// reducer returns their initial state. This effectively populates</span></span><br><span class="line"><span class="comment">// the initial state tree.</span></span><br><span class="line">dispatch(&#123; <span class="keyword">type</span>: ActionTypes.INIT &#125; <span class="keyword">as</span> A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  dispatch: dispatch <span class="keyword">as</span> Dispatch&lt;A&gt;,</span><br><span class="line">  subscribe,</span><br><span class="line">  getState,</span><br><span class="line">  replaceReducer,</span><br><span class="line">  [$$observable]: observable</span><br><span class="line">&#125; <span class="keyword">as</span> unknown <span class="keyword">as</span> Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext</span><br><span class="line"><span class="keyword">return</span> store</span><br></pre></td></tr></table></figure><p>所以说，确实如文档所说，store中的 state 和 action 就是一个纯对象，只不过这个纯对象有些规范，你可以不遵循这个规范，但是不遵循这个规范就没法正常运转。</p><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><p>这个文件中只有一个方法，也很简单，就是把一串函数变成一个函数A，A其实就是依次执行这一串函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs: <span class="built_in">Function</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// infer the argument type so it is usable in inference down the line</span></span><br><span class="line">    <span class="keyword">return</span> &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(</span><br><span class="line">    (a, b) =&gt;</span><br><span class="line">      (...args: <span class="built_in">any</span>) =&gt;</span><br><span class="line">        a(b(...args))</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h2><p>这个函数内部有两个工具函数，分别是<code>getUnexpectedStateShapeWarningMessage</code> 和 <code>assertReducerShape</code>，看函数名就知道做什么了，我们重点还是关注 <code>combineReducers</code> 函数，该函数大概做了以下几件事：</p><ul><li>根据传入的reducers，获得所有该对象的key，然后遍历每个key，如果key对应的value是个函数，那么就把该key和value塞进 finalReducers对象中</li><li>返回一个函数，该函数内部会遍历finalReducers中的每个key，然后利用 <code>finalReducers[key]</code> 对应的reducer去计算返回最新的 <code>state[key]</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Turns an object whose values are different reducer functions, into a single</span></span><br><span class="line"><span class="comment"> * reducer function. It will call every child reducer, and gather their results</span></span><br><span class="line"><span class="comment"> * into a single state object, whose keys correspond to the keys of the passed</span></span><br><span class="line"><span class="comment"> * reducer functions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @template S Combined state object type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param reducers An object whose values correspond to different reducer</span></span><br><span class="line"><span class="comment"> *   functions that need to be combined into one. One handy way to obtain it</span></span><br><span class="line"><span class="comment"> *   is to use ES6 `import * as reducers` syntax. The reducers may never</span></span><br><span class="line"><span class="comment"> *   return undefined for any action. Instead, they should return their</span></span><br><span class="line"><span class="comment"> *   initial state if the state passed to them was undefined, and the current</span></span><br><span class="line"><span class="comment"> *   state for any unrecognized action.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns A reducer function that invokes every reducer inside the passed</span></span><br><span class="line"><span class="comment"> *   object, and builds a state object with the same shape.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers: ReducersMapObject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="keyword">const</span> finalReducers: ReducersMapObject = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        warning(<span class="string">`No reducer provided for key "<span class="subst">$&#123;key&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      finalReducers[key] = reducers[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is used to make sure we don't warn about the same</span></span><br><span class="line">  <span class="comment">// keys multiple times.</span></span><br><span class="line">  <span class="keyword">let</span> unexpectedKeyCache: &#123; [key: <span class="built_in">string</span>]: <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    unexpectedKeyCache = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> shapeAssertionError: unknown</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    assertReducerShape(finalReducers)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    shapeAssertionError = e</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    state: StateFromReducersMapObject&lt;<span class="keyword">typeof</span> reducers&gt; = &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">    action: AnyAction</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">      <span class="keyword">throw</span> shapeAssertionError</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class="line">        state,</span><br><span class="line">        finalReducers,</span><br><span class="line">        action,</span><br><span class="line">        unexpectedKeyCache</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">        warning(warningMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> nextState: StateFromReducersMapObject&lt;<span class="keyword">typeof</span> reducers&gt; = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> actionType = action &amp;&amp; action.type</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">`When called with an action of type <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">            actionType ? <span class="string">`"<span class="subst">$&#123;<span class="built_in">String</span>(actionType)&#125;</span>"`</span> : <span class="string">'(unknown type)'</span></span></span></span><br><span class="line"><span class="string"><span class="subst">          &#125;</span>, the slice reducer for key "<span class="subst">$&#123;key&#125;</span>" returned undefined. `</span> +</span><br><span class="line">            <span class="string">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class="line">            <span class="string">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      nextState[key] = nextStateForKey</span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">    &#125;</span><br><span class="line">    hasChanged =</span><br><span class="line">      hasChanged || finalReducerKeys.length !== <span class="built_in">Object</span>.keys(state).length</span><br><span class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p>这个函数不是redux核心的逻辑，是用来给使用者提供的工具函数，比如react-redux就是用了这个函数，具体怎么使用的我们后面再讲，先大概理解它是做什么的</p><p>这个函数的两个参数，分别为 actionCreators 和dispatch函数，作用就是把 actionCreators 中每个key对应的 actionCreator 转换为调用 dispatch 函数，然后再返回</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>&lt;<span class="title">A</span> <span class="title">extends</span> <span class="title">AnyAction</span> = <span class="title">AnyAction</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  actionCreator: ActionCreator&lt;A&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  dispatch: Dispatch</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">this</span>: <span class="built_in">any</span>, ...args: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, args))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  actionCreators: ActionCreator&lt;<span class="built_in">any</span>&gt; | ActionCreatorsMapObject,</span></span></span><br><span class="line"><span class="function"><span class="params">  dispatch: Dispatch</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, but instead received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">        actionCreators</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>'. `</span> +</span><br><span class="line">        <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> boundActionCreators: ActionCreatorsMapObject = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> actionCreators) &#123;</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> boundActionCreators</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p>这个函数算是函数柯里化的一个应用，传入了 middlewares，是一个函数的数组，然后返回一个新的函数，新的函数作为一个闭包保存了 middlewares，新函数执行的时候，会首先调用新函数的参数：createStore来创建store，虽然加强 dispatch 函数功能，将所有的middleware函数在执行真正的dispatch之前执行，也就是，<code>const chain = middlewares.map(middleware =&gt; middleware(middlewareAPI)); dispatch = compose&lt;typeof dispatch&gt;(...chain)(store.dispatch)</code>这两行函数</p><p>我们也可以看到，applyMidleware函数返回的其实就是 StoreEnhancer， 也就是我们createStore函数的第三个参数，applyMiddleware是redux提供的唯一一个enhancer。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  ...middlewares: Middleware[]</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">StoreEnhancer</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore: StoreEnhancerStoreCreator</span>) =&gt;</span></span><br><span class="line">    &lt;S, A <span class="keyword">extends</span> AnyAction&gt;(</span><br><span class="line">      reducer: Reducer&lt;S, A&gt;,</span><br><span class="line">      preloadedState?: PreloadedState&lt;S&gt;</span><br><span class="line">    ) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> store = createStore(reducer, preloadedState)</span><br><span class="line">      <span class="keyword">let</span> dispatch: Dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">'Dispatching while constructing your middleware is not allowed. '</span> +</span><br><span class="line">            <span class="string">'Other middleware would not be applied to this dispatch.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> middlewareAPI: MiddlewareAPI = &#123;</span><br><span class="line">        getState: store.getState,</span><br><span class="line">        dispatch: <span class="function">(<span class="params">action, ...args</span>) =&gt;</span> dispatch(action, ...args)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">      dispatch = compose&lt;<span class="keyword">typeof</span> dispatch&gt;(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...store,</span><br><span class="line">        dispatch</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redux是一个web前端的状态管理库，通用与所有前端页面，并不依赖于什么框架，是一个纯js的项目，其原理和源码比较简单，我们先要理解redux源码，再去看redux-toolkit源码，才能明白redux-toolkit的源码为什么要那么写，然后才能结合react源码理解react-redux的源码。这次我们就先来理解redux的源码。&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://sunra.top/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>单调队列</title>
    <link href="https://sunra.top/2022/10/26/leetcode-862/"/>
    <id>https://sunra.top/2022/10/26/leetcode-862/</id>
    <published>2022-10-26T03:19:51.000Z</published>
    <updated>2022-10-29T09:33:45.787Z</updated>
    
    <content type="html"><![CDATA[<p>今天leetcode的每日一题是<a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/" rel="external nofollow noopener noreferrer" target="_blank">和至少为 K 的最短子数组</a>,这道题需要使用前缀和加单调队列。</p><a id="more"></a><p>我当时第一反应是使用滑动窗口算法，但是这道题这样的写法是有问题，我们先看一下我一开始的做法，以及这种做法为什么不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestSubarray = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> minLength = nums.length + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(right &lt; nums.length) &#123;</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        right++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= k) &#123;</span><br><span class="line">            minLength = <span class="built_in">Math</span>.min(minLength, right - left);</span><br><span class="line">            sum -= nums[left++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minLength === (nums.length + <span class="number">1</span>) ? <span class="number">-1</span> : minLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当输入为<code>[84,-37,32,40,95] 167</code>时，正确答案是3，而滑动窗口做饭的结果是5，因为当right为5的时候，left滑动到1的位置，也就是-37的时候，内部循环就跳出了，但是其实left到2的时候也是符合大于等于167这个条件的</p><p>既然我们的滑动窗口做法的问题出在，left收缩的时候可能会在没有收缩到最短的情况下就中断了，那么我们换个思路，在遍历每个right的时候，让left从right处向左扩张，只要遇到第一个符合条件的就是在right确定的时候，符合条件的最短的数组，同时为了节省计算，我们采用前缀和的方式，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestSubarray = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> preSum = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length + <span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; preSum.length; i++) &#123;</span><br><span class="line">        preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> minLength = nums.length + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(right &lt; preSum.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = right - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preSum[right] - preSum[left] &gt;= k) &#123;</span><br><span class="line">                minLength = <span class="built_in">Math</span>.min(minLength, right - left);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left--;</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minLength === preSum.length ? <span class="number">-1</span> : minLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不出意外，超时了，那么我们还能怎么优化这个算法呢？</p><p>我们可以遍历preSum，用某个合适的数据结构维护遍历过的presum[i],并及时移除无用的presum[i]</p><ul><li>遍历到preSum[i]时，如果发现preSum[i] - preSum[j] &gt;= k，那么i右侧的的数字无论是什么，都不可能以j为左端点得到一个更短的复合题意的数组，所以将j弹出数据结构</li><li>如果preSum[i] &lt;= preSum[j],那么如果在i右侧存在某个数x = preSum[m], 满足 x - preSum[j] &gt;= k, 则必然有 x - preSum[i] &gt;= k, 所以将j弹出数据结构</li></ul><p>由于优化二保证了数据结构中的 会形成一个递增的序列，因此优化一移除的是序列最左侧的若干元素，优化二移除的是序列最右侧的若干元素。我们需要一个数据结构，它支持移除最左端的元素和最右端的元素，以及在最右端添加元素，故选用双端队列。同时该队列保持递增，所以是个单调队列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestSubarray = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> preSum = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length + <span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; preSum.length; i++) &#123;</span><br><span class="line">        preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> queue = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = preSum.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; preSum.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = preSum[i];</span><br><span class="line">        <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span> &amp;&amp; cur - preSum[queue[<span class="number">0</span>]] &gt;= k) &#123;</span><br><span class="line">            result = <span class="built_in">Math</span>.min(result, i - queue[<span class="number">0</span>]);</span><br><span class="line">            queue.shift();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span> &amp;&amp; cur &lt;= preSum[queue[queue.length - <span class="number">1</span>]]) &#123;</span><br><span class="line">            queue.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        queue.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result === preSum.length ? <span class="number">-1</span> : result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天leetcode的每日一题是&lt;a href=&quot;https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;和至少为 K 的最短子数组&lt;/a&gt;,这道题需要使用前缀和加单调队列。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>React Router 使用和原理解析</title>
    <link href="https://sunra.top/2022/10/23/react-router-introduction/"/>
    <id>https://sunra.top/2022/10/23/react-router-introduction/</id>
    <published>2022-10-23T02:26:52.000Z</published>
    <updated>2022-10-23T03:48:40.568Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道React可以开发一个SPA，也就是单页应用。所谓单页应用，顾名思义，就是整个网站的web前端只有一个html文档。这种应用区别于传统的网站，在web刚开始的发展的时候，不同的页面就对应不同的html，也就是说你能看到几个页面就有几个不同的html，地址栏每次地址的改变都会重新发出一个get请求给服务器，然后请求回来一个不同的html文档。</p><p>但是单页应用不需要，甚至说不应该每次路由改变都发送get请求，因为它只有一个页面，那么这种在这种情况下，我们怎么实现路由改变时只更新页面而不发起新的请求的呢，这就要用到react-router。我们一起看一下react-router的使用以及简单的原理介绍。</p><a id="more"></a><h1 id="React-使用"><a href="#React-使用" class="headerlink" title="React 使用"></a>React 使用</h1><h2 id="使用和不使用React-Router的区别"><a href="#使用和不使用React-Router的区别" class="headerlink" title="使用和不使用React Router的区别"></a>使用和不使用React Router的区别</h2><h3 id="不使用React-Router"><a href="#不使用React-Router" class="headerlink" title="不使用React Router"></a>不使用React Router</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = React.createClass(&#123;<span class="comment">/*...*/</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> Inbox = React.createClass(&#123;<span class="comment">/*...*/</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> Home = React.createClass(&#123;<span class="comment">/*...*/</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = React.createClass(&#123;</span><br><span class="line">  getInitialState() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      route: <span class="built_in">window</span>.location.hash.substr(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        route: <span class="built_in">window</span>.location.hash.substr(<span class="number">1</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> Child</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.state.route) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'/about'</span>: Child = About; <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'/inbox'</span>: Child = Inbox; <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:      Child = Home;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;App&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;&lt;a href="#/</span>about<span class="string">"&gt;About&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">          &lt;li&gt;&lt;a href="#/inbox"&gt;Inbox&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Child/</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">React.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><p><strong>可以看出，即使不使用React-Router，React本身也提供了点击某个按钮实现页面“跳转”的功能。</strong></p><p>但是这样存在几个问题：</p><ul><li><p>当 URL 的 hash 部分（指的是 # 后的部分）变化后，<code>&lt;App&gt;</code> 会根据 this.state.route 来渲染不同的 <code>&lt;Child&gt;</code>。看起来很直接，但它很快就会变得复杂起来。</p></li><li><p>只能支持hash式的路由，如果我们需要实现路由是<code>/about</code>这样的是不行的，这样会引起浏览器发送新的请求</p></li></ul><h3 id="使用React-Router"><a href="#使用React-Router" class="headerlink" title="使用React Router"></a>使用React Router</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先我们需要导入一些组件...</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后我们从应用中删除一堆代码和</span></span><br><span class="line"><span class="comment">// 增加一些 &lt;Link&gt; 元素...</span></span><br><span class="line"><span class="keyword">const</span> App = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;App&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &#123;/</span>* 把 &lt;a&gt; 变成 &lt;Link&gt; *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;&lt;Link to="/</span>about<span class="string">"&gt;About&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/inbox<span class="string">"&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#123;/*</span></span><br><span class="line"><span class="string">          接着用 `this.props.children` 替换 `&lt;Child&gt;`</span></span><br><span class="line"><span class="string">          router 会帮我们找到这个 children</span></span><br><span class="line"><span class="string">        */&#125;</span></span><br><span class="line"><span class="string">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 最后，我们用一些 &lt;Route&gt; 来渲染 &lt;Router&gt;。</span></span><br><span class="line"><span class="string">// 这些就是路由提供的我们想要的东西。</span></span><br><span class="line"><span class="string">React.render((</span></span><br><span class="line"><span class="string">  &lt;Router&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/<span class="string">" component=&#123;App&#125;&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>inbox<span class="string">" component=&#123;Inbox&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">), document.body)</span></span><br></pre></td></tr></table></figure><p>React Router 知道如何为我们搭建嵌套的 UI，因此我们不用手动找出需要渲染哪些 <child> 组件。举个例子，对于一个完整的 /about 路径，React Router 会搭建出 <app><about></about></app>。</child></p><p>在内部，router 会将你树级嵌套格式的 <route> 转变成路由配置。但如果你不熟悉 JSX，你也可以用普通对象来替代：</route></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = &#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  component: App,</span><br><span class="line">  childRoutes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'about'</span>, <span class="attr">component</span>: About &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'inbox'</span>, <span class="attr">component</span>: Inbox &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> /&gt;</span></span>, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>路由配置是一组指令，用来告诉 router 如何匹配 URL以及匹配后如何执行代码。我们来通过一个简单的例子解释一下如何编写路由配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;App&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;&lt;Link to="/</span>about<span class="string">"&gt;About&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/inbox<span class="string">"&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const About = React.createClass(&#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return &lt;h3&gt;About&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Inbox = React.createClass(&#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;Inbox&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &#123;this.props.children || "</span>Welcome to your Inbox<span class="string">"&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Message = React.createClass(&#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return &lt;h3&gt;Message &#123;this.props.params.id&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">React.render((</span></span><br><span class="line"><span class="string">  &lt;Router&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/<span class="string">" component=&#123;App&#125;&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>inbox<span class="string">" component=&#123;Inbox&#125;&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>messages/:id<span class="string">" component=&#123;Message&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">), document.body)</span></span><br></pre></td></tr></table></figure><p>通过上面的配置，这个应用知道如何渲染下面四个 URL：</p><div class="table-container"><table><thead><tr><th>URL</th><th>组件</th></tr></thead><tbody><tr><td>/</td><td>App</td></tr><tr><td>/about</td><td>App -&gt; About</td></tr><tr><td>/inbox</td><td>App -&gt; Inbox</td></tr><tr><td>/inbox/message/:id</td><td>App -&gt; Inbox -&gt; Message</td></tr></tbody></table></div><h3 id="添加首页"><a href="#添加首页" class="headerlink" title="添加首页"></a>添加首页</h3><p>想象一下当 URL 为 / 时，我们想渲染一个在 App 中的组件。不过在此时，App 的 render 中的 this.props.children 还是 undefined。这种情况我们可以使用 IndexRoute 来设置一个默认页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IndexRoute &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Dashboard = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Welcome to the app!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">React.render((</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">      &#123;<span class="comment">/* 当 url 为/时渲染 Dashboard */</span>&#125;</span><br><span class="line">      &lt;IndexRoute component=&#123;Dashboard&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Route&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">), document.body)</span></span><br></pre></td></tr></table></figure><p>现在，App 的 render 中的 this.props.children 将会是 <dashboard>这个元素。这个功能类似 Apache 的DirectoryIndex 以及 nginx的 index指令，上述功能都是在当请求的 URL 匹配某个目录时，允许你制定一个类似index.html的入口文件。</dashboard></p><p>现在的sitemap为：</p><div class="table-container"><table><thead><tr><th>URL</th><th>组件</th></tr></thead><tbody><tr><td>/</td><td>App -&gt; Dashboard</td></tr><tr><td>/about</td><td>App -&gt; About</td></tr><tr><td>/inbox</td><td>App -&gt; Inbox</td></tr><tr><td>/inbox/message/:id</td><td>App -&gt; Inbox -&gt; Message</td></tr></tbody></table></div><h3 id="将-UI-和-URL-解耦"><a href="#将-UI-和-URL-解耦" class="headerlink" title="将 UI 和 URL 解耦"></a>将 UI 和 URL 解耦</h3><p>如果我们可以将 /inbox 从 /inbox/messages/:id 中去除，并且还能够让 Message 嵌套在 App -&gt; Inbox 中渲染，那会非常赞。绝对路径可以让我们做到这一点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">React.render((</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">      &lt;IndexRoute component=&#123;Dashboard&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">        &#123;<span class="comment">/* 使用 /messages/:id 替换 messages/:id */</span>&#125;</span><br><span class="line">        &lt;Route path=<span class="string">"/messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Route&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">), document.body)</span></span><br></pre></td></tr></table></figure><p>在多层嵌套路由中使用绝对路径的能力让我们对 URL 拥有绝对的掌控。我们无需在 URL 中添加更多的层级，从而可以使用更简洁的 URL。</p><p>我们现在的 URL 对应关系如下：</p><div class="table-container"><table><thead><tr><th>URL</th><th>组件</th></tr></thead><tbody><tr><td>/</td><td>App -&gt; Dashboard</td></tr><tr><td>/about</td><td>App -&gt; About</td></tr><tr><td>/inbox</td><td>App -&gt; Inbox</td></tr><tr><td>/message/:id</td><td>App -&gt; Inbox -&gt; Message</td></tr></tbody></table></div><h3 id="使用配置的方式替换jsx"><a href="#使用配置的方式替换jsx" class="headerlink" title="使用配置的方式替换jsx"></a>使用配置的方式替换jsx</h3><p>因为 route 一般被嵌套使用，所以使用 JSX 这种天然具有简洁嵌套型语法的结构来描述它们的关系非常方便。然而，如果你不想使用 JSX，也可以直接使用原生 route 数组对象。</p><p>上面我们讨论的路由配置可以被写成下面这个样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routeConfig = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    component: App,</span><br><span class="line">    indexRoute: &#123; <span class="attr">component</span>: Dashboard &#125;,</span><br><span class="line">    childRoutes: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">'about'</span>, <span class="attr">component</span>: About &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">'inbox'</span>,</span><br><span class="line">        component: Inbox,</span><br><span class="line">        childRoutes: [</span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">'/messages/:id'</span>, <span class="attr">component</span>: Message &#125;,</span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">'messages/:id'</span>,</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">nextState, replaceState</span>) </span>&#123;</span><br><span class="line">              replaceState(<span class="literal">null</span>, <span class="string">'/messages/'</span> + nextState.params.id)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">routes</span>=<span class="string">&#123;routeConfig&#125;</span> /&gt;</span></span>, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><h2 id="路由匹配原理"><a href="#路由匹配原理" class="headerlink" title="路由匹配原理"></a>路由匹配原理</h2><p>路由拥有三个属性来决定是否“匹配“一个 URL：</p><ol><li>嵌套关系</li><li>它的 路径语法</li><li>它的 优先级</li></ol><p>React Router 使用路由嵌套的概念来让你定义 view 的嵌套集合，<strong>当一个给定的 URL 被调用时，整个集合中（命中的部分）都会被渲染。</strong>嵌套路由被描述成一种树形结构。React Router 会深度优先遍历整个路由配置来寻找一个与给定的 URL 相匹配的路由。</p><h3 id="路径语法"><a href="#路径语法" class="headerlink" title="路径语法"></a>路径语法</h3><p>路由路径是匹配一个（或一部分）URL 的 一个字符串模式。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：</p><ul><li>:paramName – 匹配一段位于 /、? 或 # 之后的 URL。 命中的部分将被作为一个参数</li><li>() – 在它内部的内容被认为是可选的</li><li><code>*</code> – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 splat 参数</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/hello/:name"</span>&gt;         <span class="comment">// 匹配 /hello/michael 和 /hello/ryan</span></span><br><span class="line">&lt;Route path=<span class="string">"/hello(/:name)"</span>&gt;       <span class="comment">// 匹配 /hello, /hello/michael 和 /hello/ryan</span></span><br><span class="line">&lt;Route path=<span class="string">"/files/*.*"</span>&gt;           <span class="comment">// 匹配 /files/hello.jpg 和 /files/path/to/hello.jpg</span></span><br></pre></td></tr></table></figure><p>如果一个路由使用了相对路径，那么完整的路径将由它的所有祖先节点的路径和自身指定的相对路径拼接而成。使用绝对路径可以使路由匹配行为忽略嵌套关系。</p><p>最后，路由算法会根据定义的顺序自顶向下匹配路由。因此，当你拥有两个兄弟路由节点配置时，你必须确认前一个路由不会匹配后一个路由中的路径</p><h2 id="默认路由-IndexRoute-与-IndexLink"><a href="#默认路由-IndexRoute-与-IndexLink" class="headerlink" title="默认路由 IndexRoute 与 IndexLink"></a>默认路由 IndexRoute 与 IndexLink</h2><h3 id="IndexRoute"><a href="#IndexRoute" class="headerlink" title="IndexRoute"></a>IndexRoute</h3><p>在解释 默认路由(IndexRoute) 的用例之前，我们来设想一下，一个不使用默认路由的路由配置是什么样的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"accounts"</span> component=&#123;Accounts&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"statements"</span> component=&#123;Statements&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><p>当用户访问 / 时, App 组件被渲染，但组件内的子元素却没有， App 内部的 this.props.children 为 undefined 。 你可以简单地使用 `{this.props.children ||</p><p>}` 来渲染一些默认的 UI 组件。</p><p>但现在，Home 无法参与到比如 onEnter hook 这些路由机制中来。 在 Home 的位置，渲染的是 Accounts 和 Statements。 由此，router 允许你使用 IndexRoute ，以使 Home 作为最高层级的路由出现.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"accounts"</span> component=&#123;Accounts&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"statements"</span> component=&#123;Statements&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><p>现在 App 能够渲染 {this.props.children} 了， 我们也有了一个最高层级的路由，使 Home 可以参与进来。</p><h3 id="Index-Links"><a href="#Index-Links" class="headerlink" title="Index Links"></a>Index Links</h3><p>如果你在这个 app 中使用 <link to="/">Home , 它会一直处于激活状态，因为所有的 URL 的开头都是 / 。 这确实是个问题，因为我们仅仅希望在 Home 被渲染后，激活并链接到它。</p><p>如果需要在 Home 路由被渲染后才激活的指向 / 的链接，请使用 <indexlink to="/">Home</indexlink></p><h1 id="React-Router-原理"><a href="#React-Router-原理" class="headerlink" title="React Router 原理"></a>React Router 原理</h1><p>在一开始我们讲使用React Router和不使用的区别的时候，就讲过，其实没有react-router，也能实现点击连接切换页面，不过只能使用hah的方式，那么react-router其实就是想办法能实现通过pathname的改变来改变页面组件</p><p>这个方式就是使用浏览器提供的 <code>history API</code></p><p>写一个简单的demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 进入页面时，先初始化当前 url 对应的组件名</span></span><br><span class="line">  <span class="keyword">let</span> pathname = <span class="built_in">window</span>.location.pathname</span><br><span class="line">  <span class="keyword">let</span> initUI = pathname === <span class="string">'/login'</span> ? <span class="string">'login'</span> : <span class="string">'register'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> [UI, setUI] = useState(initUI);</span><br><span class="line">  <span class="keyword">let</span> onClickLogin = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setUI(<span class="string">'Login'</span>)</span><br><span class="line">    <span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="string">''</span>, <span class="string">'/login'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> onClickRegister = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setUI(<span class="string">'Register'</span>) </span><br><span class="line">    <span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="string">''</span>, <span class="string">'/register'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> showUI = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(UI) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Login'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Register'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Register</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;button onClick=&#123;onClickLogin&#125;&gt;Login&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;onClickRegister&#125;&gt;Register&lt;/</span>button&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &#123;showUI()&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>React Router 是建立在 history 之上的。 简而言之，一个 history 知道如何去监听浏览器地址栏的变化， 并解析这个 URL 转化为 location 对象， 然后 router 使用它匹配到路由，最后正确地渲染对应的组件。</p><p>常用的 history 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。</p><ul><li>browserHistory</li><li>hashHistory</li><li>createMemoryHistory</li></ul><p>你可以从 React Router 中引入它们：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript 模块导入（译者注：ES6 形式）</span></span><br><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line">然后将它们传递给&lt;Router&gt;:</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;browserHistory&#125; routes=&#123;routes&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="browserHistory"><a href="#browserHistory" class="headerlink" title="browserHistory"></a>browserHistory</h3><p>Browser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 History API 用于处理 URL，创建一个像example.com/some/path这样真实的 URL 。</p><h3 id="hash-history"><a href="#hash-history" class="headerlink" title="hash history"></a>hash history</h3><p>如果我们能使用浏览器自带的 window.history API，那么我们的特性就可以被浏览器所检测到。如果不能，那么任何调用跳转的应用就会导致 全页面刷新，它允许在构建应用和更新浏览器时会有一个更好的用户体验，但仍然支持的是旧版的。</p><p>你可能会想为什么我们不后退到 hash history，问题是这些 URL 是不确定的。如果一个访客在 hash history 和 browser history 上共享一个 URL，然后他们也共享同一个后退功能，最后我们会以产生笛卡尔积数量级的、无限多的 URL 而崩溃。</p><p>Hash history 使用 URL 中的 hash（#）部分去创建形如 example.com/#/some/path 的路由。</p><h3 id="createMemoryHistory"><a href="#createMemoryHistory" class="headerlink" title="createMemoryHistory"></a>createMemoryHistory</h3><p>Memory history 不会在地址栏被操作或读取。这就解释了我们是如何实现服务器渲染的。同时它也非常适合测试和其他的渲染环境（像 React Native ）。</p><p>和另外两种history的一点不同是你必须创建它，这种方式便于测试。</p><p>const history = createMemoryHistory(location)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们都知道React可以开发一个SPA，也就是单页应用。所谓单页应用，顾名思义，就是整个网站的web前端只有一个html文档。这种应用区别于传统的网站，在web刚开始的发展的时候，不同的页面就对应不同的html，也就是说你能看到几个页面就有几个不同的html，地址栏每次地址的改变都会重新发出一个get请求给服务器，然后请求回来一个不同的html文档。&lt;/p&gt;
&lt;p&gt;但是单页应用不需要，甚至说不应该每次路由改变都发送get请求，因为它只有一个页面，那么这种在这种情况下，我们怎么实现路由改变时只更新页面而不发起新的请求的呢，这就要用到react-router。我们一起看一下react-router的使用以及简单的原理介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://sunra.top/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Grid布局简介</title>
    <link href="https://sunra.top/2022/10/15/grid-layout-introduction/"/>
    <id>https://sunra.top/2022/10/15/grid-layout-introduction/</id>
    <published>2022-10-14T23:24:11.000Z</published>
    <updated>2022-10-15T01:56:45.642Z</updated>
    
    <content type="html"><![CDATA[<p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。2009年，W3C 提出了一种新的方案——Flex 布局，可以简便、完整、响应式地实现各种页面布局。关于Flex布局可以看我的上一篇博客：<a href="https://sunra.top/2022/10/08/flexbox-introduction/">https://sunra.top/2022/10/08/flexbox-introduction/</a></p><p>这篇博客我们继续介绍下一种新的布局：grid布局</p><a id="more"></a><p>之前说过flex布局，它是一维布局，而 网格布局 引入了二维网格布局系统，可用于布局页面主要的区域布局或小型组件。</p><h2 id="什么是网格"><a href="#什么是网格" class="headerlink" title="什么是网格"></a>什么是网格</h2><p>网格是一组相交的水平线和垂直线，它定义了网格的列和行。我们可以将网格元素放置在与这些行和列相关的位置上。</p><p>CSS网格布局有以下特点：</p><ol><li>固定的位置和弹性的轨道大小</li></ol><p>可以使用固定的轨道尺寸创建网格，比如像素单位。也可以使用百分比或者专门为此目的创建的新单位<code>fr</code>来创建有弹性尺寸的网格。</p><ol><li>元素位置</li></ol><p>可以使用行号，行名或者标定一个网格区域来精确定位元素。网格同时还使用一种算法来控制未给出明确网格位置的元素。</p><ol><li>创建额外的轨道来包含元素</li></ol><p>可以使用网格布局定义一个显式的网格，但是根据规范它会处理你加在网格外面的内容，当必要时它会自动增加行和列，它会尽可能多的容纳所有的列。</p><ol><li>对齐控制</li></ol><p>网格包含对齐特点，以便我们可以控制一旦放置到网格区域中的物体对齐，以及整个网格如何对齐。</p><ol><li>控制重叠内容</li></ol><p>多个元素可以放置到网格单元格中，或者缺雨可以部分地彼此重叠。然后可以使用z-index属性来控制重叠区域显示的优先级</p><h2 id="网格容器"><a href="#网格容器" class="headerlink" title="网格容器"></a>网格容器</h2><p>我们通过在元素上声明 <code>display：grid</code> 或 <code>display：inline-grid</code> 来创建一个网格容器。一旦我们这样做，这个元素的所有直系子元素将成为网格元素。</p><p>在这个例子中，这有一个类名为 wrapper 的div 元素作为容器，它内部有五个子元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们将<code>.wrapper</code>作为一个网格容器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有直系子元素现在都是网格项了。在浏览器中，元素转为网格看不出什么差异，因为网格给这些元素创建了一个单列网格。</p><h2 id="网格轨道"><a href="#网格轨道" class="headerlink" title="网格轨道"></a>网格轨道</h2><p>我们通过 grid-template-columns 和 grid-template-rows 属性来定义网格中的行和列。这些属性定义了网格的轨道。一个网格轨道就是网格中任意两条线之间的空间。</p><p>我可以通过添加 grid-template-columns 属性将列轨道添加到之前的例子，然后定义列轨道的大小。</p><p>我现在创建了一个网格，包含了三个 200 像素宽的列轨道。子元素将在网格上每个网格单元中展开。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">200px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fr单位"><a href="#fr单位" class="headerlink" title="fr单位"></a>fr单位</h3><p>轨道可以使用任何长度单位进行定义。网格还引入了一个另外的长度单位来帮助我们创建灵活的网格轨道。新的fr单位代表网格容器中可用空间的一等份。下一个网格定义将创建三个相等宽度的轨道，这些轨道会随着可用空间增长和收缩。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的这个例子中，我们创建定义了一个2fr轨道和两个1fr轨道。可用空间被四等分。其中两份给了第一个轨道，剩下两个轨道各占一份。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">2</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最后这个例子中，我们混合了绝对尺寸的轨道与分数单位轨道。第一个轨道是 500 像素，这个固定宽度被从可用空间中取走。剩下的空间被分为三份，按比例分配给了两个弹性尺寸轨道。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">500px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在轨道清单中使用repeat"><a href="#在轨道清单中使用repeat" class="headerlink" title="在轨道清单中使用repeat()"></a>在轨道清单中使用repeat()</h3><p>有着多轨道的大型网格可使用 repeat() 标记来重复部分或整个轨道列表。如下方的网格定义：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可写成：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Repeat 语句可以用于重复轨道列表中的一部分。在下面的例子中我创建了一个网格：它起始轨道为 20 像素，接着重复了 6 个1fr的轨道，最后再添加了一个 20 像素的轨道。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20px</span> <span class="built_in">repeat</span>(<span class="number">6</span>, <span class="number">1</span>fr) <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Repeat 语句可以传入一个轨道列表，因此你可以用它来创建一个多轨道模式的重复轨道列表。在下一个例子中，网格将有共计 10 个轨道，为 1 个1fr轨道后面跟着 1 个2fr轨道，该模式重复 5 次。</p><p>.wrapper {<br>  display: grid;<br>  grid-template-columns: repeat(5, 1fr 2fr);<br>}</p><h3 id="隐式和显式的网络"><a href="#隐式和显式的网络" class="headerlink" title="隐式和显式的网络"></a>隐式和显式的网络</h3><p>当我们创建上文中网格例子的时候，我们用 grid-template-columns 属性定义了自己的列轨道，但是却让网格按所需的内容创建行，这些行会被创建在隐式网格中。<strong>显式网格包含了你在 grid-template-columns 和 grid-template-rows 属性中定义的行和列。如果你在网格定义之外又放了一些东西，或者因为内容的数量而需要的更多网格轨道的时候，网格将会在隐式网格中创建行和列</strong>。按照默认，这些轨道将自动定义尺寸，所以会根据它里面的内容改变尺寸。</p><blockquote><p>也就是说通过属性定义出来的行和列是显示的，自动生成的单元格是隐式的</p></blockquote><p>你也可以在隐式网格中用 grid-auto-rows 和 grid-auto-columns 属性来定义一个设置大小尺寸的轨道。</p><p>在下面的例子中我们用 grid-auto-rows 属性来确保在隐式网格中创建的轨道是 200 像素高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="轨道大小和minmax"><a href="#轨道大小和minmax" class="headerlink" title="轨道大小和minmax()"></a>轨道大小和minmax()</h3><p>在设置一个显式的网格或者定义自动创建的行和列的大小的时候，我们也许想给网格一个最小的尺寸，确保他们能扩大到容纳他里面添加的内容。举个例子，我想让我的行的高度永远不会缩小到 100 像素以下，但是如果我的内容延伸到 300 像素高了我想让我的行高也延伸到这个高度。</p><p>网格用 minmax() 函数来解决这个问题。在下一个例子中我用 minmax() 作为 grid-auto-rows 的值。自动创建的行高将会是最小 100 像素，最大为 auto。用 auto 意味着行的尺寸将会根据内容的大小来自动变换：根据本行中最高的单元，把空间扩展到足够容纳该单元。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Two</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I have some more content in.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This makes me taller than 100 pixels.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665794853/origin-of-ray/screenshot-20221015-084447_lk1mlb.png" alt></p><h2 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h2><p>应该注意的是，当我们定义网格时，我们定义的是网格轨道，而不是网格线。Grid 会为我们创建编号的网格线来让我们来定位每一个网格元素。例如下面这个三列两行的网格中，就拥有四条纵向的网格线。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665794940/origin-of-ray/1_diagram_numbered_grid_lines_styhl6.png" alt></p><p>网格线的编号顺序取决于文章的书写模式。在从左至右书写的语言中，编号为 1 的网格线位于最左边。在从右至左书写的语言中，编号为 1 的网格线位于最右边</p><h3 id="跨轨道放置网格元素"><a href="#跨轨道放置网格元素" class="headerlink" title="跨轨道放置网格元素"></a>跨轨道放置网格元素</h3><p>我使用了grid-column-start (en-US), grid-column-end (en-US), grid-row-start (en-US) 和 grid-row-end (en-US) 属性，把前两个元素放到了我们的三列网格中。从左至右，第一个元素从列线 1 开始，延伸至列线 4，也就是我们这个例子中最右边的列线。并从行线 1 延伸到行线 3，占据了两个行轨道。</p><p>第二个元素从列线 1 开始，延伸了一个轨道。因为这是默认行为，所以我不用指定结束线。并且它从行线 3 到行线 5，跨越了两个行轨道。剩下的元素会自动放到网格剩余的空间中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box5"</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">grid-auto-rows</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">grid-row-start</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">grid-row-end</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网格单元"><a href="#网格单元" class="headerlink" title="网格单元"></a>网格单元</h2><p>一个网格单元是在一个网格元素中最小的单位，从概念上来讲其实它和表格的一个单元格很像。现在再看回我们前面的一个例子，一旦一个网格元素被定义在一个父级元素当中，那么他的子级元素将会排列在每个事先定义好的网格单元中。</p><h2 id="网格区域"><a href="#网格区域" class="headerlink" title="网格区域"></a>网格区域</h2><p>网格元素可以向行或着列的方向扩展一个或多个单元，并且会创建一个网格区域。网格区域的形状应该是一个矩形 - 也就是说你不可能创建出一个类似于“L”形的网格区域。</p><h2 id="网格间距"><a href="#网格间距" class="headerlink" title="网格间距"></a>网格间距</h2><p>在两个网格单元之间的 网格横向间距 或 网格纵向间距 可使用 grid-column-gap (en-US) 和 grid-row-gap (en-US) 属性来创建，或者直接使用两个合并的缩写形式 grid-gap (en-US)。在下面的例子中，我会创建一个横向间距为 10px、纵向间距为 1em 的网格元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: grid;</span><br><span class="line">   <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">   <span class="attribute">grid-column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">grid-row-gap</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>间距使用的空间会在 使用弹性长度 fr 的轨道的空间计算前就被留出来，间距的尺寸定义行为和普通轨道一致，但不同的是你不能向其中插入任何内容。从以基线定位的角度来说，间距就像一条很宽的基线。</p><h2 id="嵌套网格"><a href="#嵌套网格" class="headerlink" title="嵌套网格"></a>嵌套网格</h2><p>一个网格元素可以也成为一个网格容器。在接下来的例子中我事先有了一个 3 列的网格元素，并有两个跨轨道的网格。在这个例子中，第一个网格元素含有几个子级元素。<strong>当这些元素不是网格容器的直接子级元素时，它们不会参与到网格布局中，并显示为正常的文档流。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nested"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nested"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nested"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box3"</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box4"</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box5"</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665798147/origin-of-ray/1_nested_grids_in_flow_vvtb5i.png" alt></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">   <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">   <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">   <span class="attribute">display</span>: grid;</span><br><span class="line">   <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，嵌套网格和他的父级并没有关系。就像你在例子中所看见的一样，它并没有从它的父级继承 grid-gap (en-US) 属性，并且嵌套网格里面的网格线没有与父级的网格线对齐。</p><h3 id="子网格"><a href="#子网格" class="headerlink" title="子网格"></a>子网格</h3><p>在 Level 1 网格规范中有一个叫做 子网格 的特性。它能让我们在父级网格元素的轨道定义中就能定义一个嵌套网格。</p><p>在当前的规范中，我们可以将上面的嵌套网格的例子进行修改，使用 display: subgrid 而不是 display: grid，然后移除轨道定义。嵌套网格将会使用父级网格元素中的轨道定义来排列它其中的网格元素。</p><p>需要指出的是<strong>嵌套网格有同时有两个单位 — 行和列。隐式子网格的概念是没有的</strong>，这意味着你需要确保父级网格元素为了容纳所有的子网格元素需要包含足够的行与列的轨道。</p><h2 id="使用z-index控制层级"><a href="#使用z-index控制层级" class="headerlink" title="使用z-index控制层级"></a>使用z-index控制层级</h2><p>多个网格项目可以占用同一个网格单位。如果我们回到之前根据网格线编号放置网格项目的话，我们可以更改此项来使两个网格项目重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box3"</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box4"</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box5"</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: grid;</span><br><span class="line">   <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">   <span class="attribute">grid-auto-rows</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">   <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">   <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">   <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line">   <span class="attribute">grid-row-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665798408/origin-of-ray/screenshot-20221015-094634_wnvp5l.png" alt></p><h2 id="布局方式总计以及与游戏的一点比较思考"><a href="#布局方式总计以及与游戏的一点比较思考" class="headerlink" title="布局方式总计以及与游戏的一点比较思考"></a>布局方式总计以及与游戏的一点比较思考</h2><p>网页的布局方式我们一共介绍了四种：</p><ul><li>传统布局流配合display+position+float这种方式</li><li>table布局</li><li>flex布局</li><li>table布局</li></ul><p>总结下来所谓的网页，其实就是纸质版报纸的升级版，html就是报纸的内容，css就是报纸的排版，而js则是给这个报纸加了一些交互而已。</p><p>所以本质上讲，个人认为，浏览器也是一个渲染引擎，与游戏引擎最本质的意义是相通的，不过浏览器是web渲染引擎，渲染的是html这种超链接文档，是报纸的升级版，而游戏引擎可以渲染和模拟的是一个3D世界。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。2009年，W3C 提出了一种新的方案——Flex 布局，可以简便、完整、响应式地实现各种页面布局。关于Flex布局可以看我的上一篇博客：&lt;a href=&quot;https://sunra.top/2022/10/08/flexbox-introduction/&quot;&gt;https://sunra.top/2022/10/08/flexbox-introduction/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇博客我们继续介绍下一种新的布局：grid布局&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://sunra.top/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>flex 布局的基本概念</title>
    <link href="https://sunra.top/2022/10/08/flexbox-introduction/"/>
    <id>https://sunra.top/2022/10/08/flexbox-introduction/</id>
    <published>2022-10-08T02:10:41.000Z</published>
    <updated>2022-10-10T03:13:49.467Z</updated>
    
    <content type="html"><![CDATA[<p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。2009年，W3C 提出了一种新的方案——Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p>当然还有一种布局解决方案是grid布局，但本文先就flex进行梳理。</p><p>Flexible Box 模型，通常被称为 flexbox，是<strong>一种一维的布局模型</strong>。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。本文给出了 flexbox 的主要特性，更多的细节将在别的文档中探索。</p><p>我们说 flexbox 是一种一维的布局，是因为一个 flexbox 一次只能处理一个维度上的元素布局，一行或者一列。作为对比的是另外一个二维布局 CSS Grid Layout，可以同时处理行和列上的布局。</p><a id="more"></a><h2 id="flexbox的两根轴线"><a href="#flexbox的两根轴线" class="headerlink" title="flexbox的两根轴线"></a>flexbox的两根轴线</h2><p>当使用 flex 布局时，首先想到的是两根轴线 — 主轴和交叉轴。主轴由 flex-direction 定义，另一根轴垂直于它。我们使用 flexbox 的所有属性都跟这两根轴线有关，所以有必要在一开始首先理解它。</p><h3 id="主轴"><a href="#主轴" class="headerlink" title="主轴"></a>主轴</h3><p>主轴由 flex-direction 定义，可以取 4 个值：</p><ul><li>row</li><li>row-reverse</li><li>column</li><li>column-reverse</li></ul><p>如果你选择了 row 或者 row-reverse，你的主轴将沿着 inline 方向延伸，也就是水平方向延伸。</p><p>选择 column 或者 column-reverse 时，你的主轴会沿着上下方向延伸 — 也就是 block 排列的方向，也就是竖直方向延伸。</p><h3 id="交叉轴"><a href="#交叉轴" class="headerlink" title="交叉轴"></a>交叉轴</h3><p>交叉轴垂直于主轴，所以如果你的flex-direction (主轴) 设成了 row 或者 row-reverse 的话，交叉轴的方向就是沿着列向下的。</p><p>如果主轴方向设成了 column 或者 column-reverse，交叉轴就是水平方向。</p><h2 id="起始线和终止线"><a href="#起始线和终止线" class="headerlink" title="起始线和终止线"></a>起始线和终止线</h2><p>另外一个需要理解的重点是 <strong>flexbox 不会对文档的书写模式提供假设</strong>。过去，CSS 的书写模式主要被认为是水平的，从左到右的。现代的布局方式涵盖了书写模式的范围，所以我们不再假设一行文字是从文档的左上角开始向右书写，新的行也不是必须出现在另一行的下面。</p><p>如果 flex-direction 是 row ，并且我是在书写英文，那么主轴的起始线是左边，终止线是右边。如果我在书写阿拉伯文，那么主轴的起始线是右边，终止线是左边。在这两种情况下，交叉轴的起始线是 flex 容器的顶部，终止线是底部，因为两种语言都是水平书写模式。</p><h2 id="Flex容器"><a href="#Flex容器" class="headerlink" title="Flex容器"></a>Flex容器</h2><p>文档中采用了 flexbox 的区域就叫做 flex 容器。为了创建 flex 容器，我们把一个容器的 display 属性值改为 flex 或者 inline-flex。完成这一步之后，容器中的直系子元素就会变为 flex 元素。所有 CSS 属性都会有一个初始值，所以 flex 容器中的所有 flex 元素都会有下列行为：</p><ul><li>元素排列为一行 (flex-direction 属性的初始值是 row)。</li><li>元素从主轴的起始线开始。</li><li>元素不会在主维度方向拉伸，但是可以缩小。</li><li>元素被拉伸来填充交叉轴大小。</li><li>flex-basis 属性为 auto。</li><li>flex-wrap 属性为 nowrap。</li></ul><p>这会让你的元素呈线形排列，并且把自己的大小作为主轴上的大小。如果有太多元素超出容器，它们会溢出而不会换行。如果一些元素比其他元素高，那么元素会沿交叉轴被拉伸来填满它的大小。</p><h2 id="用flex-wrap实现多行容器"><a href="#用flex-wrap实现多行容器" class="headerlink" title="用flex-wrap实现多行容器"></a>用flex-wrap实现多行容器</h2><p>虽然flexbox是一维模型，但可以使我们的flex项目应用到多行中。<strong>在这样做的时候，您应该把每一行看作一个新的flex容器</strong>。任何空间分布都将在该行上发生，而不影响该空间分布的其他行。</p><p>为了实现多行效果，请为属性flex-wrap添加一个属性值wrap。现在，如果您的项目太大而无法全部显示在一行中，则会换行显示。</p><p>对于flex容器，项目的子元素总宽度大于容器最大宽度。由于flex-wrap的值设置为wrap，所以项目的子元素换行显示。若将其设置为nowrap，这也是初始值，它们将会缩小以适应容器，因为它们使用的是允许缩小的初始Flexbox值。如果项目的子元素无法缩小，使用nowrap会导致溢出，或者缩小程度还不够小</p><h2 id="简写属性-flex-flow"><a href="#简写属性-flex-flow" class="headerlink" title="简写属性 flex-flow"></a>简写属性 flex-flow</h2><p>你可以将两个属性 flex-direction 和 flex-wrap 组合为简写属性 flex-flow。第一个指定的值为 flex-direction ，第二个指定的值为 flex-wrap.</p><h2 id="flex元素上的属性"><a href="#flex元素上的属性" class="headerlink" title="flex元素上的属性"></a>flex元素上的属性</h2><p>为了更好地控制 flex 元素，有三个属性可以作用于它们：</p><ul><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li></ul><p>在考虑这几个属性的作用之前，需要先了解一下 <strong>可用空间 available space</strong> 这个概念。这几个 flex 属性的作用其实就是改变了 flex 容器中的可用空间的行为。同时，可用空间对于 flex 元素的对齐行为也是很重要的。</p><p>假设在 1 个 500px 的容器中，我们有 3 个 100px 宽的元素，那么这 3 个元素需要占 300px 的宽，剩下 200px 的可用空间。在默认情况下，flexbox 的行为会把这 200px 的空间留在最后一个元素的后面。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665368539/origin-of-ray/basics7_vvpola.png" alt></p><p>如果期望这些元素能自动地扩展去填充满剩下的空间，那么我们需要去控制可用空间在这几个元素间如何分配，这就是元素上的那些 flex 属性要做的事。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>flex-basis 定义了该元素的空间大小（the size of that item in terms of the space），flex 容器里除了元素所占的空间以外的富余空间就是可用空间 available space。该属性的默认值是 auto 。此时，浏览器会检测这个元素是否具有确定的尺寸。在上面的例子中，所有元素都<strong>设定了宽度（width）为 100px，所以 flex-basis 的值为 100px</strong>。</p><p><strong>如果没有给元素设定尺寸，flex-basis 的值采用元素内容的尺寸</strong>。这就解释了：我们给只要给 Flex 元素的父元素声明 display: flex ，所有子元素就会排成一行，且自动分配小大以充分展示元素的内容。</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>flex-grow 若被赋值为一个正整数，flex 元素会以 flex-basis 为基础，沿主轴方向增长尺寸。这会使该元素延展，并占据此方向轴上的可用空间（available space）。如果有其他元素也被允许延展，那么他们会各自占据可用空间的一部分。</p><p>如果我们给上例中的所有元素设定 flex-grow 值为 1，容器中的可用空间会被这些元素平分。它们会延展以填满容器主轴方向上的空间。</p><p>flex-grow 属性可以按比例分配空间。如果第一个元素 flex-grow 值为 2，其他元素值为 1，则第一个元素将占有 2/4（上例中，即为 200px 中的 100px）, 另外两个元素各占有 1/4（各 50px）。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>flex-grow属性是处理 flex 元素在主轴上增加空间的问题，相反flex-shrink属性是处理 flex 元素收缩的问题。<strong>如果我们的容器中没有足够排列 flex 元素的空间，那么可以把 flex 元素flex-shrink属性设置为正整数来缩小它所占空间到flex-basis以下</strong>。与flex-grow属性一样，可以赋予不同的值来控制 flex 元素收缩的程度 —— 给flex-shrink属性赋予更大的数值可以比赋予小数值的同级元素收缩程度更大。</p><p>在计算 flex 元素收缩的大小时，它的最小尺寸也会被考虑进去，就是说实际上 flex-shrink 属性可能会和 flex-grow 属性表现的不一致。</p><h3 id="flex属性简写"><a href="#flex属性简写" class="headerlink" title="flex属性简写"></a>flex属性简写</h3><p>你可能很少看到 flex-grow，flex-shrink，和 flex-basis 属性单独使用，而是混合着写在 flex 简写形式中。 Flex 简写形式允许你把三个数值按这个顺序书写 — flex-grow，flex-shrink，flex-basis。</p><p>大多数情况下可以用预定义的简写形式。在这个教程中你可能经常会看到这种写法，许多情况下你都可以这么使用。下面是几种预定义的值：</p><ul><li>flex: initial</li><li>flex: auto</li><li>flex: none</li><li>flex: <positive-number></positive-number></li></ul><p>flex: initial 是把 flex 元素重置为 Flexbox 的初始值，它相当于 flex: 0 1 auto。在这里 flex-grow 的值为 0，所以 flex 元素不会超过它们 flex-basis 的尺寸。flex-shrink 的值为 1, 所以可以缩小 flex 元素来防止它们溢出。flex-basis 的值为 auto. Flex 元素尺寸可以是在主维度上设置的，也可以是根据内容自动得到的。</p><p>flex: auto 等同于 flex: 1 1 auto；和上面的 flex:initial 基本相同，但是这种情况下，flex 元素在需要的时候既可以拉伸也可以收缩。</p><p>flex: none 可以把 flex 元素设置为不可伸缩。它和设置为 flex: 0 0 auto 是一样的。元素既不能拉伸或者收缩，但是元素会按具有 flex-basis: auto 属性的 flexbox 进行布局。</p><p>你在教程中常看到的 flex: 1 或者 flex: 2 等等。它相当于flex: 1 1 0。元素可以在flex-basis为 0 的基础上伸缩。</p><h2 id="元素的对齐和空间分配"><a href="#元素的对齐和空间分配" class="headerlink" title="元素的对齐和空间分配"></a>元素的对齐和空间分配</h2><p>Flexbox 的一个关键特性是能够设置 flex 元素沿主轴方向和交叉轴方向的对齐方式，以及它们之间的空间分配。</p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>align-items 属性可以使元素在交叉轴方向对齐。</p><p>这个属性的初始值为stretch，这就是为什么 flex 元素会默认被拉伸到最高元素的高度。实际上，它们被拉伸来填满 flex 容器 —— 最高的元素定义了容器的高度。</p><p>你也可以设置align-items的值为flex-start，使 flex 元素按 flex 容器的顶部对齐，flex-end 使它们按 flex 容器的下部对齐，或者center使它们居中对齐。在实例中尝试——我给出了 flex 容器的高度，以便你可以看到元素在容器中移动。</p><ul><li>stretch</li><li>flex-start</li><li>flex-end</li><li>center</li></ul><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>justify-content属性用来使元素在主轴方向上对齐，主轴方向是通过 flex-direction 设置的方向。初始值是flex-start，元素从容器的起始线排列。但是你也可以把值设置为flex-end，从终止线开始排列，或者center，在中间排列。</p><p>你也可以把值设置为space-between，把元素排列好之后的剩余空间拿出来，平均分配到元素之间，所以元素之间间隔相等。或者使用space-around，使每个元素的左右空间相等。</p><p>下列justify-content属性的值：</p><ul><li>stretch</li><li>flex-start</li><li>flex-end</li><li>center</li><li>space-around</li><li>space-between</li></ul><h2 id="子元素在主轴上的比例"><a href="#子元素在主轴上的比例" class="headerlink" title="子元素在主轴上的比例"></a>子元素在主轴上的比例</h2><p>在 html 中若一个元素的 css 设置为 display: flex，则这个元素就是 flex container , 其子元素为 flex item</p><p>我们将探索应用于 flex 子元素的三个属性，它们能使我们在主轴方向上控制 flex 子元素的尺寸和伸缩性— flex-grow, flex-shrink, 和 flex-basis. 充分了解这些属性如何与增长和缩小的 flex 子元素一起工作是掌握 Flex 布局的关键所在。</p><p>这三个属性控制一个 flex 子元素的以下几个方面：</p><ul><li>flex-grow: 这个 flex 子元素得到（伸张）多少 positive free space?</li><li>flex-shrink: 从这个 flex 子元素要消除（收缩）多少 negative free space?</li><li>flex-basis: 在 flex 子元素未伸张和收缩之前，它的大小是多少？</li></ul><h3 id="工作于主轴的重要概念"><a href="#工作于主轴的重要概念" class="headerlink" title="工作于主轴的重要概念"></a>工作于主轴的重要概念</h3><p>在考虑 flex 属性如何在主轴方向上控制比率之前，有一些概念值得我们去深究。这涉及到 flex 子元素在任何伸缩之前的自然尺寸，以及自由空间的概念</p><h4 id="Flex子元素的尺寸"><a href="#Flex子元素的尺寸" class="headerlink" title="Flex子元素的尺寸"></a>Flex子元素的尺寸</h4><p>为了计算出有多少可用空间能布局于 flex 子元素，浏览器必须知道这个 item 有多大才能开始。它是如何解决没有应用于绝对单位的宽度和高度的 flex 子元素？</p><p>在 min-content 和 max-content 的 CSS 中有一个概念— 这些关键字定义在 CSS Intrinsic and Extrinsic Sizing Specification, 并且可以用一个 length单位代替。</p><p>例如，我有两段包含一个文本字符串的段落。第一段设置了min-content的宽度。在支持这个关键字的浏览器你可以看见文本已尽可能抓住机会来自动换行，变得尽可能小且没有溢出。此之后就是那个字符串的 min-content 大小。本质上讲，字符串中最长的单词决定了大小。</p><p>第二段设置了 max-content值，且它和 min-content 相反。它会变得尽可能大，没有自动换行的机会。如果 flex 容器太窄，它就会溢出其自身的盒子。</p><h4 id="正负自由空间"><a href="#正负自由空间" class="headerlink" title="正负自由空间"></a>正负自由空间</h4><p>positive and negative free space 直译过来就是正负空闲空间，为了读者能良好的阅读下文，译者先大概说下。</p><p>Flex 布局中有 flex 容器和 flex 子元素，flex 子元素包含在 flex 容器中，那么当 flex 子元素在主轴上的尺寸（大小）之和小于 flex 容器 的尺寸时，flex 容器中就会有多余的空间没有被填充，这些空间就被叫做 positive free space。当 flex 子元素在主轴上的尺寸之和大于 flex 容器的尺寸时，flex 容器的空间就不够用，此时 flex 子元素的尺寸之和减去 flex 容器的尺寸（flex 子元素溢出的尺寸）就是negative free space, 这个 negative free space 加上 flex 容器的尺寸刚好可以容纳 flex 子元素。</p><p>去谈论这些属性之前我们需要理解 positive free space 和 negative free space 的概念。当一个 flex 容器有 positive free space 时，它就有更多的空间用于在 flex 容器内显示 flex 子元素。比如说，如果我有 500px 宽的 flex 容器，flex-direction 属性值为 row, 三个 100px 宽的 flex 子元素，而且我还有 200px 的 positive free space, 那么如果我想让它们（positive free space）填充 flex 容器，它们就可以填充在 flex 子元素之间。</p><p>当 flex 子元素的自然尺寸加起来比 flex 容器内的可用空间大时，我们产生了 negative free space. 如果我有一个像上面 500px 宽的 flex 容器，但是三个 flex 子元素每个都为 200px 宽，我就一共需要 600px 宽，因此我就有了 100px 的 negative free space. 这可以从 flex 子元素中删除以使其能适应 flex 容器。</p><h3 id="flex-basis-属性"><a href="#flex-basis-属性" class="headerlink" title="flex-basis 属性"></a>flex-basis 属性</h3><p>flex-basis 属性在任何空间分配发生之前初始化 flex 子元素的尺寸。此属性的初始值为 auto. 如果 flex-basis 设置为 auto , 浏览器会先检查 flex 子元素的主尺寸是否设置了绝对值再计算出 flex 子元素的初始值。比如说你已经给你的 flex 子元素设置了 200px 的宽，则 200px 就是这个 flex 子元素的 flex-basis.</p><p>如果你的 flex 子元素 为自动调整大小，则auto 会解析为其内容的大小。此时你所熟知的 min-content 和 max-content 大小会变得有用，flexbox 会将 flex 子元素的 max-content 大小作为 flex-basis. 下面的例子可以证明这一点。</p><p>除了关键字 auto 以外，你还可以使用关键字 content 作为 flex-basis的值。这会导致 flex-basis 根据内容大小设置即使 flex 子元素 设置了宽度。这是一个新关键字而且获得浏览器支持的比较少，但是你还是可以通过设置flex-basis: auto并确保你的 flex 子元素没有设置宽度来达到相同的效果 , 以便它能自动调整大小。</p><p>空间分配时，如果你想 flexbox 完全忽略 flex 子元素的尺寸就设置flex-basis 为 0. 这基本上告诉 flexbox 所有空间都可以抢占，并按比例分享。</p><h3 id="flex-grow-属性"><a href="#flex-grow-属性" class="headerlink" title="flex-grow 属性"></a>flex-grow 属性</h3><p>flex-grow 属性指定了flex 增长值, 这决定了当 positive free space 分配时，flex 子元素相对于 flex 容器中的其余 flex 子元素的增长程度。</p><p>如果你所有的 flex 子元素 设置了相同的flex-grow属性值，那么空间将会在 flex 子元素 之间平均分配。如果你想要这种情形，通常你需要使用1作为值，而且如果你喜欢你还可以将它们的flex-grow都 设置为88，或100，或1.2 —这只是个比例。如果 flex-grow 的值全部相同，并且在 flex 容器 中还有 positive free space , 那么它（positive free space）就会平均的分配给所有的 flex 子元素</p><h4 id="结合flex-grow-与-flex-basis"><a href="#结合flex-grow-与-flex-basis" class="headerlink" title="结合flex-grow 与 flex-basis"></a>结合flex-grow 与 flex-basis</h4><p>根据flex-grow和flex-basis的相互影响，有些东西会变得迷惑起来。让我们考虑三个不同内容大小的 flex 子元素的例子，应用于下列 flex 规则：</p><p>flex: 1 1 auto;</p><p>这个例子中设置flex-basis的值为auto且没有设置它们的宽，因此它们是自动调整大小的。这意味着 flexbox 的大小决定于全部 flex 子元素内容的max-content 大小。在布局完 flex 子元素 之后在 flex 容器中还有一些 positive free space，展示在这幅图片的阴影区域中：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665370298/origin-of-ray/ratios2_ncusgh.png" alt></p><p>我们使用与内容大小相等的flex-basis，以便从总可用空间（flex 容器的宽度）中减去可用分配空间，然后剩余空间在每个 flex 子元素之间平均分配。我们比较大的 flex 子元素最终会变得更大，因为它一开始就有一个比较大的尺寸，即使它与其他 flex 子元素具有相同数量的分配空间：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1665370341/origin-of-ray/ratios3_ktlfw5.png" alt></p><p><strong>如果你真正想要的是三个同样尺寸的 flex 子元素，即使它们开始是不同的尺寸</strong>，你应该使用这个：</p><p>flex: 1 1 0;</p><p>我们要说的是，为了我们的空间分配，flex 子元素的尺寸计算值是 0—所有空间都用来争夺，并且所有 flex 子元素具有相同的flex-grow 值，它们（flex 子元素）每个都获得相等的空间分配。最终结果是三个宽度相等的可伸缩 flex 子元素。</p><h4 id="flex-items设置不同的flex-grow值"><a href="#flex-items设置不同的flex-grow值" class="headerlink" title="flex items设置不同的flex-grow值"></a>flex items设置不同的flex-grow值</h4><p>我们对flex-grow和flex-basis如何工作的理解使我们能够通过分配不同的flex-grow值来进一步控制我们单个 flex 子元素 大小。如果我们设置flex-basis值为0则所用空间都可以被分配，我们可以给每个 flex 子元素分配不同的flex-grow值。在下面的示例中，我会使用下面的值：</p><ul><li>设置第一个 flex item 的flex-grow值为1.</li><li>设置第二个 flex item 的flex-grow值为1.</li><li>设置第三个 flex item 的flex-grow值为2.</li></ul><p>flex-basis值为 0 意味着可用空间会根据设置分配。我们需要增加 flex 增长值，就需要在 flex 容器中用 positive free space 的总大小除以 flex-grow 值之和，在这个例子中为 4. 我们就可以根据个体值（flex-basis 值）分配空间 — 第一个 flex 子元素得到一个单位 , 第二个 flex 子元素得到一个单位，第三个 flex 子元素得到二个单位。也就是说第三个 flex 子元素是第一个和第二个 flex item 的两倍。</p><h3 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h3><p>flex-shrink 属性指定了flex 缩小值, 它确定在分配 negative free space 时，flex 子元素相对于 flex 容器中其余 flex 子元素收缩的程度。</p><p>该属性用于处理浏览器计算 flex 子元素的flex-basis值的情形，并检测它们太大以至于无法适应 flex 容器。<strong>只要 flex-shrink 有正值则 flex 子元素就会收缩以至于它们不会溢出 flex 容器</strong>。</p><p>因此 flex-grow 用于添加可用空间，flex-shrink 减少空间来使盒子适应它们的容器而不溢出。</p><p>一个示例中我的 flex 容器有三个 flex 子元素，我已经给它们每一个（flex 子元素）设置了 200px 的宽度，并且设置容器 (flex 容器）500px 宽。设置flex-shrink 为 0 的 flex 子元素 不允许收缩以致于它们溢出了盒子。</p><p>改变 flex-shrink 值为 1 你会发现每个 flex 子元素 都收缩了同样大小的量，现在所有 flex 子元素都适应盒子。这样做后它们已变得比它们的初始宽度还小。</p><h4 id="结合flex-shrink和flex-basis"><a href="#结合flex-shrink和flex-basis" class="headerlink" title="结合flex-shrink和flex-basis"></a>结合flex-shrink和flex-basis</h4><p>你可以看见 flex-shrink和flex-grow 工作的一样好。但是它们有两个原因使它们不完全一样。</p><p>即使它微不足道，但规范中的定义内容是 flex-shrink不全相同与 negative space 的一个原因，正如flex-grow不全相同于 positive space 一样：</p><blockquote><p>当分配 negative space 时，flex 基本大小乘以 flex 增长值。这会根据 flex 子元素能够缩小的比例（多少）分配 negative space, 其它亦如此。在较大的 flex 子元素 明显缩小之前，较小的 flex 子元素 不会缩小到 0.”</p></blockquote><p>第二个原因是在 negative free space 消除期间 flexbox 会阻止小的 flex 子元素缩小到 0. 这些 flex 子元素会以min-content的大小进行铺设 —这个大小是它们利用任何可以利用的自动断行机会后所变成的。</p><p>在下面的例子中，在 flex-basis 解析为内容大小的位置你会看到 min-content 的铺设。如果你改变 flex 容器的宽度——比如增加到 700px 宽，再减少 flex 子元素的宽度，你会看到前两个 flex 子元素将换行，但是它们绝不会小于 min-content 的大小。随着盒子变得越来越小，第三个 flex 子元素随后从空间中溢出。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &gt; * &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Item Three has more content and so has a larger size<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="掌握-Flex-items-的大小"><a href="#掌握-Flex-items-的大小" class="headerlink" title="掌握 Flex items 的大小"></a>掌握 Flex items 的大小</h3><p>真正理解 flex 子元素如何工作的关键是理解有多少东西参与影响 flex 子元素。思考以下方面，哪些是我们在这些指南中已经讨论过了的：</p><h4 id="什么设置-flex-item-的基本大小？"><a href="#什么设置-flex-item-的基本大小？" class="headerlink" title="什么设置 flex item 的基本大小？"></a>什么设置 flex item 的基本大小？</h4><ol><li>lex-basis 设置为auto吗，这个 flex 子元素设置了宽度吗？如果设置了，flex 子元素的大小将会基于设置的宽度。</li><li>flex-basis 设为 auto 还是content (在支持的浏览器中)? 如果是auto, flex 子元素的大小为原始大小。</li><li>flex-basis 是不为0的长度单位吗？如果是这样那这就是 flex 子元素的大小。</li><li>flex-basis 设为 0呢？如果是这样，则 flex 子元素的大小不在空间分配计算的考虑之内。</li></ol><h4 id="我们有可用空间吗？"><a href="#我们有可用空间吗？" class="headerlink" title="我们有可用空间吗？"></a>我们有可用空间吗？</h4><p>flex 子元素没有 positive free space 就不会增长，没有 negative free space 就不会缩小。</p><ol><li>如果我们把所有的 flex 子元素的宽度相加（如果在列方向工作则为高度），那么总和是否小于 flex 容器的总宽度（或高度）？如果是这样，那么你有 positive free space，并且 flex-grow 会发挥作用。</li><li>如果我们把所有的 flex 子元素的宽度相加（如果在列方向工作则为高度），那么总和是否大于 flex 容器的总宽度（或高度）？如果是这样，那么你有 negative free space，并且 flex-shrink 会发挥作用。</li></ol><h4 id="分配空间的其他方式"><a href="#分配空间的其他方式" class="headerlink" title="分配空间的其他方式"></a>分配空间的其他方式</h4><p>如果我们不想空间添加到 flex 子元素中，记住你可以在 flex 容器中使用指南中所描述的对准属性来处理 flex 子元素之间或者 flex 子元素周围的空闲空间，以致可以对齐 flex 子元素。justify-content 属性能够在 flex 子元素之间或 flex 子元素周围分配空闲空间。您还可以在 flex 子元素上使用自动边距 (auto margins) 来吸收空间并在 flex 子元素之间创建间距。</p><p>参考文章：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" rel="external nofollow noopener noreferrer" target="_blank">flex布局基本概念</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax" rel="external nofollow noopener noreferrer" target="_blank">控制Flex子元素在主轴上的比例</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。2009年，W3C 提出了一种新的方案——Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。&lt;/p&gt;
&lt;p&gt;当然还有一种布局解决方案是grid布局，但本文先就flex进行梳理。&lt;/p&gt;
&lt;p&gt;Flexible Box 模型，通常被称为 flexbox，是&lt;strong&gt;一种一维的布局模型&lt;/strong&gt;。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。本文给出了 flexbox 的主要特性，更多的细节将在别的文档中探索。&lt;/p&gt;
&lt;p&gt;我们说 flexbox 是一种一维的布局，是因为一个 flexbox 一次只能处理一个维度上的元素布局，一行或者一列。作为对比的是另外一个二维布局 CSS Grid Layout，可以同时处理行和列上的布局。&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://sunra.top/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>Web性能指标与优化手段</title>
    <link href="https://sunra.top/2022/09/30/web-performance-indicators-and-optimization-method/"/>
    <id>https://sunra.top/2022/09/30/web-performance-indicators-and-optimization-method/</id>
    <published>2022-09-30T08:23:12.000Z</published>
    <updated>2022-09-30T09:27:57.788Z</updated>
    
    <content type="html"><![CDATA[<p>今天无意间点开了MDN中关于性能优化的系列文章，学到了很多新的东西，也把很多旧的东西重新梳理了一下。</p><p>比如HTML不同的类型资源的加载顺序，是否会互相阻塞等问题，又比如学到了一些新的优化方式，如14K优化，dns-prefetch等</p><p>这个是入口地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/zh-CN/docs/Web/Performance</a></p><a id="more"></a><h2 id="Web渲染的性能指标"><a href="#Web渲染的性能指标" class="headerlink" title="Web渲染的性能指标"></a>Web渲染的性能指标</h2><p>在进行性能优化之前，我们需要为应用选择一个正确的度量标准（性能指标）以及设定一个合理的优化目标。</p><p>并不是所有指标都同样重要，这取决于你的应用。最后根据度量标准设定一个现实的目标。</p><p>下面是一些值得考虑的指标：</p><ul><li><p>首次有效绘制（First Meaningful Paint，简称FMP，当主要内容呈现在页面上）</p></li><li><p>英雄渲染时间（Hero Rendering Times，度量用户体验的新指标，当用户最关心的内容渲染完成）</p></li><li><p>可交互时间（Time to Interactive，简称TTI，指页面布局已经稳定，关键的页面字体是可见的，并且主进程可用于处理用户输入，基本上用户可以点击UI并与其交互）</p></li><li><p>输入响应（Input responsiveness，界面响应用户输入所需的时间）</p></li><li><p>感知速度指数（Perceptual Speed Index，简称PSI，测量页面在加载过程中视觉上的变化速度，分数越低越好）</p></li><li><p>自定义指标，由业务需求和用户体验来决定。</p></li></ul><p>FMP与英雄渲染时间非常相似，但它们不一样的地方在于FMP不区分内容是否有用，不区分渲染出的内容是否是用户关心的。</p><p>基于以上这些指标以及RAIL性能模型，我们可以设立一些目标，比如</p><ul><li><p>100毫秒的界面响应时间与60FPS</p></li><li><p>速度指标（Speed Index）小于1250ms</p></li><li><p>3G网络环境下可交互时间小于5s</p></li><li><p>重要文件的大小预算小于170kb</p></li></ul><h2 id="浏览器渲染原理以及关键渲染路径"><a href="#浏览器渲染原理以及关键渲染路径" class="headerlink" title="浏览器渲染原理以及关键渲染路径"></a>浏览器渲染原理以及关键渲染路径</h2><p>快速响应的网站提供更好的用户体验。用户期待内容快速加载和交互流畅的 Web 体验。</p><p>等待资源加载时间和大部分情况下的浏览器单线程执行是影响 Web 性能的两大主要原因。</p><p>等待时间是需要去克服来让浏览器快速加载资源的主要威胁。为了实现快速加载，开发者的目标就是尽可能快的发送请求的信息，至少看起来相当快。网络等待时间是在链路上传送二进制到电脑端所消耗的链路传输时间。Web 性能优化需要做的就是尽可能快的使页面加载完成。</p><p>大部分情况下，浏览器是单线程执行的。为了有流畅的交互，开发者的目标是确保网站从流畅的页面滚动到点击响应的交互性能。渲染时间是关键要素，确保主线程可以完成所有给它的任务并且仍然一直可以处理用户的交互。通过了解浏览器单线程的本质与最小化主线程的责任可以优化 Web 性能，来确保渲染的流畅和交互响应的及时。</p><h3 id="第一步：导航"><a href="#第一步：导航" class="headerlink" title="第一步：导航"></a>第一步：导航</h3><p>导航是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。</p><p>Web 性能优化的目标之一就是缩短导航完成所花费的时间，在理想情况下，它通常不会花费太多的时间，但是等待时间和带宽会导致它的延时。</p><h4 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h4><p>对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。如果导航到 <a href="https://example.com，HTML" rel="external nofollow noopener noreferrer" target="_blank">https://example.com，HTML</a> 页面被定位到 IP 地址为 93.184.216.34 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询。</p><p>浏览器向名称服务器发起 DNS 查询请求，最终得到一个 IP 地址。第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过名称服务器进行查询来加速后续的请求。</p><p>通过主机名加载一个页面通常仅需要一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（fonts）、图像（images）、脚本（scripts）、广告（ads）和网站统计（metrics）都有不同的主机名，则需要对每一个主机名进行 DNS 查询。</p><h4 id="TCP握手"><a href="#TCP握手" class="headerlink" title="TCP握手"></a>TCP握手</h4><p>一旦获取到服务器 IP 地址，浏览器就会通过 TCP“三次握手” (en-US)与服务器建立连接。这个机制的是用来让两端尝试进行通信——在浏览器和服务器通过上层协议 HTTPS 发送数据之前，可以协商网络 TCP 套接字连接的一些参数。</p><p>TCP 的“三次握手”技术经常被称为“SYN-SYN-ACK”——更确切的说是 SYN、SYN-ACK、ACK——因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着终端与每台服务器之间还要来回发送三条消息，而请求尚未发出。</p><h4 id="TLS协商"><a href="#TLS协商" class="headerlink" title="TLS协商"></a>TLS协商</h4><p>为了在 HTTPS 上建立安全连接，另一种握手是必须的。更确切的说是 TLS 协商，它决定了什么密码将会被用来加密通信，验证服务器，在进行真实的数据传输之前建立安全连接。在发送真正的请求内容之前还需要三次往返服务器。</p><p>虽然建立安全连接对增加了加载页面的等待时间，对于建立一个安全的连接来说，以增加等待时间为代价是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。</p><p>经过 8 次往返，浏览器终于可以发出请求。</p><h3 id="第二步：响应"><a href="#第二步：响应" class="headerlink" title="第二步：响应"></a>第二步：响应</h3><p>一旦我们建立了到 web 服务器的连接，浏览器就代表用户发送一个初始的 HTTP GET 请求，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>My simple page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">src</span>=<span class="string">"styles.css"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"myscript.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"heading"</span>&gt;</span>My Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph with a <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.com/about"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"myimage.jpg"</span> <span class="attr">alt</span>=<span class="string">"image description"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"anotherscript.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>初始请求的响应包含所接收数据的第一个字节。Time to First Byte（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。</p><p>上面的例子中，这个请求肯定是小于 14KB 的，但是直到浏览器在解析阶段遇到链接时才会去请求链接的资源，下面有进行描述。</p><h4 id="TCP慢启动-14kB规则"><a href="#TCP慢启动-14kB规则" class="headerlink" title="TCP慢启动/14kB规则"></a>TCP慢启动/14kB规则</h4><p>第一个响应数据包是 14KB 大小的。这是慢启动的一部分，慢启动是一种均衡网络连接速度的算法。慢启动逐渐增加发送数据的数量直到达到网络的最大带宽。</p><p>在 TCP 慢启动 中，在收到初始包之后，服务器会将下一个数据包的大小加倍到大约 28KB。后续的数据包依次是前一个包大小的二倍直到达到预定的阈值，或者遇到拥塞。</p><p>如果您听说过初始页面加载的 14KB 规则，TCP 慢启动就是初始响应为 14KB 的原因，也是为什么 web 性能优化需要将此初始 14KB 响应作为优化重点的原因。TCP 慢启动逐渐建立适合网络能力的传输速度，以避免拥塞。</p><h3 id="第三步：解析和渲染"><a href="#第三步：解析和渲染" class="headerlink" title="第三步：解析和渲染"></a>第三步：解析和渲染</h3><p>一旦浏览器收到数据的第一块，它就可以开始解析收到的信息。“解析”是浏览器将通过网络接收的数据转换为 DOM 和 CSSOM 的步骤，通过渲染器把 DOM 和 CSSOM 在屏幕上绘制成页面。</p><p>DOM 是浏览器标记的内部表示。DOM 也是被暴露的，可以通过 JavaScript 中的各种 API 进行 DOM 操作。</p><p>即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将开始解析并尝试根据其拥有的数据进行渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。</p><h4 id="关键渲染路径（CRP）"><a href="#关键渲染路径（CRP）" class="headerlink" title="关键渲染路径（CRP）"></a>关键渲染路径（CRP）</h4><p>在解析 HTML 时会创建文档对象模型。HTML 可以请求 JavaScript，而 JavaScript 反过来，又可以更改 DOM。HTML 包含或请求样式，依次来构建 CSS 对象模型。浏览器引擎将两者结合起来以创建渲染树。布局确定页面上所有内容的大小和位置。确定布局后，将像素绘制到屏幕上。</p><p>优化关键渲染路径可以缩短首次渲染的时间。了解和优化关键渲染路径对于确保重排和重绘可以每秒 60 帧的速度进行，以确保高效的用户交互并避免讨厌是很重要的。</p><p>Web 性能包含了服务器请求和响应、加载、执行脚本、渲染、布局和绘制每个像素到屏幕上。</p><p>网页请求从 HTML 文件请求开始。服务器返回 HTML — 响应头和数据。然后浏览器开始解析 HTML，转换收到的数据为 DOM 树。浏览器每次发现外部资源就初始化请求，无论是样式、脚本或者嵌入的图片引用。有时请求会阻塞，这意味着解析剩下的 HTML 会被终止直到重要的资源被处理。浏览器接着解析 HTML，发请求和构造 DOM 直到文件结尾，这时开始构造 CSS 对象模型。等到 DOM 和 CSSOM 完成之后，浏览器构造渲染树，计算所有可见内容的样式。一旦渲染树完成布局开始，定义所有渲染树元素的位置和大小。完成之后，页面被渲染完成，或者说是绘制到屏幕上。</p><h5 id="DOM（文档对象模型）"><a href="#DOM（文档对象模型）" class="headerlink" title="DOM（文档对象模型）"></a>DOM（文档对象模型）</h5><p>DOM 构建是增量的。HTML 响应变成令牌（token），令牌变成节点，而节点又变成 DOM 树。单个 DOM 节点以 startTag 令牌开始，以 endTag 令牌结束。节点包含有关 HTML 元素的所有相关信息。该信息是使用令牌描述的。节点根据令牌层次结构连接到 DOM 树中。如果另一组 startTag 和 endTag 令牌位于一组 startTag 和 endTag 之间，则您在节点内有一个节点，这就是我们定义 DOM 树层次结构的方式。</p><p>节点数量越多，关键渲染路径中的后续事件将花费的时间就越长。</p><h5 id="CSSOM"><a href="#CSSOM" class="headerlink" title="CSSOM"></a>CSSOM</h5><p>DOM 包含页面所有的内容。CSSOM 包含了页面所有的样式，也就是如何展示 DOM 的信息。CSSOM 跟 DOM 很像，但是不同。DOM 构造是增量的，CSSOM 却不是。CSS 是渲染阻塞的：浏览器会阻塞页面渲染直到它接收和执行了所有的 CSS。CSS 是渲染阻塞是因为规则可以被覆盖，所以内容不能被渲染直到 CSSOM 的完成。</p><p>CSS 有其自身的规则集合用来定义标识。注意 CSS 中的 C 代表的是“层叠”。CSS 规则是级联的。随着解析器转换标识为节点，节点的后代继承了样式。像处理 HTML 那样的增量处理功能没有被应用到 CSS 上，因为后续规则可能被之前的所覆盖。CSS 对象模型随着 CSS 的解析而被构建，但是直到完成都不能被用来构建渲染树，因为样式将会被之后的解析所覆盖而不应该被渲染到屏幕上。</p><p>从选择器性能的角度，更少的特定选择器是比更多的要快。例如，.foo {} 是比 .bar .foo {} 更快的因为当浏览器发现 .foo ，接下来必须沿着 DOM 向上走来检查 .foo 是不是有一个祖先 .bar。越是具体的标签浏览器就需要更多的工作，但这样的弊端未必值得优化。</p><p>如果你测量过解析 CSS 的时间，你将会被浏览器实在地快所震惊。更具体的规则更昂贵因为它必须遍历更多的 DOM 树节点，但这所带来的额外的消耗通常很小。先测量一下。然后按需优化。特定化或许不是你的低垂的果实。在 CSS 中选择器的性能优化，提升仅仅是毫秒级的。有其他一些方式来优化 CSS，例如压缩和使用媒体查询来异步处理 CSS 为非阻塞的请求。</p><h5 id="渲染树"><a href="#渲染树" class="headerlink" title="渲染树"></a>渲染树</h5><p>渲染树包括了内容和样式：DOM 和 CSSOM 树结合为渲染树。为了构造渲染树，浏览器检查每个节点，从 DOM 树的根节点开始，并且决定哪些 CSS 规则被添加。</p><p>渲染树只包含了可见内容。头部（通常）不包含任何可见信息，因此不会被包含在渲染树种。如果有元素上有 display: none;，它本身和其后代都不会出现在渲染树中。</p><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><p>一旦渲染树被构建，布局变成了可能。布局取决于屏幕的尺寸。布局这个步骤决定了在哪里和如何在页面上放置元素，决定了每个元素的宽和高，以及他们之间的相关性。</p><p>什么是一个元素的宽？块级元素，根据定义，默认有父级宽度的 100%。一个宽度 50% 的元素，将占据父级宽度的一半。除非另外定义，body 有 100% 的宽，意味着它占据视窗的 100%。设备的宽度影响布局。</p><p>视窗的元标签定义了布局视窗的宽度，从而影响布局。没有的话，浏览器使用视窗的默认宽度，默认全屏浏览器通常是 960px。在默认情况下像你的手机浏览器的全屏浏览器，通过设置 <meta name="viewport" content="width=device-width">，宽度将会是设备的宽度而不是默认的视窗宽度。设备宽度当用户在横向和纵向模式旋转他们的手机时将会改变。布局发生在每次设备旋转或浏览器缩放时。</p><p>布局性能受 DOM 影响 — 节点数越多，布局就需要更长的时间。布局将会变成瓶颈，如果期间需要滚动或者其他动画将会导致迟滞。20ms 的延迟在加载或者方向改变时或许还可以接受，但在动画或滚动时就会迟滞。任何渲染树改变的时候，像添加节点、改变内容或者在一个节点更新盒模型样式的时候布局就会发生。</p><p>为了减小布局事件的频率和时长，批量更新或者避免改动盒模型属性。</p><h5 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h5><p>最后一步是将像素绘制在屏幕上。一旦渲染树创建并且布局完成，像素就可以被绘制在屏幕上。加载时，整个屏幕被绘制出来。之后，只有受影响的屏幕区域会被重绘，浏览器被优化为只重绘需要绘制的最小区域。绘制时间取决于何种类型的更新被附加在渲染树上。绘制是一个非常快的过程，所以聚焦在提升性能时这大概不是最有效的部分，重点要记住的是当测量一个动画帧需要的时间需要考虑到布局和重绘时间。添加到节点的样式会增加渲染时间，但是移除样式增加的 0.001ms 或许不能让你的优化物有所值。记住先测量。然后你可决定它的优化优先级。</p><h4 id="预加载扫描器"><a href="#预加载扫描器" class="headerlink" title="预加载扫描器"></a>预加载扫描器</h4><p>浏览器构建 DOM 树时，这个过程占用了主线程。当这种情况发生时，预加载扫描仪将解析可用的内容并请求高优先级资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用来请求它。它将在后台检索资源，以便在主 HTML 解析器到达请求的资源时，它们可能已经在运行，或者已经被下载。预加载扫描仪提供的优化减少了阻塞。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">src</span>=<span class="string">"styles.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"myscript.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"myimage.jpg"</span> <span class="attr">alt</span>=<span class="string">"image description"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"anotherscript.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，当主线程在解析 HTML 和 CSS 时，预加载扫描器将找到脚本和图像，并开始下载它们。为了确保脚本不会阻塞进程，当 JavaScript 解析和执行顺序不重要时，可以添加 async 属性或 defer 属性。</p><p><strong>等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性</strong>。</p><h3 id="第四步：交互"><a href="#第四步：交互" class="headerlink" title="第四步：交互"></a>第四步：交互</h3><p>一旦主线程绘制页面完成，你会认为我们已经“准备好了”，但事实并非如此。如果加载包含 JavaScript（并且延迟到 onload 事件激发后执行），则主线程可能很忙，无法用于滚动、触摸和其他交互。</p><p>Time to Interactive (en-US)（TTI）是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间——可交互是 First Contentful Paint (en-US) 之后的时间点，页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则它不可用，因此无法及时（小于 50ms）响应用户交互。</p><p>在我们的示例中，可能图像加载很快，但 anotherscript.js 文件可能是 2MB，而且用户的网络连接很慢。在这种情况下，用户可以非常快地看到页面，但是在下载、解析和执行脚本之前，就无法滚动。这不是一个好的用户体验。避免占用主线程</p><h2 id="优化手段总结"><a href="#优化手段总结" class="headerlink" title="优化手段总结"></a>优化手段总结</h2><h3 id="导航阶段"><a href="#导航阶段" class="headerlink" title="导航阶段"></a>导航阶段</h3><ul><li>通过dns-prefetch来预解析域名对应的IP地址，减少导航时间</li><li>尽量将不同的资源放到同一个服务器域名下，减少DNS解析的需求</li></ul><h3 id="响应阶段"><a href="#响应阶段" class="headerlink" title="响应阶段"></a>响应阶段</h3><ul><li>通过SSR来渲染首屏页面。</li><li>首屏页面所需内容尽量小于14kb，让其能够在TCP的首包中就能一次性返回并加载</li></ul><h3 id="解析阶段"><a href="#解析阶段" class="headerlink" title="解析阶段"></a>解析阶段</h3><ul><li>使用预加载扫描器，资源提示（Resource Hints），如preload，prefetch等</li><li>合理规划css和script标签的位置，因为css不会block html解析，但是会block js解析和执行，而js如果不是defer或者async，又会block html解析</li><li>使用CDN来加速资源的加载</li><li>优先加载关键的CSS，将首屏需要的CSS单独拆分出来</li></ul><h3 id="交互阶段"><a href="#交互阶段" class="headerlink" title="交互阶段"></a>交互阶段</h3><ul><li>优化JS的写法：<a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/JavaScript" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/en-US/docs/Learn/Performance/JavaScript</a></li></ul><h3 id="优化首屏时间"><a href="#优化首屏时间" class="headerlink" title="优化首屏时间"></a>优化首屏时间</h3><p>提升页面加载速度需要通过被加载资源的优先级、控制它们加载的顺序和减小这些资源的体积。</p><ul><li>通过异步重要资源的下载来减小请求数量</li><li>优化必须的请求数量和每个请求的文件体积</li><li>通过区分关键资源的优先级来优化被加载关键资源的顺序，来缩短关键路径长度。</li></ul><h3 id="编码优化"><a href="#编码优化" class="headerlink" title="编码优化"></a>编码优化</h3><p>事实上数据访问速度有快慢之分，下面列出几个影响数据访问速度的因素：</p><ul><li><p>字面量与局部变量的访问速度最快，数组元素和对象成员相对较慢</p></li><li><p>变量从局部作用域到全局作用域的搜索过程越长速度越慢</p></li><li><p>对象嵌套的越深，读取速度就越慢</p></li><li><p>对象在原型链中存在的位置越深，找到它的速度就越慢</p></li><li><p>推荐的做法是缓存对象成员值。将对象成员值缓存到局部变量中会加快访问速度</p></li></ul><p>应用在运行时，性能的瓶颈主要在于DOM操作的代价非常昂贵，下面列出一些关于DOM操作相关提升性能的建议：</p><ul><li><p>在JS中对DOM进行访问的代价非常高。请尽可能减少访问DOM的次数（建议缓存DOM属性和元素、把DOM集合的长度缓存到变量中并在迭代中使用。读变量比读DOM的速度要快很多。）</p></li><li><p>重排与重绘的代价非常昂贵。如果操作需要进行多次重排与重绘，建议先让元素脱离文档流，处理完毕后再让元素回归文档流，这样浏览器只会进行两次重排与重绘（脱离时和回归时）。</p></li><li><p>善于使用事件委托</p></li></ul><p>下面列出一些流程控制相关的一些可以略微提升性能的细节，这些细节在大型开源项目中大量运用（例如Vue）：</p><ul><li><p>避免使用for…in（它能枚举到原型，所以很慢）</p></li><li><p>在JS中倒序循环会略微提升性能</p></li><li><p>减少迭代的次数</p></li><li><p>基于循环的迭代比基于函数的迭代快8倍</p></li><li><p>用Map表代替大量的if-else和switch会提升性能</p></li></ul><h3 id="静态资源优化"><a href="#静态资源优化" class="headerlink" title="静态资源优化"></a>静态资源优化</h3><ul><li><p>使用Brotli或Zopfli进行纯文本压缩</p></li><li><p>尽可能通过srcset，sizes和<picture>元素使用响应式图片。还可以通过<picture>元素使用WebP格式的图像。</picture></picture></p></li><li><p>使用Tree-shaking，code-splitting等进行产物的压缩和拆分</p></li></ul><h3 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h3><ul><li><p>使用HTTP缓存</p></li><li><p>使用HTTP2的多路复用来合并请求</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天无意间点开了MDN中关于性能优化的系列文章，学到了很多新的东西，也把很多旧的东西重新梳理了一下。&lt;/p&gt;
&lt;p&gt;比如HTML不同的类型资源的加载顺序，是否会互相阻塞等问题，又比如学到了一些新的优化方式，如14K优化，dns-prefetch等&lt;/p&gt;
&lt;p&gt;这个是入口地址：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Performance&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/Performance&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>消失的两个数字</title>
    <link href="https://sunra.top/2022/09/26/missing-two-lcci/"/>
    <id>https://sunra.top/2022/09/26/missing-two-lcci/</id>
    <published>2022-09-26T03:14:07.000Z</published>
    <updated>2022-09-30T08:41:30.446Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？</p><p>题目链接：<a href="https://leetcode.cn/problems/missing-two-lcci/" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.cn/problems/missing-two-lcci/</a></p><p>这道题严格来说并不是一道算法题，我感觉它的解法中，一种像是计算机组成中二进制的知识，一种是数学知识</p><a id="more"></a><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><p>这种方法是纯数学方法，</p><ul><li>我们知道1～N的和是$\frac{N(N+1)}{2}$,然后我们可以通过遍历的方法求出提供的N-2个数字的和，通过相减，我们可以得到缺失的两个数字的和，假设为<code>sumTwo</code>，缺失的两个数分别为a和b</li><li>缺失的两个数字是不相同的，所以一个大一个小，也就是说一个小于二者的平均值，一个大于二者的平均值，假设这个平均值为<code>limit</code>，则$limit = \frac{sumTwo}{2}$</li><li>然后再根据是否小于<code>limit</code>将1～N分为两部分，则a在1～limit之间，我们只需要计算1～limit的和，即$\frac{limit(limit+1)}{2}$与提供的数组中1～limit的数字的和之间的差值，其实就是a。求b同理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> missingTwo = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> N = nums.length + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> sumTwo = <span class="function">(<span class="params">N * (N + <span class="number">1</span></span>)) / 2 - <span class="params">nums</span>.<span class="params">reduce</span>(<span class="params">(pre, cur</span>) =&gt;</span> (pre + cur), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> limit = <span class="built_in">Math</span>.floor(sumTwo / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> sumBefore = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt;= limit) &#123;</span><br><span class="line">            sumBefore += num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> one = (limit * (limit + <span class="number">1</span>)) / <span class="number">2</span> - sumBefore;</span><br><span class="line">    <span class="keyword">return</span> [one, sumTwo - one];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="利用位运算"><a href="#利用位运算" class="headerlink" title="利用位运算"></a>利用位运算</h2><p>这种思路和上面的求和思路有些类似，都是先求出缺失的两个数字的合并后的结果，然后根据合并的结果把提供的数字分成两部分，缺失的两个数字分别在两个部分中。</p><p>由于从 1 到 n 的整数中有两个整数消失，其余每个整数都在数组中出现一次，因此数组的长度是 n - 2。在数组中的 n - 2 个数后面添加从 1 到 n 的每个整数各一次，则得到 2n−2 个数字，其中两个在数组中消失的数字各出现一次，其余每个数字各出现两次。</p><p>假设数组 nums 中消失的两个数字分别是 $x_1$,$x_2$ 。如果把上述 2n−2 个数字全部异或起来，得到结果 x，那么一定有：</p><script type="math/tex; mode=display">x = x_1 \bigoplus x_2</script><p>其中 $\bigoplus$ 表示异或运算。这是因为 nums 中出现两次的元素都会因为异或运算的性质 $a \bigoplus b \bigoplus b = a$ 抵消掉，那么最终的结果就只剩下 $x_1$,$x_2$的异或和。</p><p>显然 $x \ne 0$，因为如果 x=0，那么说明 $x_1 = x_2$ ,$x_1$,$x_2$就不是在上述 2n - 2 个数字中只出现一次的数字了。因此，我们可以使用位运算 $x &amp; -x$ 取出 x 的二进制表示中最低位那个 1，设其为第 l 位，那么$x_1$,$x_2$中的某一个数的二进制表示的第 l 位为 0，另一个数的二进制表示的第 l 位为 1。在这种情况下，$x_1 \bigoplus x_2$的二进制表示的第 l 位才能为 1。</p><p>这样一来，我们就可以把从 1 到 n 的所有整数分成两类，其中一类包含所有二进制表示的第 l 位为 0 的数，另一类包含所有二进制表示的第 l 位为 1 的数。可以发现：</p><p>对于任意一个在数组 nums 中出现一次的数字，这些数字在上述 2n−2 个数字中出现两次，两次出现会被包含在同一类中；</p><p>对于任意一个在数组 nums 中消失的数字，即 $x_1$,$x_2$ ，这些数字在上述 2n - 2 个数字中出现一次，会被包含在不同类中。</p><p>因此，如果我们将每一类的元素全部异或起来，那么其中一类会得到 $x_1$另一类会得到 $x_2$。这样我们就找出了这两个只出现一次的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> missingTwo = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xorsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> n = nums.length + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        xorsum ^= num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        xorsum ^= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> type1 = <span class="number">0</span>, type2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> lsb = xorsum &amp; (-xorsum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &amp; lsb) &#123;</span><br><span class="line">            type1 ^= num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            type2 ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; lsb) &#123;</span><br><span class="line">            type1 ^= i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            type2 ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [type1, type2];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.cn/problems/missing-two-lcci/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://leetcode.cn/problems/missing-two-lcci/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这道题严格来说并不是一道算法题，我感觉它的解法中，一种像是计算机组成中二进制的知识，一种是数学知识&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS的BFC与盒子模型</title>
    <link href="https://sunra.top/2022/09/25/css-bfc-and-box/"/>
    <id>https://sunra.top/2022/09/25/css-bfc-and-box/</id>
    <published>2022-09-25T11:53:52.000Z</published>
    <updated>2022-09-26T01:54:02.192Z</updated>
    
    <content type="html"><![CDATA[<p>CSS用了很久，但是对于其中的一些用法总是有些模糊，没有一个系统的，有逻辑的认知。这次就先理清楚一下CSS中的BFC与盒子模型，以及相关的一些定位和布局属性。</p><a id="more"></a><h2 id="默认情况下，元素是如何布局的？"><a href="#默认情况下，元素是如何布局的？" class="headerlink" title="默认情况下，元素是如何布局的？"></a>默认情况下，元素是如何布局的？</h2><p>首先，取得元素的内容来放在一个独立的元素盒子中，然后在其周边加上内边距、边框和外边距 —- 就是我们之前看到的盒子模型。</p><p>默认的，一个块级元素的内容宽度是其父元素的 100%，其高度与其内容高度一致。内联元素的 height width 与内容一致。你无法设置内联元素的 height width —- 它们就那样置于块级元素的内容里。如果你想控制内联元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了 inline 和 block 的特性。)</p><p>这样解释了独立元素的布局，但是元素之间又是如何相互影响的呢？ 正常布局流（在布局介绍里提到过）是一套在浏览器视口内放置、组织元素的系统。默认的，块级元素按照基于其父元素的书写顺序(默认值： horizontal-tb) 的<em>块流动方向 (block flow direction)</em>放置 —- 每个块级元素会在上一个元素下面另起一行，它们会被设置好的 margin 分隔。在英语，或者其他水平书写、自上而下模式里，块级元素是垂直组织的。</p><p>内联元素的表现有所不同 —- 它们不会另起一行；只要在其父级块级元素的宽度内有足够的空间，它们与其他内联元素、相邻的文本内容（或者被包裹的）被安排在同一行。如果空间不够，溢出的文本或元素将移到新的一行。</p><p>如果两个相邻的元素都设置了 margin 并且两个 margin 有重叠，那么更大的设置会被保留，小的则会消失 —- 这被称为外边距叠加，我们之前见到过。</p><h2 id="BFC是什么"><a href="#BFC是什么" class="headerlink" title="BFC是什么"></a>BFC是什么</h2><p>块格式化上下文（Block Formatting Context，BFC）是 Web 页面的可视 CSS 渲染的一部分，是块级盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p><p>下列方式会创建块格式化上下文：</p><ul><li>根元素（<html>）</html></li><li>浮动元素（float 值不为 none）</li><li>绝对定位元素（position 值为 absolute 或 fixed）</li><li>行内块元素（display 值为 inline-block）</li><li>表格单元格（display 值为 table-cell，HTML 表格单元格默认值）</li><li>表格标题（display 值为 table-caption，HTML 表格标题默认值）</li><li>匿名表格单元格元素（display 值为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是 HTML table、tr、tbody、thead、tfoot 的默认值）或 inline-table）</li><li>overflow 值不为 visible、clip 的块元素</li><li>display 值为 flow-root 的元素</li><li>contain 值为 layout、content 或 paint 的元素</li><li>弹性元素（display 值为 flex 或 inline-flex 元素的直接子元素），如果它们本身既不是 flex、grid 也不是 table 容器</li><li>网格元素（display 值为 grid 或 inline-grid 元素的直接子元素），如果它们本身既不是 flex、grid 也不是 table 容器</li><li>多列容器（column-count 或 column-width (en-US) 值不为 auto，包括column-count 为 1）</li><li>column-span 值为 all 的元素始终会创建一个新的 BFC，即使该元素没有包裹在一个多列容器中 (规范变更, Chrome bug)</li></ul><p>格式化上下文影响布局，通常，我们会为定位和清除浮动创建新的 BFC，而不是更改布局，因为它将：</p><ul><li>包含内部浮动</li><li>排除外部浮动</li><li>阻止 外边距重叠</li></ul><h3 id="包含内部浮动"><a href="#包含内部浮动" class="headerlink" title="包含内部浮动"></a>包含内部浮动</h3><p>让浮动内容和周围的内容等高。也就是说，内部的浮动元素的显示不会超出BFC</p><p>为了更好的理解 BFC，我们先看看下面这些内容。</p><p>在下面的例子中，我们让 <code>&lt;div&gt;</code>元素浮动，并给它一个 border 效果。<code>&lt;div&gt;</code>里的内容现在已经在浮动元素周围浮动起来了。由于浮动的元素比它旁边的元素高，所以 <code>&lt;div&gt;</code>的边框穿出了浮动。正如我们在 In Flow and Out of Flow 中解释的，浮动脱离了文档流，所以 <code>&lt;div&gt;</code>的 background 和 border 仅仅包含了内容，不包含浮动。</p><p>使用 <code>overflow: auto</code></p><p>在创建包含浮动元素的 BFC 时，通常的做法是设置父元素 overflow: auto 或者其它除默认的 overflow: visible 以外的值。<code>&lt;div&gt;</code>元素变成布局中的迷你布局，任何子元素都会被包含进去。</p><p>使用 overflow 创建新的 BFC，是因为 overflow 属性会告诉浏览器应该怎样处理溢出的内容。如果使用它仅仅为了创建 BFC，你可能会遇到不希望出现的滚动条或阴影，需要注意。另外，对于后续的开发者，可能不清楚当时为什么使用 overflow，所以最好添加一些注释来解释为什么这样做。</p><p>使用 <code>display: flow-root</code></p><p>一个新的 display 属性的值，它可以创建无副作用的 BFC。在父级块中使用 <code>display: flow-root</code> 可以创建新的 BFC。</p><p>给 <code>&lt;div&gt;</code>元素设置 <code>display: flow-root</code> 属性后，<code>&lt;div&gt;</code>中的所有内容都会参与 BFC，浮动的内容不会从底部溢出。</p><p>你可以从 flow-root 这个值的名字上看出来，它创建一个新的用于流式布局的上下文，类似于浏览器的根（html）元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"overflow:auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the <span class="tag">&lt;<span class="name">code</span>&gt;</span>overflow:auto<span class="tag">&lt;/<span class="name">code</span>&gt;</span> container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"display:flow-root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the <span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span> container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排除外部浮动"><a href="#排除外部浮动" class="headerlink" title="排除外部浮动"></a>排除外部浮动</h3><p>下面的例子中，我们使用 display: flow-root 和浮动实现双列布局，因为正常文档流中建立的 BFC 不得与元素本身所在的块格式化上下文中的任何浮动的外边距重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>Try to resize this outer float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>Try to resize this outer float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"display:flow-root"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/* required by resize:both */</span></span><br><span class="line">  <span class="attribute">resize</span>: both;</span><br><span class="line">  <span class="attribute">margin-right</span>:<span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">75</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免外边距重叠"><a href="#避免外边距重叠" class="headerlink" title="避免外边距重叠"></a>避免外边距重叠</h3><p>块的上外边距 (margin-top)和下外边距 (margin-bottom)有时合并 (折叠) 为单个边距，其大小为单个边距的最大值 (或如果它们相等，则仅为其中一个)，这种行为称为边距折叠。</p><p>有三种情况会形成外边距重叠：</p><h4 id="同一层相邻元素之间"><a href="#同一层相邻元素之间" class="headerlink" title="同一层相邻元素之间"></a>同一层相邻元素之间</h4><p>相邻的两个元素之间的外边距重叠，除非后一个元素加上clear-fix 清除浮动。</p><h4 id="没有内容将父元素和后代元素分开"><a href="#没有内容将父元素和后代元素分开" class="headerlink" title="没有内容将父元素和后代元素分开"></a>没有内容将父元素和后代元素分开</h4><p>如果没有边框border，内边距padding，行内内容，也没有创建块级格式上下文或清除浮动来分开一个块级元素的上边界margin-top 与其内一个或多个后代块级元素的上边界margin-top；或没有边框，内边距，行内内容，高度height，最小高度min-height或 最大高度max-height 来分开一个块级元素的下边界margin-bottom与其内的一个或多个后代后代块元素的下边界margin-bottom，则就会出现父块元素和其内后代块元素外边界重叠，重叠部分最终会溢出到父级块元素外面。</p><h4 id="空的块级元素"><a href="#空的块级元素" class="headerlink" title="空的块级元素"></a>空的块级元素</h4><p>当一个块元素上边界margin-top 直接贴到元素下边界margin-bottom时也会发生边界折叠。这种情况会发生在一个块元素完全没有设定边框border、内边距padding、高度height、最小高度min-height 、最大高度max-height 、内容设定为 inline 或是加上clear-fix的时候。</p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>在 CSS 中我们广泛地使用两种“盒子” —— 块级盒子 (block box) 和 内联盒子 (inline box)。这两种盒子会在页面流（page flow）和元素之间的关系方面表现出不同的行为：</p><p>一个被定义成块级的（block）盒子会表现出以下行为：</p><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽</li><li>每个盒子都会换行</li><li>width 和 height 属性可以发挥作用</li><li>内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”</li></ul><p>如果一个盒子对外显示为 inline，那么他的行为如下：</p><ul><li>盒子不会产生换行。</li><li>width 和 height 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 inline 状态的盒子推开。</li></ul><blockquote><p>在这里最好也解释下内部 和 外部 显示类型。如上所述， css 的 box 模型有一个外部显示类型，来决定盒子是块级还是内联。</p><p>同样盒模型还有内部显示类型，它决定了盒子内部元素是如何布局的。默认情况下是按照 <strong>正常文档流 </strong>布局，也意味着它们和其他块元素以及内联元素一样 (如上所述).</p><p>但是，我们可以通过使用类似 flex 的 display 属性值来更改内部显示类型。如果设置 display: flex，在一个元素上，外部显示类型是 block，但是内部显示类型修改为 flex。该盒子的所有直接子元素都会成为 flex 元素，会根据弹性盒子（Flexbox）规则进行布局</p></blockquote><h3 id="什么是CSS盒子"><a href="#什么是CSS盒子" class="headerlink" title="什么是CSS盒子"></a>什么是CSS盒子</h3><p>完整的 CSS 盒模型应用于块级盒子，内联盒子只使用盒模型中定义的部分内容。模型定义了盒的每个部分 —— margin, border, padding, and content —— 合在一起就可以创建我们在页面上看到的内容。为了增加一些额外的复杂性，有一个标准的和替代（IE）的盒模型。</p><p>盒模型的各个部分<br>CSS 中组成一个块级盒子需要：</p><p>Content box: 这个区域是用来显示内容，大小可以通过设置 width 和 height.<br>Padding box: 包围在内容区域外部的空白区域； 大小通过 padding 相关属性设置。<br>Border box: 边框盒包裹内容和内边距。大小通过 border 相关属性设置。<br>Margin box: 这是最外面的区域，是盒子和其他元素之间的空白区域。大小通过 margin 相关属性设置。</p><p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model/box-model.png" alt></p><h4 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a>标准盒模型</h4><p>在标准模型中，如果你给盒设置 width 和 height，实际设置的是 content box。 padding 和 border 再加上设置的宽高一起决定整个盒子的大小。 见下图。</p><p>假设定义了 width, height, margin, border, and padding:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用标准模型宽度 = 410px (350 + 25 + 25 + 5 + 5)，高度 = 210px (150 + 25 + 25 + 5 + 5)，padding 加 border 再加 content box。</p><h4 id="替代盒模型"><a href="#替代盒模型" class="headerlink" title="替代盒模型"></a>替代盒模型</h4><p>你可能会认为盒子的大小还要加上边框和内边距，这样很麻烦，而且你的想法是对的 ! 因为这个原因，css 还有一个替代盒模型。使用这个模型，所有宽度都是可见宽度，所以内容宽度是该宽度减去边框和填充部分。使用上面相同的样式得到 (width = 350px, height = 150px).</p><p>默认浏览器会使用标准模型。如果需要使用替代模型，您可以通过为其设置 box-sizing: border-box 来实现。 这样就可以告诉浏览器使用 border-box 来定义区域，从而设定您想要的大小。</p><p>如果你希望所有元素都使用替代模式，而且确实很常用，设置 box-sizing 在 <html> 元素上，然后设置所有元素继承该属性，正如下面的例子。如果想要深入理解，请看 the CSS Tricks article on box-sizing。</html></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说，盒子模型指的是这个元素的宽和高是怎么计算的，而BFC指的是它内外部的元素不会有相互影响</p><p>是否是盒子模型是可以通过css属性直接设置的，比如display属性，但是是否是BFC并不是css的属性，而是有些情况下，会创建一个上下文。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CSS用了很久，但是对于其中的一些用法总是有些模糊，没有一个系统的，有逻辑的认知。这次就先理清楚一下CSS中的BFC与盒子模型，以及相关的一些定位和布局属性。&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://sunra.top/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>实现一个简单的React</title>
    <link href="https://sunra.top/2022/09/18/react-code-demo/"/>
    <id>https://sunra.top/2022/09/18/react-code-demo/</id>
    <published>2022-09-17T23:18:54.000Z</published>
    <updated>2022-09-21T02:11:18.517Z</updated>
    
    <content type="html"><![CDATA[<p>今天在Github上看到一个很好的开源项目，是根据react的原理实现一个简单的react demo。这里只是对它的代码做自己的注释，加深自己的理解。这里是<a href="https://github.com/pomber/didact/blob/master/didact.js" rel="external nofollow noopener noreferrer" target="_blank">项目链接</a></p><a id="more"></a><p>也可以根据这个网站一步步去学习：<a href="https://pomb.us/build-your-own-react/" rel="external nofollow noopener noreferrer" target="_blank">https://pomb.us/build-your-own-react/</a></p><p>首先明确代码中的element指的是fiber节点，dom才是真正的dom树上的节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个fiber节点，需要创建时就传入props和children</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type,</span><br><span class="line">    props: &#123;</span><br><span class="line">      ...props,</span><br><span class="line">      children: children.map(<span class="function"><span class="params">child</span> =&gt;</span></span><br><span class="line">        <span class="keyword">typeof</span> child === <span class="string">"object"</span></span><br><span class="line">          ? child</span><br><span class="line">          : createTextElement(child)</span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个文本fiber节点，类型是TEXT_ELEMENT，属性中只有nodeValue，没有children</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTextElement</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="string">"TEXT_ELEMENT"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">      nodeValue: text,</span><br><span class="line">      children: [],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真正创建dom节点，根据fiber节点的type不同，创建不同的dom节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDom</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dom =</span><br><span class="line">    fiber.type == <span class="string">"TEXT_ELEMENT"</span></span><br><span class="line">      ? <span class="built_in">document</span>.createTextNode(<span class="string">""</span>)</span><br><span class="line">      : <span class="built_in">document</span>.createElement(fiber.type)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*三个参数分别为，dom节点，节点上之前的属性，节点现在的属性</span></span><br><span class="line"><span class="comment">    函数作用就是将dom上的属性由之前的属性更新为现在的属性</span></span><br><span class="line"><span class="comment">    因为是新的节点，所以之前的属性为空</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  updateDom(dom, &#123;&#125;, fiber.props)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断属性是否是监听器</span></span><br><span class="line"><span class="keyword">const</span> isEvent = <span class="function"><span class="params">key</span> =&gt;</span> key.startsWith(<span class="string">"on"</span>)</span><br><span class="line"><span class="comment">// 判断属性是否是children属性</span></span><br><span class="line"><span class="keyword">const</span> isProperty = <span class="function"><span class="params">key</span> =&gt;</span></span><br><span class="line">  key !== <span class="string">"children"</span> &amp;&amp; !isEvent(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯里化函数，又返回一个函数，返回的函数用于判断新旧属性值是否相同</span></span><br><span class="line"><span class="keyword">const</span> isNew = <span class="function">(<span class="params">prev, next</span>) =&gt;</span> <span class="function"><span class="params">key</span> =&gt;</span></span><br><span class="line">  prev[key] !== next[key]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯里化函数，又返回一个函数，返回的函数用于判断新的props中是否还有key属性</span></span><br><span class="line"><span class="keyword">const</span> isGone = <span class="function">(<span class="params">prev, next</span>) =&gt;</span> <span class="function"><span class="params">key</span> =&gt;</span> !(key <span class="keyword">in</span> next)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateDom</span>(<span class="params">dom, prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//Remove old or changed event listeners</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(prevProps)</span><br><span class="line">    .filter(isEvent)</span><br><span class="line">    .filter(</span><br><span class="line">      key =&gt;</span><br><span class="line">        !(key <span class="keyword">in</span> nextProps) ||</span><br><span class="line">        isNew(prevProps, nextProps)(key)</span><br><span class="line">    )</span><br><span class="line">    .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> eventType = name</span><br><span class="line">        .toLowerCase()</span><br><span class="line">        .substring(<span class="number">2</span>)</span><br><span class="line">      dom.removeEventListener(</span><br><span class="line">        eventType,</span><br><span class="line">        prevProps[name]</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove old properties</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(prevProps)</span><br><span class="line">    .filter(isProperty)</span><br><span class="line">    .filter(isGone(prevProps, nextProps))</span><br><span class="line">    .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      dom[name] = <span class="string">""</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set new or changed properties</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(nextProps)</span><br><span class="line">    .filter(isProperty)</span><br><span class="line">    .filter(isNew(prevProps, nextProps))</span><br><span class="line">    .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      dom[name] = nextProps[name]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add event listeners</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(nextProps)</span><br><span class="line">    .filter(isEvent)</span><br><span class="line">    .filter(isNew(prevProps, nextProps))</span><br><span class="line">    .forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> eventType = name</span><br><span class="line">        .toLowerCase()</span><br><span class="line">        .substring(<span class="number">2</span>)</span><br><span class="line">      dom.addEventListener(</span><br><span class="line">        eventType,</span><br><span class="line">        nextProps[name]</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitRoot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 协调阶段会把所有需要删除的fiber节点放进deletions数组中</span></span><br><span class="line">  deletions.forEach(commitWork)</span><br><span class="line"><span class="comment">/* render开始阶段会把wipRoot赋值为</span></span><br><span class="line"><span class="comment">wipRoot = &#123;</span></span><br><span class="line"><span class="comment">    dom: container,</span></span><br><span class="line"><span class="comment">    props: &#123;</span></span><br><span class="line"><span class="comment">      children: [element],</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    alternate: currentRoot,</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">也就是整个app的根节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  commitWork(wipRoot.child)</span><br><span class="line"><span class="comment">// commitWork递归修改wipRoot之后，将当前currentRoot变为修改之后的wipRoot，wipRoot变为null</span></span><br><span class="line">  currentRoot = wipRoot</span><br><span class="line">  wipRoot = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归遍历以fiber节点为根节点的fiber树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一直递归向上找到第一个由dom节点的fiber节点</span></span><br><span class="line">  <span class="keyword">let</span> domParentFiber = fiber.parent</span><br><span class="line">  <span class="keyword">while</span> (!domParentFiber.dom) &#123;</span><br><span class="line">    domParentFiber = domParentFiber.parent</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// domParent指向距离自己最近的父级dom节点</span></span><br><span class="line">  <span class="keyword">const</span> domParent = domParentFiber.dom</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">      fiber.effectTag === <span class="string">"PLACEMENT"</span> &amp;&amp;</span><br><span class="line">    fiber.dom != <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 如果effectTag是PLACEMENT，同时需要添加的新节点dom不为空，表明需要添加新的节点</span></span><br><span class="line">    domParent.appendChild(fiber.dom)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    fiber.effectTag === <span class="string">"UPDATE"</span> &amp;&amp;</span><br><span class="line">    fiber.dom != <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 如果effectTag是UPDATE，表明要更新节点属性</span></span><br><span class="line">    updateDom(</span><br><span class="line">      fiber.dom,</span><br><span class="line">      fiber.alternate.props,</span><br><span class="line">      fiber.props</span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fiber.effectTag === <span class="string">"DELETION"</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果effectTag是UPDATE，删除节点</span></span><br><span class="line">    commitDeletion(fiber, domParent)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归更新fiber树</span></span><br><span class="line">  commitWork(fiber.child)</span><br><span class="line">  commitWork(fiber.sibling)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从domParent上删除fiber节点对应的dom</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitDeletion</span>(<span class="params">fiber, domParent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fiber.dom) &#123;</span><br><span class="line">    domParent.removeChild(fiber.dom)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    commitDeletion(fiber.child, domParent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render函数，element是一个对象，就是JSX编译出来的对象，有type属性，children属性，可以理解为VNode，但还不是fiber节点，container是一个dom节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, container</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 初始化wipRoot和deletions，并将nextUnitOfWork赋值为wipRoot</span></span><br><span class="line">  wipRoot = &#123;</span><br><span class="line">    dom: container,</span><br><span class="line">    props: &#123;</span><br><span class="line">      children: [element],</span><br><span class="line">    &#125;,</span><br><span class="line">    alternate: currentRoot,</span><br><span class="line">  &#125;</span><br><span class="line">  deletions = []</span><br><span class="line">  nextUnitOfWork = wipRoot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一个要处理的fiber节点</span></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 当前正在展示的页面对应的fiber树根节点</span></span><br><span class="line"><span class="keyword">let</span> currentRoot = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 正在处理的，或者说新的页面对应的fiber树根节点</span></span><br><span class="line"><span class="keyword">let</span> wipRoot = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 需要被删除的fiber节点的数组</span></span><br><span class="line"><span class="keyword">let</span> deletions = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLoop</span>(<span class="params">deadline</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> shouldYield = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 只要 nextUnitOfWork 不为 null 就处理新的 nextUnitOfWork</span></span><br><span class="line"><span class="comment">// performUnitOfWork 中会不断根据当前的fiber节点生成新的要处理的 nextUnitOfWork，直到整个wipRoot指向的fiber树都遍历完成</span></span><br><span class="line">  <span class="keyword">while</span> (nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class="line">    nextUnitOfWork = performUnitOfWork(</span><br><span class="line">      nextUnitOfWork</span><br><span class="line">    )</span><br><span class="line">    shouldYield = deadline.timeRemaining() &lt; <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!nextUnitOfWork &amp;&amp; wipRoot) &#123;</span><br><span class="line">    <span class="comment">// 如果 nextUnitOfWork 为空，说明fiber树已经生成结束，进入commit阶段</span></span><br><span class="line">    commitRoot()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestIdleCallback(workLoop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// requestIdleCallback 是WebAPI，意思是主线程空闲的时候执行传入的参数，参数是一个函数，函数的参数是距离下次主线程忙还有多久</span></span><br><span class="line">requestIdleCallback(workLoop)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理当前传入的fiber节点，处理过程中会生成下一个要处理的fiber节点，最后返回下一个要处理的fiber节点给 nextUnitOfWork</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performUnitOfWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isFunctionComponent =</span><br><span class="line">    fiber.type <span class="keyword">instanceof</span> <span class="built_in">Function</span></span><br><span class="line">  <span class="keyword">if</span> (isFunctionComponent) &#123;</span><br><span class="line">    <span class="comment">// 更新函数式组件</span></span><br><span class="line">    updateFunctionComponent(fiber)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 更新class组件</span></span><br><span class="line">    updateHostComponent(fiber)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (fiber.child) &#123;</span><br><span class="line">    <span class="comment">// 如果当前fiber节点有child节点，返回该节点作为下一个 performUnitOfWork 的节点</span></span><br><span class="line">    <span class="keyword">return</span> fiber.child</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果没有child，就找自己的下一个兄弟节点，如果还没有就找自己父节点的兄弟节点</span></span><br><span class="line">  <span class="keyword">let</span> nextFiber = fiber</span><br><span class="line">  <span class="keyword">while</span> (nextFiber) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextFiber.sibling) &#123;</span><br><span class="line">      <span class="keyword">return</span> nextFiber.sibling</span><br><span class="line">    &#125;</span><br><span class="line">    nextFiber = nextFiber.parent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前处理的fiber节点</span></span><br><span class="line"><span class="keyword">let</span> wipFiber = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> hookIndex = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新函数式组件，需要额外处理hooks</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateFunctionComponent</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  wipFiber = fiber</span><br><span class="line">  hookIndex = <span class="number">0</span></span><br><span class="line">  wipFiber.hooks = []</span><br><span class="line">  <span class="keyword">const</span> children = [fiber.type(fiber.props)]</span><br><span class="line">  reconcileChildren(fiber, children)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新class组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateHostComponent</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber.dom) &#123;</span><br><span class="line">    fiber.dom = createDom(fiber)</span><br><span class="line">  &#125;</span><br><span class="line">  reconcileChildren(fiber, fiber.props.children)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initial</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> oldHook =</span><br><span class="line">    wipFiber.alternate &amp;&amp;</span><br><span class="line">    wipFiber.alternate.hooks &amp;&amp;</span><br><span class="line">    wipFiber.alternate.hooks[hookIndex]</span><br><span class="line">  <span class="keyword">const</span> hook = &#123;</span><br><span class="line">    state: oldHook ? oldHook.state : initial,</span><br><span class="line">    queue: [],</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> actions = oldHook ? oldHook.queue : []</span><br><span class="line">  actions.forEach(<span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    hook.state = action(hook.state)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> setState = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    hook.queue.push(action)</span><br><span class="line">    wipRoot = &#123;</span><br><span class="line">      dom: currentRoot.dom,</span><br><span class="line">      props: currentRoot.props,</span><br><span class="line">      alternate: currentRoot,</span><br><span class="line">    &#125;</span><br><span class="line">    nextUnitOfWork = wipRoot</span><br><span class="line">    deletions = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  wipFiber.hooks.push(hook)</span><br><span class="line">  hookIndex++</span><br><span class="line">  <span class="keyword">return</span> [hook.state, setState]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较所有子节点，并根据elements在wipFiber下面生成新的fiber树</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildren</span>(<span class="params">wipFiber, elements</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> oldFiber =</span><br><span class="line">    wipFiber.alternate &amp;&amp; wipFiber.alternate.child</span><br><span class="line">  <span class="keyword">let</span> prevSibling = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (</span><br><span class="line">    index &lt; elements.length ||</span><br><span class="line">    oldFiber != <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = elements[index]</span><br><span class="line">    <span class="keyword">let</span> newFiber = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> sameType =</span><br><span class="line">      oldFiber &amp;&amp;</span><br><span class="line">      element &amp;&amp;</span><br><span class="line">      element.type == oldFiber.type</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sameType) &#123;</span><br><span class="line">      newFiber = &#123;</span><br><span class="line">        type: oldFiber.type,</span><br><span class="line">        props: element.props,</span><br><span class="line">        dom: oldFiber.dom,</span><br><span class="line">        parent: wipFiber,</span><br><span class="line">        alternate: oldFiber,</span><br><span class="line">        effectTag: <span class="string">"UPDATE"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (element &amp;&amp; !sameType) &#123;</span><br><span class="line">      newFiber = &#123;</span><br><span class="line">        type: element.type,</span><br><span class="line">        props: element.props,</span><br><span class="line">        dom: <span class="literal">null</span>,</span><br><span class="line">        parent: wipFiber,</span><br><span class="line">        alternate: <span class="literal">null</span>,</span><br><span class="line">        effectTag: <span class="string">"PLACEMENT"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldFiber &amp;&amp; !sameType) &#123;</span><br><span class="line">      oldFiber.effectTag = <span class="string">"DELETION"</span></span><br><span class="line">      deletions.push(oldFiber)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldFiber) &#123;</span><br><span class="line">      oldFiber = oldFiber.sibling</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      wipFiber.child = newFiber</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element) &#123;</span><br><span class="line">      prevSibling.sibling = newFiber</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prevSibling = newFiber</span><br><span class="line">    index++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Didact = &#123;</span><br><span class="line">  createElement,</span><br><span class="line">  render,</span><br><span class="line">  useState,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@jsx </span>Didact.createElement */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = Didact.useState(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1 onClick=&#123;() =&gt; setState(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">      Count: &#123;state&#125;</span><br><span class="line">    &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const element = &lt;Counter /</span>&gt;</span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">Didact.render(element, container)</span><br></pre></td></tr></table></figure><p>总的来说，整个流程是这个样子的：</p><ul><li>render函数传入根fiber节点以及最后整个dom树要挂在的dom节点</li><li>通过增量式的方式构建以wipRoot为根节点的fiber树，每个fiber节点有指向父节点，第一个子节点以及下一个兄弟节点的指针。增量式构建的方式是每次处理当前fiber也就是wipFiber时，会创建下一个要处理的fiber节点，这个节点可能是child，也可能是uncle节点</li><li>一旦某次处理某个fiber之后，返回的下一个要处理的节点为空，那就意味着要开始更新了，进入commit阶段</li><li>commit阶段会根据wipRoot为根节点的树一个个比较并为fiber节点创建对应的dom节点</li><li>最终把wipRoot赋值给currentRoot，然后wipRoot置为null，等待下一次render回到第二步</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在Github上看到一个很好的开源项目，是根据react的原理实现一个简单的react demo。这里只是对它的代码做自己的注释，加深自己的理解。这里是&lt;a href=&quot;https://github.com/pomber/didact/blob/master/didact.js&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;项目链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://sunra.top/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>万向锁</title>
    <link href="https://sunra.top/2022/09/05/gimbal-lock/"/>
    <id>https://sunra.top/2022/09/05/gimbal-lock/</id>
    <published>2022-09-05T13:20:57.000Z</published>
    <updated>2022-09-11T03:51:58.527Z</updated>
    
    <content type="html"><![CDATA[<p>这次一定要搞明白万向锁是个什么东西。本文会按照以下顺序慢慢展开：</p><ul><li>通过一个简单的可以实际操作的例子告诉大家，万向锁在我们生活中的表现</li><li>什么是万向锁</li><li>分别从矩阵和几何的角度讲一下万向锁存在的原理</li><li>万向锁到底有什么问题</li><li>为什么四元数可以解决万向锁的问题</li></ul><a id="more"></a><h2 id="万向锁的一个小实验"><a href="#万向锁的一个小实验" class="headerlink" title="万向锁的一个小实验"></a>万向锁的一个小实验</h2><p>可以拿出手机放在桌面上，屏幕朝上，手机的最长边垂直与桌子的边缘设置为X轴，这个时候屏幕的短边平行于桌子的边缘设置为Y轴，因此垂直与屏幕的向量为Z轴。</p><p>我们先绕手机的最长边X轴顺时针旋转30度，这个时候手机离开桌面，留下一个长边与桌子接触；然后再绕Y轴，也就是手机的短边旋转90度，让屏幕面与桌子的边缘平行；</p><p>再绕Z轴旋转10度，也就是绕垂直于屏幕的轴旋转10度，这个时候你会发现，绕Z轴旋转时，屏幕面还是平行桌子的边缘，而此时绕Z轴旋转的角度给手机姿态带来的影响和最开始旋转X轴给手机姿态带来的影响是一样的——都是使手机最终的姿态（已经绕Y轴旋转了90度使得手机屏幕与桌子边缘平行）为绕着垂直于屏幕的轴旋转一定的角度。</p><p>也就是说，你完全可以不用绕Z轴旋转，通过调节绕X轴旋转的角度数，使得最终手机的姿态和上述旋转过程达到的姿态一样。</p><p>或者说，一旦Y轴转了90度，你的手机平面一定在与桌面垂直的平面内，无论你一开始如何绕X轴转，以及最后如何绕Z轴转</p><h2 id="万向锁"><a href="#万向锁" class="headerlink" title="万向锁"></a>万向锁</h2><h3 id="什么是欧拉角"><a href="#什么是欧拉角" class="headerlink" title="什么是欧拉角"></a>什么是欧拉角</h3><p>在解释万向锁之前简单讲一下欧拉角。</p><p>这个概念我们其实都接触过，但是可能没有那么深入，所以在这里再解释一下：</p><p>莱昂哈德·欧拉用欧拉角来描述刚体在三维欧几里得空间的取向。对于任何参考系，一个刚体的取向，是依照顺序，从这参考系，做三个欧拉角的旋转而设定的。所以，刚体的取向可以用三个基本旋转矩阵来决定。换句话说，任何关于刚体旋转的旋转矩阵是由三个基本旋转矩阵复合而成的。</p><p>它分为静态的欧拉角和动态的欧拉角</p><p>1，静态：即绕世界坐标系三个轴的旋转，由于物体旋转过程中坐标轴保持静止，所以称为静态。</p><p>2，动态：即绕物体坐标系三个轴的旋转，由于物体旋转过程中坐标轴随着物体做相同的转动，所以称为动态。</p><h4 id="静态欧拉角"><a href="#静态欧拉角" class="headerlink" title="静态欧拉角"></a>静态欧拉角</h4><p>对于在三维空间里的一个参考系，任何坐标系的取向，都可以用三个欧拉角来表现。参考系（固定系）又称为实验室参考系，是静止不动的。而坐标系（固连系）则固定于刚体，随着刚体的旋转而旋转。</p><p>参阅右图。设定xyz-轴为参考系的参考轴。称xy-平面与XY-平面的相交为交点线，用英文字母（N）代表。zxz顺规的欧拉角可以静态地这样定义：</p><ul><li>$\alpha$（进动角）是x-轴与交点线的夹角，</li><li>$\beta$（章动角）是z-轴与Z-轴的夹角，</li><li>$\gamma$（自旋角）是交点线与X-轴的夹角。</li></ul><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1662679829/origin-of-ray/400px-Eulerangles.svg_ylhxly.png" alt></p><p>对于夹角的顺序和标记，夹角的两个轴的指定，并没有任何常规。科学家对此从未达成共识。每当用到欧拉角时，我们必须明确的表示出夹角的顺序，指定其参考轴。</p><p>角值范围</p><p>$\alpha$、$\gamma$值分别从0至$2\pi$ 弧度。<br>$\beta$值从0至$\pi$弧度。<br>对应于每一个取向，设定的一组欧拉角都是独特唯一的；除了某些例外：</p><ul><li>两组欧拉角的$\alpha$，一个是0，一个是$2\pi$，而$\beta$与$\gamma$分别相等，则此两组欧拉角都描述同样的取向。</li><li>两组欧拉角的$\gamma$，一个是0，一个是$2\pi$，而$\alpha$与$\beta$分别相等，则此两组欧拉角都描述同样的取向。</li></ul><p>前面提到，设定刚体取向的旋转矩阵{\displaystyle [\mathbf {R} ]}[\mathbf{R}]是由三个基本旋转矩阵合成的：</p><script type="math/tex; mode=display">[R] = \begin{bmatrix}cos\gamma & sin\gamma & 0 \\-sin\gamma & cos\gamma & 0 \\0 & 0 & 1\end{bmatrix}\begin{bmatrix}1 & 0 & 0 \\0 & cos\beta & sin\beta \\0 & -sin\beta & cos\beta\end{bmatrix}\begin{bmatrix}cos\alpha & sin\alpha & 0 \\-sin\alpha & cos\alpha & 0 \\0 & 0 & 1\end{bmatrix}</script><p>经过运算之后的结果为</p><script type="math/tex; mode=display">[R] = \begin{bmatrix}cos\alpha cos\gamma - cos\beta sin\alpha sin\gamma & sin\alpha cos\gamma + cos\beta cos\alpha sin\gamma & sin\beta sin\gamma \\-cos\alpha sin\gamma - cos\beta sin\alpha cos\gamma & -sin\alpha sin\gamma + cos\beta cos\alpha cos\gamma & sin\beta cos\gamma \\sin\beta sin\alpha & -sin\beta cos\alpha & cos\beta\end{bmatrix}</script><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1662682019/origin-of-ray/200px-Euler2a_wnywfm.gif" alt></p><p>在经典力学里，时常用zxz顺规来设定欧拉角；照着第二个转动轴的轴名，简称为x顺规。另外，还有别种欧拉角组。合法的欧拉角组中，唯一的限制是，任何两个连续的旋转，必须绕着不同的转动轴旋转。因此，一共有12种顺规。例如，y顺规，第二个转动轴是y-轴，时常用在量子力学、核子物理学、粒子物理学。另外，还有一种顺规，xyz顺规，是用在航空航天工程学；参阅泰特-布莱恩角</p><h4 id="动态欧拉角"><a href="#动态欧拉角" class="headerlink" title="动态欧拉角"></a>动态欧拉角</h4><p>我们也可以给予欧拉角两种不同的动态定义。一种是绕着固定于刚体的坐标轴的三个旋转的复合；另外一种是绕着实验室参考轴的三个旋转的复合。用动态的定义，我们能更了解，欧拉角在物理上的含义与应用。特别注意，以下的描述, XYZ坐标轴是旋转的刚体坐标轴；而xyz坐标轴是静止不动的实验室参考轴。</p><ul><li><p>绕着XYZ坐标轴旋转：最初，两个坐标系统xyz与XYZ的坐标轴都是重叠着的。开始先绕着Z-轴旋转$\alpha$,角值。然后，绕着X-轴旋转$\beta$,角值。最后，绕着Z-轴作角值$\gamma$,的旋转。</p></li><li><p>绕着xyz坐标轴旋转：最初，两个坐标系统xyz与XYZ的坐标轴都是重叠着的。开始先绕着z-轴旋转$\gamma$,角值。然后，绕着x-轴旋转$\beta$,角值。最后，绕着z-轴作角值$\alpha$,的旋转。</p></li></ul><h3 id="什么是万向锁"><a href="#什么是万向锁" class="headerlink" title="什么是万向锁"></a>什么是万向锁</h3><p>我们了解了欧拉角分为静态欧拉角和动态欧拉角，我们在继续看看什么是万向锁。</p><p>首先我们先直观地理解一点，万向锁只会产生在动态欧拉角，也就是我们是绕物体自身的坐标系旋转的，物体自身的坐标系会随着物体的旋转一起旋转</p><p>通过上面那个小实验，我们可以大致这样理解，所以万向锁之所以叫做锁，是因为有两个维度的旋转效果重叠了，即旋转X轴的效果和完全可以通过旋转Z轴来实现，也就是丢失了一个维度.</p><p>但是从另一个角度讲，这个“锁”的意思并不是说欧拉角有什么不能够表示出来的角度，而是<strong>如果你的章动角是90度的话你最终的结果一定是在某个平面上的</strong>。</p><h2 id="万向锁的原理"><a href="#万向锁的原理" class="headerlink" title="万向锁的原理"></a>万向锁的原理</h2><h3 id="从几何角度讲"><a href="#从几何角度讲" class="headerlink" title="从几何角度讲"></a>从几何角度讲</h3><p>我们首先看一下下面这个图，这个图的坐标系既是物体自身坐标轴，和世界坐标轴完全一样</p><p><img src="https://i.loli.net/2021/07/21/w1UdLtmlVe6Wrzb.png" alt></p><p>我们首先绕x轴旋转一个角度，没有什么问题</p><p>然后我们再绕y轴旋转90度</p><p><img src="https://i.loli.net/2021/07/21/s9PDTQXd25x3cpA.png" alt></p><p>这个时候可以看到z轴变成了原来x轴的方向，这个时候我们绕物体自身的z轴转，从世界坐标上来看，就是绕初始状态的x轴在转，也就是说从世界坐标系上看来，一开始绕物体自身的x轴，和最后绕物体自身的z轴转，都是一样的，都是绕世界坐标系的x轴转</p><h3 id="从矩阵角度讲"><a href="#从矩阵角度讲" class="headerlink" title="从矩阵角度讲"></a>从矩阵角度讲</h3><p>上述过程用矩阵的乘法形式写出来就是</p><script type="math/tex; mode=display">R_z(\beta)R_y(\pi / 2)R_x(\alpha) \\=\begin{bmatrix}cos\beta & -sin\beta & 0 \\sin\beta & cos\beta & 0 \\0 & 0 & 1\end{bmatrix}\begin{bmatrix}0 & 0 & 1 \\0 & 1 & 0 \\-1 & 0 & 0\end{bmatrix}\begin{bmatrix}1 & 0 & 0 \\0 & cos\alpha & -sin\alpha \\0 & sin\alpha & cos\alpha\end{bmatrix} \\= \begin{bmatrix}0 & sin(\alpha - \beta) & cos(\alpha - \beta) \\0 & con(\alpha - \beta) & -sin(\alpha - \beta) \\-1 & 0 & 0\end{bmatrix} \\= \begin{bmatrix}0 & 0 & 1 \\0 & 1 & 0 \\-1 & 0 & 0\end{bmatrix}\begin{bmatrix}1 & 0 & 0 \\0 & cos(\alpha - \beta) & -sin(\alpha - \beta) \\0 & sin(\alpha - \beta) & cos(\alpha - \beta)\end{bmatrix} \\= R_y(\pi /2)R_x(\alpha - \beta)</script><h2 id="万向锁到底有什么问题"><a href="#万向锁到底有什么问题" class="headerlink" title="万向锁到底有什么问题"></a>万向锁到底有什么问题</h2><p>所以万向锁并不是不能表示空间中的某个角位移，而是因为万向锁，角位移之间的插值变得不如意，那么万向锁是怎么出现的呢？第二个旋转的角度为90度的时候，使用第一个轴与第三个轴相重合，这是从感性的角度去认识这个现象，如果从数学的角度去解释，那就是cos90=0</p><p>在游戏中，当角色旋转的动画触发时，角色就会做一系列连续的旋转变换，每一个变换都要用一组欧拉角来表示，但是不可能把每一个方位的欧拉角都存储起来，因此动画师定义了一系列关键帧，指定关键帧处角色的方位（用一组欧拉角描述），然后计算机根据时间t对这几组欧拉角进行插值，得到一系列欧拉角。</p><p>如果pitch不是±90°，就不会出现万向锁现象，插值后的一系列欧拉角完全可以刻画出我们所期望的角色旋转路径。</p><p>如果某个关键帧的pitch即绕第二个轴的旋转为90°，就会遇到万向锁，这时手机只能在水平面内旋转，如果动画师指定下一个关键帧手机的方位不是立起来的，没有任何问题，但如果指定的下一个关键帧的方位是立起来的，会出现什么情况呢？</p><h2 id="四元数如何解决万向锁问题"><a href="#四元数如何解决万向锁问题" class="headerlink" title="四元数如何解决万向锁问题"></a>四元数如何解决万向锁问题</h2><h3 id="换种方式表示旋转"><a href="#换种方式表示旋转" class="headerlink" title="换种方式表示旋转"></a>换种方式表示旋转</h3><p>要解决这个问题，首先要问一下，万向锁问题存在的前提条件</p><p>我们前面知道了，万向锁只存在于动态欧拉角，即物体绕自身坐标系旋转，且自身坐标系会随着自身的旋转一起旋转，它表现为Y轴旋转90度的话，X轴和Z轴的旋转效果是相通的。</p><p>换个角度想，其实就是在欧拉角下，同样的效果有多种不同的旋转方式，导致插值的时侯结果不确定。</p><p>那要解决这个问题，其实思路也比较明确，就是换个表示方法，在这个新的表示方法中，一个旋转结果的表示方法是唯一的。</p><p>我们给出另一种表述方向的方法：轴角表示(Axis-Angle-Representation)。跟欧拉角不同的是，我们这次不再采取多次旋转的方式来找到目标方向，而是找到一根旋转轴，只通过绕这根轴旋转一次就可以得到目标方向。这样就不会产生问题了吗？是的，证明方法很简单，首先以目标矩阵原点为一角，三轴为三边建立一个立方体，这个立方体中通过原点的对角线就是我们要找的旋转轴，显然，这个旋转轴是唯一的，而我们知道，绕一个旋转轴旋转不同角度，对应的方向也是不同的（角度范围 (−π,π]），由此可见，空间中任一位置的轴角表示是唯一的。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1662779292/origin-of-ray/v2-1b11f12de3b8309a49e7ea32a990d266_1440w_oublus.png" alt></p><p>一般来说，轴角表示方向时，会出现4个参数，其中3个用于表示旋转轴，1个用于表示旋转角大小。而如果我们规定了表示旋转轴的向量为单位向量 e ，考虑到 $\sqrt{x^2+y^2+z^2}=1$ ，我们就可以用两个参数表示出旋转轴，总共只需要三个参数，跟欧拉角一样多。旋转向量我们可以用 $\bm{\theta} = \theta e$ 表示，其中 e 是单位向量。顺便提一句，这里的旋转轴我们称为欧拉轴(Euler axis)，这里的旋转向量我们称为欧拉向量(Euler vector)。</p><p>从矩阵角度考虑这个东西的存在也是可以的，矩阵中有个相似矩阵和特征向量的概念，大家可以理解这个旋转轴就是欧拉角旋转矩阵的特征向量，这个旋转轴的旋转角度就是该特征向量的特征值。</p><h3 id="那么四元数是什么呢？"><a href="#那么四元数是什么呢？" class="headerlink" title="那么四元数是什么呢？"></a>那么四元数是什么呢？</h3><p>四元数是复数，更具体地说四元数是存在三个虚部的复数。q=w+ix+jy+kz，其中i,j,k是虚数单位，满足 i^2=j^2=k^2 = -1，且 i⋅j=k，j⋅i=k 。</p><script type="math/tex; mode=display">q_1 + q_2 = (w_1 + w_2) + i(x_1 + x_2) + j(y_1 + y_2) + k(z_1 +z_2) = [(w_1 + 2_2), (v_1 +v_2)] \\q_1 \cdot q_2 = (w_1w_2 -x_1x_2 - y_1y_2 - z_1z_2) + \\i(w_1x_2 + x_1w_2 + y_1z_2 - z1y_2) + \\j(w_1y_2 - x_1z_2 + y_1w_2 + z_1x_2) + \\k(w_1z_2 + x_1y_2 -y_zx_2 + z_1w_2)</script><p>将四元数用于计算轴角表示运算时，我们通常写成向量形式(vector representation) ,$q=\begin{bmatrix}<br>w, \vec v \end{bmatrix}=\begin{bmatrix} w, \begin{pmatrix} x \ y \ z \end{pmatrix} \end{bmatrix}$，为了表达清晰和计算方便，我们将w,x,y,z的取值定位 $w^2+x^2+y^2+z^2 = 1$ ，并称之为单位四元数，在方向计算时单位四元数中w,x,y,z分饰的角色我们后面会解释。此时，复数乘法可表示为向量形式</p><script type="math/tex; mode=display">q_1 \cdot q_2 = [w_1, \vec v_1] \cdot [w_2, \vec v_2] = [w_1w_2 - v_1v_2, v1 \times v_2 + w_1 \cdot v_2 + w_2 \cdot v_1]</script><p>或者我们也可以写成矩阵的形式</p><script type="math/tex; mode=display">q_1q_2 = \begin{bmatrix}w_1 & -x_1 & -y_1 & -z_1 \\x_1 & w_1 & -z_1 & y_1 \\y_1 & z_1 & w_1 & -x_1 \\z_1 & -y_1 & x_1 & w_1\end{bmatrix}\begin{bmatrix}w_2 \\ x_2 \\ y_2 \\ z_2\end{bmatrix}</script><p>观察此式，我们发现两个四元数相乘，需要存储8个单位的数据，也就是说，每个参与运算的四元数只要存储4个单位数据即可。此外还需要几个特殊的性质：</p><ul><li>四元数模 $||q|| = \sqrt{w^2 + x^2 + y^2 + z^2}$</li><li>四元数共轭 $q^{<em>} = (w + ix + jy + kz)^{</em>}= w -ix -jy - kz$</li><li>共轭的向量形式 $q^{<em>} = (\begin{bmatrix} w &amp; \vec v \end{bmatrix})^{</em>} = \begin{bmatrix} w &amp; -\vec v \end{bmatrix}$</li><li>四元数的倒数：$q \cdot q^{-1} = q^{-1} \cdot q = 1$</li><li>共轭与倒数的关系：$q^{-1}=\frac{q^<em>}{w^2+x^2+y^2+z^2}$,对于单位四元数 $q^{</em>} = q{-1}$</li><li>四元数运算同时满足结合律和分配律，不符合交换律</li></ul><p>了解了上面的计算法则，我们就可以利用四元数来计算方向变换过程了。还记得我们之前说过计算时四元数我们用向量形式表示，且保证它是单位四元数吗？其实四元数的向量形式我们还可以进一步改写为极形式(polar representation), $q = |q|[cos\theta, \vec{n}\cdot sin\theta]$</p><p>其中 ‖q‖ 代表了四元数的模，单位四元数模为1，而 θ 是四元数表示的旋转过程的半角大小，也就是说(2θ) 就是旋转角大小， n 则是表示旋转轴方向的单位向量。用这种表示方法，四元数即可表示任意轴角表达的方向变换。</p><p>先将原向量坐标表示为四元数 $p=[0,\vec{v}]$ ，将旋转角度及旋转轴表示为单位四元数 q ，旋转后的向量坐标可通过 $r = q\cdot p\cdot q^*$ 或 $r = q \cdot p\cdot q^{-1}$ 计算得出</p><h3 id="为什么引入四元数"><a href="#为什么引入四元数" class="headerlink" title="为什么引入四元数"></a>为什么引入四元数</h3><p>其实四元数就是为了更好地表示旋转轴和旋转角度而已，旋转轴是个三维向量，加上旋转角度就变成四维了。而选择四元数来表示是因为它的一些特性。</p><p>先说结论，四元数的引用是为了减少计算量和计算时存储占用的空间。</p><p>但是，如果你足够细心，一定可以发现两个四元数相乘的过程其实是一个4×4矩阵与一个4×1矩阵相乘的过程，而四元数计算一次变换需要两次这个过程，其中包括24次加法运算和32次乘法运算，反观欧拉角的矩阵变换只要进行一次3×3矩阵和3×1矩阵的乘法运算，其中包括6次加法运算和9次乘法运算，运算量明显是四元数更大一些。如果你再细心一些可以发现，四元数运算时虽然有个4×4矩阵参与运算，但是矩阵中的每一项都是已经存储过的单位数据，而参与欧拉角运算的3×3矩阵则要通过另外已存储的单位数据进行的16次乘法运算，4次加法运算以及4次符号改变运算来求出，不过即使加上这些运算过程，矩阵运算也只要25次乘法运算，10次加法运算以及4次符号改变运算，运算量上来说，欧拉角的矩阵运算依然比四元数运算要有优势。但事实上，我们一般遇到的运动学问题很少会有只做一次方向转换的情况出现，对于复杂的系统和机器人来说，我们往往会面对数量庞大的转变方向过程。这种情况下四元数的优势就体现出来了，我们考虑多次变换的四元数运算(利用上面极坐标形式)：</p><script type="math/tex; mode=display">R = R_1R_2...R_{n-1}R_n = (q_n(q_{n-1}...(q_2(q_1pq^*_1)q^*_2)...q^*_{n-1})q^*_n)</script><p>利用结合律：</p><script type="math/tex; mode=display">R = R_1R_2...R_{n-1}R_n = (q_nq_{n-1}...q_2q_1)p(q^*_1q^*_2...q^*_{n-1}q^*_n）</script><p>考虑四元数的共轭$(q_aq_b)^<em> = q^</em>_bq^*_a$</p><script type="math/tex; mode=display">R = R_1R_2...R_{n-1}R_n = (q_nq_{n-1}...q_2q_1)p(q_nq_{n-1}...q_2q_1)^*</script><p>可以发现，原向量 ppp 左右两侧括号里的运算结果是一对共轭四元数，也就是说可以利用3次易号运算代替n次四元数相乘运算，大大减少了计算量。</p><blockquote><p>最后稍微提一嘴，很多接触这个问题的人都是游戏开发者，可能会有疑问，为什么在Unity的Inspector中没有这个问题，这个大家可以去试试，Unity的Inspector中Y轴不是物体自身坐标轴旋转，所以万向锁就被解了，具体Unity内部的旋转是怎么回事可以看下一篇博客，这里挖个坑</p></blockquote><p>参考文章：</p><p><a href="https://zh.m.wikipedia.org/zh/%E6%AC%A7%E6%8B%89%E8%A7%92" rel="external nofollow noopener noreferrer" target="_blank">欧拉角 - 维基百科</a></p><p><a href="https://www.zhihu.com/question/47736315/answer/236808639" rel="external nofollow noopener noreferrer" target="_blank">如何通俗地解释欧拉角？之后为何要引入四元数？</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次一定要搞明白万向锁是个什么东西。本文会按照以下顺序慢慢展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过一个简单的可以实际操作的例子告诉大家，万向锁在我们生活中的表现&lt;/li&gt;
&lt;li&gt;什么是万向锁&lt;/li&gt;
&lt;li&gt;分别从矩阵和几何的角度讲一下万向锁存在的原理&lt;/li&gt;
&lt;li&gt;万向锁到底有什么问题&lt;/li&gt;
&lt;li&gt;为什么四元数可以解决万向锁的问题&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
</feed>
