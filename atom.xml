<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>一起探索互联网的秘密</subtitle>
  <link href="https://sunra.top/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/"/>
  <updated>2023-02-11T10:37:40.228Z</updated>
  <id>https://sunra.top/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10倍程序员工作法</title>
    <link href="https://sunra.top/2023/02/11/10-times-programmer-work/"/>
    <id>https://sunra.top/2023/02/11/10-times-programmer-work/</id>
    <published>2023-02-11T10:01:01.000Z</published>
    <updated>2023-02-11T10:37:40.228Z</updated>
    
    <content type="html"><![CDATA[<p>最近chatgpt大火，让很多人觉得很多工作包括程序员会被取代。其他岗位我不太了解，但是对于程序员这个职业，我认为但是其实这说明，大家对于程序员在处理的问题的认知是程序员处理的是某一个独立的问题上，或者某个独立的很具体的问题上，当然这和程序员面试题有关，毕竟程序员面试题其实就是这种，面试题，说起来就是做卷子，做卷子你怎么可能有背靠互联网的机器人比，而那些不好衡量的看起来是空话的东西，在一次面试中，人还真不一定表现的比背后是所有面试经验帖的机器人高明。</p><p>但是其实这已经是忘记了程序员是为什么而存在的。程序员掌握的技术叫做信息技术，目的是为了快速的收集和处理信息，那么为什么这个技术重要呢？了解这个问题，其实也能明白AI到底给我们带来了什么。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实说起来，现在算是第四次工业革命了:</p><ol><li>第一次是蒸汽时代，人类掌握了巨大的物理上的力量，机械赋予了人类更加强大的改造物理世界的力量</li><li>第二次是电气时代，算是第一次的一种延续，让人们可以更加快速地改造世界，同时加快了人们物质上的合作效率</li><li>第三次是信息时代，也就是我们大部分人经历的时代。很多人可能不理解信息为什么重要，毕竟这东西虚无飘渺，且互联网上看起来信息爆炸，根本不值钱。但其实，对于社会来说，信息就是最值钱的东西，因为，钱其实就是信息，甚至整个人类社会存在的基础也是信息，就像《人类简史》中所说，没有一个共同的想象，人类最大只能维持成一个个小部落，就像动物一样，正是一个个共同想象，让人类产生了合作。而市场的作用就是交流信息，没有任何一个人可以处理人类社会中所有的信息，就算他能接触到所有信息。再比如奢侈品，比如玉石，钻石，黄金，你凭什么说他们之间的价格不同，就是信息，他的物理本质没有贵贱之分，所以没必要问奢侈品为什么贵，没有原因。</li><li>第四次就是人工智能了，算是第三次的延续。为什么会有这个东西呢，就是因为信息爆炸了，太多了，人处理不过来，处理信息的速度太低了。在过去充当人工智能的岗位有很多，比如低端咨询岗位，他们其实就是帮忙整合信息的，因为信息太多了，比如买房子，除非你最近想买房子，不然你不可能每天去收集，去处理，所以就催生了专门处理这些信息的人呢。</li></ol><p>所以如果说第三次工业革命是让人们可以更快的收集和处理信息了，那么第四次，chatgpt包括人工智能在我个人看来，是给了每个人更强的工具去筛选和处理信息。这看起来没有本质变化，还是在提高处理信息的速度，但是别忘了，任何复杂问题都是简单问题耦合在一起造成的，量变产生质变。当问题的数量足够多，参与的人足够多，其实就不是一个问题了。</p><p>复杂度就是最大的问题，资本一切提高效率的努力，认识世界规律的努力，管理学等等，都是为了降低复杂度，当然整体效率提高不代表个体幸福，因为整体想要高效，其中的每个个体都不能有个性。反过来说，如果一个工具能提高足够多的效率，就是工业革命了。</p><p>说这些，就是为了表达一个观点，程序员处理的事情其实是降低信息复杂度，把信息的分析和处理交给机器，首先要做的事程序员本身理解这种信息，然后转化为程序，所以程序员的工作价值主要并不在于编程，如果不能帮助处理信息，降低复杂度，把复杂度交给机器，再高明的技术都没用，毕竟决定科技发展方向的从来都是资本。</p><p>所以，提高程序员工作效率的关注点不应该只放在如何更快的敲代码上，当然除了极少部分为程序员做工具的人。</p><h1 id="10x程序员工作法"><a href="#10x程序员工作法" class="headerlink" title="10x程序员工作法"></a>10x程序员工作法</h1><h2 id="思考框架"><a href="#思考框架" class="headerlink" title="思考框架"></a>思考框架</h2><p><strong>本质复杂度和偶然复杂度</strong><br>软件行业里有一本名著叫《人月神话》，其中提到两个非常重要的概念：本质复杂度（Essential Complexity）和偶然复杂度（Accident Complexity）。<br>简单来说，本质复杂度就是解决一个问题时，无论怎么做都必须要做的事，而偶然复杂度是因为选用的做事方法不当，而导致要多做的事。<br>比如你要做一个网站，网站的内容是你无论如何都要写的，这就是“本质复杂度”。而如果今天你还在用汇编写一个网站，效率是不可能高起来的，因为你选错了工具。这类选错方法或工具而引发的问题就是“偶然复杂度”。<br><strong>最佳实践的四大原则</strong></p><ul><li>以终为始；</li><li>任务分解；</li><li>沟通反馈；</li><li>自动化。</li></ul><p><strong>思考框架：</strong></p><ul><li>Where are we?（我们现在在哪？）</li><li>Where are we going?（我们要到哪儿去？）</li><li>How can we get there?（我们如何到达那里？）</li></ul><p><strong>四大原则与思考框架之间的联系</strong><br>在实际的工作中，这个思考框架会帮助我更好地了解自己的工作。比如，当一个产品经理给我交代一个要开发的功能特性时，我通常会问他这样一些问题：</p><ul><li>为什么要做这个特性，它会给用户带来怎样的价值？</li><li>什么样的用户会用到这个特性，他们在什么场景下使用，他们又会怎样使用它？</li><li>达成这个目的是否有其它手段？是不是一定要开发一个系统？</li><li>这个特性上线之后，怎么衡量它的有效性？</li></ul><p>如果产品经理能够回答好这些问题，说明他基本上已经把这个工作想得比较清楚了，这个时候，我才会放心地去了解后续的细节。<br><strong>以终为始</strong>就是在工作的一开始就确定好自己的目标。<strong>我们需要看到的是真正的目标，而不是把别人交代给我们的工作当作目标</strong>。你可以看出这个原则是在帮助我们回答思考框架中，Where are we going?（我们要到哪儿去？）这个问题。<br><strong>任务分解</strong>是将大目标拆分成一个一个可行的执行任务，工作分解得越细致，我们便越能更好地掌控工作，它是帮助我们回答思维框架中，How can we get there?（我们如何到达那里？）的问题。<br>如果说前两个原则是要在动手之前做的分析，那后面两个原则就是在通往目标的道路上，为我们保驾护航，因为在实际工作中，我们少不了与人和机器打交道。<br><strong>沟通反馈</strong>是为了疏通与其他人交互的渠道。一方面，我们保证信息能够传达出去，减少因为理解偏差造成的工作疏漏；另一方面，也要保证我们能够准确接收外部信息，以免因为自我感觉良好，阻碍了进步。<br><strong>自动化</strong>就是将繁琐的工作通过自动化的方式交给机器执行，这是我们程序员本职工作的一部分，我们擅长的是为其他人打造自动化的服务，但自己的工作却应用得不够，这也是我们工作中最值得优化的部分。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1667091571184-7dee658b-ff37-4377-b884-6d18b4d80736.png#averageHue=%23d1c4bc&amp;clientId=ua2b346c7-a2c6-4&amp;from=paste&amp;height=457&amp;id=u7555d25b&amp;name=image.png&amp;originHeight=914&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=219078&amp;status=done&amp;style=none&amp;taskId=u15625136-1a3f-42cc-a456-1f9d81a9a26&amp;title=&amp;width=1142" alt="image.png"></p><h2 id="以始为终"><a href="#以始为终" class="headerlink" title="以始为终"></a>以始为终</h2><p><strong>以始为终：如何让努力不白费</strong><br>我们日常面对的真实工作场景：许多人都是刚刚听到别人要求做的一个功能，就开始脑补接下来的一切。导致的结果，就是付出的努力毫无意义。<br>“以终为始”是一种反直觉的思维方式，是大多数人不具备的。所以，日常生活中，我们看到很多有趣的现象。比如，大学毕业时，有很多人想考研，如果你问他为什么要考研，得到的理由通常是为了找个好工作。但考研真的能帮他找个好工作吗？不一定，因为找工作和考研根本就不是同一棵技能树。如果真的是想找个好工作，那你就应该了解工作的要求是什么，怎样才能掌握工作要求的技能。<br>“设计登录功能”的例子，对比“以终为始”的思维，你也许会替我的同事抱不平，他们或许也有“以终为始”的思路，只不过，他们的“终”和我这个客户的“终”不一样罢了。这就要说到<strong>做软件，本质上是在构建一个“集体想象”。</strong><br><strong>想象的共同体</strong><br>我们这些做软件的人其实就是一个想象的共同体，这个“集体想象”就是我们要做的软件，任何想象都需要一个载体将其展现出来，我们编写软件的过程就是将这个“集体想象”落实的过程。<br>既然是“集体想象”，那么在载体将想象呈现出来之前，我们的想象很难统一起来，都或多或少存在差异。<br>所以，<strong>任何事物都要经过两次创造：一次是在头脑中的创造，也就是智力上的或者第一次创造（Mental/First Creation），然后才是付诸实践，也就是实际的构建或第二次创造（Physical/Second Creation）</strong>。<br>再回到前面“设计一个登录功能”的例子上，我的同事们在构建的其实是他们自己的想象，而不是我们共同的想象。<br>这其中最大的一个区别就在于，没有人会为他们自己的想象买单的。所以说，<strong>他们看到的“终”不是真正的终，只是一个自我的“终”，至于看到什么样的“终”，这取决于每个人的见识</strong>。<br>对做软件的人来说，我们应该把“终”定位成做一个对用户有价值的软件，能够为别人带来价值，自己的价值才能体现出来。<br><strong>规划和发现</strong><br>有了“以终为始”的思维，我们考虑的是别人会怎么用我们的平台。我们设计的方式是，用户到我们的网站，阅读相关文档，然后参考文档一步一步照着做。这其中的一个关键点是：文档，特别是《起步走》的文档，这是用户接触我们这个平台的第一步，决定了他对我们产品的第一印象。<br>所以，我们决定从写《起步走》这个文档开始，这个文档描绘了用户怎样一步一步使用我们的开发平台，完成第一个“Hello World”级别的应用。请注意，这个时候，我们一行代码都没有写。<br>人类是一个擅长脑补的群体，一旦有人看到了这个文档，他就已经可以构想出这个平台已经存在的样子，进而给出各种各样的反馈：“我认为这个地方可以这样做”“我觉得那个地方可以改改”。<br><strong>所有这些反馈都是真实的，因为他们已经“看到了”一个真实的东西。正是这些真实的反馈，让我们逐渐地锁定了目标。</strong>之后，我们才开始动手写代码。<br>“以终为始”的方式，不仅仅可以帮我们规划工作，还可以帮我们发现工作中的问题。<br>亚马逊 CTO 介绍亚马逊是如何开发一项产品的，简单来说，他们采用向后工作的方法，开发一项产品的顺序为：</p><ol><li>写新闻稿；</li><li>写 FAQ（常见问题解答）；</li><li>写用户文档；</li><li>写代码。</li></ol><p><strong>理解的鸿沟</strong><br>我们讨论的主题是“以终为始”。那我们第一个问题就是，“终”到底是什么？在前面这个例子里，“终”就是“完成”，可是，小李认为他的活已经做完了，老张却认为他没做完。<br>弥合差异的方式有很多，有一个最佳实践，它的名字叫 <strong>DoD（Definition of Done，完成的定义）</strong>，从这个概念的名字便不难看出，它就是为了解决软件开发中常见的“完成”问题而生的。<br>怎样让 DoD 更好地发挥作用。</p><ul><li><strong>DoD 是一个清单，清单是由一个个的检查项组成的，用来检查我们的工作完成情况</strong>。DoD 的检查项，就是我们开发产品所需的一系列有价值的活动。比如：编写代码、编写测试代码、通过测试人员验收等。什么样的活动是有价值的，也许每个团队的认识是不同的。但如果你的团队认为除了功能代码，其他都没价值，也许这是个信号，说明你的团队整体上是缺乏职业素养的，在这样的团队工作，前景并不乐观。</li><li><strong>DoD 的检查项应该是实际可检查的</strong>。你说代码写好了，代码在哪里；你说测试覆盖率达标了，怎么看到；你说你功能做好了，演示一下。</li><li><strong>DoD 是团队成员间彼此汇报的一种机制</strong>。别把“汇报”想复杂了，最简单的汇报就是说一句“这个功能做完了”。当我们有了 DoD，做事只有两种状态，即“做完”和“没做完”。在团队协作中，我们经常会听到有人说“这个事做完了 80%”，对不起，那叫没做完，根本没有 80% 做完的说法。</li></ul><p>如果你可以放开思路，会发现 DoD 的思维在工作中用途非常广泛。比如，当我们需要和其他团队合作开发一个接口时，我们都知道第一步就是要把接口定义下来。<br><strong>在协作中一旦确立好 DoD，我们甚至可以通过流程把它固化下来，从而更高效高质地完成工作。</strong>当然，我们在工作生活中难免会有一些临时的工作，它们没有复杂到需要一个流程，但是也可以用 DoD 思维来高效地解决。比如：经常会有人过来，让我帮忙做些事。运用 DoD 的思维，我首先会问他我具体要做哪些事，确认好细节（相当于定义好“检查项”），然后我就知道，这个忙我能帮到什么程度。我请别人帮忙的时候，也会很清楚告诉他，哪些事是需要他做的，尽量减少不必要的误解。<br>DoD 是一个思维模式，是一种尽可能消除不确定性，达成共识的方式。我们本着“以终为始”的方式做事情，DoD 让我们能够在一开始就把“终”清晰地定义出来。<br>人与人协作中，经常会出现各种问题，根本原因就是，有太多因为理解差异造成的误解，进而浪费了大量的时间，而 DoD 就是一种将容易产生歧义的理念落到实处的方法。<br><strong>在做任何事之前，先定义完成的标准。</strong><br><strong>接到需求任务，首先要做什么？</strong><br>在软件开发中，程序员做什么一般都由需求来定义。我们都知道，需求是软件开发的一个重要组成部分，但你可能并没有仔细想过，不同的需求描述方式，可能会影响我们程序员对需求的理解。<br><strong>因为信息的传递是会衰减的，你不可能把你理解的信息 100% 传递给另外一个人</strong>，而这中间，如何传递，也就是如何描述将直接决定衰减的比例。<br>很多公司的软件开发模式是基于功能列表的，这个列表“规定”了程序员要做的功能，各个组从产品经理那里领来开发列表，然后“照单抓药”开始写代码。但是，通常这种功能列表只是一些简单的描述，你并不能看到全局。<br>很多团队的一个状态就是，程序员们都知道要开发的功能是什么，但这个功能是谁在什么样的场景下使用的，很多人却回答不上来。如果你去问他为什么要开发这个功能，他通常会说：这是功能列表里规定的。<br><strong>这种功能列表式的需求描述方式，将一个完整的需求敲成了碎片。</strong> 只有所有功能全部开发完成，对接在一起的时候，才是“破镜重圆”的时刻。<br>根据这种基于功能列表的需求描述，每个组在安排工作的时候，都会按照自己的理解进行功能排列。所以，当你的组完成了一个功能时，这个功能却可能上不了线，因为你还要依赖于其他组的工作，而这个组不巧，却刚好把相关的功能开发排在了后面。这还只是两个组之间有依赖的情况，如果需要多个组协同，可以想象，状况会多么糟糕。<br>因此，一些新的需求描述方式也就应运而生，这其中，用户故事（User Story）是我最喜欢的一种方式。它是站在用户的角度来描述了一个用户希望得到的功能，关注用户在系统中完成一个动作需要经过怎样的路径。既然它是“故事”，它就需要是一个完整的场景，可以讲述出来。<br><strong>如果你的团队采用用户故事的格式进行需求描述固然好，如果不能，在功能列表中，补充验收标准也会极大程度地改善双方协作的效率。</strong><br>验收标准所给出实现细节应该是业务上的，程序员在这种问题上思考才是真正意义上的浪费时间，我们的发挥空间应该是在技术实现上。<br>虽然你名义上是程序员，但当拿到一个需求的时候，你要做的事不是立即动手写代码，而是扮演产品经理的角色，分析需求，圈定任务范围。相信我，事前分析绝对比你拿一个写好的系统给老板，而他却告诉你这不是他想要的，好太多了。<br>如果今天的内容你只能记住一件事，那请记住：<strong>在做任何需求或任务之前，先定好验收标准</strong>。<br><strong>精益创业</strong><br>精益创业提供给我们的是一个做产品的思考框架，我们能够接触到的大多数产品都可以放在这个框架内思考。<br>有了框架结构，我们的生活就简单了，当产品经理要做一个新产品或是产品的一个新特性，我们就可以用精益创业的这几个概念来检验一下产品经理是否想清楚了。<br>比如，<strong>你要做这个产品特性，你要验证的东西是什么呢？他要验证的目标是否有数据可以度量呢？要解决的这个问题是不是当前最重要的事情，是否还有其他更重要的问题呢？</strong><br>如果上面的问题都得到肯定的答复，那么验证这个目标是否有更简单的解决方案，是不是一定要通过开发一个产品特性来实现呢？<br><strong>扩大工作上下文</strong><br>程序员总喜欢用技术去解决一切问题，但很多令人寝食难安的问题其实根本不是问题。之所以找不出更简单的解决方案，很多时候原因在于程序员被自己的思考局限住了。<br><strong>不同角色工作真正的差异在于上下文的差异。在一个局部上下文难以解决的问题，换到另外一个上下文甚至是可以不解决的。所以说无论单点有多努力也只是局部优化，很难达到最优的效果。</strong><br>想把工作做好，就需要不断扩大自己工作的上下文，多了解一下别人的工作逻辑是什么样的，认识软件开发的全生命周期。<br>扩大自己的上下文，除了能对自己当前的工作效率提高有帮助，对自己的职业生涯也是有好处的。随着你看到的世界越来越宽广，得到的机会也就越来越多。<br>如果今天的内容你只记住一件事，那请记住：<strong>扩大自己工作的上下文，别把自己局限在一个“程序员”的角色上。</strong><br><strong>通往结果的路径</strong><br>关于“以终为始”，我们前面讲的内容一直是看到结果，结果是重要的。然而，通向结果的路径才是更重要的。<br>对比我们的工作，多数情况下，即便目标清晰，路径却是模糊的。所以，不同的人有不同的处理方式。有些人是走到哪算哪，然后再看；有些人则是先推演一下路径，看看能走到什么程度。在我们做软件的过程中，这两种路径所带来的差异，已经在前面的小故事里体现出来了。一种是前期其乐融融，后期手忙脚乱；一种是前面思前想后，后面四平八稳。我个人是推崇后一种做法的。<br>这个思想并不难理解，我们可以很容易地将它运用在工作中的很多方面。比如：</p><ul><li>在做一个产品之前，先来推演一下这个产品如何推广，通过什么途径推广给什么样的人；</li><li>在做技术改进之前，先来考虑一下上线是怎样一个过程，为可能出现的问题准备预案；</li><li>在设计一个产品特性之前，先来考虑数据由谁提供，完整的流程是什么样的。</li></ul><p><strong>让自己的工作成果可以被数字化</strong><br><strong>迭代0</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1667388901396-30a76c14-7687-4f11-b4ff-3a85fb08be48.png#averageHue=%23fefefe&amp;clientId=u6d7a8eac-a85f-4&amp;from=paste&amp;height=772&amp;id=u1823cf52&amp;name=image.png&amp;originHeight=1544&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=406622&amp;status=done&amp;style=none&amp;taskId=ud56aabb3-3838-4bd0-8df9-a31822c2010&amp;title=&amp;width=1142" alt="image.png"><br>对比这个清单，大多数新项目都在一项或几项上准备得不够充分。即便你做的不是一个从头开始的项目，对照这个清单，也会发现项目在某些项上的欠缺，可以有针对性地做一些补充。如果今天的内容你只记住一件事，那么请记住：设计你的迭代 0 清单，给自己的项目做体检。</p><h2 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h2><p>好了，和大家分享这两个例子只是为了热热身，说明人类解决问题的方案是差不多的。当一个复杂问题摆在面前时，我们解决问题的一个主要思路是分而治之。<br>一个大问题，我们都很难给出答案，但回答小问题却是我们擅长的。所以，当我们学会将问题分解，就相当于朝着问题的解决迈进了一大步。<br><strong>那么，用这种思路解决问题的难点是什么呢？给出一个可执行的分解。</strong><br>不过，在实际工作中，大多数人都高估了自己可执行粒度，低估任务分解的程度。换句话说，如果你没做过任务分解的练习，你分解出来的大部分任务，粒度都会偏大。<br>只有能把任务拆分得非常小，你才能对自己的执行能力有一个更清楚地认识，真正的高手都是有很强的分解能力。这个差别就相当于，同样观察一个物品，你用的是眼睛，而高手用的是显微镜。在你看来，高手全是微操作。<br><strong>如今软件行业都在提倡拥抱变化，而任务分解是我们拥抱变化的前提。</strong><br><strong>实际上，很多人之所以写不好测试，主要是因为他不懂任务分解。</strong><br>小事反馈周期短，而大事反馈周期长。小事容易做好，而大事难度则大得多。所以，以这个标准来看，底层的测试才更容易写好。另外，因为涉及到的模块过多，任何一个模块做了调整，都有可能破坏高层测试，所以，高层测试通常是相对比较脆弱的。<br><strong>测试驱动开发TDD</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1668079382524-b25c0e83-faac-4d58-89d5-ea262f5837fc.png#averageHue=%23fdfbfa&amp;clientId=u4873b967-c53e-4&amp;from=paste&amp;height=652&amp;id=u38c9e075&amp;name=image.png&amp;originHeight=1304&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=307176&amp;status=done&amp;style=none&amp;taskId=u17a7ae23-433b-4796-86df-c9166cc5f79&amp;title=&amp;width=1142" alt="image.png"><br>在测试驱动开发中，重构与测试是相辅相成的：没有测试，你只能是提心吊胆地重构；没有重构，代码的混乱程度是逐步增加的，测试也会变得越来越不好写。因为重构和测试的互相配合，它会驱动着你把代码写得越来越好。这是对“驱动”一词最粗浅的理解。<br><strong>测试驱动设计</strong><br>许多人抗拒测试有两个主要原因：<br>第一，测试需要“额外”的工作量。这里我特意把额外加上引号，因为，你也许本能上认为，测试是额外的工作，但实际上，测试也应该是程序员工作的一部分，这在上一篇文章中我已经讲过。<br>第二，很多人会觉得代码太多不好测。之所以这些人认为代码不好测，其中暗含了一个假设：代码已经写好了，然后，再写测试来测它。<br>如果我们把思路反过来，我有一个测试，怎么写代码能通过它。<strong>一旦你先思考测试，设计思路就完全变了：我的代码怎么写才是能测试的，也就是说，我们要编写具有可测试性的代码。</strong>用这个角度，测试是不是就变得简单了呢？<br>我们举个写代码中最常见的问题：static 方法<br>Mock 对象的做法面对 static 时行不通了。因为它跳出了对象体系，<strong>static 方法是没法继承的，也就是说，没法用一系列面向对象的手法处理它</strong>。<br>你没有办法使用 Mock 对象，也就不好设置对应的方法返回值。要想让这个方法返回相应的值，你必须打开这个 static 方法，了解它的实现细节，精心地按照里面的路径，小心翼翼地设置对应的参数，才有可能让它给出一个你预期的结果。更糟糕的是，因为这个方法是别人维护的，有一天他心血来潮修改了其中的实现，你小心翼翼设置的参数就崩溃了。而要重新进行设置的话，你只能把代码重读一遍。<br><strong>如此一来，你的工作就退回到原始的状态。更重要的是，它并不是你应该关注的重点，这也不会增加你的 KPI。</strong><br>显然，你跑偏了。讨论到这里你已经知道了 static 方法对测试而言，并不友好。所以，如果你要想让你的代码更可测，<strong>一个好的解决方案是尽量不写 static 方法</strong>。<br>static 是一个方便但邪恶的东西。所以，要限制它的使用。除非你的 static 方法是不涉及任何状态而且行为简单，比如，判断字符串是否为空。否则，不要写 static 方法。你看出来了，这样的 static 方法更适合做库函数。所以，我们日常写应用时，能不用尽量不用。<br>如果你在自己的代码遇到第三方的 static 方法怎么办，很简单，将第三方代码包装一下，让你的业务代码面对的都是你自己的封装就好了。<br><strong>如何做好任务分解</strong><br>最后，我要特别强调一点，所有分解出来的任务，都是独立的。也就是说，<strong>每做完一个任务，代码都是可以提交的</strong>。只有这样，我们才可能做到真正意义上的小步提交。<br>如果今天的内容你只能记住一件事，那请记住：<strong>按照完整实现一个需求的顺序去安排分解出来的任务。</strong><br><strong>为什么你的测试不够好？</strong><br>我看到过很多团队在测试上出现过各种各样的问题，比如：</p><ul><li>测试不稳定，这次能过，下次过不了；</li><li>有时候是一个测试要测的东西很简单，测试周边的依赖很多，搭建环境就需要很长的时间；</li><li>这个测试要运行，必须等到另外一个测试运行结束；……</li></ul><p>如果你也在工作中遇到过类似的问题，那你理解的写测试和我理解的写测试可能不是一回事，那问题出在哪呢？为什么你的测试不够好呢？主要是因为这些测试不够简单。<br><strong>只有将复杂的测试拆分成简单的测试，测试才有可能做好。</strong><br>测试为什么要简单呢？有一个很有趣的逻辑，不知道你想没想过，测试的作用是什么？显然，它是用来保证代码的正确性。随之而来的一个问题是，谁来保证测试的正确性？<br>既然无法用写程序的方式保证测试的正确性，我们只有一个办法：<strong>把测试写简单，简单到一目了然，不需要证明它的正确性。</strong>所以，如果你见到哪个测试写得很复杂，它一定不是一个好的测试。<br><strong>测试坏味道</strong><br><strong>很多人总想在一个测试里做很多的事情，比如，出现了几个不同方法的调用。请问，你的代码到底是在测试谁呢？</strong>这个测试一旦出错，就需要把所有相关的几个方法都查看一遍，这无疑是增加了工作的复杂度。<br>另一个典型“坏味道”的高发区是在断言上，请记住，<strong>测试一定要有断言</strong>。<br>还有一种常见的“坏味道”：复杂。最典型的场景是，<strong>当你看到测试代码里出现各种判断和循环语句，基本上这个测试就有问题了</strong>。举个例子，测试一个函数，你的断言写在一堆 if 语句中，美其名曰，根据条件执行。还是前面提到的那个观点，你怎么保证这个测试函数写的是对的？除非你用调试的手段，否则，你都无法判断你的条件分支是否执行到了。你或许会疑问，我有一大堆不同的数据要测，不用循环不用判断，我怎么办呢？你真正应该做的是，多写几个测试，每个测试覆盖一种场景。<br><strong>一段旅程（A-TRIP）</strong><br>怎么样的测试算是好的测试呢？<br>有人做了一个总结 A-TRIP，这是五个单词的缩写，分别是</p><ul><li><strong>Automatic，自动化；</strong>把测试尽可能交给机器执行，人工参与的部分越少越好。</li><li><strong>Thorough，全面的；</strong>应该尽可能用测试覆盖各种场景。理解这一点有两个角度。一个是在写代码之前，要考虑各种场景：正常的、异常的、各种边界条件；另一个角度是，写完代码之后，我们要看测试是否覆盖了所有的代码和所有的分支，这就是各种测试覆盖率工具发挥作用的场景了。</li><li><strong>Repeatable，可重复的；</strong>这里面有两个角度：某一个测试反复运行，结果应该是一样的，这说的是，每一个测试本身都不应该依赖于任何不在控制之下的环境；还有一个角度，一堆测试反复运行，结果应该是一样的。这说明测试和测试之间没有任何依赖，这也是我们接下来要说的测试的另外一个特点。</li><li><strong>Independent，独立的；</strong>测试和测试之间不应该有任何依赖，什么叫有依赖？比如，如果测试依赖于外部数据库或是第三方服务，测试 A 在运行时在数据库里写了一些值，测试 B 要用到数据库里的这些值，测试 B 必须在测试 A 之后运行，这就叫有依赖。</li><li><strong>Professional，专业的。</strong></li></ul><p><strong>如何砍需求？</strong><br>以我们用了好多次的登录为例，如果我问你这个需求是什么，大多数人的第一直觉还是用户名密码登录。<br>基本上，闯入你脑海的需求描述是主题（epic），在敏捷开发中，有人称之为主用户故事（master story）。<br>如果你对需求的管理粒度就是主题，那好多事情就没法谈了。比如，时间紧迫的时候，我想砍需求，你问产品经理，我不做登录行不行，你就等着被拒绝吧。<br>但是，如果你说时间比较紧，我能不能把登录验证码放到后面做，或是邮件地址验证的功能放到后面，这种建议产品经理是可以和你谈的。<br>这其中的差别就在于，后者将需求分解了。<br><strong>需求要分解</strong><br><strong>“主题”只是帮你记住大方向，真正用来进行需求管理，还是要靠进一步分解出来的需求</strong>。这里的讨论，我们会继续沿用前面专栏文章中已经介绍过的需求描述方式：用户故事，它将是我们这里讨论需求管理的基本单位。<br><strong>评价用户故事有一个“ INVEST 原则”</strong>，这是六个单词的缩写，分别是：</p><ul><li>Independent，独立的。一个用户故事应该完成一个独立的功能，尽可能不依赖于其它用户故事，因为彼此依赖的用户故事会让管理优先级、预估工作量都变得更加困难。如果真的有依赖，一种好的做法是，将依赖部分拆出来，重新调整。</li><li>Negotiable，可协商的。有事大家商量是一起工作的前提，我们无法保证所有的细节都能 100% 落实到用户故事里，这个时候最好的办法是大家商量。它也是满足其它评判标准的前提，就像前面提到的，一个用户故事不独立，需要分解，这也需要大家一起商量的。</li><li>Valuable，有价值的。一个用户故事都应该有其自身价值，这一项应该最容易理解，没有价值的事不做。但正如我们一直在说的那样，做任何一个事情之前，先问问价值所在。</li><li>Estimatable，可估算的。我们会利用用户故事估算的结果安排后续的工作计划。不能估算的用户故事，要么是因为有很多不确定的因素，要么是因为需求还是太大，这样的故事还没有到一个能开发的状态，还需要产品经理进一步分析。</li><li>Small，小。步子大了，不行。不能在一定时间内完成的用户故事只应该有一个结果，拆分。小的用户故事才方便调度，才好安排工作。Testable，可测试的。不能测试谁知道你做得对不对。这个是我们在前面已经强调过的内容，也就是验收标准，你得知道怎样才算是工作完成。</li></ul><p>第一个关注点是可协商。作为实现者，我们要问问题。只是被动接受的程序员，价值就少了一半，只要你开始发问，你就会发现很多写需求的人没有想清楚的地方。<br>在我的职业生涯中，我无数次将需求挡了回去，不是我不合作，而是我不想做一些糊涂的需求。我之所以能问出问题，一方面是出于常识，另一方面就是这里说的用户故事是否有价值。用户故事，之所以是故事，就是要讲，要沟通。<br>还有一个更重要的关注点，也是这个模块的核心：小。无论是独立性也好，还是可估算的也罢，其前提都是小。只有当用户故事够小了，我们后续的腾挪空间才会大。那接下来就是一个重要的问题，怎么才算小？这就牵扯到用户故事另一个重要方面：估算。<br>通常情况下，是双方对需求的理解出现了偏差，这时候负责用户故事编写的同事就要站出来，帮助大家澄清需求。所以，一般来说，估算的过程也是大家加深对需求理解的过程。估算还有另外一个重要的作用：发现特别大的用户故事。一般而言，一个用户故事应该在一个迭代内完成。<br>许多团队真正的困境在于，在开发过程中缺少需求分解的环节。在这种情况下，需求的管理基本单位就是一个主题，既然是基本单位，那就是一个不可分割的整体。团队就被生生绑死在一个巨大的需求上，没有回旋的余地。如果团队可以将需求分解，需求的基本单位就会缩小，每个人看到的就不再是“铁板”一块，才能更方便地进行调整，才会有比较大的腾挪空间。<br><strong>需求管理</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1669688919178-f48fc53b-2a0f-432e-997b-35ebe0be2265.png#averageHue=%23fefefc&amp;clientId=u496d162f-a4d1-4&amp;from=paste&amp;height=653&amp;id=ue8a35552&amp;name=image.png&amp;originHeight=1306&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=281982&amp;status=done&amp;style=none&amp;taskId=u917ce79b-6cbc-429d-bef9-141401c5034&amp;title=&amp;width=1142" alt="image.png"><br>用几个程序员生活中的例子帮你理解一下。让系统不能正常运行的线上故障，就属于重要且紧急事情，不赶紧解决，就影响公司的正常运营。团队对系统升级改造就属于重要不紧急：改造好，性能也好，可维护性也得到提升；不改造，一时半会也能用。一些临时任务都属于紧急不重要，而刷朋友圈则属于既不紧急也不重要。<br>按照时间管理的理念，重要且紧急的事情要立即做。重要但不紧急的事情应该是我们重点投入精力的地方。紧急但不重要的事情，可以委托别人做。不重要不紧急的事情，尽量少做。<strong>这个矩阵带给我们思维上最大的改变是，让人意识到事情和事情不是等价的。如果不把精力放在重要的事情上，到最后可能都变成紧急的事情</strong>。<br>把这个思路带回到我们现实的需求管理中，你会发现，<strong>其实团队面临的各种需求所采用的优先级排序方式，基本上都是按照紧急程度排列的</strong>，但它们是否真的重要呢？<br>如果你把这个问题抛给需求的提出者，我几乎可以肯定，他们给你的答案是，他们提出的需求就是重要的。一种可能是，他们也分不清重要和紧急的差别，正如有时候我们也糊涂一样。<br>试想，两个产品经理出现在你面前，一个告诉你，公司要拓展新方向，这个功能要做；另一个却说，公司要进一步盈利，那个功能必须做。在你看来，他们两个说得都对，听上去都挺重要的。但骨感的现实是，你把两件事都接下来，等着你的是累死都完不成的任务。这个时候，我们能做的是什么呢？跳出这个上下文，到更大的上下文中。<strong>你判断不了哪个需求更重要，就请更高一级的老板来判断。</strong><br>再发散讲几句，为人做事同样要不断扩展自己的上下文，这也就是我们常说的涨见识。很多所谓的人生难题不过是因为见识有限造成的。比如，如果你觉得公司内总有人跟你比技术，莫不如把眼光放得长远一些，把自己放在全行业的水平上去比较。因为你是为自己的职业生涯在工作，而不是一个公司。<br>需求分解之后，最重要的是，排列需求的优先级。优先级的排列方式有很多，我们可以借鉴时间管理的方法，把事情按照重要和紧急的维度进行划分，得到了四个象限。我们要尽可能把精力放在重要的事情上，而不是把紧急的事情当成优先级排序的方式。<br><strong>需求分解成一个个小块，其实也分解了原本合一的上下文</strong>。如果想要有效地管理需求，尤其是确定事情的重要程度，<strong>一种方式是找回丢失的上下文</strong>。如果我们自己无法判断上下文，一种好的办法是，<strong>引入外部更大的上下文</strong>。<br><strong>如何用最小的代价做产品？</strong><br>我们的直觉当然是把所有的东西都实现了再去检验，但是世界不会停下来等着我们。事实也一次又一次教育我们，“憋大招”的瀑布式软件开发已经成为不合时宜的“老古董”。那我们的理想怎么实现呢？唯有分解。<br>我们前面提到，精益创业就是通过不断地尝试在真实世界中验证产品想法，其中一个重要的实践是最小可行产品（Minimum Viable Product，MVP），我们这次就把这个实践展开讨论一下。<br>先说“最小”。这里的“最小”，指的是最小的代价。怎么叫最小的代价，就是能不做的事情就不做，能简化的事情就简化。<br>首先，我们必须清楚一件事，我们要做的是验证一个想法的可行性，甚至不是为了开发一个软件，开发软件只是一种验证手段。<br>很多程序员都会有一个认识上的误区，容易把解决方案当成问题。我们开发软件的目的是为了解决问题，如果不写软件就把问题解决了，岂不是更好。<br>第一步，我们要验证这样一个想法是否可行。我们做了一个产品文档，就好像我们已经有了这个产品一样，让负责销售的同事拿着这个文档给客户讲讲，看看客户对这个想法的反映。在这个过程中，我们验证了基本的想法，已有设备进行物联网化改造的需求存在，客户看到了这样的一个东西，各种各样的想法和要求就会冒出来。此外，我们还获得了一个额外的收获，我们知道了客户对于这样一个产品能够接受的价格区间，这可以帮助团队给产品进行适当的定价。验证了方向上的想法，我们开始进入到具体的产品设计阶段。这个阶段我们想验证的是，我们给出的产品设计用户是否可以接受。于是，我们决定把这个产品的交互做出来。得益于原型工具的快速发展，我们用一个原型工具做出了相对完整的用户界面，而且把各种交互流都做出来了。在用户看来，这几乎就是完整的软件了。<br>说完了”最小”，我们再来看”可行”。<strong>可行是要找到一条路径，给用户一个完整的体验。做程序员出身的人，对软件系统的认识总是一个模块一个模块的，相对比较弱的方面是缺少一个完整的图景</strong>。但从产品可行的角度，我们需要转换一下思路，不是一个模块做得有多完整，而一条用户路径是否通畅<br>当时间有限时，我们需要学会找到一条可行的路径，在完整用户体验和完整系统之间，找到一个平衡。<br>逐步上线了一个功能相对完整的 P2P 平台。在这个过程中，我们每个阶段都会上线新功能，从用户可见的角度，他看到的始终是一个完整的平台，其中的变化只有站在内部实现者的角度才能看得清楚。(比如还款功能，虽然是完整的生命周期中的一个，但是第一个月没有用户会用到，所以排期可以靠后一点)<br>想要在实践中运用好最小可行产品的理念，就是要用最小的代价找到一条可行的路径。<strong>最小的代价就是能不做的事就不做，能简化的事情就简化。</strong><br>程序员通常愿意用自己的代码解决问题，而写代码通常是代价非常高的解决方案，它应该成为最后的产品解决方案。可行的路径，是一条完整的用户体验路径，至少在用户眼中是这样的。<br>我们常常会想给客户一个完整的系统，但在时间有限的情况下，我们必须学会分解。<br>如果今天的内容你只能记住一件事，那请记住：做好产品开发，最可行的方式是采用 MVP。</p><p>在这个模块中，我们学习到了一些最佳实践：<br>测试金字塔<br>— 行业中测试组合的最佳实践。<br>— 多写单元测试是关键。<br>测试驱动开发<br>— 测试驱动开发的节奏是：红——绿——重构，重构是测试驱动开发区别于测试先行的关键。<br>— 有人把测试驱动开发理解成测试驱动设计，它给行业带来的思维改变是，编写可测的代码。<br>艾森豪威尔矩阵（Eisenhower Matrix）<br>— 将事情按照重要和紧急进行划分。<br>— 重要且紧急的事情要立即做。重要但不紧急的事情应该是我们重点投入精力的地方。紧急但不重要的事情，可以委托别人做。不重要不紧急的事情，尽量少做。<br>最小可行产品<br>— “刚刚好”满足客户需求的产品。<br>— 在实践中，要用最小的代价找到一条可行的路径。<br>另外，我还提到了一些可以直接在工作中应用的做法和评判标准：</p><ul><li>尽量不写 static 方法；</li><li>主分支开发模型是一种更好的开发分支模型；</li><li>好的用户故事应该符合 INVEST 原则；</li><li>估算是一个加深对需求理解的过程，好的估算是以任务分解为基础的；</li><li>好的测试应该符合 A-TRIP。</li></ul><p>我也带你学习了一些重要的思想，帮你更好地改善自己的开发工作：</p><ul><li>分而治之，是人类解决问题的基本手段；</li><li>软件变更成本，它会随着时间和开发阶段逐步增加；</li><li>测试框架把自动化测试作为一种最佳实践引入到开发过程中，使得测试动作可以通过标准化的手段固定下来；</li><li>极限编程之所以叫“极限”，它背后的理念就是把好的实践推向极限；</li><li>大师级程序员的工作秘笈是任务分解，分解到可以进行的微操作；按照完整实现一个需求的顺序安排开发任务。</li></ul><h2 id="沟通反馈"><a href="#沟通反馈" class="headerlink" title="沟通反馈"></a>沟通反馈</h2><p>我们努力地学习各种知识，为的就是更好地理解这个世界的运作方式，而沟通反馈，就是我们与真实世界互动的最好方式。<br>当几个人一起讨论问题时，别人往往刚开了个头，他就认为自己已经理解了别人的想法，然后开始表达自己的观点。信息都不全，何谈解码。所以，开发团队的讨论中常常出现一个人高谈阔论，却离题万里的情况。我们要想让自己更好地工作生活，就必须接纳真实世界的反馈，而接纳真实世界的反馈，一是需要我们打开自己的接收器，把信号接纳进来，让反馈进来，这是解码的前提；二是扩展见识，提升自己解码器的效果，更好地理解别人要表达的内容到底是什么。说了编码器和解码器可能出现的问题，我们再来看另外一个可能造成影响的问题：编解码器算法，也就是怎么协调沟通双方更有效地进行沟通。<br>人生不如意之事，十有八九，之所以很多人有如此多的不如意，很大原因在于我们对真实世界有着很多不切实际的幻想，美好的愿望并不能驱动这个世界，在软件开发中也是如此。虽然人和人生活在一个世界中，但对世界的理解却是千差万别的。<br>改善编解码，需要从几个角度着手，分别是：编码器，让信息能输出更准确；解码器，减少信号过滤，改善解码能力；还有编解码算法，也就是各种来自行业的“最佳实践”，协调沟通的双方。<br>用业务的语言去写代码，一来是可读性高，二来是能够识别代码中不变和易变的部分，更好地实践设计模式，做到领域驱动设计<br><strong>轻量级沟通</strong><br>开会是为了解决问题，但真实情况却是开了会又没有解决多少问题，这真是一个奇特的矛盾。回想一下，你参加过的会议里面，有没有效果特别好的呢？在我职业生涯中，凡是效果特别好的会议，基本上都是用来做信息同步的。比如，领导宣布一个事情，这种会议几乎不会浪费时间。宣布消息，大家收到消息，结束。那效果不好的会议是什么样呢？几乎都是那些讨论会，你一言我一语，每个会几乎无一例外，都有几个擅长打岔的，这个会基本上都会跑偏，时间就会这样一分一秒地流逝了。<br><strong>改善会议的第一个行动项是，减少参与讨论的人数</strong>。有人会说，我这个讨论有好几个议题，每个议题要不同的人参与，那你要做的是，分别找这几个人专门讨论，而不是把大家放到一起。相比于会议的形式，面对面沟通因为注意力有限，参与的人数不可能太多。也因为参与的人数相对少一些，每个人的投入也会更多一些。<br><strong>第二个行动项是，如果你要讨论，找人面对面沟通。</strong>如果有一个问题需要讨论，我要做的是，分别找到相关人针对关心的主题进行讨论，然后，我把讨论的结果汇总再去征求大家意见。如果大家达成一致了，我才会选择开会。这个时候，<strong>开会的目的不再是讨论，而是信息同步</strong>：我准备这么干了，相关各方已经同意了，知会大家一下，结束。<br>多尝试用可视化的方式进行沟通。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1669902990925-8a11e407-496a-4218-b2ad-770dd8554be1.png#averageHue=%23edeeee&amp;clientId=u496d162f-a4d1-4&amp;from=paste&amp;height=1168&amp;id=ud3c871f5&amp;name=image.png&amp;originHeight=2336&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=888329&amp;status=done&amp;style=none&amp;taskId=udd7fd2a8-ea08-46cb-99da-c2180938caf&amp;title=&amp;width=960" alt="image.png"><br>持续集成的诞生，就是人们尝试缩短集成周期的结果。为什么要缩短周期呢？因为我们希望尽早得到反馈，知道自己的工作结果是否有效。所以，想要做好持续集成，就需要顺应<strong>持续集成的本质：尽快得到工作反馈</strong>。<br>由此，我们便得到<strong>持续集成的关键点，你只要记住一句话，快速反馈</strong>。<br>快速反馈，这句分成两个部分，快速和反馈，这也就引出了<strong>持续集成的两个重要目标：怎样快速地得到反馈，以及什么样的反馈是有效的</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670545816448-b0372507-d4ed-4351-8b1b-278b49a0797a.png#averageHue=%23fdfdfd&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=595&amp;id=u656beaf1&amp;name=image.png&amp;originHeight=1190&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244883&amp;status=done&amp;style=none&amp;taskId=uf9db3aa5-fa20-4d6f-8e7e-2c758351358&amp;title=&amp;width=1142" alt="image.png"><br>什么是复盘？复盘，原本是一个围棋术语，就是对弈者下完一盘棋之后，重新把对弈过程摆一遍，看看哪些地方下得好，哪些下得不好，哪些地方可以有不同甚至是更好的下法等等。<strong>这种把过程还原，进行研讨与分析的方式，就是复盘</strong>。<br>现如今，复盘的概念已经被人用到了很多方面，比如，股市的复盘、企业管理的复盘，它也成为了许多人最重要的工具，帮助个体和企业不断地提升。这其中最有名的当属联想的创始人柳传志老爷子，他甚至把“复盘”写到了联想的核心价值观里。为什么复盘这么好用呢？在我看来有一个重要的原因，在于<strong>客体化</strong>。俗话说，当局者迷，旁观者清。以我们的软件开发作为例子，在解决问题的时候，我们的注意力更多是在解决问题本身上，而很少会想这个问题是怎么引起的。<strong>当你复盘时，你会站在另外一个视角，去思考引起这个问题的原因。这个时候，你不再是当事者，而变成了旁观者。</strong>你观察原来那件事的发生过程，就好像是别人在做的一样。你由一个主观的视角，变成了一个客观的视角。用别人的视角看问题，这就是客体化。<br>你的团队如果能一下洞见到根因固然好，如果不能，那么最好多问一些为什么。具体怎么问，有一个常见的做法是：5 个为什么（5 Whys）。这种做法是丰田集团的创始人丰田佐吉提出的，后来随着丰田生产方式而广为人知。为什么要多问几个为什么？因为初始的提问，你能得到的只是表面原因，只有多问几个为什么，你才有可能找到根本原因。我给你举个例子。服务器经常返回 504，那我们可以采用“5 个为什么”的方式来问一下。</p><ol><li>为什么会出现 504 呢？因为服务器处理时间比较长，超时了。</li><li>为什么会超时呢？因为服务器查询后面的 Redis 卡住了。</li><li>为什么访问 Redis 会卡住呢？因为另外一个更新 Redis 的服务删除了大批量的数据，然后，重新插入，服务器阻塞了。</li><li>为什么它要大批量的删除数据重新插入呢？因为更新算法设计得不合理。</li><li>为什么一个设计得不合理的算法就能上线呢？因为这个设计没有按照流程进行评审。</li></ol><p>多走近用户，才能明白自己的代码用来做什么了，也能在讨论需求时更加明白哪些需求是有必要的<br>作为一个程序员，克服技术难题是我们工作的一个重要组成部分，所以，一旦有困难我们会下意识地把自己投入进去。但这真的是最好的做法吗？并不是，<strong>不是所有的问题，都是值得解决的技术难题。</strong><br>写程序有一个重要的原则叫 Fail Fast，这是什么意思呢？就是如果遇到问题，尽早报错。<br>如果配置文件缺少了一个重要参数，比如，缺少了数据库最大连接数，你打算怎么处理？很多人会选择给一个缺省值，这就不是 Fail Fast 的做法。既然是重要参数，少了就报错，这才叫 Fail Fast。<br>其实，<strong>Fail Fast 也有一些反直觉的味道，很多人以构建健壮系统为由，兼容了很多奇怪的问题，而不是把它暴露出来。反而会把系统中的 Bug 隐藏起来</strong>。我们都知道，靠 debug 来定位问题是最为费时费力的一种做法。所以，别怕系统有问题，有问题就早点报出来。</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>在我看来，做有价值的事是重要的，这里面的有价值，不仅仅是“做”了什么，通过“不做”节省时间和成本也是有价值的。我的两个同事阻止了客户的浪费，所以，我将这个项目视为成功。<br>对于开发来说，也遵循同样的道理。程序员这个群体技术能力实在太强，做一个技术方案简直是太符合直觉的做法，我们就是忠实地把一个个需求做出来，把“全世界”都自动化了。<strong>但事实上，这个世界太多的浪费就是做了不该做的东西。</strong>在我们的专栏里，我反复地说，我们要多问问题，目的就是为了不做那些不该做的事。<br><strong>小心 NIH 综合症</strong><br>你可以从需求的角度判断哪些工作是可以不做的，但我们也要防止程序员自己“加戏”，我再给你讲一个技术人员普遍存在的问题：NIH 综合症（Not Invented Here Syndrome）。<br>比如，这种乱象在前端领域也出现了，各种各样的框架，让很多前端程序员哭诉，实在学不动了。再比如，我曾经面试过一个接触 Go 比较早的程序员，他就是恨不得把所有框架都自己写。<br>说了这么多，无非就是想说明一件事，<strong>写代码之前，先问问自己真的要做吗？能不做就不做，直到你有了足够的理由去做。</strong>对应到 Larry Wall 的说法，你要懒惰，花大力气去规避精力消耗。<br>一般来说，在构建持续交付的基础设施时，会有下面几个不同的环境。</p><ol><li>持续集成环境，持续集成是持续交付的前提，这个过程主要是执行基本的检查，打出一个可以发布的包。</li><li>测试环境（Test），这个环境往往是单机的，主要负责功能验证，这里运行的测试基本上都是验收测试级别的，而一般把单元测试和集成测试等执行比较快的测试放到持续集成环境中执行。</li><li>预生产环境（Staging），这个环境通常与生产环境配置是相同的，比如，负载均衡，集群之类的都要有，只是机器数量上会少一些，主要负责验证部署环境，比如，可以用来发现由多机并发带来的一些问题。</li><li>生产环境（Production），这就是真实的线上环境了。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670548946042-82f31fce-91f5-49a5-9e76-a8981ec76fe9.png#averageHue=%23f8f7f7&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=551&amp;id=u8619be65&amp;name=image.png&amp;originHeight=1102&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=232031&amp;status=done&amp;style=none&amp;taskId=u4bf30aa6-a00e-448d-b42f-7b60dbc33b7&amp;title=&amp;width=1142" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670548966490-daed7c11-d337-4904-9721-51cc1be48350.png#averageHue=%23f5f5f5&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=737&amp;id=u62feb077&amp;name=image.png&amp;originHeight=1474&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=356518&amp;status=done&amp;style=none&amp;taskId=u649ec4d8-8adc-493b-835f-275cb5240df&amp;title=&amp;width=1142" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670549025670-7d994107-12f6-412d-9007-62cf3d1a161b.png#averageHue=%23f5f5f5&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=734&amp;id=u59f6a867&amp;name=image.png&amp;originHeight=1467&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=353581&amp;status=done&amp;style=none&amp;taskId=uc90bf175-ada5-472c-81fc-d039a51ac07&amp;title=&amp;width=1142" alt="image.png"><br>保证自己的代码不要过于混乱：SOLID原则</p><p>今天，我们从软件行业的一个段子说起。甲方想要做个电商网站，作为乙方的程序员问：“你要做个什么样的呢？”甲方说：“像淘宝那样就好。”程序员问：“那你打算出多少钱？”甲方想了想，“5 万块钱差不多了吧！”<br>这当然是个调侃客户不懂需求的段子，但你有没有想过，<strong>为什么在甲方看来并不复杂的系统，你却觉得困难重重呢？因为你们想的根本不是一个东西</strong>。<br>在客户看来，我要的不就是一个能买东西的网站吗？只要能上线商品，用户能看到能购买不就好了，5 万块钱差不多了。<br>而你脑中想的却是，“淘宝啊，那得是多大的技术挑战啊，每年一到‘双 11’，那就得考虑各种并发抢购。淘宝得有多少程序员，5 万块你就想做一个，门都没有。”</p><p><strong>做一个新项目的时候，并不需要考虑太多的想象中的需求，最重要的是做好两点</strong></p><ol><li><strong>分析需求，做好领域划分和抽象（</strong>越高层的抽象越稳定，越细节的东西越容易变化<strong>），保证架构的可扩展性</strong></li><li><strong>尽量少引入各种框架，或者保证框架的可插拔，可快速替换</strong></li></ol><p>回顾上面的过程，你就可以看到，每次随着业务量的增长，原有技术无法满足需要，于是，就需要用新的技术去解决这个问题。这里的关键点在于：不同的业务量。</p><p>一个只服务于几个人的系统，单机就够了，一个刚刚入行的程序员也能很好地实现这个系统。而当业务量到达一台机器抗不住的时候，就需要用多台机器去处理，这个时候就必须考虑分布式系统的问题，可能就要适当地引入中间件。而当系统变成为海量业务提供服务，就没有哪个已经打造好的中间件可以提供帮助了，需要自己从更底层解决问题。虽然在业务上看来，这些系统是一样的，但在技术上看来，在不同的阶段，一个系统面对的问题是不同的，因为它面对业务的量级是不同的。更准确地说，不同量级的系统根本就不是一个系统。<br>在前面的例子中，淘宝的工程师之所以要改进系统，真实的驱动力不是技术，而是不断攀升的业务量带来的问题复杂度。所以，评估系统当前所处的阶段，采用恰当的技术解决，是我们最应该考虑的问题。<br><strong>那请记住：用简单技术解决问题，直到问题变复杂。</strong><br>也许你会说，我做的系统没有那么大的业务量，我还想提高技术怎么办？答案是到有好问题的地方去。现在的 IT 行业提供给程序员的机会很多，找到一个有好问题的地方并不是一件困难的事，当然，前提条件是，你自己得有解决问题的基础能力。</p><p><strong>如何做微服务</strong><br>先回答一个问题，我们为什么要做微服务？对这个问题的标准回答是，相对于整体服务（Monolithic）而言，微服务足够小，代码更容易理解，测试更容易，部署也更简单。这些道理都对，但这是做好了微服务的结果。<br>怎么才能达到这个状态呢？这里面有一个关键因素，怎么划分微服务，也就是一个庞大的系统按照什么样的方式分解。这是在很多关于微服务的讨论中所最为欠缺的，也是很多团队做“微服务”却死得很难看的根本原因。<br>不了解这一点，写出的服务，要么是服务之间互相调用，造成整个系统执行效率极低；要么是你需要花大力气解决各个服务之间的数据一致性。<br><strong>换句话说，服务划分不好，等待团队的就是无穷无尽的偶然复杂度泥潭。只有正确地划分了微服务，它才会是你心目中向往的样子。</strong><br><strong>那应该怎么划分微服务呢？你需要了解领域驱动设计。</strong><br>领域驱动设计（Domain Driven Design，DDD）是 Eric Evans 提出的从系统分析到软件建模的一套方法论。它要解决什么问题呢？就是将业务概念和业务规则转换成软件系统中概念和规则，从而降低或隐藏业务复杂性，使系统具有更好的扩展性，以应对复杂多变的现实业务问题。<br><strong>DDD 到底讲了什么呢？它把你的思考起点，从技术的角度拉到了业务上。</strong><br>贴近业务，走近客户，我们在这个专栏中已经提到过很多次。但把这件事直接体现在写代码上，恐怕还是很多人不那么习惯的一件事。DDD 最为基础的就是通用语言（Ubiquitous Language），让业务人员和程序员说一样的语言。这一点我在《21 | 你的代码为谁而写？》中已经提到过了。使用通用语言，等于把思考的层次从代码细节中拉到了业务层面。越高层的抽象越稳定，越细节的东西越容易变化。<br>有了通用语言做基础，然后就要进入到 DDD 的实战环节了。<strong>DDD 分为战略设计（Strategic Design）和战术设计（Tactical Design）。</strong><br>战略设计是高层设计，它帮我们将系统切分成不同的领域，并处理不同领域的关系。我在前面的内容中给你举过“订单”和“用户”的例子。从业务上区分，把不同的概念放到不同的地方，这是从根本上解决问题，否则，无论你的代码写得再好，混乱也是不可避免的。而这种以业务的角度思考问题的方式就是 DDD 战略设计带给我的。战术设计，通常是指在一个领域内，在技术层面上如何组织好不同的领域对象。举个例子，国内的程序员喜欢用 myBatis 做数据访问，而非 JPA，常见的理由是 JPA 在有关联的情况下，性能太差。但真正的原因是没有设计好关联。<br>说了半天，这和微服务有什么关系呢？微服务真正的难点并非在于技术实现，而是业务划分，而这刚好是 DDD 战略设计中限界上下文（Bounded Context）的强项。<br>虽然通用语言打通了业务与技术之间的壁垒，但计算机并不擅长处理模糊的人类语言，所以，通用语言必须在特定的上下文中表达，才是清晰的。就像我们说过的“订单”那个例子，交易的“订单”和物流的“订单”是不同的，它们都有着自己的上下文，而这个上下文就是限界上下文。<br>它限定了通用语言自由使用的边界，一旦出界，含义便无法保证。正是由于边界的存在，一个限界上下文刚好可以成为一个独立的部署单元，而这个部署单元就可以成为一个服务。<br><strong>所以要做好微服务，第一步应该是识别限界上下文。</strong><br>你也看出来了，每个限界上下文都应该是独立的，每个上下文之间就不应该存在大量的耦合，<strong>困扰很多人的微服务之间大量相互调用，本身就是一个没有划分好边界而带来的伪命题，靠技术解决业务问题</strong>，事倍功半。<br>有了限界上下文就可以做微服务了吧？且慢！<br>以我拙见，一次性把边界划清楚并不是一件很容易的事。大家在一个进程里，调整起来会容易很多。然后，让不同的限界上下文先各自独立演化。等着它演化到值得独立部署了，再来考虑微服务拆分的事情。到那时，你也学到各种关于微服务的技术，也就该派上用场了！</p><p>DDD与精益创业，微服务的划分异曲同工，都需要划分好上下文界限，切用最简单的方式实现当下的需求，再逐步扩大（需要好的设计保证可扩展）精益创业实际上是一种持续验证，验证想法的有效性，获得经过验证的认知（Validated Learning）。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670740142955-ce3186d8-a3eb-425b-bc3f-d4f14ed071fe.png#averageHue=%23f6f6f6&amp;clientId=uec93d73b-3fc1-4&amp;from=paste&amp;height=1592&amp;id=u97ed25ef&amp;name=image.png&amp;originHeight=3184&amp;originWidth=1410&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=530716&amp;status=done&amp;style=none&amp;taskId=ua069befb-3293-44b5-adbc-2bd13dcf873&amp;title=&amp;width=705" alt="image.png"></p><p>如果你了解了业务，你自己就可以推演出基本的代码结构。但反过来，如果让你看了代码，从中推演出业务，那几乎是不可能的。<br>事实上，每次了解到一个业务，我都会在脑子中过一下，如果是我做这个业务，我会怎么做。这样一来，我就会先在整体上有一个预判，后面再对应到实际的代码上，就不会那么陌生了。要了解业务，我一般都会请人给我讲一下，这个业务是做什么的，解决什么样的问题，具体的业务流程是什么样子的，等等。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670740542457-15af9ad4-a2e9-402f-9cc0-e6c51d46db57.png#averageHue=%23f2f2f2&amp;clientId=uec93d73b-3fc1-4&amp;from=paste&amp;height=429&amp;id=u4aff8d90&amp;name=image.png&amp;originHeight=857&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=247215&amp;status=done&amp;style=none&amp;taskId=u62566f92-8b8d-4f4b-a52c-05cdb7a5d8b&amp;title=&amp;width=1142" alt="image.png"><br>改造遗留系统，我给你几个建议：</p><ol><li>构建测试防护网，保证新老模块功能一致；</li><li>分成小块，逐步替换；</li><li>构建好领域模型；</li><li>寻找行业中关于系统构建的最新理解。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近chatgpt大火，让很多人觉得很多工作包括程序员会被取代。其他岗位我不太了解，但是对于程序员这个职业，我认为但是其实这说明，大家对于程序员在处理的问题的认知是程序员处理的是某一个独立的问题上，或者某个独立的很具体的问题上，当然这和程序员面试题有关，毕竟程序员面试题其实就是这种，面试题，说起来就是做卷子，做卷子你怎么可能有背靠互联网的机器人比，而那些不好衡量的看起来是空话的东西，在一次面试中，人还真不一定表现的比背后是所有面试经验帖的机器人高明。&lt;/p&gt;
&lt;p&gt;但是其实这已经是忘记了程序员是为什么而存在的。程序员掌握的技术叫做信息技术，目的是为了快速的收集和处理信息，那么为什么这个技术重要呢？了解这个问题，其实也能明白AI到底给我们带来了什么。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript实现AVL树</title>
    <link href="https://sunra.top/2023/02/02/avl-tree-javascript/"/>
    <id>https://sunra.top/2023/02/02/avl-tree-javascript/</id>
    <published>2023-02-02T02:56:03.000Z</published>
    <updated>2023-02-02T03:48:16.551Z</updated>
    
    <content type="html"><![CDATA[<p>最近尝试实现了下AVL树，发现这玩意写起来还是很多细节的，搞了半天，所以就在这里记录下。</p><p>AVL树就是平衡二叉检索树，一方面它是BST，即二叉检索树，一方面它是平衡的，也就是任何一个节点为根结点的子树的左子树和右子树的高度差不到1。</p><a id="more"></a><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>关于BST就不多说了，比较简单，就是每个节点的左孩子都小于根节点，右孩子都大于根节点，插入的时候注意就好。</p><p>但是BST有个问题，比如依次插入1，2，3，4，5，6，那么最终会得到一个只有右孩子的树，其实这个BST已经退化成了普通链表，所以我们需要一定的方式保持这个树的平衡，而保持平衡的方式如下：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1675307019/origin-of-ray/912c7f2fdaf3490689db1a7144775b11_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0_qzoplx.webp" alt></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="四种不平衡的情况"><a href="#四种不平衡的情况" class="headerlink" title="四种不平衡的情况"></a>四种不平衡的情况</h2><h3 id="左左情况"><a href="#左左情况" class="headerlink" title="左左情况"></a>左左情况</h3><p>这个情况下要右旋，然后返回旋转后新的根节点，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#_rotateRight(node) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.left;</span><br><span class="line">    node.left = avlNode.right;</span><br><span class="line">    avlNode.right = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右右情况"><a href="#右右情况" class="headerlink" title="右右情况"></a>右右情况</h3><p>这个情况下要左旋，然后返回旋转后新的根节点，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#_rotateLeft(node) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.right;</span><br><span class="line">    node.right = avlNode.left;</span><br><span class="line">    avlNode.left = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左右情况"><a href="#左右情况" class="headerlink" title="左右情况"></a>左右情况</h3><p>这个情况下先要对根节点的左子节点做左旋，变为左左情况，然后再对根节点做右旋，然后返回旋转后新的根节点，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#_rotateLeftRight(node) &#123;</span><br><span class="line">    node.left = this.#_rotateLeft(node.left);</span><br><span class="line">    return this.#_rotateRight(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右左情况"><a href="#右左情况" class="headerlink" title="右左情况"></a>右左情况</h3><p>这个情况下先要对根节点的右子节点做右旋，变为右右情况，然后再对根节点做左旋，然后返回旋转后新的根节点，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#_rotateRightLeft(node) &#123;</span><br><span class="line">    node.right = this.#_rotateRight(node.right);</span><br><span class="line">    return this.#_rotateLeft(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修复不平衡的情况"><a href="#修复不平衡的情况" class="headerlink" title="修复不平衡的情况"></a>修复不平衡的情况</h2><h3 id="获取节点的高度"><a href="#获取节点的高度" class="headerlink" title="获取节点的高度"></a>获取节点的高度</h3><p>我们在做平衡的时候需要判断是否需要平衡以及是哪种不平衡的情况好选择不同的旋转方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#_getAvlTreeHeight(node) &#123;</span><br><span class="line">    <span class="comment">// 空节点的高度为0</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里使用后序遍历，因为每次递归的结果需要子节点递归的结果</span></span><br><span class="line">    const leftHeight = this.#_getAvlTreeHeight(node.left);</span><br><span class="line">    const rightHeight = this.#_getAvlTreeHeight(node.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点高度为左右子树高度中的较大值加上1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平衡"><a href="#平衡" class="headerlink" title="平衡"></a>平衡</h3><p>平衡以node为根节点的子树，并返回新的根节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#_balance(node) &#123;</span><br><span class="line">    <span class="comment">// 空节点不需要平衡，直接返回空节点</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取左右子树的高度</span></span><br><span class="line">    const leftSubTreeHeight = this.#_getAvlTreeHeight(node.left);</span><br><span class="line">    const rightSubTreeHeight = this.#_getAvlTreeHeight(node.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果左子树高度大于右子树高度，且大不止1，说明不平衡，且这里隐含一个逻辑，就是左子树的左子树一定不为空</span></span><br><span class="line">    <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 左左情况，直接右旋</span></span><br><span class="line">        if (this.#_getAvlTreeHeight(node.left.left) &gt;= this.#_getAvlTreeHeight(node.left.right)) &#123;</span><br><span class="line">            node = this.#_rotateRight(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 左右情况，先左旋后右旋</span></span><br><span class="line">            node = this.#_rotateLeftRight(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 右右情况，直接左旋</span></span><br><span class="line">        if (this.#_getAvlTreeHeight(node.right.right) &gt;= this.#_getAvlTreeHeight(node.right.left)) &#123;</span><br><span class="line">            node = this.#_rotateLeft(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 右左情况，先右旋，后左旋</span></span><br><span class="line">            node = this.#_rotateRightLeft(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回平衡后的子树的新的根节点</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入新的节点，并返回新的根节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码最需要理解的地方是，这个递归函数每次返回的是在以node节点为根节点的树上插入newNode并平衡后的新子树的根节点。</span></span><br><span class="line">#_insertHelper(node, newNode) &#123;</span><br><span class="line">    <span class="comment">// 如果是根节点为空，则直接把newNode当作根节点返回</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果新节点的值比当前节点小</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.val &lt; node.val) &#123;</span><br><span class="line">        <span class="comment">// 左节点为空，那么直接就把新节点当作左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">            node.left = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果左子节点不为空，那么在左子树中插入新节点，并把插入后返回的新子树的根节点作为左子树</span></span><br><span class="line">            node.left = this.#_insertHelper(node.left, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 右节点为空，那么直接就把新节点当作右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">            node.right = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果右子节点不为空，那么在右子树中插入新节点，并把插入后返回的新子树的根节点作为右子树</span></span><br><span class="line">            node.right = this.#_insertHelper(node.right, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入后进行平衡，并返回平衡后的新子树的根节点</span></span><br><span class="line">    return this.#_balance(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insert(newNode) &#123;</span><br><span class="line">    <span class="comment">// 从根节点开始插入newNode，并且重新赋值根节点，保证下次调用的正确</span></span><br><span class="line">    this.#_root = this.#_insertHelper(this.#_root, newNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>这个比较简单，和BST没什么区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> #_searchHelper(node, val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.val === val) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.val) &#123;</span><br><span class="line">        return this.#_searchHelper(node.left, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        return this.#_searchHelper(node.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">search(val) &#123;</span><br><span class="line">    return this.#_searchHelper(this.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>在以node为根节点的子树上删除值为val的节点，并返回平衡后新的树的根节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#_removeHelper(node, val) &#123;</span><br><span class="line">    <span class="comment">// 如果node为空，说明树为空，不需要删除，新树的根节点也是null</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 如果找到了要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span> (val === node.val) &#123;</span><br><span class="line">        <span class="comment">// 要删除的节点左右子树都有</span></span><br><span class="line">        <span class="keyword">if</span> (node.left &amp;&amp; node.right) &#123;</span><br><span class="line">            <span class="comment">// 那就找到该节点右子树</span></span><br><span class="line">            <span class="keyword">let</span> p = node.right;</span><br><span class="line">            <span class="comment">// 然后在右子树中一直找左子树</span></span><br><span class="line">            <span class="keyword">while</span>(p.left) &#123;</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 然后把结果替换到当前节点中，因为右子树中最左的子节点一定小于右子树中其他的节点，同时大雨左子树中所有节点</span></span><br><span class="line">            node.val = p.val;</span><br><span class="line">            <span class="comment">// 上一步只是把节点值替换，但是节点还在，我们需要右子树中删除该节点，然后返回平衡后新的右子树作为node的右子树。</span></span><br><span class="line">            <span class="comment">// 而记住，此时我们要删除的是p.val了，而不是val，因为我们已经把p.val放到了node.val，且这个p有个性质就是它最起码没有左子节点了，座椅下一次会进入紧接着的else逻辑</span></span><br><span class="line">            node.right = this.#_removeHelper(node.right, p.val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不是左右子树都有，直接就替换上来，然后删除原本的就好</span></span><br><span class="line">            <span class="keyword">let</span> p = node.left !== <span class="literal">null</span> ? node.left : node.right;</span><br><span class="line">            node = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.val) &#123;</span><br><span class="line">        <span class="comment">// 如果要删除的值比当前小，就去左子树删除</span></span><br><span class="line">        node.left = this.#_removeHelper(node.left, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果要删除的值比当前大，就去右子树删除</span></span><br><span class="line">        node.right = this.#_removeHelper(node.right, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回平衡后新的子树根节点</span></span><br><span class="line">    return this.#_balance(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove(val) &#123;</span><br><span class="line">    return this.#_removeHelper(this.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码和测试"><a href="#完整代码和测试" class="headerlink" title="完整代码和测试"></a>完整代码和测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvlTree</span></span>&#123;</span><br><span class="line">    #_rotateLeft(node) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.right;</span><br><span class="line">        node.right = avlNode.left;</span><br><span class="line">        avlNode.left = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_rotateRight(node) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.left;</span><br><span class="line">        node.left = avlNode.right;</span><br><span class="line">        avlNode.right = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_rotateLeftRight(node) &#123;</span><br><span class="line">        node.left = this.#_rotateLeft(node.left);</span><br><span class="line">        return this.#_rotateRight(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_rotateRightLeft(node) &#123;</span><br><span class="line">        node.right = this.#_rotateRight(node.right);</span><br><span class="line">        return this.#_rotateLeft(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_getAvlTreeHeight(node) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const leftHeight = this.#_getAvlTreeHeight(node.left);</span><br><span class="line">        const rightHeight = this.#_getAvlTreeHeight(node.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_balance(node) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const leftSubTreeHeight = this.#_getAvlTreeHeight(node.left);</span><br><span class="line">        const rightSubTreeHeight = this.#_getAvlTreeHeight(node.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            if (this.#_getAvlTreeHeight(node.left.left) &gt;= this.#_getAvlTreeHeight(node.left.right)) &#123;</span><br><span class="line">                node = this.#_rotateRight(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = this.#_rotateLeftRight(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            if (this.#_getAvlTreeHeight(node.right.right) &gt;= this.#_getAvlTreeHeight(node.right.left)) &#123;</span><br><span class="line">                node = this.#_rotateLeft(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = this.#_rotateRightLeft(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_insertHelper(node, newNode) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newNode.val &lt; node.val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">                node.left = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.left = this.#_insertHelper(node.left, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">                node.right = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.right = this.#_insertHelper(node.right, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return this.#_balance(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    insert(newNode) &#123;</span><br><span class="line">        this.#_root = this.#_insertHelper(this.#_root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_inOrder(node) &#123;</span><br><span class="line">        <span class="keyword">const</span> stack = [node];</span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line">        <span class="keyword">while</span>(stack.length) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">                current.right &amp;&amp; stack.push(current.right);</span><br><span class="line"></span><br><span class="line">                stack.push(current, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                current.left &amp;&amp; stack.push(current.left);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = stack.pop();</span><br><span class="line">                result.push(current.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    print() &#123;</span><br><span class="line">        if (this.#_root === null) return;</span><br><span class="line">        this.#_inOrder(this.#_root);</span><br><span class="line">        console.log(this.#_getAvlTreeHeight(this.#_root.left))</span><br><span class="line">        console.log(this.#_getAvlTreeHeight(this.#_root.right))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_searchHelper(node, val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.val === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.val) &#123;</span><br><span class="line">            return this.#_searchHelper(node.left, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            return this.#_searchHelper(node.right, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    search(val) &#123;</span><br><span class="line">        return this.#_searchHelper(this.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_removeHelper(node, val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (val === node.val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.left &amp;&amp; node.right) &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.right;</span><br><span class="line">                <span class="keyword">while</span>(p.left) &#123;</span><br><span class="line">                    p = p.left;</span><br><span class="line">                &#125;</span><br><span class="line">                node.val = p.val;</span><br><span class="line">                node.right = this.#_removeHelper(node.right, p.val)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.left !== <span class="literal">null</span> ? node.left : node.right;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.val) &#123;</span><br><span class="line">            node.left = this.#_removeHelper(node.left, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.right = this.#_removeHelper(node.right, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this.#_balance(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(val) &#123;</span><br><span class="line">        return this.#_removeHelper(this.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_root = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> avlTree = <span class="keyword">new</span> AvlTree();</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">0</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">2</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">3</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">4</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">6</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">8</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">9</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">14</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">15</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">16</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">17</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">18</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">19</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">20</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">21</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">11</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">31</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">61</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">111</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">221</span>));</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">20</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">1</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">11</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">221</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">8</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">4</span>);</span><br><span class="line">avlTree.print()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近尝试实现了下AVL树，发现这玩意写起来还是很多细节的，搞了半天，所以就在这里记录下。&lt;/p&gt;
&lt;p&gt;AVL树就是平衡二叉检索树，一方面它是BST，即二叉检索树，一方面它是平衡的，也就是任何一个节点为根结点的子树的左子树和右子树的高度差不到1。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>分析模式——可复用的对象模型</title>
    <link href="https://sunra.top/2023/01/26/analysis-patterns/"/>
    <id>https://sunra.top/2023/01/26/analysis-patterns/</id>
    <published>2023-01-26T03:10:44.000Z</published>
    <updated>2023-01-28T14:11:35.685Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了《分析模式——可复用的对象模型》一书，这本书算是DDD方面的一本启蒙书籍，阅读完成后还是受益良多，一方面是很多观点和平时的工作相互印证，很受启发，另一方面学到了一些业务建模的模式，本文主要总结一下收到启发的地方和建模原则，具体的建模方式举一个例子体会一下就好。</p><p>这里先简单说几个我最有收获的几个点：</p><ul><li>对象开发的一个重要原则是是软件的结构反映问题的结构。</li><li>问题没有梳理清楚导致的耦合是没有办法通过设计模式来解决的，比如物流和订单，他们使用了同一个数据表，他们需要互相感知到对方，那么他们就一定在某种程度上的耦合在一起，属于本质复杂度，这种耦合是没办法通过良好的设计模式进行解耦的，即使它们是两个系统，他们也要一起改动。</li><li>业务领域的划分也要做到高内聚，低耦合，最少知识原则，如果每个业务领域需要知道很多其他业务领域的知识，那么其实还是耦合的。</li><li>不同领域之间如果非要有联系，也尽量减少双向的联系，每一个双向的联系都会为系统带来更高的复杂度。</li><li>在系统开始阶段要尽量降低系统复杂度的同时，对修改保持开放，也就是开闭原则，除非十分必要，不要上来就引入很多第三方工具，要考虑这些工具的引入成本，维护成本，升级成本，甚至是机会成本，也不要上来就搞什么微服务，微服务最好是从一个成熟的系统中经过验证稳定的业务领域中孵化出来，否则只是单纯的技术架构上的微服务只会徒增系统整体的复杂性和风险。</li></ul><a id="more"></a><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p><strong>我们可以把架构设计简单分为横向和纵向的划分，横向的划分，解决的是业务架构，为的是降低业务逻辑的本质复杂度，降低业务领域之间的耦合，而纵向的架构解决的是非功能性的需求，比如通过缓存层，消息队列等技术来提高稳定性，吞吐率等。</strong></p><p>我们本文的重点就是解决横向的架构设计的一些原则。</p><p>分析的目的是为了理解问题，在我看来，这可不仅是一个使用用例来罗列需求的过程。在系统开发过程中，用例就算不是必不可少的，也是很有价值的，但是捕获这种用例并不意味着分析的结束。分析还涉及透过表面需求以提出反映问题内在机制的心智模型。</p><p>考虑编写一个模拟台球比赛的软件，可以通过描述表面特征的用例来评估这个问题：“玩家击打白球，使它以一定速度移动，接着，白球又以一定的角度击中了红球，使红球以一定的方向移动了一定的距离。”可以拍摄几百次这样的事件，并测量球的速度，角度和移动的距离。然而仅靠这些恐怕不足以写出好的模拟程序，要写好这个程序，需要透过表面现象去了解其背后的运动规律，包括质量，速度，动量等。</p><p>像台球比赛这样的问题并不多见，因为这些运动规律广为人知。然后在许多企业中，这一层面的基本机制还没有被很好地理解，需要我们去努力地发现。</p><p>模型无所谓对错，关键在于哪个模型更加合用。</p><p>模型的选择可能会影响开发出来的软件的灵活性和可复用性。对于台球比赛这种软件，你可能会主张使用爱因斯坦模型，因为开发出来的软件可以灵活到足以处理原子碰撞问题。但这样处理比较危险，因为<strong>引入太多的灵活性可能导致系统过于复杂，这是一种糟糕的工程实践</strong>。</p><p>使用分析和设计技术的主要原因之一是为了让领域专家参与进来，而这对概念建模来说至关重要。有效的模型只能由真正了解该领域的人来构建，这些人是该领域的全职工作者。IT技能对于建模技能既没有帮助也没有阻碍。</p><p>分析技术应该与软件技术相互独立，理想情况下，概念建模应该完全独立于软件技术，就像上面说的运动定律那样。这种独立性可以防止技术阻碍人们对问题的理解，并且得到的模型对各种软件技术都同样有效。</p><p>与概念模型密切相关的是软件的接口而不是软件的实现。</p><h1 id="一些建模原则"><a href="#一些建模原则" class="headerlink" title="一些建模原则"></a>一些建模原则</h1><p>这里罗列一些书中的建模原则，其实这些原则和设计模式的的原则是相通的，二者只是关注点不同。</p><ol><li>建模时应该是模型中变化最频繁的部分所影响的类型数量最小化。（这一点其实和设计模式的将容易变化和不容易变化的部分分开是相通的）</li><li>当为具有超类型的类型定义特性时，考虑将这些特性放在超类型上是否合理。</li><li>应该显式地将模型分为操作层和知识层。举个例子，配置类的文件或者某些我们自定义的可以解析的语义是知识层，它可以定义类之间的关系以及某些程序运行的原则，而具体如何实例化类属于操作层。</li><li>当多个属性通过可以在若干个类型中使用的行为相互作用时，应该将这些属性组合成一个新的基本类型。比如我们系统中涉及大量的不同单位的数据，我们可以将单位和数值从这些数据中抽取出来组合成数量类型。</li><li>操作层包含那些每天都发生变化的概念，这些概念的配置由知识层进行约束，其变化频率会低很多。这里的变化频率指的是运行时的变化。</li><li>如果一个类型有非常多类似的关联，那么将这些关联对象抽象成一个新类型，再创建一个知识层来区分它们。</li><li>要记录某个值的变化历史，应该为该值建立一个账户。</li><li>使用账户时，应该遵循如下守恒原则：所记录的项目不能被创建或者销毁，只能从一处转移到另一处，这样可以更加容易查找和避免漏洞。</li><li>想要了解一个计算是如何进行的，可以将计算结果表示为一个对象，该对象用于记住创建它的计算以及所使用的输入值。</li><li>当有多个等价的特性集可供选择时，选取领域专家认为最合适的那个，如果领域专家认为二者都非常有价值，那么就将二者都抽取出来，并将其中之一标记为派生。</li><li>将一个特性标记为派生，只是对接口的约束，并不影响底层的数据结构。</li><li>如果可以通过不同的条件来创建对象的集合，那就应该使用组合。</li><li>在将一个处理过程作为某个类型的一项特性时，应该为该过程提供一个抽象接口，以便通过子类化方便地改变其实现。例如，纯粹硬编码的实现是一个子类，各种参数驱动的方法是其他子类。</li><li>当多个属性在某个行为中进行交互，而该行为又可能在多个类型中使用时，应该将这些属性组合成一个新的基本类型。</li><li>如果超类型适用的领域较窄，子类型适用的领域较宽，那么就不应该使用泛化。</li><li>如果两个相似类型之间的差别通常可以忽略，那么就可以使用抽象超类型。如果两者之间的差别很重要，那么就不要使用抽象超类型。</li><li>如果使用一个抽象超类型不会给客户端带来更多的工作量，那么就应该提供这个抽象类型。</li><li>当某种信息既可能从一个信息源直接获取，也可能根据其他可用数据计算出来时，应该提供一个抽象接口，将从信息源获取和计算这两种方式分别作为其子类。</li><li>当面临几种替代方法时，首先选择最简单的方法，然后根据需要改为更复杂的方法。</li><li>当即中建模方案中难以抉择时，遵循领域专家的直觉。</li><li>只有在下述情况下才应该使用子类型：超类型所有特性都适用于子类型，并且从概念上，子类型的每个实例都是超类型的实例这一说法是合理的。</li><li>当以客户视角看到单笔交易可以被交易员分为多笔交易时，应该将产品和合同分开。产品与合同区分的关键在于，产品代表客户意图，而合同指的是对手方和主方之间的实际交易的内容。</li><li>不要重复有相同含义的基本关联。遵循这一原则，就可以获得职责划分良好的类型。</li><li>在职责分配上应保持一致。要小心那些有时对某事负责，有时又将该职责委托出去的类型。（这种行为可能是正确的，但总是应该对其保持怀疑的态度）</li><li>单向关联和双向关联之间做出选择需要在两个方面进行权衡，一方面是类型开发工作人员的工作量小（减少类型间的耦合）；另一方面是类型使用者的使用方便性。</li><li>如果一个包只需要见到另一个包的一部分，可以考虑将后一个包分割成两个互相可见的包。</li><li>子类型化的本质在于可以在超类型对其毫不知情的情况下对其进行扩展。通常需要设计一些子类型来积累经验，然后再进行抽象。</li></ol><h1 id="举例两个分析模式"><a href="#举例两个分析模式" class="headerlink" title="举例两个分析模式"></a>举例两个分析模式</h1><p>图中的每一个方框代表一个类型。</p><h2 id="责任模式"><a href="#责任模式" class="headerlink" title="责任模式"></a>责任模式</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220145_aun9wt.jpg" alt></p><ul><li>知识层中定义了责任类型，责任类型定义了什么样的委托方可选的责任方有哪些这个映射关系</li><li>那么操作层就是实例化一个责任，在具体的责任重选择参与方的时候要遵循知识层的责任类型中的规范</li><li>每个责任可能有一个时间段，对应的是一个活动。</li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220202_mjg72s.jpg" alt></p><ul><li>每个观察有自己的参与方</li><li>观察可以子类型化为假定，推测和有效观察</li><li>观察也可以子类型化为测量和分类观察，测量的结果是一个数量（数值+单位），分类观察的结果是是否存在。举个例子，血压是一个测量，而血压高是一个分类观察。血压这个测量可以推测出血压高这个分类观察，而一旦血压的测量是错的，这个推测链应该直接被连锁否定掉。</li><li>在知识层，观察有自己的规程，也就是如何进行着观察</li><li>知识层的现象类型，现象和观察概念，规定了操作层的观察可以是什么，如血压就是一个现象类型，增加是一个现象，血压增加是一个观察概念，同时观察概念之间是可以互相推测的。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近读了《分析模式——可复用的对象模型》一书，这本书算是DDD方面的一本启蒙书籍，阅读完成后还是受益良多，一方面是很多观点和平时的工作相互印证，很受启发，另一方面学到了一些业务建模的模式，本文主要总结一下收到启发的地方和建模原则，具体的建模方式举一个例子体会一下就好。&lt;/p&gt;
&lt;p&gt;这里先简单说几个我最有收获的几个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象开发的一个重要原则是是软件的结构反映问题的结构。&lt;/li&gt;
&lt;li&gt;问题没有梳理清楚导致的耦合是没有办法通过设计模式来解决的，比如物流和订单，他们使用了同一个数据表，他们需要互相感知到对方，那么他们就一定在某种程度上的耦合在一起，属于本质复杂度，这种耦合是没办法通过良好的设计模式进行解耦的，即使它们是两个系统，他们也要一起改动。&lt;/li&gt;
&lt;li&gt;业务领域的划分也要做到高内聚，低耦合，最少知识原则，如果每个业务领域需要知道很多其他业务领域的知识，那么其实还是耦合的。&lt;/li&gt;
&lt;li&gt;不同领域之间如果非要有联系，也尽量减少双向的联系，每一个双向的联系都会为系统带来更高的复杂度。&lt;/li&gt;
&lt;li&gt;在系统开始阶段要尽量降低系统复杂度的同时，对修改保持开放，也就是开闭原则，除非十分必要，不要上来就引入很多第三方工具，要考虑这些工具的引入成本，维护成本，升级成本，甚至是机会成本，也不要上来就搞什么微服务，微服务最好是从一个成熟的系统中经过验证稳定的业务领域中孵化出来，否则只是单纯的技术架构上的微服务只会徒增系统整体的复杂性和风险。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>KM 算法</title>
    <link href="https://sunra.top/2023/01/22/km-algorithm/"/>
    <id>https://sunra.top/2023/01/22/km-algorithm/</id>
    <published>2023-01-22T03:40:37.000Z</published>
    <updated>2023-01-22T05:40:10.715Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客讲了二分图匹配的<a href="https://sunra.top/2023/01/13/hungary-algorithm/">匈牙利算法</a>，但是匈牙利算法中的每个匹配边权重都是一样的，如果我们在匹配边权重不同的情况下得到最佳匹配，那么就需要用到KM算法。</p><a id="more"></a><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>其实我们在理解了匈牙利算法之后，再来理解KM算法就简单了。</p><p>我们现在知道匈牙利算法能解决最大匹配的问题，现在加了权重，KM算法实际上就是想了个办法，将问题转换成了匈牙利算法可以解决的形式。</p><p>现在二分图带了权重，可以理解为加了一种约束，这种约束让我们优先选择那些权重大的边出来，进行匹配。</p><p><strong>因此我们要先把权重最大的边都挑出来，学术一点，就是挑一个子图出来。因为我们挑出来的都是权重最大的边，我们只要在这个子图中，找到最大匹配，这个最大匹配一定是权重最大的（很重要，意思就是这个子图里，在上面随便找都是权重最大的匹配，这样我们就能用匈牙利算法解决问题了）</strong>。流程就是：</p><p>找权重最大的边组成的子图————→在这个子图上找最大匹配</p><p>上述流程很简单吧，有一个问题是，我们都找最大权重的边组成子图，这个子图很小，很容易冲突。形象来说，大家找对象的要求都太高了，很可能会没法满足他们的要求。这时候只能委屈一部分人，让他稍微降低一下的要求，让他从别的人里挑对象。</p><p>这个KM算法的流程，核心思想就是：优先选择最满意的，因为要求太高找不到对象的那些人，降低标准扩大择偶范围，直到找到对象为止。</p><p>这个问题中，找最大匹配的那一部分我们会了呀，用匈牙利算法就搞定了。剩下就是两个问题了：</p><ol><li><p>怎么找到这个所谓的“权重最大的子图”。</p></li><li><p>怎么扩大择偶范围。既不能降得太低，也不能不降。</p></li></ol><p>上述两个问题，就是KM算法的精髓。</p><p>这个权重最大的子图，就是“相等子图”。扩大择偶范围，就是“顶标的更新—-建立新的相等子图”的过程。</p><p>要注意的是，上面说的权重最大，并不是整个图的范围内权重越大越好，而是目前能力范围内我们能选的最大的权重边（毕竟有些人需要降低标准才能找到对象）。</p><h2 id="第一个问题-如何寻找“权重最大的”子图？"><a href="#第一个问题-如何寻找“权重最大的”子图？" class="headerlink" title="第一个问题 如何寻找“权重最大的”子图？"></a>第一个问题 如何寻找“权重最大的”子图？</h2><p>首先强调一点，我们的这个子图的目的，是为了实现一个效果：</p><p>在这个子图上，不考虑权重找到最大匹配 等价于 在带权重的图上找权重最大的最大匹配。</p><p>我们挑一伙人出来，这些人彼此的满意度都比较高，那些低的暂时不考虑。在这伙人里找对象。找不到了再考虑加人进来。</p><p>为了实现这个目标，我们给每个人，增加一个顶标。我们暂不考虑这个顶标是怎么加的，将在下一步中再详细讲这个问题。现在假设我们已经有一个顶标了。</p><p>这个顶标是我们决定一条边是否加入子图的依据。顶标可以理解为择偶的最高标准，如果双方的适配程度达到了这个最高标准，就加入到择偶范围内来，就是加入到子图中。</p><p>因此，比如说小王择偶的最高标准是$S<em>{Wang}$  ，小李择偶最高标准$S</em>{li}$。小王和小李的喜欢程度是W（即二分图中，小王和小李的连线权重），若$W= S<em>{Wang} + S</em>{li}$就加入子图中，进入择偶候选人范围。注意到上面这个等式，于是这样选出来的子图，叫做相等子图。</p><p>然而这个最高标准，是不断变化的。也就是下一个问题，如何不断地调整最高标准，让择偶范围不断变化。</p><h2 id="第二个问题-如何扩大择偶范围？"><a href="#第二个问题-如何扩大择偶范围？" class="headerlink" title="第二个问题 如何扩大择偶范围？"></a>第二个问题 如何扩大择偶范围？</h2><p>我们这里拿一个具体的例子来看。</p><p>这里有5个女生x1-x5， 5个男生y1-y5。他们之间为0就是没有连线，大于0的数是权重，就是他们相互喜欢的程度。</p><script type="math/tex; mode=display">\begin{bmatrix} & y1 & y2 & y3 & y4 & y5 \\x1 & 3 & 5 & 5 & 4 & 1 \\x2 & 2 & 2 & 0 & 2 & 2 \\x3 & 2 & 4 & 4 & 1 & 0 \\x4 & 0 & 1 & 1 & 0 & 0 \\x5 & 1 & 2 & 1 & 3 & 3\end{bmatrix}</script><p><strong>第一步，最高标准初始化。</strong></p><p>需要注意的是，我们是一个无向的二分图，意思就是权重是双方共同的喜欢程度，因此可以选一个人作为代表就行了。于是，我们让女生做单方面的选择。</p><p>于是男生们的顶标都设为0。</p><p>一开始女生们都想找最喜欢的对象，我们将她们的最高标准都设为她们最喜欢的那个。比如，x1对所有男生都有意向，喜欢程度分别是3,5,5,4,1。那么她目前的最高标准就是5。</p><p>在第一次选择中，y2、y3加入择偶范围，其他三人暂不考虑。所有女生都这样，选出自己最喜欢的加入择偶范围。</p><p>我们就得到了子图</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674362847/origin-of-ray/v2-d41065309a9ebbebaba9697c72efd5b4_1440w_txjm2g.png" alt></p><p>这样的好处就是，这样挑出来的子图中，彼此喜欢程度一定是最大的。这样我们就不用考虑权重的问题了，问题就变成了一个在局部子图上，挑选最大匹配的问题，就可以用匈牙利算法解决了。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674362942/origin-of-ray/v2-e0c9824569b8e0f5908bb48f145d276f_1440w_ht9nwm.png" alt></p><p>走到这一步的时候，我们无法继续找到增广路径了，此时就要扩大择偶范围</p><p><strong>第二步，最高标准调整。</strong></p><p>我们随便选择一条上面没走下去的交替路（由于没有成功找到另一个未匹配的对象，所以这条交替路没有资格被称为增广路）比如就选这条：</p><p>x4——y2——x3——y3———x1——y2——????</p><p>这条路线，在很多文章里也会被成为交替树。一旦找到增广路，我们就能扩大匹配范围，给x4也找到对象。但是现在失败了，这个失败的本质是和路线上的人发生了冲突。2</p><p>于是我们看看，有哪些人和x4的失败有关。女生：x1，x3，x4。男生：y2，y3。</p><p>现在我们要协调这几个人的择偶最高标准（也就是他们的顶标），扩大择偶范围了。</p><p>首先，我们不能破坏原有的关系，原来的顶标都是设计好的，能保证选到自己最喜欢的对象。所以要保证他们之间最高标准不变，这样保证原来的匹配不会发生变化。</p><p>这里让上面和x4冲突的这些人里：女生的顶标减少，男生顶标增加，这样他俩合起来标准不变。</p><p>但是，女生的顶标减小了，其他人的机会就来了。</p><p>再回到刚刚我们挑子图的公式，就是小王配小李的这个等式，</p><p>现在小王因为和别人冲突了，降低了标准，W就减小了，也就是有些权重没那么大的边，现在有机会被加进子图里了。</p><p>现在女生：x1，x3，x4都喜欢y2和y3，发生冲突了，而y1,y4,y5还没被他们考虑。原本x1的标准是5，现在她要考虑y1的话，x1y1权重是3，需要降低2个标准。</p><p>同理，x1y4需要降低1； x3y1需要降低2， x3y4需要降低4-1=3；x3y5需要降低4-0=4。x4也一样算法。</p><p>所以考虑到最大权重，最少要降低1个标准。</p><p>因此我们把x1，x3，x4的标准-1，y2，y3对应+1。</p><p><strong>在这个标准下，我们依旧要挑满足“两人顶标和=两人连线权重”的边。</strong></p><p>可以看出来，x4同学降低标准后，所有男同学都满足她的标准了。</p><p>此时我们就可以给这个图找到完美匹配了,</p><p><img src="https://pic3.zhimg.com/80/v2-51d28f52efd5d822280d3d0ba2540a9e_1440w.webp" alt></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇博客讲了二分图匹配的&lt;a href=&quot;https://sunra.top/2023/01/13/hungary-algorithm/&quot;&gt;匈牙利算法&lt;/a&gt;，但是匈牙利算法中的每个匹配边权重都是一样的，如果我们在匹配边权重不同的情况下得到最佳匹配，那么就需要用到KM算法。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>匈牙利算法</title>
    <link href="https://sunra.top/2023/01/13/hungary-algorithm/"/>
    <id>https://sunra.top/2023/01/13/hungary-algorithm/</id>
    <published>2023-01-13T14:12:06.000Z</published>
    <updated>2023-01-22T03:40:21.991Z</updated>
    
    <content type="html"><![CDATA[<p>接触到这个算法是因为看到了一个题目，叫做素数伴侣。就是说给你你串数字，从中选择两个数字相加，如果他们的和是个素数，那么这一对叫做素数伴侣。然后我们需要找到这串数字中最多能找到多少对素数伴侣。</p><p>这个问题的解法首先是把数字分为两部分，一部分是偶数，一部分是奇数，因为两个偶数相加或者两个奇数相加一定还是偶数，不可能是素数。</p><p>于是这个问题就变成了分别从偶数中选一个，然后从奇数中选一个，看看最多选出多少对相加为素数。这个问题就用到了匈牙利算法。</p><p>匈牙利算法主要用于解决一些与二分图匹配有关的问题，所以我们先来了解一下二分图。</p><a id="more"></a><h1 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h1><p>二分图：又称作二部图，是图论中的一种特殊模型。 设G=(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(A,B)，并且图中的每条边所关联的两个顶点i和j分别属于这两个不同的顶点集(i∈A, j∈B)，则称图G为一个二分图。</p><p>简单来说，如果图中所有顶点可以被分为两个集合，图中所有的边的头和尾不属于同一个顶点集合，而是跨越两个集合，则这个图是一个二分图。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917617/origin-of-ray/v2-81f21981c992bc0b5b1acf04b37ff6c2_r_tjxivp.png" alt></p><p>我们再看一下这个图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917884/origin-of-ray/screenshot-20230117-091101_x2bdmd.png" alt></p><p>这个图乍一看不像是二分图，但是我们转化一下他的样子，就会发现它其实还是一个二分图</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917885/origin-of-ray/screenshot-20230117-091111_oj8vev.png" alt></p><h1 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h1><h2 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h2><p><strong>匹配</strong>：在图论中，一个匹配（matching）是指一个边的集合，其中任意两条边都没有公共顶点。</p><p><strong>最大匹配</strong>：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。</p><p><strong>完美匹配</strong>：如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。完美匹配一定是最大匹配（完美匹配的任何一个点都已经匹配，添加一条新的匹配边一定会与已有的匹配边冲突），但并非每个图都存在完美匹配。</p><p><strong>交替路径</strong>：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径称为交替路径。</p><p><strong>增广路径</strong>：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路（agumenting path）。</p><p><strong>增广路径性质</strong>：</p><ol><li>P的路径长度必定为奇数，第一条边和最后一条边都不属于M，因为两个端点分属两个集合，且未匹配。</li><li>P经过取反操作可以得到一个更大的匹配M’。</li><li>M为G的最大匹配当且仅当不存在相对于M的增广路径。</li></ol><h2 id="算法基本原理"><a href="#算法基本原理" class="headerlink" title="算法基本原理"></a>算法基本原理</h2><p>匈牙利算法：利用增广路径求二分图的最大匹配算法称作匈牙利算法。（匈牙利数学家Edmonds于1965年提出）。</p><p>基本思想：通过寻找增广路径，把增广路径中的匹配边和非匹配边的相互交换，这样就会多出一条匹配边，直到找不到增广路径为止。</p><blockquote><p>这里有一点要先确定好的是，这个过程是从已有边中找匹配边和非匹配边，不能创造新的边出来</p></blockquote><p>我们以上面最后一个图为例来讲解一下整个算法的过程：</p><ol><li>从顶点a出发，按照交替路径前进，第一个非匹配边为，到达顶点e，e为非匹配点，构成增广路径。令为匹配边，顶点a，e为匹配顶点。</li><li>从顶点b出发，第一非匹配边为，到达顶点e，选择匹配边，到达a，选择非匹配边，g为非匹配点，找到一条增广路径，交换增广路径中的匹配边与非匹配边，即b-e，a-g变为匹配边，a-e变为非匹配边。</li><li>从顶点c出发，第一非匹配边为，到达顶点e，然后按照交替路径前进，到达顶点b，无法继续前进，且b已经是匹配点了，所以没有找到新的增光路径</li><li>从顶点c出发，选择第二条非匹配边</li><li>从顶点d出发，选择非匹配边，到达顶点g，选择匹配边，到达顶点a，选择非匹配边到达顶点e，选择匹配边，到达顶部b，没有可以选择的边，且没有找到增广路径</li><li>继续从顶点d出发，选择非匹配边，找到增广路径，将边变为匹配边，算法结束。</li></ol><p>最终我们的得到的结果为下图，下图中的红色线就是通过算法得到的最大匹配了：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673922535/origin-of-ray/screenshot-20230117-102841_rk6fvq.png" alt></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顶点、边的编号均从 0 开始</span></span><br><span class="line"><span class="comment">// 邻接表储存</span></span><br><span class="line"></span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> w):from(f), to(t), weight(w) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[__maxNodes]; <span class="comment">/* G[i] 存储顶点 i 出发的边的编号 */</span></span><br><span class="line">vector&lt;Edge&gt; edges;</span><br><span class="line">typedef vector&lt;<span class="keyword">int</span>&gt;::iterator iterator_t;</span><br><span class="line"><span class="keyword">int</span> num_nodes;</span><br><span class="line"><span class="keyword">int</span> num_left;</span><br><span class="line"><span class="keyword">int</span> num_right;</span><br><span class="line"><span class="keyword">int</span> num_edges;</span><br><span class="line"><span class="keyword">int</span> matching[__maxNodes]; <span class="comment">/* 存储求解结果 */</span></span><br><span class="line"><span class="keyword">int</span> check[__maxNodes];</span><br><span class="line"></span><br><span class="line"><span class="function">bool <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (iterator_t i = G[u].begin(); i != G[u].end(); ++i) &#123; <span class="comment">// 对 u 的每个邻接点</span></span><br><span class="line">        <span class="keyword">int</span> v = edges[*i].to;</span><br><span class="line">        <span class="keyword">if</span> (!check[v]) &#123;     <span class="comment">// 要求不在交替路中</span></span><br><span class="line">            check[v] = <span class="keyword">true</span>; <span class="comment">// 放入交替路</span></span><br><span class="line">            <span class="keyword">if</span> (matching[v] == -<span class="number">1</span> || dfs(matching[v])) &#123;</span><br><span class="line">                <span class="comment">// 如果是未盖点，说明交替路为增广路，则交换路径，并返回成功</span></span><br><span class="line">                matching[v] = u;</span><br><span class="line">                matching[u] = v;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 不存在增广路，返回失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    memset(matching, -<span class="number">1</span>, sizeof(matching));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">0</span>; u &lt; num_left; ++u) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matching[u] == -<span class="number">1</span>) &#123;</span><br><span class="line">            memset(check, <span class="number">0</span>, sizeof(check));</span><br><span class="line">            <span class="keyword">if</span> (dfs(u))</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="keyword">int</span> prev[__maxNodes];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    memset(matching, -<span class="number">1</span>, sizeof(matching));</span><br><span class="line">    memset(check, -<span class="number">1</span>, sizeof(check));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num_left; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matching[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">            Q.push(i);</span><br><span class="line">            prev[i] = -<span class="number">1</span>; <span class="comment">// 设 i 为路径起点</span></span><br><span class="line">            bool flag = <span class="keyword">false</span>; <span class="comment">// 尚未找到增广路</span></span><br><span class="line">            <span class="keyword">while</span> (!Q.empty() &amp;&amp; !flag) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = Q.front();</span><br><span class="line">                <span class="keyword">for</span> (iterator_t ix = G[u].begin(); ix != G[u].end() &amp;&amp; !flag; ++ix) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = edges[*ix].to;</span><br><span class="line">                    <span class="keyword">if</span> (check[v] != i) &#123;</span><br><span class="line">                        check[v] = i;</span><br><span class="line">                        Q.push(matching[v]);</span><br><span class="line">                        <span class="keyword">if</span> (matching[v] &gt;= <span class="number">0</span>) &#123; <span class="comment">// 此点为匹配点</span></span><br><span class="line">                            prev[matching[v]] = u;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 找到未匹配点，交替路变为增广路</span></span><br><span class="line">                            flag = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">int</span> d=u, e=v;</span><br><span class="line">                            <span class="keyword">while</span> (d != -<span class="number">1</span>) &#123;</span><br><span class="line">                                <span class="keyword">int</span> t = matching[d];</span><br><span class="line">                                matching[d] = e;</span><br><span class="line">                                matching[e] = d;</span><br><span class="line">                                d = prev[d];</span><br><span class="line">                                e = t;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (matching[i] != -<span class="number">1</span>) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://www.cxyxiaowu.com/874.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cxyxiaowu.com/874.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接触到这个算法是因为看到了一个题目，叫做素数伴侣。就是说给你你串数字，从中选择两个数字相加，如果他们的和是个素数，那么这一对叫做素数伴侣。然后我们需要找到这串数字中最多能找到多少对素数伴侣。&lt;/p&gt;
&lt;p&gt;这个问题的解法首先是把数字分为两部分，一部分是偶数，一部分是奇数，因为两个偶数相加或者两个奇数相加一定还是偶数，不可能是素数。&lt;/p&gt;
&lt;p&gt;于是这个问题就变成了分别从偶数中选一个，然后从奇数中选一个，看看最多选出多少对相加为素数。这个问题就用到了匈牙利算法。&lt;/p&gt;
&lt;p&gt;匈牙利算法主要用于解决一些与二分图匹配有关的问题，所以我们先来了解一下二分图。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>React Scheduler 源码解析</title>
    <link href="https://sunra.top/2023/01/05/react-scheduler/"/>
    <id>https://sunra.top/2023/01/05/react-scheduler/</id>
    <published>2023-01-05T12:31:36.000Z</published>
    <updated>2023-01-10T08:17:14.820Z</updated>
    
    <content type="html"><![CDATA[<p>之前一篇博客讲过React的更新过程，不过在那个博客中，任务调度使用的是浏览器的requestIdleCallback，而实际上React使用的自己实现的一个任务调度器，我们这次就开分析一下它的源码，以及React为什么要自己实现任务调度器。</p><p>本文基于React仓库中的16.18.6分支进行解读。</p><a id="more"></a><p>Scheduler的源码并不是很多，大概也就700多行，从作用上可以分为三部分：</p><ul><li>根据实际运行的环境差异定义 <code>requestHostCallback</code>，<code>cancelHostCallback</code>，<code>shouldYieldToHost</code>三个函数来实现任务的执行和取消。</li><li>利用上面定义的三个函数实现根据优先级调度任务</li><li>对外暴露一些接口可以添加，删除，插入一些任务</li></ul><h1 id="任务执行方法"><a href="#任务执行方法" class="headerlink" title="任务执行方法"></a>任务执行方法</h1><p>关于这段代码的作用，在源码的注释里面讲过的比较清楚了，如果不想具体了解是做了什么，可以看一下它的这注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The remaining code is essentially a polyfill for requestIdleCallback. It</span></span><br><span class="line"><span class="comment">// works by scheduling a requestAnimationFrame, storing the time for the start</span></span><br><span class="line"><span class="comment">// of the frame, then scheduling a postMessage which gets scheduled after paint.</span></span><br><span class="line"><span class="comment">// Within the postMessage handler do as much work as possible until time + frame</span></span><br><span class="line"><span class="comment">// rate. By separating the idle call into a separate event tick we ensure that</span></span><br><span class="line"><span class="comment">// layout, paint and other browser work is counted against the available time.</span></span><br><span class="line"><span class="comment">// The frame rate is dynamically adjusted.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We capture a local reference to any global, in case it gets polyfilled after</span></span><br><span class="line"><span class="comment">// this module is initially evaluated. We want to be using a</span></span><br><span class="line"><span class="comment">// consistent implementation.</span></span><br></pre></td></tr></table></figure><p>翻译一下就是：剩下的代码本质上是requestIdleCallback的填充。它的工作原理是调度requestAnimationFrame，存储帧开始的时间，然后调度绘制后调度的postMessage。在postMessage处理程序中做尽可能多的工作，直到time +帧速率。通过将空闲调用分离为一个单独的事件标记，我们确保布局、绘制和其他浏览器工作被计入可用时间。帧速率是动态调整的。我们捕获对任何全局变量的局部引用，以防它在这个模块初始计算后被填充。我们希望使用一致的实现。</p><p>接下来我们正式看一下代码，首先是几个根据当前环境判断的结果来赋值setTimeout等方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> localDate = <span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This initialization code may run even on server environments if a component</span></span><br><span class="line"><span class="comment">// just imports ReactDOM (e.g. for findDOMNode). Some environments might not</span></span><br><span class="line"><span class="comment">// have setTimeout or clearTimeout. However, we always expect them to be defined</span></span><br><span class="line"><span class="comment">// on the client. https://github.com/facebook/react/pull/13088</span></span><br><span class="line"><span class="keyword">var</span> localSetTimeout = <span class="keyword">typeof</span> setTimeout === <span class="string">'function'</span> ? setTimeout : <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> localClearTimeout =</span><br><span class="line">  <span class="keyword">typeof</span> clearTimeout === <span class="string">'function'</span> ? clearTimeout : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We don't expect either of these to necessarily be defined, but we will error</span></span><br><span class="line"><span class="comment">// later if they are missing on the client.</span></span><br><span class="line"><span class="keyword">var</span> localRequestAnimationFrame =</span><br><span class="line">  <span class="keyword">typeof</span> requestAnimationFrame === <span class="string">'function'</span></span><br><span class="line">    ? requestAnimationFrame</span><br><span class="line">    : <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> localCancelAnimationFrame =</span><br><span class="line">  <span class="keyword">typeof</span> cancelAnimationFrame === <span class="string">'function'</span> ? cancelAnimationFrame : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getCurrentTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// requestAnimationFrame does not run when the tab is in the background. If</span></span><br><span class="line"><span class="comment">// we're backgrounded we prefer for that work to happen so that the page</span></span><br><span class="line"><span class="comment">// continues to load in the background. So we also schedule a 'setTimeout' as</span></span><br><span class="line"><span class="comment">// a fallback.</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Need a better heuristic for backgrounded work.</span></span><br><span class="line"><span class="keyword">var</span> ANIMATION_FRAME_TIMEOUT = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> rAFID;</span><br><span class="line"><span class="keyword">var</span> rAFTimeoutID;</span><br><span class="line"><span class="keyword">var</span> requestAnimationFrameWithTimeout = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// schedule rAF and also a setTimeout</span></span><br><span class="line">  rAFID = localRequestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// cancel the setTimeout</span></span><br><span class="line">    localClearTimeout(rAFTimeoutID);</span><br><span class="line">    callback(timestamp);</span><br><span class="line">  &#125;);</span><br><span class="line">  rAFTimeoutID = localSetTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// cancel the requestAnimationFrame</span></span><br><span class="line">    localCancelAnimationFrame(rAFID);</span><br><span class="line">    callback(getCurrentTime());</span><br><span class="line">  &#125;, ANIMATION_FRAME_TIMEOUT);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hasNativePerformanceNow) &#123;</span><br><span class="line">  <span class="keyword">var</span> Performance = performance;</span><br><span class="line">  getCurrentTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Performance.now();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  getCurrentTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localDate.now();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后根据运行环境不同，定义 <code>requestHostCallback</code>，<code>cancelHostCallback</code>，<code>shouldYieldToHost</code>三个函数</p><h2 id="Mock环境"><a href="#Mock环境" class="headerlink" title="Mock环境"></a>Mock环境</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> requestHostCallback;</span><br><span class="line"><span class="keyword">var</span> cancelHostCallback;</span><br><span class="line"><span class="keyword">var</span> shouldYieldToHost;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> globalValue = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  globalValue = <span class="built_in">window</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> global !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  globalValue = global;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (globalValue &amp;&amp; globalValue._schedMock) &#123;</span><br><span class="line">  <span class="comment">// Dynamic injection, only for testing purposes.</span></span><br><span class="line">  <span class="keyword">var</span> globalImpl = globalValue._schedMock;</span><br><span class="line">  requestHostCallback = globalImpl[<span class="number">0</span>];</span><br><span class="line">  cancelHostCallback = globalImpl[<span class="number">1</span>];</span><br><span class="line">  shouldYieldToHost = globalImpl[<span class="number">2</span>];</span><br><span class="line">  getCurrentTime = globalImpl[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说我们给全局对象挂载了<code>_schedMock</code>对象，就会进入mock的判断，然后使用我们传入的方法来定义任务执行需要的几个函数。</p><h2 id="非浏览环境或者不支持MessageChannel时"><a href="#非浏览环境或者不支持MessageChannel时" class="headerlink" title="非浏览环境或者不支持MessageChannel时"></a>非浏览环境或者不支持MessageChannel时</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">  <span class="comment">// If Scheduler runs in a non-DOM environment, it falls back to a naive</span></span><br><span class="line">  <span class="comment">// implementation using setTimeout.</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span> ||</span><br><span class="line">  <span class="comment">// Check if MessageChannel is supported, too.</span></span><br><span class="line">  <span class="keyword">typeof</span> MessageChannel !== <span class="string">'function'</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,</span></span><br><span class="line">  <span class="comment">// fallback to a naive implementation.</span></span><br><span class="line">  <span class="keyword">var</span> _callback = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> _flushCallback = <span class="function"><span class="keyword">function</span>(<span class="params">didTimeout</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        _callback(didTimeout);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        _callback = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  requestHostCallback = <span class="function"><span class="keyword">function</span>(<span class="params">cb, ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Protect against re-entrancy.</span></span><br><span class="line">      setTimeout(requestHostCallback, <span class="number">0</span>, cb);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _callback = cb;</span><br><span class="line">      setTimeout(_flushCallback, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  cancelHostCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _callback = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  shouldYieldToHost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码做了如下几件事：</p><ul><li>声明了一个新的变量<code>_callback</code>,用于存储当前正在执行的callback</li><li><code>_flushCallback</code>函数，当<code>_callback</code>不为空时，执行<code>_callback</code>，然后讲<code>_callback</code>置为空，表明当前没有正在执行的任务，可以执行其他的任务了</li><li><code>requestHostCallback</code>函数，先是判断<code>_callback</code>是否为空，如果不为空，说明当前有正在执行的任务，那么就利用setTimeout来添加一个宏任务，继续执行<code>requestHostCallback</code>本身，这里虽然看起来像是递归调用，但是因为使用的是setTimeout，其实调用栈并不会增长。如果<code>_callback</code>为空，说明当前没有正在执行的任务，那么先赋值<code>_callback</code>，再添加宏任务去执行<code>_flushCallback</code>。</li><li><code>cancelHostCallback</code>函数则是将<code>_callback</code>置为空，取消当前的任务。其实如果当前的任务已经加入了宏任务队列，通过这种方式是没法取消的，但注意，我们宏任务队列中加入的是<code>_flushCallback</code>函数，如果<code>_callback</code>为空，其实什么都不会做。</li><li><code>shouldYieldToHost</code>在这种情况下一定返回false。</li></ul><p>总的来说，<code>requestHostCallback</code>是每次都会判断当前有没有<code>_callback</code>在执行，如果有就等等（这个等也是通过宏任务回调自己的方式来实现的），如果没有就添加一个宏任务，最终都会添加一个宏任务去执行<code>_flushCallback</code>，也就是说，理论上当有一个<code>_callback</code>在执行的时候，其他的<code>requestHostCallback</code>都在通过宏任务排队，最终执行的顺序也是<code>requestHostCallback</code>的顺序。</p><p>但是如果在<code>requestHostCallback</code>成功添加宏任务之后，执行添加的宏任务之前，清空微任务队列的时候，调用了<code>cancelHostCallback</code>，那其实在执行<code>_flushCallback</code>的时候就什么都不会做，具体可以看一下下图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1672979542/origin-of-ray/screenshot-20230106-123045_zosxud.png" alt></p><p>上图中的每一个方框都代表一个宏任务，方块中有两个信息，一个是当前宏任务执行的函数，一个是当前<code>_callback</code>的值是多少。</p><p>第一行表明的是正常情况，我们请求了两个任务，然后依次执行。第二行的是特殊情况，在执行<code>_flushCallback</code>之前cancel掉会发生什么</p><h2 id="浏览器环境且支持MessageChannel"><a href="#浏览器环境且支持MessageChannel" class="headerlink" title="浏览器环境且支持MessageChannel"></a>浏览器环境且支持MessageChannel</h2><p>首先是打印报错信息，如果当前环境不支持requestAnimationFrame会打印报错信息，但也只是打印报错信息而已。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Remove fb.me link</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> localRequestAnimationFrame !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(</span><br><span class="line">      <span class="string">"This browser doesn't support requestAnimationFrame. "</span> +</span><br><span class="line">        <span class="string">'Make sure that you load a '</span> +</span><br><span class="line">        <span class="string">'polyfill in older browsers. https://fb.me/react-polyfills'</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> localCancelAnimationFrame !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(</span><br><span class="line">      <span class="string">"This browser doesn't support cancelAnimationFrame. "</span> +</span><br><span class="line">        <span class="string">'Make sure that you load a '</span> +</span><br><span class="line">        <span class="string">'polyfill in older browsers. https://fb.me/react-polyfills'</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是几个变量，理解这几个变量的作用对于理解接下来的代码比较重要：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scheduledHostCallback = <span class="literal">null</span>; <span class="comment">// 当前正在执行的任务，可以类比为上面的_callback</span></span><br><span class="line"><span class="keyword">var</span> isMessageEventScheduled = <span class="literal">false</span>; <span class="comment">// 是否有正在处理的MessageChannel消息</span></span><br><span class="line"><span class="keyword">var</span> timeoutTime = <span class="number">-1</span>; <span class="comment">// 当然任务的超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isAnimationFrameScheduled = <span class="literal">false</span>; <span class="comment">// 是否有任务被requestAnimationFrame加入宏任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isFlushingHostCallback = <span class="literal">false</span>; <span class="comment">// 是否有任务正在执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> frameDeadline = <span class="number">0</span>; <span class="comment">// 记录当前帧的到期时间，他等于rafTime + activeFrameTime，也就是requestAnimationFrame回调传入的时间，加上一帧的时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We start out assuming that we run at 30fps but then the heuristic tracking</span></span><br><span class="line"><span class="comment">// will adjust this value to a faster fps if we get more frequent animation</span></span><br><span class="line"><span class="comment">// frames.</span></span><br><span class="line"><span class="keyword">var</span> previousFrameTime = <span class="number">33</span>;</span><br><span class="line"><span class="keyword">var</span> activeFrameTime = <span class="number">33</span>;</span><br></pre></td></tr></table></figure><p>理解了这几个变量之后，我们看一下几个工具函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animationTick = <span class="function"><span class="keyword">function</span>(<span class="params">rafTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (scheduledHostCallback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Eagerly schedule the next animation callback at the beginning of the</span></span><br><span class="line">    <span class="comment">// frame. If the scheduler queue is not empty at the end of the frame, it</span></span><br><span class="line">    <span class="comment">// will continue flushing inside that callback. If the queue *is* empty,</span></span><br><span class="line">    <span class="comment">// then it will exit immediately. Posting the callback at the start of the</span></span><br><span class="line">    <span class="comment">// frame ensures it's fired within the earliest possible frame. If we</span></span><br><span class="line">    <span class="comment">// waited until the end of the frame to post the callback, we risk the</span></span><br><span class="line">    <span class="comment">// browser skipping a frame and not firing the callback until the frame</span></span><br><span class="line">    <span class="comment">// after that.</span></span><br><span class="line">    requestAnimationFrameWithTimeout(animationTick);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No pending work. Exit.</span></span><br><span class="line">    isAnimationFrameScheduled = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nextFrameTime = rafTime - frameDeadline + activeFrameTime;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    nextFrameTime &lt; activeFrameTime &amp;&amp;</span><br><span class="line">    previousFrameTime &lt; activeFrameTime</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextFrameTime &lt; <span class="number">8</span>) &#123;</span><br><span class="line">      <span class="comment">// Defensive coding. We don't support higher frame rates than 120hz.</span></span><br><span class="line">      <span class="comment">// If the calculated frame time gets lower than 8, it is probably a bug.</span></span><br><span class="line">      nextFrameTime = <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If one frame goes long, then the next one can be short to catch up.</span></span><br><span class="line">    <span class="comment">// If two frames are short in a row, then that's an indication that we</span></span><br><span class="line">    <span class="comment">// actually have a higher frame rate than what we're currently optimizing.</span></span><br><span class="line">    <span class="comment">// We adjust our heuristic dynamically accordingly. For example, if we're</span></span><br><span class="line">    <span class="comment">// running on 120hz display or 90hz VR display.</span></span><br><span class="line">    <span class="comment">// Take the max of the two in case one of them was an anomaly due to</span></span><br><span class="line">    <span class="comment">// missed frame deadlines.</span></span><br><span class="line">    activeFrameTime =</span><br><span class="line">      nextFrameTime &lt; previousFrameTime ? previousFrameTime : nextFrameTime;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    previousFrameTime = nextFrameTime;</span><br><span class="line">  &#125;</span><br><span class="line">  frameDeadline = rafTime + activeFrameTime;</span><br><span class="line">  <span class="keyword">if</span> (!isMessageEventScheduled) &#123;</span><br><span class="line">    isMessageEventScheduled = <span class="literal">true</span>;</span><br><span class="line">    port.postMessage(<span class="literal">undefined</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个方法主要就是做了两件事：</p><ul><li>只要<code>scheduledHostCallback</code>不为空，就说明当前有任务在执行，就不断通过<code>requestAnimationFrameWithTimeout</code>继续调用自身来重新计算每一帧的用时，也就是更新<code>previousFrameTime</code>和<code>activeFrameTime</code>，如果当前的<code>scheduledHostCallback</code>为空，那就直接return，也就是停止更新每一帧的用时。</li><li>同时每次执行过程中，如果<code>isMessageEventScheduled</code>为false，那就触发一次MessageChannel的消息。</li></ul><p>然后是MessageChannel的处理消息的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">channel.port1.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  isMessageEventScheduled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> prevScheduledCallback = scheduledHostCallback;</span><br><span class="line">  <span class="keyword">var</span> prevTimeoutTime = timeoutTime;</span><br><span class="line">  scheduledHostCallback = <span class="literal">null</span>;</span><br><span class="line">  timeoutTime = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentTime = getCurrentTime();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> didTimeout = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (frameDeadline - currentTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// There's no time left in this idle period. Check if the callback has</span></span><br><span class="line">    <span class="comment">// a timeout and whether it's been exceeded.</span></span><br><span class="line">    <span class="keyword">if</span> (prevTimeoutTime !== <span class="number">-1</span> &amp;&amp; prevTimeoutTime &lt;= currentTime) &#123;</span><br><span class="line">      <span class="comment">// Exceeded the timeout. Invoke the callback even though there's no</span></span><br><span class="line">      <span class="comment">// time left.</span></span><br><span class="line">      didTimeout = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// No timeout.</span></span><br><span class="line">      <span class="keyword">if</span> (!isAnimationFrameScheduled) &#123;</span><br><span class="line">        <span class="comment">// Schedule another animation callback so we retry later.</span></span><br><span class="line">        isAnimationFrameScheduled = <span class="literal">true</span>;</span><br><span class="line">        requestAnimationFrameWithTimeout(animationTick);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Exit without invoking the callback.</span></span><br><span class="line">      scheduledHostCallback = prevScheduledCallback;</span><br><span class="line">      timeoutTime = prevTimeoutTime;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prevScheduledCallback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    isFlushingHostCallback = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      prevScheduledCallback(didTimeout);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isFlushingHostCallback = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个处理函数主要做的事情是：</p><ul><li>判断当前时间是否已经超过了这一帧我们的规定的结束时间<ul><li>如果超过了判断当前任务是否有timeout并且已经开始执行了<ul><li>如果有并且开始执行了，那就继续执行完</li><li>如果没有，那就下一帧再执行下一个任务</li></ul></li></ul></li></ul><p>现在我们可以看一下这个条件下的任务执行函数了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">requestHostCallback = <span class="function"><span class="keyword">function</span>(<span class="params">callback, absoluteTimeout</span>) </span>&#123;</span><br><span class="line">  scheduledHostCallback = callback;</span><br><span class="line">  timeoutTime = absoluteTimeout;</span><br><span class="line">  <span class="keyword">if</span> (isFlushingHostCallback || absoluteTimeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Don't wait for the next frame. Continue working ASAP, in a new event.</span></span><br><span class="line">    port.postMessage(<span class="literal">undefined</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isAnimationFrameScheduled) &#123;</span><br><span class="line">    <span class="comment">// If rAF didn't already schedule one, we need to schedule a frame.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> If this rAF doesn't materialize because the browser throttles, we</span></span><br><span class="line">    <span class="comment">// might want to still have setTimeout trigger rIC as a backup to ensure</span></span><br><span class="line">    <span class="comment">// that we keep performing work.</span></span><br><span class="line">    isAnimationFrameScheduled = <span class="literal">true</span>;</span><br><span class="line">    requestAnimationFrameWithTimeout(animationTick);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cancelHostCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  scheduledHostCallback = <span class="literal">null</span>;</span><br><span class="line">  isMessageEventScheduled = <span class="literal">false</span>;</span><br><span class="line">  timeoutTime = <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="利用上面定义的三个函数实现根据优先级调度任务"><a href="#利用上面定义的三个函数实现根据优先级调度任务" class="headerlink" title="利用上面定义的三个函数实现根据优先级调度任务"></a>利用上面定义的三个函数实现根据优先级调度任务</h1><p>首先是声明部分变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ImmediatePriority = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> UserBlockingPriority = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> NormalPriority = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> LowPriority = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> IdlePriority = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Max 31 bit integer. The max integer size in V8 for 32-bit systems.</span></span><br><span class="line"><span class="comment">// Math.pow(2, 30) - 1</span></span><br><span class="line"><span class="comment">// 0b111111111111111111111111111111</span></span><br><span class="line"><span class="keyword">var</span> maxSigned31BitInt = <span class="number">1073741823</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Times out immediately</span></span><br><span class="line"><span class="keyword">var</span> IMMEDIATE_PRIORITY_TIMEOUT = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// Eventually times out</span></span><br><span class="line"><span class="keyword">var</span> USER_BLOCKING_PRIORITY = <span class="number">250</span>;</span><br><span class="line"><span class="keyword">var</span> NORMAL_PRIORITY_TIMEOUT = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">var</span> LOW_PRIORITY_TIMEOUT = <span class="number">10000</span>;</span><br><span class="line"><span class="comment">// Never times out</span></span><br><span class="line"><span class="keyword">var</span> IDLE_PRIORITY = maxSigned31BitInt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Callbacks are stored as a circular, doubly linked list.</span></span><br><span class="line"><span class="keyword">var</span> firstCallbackNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentDidTimeout = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// Pausing the scheduler is useful for debugging.</span></span><br><span class="line"><span class="keyword">var</span> isSchedulerPaused = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentPriorityLevel = NormalPriority;</span><br><span class="line"><span class="keyword">var</span> currentEventStartTime = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">var</span> currentExpirationTime = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is set when a callback is being executed, to prevent re-entrancy.</span></span><br><span class="line"><span class="keyword">var</span> isExecutingCallback = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isHostCallbackScheduled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasNativePerformanceNow =</span><br><span class="line">  <span class="keyword">typeof</span> performance === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> performance.now === <span class="string">'function'</span>;</span><br></pre></td></tr></table></figure><h2 id="flushFirstCallback"><a href="#flushFirstCallback" class="headerlink" title="flushFirstCallback"></a>flushFirstCallback</h2><p>首先明白一点，所有的callbackNode组成的是一个双向的环，也就是说每个node都有previous和next，并且最后一个node的next是第一个节点，第一个节点的previous是最后一个节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushFirstCallback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 保存firstCallbackNode为flushedNode等会使用</span></span><br><span class="line">  <span class="keyword">var</span> flushedNode = firstCallbackNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove the node from the list before calling the callback. That way the</span></span><br><span class="line">  <span class="comment">// list is in a consistent state even if the callback throws.</span></span><br><span class="line">  <span class="keyword">var</span> next = firstCallbackNode.next;</span><br><span class="line">  <span class="keyword">if</span> (firstCallbackNode === next) &#123;</span><br><span class="line">    <span class="comment">// This is the last callback in the list.</span></span><br><span class="line">    firstCallbackNode = <span class="literal">null</span>;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 通过让firstCallbackNode的previous指向firstCallbackNode的next来将firstCallbackNode从任务环中删除</span></span><br><span class="line">    <span class="comment">// 同时让firstCallbackNode指向下一个节点</span></span><br><span class="line">    <span class="keyword">var</span> lastCallbackNode = firstCallbackNode.previous;</span><br><span class="line">    firstCallbackNode = lastCallbackNode.next = next;</span><br><span class="line">    next.previous = lastCallbackNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// flushedNode为当前要执行的任务节点</span></span><br><span class="line">  flushedNode.next = flushedNode.previous = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now it's safe to call the callback.</span></span><br><span class="line">  <span class="comment">// 执行当前节点的callback</span></span><br><span class="line">  <span class="keyword">var</span> callback = flushedNode.callback;</span><br><span class="line">  <span class="keyword">var</span> expirationTime = flushedNode.expirationTime;</span><br><span class="line">  <span class="keyword">var</span> priorityLevel = flushedNode.priorityLevel;</span><br><span class="line">  <span class="keyword">var</span> previousPriorityLevel = currentPriorityLevel;</span><br><span class="line">  <span class="keyword">var</span> previousExpirationTime = currentExpirationTime;</span><br><span class="line">  currentPriorityLevel = priorityLevel;</span><br><span class="line">  currentExpirationTime = expirationTime;</span><br><span class="line">  <span class="keyword">var</span> continuationCallback;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    continuationCallback = callback();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    currentPriorityLevel = previousPriorityLevel;</span><br><span class="line">    currentExpirationTime = previousExpirationTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A callback may return a continuation. The continuation should be scheduled</span></span><br><span class="line">  <span class="comment">// with the same priority and expiration as the just-finished callback.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> continuationCallback === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> continuationNode: CallbackNode = &#123;</span><br><span class="line">      callback: continuationCallback,</span><br><span class="line">      priorityLevel,</span><br><span class="line">      expirationTime,</span><br><span class="line">      next: <span class="literal">null</span>,</span><br><span class="line">      previous: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Insert the new callback into the list, sorted by its expiration. This is</span></span><br><span class="line">    <span class="comment">// almost the same as the code in `scheduleCallback`, except the callback</span></span><br><span class="line">    <span class="comment">// is inserted into the list *before* callbacks of equal expiration instead</span></span><br><span class="line">    <span class="comment">// of after.</span></span><br><span class="line">    <span class="keyword">if</span> (firstCallbackNode === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// This is the first callback in the list.</span></span><br><span class="line">      firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> nextAfterContinuation = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">var</span> node = firstCallbackNode;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.expirationTime &gt;= expirationTime) &#123;</span><br><span class="line">          <span class="comment">// This callback expires at or after the continuation. We will insert</span></span><br><span class="line">          <span class="comment">// the continuation *before* this callback.</span></span><br><span class="line">          nextAfterContinuation = node;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.next;</span><br><span class="line">      &#125; <span class="keyword">while</span> (node !== firstCallbackNode);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nextAfterContinuation === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No equal or lower priority callback was found, which means the new</span></span><br><span class="line">        <span class="comment">// callback is the lowest priority callback in the list.</span></span><br><span class="line">        nextAfterContinuation = firstCallbackNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nextAfterContinuation === firstCallbackNode) &#123;</span><br><span class="line">        <span class="comment">// The new callback is the highest priority callback in the list.</span></span><br><span class="line">        firstCallbackNode = continuationNode;</span><br><span class="line">        ensureHostCallbackIsScheduled();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> previous = nextAfterContinuation.previous;</span><br><span class="line">      previous.next = nextAfterContinuation.previous = continuationNode;</span><br><span class="line">      continuationNode.next = nextAfterContinuation;</span><br><span class="line">      continuationNode.previous = previous;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码主要做了如下几件事：</p><ul><li>从任务节点的双向环中找出<code>firstCallbackNode</code>指向的节点，把它从环中取出来并执行</li><li>如果执行的结果还是一个函数，也就是说callback返回了一个函数，那么就用返回的函数创建一个callbackNode，然后把它插入到环中，具体的位置就是代码中<code>nextAfterContinuation</code>节点之前，具体<code>nextAfterContinuation</code>如何得到的可以看上面的源码<ul><li>这里需要注意的一点是，如果<code>nextAfterContinuation</code>是<code>firstCallbackNode</code>，也就是说当前callback返回的函数所创建的新的任务节点需要插入到<code>firstCallbackNode</code>之前的时候，需要执行<code>ensureHostCallbackIsScheduled</code></li></ul></li></ul><h2 id="ensureHostCallbackIsScheduled"><a href="#ensureHostCallbackIsScheduled" class="headerlink" title="ensureHostCallbackIsScheduled"></a>ensureHostCallbackIsScheduled</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureHostCallbackIsScheduled</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isExecutingCallback) &#123;</span><br><span class="line">    <span class="comment">// Don't schedule work yet; wait until the next time we yield.</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Schedule the host callback using the earliest expiration in the list.</span></span><br><span class="line">  <span class="keyword">var</span> expirationTime = firstCallbackNode.expirationTime;</span><br><span class="line">  <span class="keyword">if</span> (!isHostCallbackScheduled) &#123;</span><br><span class="line">    isHostCallbackScheduled = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Cancel the existing host callback.</span></span><br><span class="line">    cancelHostCallback();</span><br><span class="line">  &#125;</span><br><span class="line">  requestHostCallback(flushWork, expirationTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数就是如果当前正在执行某个callback，也就是<code>isExecutingCallback</code>为true，就什么都不做。否则就取消当前的hostcallback，然后把flushWork加入任务队列中</p><h2 id="flushWork"><a href="#flushWork" class="headerlink" title="flushWork"></a>flushWork</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushWork</span>(<span class="params">didTimeout</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Exit right away if we're currently paused</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerDebugging &amp;&amp; isSchedulerPaused) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isExecutingCallback = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> previousDidTimeout = currentDidTimeout;</span><br><span class="line">  currentDidTimeout = didTimeout;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (didTimeout) &#123;</span><br><span class="line">      <span class="comment">// Flush all the expired callbacks without yielding.</span></span><br><span class="line">      <span class="keyword">while</span> (</span><br><span class="line">        firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        !(enableSchedulerDebugging &amp;&amp; isSchedulerPaused)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// TODO Wrap in feature flag</span></span><br><span class="line">        <span class="comment">// Read the current time. Flush all the callbacks that expire at or</span></span><br><span class="line">        <span class="comment">// earlier than that time. Then read the current time again and repeat.</span></span><br><span class="line">        <span class="comment">// This optimizes for as few performance.now calls as possible.</span></span><br><span class="line">        <span class="keyword">var</span> currentTime = getCurrentTime();</span><br><span class="line">        <span class="keyword">if</span> (firstCallbackNode.expirationTime &lt;= currentTime) &#123;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">            flushFirstCallback();</span><br><span class="line">          &#125; <span class="keyword">while</span> (</span><br><span class="line">            firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            firstCallbackNode.expirationTime &lt;= currentTime &amp;&amp;</span><br><span class="line">            !(enableSchedulerDebugging &amp;&amp; isSchedulerPaused)</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Keep flushing callbacks until we run out of time in the frame.</span></span><br><span class="line">      <span class="keyword">if</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (enableSchedulerDebugging &amp;&amp; isSchedulerPaused) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          flushFirstCallback();</span><br><span class="line">        &#125; <span class="keyword">while</span> (firstCallbackNode !== <span class="literal">null</span> &amp;&amp; !shouldYieldToHost());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    isExecutingCallback = <span class="literal">false</span>;</span><br><span class="line">    currentDidTimeout = previousDidTimeout;</span><br><span class="line">    <span class="keyword">if</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// There's still work remaining. Request another callback.</span></span><br><span class="line">      ensureHostCallbackIsScheduled();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      isHostCallbackScheduled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Before exiting, flush all the immediate work that was scheduled.</span></span><br><span class="line">    flushImmediateWork();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码直接看注释就好，然后<code>flushImmediateWork</code>的作用其实也是注释里说的，运行所有优先级为immediate的任务</p><h2 id="flushImmediateWork"><a href="#flushImmediateWork" class="headerlink" title="flushImmediateWork"></a>flushImmediateWork</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushImmediateWork</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// Confirm we've exited the outer most event handler</span></span><br><span class="line">    currentEventStartTime === <span class="number">-1</span> &amp;&amp;</span><br><span class="line">    firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    firstCallbackNode.priorityLevel === ImmediatePriority</span><br><span class="line">  ) &#123;</span><br><span class="line">    isExecutingCallback = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        flushFirstCallback();</span><br><span class="line">      &#125; <span class="keyword">while</span> (</span><br><span class="line">        <span class="comment">// Keep flushing until there are no more immediate callbacks</span></span><br><span class="line">        firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        firstCallbackNode.priorityLevel === ImmediatePriority</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isExecutingCallback = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// There's still work remaining. Request another callback.</span></span><br><span class="line">        ensureHostCallbackIsScheduled();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isHostCallbackScheduled = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对外暴露的方法"><a href="#对外暴露的方法" class="headerlink" title="对外暴露的方法"></a>对外暴露的方法</h1><p>这里我们主要讲两个方法，一个是<code>unstable_scheduleCallback</code>，一个是<code>unstable_cancelCallback</code></p><h2 id="unstable-scheduleCallback"><a href="#unstable-scheduleCallback" class="headerlink" title="unstable_scheduleCallback"></a>unstable_scheduleCallback</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unstable_scheduleCallback</span>(<span class="params">callback, deprecated_options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> startTime =</span><br><span class="line">    currentEventStartTime !== <span class="number">-1</span> ? currentEventStartTime : getCurrentTime();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> expirationTime;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> deprecated_options === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">    deprecated_options !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> deprecated_options.timeout === <span class="string">'number'</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> Remove this branch once we lift expiration times out of React.</span></span><br><span class="line">    expirationTime = startTime + deprecated_options.timeout;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (currentPriorityLevel) &#123;</span><br><span class="line">      <span class="keyword">case</span> ImmediatePriority:</span><br><span class="line">        expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> UserBlockingPriority:</span><br><span class="line">        expirationTime = startTime + USER_BLOCKING_PRIORITY;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> IdlePriority:</span><br><span class="line">        expirationTime = startTime + IDLE_PRIORITY;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> LowPriority:</span><br><span class="line">        expirationTime = startTime + LOW_PRIORITY_TIMEOUT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> NormalPriority:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newNode = &#123;</span><br><span class="line">    callback,</span><br><span class="line">    priorityLevel: currentPriorityLevel,</span><br><span class="line">    expirationTime,</span><br><span class="line">    next: <span class="literal">null</span>,</span><br><span class="line">    previous: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Insert the new callback into the list, ordered first by expiration, then</span></span><br><span class="line">  <span class="comment">// by insertion. So the new callback is inserted any other callback with</span></span><br><span class="line">  <span class="comment">// equal expiration.</span></span><br><span class="line">  <span class="keyword">if</span> (firstCallbackNode === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// This is the first callback in the list.</span></span><br><span class="line">    firstCallbackNode = newNode.next = newNode.previous = newNode;</span><br><span class="line">    ensureHostCallbackIsScheduled();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> node = firstCallbackNode;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.expirationTime &gt; expirationTime) &#123;</span><br><span class="line">        <span class="comment">// The new callback expires before this one.</span></span><br><span class="line">        next = node;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (node !== firstCallbackNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// No callback with a later expiration was found, which means the new</span></span><br><span class="line">      <span class="comment">// callback has the latest expiration in the list.</span></span><br><span class="line">      next = firstCallbackNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next === firstCallbackNode) &#123;</span><br><span class="line">      <span class="comment">// The new callback has the earliest expiration in the entire list.</span></span><br><span class="line">      firstCallbackNode = newNode;</span><br><span class="line">      ensureHostCallbackIsScheduled();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> previous = next.previous;</span><br><span class="line">    previous.next = next.previous = newNode;</span><br><span class="line">    newNode.next = next;</span><br><span class="line">    newNode.previous = previous;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来很长，其实就是做了两件事：</p><ul><li>创建一个新的callbackNode</li><li>将新的callbackNode根据时间和优先级加入到callbackNode的双向环中</li></ul><h2 id="unstable-cancelCallback"><a href="#unstable-cancelCallback" class="headerlink" title="unstable_cancelCallback"></a>unstable_cancelCallback</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unstable_cancelCallback</span>(<span class="params">callbackNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> next = callbackNode.next;</span><br><span class="line">  <span class="keyword">if</span> (next === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Already cancelled.</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (next === callbackNode) &#123;</span><br><span class="line">    <span class="comment">// This is the only scheduled callback. Clear the list.</span></span><br><span class="line">    firstCallbackNode = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Remove the callback from its position in the list.</span></span><br><span class="line">    <span class="keyword">if</span> (callbackNode === firstCallbackNode) &#123;</span><br><span class="line">      firstCallbackNode = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> previous = callbackNode.previous;</span><br><span class="line">    previous.next = next;</span><br><span class="line">    next.previous = previous;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  callbackNode.next = callbackNode.previous = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个也比较简单，就是从callbackNode的双向环中找出要取消的任务，然后从环中把它去掉。</p><blockquote><p>最新版本的Scheduler的主要改动是：已经不是使用双向链表的方式存储所有任务了，而是使用了两个最小堆，分别叫timerQueue和taskQueue，任务会先放到timerQueue中，每次执行完taskQueue中的任务后，后检查timerQueue中有没有已经到期的任务，如果有，放入taskQueue中，然后重新开始遍历执行taskQueue中的任务，遍历过程中如果需要yield就暂时退出，然后开启设置宏任务下次继续执行</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前一篇博客讲过React的更新过程，不过在那个博客中，任务调度使用的是浏览器的requestIdleCallback，而实际上React使用的自己实现的一个任务调度器，我们这次就开分析一下它的源码，以及React为什么要自己实现任务调度器。&lt;/p&gt;
&lt;p&gt;本文基于React仓库中的16.18.6分支进行解读。&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://sunra.top/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>二分法解决有界区间的最值问题</title>
    <link href="https://sunra.top/2023/01/04/leetcode-1802/"/>
    <id>https://sunra.top/2023/01/04/leetcode-1802/</id>
    <published>2023-01-04T03:35:40.000Z</published>
    <updated>2023-01-04T06:51:13.209Z</updated>
    
    <content type="html"><![CDATA[<p>最近在leetcode上遇到了几个问题都是采用二分法来解决的，总结了一下其中的规律，简单来说，<strong>如果是要从有界区间中寻找符合条件的最大值或者最小值，可以考虑采用二分法</strong>，不过不是基础的二分法，而是不断寻找左侧边界或者右侧边界的二分法。</p><a id="more"></a><p>关于寻找左侧边界或者右侧边界的二分法，可以看我之前的博客：<a href="https://sunra.top/2020/04/05/binary-search/">魔鬼的二分查找</a></p><p>例题链接为：<a href="https://leetcode.cn/problems/maximum-value-at-a-given-index-in-a-bounded-array/" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.cn/problems/maximum-value-at-a-given-index-in-a-bounded-array/</a></p><p>个人解题代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">maxSum</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params">maxNum, maxSum, leftLength, rightLength</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> left = <span class="built_in">Math</span>.min(leftLength, maxNum);</span><br><span class="line">    <span class="keyword">const</span> right = <span class="built_in">Math</span>.min(rightLength, maxNum);</span><br><span class="line">    <span class="keyword">const</span> leftMinSum = left * maxNum - left * (left - <span class="number">1</span>) / <span class="number">2</span> + <span class="built_in">Math</span>.max(<span class="number">0</span>, leftLength - maxNum);</span><br><span class="line">    <span class="keyword">const</span> rightMinSum = right * maxNum - right * (right - <span class="number">1</span>) / <span class="number">2</span> + <span class="built_in">Math</span>.max(<span class="number">0</span>, rightLength - maxNum);</span><br><span class="line">    <span class="keyword">return</span> leftMinSum + rightMinSum - maxNum &lt;= maxSum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maxValue = <span class="function"><span class="keyword">function</span>(<span class="params">n, index, maxSum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = maxSum;</span><br><span class="line">    <span class="keyword">const</span> leftLength = index + <span class="number">1</span>, rightLength = n - index;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (isValid(mid, maxSum, leftLength, rightLength)) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> right &gt;= <span class="number">0</span> ? right : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在leetcode上遇到了几个问题都是采用二分法来解决的，总结了一下其中的规律，简单来说，&lt;strong&gt;如果是要从有界区间中寻找符合条件的最大值或者最小值，可以考虑采用二分法&lt;/strong&gt;，不过不是基础的二分法，而是不断寻找左侧边界或者右侧边界的二分法。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 设计模式学习与实践（四）</title>
    <link href="https://sunra.top/2022/12/30/javascript-design-pattern-4/"/>
    <id>https://sunra.top/2022/12/30/javascript-design-pattern-4/</id>
    <published>2022-12-30T06:39:02.000Z</published>
    <updated>2022-12-30T13:41:40.818Z</updated>
    
    <content type="html"><![CDATA[<p>本文我们总结JavaScript中的命令模式，组合模式和模版方法。这几个模式比较相似。</p><a id="more"></a><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p>假设有一个快餐店，而我是该餐厅的点餐服务员，那么我一天的工作应该是这样的，当某位客人点餐后，需要把他的需求都写在清单上，然后交给厨房。客人不需要关心是哪些厨师帮他们炒菜。餐厅还可以满足客人需要的定时服务，如客人可能当前正在回家的路上，要求一个小时后才开始炒菜，只要订单还在，厨师就不会忘记。客人可以很方便地取消订单，当有太多客人的时候，也可以按照订单顺序排队。</p><p>命令模式最常见的应用场景是：<strong>有时候需要向某些对象发送请求，但是并不知道请求的接受者是谁，也不知道被请求的操作是什么。此时希望通过一种松耦合的方式来设计程序，使得请求发送者和接受者能够消除彼此之间的耦合关系</strong>。</p><blockquote><p>从消除耦合关系这一点讲，其实命令模式和发布订阅模式有着相似的目的。命令模式更关注的是根据不同的命令对象执行不同的命令操作，而发布订阅模式则更加关注改变程序之间的消息传递机制。</p></blockquote><p>拿订餐来说，客人需要向厨师发送请求，但是完全不知道这些厨师的名字和联系方式，也不知道厨师炒菜的方式和步骤。命令模式把客人订餐的请求封装成command对象，也就是订餐对象中的订单对象。这个对象可以在程序中四处传递，就像订单可以从服务员手中传到厨师的手中。这样一来，客户不需要知道厨师的名字，从而解开了请求调用者和接收者之间的耦合关系。</p><h2 id="命令模式的例子——菜单程序"><a href="#命令模式的例子——菜单程序" class="headerlink" title="命令模式的例子——菜单程序"></a>命令模式的例子——菜单程序</h2><p>设计模式的主题总是把不变的事物和变化的事物分离开来，命令模式也不例外。按下按钮之后会发生的一些事情是不变的，而具体发生什么事情是可变的。通过command对象的帮助，我们可以轻易改变这种关联，因此也可以在将来再次改变按钮的行文。</p><p>我们先绘制几个按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button1"</span>&gt;</span>点击按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button2"</span>&gt;</span>点击按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button3"</span>&gt;</span>点击按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById(<span class="string">'button1'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> button2 = <span class="built_in">document</span>.getElementById(<span class="string">'button2'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> button3 = <span class="built_in">document</span>.getElementById(<span class="string">'button3'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来定义setCommand函数，该函数负责往按钮上安装命令。可以肯定的是，点击按钮会执行某个command命令，执行命令的动作会被约定为调用command的execute方法，虽然还不知道这些命令究竟代表什么操作，但负责绘制按钮的程序员不关系这些事情，他只需要预留好安装命令的接口，command对象自知道如何正确的和对象沟通。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">button, command</span>) </span>&#123;</span><br><span class="line">    button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，负责编写点击按钮具体操作的程序员上交了他们的成果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">    refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'刷新菜单目录'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SubMenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'增加子菜单'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    del: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RefreshMenuBarCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AddSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AddSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.add();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DelSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DelSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.del();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> RefreshMenuBarCommand(MenuBar);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> AddSubMenuCommand(SubMenu);</span><br><span class="line"><span class="keyword">var</span> delSubMenuCommand = <span class="keyword">new</span> DelSubMenuCommand(SubMenu);</span><br><span class="line"></span><br><span class="line">setCommand(button1, refreshMenuBarCommand);</span><br><span class="line">setCommand(button2, addSubMenuCommand);</span><br><span class="line">setCommand(button3, delSubMenuCommand);</span><br></pre></td></tr></table></figure><h2 id="JavaScript的命令模式"><a href="#JavaScript的命令模式" class="headerlink" title="JavaScript的命令模式"></a>JavaScript的命令模式</h2><p>也许我们会疑惑，所谓的命令模式，看起来就是给对象的某个方法取了execute的名字，引入command对象和receiver这两个无中生有的角色无非是把简单的事情复杂化了，下面的代码也能实现相同的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindClick = <span class="function"><span class="keyword">function</span>(<span class="params">button, func</span>) </span>&#123;</span><br><span class="line">    button.onclick = func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">    refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'刷新菜单目录'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SubMenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'增加子菜单'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    del: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindClick(button1, MenuBar.refresh);</span><br><span class="line">bindClick(button2, SubMenu.add);</span><br><span class="line">bindClick(button3, SubMenu.del);</span><br></pre></td></tr></table></figure><p>这种说法是正确的，上面的代码是模拟传统的面向对象语言的命令模式的实现。命令模式将过程式的请求调用封装在command对象的execute方法里，通过封装方法的调用，可以吧运算块包装成形，command对象可以被四处传递，所以调用命令的时候，客户可以不需要关心事情是如何进行的。</p><p><strong>命令模式的由来，其实是回调函数的一个面向对象的替代品</strong>。</p><p>JavaScript作为函数作为一等对象的语言，跟策略模式一样，命令模式也早已融入到了JavaScrip语言之中。运算块不一定要封装在command.execute中，可以封装在普通函数中，函数作为一等对象，本来就可以被四处传递。</p><p>在面向对象设计中，命令模式的接收者被当成command对象的属性保存起来，同时约定执行命令的操作调用command.execute方法。在使用闭包的命令模式中实现，接收者被封闭在闭包产生的环境中，执行命令的操作可以更加简单，仅仅执行回调函数就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">button, func</span>) </span>&#123;</span><br><span class="line">    button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">    refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'刷新菜单目录'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        reciever.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> RefreshMenuBarCommand(MenuBar);</span><br><span class="line"></span><br><span class="line">setCommand(button1, refreshMenuBarCommand);</span><br></pre></td></tr></table></figure><p>当然，如果想要更明确地表达当前正在使用命令模式，或者除了执行命令之外，将来有可能需要提供撤销命令的操作，最好还是把执行函数设置为执行execute方法</p><h2 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h2><p>命令模式的作用不仅是封装运算块，还可以很方便地给命令对象增加撤销操作，就像订餐时客人可以通过电话来取消订单一样。</p><p>本节的目标是利用Animate类来编写一个动画，这个动画的表现是让页面上的小球移动到水平方向的某个位置。现在页面中有一个input文本框和一个button按钮，文本框输入一些数字，表示小球移动后的水平位置，小球在用户点击按钮后立即开始移动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    输入小球移动后的位置：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pos"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"moveBtn"</span>&gt;</span>开始移动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">'ball'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pos = <span class="built_in">document</span>.getElementById(<span class="string">'pos'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> moveBtn = <span class="built_in">document</span>.getElementById(<span class="string">'moveBtn'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    moveBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> animate = <span class="keyword">new</span> Animate(ball);</span></span><br><span class="line"><span class="javascript">        aninate.start(<span class="string">'left'</span>, pos.value, <span class="number">1000</span>, <span class="string">'strongEaseOut'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果文本框输入200，然后点击moveBtn按钮，可以看到小球顺利地移动到水平方向200的位置，现在我们需要一个方法让小球还原到移动之前的位置。当然也可以在文本框中输入-200，然后点击按钮。</p><p>这是一个方法，不过比较笨拙，页面上最好有一个撤销按钮，点击撤销按钮知州，小球便能回到上一次的位置</p><p>添加撤销按钮之前，我们先将代码改成命令模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">'ball'</span>);</span><br><span class="line"><span class="keyword">var</span> pos = <span class="built_in">document</span>.getElementById(<span class="string">'pos'</span>);</span><br><span class="line"><span class="keyword">var</span> moveBtn = <span class="built_in">document</span>.getElementById(<span class="string">'moveBtn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MoveCommand = <span class="function"><span class="keyword">function</span>(<span class="params">reveiver, pos</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    <span class="keyword">this</span>.pos = pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MoveCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.start(<span class="string">'left'</span>, <span class="keyword">this</span>.pos, <span class="number">1000</span>, <span class="string">'strongEaseOut'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moveCommand;</span><br><span class="line"></span><br><span class="line">moveBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> animate = <span class="keyword">new</span> Animate(ball);</span><br><span class="line">    moveCommand = <span class="keyword">new</span> MoveCommand(animate, pose.value);</span><br><span class="line">    moveCommand.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>撤销操作的实现一般是给命令对象增加一个名为unexexute或者undo方法，在该方法里执行execute的反向操作，在execute方法让小球真正开始运动之前，我们需要先记录小球当前的位置，在unexecute或者undo操作时，再让小球回到刚刚记录下的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">'ball'</span>);</span><br><span class="line"><span class="keyword">var</span> pos = <span class="built_in">document</span>.getElementById(<span class="string">'pos'</span>);</span><br><span class="line"><span class="keyword">var</span> moveBtn = <span class="built_in">document</span>.getElementById(<span class="string">'moveBtn'</span>);</span><br><span class="line"><span class="keyword">var</span> cancelBtn = <span class="built_in">document</span>.getElementById(<span class="string">'cancelBtn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MoveCommand = <span class="function"><span class="keyword">function</span>(<span class="params">reveiver, pos</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    <span class="keyword">this</span>.pos = pos;</span><br><span class="line">    <span class="keyword">this</span>.oldPos = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MoveCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.start(<span class="string">'left'</span>, <span class="keyword">this</span>.pos, <span class="number">1000</span>, <span class="string">'strongEaseOut'</span>);</span><br><span class="line">    <span class="keyword">this</span>.oldPos = <span class="keyword">this</span>.receiver.dom.getBoundingClientRect()[<span class="keyword">this</span>.receiver.propertyName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MoveCommand.prototype.undo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.start(<span class="string">'left'</span>, <span class="keyword">this</span>.oldPos, <span class="number">1000</span>, <span class="string">'strongEaseOut'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moveCommand;</span><br><span class="line"></span><br><span class="line">moveBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> animate = <span class="keyword">new</span> Animate(ball);</span><br><span class="line">    moveCommand = <span class="keyword">new</span> MoveCommand(animate, pose.value);</span><br><span class="line">    moveCommand.execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cancaleBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    moveCommand.undo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h2><p>刚才我们讨论了如何撤销一个命令。很多时候，我们需要撤销一系列的命令，比如在一个围棋程序中，已经下了10步棋了，我们需要一次性悔棋到第五步。在这之前，我们可以将所有执行过的步骤都存储到一个历史列表中，然后倒序循环来依次执行这些命令的undo直到循环到第5个命令为止。</p><p>然而，某些情况下无法顺利地利用undo操作让对象回到execute之前的状态。比如在canvas画图的程序中，画布上有一些点，我们在这些点之间画N条曲线讲这些点互相连接。但是我我们很难为这里命令模式定义一个擦除某条曲线的undo操作，因为在canvas中，擦除一条线相对不容易。</p><p><strong>这个时候最好的方法就是先清除画布，然后把刚才执行过的命令全部执行一遍，这一点同样可以利用一个历史列表的堆栈执行。记录命令日志，然后重复执行他们，这是逆转不可逆转命令的好办法。</strong></p><p>比如我们有的游戏是有回放功能的，如果我们存储的是视频可能比较大，但是我们可以存储所有的命令，通过回放命令的方式来回放游戏。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Ryu = &#123;</span><br><span class="line">    attack: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'攻击'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    defense: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'防御'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    jump: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'跳跃'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    crouch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'蹲下'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> makdCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver, state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        recevier[state]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commands = &#123;</span><br><span class="line">    <span class="string">'119'</span>: <span class="string">'jump'</span>,</span><br><span class="line">    <span class="string">'115'</span>: <span class="string">'crouch'</span>,</span><br><span class="line">    <span class="string">'97'</span>: <span class="string">'defense'</span>,</span><br><span class="line">    <span class="string">'100'</span>: <span class="string">'attack'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commandStack = [];</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keyCode = ev.keyCode;</span><br><span class="line">    <span class="keyword">var</span> command = makeCommand(Ryu, commands[keyCode]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (command) &#123;</span><br><span class="line">        command()l</span><br><span class="line">        commandStack.push(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'replay'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> command;</span><br><span class="line">    <span class="keyword">while</span>(command = commandStack.shift()) &#123;</span><br><span class="line">        command();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h2><p>宏命令是一组命令的集合，通过执行宏命令的方式，可以一次性执行一批命令。</p><p>想象有一个万能遥控器，每天回家按一个特殊按钮，就可以帮我们关上房门，打开电脑并登录QQ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'关门'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'开电脑'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'登陆QQ'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MarcoCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        commandList: [],</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.commandList.push(command);</span><br><span class="line">        &#125;,</span><br><span class="line">        execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> command <span class="keyword">of</span> <span class="keyword">this</span>.commandList) &#123;</span><br><span class="line">                command.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcoCommand = MarcoCommand();</span><br><span class="line">marcoCommand.add(closeDoorCommand);</span><br><span class="line">marcoCommand.add(openCommand);</span><br><span class="line">marcoCommand.add(openQQCommand);</span><br><span class="line"></span><br><span class="line">marcoCommand.execute();</span><br></pre></td></tr></table></figure><p><strong>宏命令其实是命令模式与组合模式的联合的产物。</strong></p><h2 id="智能命令与傻瓜命令"><a href="#智能命令与傻瓜命令" class="headerlink" title="智能命令与傻瓜命令"></a>智能命令与傻瓜命令</h2><p>我们刚才创建的命令的样子是这个样子的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'关门'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的closeDoorCommand函数中没有任何recevier的信息，它本身就包揽了执行请求的行为，这和我们之前看到的命令对象都包涵一个receiver是矛盾的。</p><p>一般来说，命令模式都会在command对象中保存一个接收者来负责真正执行客户的请求，这种命令是“傻瓜式”的，它只负责把客户端的请求转交给接收者来执行，这种模式的好处是请求发起者和接受者的解耦。</p><p>但是我们也可以定义一些更加智能的命令，他们可以直接实现请求，这种聪明的对象叫做“智能命令”。</p><p>没有接收者的命令，退化到和策略模式非常相似，从代码结构上已经无法区分它们，能分辨的只有他们的目的不同。策略模式指向的问题域更小，所有策略对象的目标总是一致的，他们只是达到这个目标的不同手段，它们的内部实现是针对算法而言的。而智能命令模式指向的问题域更广，command对象解决的目标更具发散性，同时命令模式还能撤销，重做，甚至结合队列缓冲依次执行命令对象。</p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>在程序设计中，我们会遇到这种需求，就是“事物是由相似的子事物构成的”。组合模式就是用小的子对象来构建更大的对象，而这些小的子对象本身可能是由更小的孙对象构成的。</p><p>比如我们刚才的宏命令的例子，marcoCommand就是组合对象，closeDoorCommand，openCommand，openQQCommand都是叶子对象。在marcoCommand的execute方法里，并不真正执行操作，而是遍历它所包含的所有叶子对象，把真正的execute请求委托给这些叶子对象。</p><p><strong>marcoCommand表现得像一个命令，但它实际上只是一组真正命令的“代理”。并非真正的代理，虽然结构上相似，但是它的目的不在于控制叶子对象的访问。</strong></p><h2 id="组合模式的用途"><a href="#组合模式的用途" class="headerlink" title="组合模式的用途"></a>组合模式的用途</h2><p>组合模式将对象组合成树形结构，以表示“整体-部分”的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是可以通过对象的多态性来表现，使得用户对单个对象和组合对象的使用具有一致性。</p><ul><li>表示树形结构。通过宏命令的例子，我们可以找到组合模式的一个优点，提供了一种遍历树形结构的方案。通过调用组合对象的execute方法，程序会递归调用组合对象下面的叶对象的execute方法。所以我们的万能遥控器只需要一次操作，便能依次完成关门，开电脑，打开QQ这几件事情。组合模式可以非常方便地描述对象部分-整体的层次结构。</li><li>利用对象的多态性统一对待组合对象和单个对象。利用对象的多态性表现，可以使客户端忽略组合对象和单个对象的不同。在组合模式中客户将统一地使用组合结构中的所有对象，而不需要关心它究竟是组合对象还是单个对象。</li></ul><p>这在实际开发中会给客户带来很大的便利性。当我们往万能遥控器中添加一个命令时，并不关心这个命令是宏命令还是普通的字命令，我们只需要知道它需要有个execute方法就好。</p><h2 id="更强大的宏命令"><a href="#更强大的宏命令" class="headerlink" title="更强大的宏命令"></a>更强大的宏命令</h2><p>现在我们增强一下我们的万能遥控器，功能如下：</p><ul><li>打开空调</li><li>打开电视和音响</li><li>关门，开电脑，登陆QQ</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MarcoCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        commandList: [],</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.commandList.push(command);</span><br><span class="line">        &#125;,</span><br><span class="line">        execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> command <span class="keyword">of</span> <span class="keyword">this</span>.commandList) &#123;</span><br><span class="line">                command.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openAcCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'打开空调'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openTvCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'打开电视'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openSoundCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'打开音响'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcoCommand1 = MarcoCommand();</span><br><span class="line">marcoCommand1.add(openTvCommand);</span><br><span class="line">marcoCommand1.add(openSoundCommand);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'关门'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'开电脑'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'登陆QQ'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcoCommand2 = MarcoCommand();</span><br><span class="line">marcoCommand2.add(closeDoorCommand);</span><br><span class="line">marcoCommand2.add(openCommand);</span><br><span class="line">marcoCommand2.add(openQQCommand);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcoCommand = MarcoCommand();</span><br><span class="line">marcoCommand.add(openAcCommand);</span><br><span class="line">marcoCommand.add(marcoCommand1);</span><br><span class="line">marcoCommand.add(marcoCommand2);</span><br><span class="line"></span><br><span class="line">marcoCommand.execute();</span><br></pre></td></tr></table></figure><p>从这个例子可以看出，基本对象可以被组合成更加复杂的组合对象，组合对象又可以被组合对象不断递归组合下去。</p><h2 id="抽象类在组合模式中的作用"><a href="#抽象类在组合模式中的作用" class="headerlink" title="抽象类在组合模式中的作用"></a>抽象类在组合模式中的作用</h2><p>组合模式最大的优点在于可以一致地对待组合对象和基本对象。客户不需要知道当前处理的是宏命令还是普通命令，只要它是一个命令，并且有execute方法，这个命令就可以被添加到树上。</p><p>这种透明性带来的便利性在静态类型的语言中尤为明显。比如在Java中，实现组合模式的关键是Composite类和Leaf类都必须继承自一个Component抽象类，这个Component抽象类既代表组合对象，又代表叶对象，它也能够保证组合对象和叶对象又有同样名字的方法。</p><p>然而在JavaScript这种动态类型语言中，对象的多态性是与生俱来的，也没有编译器去检查变量的类型，所以我们通常不会去模拟一个怪异的抽象类，JavaScript中实现组合模式的要点在于保证组合对象和叶对象拥有同样的方法，这通常需要鸭子类型的思想进行接口检查。</p><h2 id="透明性带来的安全问题"><a href="#透明性带来的安全问题" class="headerlink" title="透明性带来的安全问题"></a>透明性带来的安全问题</h2><p>组合模式的透明性使得发起请求的客户不用去顾及树中组合对象和叶对象的区别，但是它们实际上是有区别的。</p><p>组合对象可以拥有子节点，但是叶对象就没有子节点，所以我们也许会发生一些误操作向叶对象中添加子节点。解决方案通常是给叶对象也加一个add方法，但是该方法内部直接报错。</p><h2 id="一些值得注意的地方"><a href="#一些值得注意的地方" class="headerlink" title="一些值得注意的地方"></a>一些值得注意的地方</h2><p><strong>1. 组合模式不是父子关系</strong></p><p>组合模式的树形结构容易让人误以为组合对象和叶对象是父子关系，这是不正确的。</p><p>组合模式是一种HAS-A的关系，而不是IS-A。组合对象包含一组叶对象，但是Leaf不是Composite的子类。组合对象把请求委托给它所包含的所有叶对象，他们能够合作的关键是拥有相同的接口。</p><p><strong>2. 对叶对象的操作具有一致性</strong></p><p>组合模式出了要求组合对象和叶对象拥有相同的接口之外，还有一个必要条件，就是对一组对象的操作必须具有一致性。</p><p>比如公司要给全体员工发放元旦的过节费1000块，这个场景可以运用组合模式，但如果公司给今天过生日的员工发送一封生日祝福，组合模式就没有用武之地了，除非先行把过生日的挑出来。只有用一致的方式对待列表中的每个叶对象时，才能用组合模式。</p><p><strong>3. 双向映射关系</strong></p><p>发放过节费的通知步骤是从公司到各个部门，再到各个小组，再到每个员工的邮箱中。这本身是一个组合模式的好例子，但是可能某些员工属于多个组织架构，对象之间并不是严格意义上的层次结构，也是不适合组合模式的。</p><p>这种情况下，我们必须给父节点和子节点建立双向映射关系，一个简单的方法是给小组和员工都增加集合来保存对方的引用。但是这种相互引用的方式相当复杂，而且对象之间产生过多的耦合性，修改和删除一个对象都变得困难，<strong>此时我们可以引入中介者模式，这个思想有点类似分析模式中把不变的信息抽象为知识层。</strong></p><p><strong>4. 用职责链模式提高组合模式性能</strong></p><p>在组合模式中，如果树的结构比较复杂，节点数量很多，在遍历树的过程中，性能方面也许表现得不够理想。有时候我们确实可以借助一些技巧，在实际操作中避免遍历整棵树。</p><p>有一种方案是借助职责链模式。职责链模式一般需要我们手动去设置链条，但是在组合模式中，父子对象之间的关系天然形成链条。让请求顺着链条从父对象向子对象传递，或者反过来。直到遇到可以处理该请求的对象为止。</p><h2 id="何时使用组合模式"><a href="#何时使用组合模式" class="headerlink" title="何时使用组合模式"></a>何时使用组合模式</h2><ul><li><p>表示对象的部分-整体结构。组合模式可以方便地构造一棵树来表示对象的部分-整体结构。特别是我们在开发期间不确定这棵树到底存在多少层的时候。在树的构造最终完成之后，我们只需要请求树的最顶层对象，便能对整棵树作统一的操作。在组合模式中添加和删除节点非常方便，这也符合开闭原则。</p></li><li><p>客户希望统一对待树中的所有对象。组合模式使客户可以忽略组合对象和叶对象的区别，客户在面对这棵树的时候，不用关心当前正在处理的对象是组合对象还是叶对象，也不用写一堆if-else来处理它们。组合对象和叶对象会做各自正确的事情。</p></li></ul><h1 id="模版方法模式"><a href="#模版方法模式" class="headerlink" title="模版方法模式"></a>模版方法模式</h1><p>在JavaScript开发中用到继承的场景并不多，很多时候我们都喜欢用mixin的方式。</p><p>JavaScript虽然没有类，但是可以通过原型来实现继承。模版方法就是一种基于继承的设计模式。</p><h2 id="模版方法模式的定义和组成"><a href="#模版方法模式的定义和组成" class="headerlink" title="模版方法模式的定义和组成"></a>模版方法模式的定义和组成</h2><p>模版方法是一种只需使用继承就可以实现的非常简单的模式。</p><p>模版方法模式由两部分组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共的方法以及封装子类中所有方法的执行顺序。子类通过继承这个抽象父类，继承了整个算法结构。</p><p>假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为。如果相同的不同的行为都混合在各个子类之中，说明这些相同的行为会在各个子类中重复。但实际上，相同的行为可以被放到一个单一的地方。模版方法就是解决这个问题的，子类中相同的部分被移到了父类中，而将不同的部分留待子类来实现。</p><h2 id="一个例子——Coffee-Or-Tea"><a href="#一个例子——Coffee-Or-Tea" class="headerlink" title="一个例子——Coffee Or Tea"></a>一个例子——Coffee Or Tea</h2><p>假设我们现在要泡一杯咖啡和一杯茶，二者的冲泡过程对比如下：</p><div class="table-container"><table><thead><tr><th>泡咖啡</th><th>泡茶</th></tr></thead><tbody><tr><td>把水煮沸</td><td>把水煮沸</td></tr><tr><td>用沸水冲泡咖啡</td><td>用沸水冲泡茶叶</td></tr><tr><td>把咖啡倒进杯子</td><td>把茶水倒进杯子</td></tr><tr><td>加糖和牛奶</td><td>加柠檬</td></tr></tbody></table></div><p>我们先写抽象父类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Beverage.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Beverage.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Beverage.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Beverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Beverage.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.boilWater();</span><br><span class="line">    <span class="keyword">this</span>.brew();</span><br><span class="line">    <span class="keyword">this</span>.pourInCup();</span><br><span class="line">    <span class="keyword">this</span>.addCondiments();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们分别生命煮茶和煮咖啡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Coffee.prototype = <span class="keyword">new</span> Beverage();</span><br><span class="line"></span><br><span class="line">Coffee.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用沸水冲泡咖啡'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Coffee.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Coffee.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">coffee.init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Tea.prototype = <span class="keyword">new</span> Beverage();</span><br><span class="line"></span><br><span class="line">Tea.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用沸水冲泡茶'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tea.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把茶水倒进杯子'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tea.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加柠檬'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> Tea();</span><br><span class="line">tea.init();</span><br></pre></td></tr></table></figure><p><code>Beverage.prototype.init</code>被称为模版方法原因是，该方法中封装了子类的算法框架，它作为一个算法的模版，指导子类以何种顺序去执行哪些方法。</p><h2 id="JavaScript中没有抽象类的缺点和解决方案"><a href="#JavaScript中没有抽象类的缺点和解决方案" class="headerlink" title="JavaScript中没有抽象类的缺点和解决方案"></a>JavaScript中没有抽象类的缺点和解决方案</h2><p>JavaScript并没有从语法层面提供对抽象类的支持。抽象类的第一个作用是是隐藏对象的具体类型。由于JavaScript是一门“类型模糊”的语言，所以隐藏对象的类型在JavaScript红并不重要。</p><p>另一方面，我们在JavaScript中使用原型继承来模拟传统的类式继承时，并没有编译器帮助我们进行任何形式的检查，我们也没有办法保证子类会重写父类中的抽象方法。</p><p>我们提供两种变通方案：</p><ul><li><p>用鸭子类型来模拟接口检查，以便保证子类中确实重写了父类的方法，但是模拟接口检查会带来不必要的复杂性</p></li><li><p>让<code>Beverage.prototype.brew</code>等方法直接抛出一个异常，如果因为粗心忘记了编写<code>Coffee.prototype.init</code>方法，我们至少会得到一个错误。</p></li></ul><h2 id="模版方法的使用场景"><a href="#模版方法的使用场景" class="headerlink" title="模版方法的使用场景"></a>模版方法的使用场景</h2><p>大的方面来讲，该模式常被架构师用于搭建项目的框架，架构师定好了框架的骨架，程序员继承框架的结构之后，负责往里面填空。</p><h2 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h2><p>通过模版方法，我们在父类中封装了子类的算法框架。这个框架在正常情况下是可以正常运行的。但是如果我们遇到一个人，他不喜欢在喝咖啡的时候加糖和牛奶怎么办。</p><p>这个时候我们就需要用到钩子方法了，放置钩子来隔离变化是一种常用的手段，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Beverage.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Beverage.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写brew方法'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写pourInCup方法'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写addCondiments方法'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Beverage.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.boilWater();</span><br><span class="line">    <span class="keyword">this</span>.brew();</span><br><span class="line">    <span class="keyword">this</span>.pourInCup();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customerWantsCondiments()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="我们真的需要继承吗？"><a href="#我们真的需要继承吗？" class="headerlink" title="我们真的需要继承吗？"></a>我们真的需要继承吗？</h2><p>模版方法模式是为数不多的基于继承的设计模式，但是JavaScript实际上并没有真正的类继承，继承是通过对象与对象之间的委托来实现的，也就是说，虽然我们在形式上借鉴了类继承的语言，但是这样的模版方法并不正宗，而且我们是否需要用到继承这种方式来实现模版方法呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> brew = params.brew || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写brew方法'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pourInCup = params.pourInCup || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写pourInCup方法'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> addCondiments = params.addCondiments || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写addCondiments方法'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    F.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Coffee = Beverage(&#123;</span><br><span class="line">    brew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用沸水冲咖啡'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    pourInCup: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    addCondiments: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在JavaScritp中，很多时候，高阶函数是比模版方法更加有效的方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文我们总结JavaScript中的命令模式，组合模式和模版方法。这几个模式比较相似。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 设计模式学习与实践（三）</title>
    <link href="https://sunra.top/2022/12/24/javascript-design-pattern-3/"/>
    <id>https://sunra.top/2022/12/24/javascript-design-pattern-3/</id>
    <published>2022-12-24T06:13:17.000Z</published>
    <updated>2022-12-26T13:20:51.312Z</updated>
    
    <content type="html"><![CDATA[<p>本文进行迭代器模式和发布订阅模式的总结。这两个模式算是比较经典的模式，甚至已经到了语法本身支持的程度。</p><a id="more"></a><h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>迭代器模式是指提供一种方法顺序访问一个<strong>聚合对象</strong>中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。</p><p>比如我们定义一个数据结构，内部是用链表构造的一个队列，只需要对外提供一个方法可以顺序遍历这个队列就行，并不需要让外部了解到这个队列用的是怎样的技术去实现的。</p><h2 id="内部迭代器和外部迭代器"><a href="#内部迭代器和外部迭代器" class="headerlink" title="内部迭代器和外部迭代器"></a>内部迭代器和外部迭代器</h2><p>我们来实现一个迭代器each函数，接受两个参数，第一个位被循环的数组，第二个为循环中每一步后将被触发的回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">arr, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        callback.call(arr[i], i, arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">index, n</span>)) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个each函数就属于内部迭代器，each函数的内部已经定义好了迭代规则，完全接手整个迭代过程，外部只需要一次初始调用。</p><p>内部迭代器在调用的时候非常方便，外界不关心迭代器内部的实现，跟迭代器的交互仅是一次初始调用，但这也正好是内部迭代器的缺点。</p><p>由于内部迭代器的迭代规则已经被提前定义，上面的each函数就无法同时迭代两个数组。</p><p>比如现在有个需求，比较两个数组的元素是否完全相同，如果不改写each函数，我们能够入手的地方似乎只剩下each的回调函数了，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1.length !== arr2.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"arr1 and arr2 is not equal"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    each(arr1, <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n !== arr2[i]) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"arr1 and arr2 is not equal"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    alert(<span class="string">"arr1 and arr2 is equal"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compare([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>在一些没有闭包的语言中，内部迭代器本身的实现也相当复杂。比如C语言中的内部迭代器，利用函数指针实现的，循环处理的函数都要通过参数的形式明确从外面传递进去。</p><p>相比于内部迭代器，外部迭代器则是必须显式地请求迭代下一个元素。</p><p>外部迭代器增加了一些调用的复杂度，但是也增加了迭代器的灵活性，我们可以手工控制迭代的过程和顺序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        current++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        current &gt;= obj.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getCurrent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj[current];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next,</span><br><span class="line">        isDone,</span><br><span class="line">        getCurrent,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">iterator1, iterator2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (iterator1.getCurrent() !== iterator2.getCurrent()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"iterator1 and iterator2 is not equal"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        iterator1.next();</span><br><span class="line">        iterator2.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iterator1.isDone() &amp;&amp; iterator2.isDone()) &#123;</span><br><span class="line">        alert(<span class="string">'iterator1 and iterator2 is equal'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'iterator1 and iterator2 is not equal'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compare(Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]), Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure><h2 id="中止迭代器"><a href="#中止迭代器" class="headerlink" title="中止迭代器"></a>中止迭代器</h2><p>迭代器可以像普通for循环中的break一样，提供一种跳出循环的方法。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">arr, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback.call(arr[i], i, arr[i]) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="迭代器模式举例"><a href="#迭代器模式举例" class="headerlink" title="迭代器模式举例"></a>迭代器模式举例</h2><p>假设有如下代码，可以根据不同的浏览器获取不同的上传组件对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFINActiveX.FTNUpload"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">"&lt;object type='application/x-shockwave-flash'&gt;&lt;/object&gt;"</span></span><br><span class="line">            <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">"&lt;input name='file' type='file'/&gt;"</span></span><br><span class="line">            <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用迭代器模式改造一下上面那段代码，将每种获取上传组件的方法封装为一个函数，然后见这些函数放入一个数组中去迭代，直到有一个可以正确返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iteratorUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> uploadObjCreators = <span class="built_in">Array</span>.prototype.slice(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uploadObjCreators.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> uploadObj = uploadObjCreators[i]();</span><br><span class="line">        <span class="keyword">if</span> (uploadObj !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> uploadObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFINActiveX.FTNUpload"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"&lt;object type='application/x-shockwave-flash'&gt;&lt;/object&gt;"</span></span><br><span class="line">        <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"&lt;input name='file' type='file'/&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFormUploadObj);</span><br></pre></td></tr></table></figure><h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><p>发布订阅模式又叫做观察者模式，它定义对象之间的一种一对多的依赖关系，当一个对象的状态发生改变的时候，所有依赖它的对象都会得到通知。</p><p>在JavaScript中，我们一般用事件模式来代替发布订阅模式。</p><p>发布订阅模式可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。同时，发布订阅模式可以取代对象之间硬编码的通知机制，一个对象不再显式地调用另外一个对象的某个接口。发布订阅模式让两个对象松耦合地联系在一起。</p><h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><p>实际上，只要我们曾经在DOM节点上绑定过事件函数，那我们就曾经使用过发布订阅模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.click();</span><br></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>除了DOM事件，我们经常还会实现一些自定义事件，这种依靠自定义事件完成的发布订阅模式可以用于任何JavaScript代码中。</p><p>我们看看如何一步步实现发布订阅模式</p><ul><li>首先要指定好谁充当发布者</li><li>然后给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者</li><li>最后发布消息时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者回调函数</li></ul><p>另外，我们还可以往回调函数里填入一些参数，订阅者可以接收这些参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">salesOffices.clientList = [];</span><br><span class="line"></span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clientList.push(fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> <span class="keyword">this</span>.clientList) &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price, squareMeter</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A know:"</span>, price, squareMeter);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price, squareMeter</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B know:"</span>, price, squareMeter);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="number">2000000</span>, <span class="number">80</span>);</span><br><span class="line">salesOffices.trigger(<span class="number">3000000</span>, <span class="number">110</span>);</span><br></pre></td></tr></table></figure><p>至此，我们实现了一个简单的发布订阅模式，但这里还存在一些问题。我们看到订阅者接收到了发布者发布的每个消息，虽然A只想买88平方米的房子，但是发布者会把110房子的消息也推送给A，这是没有必要的，所以我们可以优化一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">salesOffices.clientList = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.clentList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clentList[key].push(fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">const</span> fns = <span class="keyword">this</span>.clentList[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> fns) &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter80'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A know:"</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter110'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B know:"</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter80'</span>, <span class="number">2000000</span>);</span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter110'</span>, <span class="number">3000000</span>);</span><br></pre></td></tr></table></figure><h2 id="发布订阅的通用实现"><a href="#发布订阅的通用实现" class="headerlink" title="发布订阅的通用实现"></a>发布订阅的通用实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line">    clientList: &#123;&#125;,</span><br><span class="line">    listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.clentList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.clentList[key].push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">const</span> fns = <span class="keyword">this</span>.clentList[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> fn <span class="keyword">of</span> fns) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为任何对象安装发布订阅模式</span></span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">        obj[i] = event[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">installEvent(salesOffices);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter80'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A know:"</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter110'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B know:"</span>, price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter80'</span>, <span class="number">2000000</span>);</span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter110'</span>, <span class="number">3000000</span>);</span><br></pre></td></tr></table></figure><p>当然，我们也可以先发布，再订阅，当暂时没有订阅者时将消息缓存起来，一旦出现订阅者再依次调用订阅者并清空消息</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文进行迭代器模式和发布订阅模式的总结。这两个模式算是比较经典的模式，甚至已经到了语法本身支持的程度。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Router 源码解析（二）内部路由的跳转</title>
    <link href="https://sunra.top/2022/12/16/vue-router-source-code-2/"/>
    <id>https://sunra.top/2022/12/16/vue-router-source-code-2/</id>
    <published>2022-12-16T08:28:29.000Z</published>
    <updated>2022-12-18T03:11:31.383Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/2022/12/10/vue-router-source-code-1/">之前的博客</a>我们讲了我们创建VueRouter实例并通过Vue.use应用之后，VueRouter内部如何生成一整套自己的数据结构来存储路由配置的，这次博客我们继续解读Vue Router的源码，大致内容是Vue Router的路由守卫的执行逻辑。</p><a id="more"></a><h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><p>这个是VueRouter的路由守卫的官方地址：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" rel="external nofollow noopener noreferrer" target="_blank">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></p><p>整个路由变化过程中路由守卫的执行的顺序如下：</p><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter。</code></li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter。</code></li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h1 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h1><p>还是先讲一下我们本次博客基于的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; </span><br><span class="line">  template: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span>,</span><br><span class="line">  beforeRouteEnter(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被验证前调用</span></span><br><span class="line">    <span class="comment">// 不能获取组件实例 `this` ！</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行时，组件实例还没被创建！</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 在导航离开渲染该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Baz = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;baz&lt;/div&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: __dirname,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">      <span class="comment">// a single route can define multiple named components</span></span><br><span class="line">      <span class="comment">// which will be rendered into &lt;router-view&gt;s with corresponding names.</span></span><br><span class="line">      components: &#123;</span><br><span class="line">        <span class="keyword">default</span>: Foo,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Baz</span><br><span class="line">        beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(bar);</span><br><span class="line">          <span class="comment">// reject the navigation</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/other'</span>,</span><br><span class="line">      components: &#123;</span><br><span class="line">        <span class="keyword">default</span>: Baz,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Foo</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// canUserAccess() 返回 `true` 或 `false`</span></span><br><span class="line">  <span class="keyword">const</span> canAccess = <span class="keyword">await</span> canUserAccess(to)</span><br><span class="line">  <span class="keyword">if</span> (!canAccess) <span class="keyword">return</span> <span class="string">'/login'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// router.beforeEach支持第三个参数next</span></span><br><span class="line"><span class="comment">// router.beforeEach((to, from, next) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   if (to.name !== 'Login' &amp;&amp; !isAuthenticated) next(&#123; name: 'Login' &#125;)</span></span><br><span class="line"><span class="comment">//   else next()</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">router.beforeResolve(<span class="keyword">async</span> to =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.meta.requiresCamera) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> askForCameraPermission()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> NotAllowedError) &#123;</span><br><span class="line">        <span class="comment">// ... 处理错误，然后取消导航</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">        <span class="keyword">throw</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// afterEach不支持next</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  sendToAnalytics(to.fullPath)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div id="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Named Views&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;router-link to="/"&gt;/&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;router-link to="/other"&gt;/other&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view class="view one"&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view class="view two" name="a"&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view class="view three" name="b"&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>我们从VueRouter.prototype.push开始分析调用路由切换之后发生了什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">if</span> (!onComplete &amp;&amp; !onAbort &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.history.push(location, resolve, reject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.push(location, onComplete, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个参数分别为RawLocation，成功时的回调函数以及失败时的回调函数，RawLocation其实就是我们在正式使用时push函数传入的参数类型，具体定义如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> Location = &#123;</span><br><span class="line">  _normalized?: <span class="built_in">boolean</span>;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  path?: <span class="built_in">string</span>;</span><br><span class="line">  hash?: <span class="built_in">string</span>;</span><br><span class="line">  query?: Dictionary&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">  params?: Dictionary&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">  append?: <span class="built_in">boolean</span>;</span><br><span class="line">  replace?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> RawLocation = <span class="built_in">string</span> | Location</span><br></pre></td></tr></table></figure><p><a href="https://sunra.top/2022/12/10/vue-router-source-code-1/">之前的博客</a>我们this.history会根据mode不同实例化为不同的对象，我们以HTML5History来分析</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; current: fromRoute &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.transitionTo(location, <span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      pushState(cleanPath(<span class="keyword">this</span>.base + route.fullPath))</span><br><span class="line">      handleScroll(<span class="keyword">this</span>.router, route, fromRoute, <span class="literal">false</span>)</span><br><span class="line">      onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    &#125;, onAbort)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先是获取当前的路由：current，它的类型是Route</p><p>然后调用了<code>transitionTo</code>函数，传入了两个参数，第一个是location，第二个是回调函数，我们看一下这个<code>transitionTo</code>做了什么</p><h2 id="transitionTo"><a href="#transitionTo" class="headerlink" title="transitionTo"></a>transitionTo</h2><p>在看<code>transtitionTo</code>函数之前，我们看一下几个工具函数</p><h3 id="runQueue"><a href="#runQueue" class="headerlink" title="runQueue"></a>runQueue</h3><p>首先是<code>runQueue</code>:</p><p>这个函数有三个参数，分别是：</p><ul><li>queue：一个参数的数组</li><li>fn：实际执行函数，其参数也有两个，第一个是queue中的每一项，第二个是fn执行完成后的回调函数</li><li>cb：针对queue中的每一项都执行过fn后的最终的回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">runQueue</span> (<span class="params">queue: Array&lt;?NavigationGuard&gt;, fn: Function, cb: Function</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> step = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= queue.length) &#123;</span><br><span class="line">      cb()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue[index]) &#123;</span><br><span class="line">        fn(queue[index], () =&gt; &#123;</span><br><span class="line">          step(index + <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        step(index + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  step(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="extractGuards"><a href="#extractGuards" class="headerlink" title="extractGuards"></a>extractGuards</h3><p>简单来说，这个函数的的作用就是从传入的一系列<code>RouteRecord</code>中，依次抽取出组件内部的路由守卫，然后将这些路由守卫的上下文，也就是this指针通过apply函数指定为自身，如果最后一个参数为true，那就反转这些路由守卫的顺序。</p><p>直接对外暴露的函数是，如extractLeaveGuards，它实际上就是调用<code>extractGuards(deactivated, &#39;beforeRouteLeave&#39;, bindGuard, true)</code>，也就是从反激活的一系列组件中，获取<code>beforeRouteLeave</code>函数，拼装起来后再反转。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractGuards</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  records: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  bind: <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  reverse?: <span class="built_in">boolean</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Array</span>&lt;?<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> guards = flatMapComponents(records, <span class="function">(<span class="params">def, instance, match, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> guard = extractGuard(def, name)</span><br><span class="line">    <span class="keyword">if</span> (guard) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(guard)</span><br><span class="line">        ? guard.map(<span class="function"><span class="params">guard</span> =&gt;</span> bind(guard, instance, match, key))</span><br><span class="line">        : bind(guard, instance, match, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> flatten(reverse ? guards.reverse() : guards)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractGuard</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  def: <span class="built_in">Object</span> | <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">NavigationGuard</span> | <span class="title">Array</span>&lt;<span class="title">NavigationGuard</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> def !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// extend now so that global mixins are applied.</span></span><br><span class="line">    def = _Vue.extend(def)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> def.options[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractLeaveGuards</span> (<span class="params">deactivated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span>): <span class="title">Array</span>&lt;?<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extractGuards(deactivated, <span class="string">'beforeRouteLeave'</span>, bindGuard, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractUpdateHooks</span> (<span class="params">updated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span>): <span class="title">Array</span>&lt;?<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extractGuards(updated, <span class="string">'beforeRouteUpdate'</span>, bindGuard)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindGuard</span> (<span class="params">guard: NavigationGuard, instance: ?_Vue</span>): ?<span class="title">NavigationGuard</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">boundRouteGuard</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> guard.apply(instance, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="confirmTransition（第1-8步）"><a href="#confirmTransition（第1-8步）" class="headerlink" title="confirmTransition（第1-8步）"></a>confirmTransition（第1-8步）</h3><p>然后是，<code>confirmTransition</code>：</p><p>这个函数大致分为三部分：</p><ul><li>判断是否需要abort，如果需要则退出</li><li>生成要执行的路由守卫的数组</li><li>依次执行路由守卫的数组</li></ul><p>首先是判断一下传入的route和当前的route是否是同一个，如果是的话，直接调用abort并退出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> current = <span class="keyword">this</span>.current</span><br><span class="line"><span class="keyword">this</span>.pending = route</span><br><span class="line"><span class="keyword">const</span> abort = <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// changed after adding errors with</span></span><br><span class="line">  <span class="comment">// https://github.com/vuejs/vue-router/pull/3047 before that change,</span></span><br><span class="line">  <span class="comment">// redirect and aborted navigation would produce an err == null</span></span><br><span class="line">  <span class="keyword">if</span> (!isNavigationFailure(err) &amp;&amp; isError(err)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.errorCbs.length) &#123;</span><br><span class="line">      <span class="keyword">this</span>.errorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">        cb(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        warn(<span class="literal">false</span>, <span class="string">'uncaught error during route navigation:'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  onAbort &amp;&amp; onAbort(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lastRouteIndex = route.matched.length - <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> lastCurrentIndex = current.matched.length - <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  isSameRoute(route, current) &amp;&amp;</span><br><span class="line">  <span class="comment">// in the case the route map has been dynamically appended to</span></span><br><span class="line">  lastRouteIndex === lastCurrentIndex &amp;&amp;</span><br><span class="line">  route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">this</span>.ensureURL()</span><br><span class="line">  <span class="keyword">if</span> (route.hash) &#123;</span><br><span class="line">    handleScroll(<span class="keyword">this</span>.router, current, route, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> abort(createNavigationDuplicatedError(current, route))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是一段生成路由守卫执行顺序的函数逻辑：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; updated, deactivated, activated &#125; = resolveQueue(</span><br><span class="line">  <span class="keyword">this</span>.current.matched,</span><br><span class="line">  route.matched</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue: <span class="built_in">Array</span>&lt;?NavigationGuard&gt; = [].concat(</span><br><span class="line">  <span class="comment">// in-component leave guards</span></span><br><span class="line">  extractLeaveGuards(deactivated),</span><br><span class="line">  <span class="comment">// global before hooks</span></span><br><span class="line">  <span class="keyword">this</span>.router.beforeHooks,</span><br><span class="line">  <span class="comment">// in-component update hooks</span></span><br><span class="line">  extractUpdateHooks(updated),</span><br><span class="line">  <span class="comment">// in-config enter guards</span></span><br><span class="line">  activated.map(<span class="function"><span class="params">m</span> =&gt;</span> m.beforeEnter),</span><br><span class="line">  <span class="comment">// async components</span></span><br><span class="line">  resolveAsyncComponents(activated)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一行的<code>resolveQueue</code>的作用是比较当前的路由和即将跳转的路由之间的变化，它的两个参数的类型都是<code>Array&lt;RouteRecord&gt;</code>，它的逻辑也比较简单，就是比较两个数组之间的差异：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveQueue</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  next: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  updated: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span><br><span class="line">  activated: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span><br><span class="line">  deactivated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> max = <span class="built_in">Math</span>.max(current.length, next.length)</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current[i] !== next[i]) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    updated: next.slice(<span class="number">0</span>, i),</span><br><span class="line">    activated: next.slice(i),</span><br><span class="line">    deactivated: current.slice(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而queue数字中的路由守卫依次是：</p><ul><li>所有 deactivated 组件中的 beforeRouteLeave 函数，然后反转顺序</li><li>全局的 beforeHooks 函数</li><li>所有 updated 组件中的 beforeRouteUpdate 函数</li><li>所有 activated 组件对应的路由配置中的 beforeEnter 函数</li><li>加载所有 activated 中异步组件的函数</li></ul><p>这五步也对应着一开始我们说的路由守卫执行顺序中的2-6步</p><p>得到了正确的路由守卫执行顺序的数组后，就是正式执行了，这里就用到了我们刚才说的工具函数： runQueue 了，代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterator = <span class="function">(<span class="params">hook: NavigationGuard, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.pending !== route) &#123;</span><br><span class="line">    <span class="keyword">return</span> abort(createNavigationCancelledError(current, route))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    hook(route, current, <span class="function">(<span class="params">to: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (to === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// next(false) -&gt; abort navigation, ensure current URL</span></span><br><span class="line">        <span class="keyword">this</span>.ensureURL(<span class="literal">true</span>)</span><br><span class="line">        abort(createNavigationAbortedError(current, route))</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isError(to)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ensureURL(<span class="literal">true</span>)</span><br><span class="line">        abort(to)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        <span class="keyword">typeof</span> to === <span class="string">'string'</span> ||</span><br><span class="line">        (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">          (<span class="keyword">typeof</span> to.path === <span class="string">'string'</span> || <span class="keyword">typeof</span> to.name === <span class="string">'string'</span>))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// next('/') or next(&#123; path: '/' &#125;) -&gt; redirect</span></span><br><span class="line">        abort(createNavigationRedirectedError(current, route))</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp; to.replace) &#123;</span><br><span class="line">          <span class="keyword">this</span>.replace(to)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.push(to)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// confirm transition and pass on the value</span></span><br><span class="line">        next(to)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    abort(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runQueue(queue, iterator, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// wait until async components are resolved before</span></span><br><span class="line">  <span class="comment">// extracting in-component enter guards</span></span><br><span class="line">  <span class="keyword">const</span> enterGuards = extractEnterGuards(activated)</span><br><span class="line">  <span class="keyword">const</span> queue = enterGuards.concat(<span class="keyword">this</span>.router.resolveHooks)</span><br><span class="line">  runQueue(queue, iterator, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pending !== route) &#123;</span><br><span class="line">      <span class="keyword">return</span> abort(createNavigationCancelledError(current, route))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.pending = <span class="literal">null</span></span><br><span class="line">    onComplete(route)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.router.app) &#123;</span><br><span class="line">      <span class="keyword">this</span>.router.app.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        handleRouteEntered(route)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先<code>iterator</code>函数，两个参数为</p><ul><li>要执行的路由守卫</li><li>执行成功以后的回调函数</li></ul><p>然后我们的runQueue，嵌套了两层：</p><ul><li>第一层首先是传入了刚才我们生成的queue，也就是2-6步的路由守卫函数，fn就是我们的iterator函数，结合我们一开始解读的runQueue的源码，总起来第一层做的事情就是，依次执行我们2-6步的路由守卫，每次执行完成一个通过调用hook中的next来调用runQueue中的step来执行下一个hook</li><li>第一层把所有queue执行完成之后的回调函数中，我们又生成了一层runQueue函数，区别就在于这一次，我们传入的queue不同了，这一次我们的queue生成方法为：<code>const enterGuards = extractEnterGuards(activated); const queue = enterGuards.concat(this.router.resolveHooks)</code>，两部分组成，第一部分是所有activated组件的 beforeRouteEnter 函数，然后是 this.router.resolveHooks，也就是全局的 beforeResolve ，这里就是路由守卫顺序中的第7，8步</li><li>在第二层的runQueue的回调函数中，我们就可以调用confirmTransition的的onComplete函数了</li></ul><p>然后我们想要了解这个onComplete做了什么，就要看transitionTo在调用confirmTransition的时候传入了什么函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.confirmTransition(</span><br><span class="line">  route,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">    onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    <span class="keyword">this</span>.ensureURL()</span><br><span class="line">    <span class="keyword">this</span>.router.afterHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">      hook &amp;&amp; hook(route, prev)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fire ready cbs once</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">        cb(route)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (onAbort) &#123;</span><br><span class="line">      onAbort(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; !<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">      <span class="comment">// Initial redirection should not mark the history as ready yet</span></span><br><span class="line">      <span class="comment">// because it's triggered by the redirection instead</span></span><br><span class="line">      <span class="comment">// https://github.com/vuejs/vue-router/issues/3225</span></span><br><span class="line">      <span class="comment">// https://github.com/vuejs/vue-router/issues/3331</span></span><br><span class="line">      <span class="keyword">if</span> (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.readyErrorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">          cb(err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="comfirmTransition成功回调（第9-12步）"><a href="#comfirmTransition成功回调（第9-12步）" class="headerlink" title="comfirmTransition成功回调（第9-12步）"></a>comfirmTransition成功回调（第9-12步）</h3><p>可以看到，我们的onComplete其实就是这一段：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">onComplete &amp;&amp; onComplete(route)</span><br><span class="line"><span class="keyword">this</span>.ensureURL()</span><br><span class="line"><span class="keyword">this</span>.router.afterHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">  hook &amp;&amp; hook(route, prev)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fire ready cbs once</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">  <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">    cb(route)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一步，调用updateRoute函数，这个函数内部其实就是history.listen函数传入的回调函数，这个比较重要，这个回调函数会修改$route的值，而这个值是响应式的，在route-view组件中会使用到，也就是说改变这个值会导致route-view重新调用render函数，也就出发了视图的更新</li><li>第二步如果transitionTo有onComplete函数那么调用</li><li>依次调用 afterHooks 函数，这个其实就是全局注册的 afterEach 的数组，至此，第11步也完成了</li></ul><p>那么最后一步，重新执行beforeRouterEnter，并通过next返回实例是怎么做到的呢？这一点其实和第七步生成的beforeRouterEnter的回调方式有关，这个<code>extractEnterGuards</code>和其另两个 <code>extractLeaveGuards</code>，和 <code>extractUpdateHooks</code>不一样，它的bind函数不是简单的apply，而是调用成功之后再执行next回调函数，具体如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extractEnterGuards</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  activated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Array</span>&lt;?<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extractGuards(</span><br><span class="line">    activated,</span><br><span class="line">    <span class="string">'beforeRouteEnter'</span>,</span><br><span class="line">    (guard, _, match, key) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> bindEnterGuard(guard, match, key)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEnterGuard</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  guard: NavigationGuard,</span></span></span><br><span class="line"><span class="function"><span class="params">  match: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">NavigationGuard</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">routeEnterGuard</span> (<span class="params">to, <span class="keyword">from</span>, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> guard(to, <span class="keyword">from</span>, <span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> cb === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!match.enteredCbs[key]) &#123;</span><br><span class="line">          match.enteredCbs[key] = []</span><br><span class="line">        &#125;</span><br><span class="line">        match.enteredCbs[key].push(cb)</span><br><span class="line">      &#125;</span><br><span class="line">      next(cb)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成了修改路由之后的1-12的函数执行，并且成功通过响应式的的方法触发了router-view的改变。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/2022/12/10/vue-router-source-code-1/&quot;&gt;之前的博客&lt;/a&gt;我们讲了我们创建VueRouter实例并通过Vue.use应用之后，VueRouter内部如何生成一整套自己的数据结构来存储路由配置的，这次博客我们继续解读Vue Router的源码，大致内容是Vue Router的路由守卫的执行逻辑。&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://sunra.top/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Router 源码解析（一）内部路由配置的生成</title>
    <link href="https://sunra.top/2022/12/10/vue-router-source-code-1/"/>
    <id>https://sunra.top/2022/12/10/vue-router-source-code-1/</id>
    <published>2022-12-10T02:07:58.000Z</published>
    <updated>2022-12-17T11:17:19.193Z</updated>
    
    <content type="html"><![CDATA[<p>这几天遇到个问题，就是在vue-router嵌套子路由的时候，如果深层的router-view组件没有声明key，且路由配置中的component是函数式的组件，就会导致在router.push的时候无法更新。</p><p>对于函数式组件和函数式编程，需要了记得可以我之前的<a href="https://sunra.top/2022/12/10/functional-programming-and-component/">相关博客</a>;</p><p>本文主要是分析vue-router的源码，vue-router的源码主要是两部分，第一部分是做路由匹配，第二部分是做路由跳转的，本文先主要关注第一部分</p><a id="more"></a><p>我们以<code>3.6.5</code>版本的的vue-router来讲</p><p>首先看一下src的目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── components // vue-router提供的两个组件，即router-view和router-link</span><br><span class="line">│   ├── link.js</span><br><span class="line">│   └── view.js</span><br><span class="line">├── composables // 暂时不需要关心这个目录</span><br><span class="line">│   ├── globals.js</span><br><span class="line">│   ├── guards.js</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── useLink.js</span><br><span class="line">│   └── utils.js</span><br><span class="line">├── create-matcher.js // 初始化路由的时候，创建matcher，用于后续进行路由匹配</span><br><span class="line">├── create-route-map.js // 初始化路由时，创建route-map用于matcher</span><br><span class="line">├── entries // 打包入口文件</span><br><span class="line">│   ├── cjs.js</span><br><span class="line">│   └── esm.js</span><br><span class="line">├── history // 不同的路由模式下的路由切换实现</span><br><span class="line">│   ├── abstract.js // 非浏览器环境下的路由切换</span><br><span class="line">│   ├── base.js // 路由切换的基类</span><br><span class="line">│   ├── hash.js // hash路由模式</span><br><span class="line">│   └── html5.js // HTML5模式</span><br><span class="line">├── index.js</span><br><span class="line">├── install.js // Vue.use调用的文件</span><br><span class="line">├── router.js // Vue-router对外暴露的api</span><br><span class="line">└── util</span><br><span class="line">    ├── async.js</span><br><span class="line">    ├── dom.js</span><br><span class="line">    ├── errors.js</span><br><span class="line">    ├── location.js</span><br><span class="line">    ├── misc.js</span><br><span class="line">    ├── params.js</span><br><span class="line">    ├── path.js</span><br><span class="line">    ├── push-state.js</span><br><span class="line">    ├── query.js</span><br><span class="line">    ├── resolve-components.js</span><br><span class="line">    ├── route.js</span><br><span class="line">    ├── scroll.js</span><br><span class="line">    ├── state-key.js</span><br><span class="line">    └── warn.js</span><br></pre></td></tr></table></figure><h2 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h2><p>我们下面的代码讲解给予这个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 如果使用模块化机制编程，导入 Vue 和 VueRouter，要调用 Vue.use(VueRouter)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1. 定义（路由）组件。</span></span><br><span class="line"><span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span><br><span class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></span><br><span class="line"><span class="comment">// 我们晚点再讨论嵌套路由。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes <span class="comment">// （缩写）相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="内部类型"><a href="#内部类型" class="headerlink" title="内部类型"></a>内部类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="built_in">document</span>: Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> RouteRegExp <span class="keyword">extends</span> <span class="built_in">RegExp</span> &#123;</span><br><span class="line">  keys: <span class="built_in">Array</span>&lt;&#123; name: <span class="built_in">string</span>, optional: <span class="built_in">boolean</span> &#125;&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> PathToRegexpOptions = &#123;</span><br><span class="line">  sensitive?: <span class="built_in">boolean</span>,</span><br><span class="line">  strict?: <span class="built_in">boolean</span>,</span><br><span class="line">  end?: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'path-to-regexp' &#123;</span><br><span class="line">  <span class="keyword">declare</span> <span class="built_in">module</span>.exports: &#123;</span><br><span class="line">    (path: <span class="built_in">string</span>, keys?: <span class="built_in">Array</span>&lt;?&#123; name: <span class="built_in">string</span> &#125;&gt;, options?: PathToRegexpOptions): RouteRegExp;</span><br><span class="line">    compile: <span class="function">(<span class="params">path: <span class="built_in">string</span></span>) =&gt;</span> (params: <span class="built_in">Object</span>) =&gt; <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> Dictionary&lt;T&gt; = &#123; [key: <span class="built_in">string</span>]: T &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> NavigationGuard = (</span><br><span class="line">  to: Route,</span><br><span class="line">  <span class="keyword">from</span>: Route,</span><br><span class="line">  next: <span class="function">(<span class="params">to?: RawLocation | <span class="literal">false</span> | <span class="built_in">Function</span> | <span class="built_in">void</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">) =&gt; <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> AfterNavigationHook = <span class="function">(<span class="params">to: Route, <span class="keyword">from</span>: Route</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Position = &#123; x: <span class="built_in">number</span>, y: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> PositionResult = Position | &#123; selector: <span class="built_in">string</span>, offset?: Position &#125; | <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> RouterOptions = &#123;</span><br><span class="line">  routes?: <span class="built_in">Array</span>&lt;RouteConfig&gt;;</span><br><span class="line">  mode?: <span class="built_in">string</span>;</span><br><span class="line">  fallback?: <span class="built_in">boolean</span>;</span><br><span class="line">  base?: <span class="built_in">string</span>;</span><br><span class="line">  linkActiveClass?: <span class="built_in">string</span>;</span><br><span class="line">  linkExactActiveClass?: <span class="built_in">string</span>;</span><br><span class="line">  parseQuery?: <span class="function">(<span class="params">query: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">Object</span>;</span><br><span class="line">  stringifyQuery?: <span class="function">(<span class="params">query: <span class="built_in">Object</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  scrollBehavior?: (</span><br><span class="line">    to: Route,</span><br><span class="line">    <span class="keyword">from</span>: Route,</span><br><span class="line">    savedPosition: ?Position</span><br><span class="line">  ) =&gt; PositionResult | <span class="built_in">Promise</span>&lt;PositionResult&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> RedirectOption = RawLocation | <span class="function">(<span class="params">(<span class="params">to: Route</span>) =&gt; RawLocation</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">RouteConfig</span> = &#123;</span></span><br><span class="line"><span class="function">  <span class="params">path</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">name</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">component</span>?: <span class="params">any</span>;</span></span><br><span class="line"><span class="function">  <span class="params">components</span>?: <span class="params">Dictionary</span>&lt;<span class="params">any</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">redirect</span>?: <span class="params">RedirectOption</span>;</span></span><br><span class="line"><span class="function">  <span class="params">alias</span>?: <span class="params">string</span> | <span class="params">Array</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">children</span>?: <span class="params">Array</span>&lt;<span class="params">RouteConfig</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">beforeEnter</span>?: <span class="params">NavigationGuard</span>;</span></span><br><span class="line"><span class="function">  <span class="params">meta</span>?: <span class="params">any</span>;</span></span><br><span class="line"><span class="function">  <span class="params">props</span>?: <span class="params">boolean</span> | <span class="params">Object</span> | <span class="params">Function</span>;</span></span><br><span class="line"><span class="function">  <span class="params">caseSensitive</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="params">pathToRegexpOptions</span>?: <span class="params">PathToRegexpOptions</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">RouteRecord</span> = &#123;</span></span><br><span class="line"><span class="function">  <span class="params">path</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">alias</span>: <span class="params">Array</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">regex</span>: <span class="params">RouteRegExp</span>;</span></span><br><span class="line"><span class="function">  <span class="params">components</span>: <span class="params">Dictionary</span>&lt;<span class="params">any</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">instances</span>: <span class="params">Dictionary</span>&lt;<span class="params">any</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">enteredCbs</span>: <span class="params">Dictionary</span>&lt;<span class="params">Array</span>&lt;<span class="params">Function</span>&gt;&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">name</span>: ?<span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">parent</span>: ?<span class="params">RouteRecord</span>;</span></span><br><span class="line"><span class="function">  <span class="params">redirect</span>: ?<span class="params">RedirectOption</span>;</span></span><br><span class="line"><span class="function">  <span class="params">matchAs</span>: ?<span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">beforeEnter</span>: ?<span class="params">NavigationGuard</span>;</span></span><br><span class="line"><span class="function">  <span class="params">meta</span>: <span class="params">any</span>;</span></span><br><span class="line"><span class="function">  <span class="params">props</span>: <span class="params">boolean</span> | <span class="params">Object</span> | <span class="params">Function</span> | <span class="params">Dictionary</span>&lt;<span class="params">boolean</span> | <span class="params">Object</span> | <span class="params">Function</span>&gt;;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">Location</span> = &#123;</span></span><br><span class="line"><span class="function">  _<span class="params">normalized</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="params">name</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">path</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">hash</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">query</span>?: <span class="params">Dictionary</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">params</span>?: <span class="params">Dictionary</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">append</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="params">replace</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">RawLocation</span> = <span class="params">string</span> | <span class="params">Location</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">declare</span> <span class="params">type</span> <span class="params">Route</span> = &#123;</span></span><br><span class="line"><span class="function">  <span class="params">path</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">name</span>: ?<span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">hash</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">query</span>: <span class="params">Dictionary</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">params</span>: <span class="params">Dictionary</span>&lt;<span class="params">string</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">fullPath</span>: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">matched</span>: <span class="params">Array</span>&lt;<span class="params">RouteRecord</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="params">redirectedFrom</span>?: <span class="params">string</span>;</span></span><br><span class="line"><span class="function">  <span class="params">meta</span>?: <span class="params">any</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="install-js-安装全局钩子"><a href="#install-js-安装全局钩子" class="headerlink" title="install.js 安装全局钩子"></a>install.js 安装全局钩子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">'./components/view'</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'./components/link'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> _Vue</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 防止重复安装</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class="keyword">return</span></span><br><span class="line">  install.installed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存Vue实例，并export出来供内部使用</span></span><br><span class="line">  _Vue = Vue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isDef = <span class="function"><span class="params">v</span> =&gt;</span> v !== <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> registerInstance = <span class="function">(<span class="params">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = vm.$options._parentVnode</span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class="line">      i(vm, callVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局混入配置，为每个vue组件都添加钩子函数</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line"><span class="comment">// 如果本身定义了router参数，这里只会出现在跟组件的情况下，因为我们在new Vue并挂载到#app的时候传入的参数</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line"><span class="comment">// _routerRoot 指向根组件</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line"><span class="comment">// 定义在router.js中，具体看后面的解析</span></span><br><span class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line"><span class="comment">// 进入这里的时候，this是根vue实例，this._route指向的是this._router.history.current</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 进入这里说明不是根Vue组件，那么子组件的_routerRoot就是副组件上的_routerRoot</span></span><br><span class="line"><span class="comment">// 这里不需要递归向上寻找是因为Vue组件树的构建是自上而下的，所以只需要寻找上一层就好</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// _routerRoot都指向根Vue实例，则this._routerRoot._router指向的就是new Vue时传入的vue-router实例</span></span><br><span class="line"><span class="comment">// 所以每个Vue组件中的this.$router，会通过原型链找到Vue.prototype.$router，就会找到new Vue时传入的vue-router实例</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// _routerRoot都指向根Vue实例，则this._routerRoot._route指向的就是this._router.history.current</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Vue.component(<span class="string">'RouterView'</span>, View)</span><br><span class="line">  Vue.component(<span class="string">'RouterLink'</span>, Link)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h2><p>上面我们通过install.js挂载VueRouter，我们看一下这个VueRouter是什么。</p><p>这个VueRouter是通过import index.js引入的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'./entries/cjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p><code>./entries/cj</code>内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'../router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p>然后就是router.js的内容了：</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span> (<span class="params">options: RouterOptions = &#123;&#125;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">warn(<span class="keyword">this</span> <span class="keyword">instanceof</span> VueRouter, <span class="string">`Router must be called with the new operator.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.app = <span class="literal">null</span></span><br><span class="line"><span class="keyword">this</span>.apps = []</span><br><span class="line"><span class="keyword">this</span>.options = options</span><br><span class="line"><span class="keyword">this</span>.beforeHooks = []</span><br><span class="line"><span class="keyword">this</span>.resolveHooks = []</span><br><span class="line"><span class="keyword">this</span>.afterHooks = []</span><br><span class="line"><span class="comment">// 这里很关键，matcher根据我们new Router的时候传入的routes构造路由匹配器，我们后面再说</span></span><br><span class="line"><span class="keyword">this</span>.matcher = createMatcher(options.routes || [], <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传入的mode，默认为hash，模式</span></span><br><span class="line"><span class="keyword">let</span> mode = options.mode || <span class="string">'hash'</span></span><br><span class="line"><span class="comment">// supportsPushState 表示当前路由器是否支持pushstate方法，支持了才能使用history api</span></span><br><span class="line"><span class="keyword">this</span>.fallback =</span><br><span class="line">mode === <span class="string">'history'</span> &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.fallback) &#123;</span><br><span class="line">mode = <span class="string">'hash'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!inBrowser) &#123;</span><br><span class="line">mode = <span class="string">'abstract'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.mode = mode</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据不同的模式采取不同的路由history</span></span><br><span class="line"><span class="keyword">switch</span> (mode) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'history'</span>:</span><br><span class="line"><span class="keyword">this</span>.history = <span class="keyword">new</span> HTML5History(<span class="keyword">this</span>, options.base)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'hash'</span>:</span><br><span class="line"><span class="keyword">this</span>.history = <span class="keyword">new</span> HashHistory(<span class="keyword">this</span>, options.base, <span class="keyword">this</span>.fallback)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'abstract'</span>:</span><br><span class="line"><span class="keyword">this</span>.history = <span class="keyword">new</span> AbstractHistory(<span class="keyword">this</span>, options.base)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">assert(<span class="literal">false</span>, <span class="string">`invalid mode: <span class="subst">$&#123;mode&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>这个函数其实就是install.js里面调用的init方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">init (app: <span class="built_in">any</span> <span class="comment">/* Vue component instance */</span>) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">      assert(</span><br><span class="line">        install.installed,</span><br><span class="line">        <span class="string">`not installed. Make sure to call \`Vue.use(VueRouter)\` `</span> +</span><br><span class="line">          <span class="string">`before creating root instance.`</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue-router实际上支持多实例的模式，不过一般用不到</span></span><br><span class="line">    <span class="keyword">this</span>.apps.push(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set up app destroyed handler</span></span><br><span class="line">    <span class="comment">// https://github.com/vuejs/vue-router/issues/2639</span></span><br><span class="line">    app.$once(<span class="string">'hook:destroyed'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// clean out app from this.apps array once destroyed</span></span><br><span class="line">      <span class="keyword">const</span> index = <span class="keyword">this</span>.apps.indexOf(app)</span><br><span class="line">      <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) <span class="keyword">this</span>.apps.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="comment">// ensure we still have a main app or null if no apps</span></span><br><span class="line">      <span class="comment">// we do not release the router so it can be reused</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.app === app) <span class="keyword">this</span>.app = <span class="keyword">this</span>.apps[<span class="number">0</span>] || <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.app) <span class="keyword">this</span>.history.teardown()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main app previously initialized</span></span><br><span class="line">    <span class="comment">// return as we don't need to set up new history listener</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.app = app</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.history</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是HTML5History或者HashHistory，调用二者的setupListeners</span></span><br><span class="line">    <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HTML5History || history <span class="keyword">instanceof</span> HashHistory) &#123;</span><br><span class="line">      <span class="keyword">const</span> handleInitialScroll = <span class="function"><span class="params">routeOrError</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">from</span> = history.current</span><br><span class="line">        <span class="keyword">const</span> expectScroll = <span class="keyword">this</span>.options.scrollBehavior</span><br><span class="line">        <span class="keyword">const</span> supportsScroll = supportsPushState &amp;&amp; expectScroll</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (supportsScroll &amp;&amp; <span class="string">'fullPath'</span> <span class="keyword">in</span> routeOrError) &#123;</span><br><span class="line">          handleScroll(<span class="keyword">this</span>, routeOrError, <span class="keyword">from</span>, <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> setupListeners = <span class="function"><span class="params">routeOrError</span> =&gt;</span> &#123;</span><br><span class="line">        history.setupListeners()</span><br><span class="line">        handleInitialScroll(routeOrError)</span><br><span class="line">      &#125;</span><br><span class="line">      history.transitionTo(</span><br><span class="line">        history.getCurrentLocation(),</span><br><span class="line">        setupListeners,</span><br><span class="line">        setupListeners</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    history.listen(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.apps.forEach(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">        app._route = route</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="create-matcher-js"><a href="#create-matcher-js" class="headerlink" title="create-matcher.js"></a>create-matcher.js</h2><p>这个函数返回了一个Matcher，它的类型声明如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Matcher = &#123;</span><br><span class="line">  match: <span class="function">(<span class="params">raw: RawLocation, current?: Route, redirectedFrom?: Location</span>) =&gt;</span> Route;</span><br><span class="line">  addRoutes: <span class="function">(<span class="params">routes: <span class="built_in">Array</span>&lt;RouteConfig&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  addRoute: <span class="function">(<span class="params">parentNameOrRoute: <span class="built_in">string</span> | RouteConfig, route?: RouteConfig</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  getRoutes: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Array</span>&lt;RouteRecord&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码第一行：<code>const { pathList, pathMap, nameMap } = createRouteMap(routes)</code></p><h3 id="create-route-map-js"><a href="#create-route-map-js" class="headerlink" title="create-route-map.js"></a>create-route-map.js</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouteMap</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  routes: <span class="built_in">Array</span>&lt;RouteConfig&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldPathList?: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldPathMap?: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldNameMap?: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentRoute?: RouteRecord</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  pathList: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;,</span><br><span class="line">  pathMap: Dictionary&lt;RouteRecord&gt;,</span><br><span class="line">  nameMap: Dictionary&lt;RouteRecord&gt;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="comment">// the path list is used to control path matching priority</span></span><br><span class="line">  <span class="keyword">const</span> pathList: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = oldPathList || []</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> pathMap: Dictionary&lt;RouteRecord&gt; = oldPathMap || <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> nameMap: Dictionary&lt;RouteRecord&gt; = oldNameMap || <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历传入的routes，这里只需要遍历第一层是因为addRouteRecord本身就会进行递归</span></span><br><span class="line"><span class="comment">// 这段代码就是一个多源DFS遍历路由配置，然后为每一个路由配置生成record，存储进pathList，pathMap，nameMap中</span></span><br><span class="line">  routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    addRouteRecord(pathList, pathMap, nameMap, route, parentRoute)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 * 的路由放在最后</span></span><br><span class="line">  <span class="comment">// ensure wildcard routes are always at the end</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = pathList.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathList[i] === <span class="string">'*'</span>) &#123;</span><br><span class="line">      pathList.push(pathList.splice(i, <span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">      l--</span><br><span class="line">      i--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="comment">// warn if routes do not include leading slashes</span></span><br><span class="line">    <span class="keyword">const</span> found = pathList</span><br><span class="line">    <span class="comment">// check for missing leading slash</span></span><br><span class="line">      .filter(<span class="function"><span class="params">path</span> =&gt;</span> path &amp;&amp; path.charAt(<span class="number">0</span>) !== <span class="string">'*'</span> &amp;&amp; path.charAt(<span class="number">0</span>) !== <span class="string">'/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (found.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> pathNames = found.map(<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">`- <span class="subst">$&#123;path&#125;</span>`</span>).join(<span class="string">'\n'</span>)</span><br><span class="line">      warn(<span class="literal">false</span>, <span class="string">`Non-nested routes must include a leading slash character. Fix the following routes: \n<span class="subst">$&#123;pathNames&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    pathList,</span><br><span class="line">    pathMap,</span><br><span class="line">    nameMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRouteRecord</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  pathList: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  pathMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  nameMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  route: RouteConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">  parent?: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  matchAs?: <span class="built_in">string</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; path, name &#125; = route</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assert(path != <span class="literal">null</span>, <span class="string">`"path" is required in a route configuration.`</span>)</span><br><span class="line">    assert(</span><br><span class="line">      <span class="keyword">typeof</span> route.component !== <span class="string">'string'</span>,</span><br><span class="line">      <span class="string">`route config "component" for path: <span class="subst">$&#123;<span class="built_in">String</span>(</span></span></span><br><span class="line"><span class="string"><span class="subst">        path || name</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span> cannot be a `</span> + <span class="string">`string id. Use an actual component instead.`</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    warn(</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-control-regex</span></span><br><span class="line">      !<span class="regexp">/[^\u0000-\u007F]+/</span>.test(path),</span><br><span class="line">      <span class="string">`Route with path "<span class="subst">$&#123;path&#125;</span>" contains unencoded characters, make sure `</span> +</span><br><span class="line">        <span class="string">`your path is correctly encoded before passing it to the router. Use `</span> +</span><br><span class="line">        <span class="string">`encodeURI to encode static segments of your path.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的内容主要是参数检测，可以不看</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pathToRegexpOptions: PathToRegexpOptions =</span><br><span class="line">    route.pathToRegexpOptions || &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化路径，并且把子路由的路径和它的父级路由拼接，比如把/foo和/bar拼接起来</span></span><br><span class="line">  <span class="keyword">const</span> normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> route.caseSensitive === <span class="string">'boolean'</span>) &#123;</span><br><span class="line">    pathToRegexpOptions.sensitive = route.caseSensitive</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> record: RouteRecord = &#123;</span><br><span class="line">    path: normalizedPath,</span><br><span class="line">    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),</span><br><span class="line">    components: route.components || &#123; <span class="keyword">default</span>: route.component &#125;,</span><br><span class="line">    alias: route.alias</span><br><span class="line">      ? <span class="keyword">typeof</span> route.alias === <span class="string">'string'</span></span><br><span class="line">        ? [route.alias]</span><br><span class="line">        : route.alias</span><br><span class="line">      : [],</span><br><span class="line">    instances: &#123;&#125;,</span><br><span class="line">    enteredCbs: &#123;&#125;,</span><br><span class="line">    name,</span><br><span class="line">    parent,</span><br><span class="line">    matchAs,</span><br><span class="line">    redirect: route.redirect,</span><br><span class="line">    beforeEnter: route.beforeEnter,</span><br><span class="line">    meta: route.meta || &#123;&#125;,</span><br><span class="line">    props:</span><br><span class="line">      route.props == <span class="literal">null</span></span><br><span class="line">        ? &#123;&#125;</span><br><span class="line">        : route.components</span><br><span class="line">          ? route.props</span><br><span class="line">          : &#123; <span class="keyword">default</span>: route.props &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有children嵌套路由，递归调用本身</span></span><br><span class="line">  <span class="keyword">if</span> (route.children) &#123;</span><br><span class="line">    <span class="comment">// Warn if route is named, does not redirect and has a default child route.</span></span><br><span class="line">    <span class="comment">// If users navigate to this route by name, the default child will</span></span><br><span class="line">    <span class="comment">// not be rendered (GH Issue #629)</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        route.name &amp;&amp;</span><br><span class="line">        !route.redirect &amp;&amp;</span><br><span class="line">        route.children.some(<span class="function"><span class="params">child</span> =&gt;</span> /^\/?$/.test(child.path))</span><br><span class="line">      ) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="string">`Named Route '<span class="subst">$&#123;route.name&#125;</span>' has a default child route. `</span> +</span><br><span class="line">            <span class="string">`When navigating to this named route (:to="&#123;name: '<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">              route.name</span></span></span><br><span class="line"><span class="string"><span class="subst">            &#125;</span>'&#125;"), `</span> +</span><br><span class="line">            <span class="string">`the default child route will not be rendered. Remove the name from `</span> +</span><br><span class="line">            <span class="string">`this route and use the name of the default child route for named `</span> +</span><br><span class="line">            <span class="string">`links instead.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    route.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> childMatchAs = matchAs</span><br><span class="line">        ? cleanPath(<span class="string">`<span class="subst">$&#123;matchAs&#125;</span>/<span class="subst">$&#123;child.path&#125;</span>`</span>)</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将计算出来的record存储到pathList和pathMap中</span></span><br><span class="line">  <span class="keyword">if</span> (!pathMap[record.path]) &#123;</span><br><span class="line">    pathList.push(record.path)</span><br><span class="line">    pathMap[record.path] = record</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (route.alias !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> aliases = <span class="built_in">Array</span>.isArray(route.alias) ? route.alias : [route.alias]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aliases.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">const</span> alias = aliases[i]</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; alias === path) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="string">`Found an alias with the same value as the path: "<span class="subst">$&#123;path&#125;</span>". You have to remove that alias. It will be ignored in development.`</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// skip in dev to make it work</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> aliasRoute = &#123;</span><br><span class="line">        path: alias,</span><br><span class="line">        children: route.children</span><br><span class="line">      &#125;</span><br><span class="line">      addRouteRecord(</span><br><span class="line">        pathList,</span><br><span class="line">        pathMap,</span><br><span class="line">        nameMap,</span><br><span class="line">        aliasRoute,</span><br><span class="line">        parent,</span><br><span class="line">        record.path || <span class="string">'/'</span> <span class="comment">// matchAs</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果路由配置中有name属性，添加name和routeConfig的映射</span></span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nameMap[name]) &#123;</span><br><span class="line">      nameMap[name] = record</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !matchAs) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">`Duplicate named routes definition: `</span> +</span><br><span class="line">          <span class="string">`&#123; name: "<span class="subst">$&#123;name&#125;</span>", path: "<span class="subst">$&#123;record.path&#125;</span>" &#125;`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天遇到个问题，就是在vue-router嵌套子路由的时候，如果深层的router-view组件没有声明key，且路由配置中的component是函数式的组件，就会导致在router.push的时候无法更新。&lt;/p&gt;
&lt;p&gt;对于函数式组件和函数式编程，需要了记得可以我之前的&lt;a href=&quot;https://sunra.top/2022/12/10/functional-programming-and-component/&quot;&gt;相关博客&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;本文主要是分析vue-router的源码，vue-router的源码主要是两部分，第一部分是做路由匹配，第二部分是做路由跳转的，本文先主要关注第一部分&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://sunra.top/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>函数式组件与函数式编程</title>
    <link href="https://sunra.top/2022/12/10/functional-programming-and-component/"/>
    <id>https://sunra.top/2022/12/10/functional-programming-and-component/</id>
    <published>2022-12-10T00:51:27.000Z</published>
    <updated>2022-12-10T13:02:16.458Z</updated>
    
    <content type="html"><![CDATA[<p>函数式编程和函数式组件是现在开发的一个趋势，过去一直在用，但是没有从概念上理解，本文就把二者放在一起总结一下并进行一定的对比。</p><p>函数式编程是一种编程范式，而函数式组件是这种范式下的一种产物。</p><a id="more"></a><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><p>编程范型、编程范式或程序设计法（英语：Programming paradigm），是指软件工程中的一类典型的编程风格。常见的编程范型有：函数式编程、指令式编程、过程式编程、面向对象编程等等。</p><p>编程范型提供并决定了程序员对程序执行的看法。例如，在面向对象编程中，程序员认为程序是一系列相互作用的对象，由于方法论的不同，面向对象编程范型又分为基于类编程和基于原型编程，而在函数式编程中一个程序会被看作是一个无状态的函数计算的序列。</p><blockquote><p>编程范式与编程语言不同，比如面向对象语言，只是说该语言提供了比较方便的封装，继承，多态的语法，不代表你只能写出面向对象的代码，也不代表你写出来的代码符合面向对象的范式</p></blockquote><p>编程范式还有很多，这里贴一下维基百科的目录：</p><ul><li>指令式<ul><li>过程式</li><li>块结构</li><li>结构化</li><li>模块化</li></ul></li><li>函数式<ul><li>头等函数</li><li>纯函数式</li><li>隐式</li><li>模式匹配</li><li>推导式</li></ul></li><li>面向对象<ul><li>基于类</li><li>基于原型</li><li>契约式</li><li>面向切面</li><li>面向代理</li></ul></li><li>阵列式</li><li>数据流程<ul><li>同步式</li><li>响应式</li><li>流处理</li><li>基于流程</li></ul></li></ul><h2 id="函数式编程是一种编程范式"><a href="#函数式编程是一种编程范式" class="headerlink" title="函数式编程是一种编程范式"></a>函数式编程是一种编程范式</h2><p>函数式编程，或称函数程序设计、泛函编程（英语：Functional programming），是一种编程范型，它将电脑运算视为函数运算，并且避免使用程序状态以及可变对象。</p><p><strong>在函数式编程中，函数是头等对象即头等函数，这意味着一个函数，既可以作为其它函数的输入参数值，也可以从函数中返回值</strong>，被修改或者被分配给一个变量。λ演算是这种范型最重要的基础，λ演算的函数可以接受函数作为输入参数和输出返回值。</p><p><strong>比起指令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程</strong>。</p><h2 id="什么叫函数式编程"><a href="#什么叫函数式编程" class="headerlink" title="什么叫函数式编程"></a>什么叫函数式编程</h2><p>从上面那段定义可以提取出这几个关键词：</p><ol><li>避免状态变更</li><li>函数作为输入输出</li><li>和λ演算有关</li></ol><p>关于这段定义，如果只是想简单理解函数式编程的表现形式是怎样的，可以看一下<a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html" rel="external nofollow noopener noreferrer" target="_blank">阮一峰的这篇博客</a></p><p>如果想深入理解，也建议先读读上面那个博客，很短，但是有助于理解下面的某些公式的形式。</p><p>避免状态变更和函数作为输入输出都比较好理解，，那什么叫做lambda演算呢？要理解lambda演算，就会扯出图灵完备，图灵机。接下来我简单和大家解释一下。</p><h3 id="什么叫表达式"><a href="#什么叫表达式" class="headerlink" title="什么叫表达式"></a>什么叫表达式</h3><p>λ演算（英语：lambda calculus，λ-calculus）是一套从数学逻辑中发展，以变量绑定和替换的规则，来研究函数如何抽象化定义、函数如何被应用以及递归的形式系统。它由数学家阿隆佐·邱奇在20世纪30年代首次发表。<strong>lambda演算作为一种广泛用途的计算模型，可以清晰地定义什么是一个可计算函数，而任何可计算函数都能以这种形式表达和求值，它能模拟单一磁带图灵机的计算过程</strong>；尽管如此，lambda演算强调的是变换规则的运用，而非实现它们的具体机器。</p><p><strong>lambda演算可比拟是最根本的编程语言，它包括了一条变换规则（变量替换）和一条将函数抽象化定义的方式</strong>。因此普遍公认是一种更接近软件而非硬件的方式。对函数式编程语言造成很大影响，比如Lisp、ML语言和Haskell语言。在1936年邱奇利用λ演算给出了对于判定性问题（Entscheidungsproblem）的否定：关于两个lambda表达式是否等价的命题，无法由一个“通用的算法”判断，这是不可判定性能够证明的头一个问题，甚至还在<a href="https://zh.m.wikipedia.org/zh-cn/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98" rel="external nofollow noopener noreferrer" target="_blank">停机问题</a>之先。</p><p>lambda演算包括了建构lambda项，和对lambda项执行归约的操作。在最简单的lambda演算中，只使用以下的规则来建构lambda项：</p><div class="table-container"><table><thead><tr><th>语法</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>变量</td><td>用字符或字符串来表示参数或者数学上的值或者表示逻辑上的值</td></tr><tr><td>(λx.M)</td><td>抽象化</td><td>一个完整的函数定义（M是一个 lambda 项），在表达式中的 x 都会绑定为变量 x。</td></tr><tr><td>(M N)</td><td>应用</td><td>将函数M作用于参数N。 M 和 N 是 lambda 项。</td></tr></tbody></table></div><p>产生了诸如：(λx.λy.(λz.(λx.zx)(λy.zy))(x y))的表达式。如果表达式是明确而没有歧义的，则括号可以省略。对于某些应用，其中可能包括了逻辑和数学的常量以及相关操作。</p><p><strong>λ演算是图灵完备的，也就是说，这是一个可以用于模拟任何图灵机的通用模型</strong>。λ也被用在λ表达式和λ项中，用来表示将一个变量绑定在一个函数上。</p><p>λ演算可以是有类型或者无类型的，在有类型λ演算中（上文所述是无类型的），函数只能在参数类型和输入类型符合时被应用。有类型λ演算比无类型λ演算要弱——后者是这个条目的主要部分——因为有类型的λ运算能表达的比无类型λ演算少；与此同时，前者使得更多定理能被证明。例如，在简单类型λ演算中，运算总是能够停止，然而无类型λ演算中这是不一定的（因为停机问题）。目前有许多种有类型λ演算的一个原因是它们被期望能做到更多（做到某些以前的有类型λ演算做不到的）的同时又希望能用以证明更多定理。</p><p>λ演算在数学、哲学、语言学和计算机科学中都有许多应用。它在编程语言理论中占有重要地位，函数式编程实现了λ演算支持。λ演算在范畴论中也是一个研究热点。</p><p>λ演算式就三个要点：</p><ul><li>绑定关系。变量任意性，x、y和z都行，它仅仅是具体数据的代称。</li><li>递归定义。λ项递归定义，M可以是一个λ项。</li><li>替换归约。λ项可应用，空格分隔表示对M应用N，N可以是一个λ项。</li></ul><p>通过变量代换（substitution）和归约（reduction），我们可以像化简方程一样处理我们的演算。</p><p>举个例子，刚才我们说的<code>(λx.λy.(λz.(λx.zx)(λy.zy))(x y))</code>，首先<code>(λx.zx)</code>表示<code>f(x) = zx</code>，那么 <code>(λx.zx) 3</code> 就是<code>3z</code></p><h3 id="演算：变量的含义"><a href="#演算：变量的含义" class="headerlink" title="演算：变量的含义"></a>演算：变量的含义</h3><p>在λ演算中我们的表达式只有一个参数，那它怎么实现两个数字的二元操作呢？比如加法a + b，需要两个参数。</p><p>这时，我们要把函数本身也视为值，可以通过把一个变量绑定到上下文，然后返回一个新的函数，来实现数据（或者说是状态）的保存和传递，被绑定的变量可以在需要实际使用的时候从上下文中引用到。</p><p>比如：<code>λm.λn.m + n 5 = λn.5 + n</code>,第一次函数调用传入m=5，返回一个新函数，这个新函数接收一个参数n，并返回m + n的结果。像这种情况产生的上下文，<strong>就是Closure（闭包，函数式编程常用的状态保存和引用手段）</strong>，我们称变量m是被绑定（binding）到了第二个函数的上下文。</p><p>除了绑定的变量，λ演算也支持自由的变量，比如这个y：<code>λm.λn.m + n + y</code>,这里的y是一个没有绑定到参数位置的变量，被称为一个自由变量。</p><p>绑定变量和自由变量是函数的两种状态来源，一个可以被代换，另一个不能。实际程序中，<strong>通常把绑定变量实现为局部变量或者参数，自由变量实现为全局变量或者环境变量</strong>。</p><h3 id="演算：代换和归约"><a href="#演算：代换和归约" class="headerlink" title="演算：代换和归约"></a>演算：代换和归约</h3><p>演算分为Alpha代换和Beta归约。 前面章节我们实际上已经涉及这两个概念，下面来介绍一下它们。</p><p>Alpha代换指的是变量的名称是不重要的，你可以写λm.λn.m + n，也可以写λx.λy.x + y，在演算过程中它们表示同一个函数。也就是说我们只关心计算的形式，而不关心细节用什么变量去实现。这方便我们不改变运算结果的前提下去修改变量命名，以方便在函数比较复杂的情况下进行化简操作。实际上，连整个lambda演算式的名字也是不重要的，我们只需要这种形式的计算，而不在乎这个形式的命名。</p><p>Beta归约指的是如果你有一个函数应用（函数调用），那么你可以对这个函数体中与标识符对应的部分做代换（substitution），方式为使用参数（可能是另一个演算式）去替换标识符。听起来有点绕口，但是它实际上就是函数调用的参数替换。比如：<code>(λm.λn.m + n) 1 3 = (λn.1 + n) 3 = 1 + 3 = 4</code></p><p>可以使用1替换m，3替换n，那么整个表达式可以化简为4。这也是函数式编程里面的<a href="https://caowenwei.github.io/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/pure-function-rt/" rel="external nofollow noopener noreferrer" target="_blank">引用透明性</a>的由来。需要注意的是，这里的1和3表示表达式运算值，可以替换为其他表达式。比如把1替换为(λm.λn.m + n 1 3)，这里就需要做两次归约</p><h3 id="JavaScript中的λ表达式：箭头函数"><a href="#JavaScript中的λ表达式：箭头函数" class="headerlink" title="JavaScript中的λ表达式：箭头函数"></a>JavaScript中的λ表达式：箭头函数</h3><p>ECMAScript 2015规范引入了箭头函数，它没有this，没有arguments。只能作为一个表达式（expression）而不能作为一个声明式（statement），表达式产生一个箭头函数引用，该箭头函数引用仍然有name和length属性，分别表示箭头函数的名字、形参（parameters）长度。一个箭头函数就是一个单纯的运算式，箭头函数我们也可以称为lambda函数，它在书写形式上就像是一个λ演算式。</p><p>可以利用箭头函数做一些简单的运算，下例比较了四种箭头函数的使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add_1 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y; <span class="comment">// 全部为局部变量</span></span><br><span class="line"><span class="keyword">const</span> add_2 = <span class="function"><span class="params">x</span> =&gt;</span> x + y; <span class="comment">// y为全局变量</span></span><br><span class="line"><span class="keyword">const</span> add_3 = <span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y; <span class="comment">// 闭包串联参数，柯里化</span></span><br><span class="line"><span class="keyword">const</span> add_4 = <span class="function"><span class="params">b</span> =&gt;</span> <span class="function"><span class="params">a</span> =&gt;</span> a + b; <span class="comment">// 参数命名和表达式结果无关</span></span><br></pre></td></tr></table></figure><p>这是直接针对数字（基本数据类型）的情况，如果是针对函数做运算（引用数据类型），事情就变得有趣起来了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn_1 = <span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x(y);</span><br><span class="line"><span class="keyword">const</span> fn_2 = <span class="function"><span class="params">f</span> =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> f(x);</span><br><span class="line"><span class="keyword">const</span> add_1 = (<span class="function"><span class="params">f</span> =&gt;</span> f(<span class="number">5</span>))(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> add_2 = (<span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> x + y)(<span class="number">2</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> add_3 = (<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>)(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>fn_x类型，表明我们可以利用函数内的函数，当函数被当作数据传递的时候，就可以对函数进行应用（apply），生成更高阶的操作。 并且x =&gt; y =&gt; x(y)可以有两种理解，一种是x =&gt; y函数传入X =&gt; x(y)，另一种是x传入y =&gt; x(y)。</p><p>add_x类型表明，一个运算式可以有很多不同的路径来实现。</p><h3 id="函数式编程基础：函数的元、柯里化和Point-Free"><a href="#函数式编程基础：函数的元、柯里化和Point-Free" class="headerlink" title="函数式编程基础：函数的元、柯里化和Point-Free"></a>函数式编程基础：函数的元、柯里化和Point-Free</h3><p>回到JavaScript本身，我们要探究函数本身能不能带给我们更多的东西？我们在JavaScript中有很多创建函数的方式：</p><p>可以通过声明式，表达式，箭头函数，new Function等方式</p><p>虽然函数有这么多定义，但function关键字声明的函数带有arguments和this关键字，这让他们看起来更像是对象方法（method），而不是函数（function） 。</p><p>况且function定义的函数大多数还能被构造（比如new Array）。</p><p>接下来我们将只研究箭头函数，因为它更像是数学意义上的函数（仅执行计算过程）。</p><ul><li>没有arguments和this。</li><li>不可以被构造new。</li></ul><h4 id="函数的元"><a href="#函数的元" class="headerlink" title="函数的元"></a>函数的元</h4><p>不论使用何种方式去构造一个函数，这个函数都有两个固定的信息可以获取：</p><ul><li>name 表示当前标识符指向的函数的名字。</li><li>length 表示当前标识符指向的函数定义时的参数列表长度。</li></ul><p>在数学上，我们定义f(x) = x是一个一元函数，而f(x, y) = x + y是一个二元函数。在JavaScript中我们可以使用函数定义时的length来定义它的元。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="function"><span class="params">a</span> =&gt;</span> a;</span><br><span class="line"><span class="keyword">const</span> two = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">const</span> three = <span class="function">(<span class="params">a, b, c</span>) =&gt;</span> a + b + c;</span><br></pre></td></tr></table></figure><p>定义函数的元的意义在于，我们可以对函数进行归类，并且可以明确一个函数需要的确切参数个数。函数的元在编译期（类型检查、重载）和运行时（异常处理、动态生成代码）都有重要作用。</p><p>如果我给你一个二元函数，你就知道需要传递两个参数。比如+就可以看成是一个二元函数，它的左边接受一个参数，右边接受一个参数，返回它们的和（或字符串连接）。</p><p>在一些其他语言中，+确实也是由抽象类来定义实现的，比如Rust语言的trait Add。</p><p>但我们上面看到的λ演算，每个函数都只有一个元。为什么呢？</p><p>只有一个元的函数方便我们进行代数运算。λ演算的参数列表使用λx.λy.λz的格式进行分割，返回值一般都是函数，如果一个二元函数，调用时只使用了一个参数，则返回一个「不完全调用函数」。这里用三个例子解释“不完全调用”。</p><h4 id="柯里化函数：函数元降维技术"><a href="#柯里化函数：函数元降维技术" class="headerlink" title="柯里化函数：函数元降维技术"></a>柯里化函数：函数元降维技术</h4><p>柯里化（curry）函数是一种把函数的元降维的技术，这个名词是为了纪念我们上文提到的数学家阿隆佐·邱奇。</p><p>柯里化函数帮助我们把一个多元函数变成一个不完全调用，利用Closure的魔法，把函数调用变成延迟的偏函数(不完全调用函数)调用。这在函数组合、复用等场景非常有用</p><h4 id="Point-Free｜无参风格：函数的高阶组合"><a href="#Point-Free｜无参风格：函数的高阶组合" class="headerlink" title="Point-Free｜无参风格：函数的高阶组合"></a>Point-Free｜无参风格：函数的高阶组合</h4><p>函数式编程中有一种Point-Free风格，中文语境大概可以把point认为是参数点，对应λ演算中的函数应用（Function Apply），或者JavaScript中的函数调用（Function Call），所以可以理解Point-Free就指的是无参调用。</p><p>来看一个日常的例子，把二进制数据转换为八进制数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strNums = [<span class="string">'01'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'1110'</span>];</span><br><span class="line">strNums.map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">2</span>)).map(<span class="function"><span class="params">x</span> =&gt;</span> x.toString(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>这段代码运行起来没有问题，但我们为了处理这个转换，需要了解 parseInt(x, 2) 和 toString(8) 这两个函数（为什么有魔法数字2和魔法数字8），并且要关心数据（函数类型a -&gt; b）在每个节点的形态（关心数据的流向）。有没有一种方式，可以让我们只关心入参和出参，不关心数据流动过程呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toBinary = <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x,  <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> toString0x =&gt; <span class="function"><span class="params">x</span> =&gt;</span> x.toString(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> pipe = <span class="function">(<span class="params">...fns</span>) =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> fns.reduce(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> fn(acc), x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strNums = [<span class="string">'01'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'1110'</span>];</span><br><span class="line">strNums.map(pipe(toBinary, toString0x));</span><br></pre></td></tr></table></figure><h1 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h1><h2 id="什么叫函数式组件"><a href="#什么叫函数式组件" class="headerlink" title="什么叫函数式组件"></a>什么叫函数式组件</h2><p>函数式组件就是函数是组件，组件是函数，它的特征是没有内部状态、没有生命周期钩子函数、没有this（不需要实例化的组件）。</p><p>在日常开发中，我们经常会开发一些纯展示性的业务组件，比如一些详情页面，列表界面等，它们有一个共同的特点是：</p><p>只要你传入数据，我就进行展现。</p><p>不需要有内部状态，不需要在生命周期钩子函数里面做处理。</p><p>这时候你就可以用函数式组件。</p><h2 id="为什么要用函数式组件"><a href="#为什么要用函数式组件" class="headerlink" title="为什么要用函数式组件"></a>为什么要用函数式组件</h2><p>函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件</p><p>函数式组件结构更简单，代码结构更清晰</p><h2 id="Vue2-的函数式组件"><a href="#Vue2-的函数式组件" class="headerlink" title="Vue2 的函数式组件"></a>Vue2 的函数式组件</h2><ol><li><p>函数式组件需要在声明组件是指定functional。</p></li><li><p>函数式组件不需要实例化，所以没有this，this通过render函数的第二个参数来代替。</p></li><li><p>函数式组件没有生命周期钩子函数，不能使用计算属性，watch等等。</p></li><li><p>函数式组件不能通过$emit对外暴露事件，调用事件只能通过context.listeners.click的方式调用外部传入的事件。</p></li><li><p>因为函数式组件是没有实例化的，所以在外部通过ref去引用组件时，实际引用的是HTMLElement。</p></li><li><p>函数式组件的props可以只声明一部分或者全都不声明，所有没有在props里面声明的属性都会被自动隐式解析为prop，而普通组件所有未声明的属性都被解析到$attrs里面，并自动挂载到组件根元素上面(可以通过inheritAttrs属性禁止)。</p></li></ol><p>上面已经反复强调，凡是不需要实例化，无状态，没有生命周期的组件，除了props之外没有别的配置项，都可以改写成函数式组件。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;func text=<span class="string">"aaaaaaaa"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> func <span class="keyword">from</span> <span class="string">'@/components/func.vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    func</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;props.text ? props.text : <span class="string">'哈哈'</span>&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意，没有<code>&lt;script&gt;...&lt;/script&gt;</code>部分。</p></blockquote><h4 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    text: &#123;</span><br><span class="line">      type: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 渲染函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">h</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>context 函数式组件没有this, props, slots等都在context上面挂着</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  render(h, context) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(context);</span><br><span class="line">    <span class="keyword">const</span> &#123; props &#125; = context</span><br><span class="line">    <span class="keyword">if</span> (props.text) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈嗝<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue3-的函数式组件"><a href="#Vue3-的函数式组件" class="headerlink" title="Vue3 的函数式组件"></a>Vue3 的函数式组件</h2><p><a href="https://www.javascriptc.com/vue3js/guide/migration/functional-components.html#%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6" rel="external nofollow noopener noreferrer" target="_blank">Vue3 函数式组件</a></p><h2 id="React-的函数式组件"><a href="#React-的函数式组件" class="headerlink" title="React 的函数式组件"></a>React 的函数式组件</h2><p><a href="https://zh-hans.reactjs.org/docs/components-and-props.html" rel="external nofollow noopener noreferrer" target="_blank">React 函数式组件</a></p><p>参考文章：</p><p><a href="https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html" rel="external nofollow noopener noreferrer" target="_blank">https://tech.meituan.com/2022/10/13/dive-into-functional-programming-01.html</a></p><p><a href="https://www.ruanyifeng.com/blog/2012/04/functional_programming.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.ruanyifeng.com/blog/2012/04/functional_programming.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数式编程和函数式组件是现在开发的一个趋势，过去一直在用，但是没有从概念上理解，本文就把二者放在一起总结一下并进行一定的对比。&lt;/p&gt;
&lt;p&gt;函数式编程是一种编程范式，而函数式组件是这种范式下的一种产物。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 设计模式学习与实践（二）</title>
    <link href="https://sunra.top/2022/11/28/javascript-design-pattern-2/"/>
    <id>https://sunra.top/2022/11/28/javascript-design-pattern-2/</id>
    <published>2022-11-28T01:40:55.000Z</published>
    <updated>2022-11-28T07:47:56.037Z</updated>
    
    <content type="html"><![CDATA[<p>我们接着上一篇博客继续总结和学习JavaScript的常用设计模式，这一次我们总结两个在JavaScript角度来讲比较像的模式，也就是代理模式，策略模式。</p><p>这两个模式在非函数式编程编程的语言中，如Java中区别是比较明显的，但是用JavaScript来看则是比较相似的。</p><a id="more"></a><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="策略模式定义"><a href="#策略模式定义" class="headerlink" title="策略模式定义"></a>策略模式定义</h3><p>在程序设计中，我们常常遇到这种情况，要实现某一个功能有多种方案可供选择。比如一个压缩文件的程序，既可以选择zip算法，也可以选择gzip算法</p><p>这些算法灵活多样，而且可以随意互相替。这种解决方案就是策略模式。</p><p>策略模式的定义是：<strong>定义一系列的算法，把它们一个个封装起来，并且使他们可以相互替换</strong>。</p><h3 id="使用策略模式计算奖金"><a href="#使用策略模式计算奖金" class="headerlink" title="使用策略模式计算奖金"></a>使用策略模式计算奖金</h3><p>比如我们现在有个需求，年底发放的奖金是根据绩效决定的，绩效S的是4个月的工资，A的3个月，B的2个月</p><h4 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'S'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'A'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'B'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码十分简单，但是也存在很多的缺点：</p><ul><li>calculateBonus函数比较庞大，包含了很多if-else语句，这些语句需要覆盖所有分支</li><li>calculateBonus函数缺乏弹性，如果增加一种新的绩效等级C，或者想把绩效系数改为5，我们必须深入calculateBonus函数内部实现，这违反开闭原则</li><li>算法的复用性差，如果在程序的其他地方复用其中部分奖金的算法，只有复制粘贴</li></ul><h4 id="使用策略模式重构代码"><a href="#使用策略模式重构代码" class="headerlink" title="使用策略模式重构代码"></a>使用策略模式重构代码</h4><p>将不变的部分和变化的部分分隔开是每个设计模式的主题，策略模式也不例外，<strong>策略模式的目的是将算法的使用与算法的实现分离开来</strong>。</p><p>在我们的这个例子中，算法的使用方式是不变的，都是根据某个算法取得计算后的奖金数额。而算法的实现是变化的，不同的绩效对应着不同的的计算规则</p><p>一个基于策略模式的程序至少有两部分组成，第一部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二部分是环境类Context，Context接受客户的请求，随后把请求委托给一个具体的策略类。要做到这一点，说明Context中要维持对某个策略对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performanceS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceS.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceA.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">performanceB.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Bonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.strategy = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bonus.prototype.setSalary = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bonus.prototype.setStrategy = <span class="function"><span class="keyword">function</span>(<span class="params">strategy</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bonus.prototype.getBonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calculate(<span class="keyword">this</span>.salary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在客户对Context发起请求时，Context总是把请求委托给这些策略对象中的一种。</p><h4 id="JavaScript版本的策略模式"><a href="#JavaScript版本的策略模式" class="headerlink" title="JavaScript版本的策略模式"></a>JavaScript版本的策略模式</h4><p>我们一开始就说过，JavaScript的函数式编程会让某些设计模式具体实现变得不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    <span class="string">'S'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'A'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'B'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span> (<span class="params">level, salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="代理模式定义"><a href="#代理模式定义" class="headerlink" title="代理模式定义"></a>代理模式定义</h3><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对他的访问。</p><p>代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求作出一些处理后，再把请求转交给对象本身。</p><p>当策略模式只有一个策略的时候，代理模式和策略模式看起来比较像，主要区别是，代理模式是代理对目标对象的访问，而策略模式则是执行不同的策略。</p><h3 id="使用代理模式来送花"><a href="#使用代理模式来送花" class="headerlink" title="使用代理模式来送花"></a>使用代理模式来送花</h3><p>假设小明想要送花给A，我们用代码来模拟这个过程就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">        target.receiveFlower(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        consoloe.log(<span class="string">`收到<span class="subst">$&#123;flower&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(A);</span><br></pre></td></tr></table></figure><p>我们引入B来帮我们送花的话，就是代理模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">        target.receiveFlower(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        A.receiveFlower(flower)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        consoloe.log(<span class="string">`收到<span class="subst">$&#123;flower&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(B);</span><br></pre></td></tr></table></figure><p>但是这段代码看起来好像除了绕了一圈，并没有什么实际用处。</p><p>当然，也确实如此，不过如果我们再加一个需求就是，我们需要A心情好的时候再送花，而只有B知道A什么时候心情好，这个代理模式就有用处了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">        target.receiveFlower(flower);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        A.listenGoodMoon(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            A.receiveFlower(flower)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">        consoloe.log(<span class="string">`收到<span class="subst">$&#123;flower&#125;</span>`</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    listenGoodMood: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        callback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(B);</span><br></pre></td></tr></table></figure><h3 id="保护代理和虚拟代理"><a href="#保护代理和虚拟代理" class="headerlink" title="保护代理和虚拟代理"></a>保护代理和虚拟代理</h3><p>上面的例子虽然简单，但是我们可以看到两种代理的身影。代理B可以帮助代理A过滤到一些请求，这种就叫做保护代理。</p><p>而如果new Flower是一个代价比较大的操作，我们可以将new Flower的操作交给B去做，从而节省开销，这种就叫做虚拟代理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    reveiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        A.listenGoodMoon(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">            A.receiveFlower(flower);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h3><p>在web开发中，如果给某个img标签节点设置src属性，如果图片过大或者网络不佳，图片的位置往往有一段时间是空白的。</p><p>常见的做法是先用一张loading图占位，然后异步的方式去加载图片，图片加载好以后再填充到img中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> imageNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(imageNode);</span><br><span class="line">        imageNode.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="keyword">this</span>.src)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            myImage.setSrc(<span class="string">'file://loading.png'</span>);</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">proxyImage.setSrc(<span class="string">'http://imgcache.com/music/aaa.jpg'</span>);</span><br></pre></td></tr></table></figure><h3 id="代理模式的意义"><a href="#代理模式的意义" class="headerlink" title="代理模式的意义"></a>代理模式的意义</h3><p>我们也许会疑惑，不过是实现一个预加载的功能，即使不需要引入任何模式也能做，那么引入代理模式的好处在哪里呢？我们看一下不用代理模式来做图片预加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imageNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(imageNode);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        imageNode.setSrc(<span class="keyword">this</span>.src)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            imageNode.src = <span class="string">'file://loading.png'</span>;</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>为了说明代理模式的意义，我们引入一个面向对象的设计的原则————单一职责原则。</p><p>单一职责原则指的是，就一个类（通常也包含对象和函数）而言，应该仅有一个引起它变化的原因。如果一个对象承担了多项职责，就意味着这个对象将变得巨大，引起它变化的原因可以有多个。</p><p>面向对象设计鼓励将行为分布到细粒度的对象之中，如果一个对象承担的职责过多，等于把这些职责耦合到一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能会遭到意外的破坏。</p><p>职责被定义为“引起变化的原因”。上段代码中的MyImage对象除了负责给img节点设置src外，还要负责预加载图片。我们在处理其中一个职责时，有可能因为其强耦合性影响另外一个职责的实现。</p><h3 id="代理和本体接口的一致性"><a href="#代理和本体接口的一致性" class="headerlink" title="代理和本体接口的一致性"></a>代理和本体接口的一致性</h3><p>如果我们有一天我们不再需要预加载，那么就不再需要代理对象，可以选择直接请求本体。其中的关键是代理对象和本体都对外提供了setSrc方法，在客户看来，代理对象和本体是一致的，代理接收请求的过程对用户来说是透明的。</p><p>在Java等语言中，代理和本体都需要显式实现同一个接口，一方面接口保证了它们有同样的方法，另一方面，面向接口编程迎合依赖倒置原则，通过接口进行向上转型。</p><p>值得一提的是，如果代理本体和对象都为一个函数，函数必然能被执行，则可以认为它们也有一致的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imageNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(imageNode);</span><br><span class="line">    imageNode.src = src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="keyword">this</span>.src)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="string">'file://loading.png'</span>);</span><br><span class="line">        img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">proxyImage(<span class="string">'http://imgcache.com/music/aaa.jpg'</span>);</span><br></pre></td></tr></table></figure><h3 id="其他的代理模式"><a href="#其他的代理模式" class="headerlink" title="其他的代理模式"></a>其他的代理模式</h3><p>其实我们平时开发用了很多的代理模式，比如我们常用的防抖和节流，其实就是一种代理，将多个请求合并为一次处理。</p><p>再比如我们的缓存和缓冲代理，把我们对数据库的直接访问变为对缓冲区的访问，如果缓冲区没有，那么缓冲区再去数据库查询。</p><p>再比如我们平时常用的消息队列，其实也可以是代理模式的一种思想。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们接着上一篇博客继续总结和学习JavaScript的常用设计模式，这一次我们总结两个在JavaScript角度来讲比较像的模式，也就是代理模式，策略模式。&lt;/p&gt;
&lt;p&gt;这两个模式在非函数式编程编程的语言中，如Java中区别是比较明显的，但是用JavaScript来看则是比较相似的。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>微前端框架 Qiankun 源码解析</title>
    <link href="https://sunra.top/2022/11/24/micro-frontend-qiankun-code/"/>
    <id>https://sunra.top/2022/11/24/micro-frontend-qiankun-code/</id>
    <published>2022-11-24T08:17:34.000Z</published>
    <updated>2022-11-25T09:14:02.494Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/2022/11/22/micro-frontend-qiankun-sandbox/">上一篇博客</a>我们介绍了Qiankun的沙盒机制，也就是不同的子应用之间是如何做环境隔离的，这篇博客我们就基于上一篇博客讲一下如何利用沙盒去进行子应用的加载和切换。</p><p>qiankun是基于single-spa实现的，所有内部用到了部分single-spa的接口，简单说一下single-spa和qiankun的区别，single-spa只做了子应用的注册，切换，路由监听等，还没有达到一个商用的水准，而qiankun在此之上加了js和css的沙箱隔离，按照官方文档，qiankun是达到了商用的要求。</p><a id="more"></a><h2 id="globalState-全局状态的保存和修改"><a href="#globalState-全局状态的保存和修改" class="headerlink" title="globalState 全局状态的保存和修改"></a>globalState 全局状态的保存和修改</h2><p>下面的代码我会加上自己的注释，同时有两点需要注意：</p><ul><li>这个全局状态，即globalState是唯一的，也就是说所有的子应用都用的同一个全局状态对象</li><li>但是每个子应用都可以为全局状态的改变注册自己的回调函数，以appInstanceId为key存储在deps数组中，虽然当状态改变的时候所有的deps都会触发，但是通过appInstanceId为key可以在子应用被销毁的时候正确地注销该应用的回调函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author dbkillerf6</span></span><br><span class="line"><span class="comment"> * @since 2020-04-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; OnGlobalStateChangeCallback, MicroAppStateActions &#125; <span class="keyword">from</span> <span class="string">'./interfaces'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局状态，所有子应用共享</span></span><br><span class="line"><span class="keyword">let</span> globalState: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态改变时的回调函数，key是app的id，value是回调函数</span></span><br><span class="line"><span class="keyword">const</span> deps: Record&lt;<span class="built_in">string</span>, OnGlobalStateChangeCallback&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发全局监听，遍历所有的deps并挨个触发</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emitGlobal</span>(<span class="params">state: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;, prevState: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(deps).forEach(<span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (deps[id] <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">      deps[id](cloneDeep(state), cloneDeep(prevState));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露一个接口，提供一种独立于子应用之外的手段去修改全局状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initGlobalState</span>(<span class="params">state: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">`[qiankun] globalState tools will be removed in 3.0, pls don't use it!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state === globalState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'[qiankun] state has not changed！'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> prevGlobalState = cloneDeep(globalState);</span><br><span class="line">    globalState = cloneDeep(state);</span><br><span class="line">    emitGlobal(globalState, prevGlobalState);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getMicroAppStateActions(<span class="string">`global-<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getMicroAppStateActions</span>(<span class="params">id: <span class="built_in">string</span>, isMaster?: <span class="built_in">boolean</span></span>): <span class="title">MicroAppStateActions</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * onGlobalStateChange 全局依赖监听</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 收集 setState 时所需要触发的依赖</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 限制条件：每个子应用只有一个激活状态的全局监听，新监听覆盖旧监听，若只是监听部分属性，请使用 onGlobalStateChange</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这么设计是为了减少全局监听滥用导致的内存爆炸</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 依赖数据结构为：</span></span><br><span class="line"><span class="comment">     * &#123;</span></span><br><span class="line"><span class="comment">     *   &#123;id&#125;: callback</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param callback</span></span><br><span class="line"><span class="comment">     * @param fireImmediately</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onGlobalStateChange(callback: OnGlobalStateChangeCallback, fireImmediately?: <span class="built_in">boolean</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(callback <span class="keyword">instanceof</span> <span class="built_in">Function</span>)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'[qiankun] callback must be function!'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (deps[id]) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">`[qiankun] '<span class="subst">$&#123;id&#125;</span>' global listener already exists before this, new listener will overwrite it.`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      deps[id] = callback;</span><br><span class="line">      <span class="keyword">if</span> (fireImmediately) &#123;</span><br><span class="line">        <span class="keyword">const</span> cloneState = cloneDeep(globalState);</span><br><span class="line">        callback(cloneState, cloneState);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * setGlobalState 更新 store 数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 对输入 state 的第一层属性做校验，只有初始化时声明过的第一层（bucket）属性才会被更改</span></span><br><span class="line"><span class="comment">     * 2. 修改 store 并触发全局监听</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param state</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    setGlobalState(state: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (state === globalState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">'[qiankun] state has not changed！'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> changeKeys: <span class="built_in">string</span>[] = [];</span><br><span class="line">      <span class="keyword">const</span> prevGlobalState = cloneDeep(globalState);</span><br><span class="line">      globalState = cloneDeep(</span><br><span class="line">        <span class="built_in">Object</span>.keys(state).reduce(<span class="function">(<span class="params">_globalState, changeKey</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (isMaster || _globalState.hasOwnProperty(changeKey)) &#123;</span><br><span class="line">            changeKeys.push(changeKey);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(_globalState, &#123; [changeKey]: state[changeKey] &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">console</span>.warn(<span class="string">`[qiankun] '<span class="subst">$&#123;changeKey&#125;</span>' not declared when init state！`</span>);</span><br><span class="line">          <span class="keyword">return</span> _globalState;</span><br><span class="line">        &#125;, globalState),</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (changeKeys.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">'[qiankun] state has not changed！'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      emitGlobal(globalState, prevGlobalState);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注销该应用下的依赖</span></span><br><span class="line">    offGlobalStateChange() &#123;</span><br><span class="line">      <span class="keyword">delete</span> deps[id];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="prefetch-预加载子应用资源"><a href="#prefetch-预加载子应用资源" class="headerlink" title="prefetch 预加载子应用资源"></a>prefetch 预加载子应用资源</h2><p>这里主要是提供预加载子应用的策略和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author Kuitos</span></span><br><span class="line"><span class="comment"> * @since 2019-02-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; Entry, ImportEntryOpts &#125; <span class="keyword">from</span> <span class="string">'import-html-entry'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; importEntry &#125; <span class="keyword">from</span> <span class="string">'import-html-entry'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isFunction &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getAppStatus, getMountedApps, NOT_LOADED &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; AppMetadata, PrefetchStrategy &#125; <span class="keyword">from</span> <span class="string">'./interfaces'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> NetworkInformation &#123;</span><br><span class="line">    saveData: <span class="built_in">boolean</span>;</span><br><span class="line">    effectiveType: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果浏览器不支持requestIdleCallback，降级为setTimeout</span></span><br><span class="line"><span class="comment">// RIC and shim for browsers setTimeout() without it</span></span><br><span class="line"><span class="keyword">const</span> requestIdleCallback =</span><br><span class="line">  <span class="built_in">window</span>.requestIdleCallback ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">requestIdleCallback</span>(<span class="params">cb: CallableFunction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cb(&#123;</span><br><span class="line">        didTimeout: <span class="literal">false</span>,</span><br><span class="line">        timeRemaining() &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">50</span> - (<span class="built_in">Date</span>.now() - start));</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> Navigator &#123;</span><br><span class="line">    connection: &#123;</span><br><span class="line">      saveData: <span class="built_in">boolean</span>;</span><br><span class="line">      effectiveType: <span class="built_in">string</span>;</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'bluetooth'</span> | <span class="string">'cellular'</span> | <span class="string">'ethernet'</span> | <span class="string">'none'</span> | <span class="string">'wifi'</span> | <span class="string">'wimax'</span> | <span class="string">'other'</span> | <span class="string">'unknown'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isSlowNetwork = navigator.connection</span><br><span class="line">  ? navigator.connection.saveData ||</span><br><span class="line">    (navigator.connection.type !== <span class="string">'wifi'</span> &amp;&amp;</span><br><span class="line">      navigator.connection.type !== <span class="string">'ethernet'</span> &amp;&amp;</span><br><span class="line">      /([<span class="number">23</span>])g/.test(navigator.connection.effectiveType))</span><br><span class="line">  : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * prefetch assets, do nothing while in mobile network</span></span><br><span class="line"><span class="comment"> * 通过指定入口的方式，加载指定的子应用</span></span><br><span class="line"><span class="comment"> * @param entry</span></span><br><span class="line"><span class="comment"> * @param opts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefetch</span>(<span class="params">entry: Entry, opts?: ImportEntryOpts</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!navigator.onLine || isSlowNetwork) &#123;</span><br><span class="line">    <span class="comment">// Don't prefetch if in a slow network or offline</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用single-spa的importEntry接口去加载子应用入口，返回加载js和css的函数，然后利用requestIdleCallback函数在空闲时加载</span></span><br><span class="line">  requestIdleCallback(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getExternalScripts, getExternalStyleSheets &#125; = <span class="keyword">await</span> importEntry(entry, opts);</span><br><span class="line">    requestIdleCallback(getExternalStyleSheets);</span><br><span class="line">    requestIdleCallback(getExternalScripts);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当single-spa first-mount事件触发时，查询所有app中尚未加载的，然后进行预加载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefetchAfterFirstMounted</span>(<span class="params">apps: AppMetadata[], opts?: ImportEntryOpts</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'single-spa:first-mount'</span>, <span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> notLoadedApps = apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> getAppStatus(app.name) === NOT_LOADED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> mountedApps = getMountedApps();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`[qiankun] prefetch starting after <span class="subst">$&#123;mountedApps&#125;</span> mounted...`</span>, notLoadedApps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notLoadedApps.forEach(<span class="function">(<span class="params">&#123; entry &#125;</span>) =&gt;</span> prefetch(entry, opts));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'single-spa:first-mount'</span>, listener);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行预加载，并且不会从apps中过滤已经加载过的</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">prefetchImmediately</span>(<span class="params">apps: AppMetadata[], opts?: ImportEntryOpts</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[qiankun] prefetch starting for apps...'</span>, apps);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  apps.forEach(<span class="function">(<span class="params">&#123; entry &#125;</span>) =&gt;</span> prefetch(entry, opts));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据参数重传入的策略配置选择适当的预加载策略</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">doPrefetchStrategy</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  apps: AppMetadata[],</span></span></span><br><span class="line"><span class="function"><span class="params">  prefetchStrategy: PrefetchStrategy,</span></span></span><br><span class="line"><span class="function"><span class="params">  importEntryOpts?: ImportEntryOpts,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> appsName2Apps = <span class="function">(<span class="params">names: <span class="built_in">string</span>[]</span>): <span class="params">AppMetadata</span>[] =&gt;</span> apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> names.includes(app.name));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(prefetchStrategy)) &#123;</span><br><span class="line">    prefetchAfterFirstMounted(appsName2Apps(prefetchStrategy <span class="keyword">as</span> <span class="built_in">string</span>[]), importEntryOpts);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFunction(prefetchStrategy)) &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// critical rendering apps would be prefetch as earlier as possible</span></span><br><span class="line">      <span class="keyword">const</span> &#123; criticalAppNames = [], minorAppsName = [] &#125; = <span class="keyword">await</span> prefetchStrategy(apps);</span><br><span class="line">      prefetchImmediately(appsName2Apps(criticalAppNames), importEntryOpts);</span><br><span class="line">      prefetchAfterFirstMounted(appsName2Apps(minorAppsName), importEntryOpts);</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (prefetchStrategy) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        prefetchAfterFirstMounted(apps, importEntryOpts);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'all'</span>:</span><br><span class="line">        prefetchImmediately(apps, importEntryOpts);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loader-子应用加载器"><a href="#loader-子应用加载器" class="headerlink" title="loader 子应用加载器"></a>loader 子应用加载器</h2><h3 id="loader内部工具函数"><a href="#loader内部工具函数" class="headerlink" title="loader内部工具函数"></a>loader内部工具函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertElementExist</span>(<span class="params">element: Element | <span class="literal">null</span> | <span class="literal">undefined</span>, msg?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(<span class="string">'element not existed!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execHooksChain</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  hooks: <span class="built_in">Array</span>&lt;LifeCycleFn&lt;T&gt;&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  app: LoadableApp&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  global = <span class="built_in">window</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hooks.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> hooks.reduce(<span class="function">(<span class="params">chain, hook</span>) =&gt;</span> chain.then(<span class="function"><span class="params">()</span> =&gt;</span> hook(app, global)), <span class="built_in">Promise</span>.resolve());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">validateSingularMode</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  validate: FrameworkConfiguration['singular'],</span></span></span><br><span class="line"><span class="function"><span class="params">  app: LoadableApp&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">boolean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> validate === <span class="string">'function'</span> ? validate(app) : !!validate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> supportShadowDOM = !!<span class="built_in">document</span>.head.attachShadow || !!(<span class="built_in">document</span>.head <span class="keyword">as</span> <span class="built_in">any</span>).createShadowRoot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLifecyclesFromExports</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  scriptExports: LifeCycles&lt;<span class="built_in">any</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  global: WindowProxy,</span></span></span><br><span class="line"><span class="function"><span class="params">  globalLatestSetProp?: PropertyKey | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (validateExportLifecycle(scriptExports)) &#123;</span><br><span class="line">    <span class="keyword">return</span> scriptExports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fallback to sandbox latest set property if it had</span></span><br><span class="line">  <span class="keyword">if</span> (globalLatestSetProp) &#123;</span><br><span class="line">    <span class="keyword">const</span> lifecycles = (&lt;<span class="built_in">any</span>&gt;global)[globalLatestSetProp];</span><br><span class="line">    <span class="keyword">if</span> (validateExportLifecycle(lifecycles)) &#123;</span><br><span class="line">      <span class="keyword">return</span> lifecycles;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(</span><br><span class="line">      <span class="string">`[qiankun] lifecycle not found from <span class="subst">$&#123;appName&#125;</span> entry exports, fallback to get from window['<span class="subst">$&#123;appName&#125;</span>']`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fallback to global variable who named with $&#123;appName&#125; while module exports not found</span></span><br><span class="line">  <span class="keyword">const</span> globalVariableExports = (global <span class="keyword">as</span> <span class="built_in">any</span>)[appName];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (validateExportLifecycle(globalVariableExports)) &#123;</span><br><span class="line">    <span class="keyword">return</span> globalVariableExports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(<span class="string">`You need to export lifecycle functions in <span class="subst">$&#123;appName&#125;</span> entry`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><p>创建新的元素，参数列表为：</p><ul><li>appContent：字符串类型，需要传入html文本</li><li>strictStyleIsolation：是否使用独立的shadow dom，如果为真，并且当前浏览器支持shadow dom，那么appContent中的内容会在一个shadow dom内部</li><li>scopedCSS：如果为真，则将本次创建的html中的所有css内容加上前缀，具体操作看我的另一篇博客，qiankun如何做css隔离的</li><li>appInstanceId：字符串类型，子应用的id</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appContent: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  strictStyleIsolation: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  appInstanceId: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> containerElement = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  containerElement.innerHTML = appContent;</span><br><span class="line">  <span class="comment">// appContent always wrapped with a singular div</span></span><br><span class="line">  <span class="keyword">const</span> appElement = containerElement.firstChild <span class="keyword">as</span> HTMLElement;</span><br><span class="line">  <span class="keyword">if</span> (strictStyleIsolation) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!supportShadowDOM) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(</span><br><span class="line">        <span class="string">'[qiankun]: As current browser not support shadow dom, your strictStyleIsolation configuration will be ignored!'</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; innerHTML &#125; = appElement;</span><br><span class="line">      appElement.innerHTML = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">let</span> shadow: ShadowRoot;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (appElement.attachShadow) &#123;</span><br><span class="line">        shadow = appElement.attachShadow(&#123; mode: <span class="string">'open'</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// createShadowRoot was proposed in initial spec, which has then been deprecated</span></span><br><span class="line">        shadow = (appElement <span class="keyword">as</span> <span class="built_in">any</span>).createShadowRoot();</span><br><span class="line">      &#125;</span><br><span class="line">      shadow.innerHTML = innerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (scopedCSS) &#123;</span><br><span class="line">    <span class="keyword">const</span> attr = appElement.getAttribute(css.QiankunCSSRewriteAttr);</span><br><span class="line">    <span class="keyword">if</span> (!attr) &#123;</span><br><span class="line">      appElement.setAttribute(css.QiankunCSSRewriteAttr, appInstanceId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> styleNodes = appElement.querySelectorAll(<span class="string">'style'</span>) || [];</span><br><span class="line">    forEach(styleNodes, <span class="function">(<span class="params">stylesheetElement: HTMLStyleElement</span>) =&gt;</span> &#123;</span><br><span class="line">      css.process(appElement!, stylesheetElement, appInstanceId);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> appElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getAppWrapperGetter"><a href="#getAppWrapperGetter" class="headerlink" title="getAppWrapperGetter"></a>getAppWrapperGetter</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAppWrapperGetter</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appInstanceId: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  useLegacyRender: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  strictStyleIsolation: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elementGetter: () =&gt; HTMLElement | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (useLegacyRender) &#123;</span><br><span class="line">      <span class="keyword">if</span> (strictStyleIsolation) <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(<span class="string">'strictStyleIsolation can not be used with legacy render!'</span>);</span><br><span class="line">      <span class="keyword">if</span> (scopedCSS) <span class="keyword">throw</span> <span class="keyword">new</span> QiankunError(<span class="string">'experimentalStyleIsolation can not be used with legacy render!'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> appWrapper = <span class="built_in">document</span>.getElementById(getWrapperId(appInstanceId));</span><br><span class="line">      assertElementExist(appWrapper, <span class="string">`Wrapper element for <span class="subst">$&#123;appInstanceId&#125;</span> is not existed!`</span>);</span><br><span class="line">      <span class="keyword">return</span> appWrapper!;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> element = elementGetter();</span><br><span class="line">    assertElementExist(element, <span class="string">`Wrapper element for <span class="subst">$&#123;appInstanceId&#125;</span> is not existed!`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strictStyleIsolation &amp;&amp; supportShadowDOM) &#123;</span><br><span class="line">      <span class="keyword">return</span> element!.shadowRoot!;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element!;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getRender"><a href="#getRender" class="headerlink" title="getRender"></a>getRender</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the render function</span></span><br><span class="line"><span class="comment"> * If the legacy render function is provide, used as it, otherwise we will insert the app element to target container by qiankun</span></span><br><span class="line"><span class="comment"> * @param appInstanceId</span></span><br><span class="line"><span class="comment"> * @param appContent</span></span><br><span class="line"><span class="comment"> * @param legacyRender</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRender</span>(<span class="params">appInstanceId: <span class="built_in">string</span>, appContent: <span class="built_in">string</span>, legacyRender?: HTMLContentRender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> render: ElementRender = <span class="function">(<span class="params">&#123; element, loading, container &#125;, phase</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (legacyRender) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(</span><br><span class="line">          <span class="string">'[qiankun] Custom rendering function is deprecated and will be removed in 3.0, you can use the container element setting instead!'</span>,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> legacyRender(&#123; loading, appContent: element ? appContent : <span class="string">''</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> containerElement = getContainer(container!);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The container might have be removed after micro app unmounted.</span></span><br><span class="line">    <span class="comment">// Such as the micro app unmount lifecycle called by a react componentWillUnmount lifecycle, after micro app unmounted, the react component might also be removed</span></span><br><span class="line">    <span class="keyword">if</span> (phase !== <span class="string">'unmounted'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> errorMsg = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">switch</span> (<span class="params">phase</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">case</span> 'loading':</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">case</span> 'mounting':</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> `Target container <span class="keyword">with</span> $&#123;container&#125; not existed <span class="keyword">while</span> $&#123;appInstanceId&#125; $&#123;phase&#125;!`;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">case</span> 'mounted':</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> `Target container <span class="keyword">with</span> $&#123;container&#125; not existed after $&#123;appInstanceId&#125; $&#123;phase&#125;!`;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">default</span>:</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> `Target container <span class="keyword">with</span> $&#123;container&#125; not existed <span class="keyword">while</span> $&#123;appInstanceId&#125; rendering!`;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function">      <span class="params">assertElementExist</span>(<span class="params">containerElement, errorMsg</span>);</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">containerElement &amp;&amp; !containerElement.contains(<span class="params">element</span>)</span>) &#123;</span></span><br><span class="line"><span class="function">      // <span class="params">clear</span> <span class="params">the</span> <span class="params">container</span></span></span><br><span class="line"><span class="function">      <span class="params">while</span> (<span class="params">containerElement!.firstChild</span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">rawRemoveChild</span>.<span class="params">call</span>(<span class="params">containerElement, containerElement!.firstChild</span>);</span></span><br><span class="line"><span class="function">      &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">      // <span class="params">append</span> <span class="params">the</span> <span class="params">element</span> <span class="params">to</span> <span class="params">container</span> <span class="params">if</span> <span class="params">it</span> <span class="params">exist</span></span></span><br><span class="line"><span class="function">      <span class="params">if</span> (<span class="params">element</span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">rawAppendChild</span>.<span class="params">call</span>(<span class="params">containerElement, element</span>);</span></span><br><span class="line"><span class="function">      &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">return</span> <span class="params">undefined</span>;</span></span><br><span class="line"><span class="function">  &#125;;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="params">return</span> <span class="params">render</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="loadAPP"><a href="#loadAPP" class="headerlink" title="loadAPP"></a>loadAPP</h3><p>代码很长，简单分析下分别做了什么：</p><ul><li>调用single-spa的<code>importEntry</code>接口，获取子应用的加载入口等信息</li><li>上一步解析出来的html entry会作为appContent传入createElement函数，创建一个新节点，并把html entry挂载到该节点之下，然后返回新的节点，赋值给<code>initialAppWrapperElement</code></li><li>调用<code>getRender</code>获取渲染函数，赋值给<code>render</code></li><li>将<code>initialAppWrapperElement</code>传入<code>render</code>函数</li><li>调用<code>getAppWrapperGetter</code>获取增强过的函数<code>initialAppWrapperGetter</code>，内部会做一些判断，如果判断没有问题，返回的函数<code>initialAppWrapperGetter</code>会返回<code>initialAppWrapperElement</code></li><li>如果选择启动沙箱功能，则调用createSandboxContainer去返回sandboxContainer，并将全局对象赋值为sandboxContainer的proxy，启动沙箱功能</li><li>通过调用getAddOns来获取所有的生命周期函数</li><li>调用execHooksChain来执行上一步获得的生命周期中的beforeLoad函数</li><li>通过execScripts（第一步single-spa的解析结果）配合getLifecyclesFromExports来获取子应用的生命周期钩子函数</li><li>最终生成parcelConfigGetter函数，该函数会返回关于该子应用的 bootstrap，mount，和unmount方法，这些方法中会按顺序分别调用前面获取的不同的生命周期函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadApp</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  app: LoadableApp&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  configuration: FrameworkConfiguration = &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  lifeCycles?: FrameworkLifeCycles&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">ParcelConfigObjectGetter</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; entry, name: appName &#125; = app;</span><br><span class="line">  <span class="keyword">const</span> appInstanceId = genAppInstanceIdByName(appName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> markName = <span class="string">`[qiankun] App <span class="subst">$&#123;appInstanceId&#125;</span> Loading`</span>;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">    performanceMark(markName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    singular = <span class="literal">false</span>,</span><br><span class="line">    sandbox = <span class="literal">true</span>,</span><br><span class="line">    excludeAssetFilter,</span><br><span class="line">    globalContext = <span class="built_in">window</span>,</span><br><span class="line">    ...importEntryOpts</span><br><span class="line">  &#125; = configuration;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get the entry html content and script executor</span></span><br><span class="line">  <span class="keyword">const</span> &#123; template, execScripts, assetPublicPath &#125; = <span class="keyword">await</span> importEntry(entry, importEntryOpts);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// as single-spa load and bootstrap new app parallel with other apps unmounting</span></span><br><span class="line">  <span class="comment">// (see https://github.com/CanopyTax/single-spa/blob/master/src/navigation/reroute.js#L74)</span></span><br><span class="line">  <span class="comment">// we need wait to load the app until all apps are finishing unmount in singular mode</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">await</span> validateSingularMode(singular, app)) &#123;</span><br><span class="line">    <span class="keyword">await</span> (prevAppUnmountedDeferred &amp;&amp; prevAppUnmountedDeferred.promise);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> appContent = getDefaultTplWrapper(appInstanceId)(template);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> strictStyleIsolation = <span class="keyword">typeof</span> sandbox === <span class="string">'object'</span> &amp;&amp; !!sandbox.strictStyleIsolation;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span> &amp;&amp; strictStyleIsolation) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(</span><br><span class="line">      <span class="string">"[qiankun] strictStyleIsolation configuration will be removed in 3.0, pls don't depend on it or use experimentalStyleIsolation instead!"</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> scopedCSS = isEnableScopedCSS(sandbox);</span><br><span class="line">  <span class="keyword">let</span> initialAppWrapperElement: HTMLElement | <span class="literal">null</span> = createElement(</span><br><span class="line">    appContent,</span><br><span class="line">    strictStyleIsolation,</span><br><span class="line">    scopedCSS,</span><br><span class="line">    appInstanceId,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> initialContainer = <span class="string">'container'</span> <span class="keyword">in</span> app ? app.container : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">const</span> legacyRender = <span class="string">'render'</span> <span class="keyword">in</span> app ? app.render : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> render = getRender(appInstanceId, appContent, legacyRender);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一次加载设置应用可见区域 dom 结构</span></span><br><span class="line">  <span class="comment">// 确保每次应用加载前容器 dom 结构已经设置完毕</span></span><br><span class="line">  render(&#123; element: initialAppWrapperElement, loading: <span class="literal">true</span>, container: initialContainer &#125;, <span class="string">'loading'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> initialAppWrapperGetter = getAppWrapperGetter(</span><br><span class="line">    appInstanceId,</span><br><span class="line">    !!legacyRender,</span><br><span class="line">    strictStyleIsolation,</span><br><span class="line">    scopedCSS,</span><br><span class="line">    () =&gt; initialAppWrapperElement,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> global = globalContext;</span><br><span class="line">  <span class="keyword">let</span> mountSandbox = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  <span class="keyword">let</span> unmountSandbox = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  <span class="keyword">const</span> useLooseSandbox = <span class="keyword">typeof</span> sandbox === <span class="string">'object'</span> &amp;&amp; !!sandbox.loose;</span><br><span class="line">  <span class="keyword">const</span> speedySandbox = <span class="keyword">typeof</span> sandbox === <span class="string">'object'</span> &amp;&amp; !!sandbox.speedy;</span><br><span class="line">  <span class="keyword">let</span> sandboxContainer;</span><br><span class="line">  <span class="keyword">if</span> (sandbox) &#123;</span><br><span class="line">    sandboxContainer = createSandboxContainer(</span><br><span class="line">      appInstanceId,</span><br><span class="line">      <span class="comment">// FIXME should use a strict sandbox logic while remount, see https://github.com/umijs/qiankun/issues/518</span></span><br><span class="line">      initialAppWrapperGetter,</span><br><span class="line">      scopedCSS,</span><br><span class="line">      useLooseSandbox,</span><br><span class="line">      excludeAssetFilter,</span><br><span class="line">      global,</span><br><span class="line">      speedySandbox,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 用沙箱的代理对象作为接下来使用的全局对象</span></span><br><span class="line">    global = sandboxContainer.instance.proxy <span class="keyword">as</span> <span class="keyword">typeof</span> <span class="built_in">window</span>;</span><br><span class="line">    mountSandbox = sandboxContainer.mount;</span><br><span class="line">    unmountSandbox = sandboxContainer.unmount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    beforeUnmount = [],</span><br><span class="line">    afterUnmount = [],</span><br><span class="line">    afterMount = [],</span><br><span class="line">    beforeMount = [],</span><br><span class="line">    beforeLoad = [],</span><br><span class="line">  &#125; = mergeWith(&#123;&#125;, getAddOns(global, assetPublicPath), lifeCycles, <span class="function">(<span class="params">v1, v2</span>) =&gt;</span> concat(v1 ?? [], v2 ?? []));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> execHooksChain(toArray(beforeLoad), app, global);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get the lifecycle hooks from module exports</span></span><br><span class="line">  <span class="keyword">const</span> scriptExports: <span class="built_in">any</span> = <span class="keyword">await</span> execScripts(global, sandbox &amp;&amp; !useLooseSandbox, &#123;</span><br><span class="line">    scopedGlobalVariables: speedySandbox ? trustedGlobals : [],</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> &#123; bootstrap, mount, unmount, update &#125; = getLifecyclesFromExports(</span><br><span class="line">    scriptExports,</span><br><span class="line">    appName,</span><br><span class="line">    global,</span><br><span class="line">    sandboxContainer?.instance?.latestSetProp,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; onGlobalStateChange, setGlobalState, offGlobalStateChange &#125;: Record&lt;<span class="built_in">string</span>, CallableFunction&gt; =</span><br><span class="line">    getMicroAppStateActions(appInstanceId);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// FIXME temporary way</span></span><br><span class="line">  <span class="keyword">const</span> syncAppWrapperElement2Sandbox = <span class="function">(<span class="params">element: HTMLElement | <span class="literal">null</span></span>) =&gt;</span> (initialAppWrapperElement = element);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parcelConfigGetter: ParcelConfigObjectGetter = <span class="function">(<span class="params">remountContainer = initialContainer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> appWrapperElement: HTMLElement | <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> appWrapperGetter: ReturnType&lt;<span class="keyword">typeof</span> getAppWrapperGetter&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> parcelConfig: ParcelConfigObject = &#123;</span><br><span class="line">      name: appInstanceId,</span><br><span class="line">      bootstrap,</span><br><span class="line">      mount: [</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> marks = performanceGetEntriesByName(markName, <span class="string">'mark'</span>);</span><br><span class="line">            <span class="comment">// mark length is zero means the app is remounting</span></span><br><span class="line">            <span class="keyword">if</span> (marks &amp;&amp; !marks.length) &#123;</span><br><span class="line">              performanceMark(markName);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> ((<span class="keyword">await</span> validateSingularMode(singular, app)) &amp;&amp; prevAppUnmountedDeferred) &#123;</span><br><span class="line">            <span class="keyword">return</span> prevAppUnmountedDeferred.promise;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// initial wrapper element before app mount/remount</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          appWrapperElement = initialAppWrapperElement;</span><br><span class="line">          appWrapperGetter = getAppWrapperGetter(</span><br><span class="line">            appInstanceId,</span><br><span class="line">            !!legacyRender,</span><br><span class="line">            strictStyleIsolation,</span><br><span class="line">            scopedCSS,</span><br><span class="line">            () =&gt; appWrapperElement,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 添加 mount hook, 确保每次应用加载前容器 dom 结构已经设置完毕</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">const</span> useNewContainer = remountContainer !== initialContainer;</span><br><span class="line">          <span class="keyword">if</span> (useNewContainer || !appWrapperElement) &#123;</span><br><span class="line">            <span class="comment">// element will be destroyed after unmounted, we need to recreate it if it not exist</span></span><br><span class="line">            <span class="comment">// or we try to remount into a new container</span></span><br><span class="line">            appWrapperElement = createElement(appContent, strictStyleIsolation, scopedCSS, appInstanceId);</span><br><span class="line">            syncAppWrapperElement2Sandbox(appWrapperElement);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          render(&#123; element: appWrapperElement, loading: <span class="literal">true</span>, container: remountContainer &#125;, <span class="string">'mounting'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        mountSandbox,</span><br><span class="line">        <span class="comment">// exec the chain after rendering to keep the behavior with beforeLoad</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; execHooksChain(toArray(beforeMount), app, global),</span><br><span class="line">        <span class="keyword">async</span> (props) =&gt; mount(&#123; ...props, container: appWrapperGetter(), setGlobalState, onGlobalStateChange &#125;),</span><br><span class="line">        <span class="comment">// finish loading after app mounted</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; render(&#123; element: appWrapperElement, loading: <span class="literal">false</span>, container: remountContainer &#125;, <span class="string">'mounted'</span>),</span><br><span class="line">        <span class="keyword">async</span> () =&gt; execHooksChain(toArray(afterMount), app, global),</span><br><span class="line">        <span class="comment">// initialize the unmount defer after app mounted and resolve the defer after it unmounted</span></span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">await</span> validateSingularMode(singular, app)) &#123;</span><br><span class="line">            prevAppUnmountedDeferred = <span class="keyword">new</span> Deferred&lt;<span class="built_in">void</span>&gt;();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> measureName = <span class="string">`[qiankun] App <span class="subst">$&#123;appInstanceId&#125;</span> Loading Consuming`</span>;</span><br><span class="line">            performanceMeasure(measureName, markName);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      unmount: [</span><br><span class="line">        <span class="keyword">async</span> () =&gt; execHooksChain(toArray(beforeUnmount), app, global),</span><br><span class="line">        <span class="keyword">async</span> (props) =&gt; unmount(&#123; ...props, container: appWrapperGetter() &#125;),</span><br><span class="line">        unmountSandbox,</span><br><span class="line">        <span class="keyword">async</span> () =&gt; execHooksChain(toArray(afterUnmount), app, global),</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          render(&#123; element: <span class="literal">null</span>, loading: <span class="literal">false</span>, container: remountContainer &#125;, <span class="string">'unmounted'</span>);</span><br><span class="line">          offGlobalStateChange(appInstanceId);</span><br><span class="line">          <span class="comment">// for gc</span></span><br><span class="line">          appWrapperElement = <span class="literal">null</span>;</span><br><span class="line">          syncAppWrapperElement2Sandbox(appWrapperElement);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> ((<span class="keyword">await</span> validateSingularMode(singular, app)) &amp;&amp; prevAppUnmountedDeferred) &#123;</span><br><span class="line">            prevAppUnmountedDeferred.resolve();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> update === <span class="string">'function'</span>) &#123;</span><br><span class="line">      parcelConfig.update = update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parcelConfig;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parcelConfigGetter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h2><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>这里就是声明了一个Error类而已</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> QiankunError <span class="keyword">extends</span> <span class="built_in">Error</span> &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">`[qiankun]: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="errorHandler"><a href="#errorHandler" class="headerlink" title="errorHandler"></a>errorHandler</h3><p>暴露一个方法去添加全局的错误处理监听函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author Kuitos</span></span><br><span class="line"><span class="comment"> * @since 2020-02-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; addErrorHandler, removeErrorHandler &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addGlobalUncaughtErrorHandler</span>(<span class="params">errorHandler: OnErrorEventHandlerNonNull</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, errorHandler);</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'unhandledrejection'</span>, errorHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeGlobalUncaughtErrorHandler</span>(<span class="params">errorHandler: (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">'error'</span>, errorHandler);</span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">'unhandledrejection'</span>, errorHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>这里的只列举函数签名及其作用，具体代码实现就不贴在这里了</p><ul><li>function toArray<t>(array: T | T[]): T[]</t></li><li>function sleep(ms: number)</li><li>function nextTask(cb: () =&gt; void): void</li><li>function isConstructable(fn: () =&gt; any | FunctionConstructor)</li><li>function isCallable(fn: any)</li><li>function isPropertyFrozen(target: any, p?: PropertyKey): boolean</li><li>function isBoundedFunction(fn: CallableFunction)</li><li>const qiankunHeadTagName = ‘qiankun-head’;</li><li>function getDefaultTplWrapper(name: string)</li><li>function getWrapperId(name: string)</li><li>const nativeGlobal = new Function(‘return this’)()</li><li>const genAppInstanceIdByName = (appName: string): string</li><li>function validateExportLifecycle(exports: any)</li><li>function performanceGetEntriesByName(markName: string, type?: string)</li><li>function performanceMark(markName: string)</li><li>function performanceMeasure(measureName: string, markName: string)</li><li>function isEnableScopedCSS(sandbox: FrameworkConfiguration[‘sandbox’])</li><li>function getXPathForElement(el: Node, document: Document): string | void</li></ul><h2 id="qiankun-api"><a href="#qiankun-api" class="headerlink" title="qiankun api"></a>qiankun api</h2><p>这一部分是qiankun对外暴露和使用的主要api</p><h3 id="工具方法引入"><a href="#工具方法引入" class="headerlink" title="工具方法引入"></a>工具方法引入</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; ParcelConfigObject &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mountRootParcel, registerApplication, start <span class="keyword">as</span> startSingleSpa &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;</span><br><span class="line">  FrameworkConfiguration,</span><br><span class="line">  FrameworkLifeCycles,</span><br><span class="line">  LoadableApp,</span><br><span class="line">  MicroApp,</span><br><span class="line">  ObjectType,</span><br><span class="line">  RegistrableApp,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; ParcelConfigObjectGetter &#125; <span class="keyword">from</span> <span class="string">'./loader'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loadApp &#125; <span class="keyword">from</span> <span class="string">'./loader'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; doPrefetchStrategy &#125; <span class="keyword">from</span> <span class="string">'./prefetch'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Deferred, getContainerXPath, toArray &#125; <span class="keyword">from</span> <span class="string">'./utils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> microApps: <span class="built_in">Array</span>&lt;RegistrableApp&lt;Record&lt;<span class="built_in">string</span>, unknown&gt;&gt;&gt; = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> frameworkConfiguration: FrameworkConfiguration = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> started = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> defaultUrlRerouteOnly = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> frameworkStartedDefer = <span class="keyword">new</span> Deferred&lt;<span class="built_in">void</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> autoDowngradeForLowVersionBrowser = (configuration: FrameworkConfiguration): <span class="function"><span class="params">FrameworkConfiguration</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; sandbox, singular &#125; = configuration;</span><br><span class="line">  <span class="keyword">if</span> (sandbox) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.Proxy) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">'[qiankun] Miss window.Proxy, proxySandbox will degenerate into snapshotSandbox'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (singular === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(</span><br><span class="line">          <span class="string">'[qiankun] Setting singular as false may cause unexpected behavior while your browser not support window.Proxy'</span>,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; ...configuration, sandbox: <span class="keyword">typeof</span> sandbox === <span class="string">'object'</span> ? &#123; ...sandbox, loose: <span class="literal">true</span> &#125; : &#123; loose: <span class="literal">true</span> &#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> configuration;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="registerMicroApps"><a href="#registerMicroApps" class="headerlink" title="registerMicroApps"></a>registerMicroApps</h3><p>利用single-spa的接口<code>registerApplication</code>来注册子应用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">registerMicroApps</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  apps: <span class="built_in">Array</span>&lt;RegistrableApp&lt;T&gt;&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  lifeCycles?: FrameworkLifeCycles&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Each app only needs to be registered once</span></span><br><span class="line">  <span class="keyword">const</span> unregisteredApps = apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> !microApps.some(<span class="function">(<span class="params">registeredApp</span>) =&gt;</span> registeredApp.name === app.name));</span><br><span class="line"></span><br><span class="line">  microApps = [...microApps, ...unregisteredApps];</span><br><span class="line"></span><br><span class="line">  unregisteredApps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, activeRule, loader = noop, props, ...appConfig &#125; = app;</span><br><span class="line"></span><br><span class="line">    registerApplication(&#123;</span><br><span class="line">      name,</span><br><span class="line">      app: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        loader(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">await</span> frameworkStartedDefer.promise;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; mount, ...otherMicroAppConfigs &#125; = (</span><br><span class="line">          <span class="keyword">await</span> loadApp(&#123; name, props, ...appConfig &#125;, frameworkConfiguration, lifeCycles)</span><br><span class="line">        )();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          mount: [<span class="keyword">async</span> () =&gt; loader(<span class="literal">true</span>), ...toArray(mount), <span class="keyword">async</span> () =&gt; loader(<span class="literal">false</span>)],</span><br><span class="line">          ...otherMicroAppConfigs,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      activeWhen: activeRule,</span><br><span class="line">      customProps: props,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loadMicroApp"><a href="#loadMicroApp" class="headerlink" title="loadMicroApp"></a>loadMicroApp</h3><p>这个函数的功能就是调用loader的loadApp，然后使用single-spa的startSingleSpa去启动</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadMicroApp</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ObjectType</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  app: LoadableApp&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  configuration?: FrameworkConfiguration &amp; &#123; autoStart?: <span class="built_in">boolean</span> &#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  lifeCycles?: FrameworkLifeCycles&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">MicroApp</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; props, name &#125; = app;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> container = <span class="string">'container'</span> <span class="keyword">in</span> app ? app.container : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// Must compute the container xpath at beginning to keep it consist around app running</span></span><br><span class="line">  <span class="comment">// If we compute it every time, the container dom structure most probably been changed and result in a different xpath value</span></span><br><span class="line">  <span class="keyword">const</span> containerXPath = getContainerXPath(container);</span><br><span class="line">  <span class="keyword">const</span> appContainerXPathKey = <span class="string">`<span class="subst">$&#123;name&#125;</span>-<span class="subst">$&#123;containerXPath&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> microApp: MicroApp;</span><br><span class="line">  <span class="keyword">const</span> wrapParcelConfigForRemount = (config: ParcelConfigObject): <span class="function"><span class="params">ParcelConfigObject</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> microAppConfig = config;</span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      <span class="keyword">if</span> (containerXPath) &#123;</span><br><span class="line">        <span class="keyword">const</span> containerMicroApps = containerMicroAppsMap.get(appContainerXPathKey);</span><br><span class="line">        <span class="keyword">if</span> (containerMicroApps?.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> mount = [</span><br><span class="line">            <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">              <span class="comment">// While there are multiple micro apps mounted on the same container, we must wait until the prev instances all had unmounted</span></span><br><span class="line">              <span class="comment">// Otherwise it will lead some concurrent issues</span></span><br><span class="line">              <span class="keyword">const</span> prevLoadMicroApps = containerMicroApps.slice(<span class="number">0</span>, containerMicroApps.indexOf(microApp));</span><br><span class="line">              <span class="keyword">const</span> prevLoadMicroAppsWhichNotBroken = prevLoadMicroApps.filter(</span><br><span class="line">                (v) =&gt; v.getStatus() !== <span class="string">'LOAD_ERROR'</span> &amp;&amp; v.getStatus() !== <span class="string">'SKIP_BECAUSE_BROKEN'</span>,</span><br><span class="line">              );</span><br><span class="line">              <span class="keyword">await</span> <span class="built_in">Promise</span>.all(prevLoadMicroAppsWhichNotBroken.map(<span class="function">(<span class="params">v</span>) =&gt;</span> v.unmountPromise));</span><br><span class="line">            &#125;,</span><br><span class="line">            ...toArray(microAppConfig.mount),</span><br><span class="line">          ];</span><br><span class="line"></span><br><span class="line">          microAppConfig = &#123;</span><br><span class="line">            ...config,</span><br><span class="line">            mount,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...microAppConfig,</span><br><span class="line">      <span class="comment">// empty bootstrap hook which should not run twice while it calling from cached micro app</span></span><br><span class="line">      bootstrap: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * using name + container xpath as the micro app instance id,</span></span><br><span class="line"><span class="comment">   * it means if you rendering a micro app to a dom which have been rendered before,</span></span><br><span class="line"><span class="comment">   * the micro app would not load and evaluate its lifecycles again</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> memorizedLoadingFn = <span class="keyword">async</span> (): <span class="built_in">Promise</span>&lt;ParcelConfigObject&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> userConfiguration = autoDowngradeForLowVersionBrowser(</span><br><span class="line">      configuration ?? &#123; ...frameworkConfiguration, singular: <span class="literal">false</span> &#125;,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> &#123; $$cacheLifecycleByAppName &#125; = userConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      <span class="comment">// using appName as cache for internal experimental scenario</span></span><br><span class="line">      <span class="keyword">if</span> ($$cacheLifecycleByAppName) &#123;</span><br><span class="line">        <span class="keyword">const</span> parcelConfigGetterPromise = appConfigPromiseGetterMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (parcelConfigGetterPromise) <span class="keyword">return</span> wrapParcelConfigForRemount((<span class="keyword">await</span> parcelConfigGetterPromise)(container));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (containerXPath) &#123;</span><br><span class="line">        <span class="keyword">const</span> parcelConfigGetterPromise = appConfigPromiseGetterMap.get(appContainerXPathKey);</span><br><span class="line">        <span class="keyword">if</span> (parcelConfigGetterPromise) <span class="keyword">return</span> wrapParcelConfigForRemount((<span class="keyword">await</span> parcelConfigGetterPromise)(container));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> parcelConfigObjectGetterPromise = loadApp(app, userConfiguration, lifeCycles);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      <span class="keyword">if</span> ($$cacheLifecycleByAppName) &#123;</span><br><span class="line">        appConfigPromiseGetterMap.set(name, parcelConfigObjectGetterPromise);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (containerXPath) appConfigPromiseGetterMap.set(appContainerXPathKey, parcelConfigObjectGetterPromise);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> parcelConfigObjectGetterPromise)(container);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!started &amp;&amp; configuration?.autoStart !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// We need to invoke start method of single-spa as the popstate event should be dispatched while the main app calling pushState/replaceState automatically,</span></span><br><span class="line">    <span class="comment">// but in single-spa it will check the start status before it dispatch popstate</span></span><br><span class="line">    <span class="comment">// see https://github.com/single-spa/single-spa/blob/f28b5963be1484583a072c8145ac0b5a28d91235/src/navigation/navigation-events.js#L101</span></span><br><span class="line">    <span class="comment">// ref https://github.com/umijs/qiankun/pull/1071</span></span><br><span class="line">    startSingleSpa(&#123; urlRerouteOnly: frameworkConfiguration.urlRerouteOnly ?? defaultUrlRerouteOnly &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  microApp = mountRootParcel(memorizedLoadingFn, &#123; domElement: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>), ...props &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (container) &#123;</span><br><span class="line">    <span class="keyword">if</span> (containerXPath) &#123;</span><br><span class="line">      <span class="comment">// Store the microApps which they mounted on the same container</span></span><br><span class="line">      <span class="keyword">const</span> microAppsRef = containerMicroAppsMap.get(appContainerXPathKey) || [];</span><br><span class="line">      microAppsRef.push(microApp);</span><br><span class="line">      containerMicroAppsMap.set(appContainerXPathKey, microAppsRef);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> cleanup = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> index = microAppsRef.indexOf(microApp);</span><br><span class="line">        microAppsRef.splice(index, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        microApp = <span class="literal">null</span>;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// gc after unmount</span></span><br><span class="line">      microApp.unmountPromise.then(cleanup).catch(cleanup);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> microApp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">opts: FrameworkConfiguration = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  frameworkConfiguration = &#123; prefetch: <span class="literal">true</span>, singular: <span class="literal">true</span>, sandbox: <span class="literal">true</span>, ...opts &#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    prefetch,</span><br><span class="line">    sandbox,</span><br><span class="line">    singular,</span><br><span class="line">    urlRerouteOnly = defaultUrlRerouteOnly,</span><br><span class="line">    ...importEntryOpts</span><br><span class="line">  &#125; = frameworkConfiguration;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prefetch) &#123;</span><br><span class="line">    doPrefetchStrategy(microApps, prefetch, importEntryOpts);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  frameworkConfiguration = autoDowngradeForLowVersionBrowser(frameworkConfiguration);</span><br><span class="line"></span><br><span class="line">  startSingleSpa(&#123; urlRerouteOnly &#125;);</span><br><span class="line">  started = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  frameworkStartedDefer.resolve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，内部的api分工如下：</p><ul><li>prefetch提供了预加载所有子应用资源的方法，</li><li>loader提供了根据子应用的入口去加载资源，执行入口文件，然后将结果html挂载到一个新建的div上</li><li>qiankun对外暴露的api主要是两个<ul><li>registerMicroApps主要是调用sigle-spa的register接口去注册子应用</li><li>loadMicroApp会调用loader中的方法去加载子应用，loader内部其实最终还是调用了single-spa的load方法，只是做了一些沙箱的隔离，css的隔离等。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/2022/11/22/micro-frontend-qiankun-sandbox/&quot;&gt;上一篇博客&lt;/a&gt;我们介绍了Qiankun的沙盒机制，也就是不同的子应用之间是如何做环境隔离的，这篇博客我们就基于上一篇博客讲一下如何利用沙盒去进行子应用的加载和切换。&lt;/p&gt;
&lt;p&gt;qiankun是基于single-spa实现的，所有内部用到了部分single-spa的接口，简单说一下single-spa和qiankun的区别，single-spa只做了子应用的注册，切换，路由监听等，还没有达到一个商用的水准，而qiankun在此之上加了js和css的沙箱隔离，按照官方文档，qiankun是达到了商用的要求。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>微前端框架 Qiankun 沙箱原理</title>
    <link href="https://sunra.top/2022/11/22/micro-frontend-qiankun-sandbox/"/>
    <id>https://sunra.top/2022/11/22/micro-frontend-qiankun-sandbox/</id>
    <published>2022-11-22T02:20:26.000Z</published>
    <updated>2022-11-23T03:04:07.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要微前端"><a href="#为什么需要微前端" class="headerlink" title="为什么需要微前端"></a>为什么需要微前端</h2><p>微前端其实诞生两个大的背景下，在提倡拥抱变化的前端社区可以看到新的框架、技术、概念层出不穷，并且随着WEB标准的演进，前端应用已经具备更好的性能、更快的开发效率。但随着而来的是应用的复杂程度更高、涉及的团队规模更广、更高的性能要求，应用复杂度已经成为阻塞业务发展的重要瓶颈。如何让现有系统拥抱最新技术提高生产力、并且解耦单体应用，是现在前端工程不得不面临的挑战。</p><a id="more"></a><p>如果你遇到以下的情况，可能你需要微前端：</p><ul><li>你的单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用后，随之而来的应用不可维护的问题</li><li>作为一个门户网站，需要集成很多的系统，这些系统由不同的团队维护、有风格各异的代码、有形形色色的技术栈，为了聚合只能采取iframe或者使用MPA的形式进行聚合</li></ul><h2 id="为什么需要沙箱"><a href="#为什么需要沙箱" class="headerlink" title="为什么需要沙箱"></a>为什么需要沙箱</h2><p>在微前端的场景，由于多个独立的应用被组织到了一起，在没有类似iframe的原生隔离下，势必会出现冲突，如全局变量冲突、样式冲突，这些冲突可能会导致应用样式异常，甚至功能不可用。所以想让微前端达到生产可用的程度，让每个子应用之间达到一定程度隔离的沙箱机制是必不可少的。</p><h2 id="如何实现一个沙箱"><a href="#如何实现一个沙箱" class="headerlink" title="如何实现一个沙箱"></a>如何实现一个沙箱</h2><h3 id="手动执行代码"><a href="#手动执行代码" class="headerlink" title="手动执行代码"></a>手动执行代码</h3><p>常规的脚本加载，是通过script标签去执行的，要实现沙箱，因为需要控制沙箱的开启和关闭，我们就需要精确掌握脚本的执行时机，所以我们需要寻找一种合适的能手动执行代码的方法</p><p>首先我们想到的是eval，由于eval有安全、性能等问题，同时也不利于调试，所以在以前我们听到的都是不推荐使用eval这个api。</p><p>但是在微前端的沙箱场景，eval确实是一个比较好的解决方案，比如qiankun就采用了eval作为代码执行器。</p><p>new Function通过传入一个string作为函数的的主体同时返回一个新函数，可以作为eval的一个替代品</p><p>对比eval，有两点比较重要的不同：</p><ul><li>不能访问当前环境的变量，但是可以访问全局变量，安全性更高</li><li>仅需要处理传入的字符串一次，后面重复执行都是同一个函数，而eval需要每次都处理，性能更高</li></ul><h3 id="快照沙箱"><a href="#快照沙箱" class="headerlink" title="快照沙箱"></a>快照沙箱</h3><p>顾名思义，即在某个阶段给当前的运行环境打一个快照，再在需要的时候把快照恢复，从而实现隔离。</p><p>这个东西的原理和操作系统中的CPU进程切换很像，每个进程获得CPU使用权时把PCB（进程控制块）中的上下文装载到对应的寄存器中，然后CPU开始继续执行，等到失去使用权时再将当前寄存器中的信息重新保存回PCB中。快照沙箱也是这样，对于每一个子应用，运行时将其内部保存的上下文加载到对应的变量上，销毁时再将当前浏览器环境中各个变量的值保存到快照中。</p><p>我们来看一下qiankun中快照沙箱的源码，源码上添加了我的注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author <span class="variable">Hydrogen</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>2020-3-8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> type &#123; SandBox &#125; <span class="keyword">from</span> <span class="string">'../interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SandBoxType &#125; <span class="keyword">from</span> <span class="string">'../interfaces'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iter</span>(<span class="params">obj: typeof window, callbackFn: (prop: any</span>) =&gt; <span class="title">void</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line guard-for-in, no-restricted-syntax</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// patch for clearInterval for compatible reason, see #1490</span></span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(prop) || prop === <span class="string">'clearInterval'</span>) &#123;</span><br><span class="line">      callbackFn(prop);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于 diff 方式实现的沙箱，用于不支持 Proxy 的低版本浏览器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SnapshotSandbox</span> <span class="title">implements</span> <span class="title">SandBox</span> </span>&#123;</span><br><span class="line">  proxy: WindowProxy;</span><br><span class="line"></span><br><span class="line">  name: string;</span><br><span class="line"></span><br><span class="line">  type: SandBoxType;</span><br><span class="line"></span><br><span class="line">  sandboxRunning = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// windows对象的快照，用于保存当前沙盒active之前的window对象的状态</span></span><br><span class="line">  private windowSnapshot!: Window;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前沙盒在active和inactive之间window对象上修改过的值</span></span><br><span class="line">  private modifyPropsMap: Record&lt;any, any&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.proxy = <span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">this</span>.type = SandBoxType.Snapshot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  active() &#123;</span><br><span class="line">    <span class="comment">// 记录当前快照，用于在inactive时比较哪些属性发生了变化</span></span><br><span class="line">    <span class="keyword">this</span>.windowSnapshot = &#123;&#125; <span class="keyword">as</span> Window;</span><br><span class="line">    iter(<span class="built_in">window</span>, (prop) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.windowSnapshot[prop] = <span class="built_in">window</span>[prop];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复之前的变更，也就是上一次active和inactive之间修改过的变量</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.modifyPropsMap).forEach(<span class="function">(<span class="params">p: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>[p] = <span class="keyword">this</span>.modifyPropsMap[p];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sandboxRunning = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inactive() &#123;</span><br><span class="line">    <span class="keyword">this</span>.modifyPropsMap = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较当前window对象上的属性和active之前的window对象上的属性，如果有不同，记录进modifyPropsMap中，下次在active时重新赋值回window</span></span><br><span class="line">    iter(<span class="built_in">window</span>, (prop) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>[prop] !== <span class="keyword">this</span>.windowSnapshot[prop]) &#123;</span><br><span class="line">        <span class="comment">// 记录变更，恢复环境</span></span><br><span class="line">        <span class="keyword">this</span>.modifyPropsMap[prop] = <span class="built_in">window</span>[prop];</span><br><span class="line">        <span class="built_in">window</span>[prop] = <span class="keyword">this</span>.windowSnapshot[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">`[qiankun:sandbox] <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> origin window restore...`</span>, <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.modifyPropsMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sandboxRunning = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理沙箱"><a href="#代理沙箱" class="headerlink" title="代理沙箱"></a>代理沙箱</h3><p>代理沙箱主要是通过为每个沙盒创建一个fakeWindow，然后为这个fakeWindow设置代理，通过代理来访问这个fakeWindow，所以它的源码主要分为两部分：</p><ul><li>通过<code>createFakeWindow</code>函数创建一个fakeWindow，这个fakeWindow上只会克隆window对象上可以修改的属性</li><li>创建ProxySandbox类，内部使用<code>createFakeWindow</code>创建的fakeWindow</li></ul><p>我们先看一下<code>createFakeWindow</code>，说起来这个函数做的事情就是它注释上说的：<code>copy the non-configurable property of global to fakeWindow</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFakeWindow</span>(<span class="params">globalContext: Window</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// map always has the fastest performance in has check scenario</span></span><br><span class="line">  <span class="comment">// see https://jsperf.com/array-indexof-vs-set-has/23</span></span><br><span class="line">  <span class="keyword">const</span> propertiesWithGetter = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;PropertyKey, boolean&gt;();</span><br><span class="line">  <span class="keyword">const</span> fakeWindow = &#123;&#125; <span class="keyword">as</span> FakeWindow;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   copy the non-configurable property of global to fakeWindow</span></span><br><span class="line"><span class="comment">   see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor</span></span><br><span class="line"><span class="comment">   &gt; A property cannot be reported as non-configurable, if it does not exist as an own property of the target object or if it exists as a configurable own property of the target object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyNames(globalContext)</span><br><span class="line">    .filter(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line">      <span class="keyword">return</span> !descriptor?.configurable;</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line">      <span class="keyword">if</span> (descriptor) &#123;</span><br><span class="line">        <span class="keyword">const</span> hasGetter = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(descriptor, <span class="string">'get'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         make top/self/window property configurable and writable, otherwise it will cause TypeError while get trap return.</span></span><br><span class="line"><span class="comment">         see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get</span></span><br><span class="line"><span class="comment">         &gt; The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable data property.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          p === <span class="string">'top'</span> ||</span><br><span class="line">          p === <span class="string">'parent'</span> ||</span><br><span class="line">          p === <span class="string">'self'</span> ||</span><br><span class="line">          p === <span class="string">'window'</span> ||</span><br><span class="line">          (process.env.NODE_ENV === <span class="string">'test'</span> &amp;&amp; (p === <span class="string">'mockTop'</span> || p === <span class="string">'mockSafariTop'</span>))</span><br><span class="line">        ) &#123;</span><br><span class="line">          descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">           The descriptor of window.window/window.top/window.self in Safari/FF are accessor descriptors, we need to avoid adding a data descriptor while it was</span></span><br><span class="line"><span class="comment">           Example:</span></span><br><span class="line"><span class="comment">            Safari/FF: Object.getOwnPropertyDescriptor(window, 'top') -&gt; &#123;get: function, set: undefined, enumerable: true, configurable: false&#125;</span></span><br><span class="line"><span class="comment">            Chrome: Object.getOwnPropertyDescriptor(window, 'top') -&gt; &#123;value: Window, writable: false, enumerable: true, configurable: false&#125;</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="keyword">if</span> (!hasGetter) &#123;</span><br><span class="line">            descriptor.writable = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasGetter) propertiesWithGetter.set(p, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// freeze the descriptor to avoid being modified by zone.js</span></span><br><span class="line">        <span class="comment">// see https://github.com/angular/zone.js/blob/a5fe09b0fac27ac5df1fa746042f96f05ccb6a00/lib/browser/define-property.ts#L71</span></span><br><span class="line">        rawObjectDefineProperty(fakeWindow, p, <span class="built_in">Object</span>.freeze(descriptor));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    fakeWindow,</span><br><span class="line">    propertiesWithGetter,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是ProxySandbox的实现了，比较关键的就是它的构造函数中通过proxy劫持了对fakeWindow的set方法，然后通过这种方式去统计有那些属性发生了改变，同时如果是<code>globalVariableWhiteList</code>中的成员，那么就将其descriptor存储到<code>globalWhitelistPrevDescriptor</code>中，在inactive的时候恢复</p><p>我们首先看下这个<code>globalVariableWhiteList</code>是什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variableWhiteListInDev =</span><br><span class="line">  process.env.NODE_ENV === <span class="string">'test'</span> || process.env.NODE_ENV === <span class="string">'development'</span> || <span class="built_in">window</span>.__QIANKUN_DEVELOPMENT__</span><br><span class="line">    ? [</span><br><span class="line">        <span class="comment">// for react hot reload</span></span><br><span class="line">        <span class="comment">// see https://github.com/facebook/create-react-app/blob/66bf7dfc43350249e2f09d138a20840dae8a0a4a/packages/react-error-overlay/src/index.js#L180</span></span><br><span class="line">        <span class="string">'__REACT_ERROR_OVERLAY_GLOBAL_HOOK__'</span>,</span><br><span class="line">      ]</span><br><span class="line">    : [];</span><br><span class="line"><span class="comment">// who could escape the sandbox</span></span><br><span class="line"><span class="keyword">const</span> globalVariableWhiteList: string[] = [</span><br><span class="line">  <span class="comment">// FIXME System.js used a indirect call with eval, which would make it scope escape to global</span></span><br><span class="line">  <span class="comment">// To make System.js works well, we write it back to global window temporary</span></span><br><span class="line">  <span class="comment">// see https://github.com/systemjs/systemjs/blob/457f5b7e8af6bd120a279540477552a07d5de086/src/evaluate.js#L106</span></span><br><span class="line">  <span class="string">'System'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// see https://github.com/systemjs/systemjs/blob/457f5b7e8af6bd120a279540477552a07d5de086/src/instantiate.js#L357</span></span><br><span class="line">  <span class="string">'__cjsWrapper'</span>,</span><br><span class="line">  ...variableWhiteListInDev,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后看一下ProxySandbox的大致结构，这里我先把Proxy隐藏，后面再一个个介绍：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ProxySandbox <span class="keyword">implements</span> SandBox &#123;</span><br><span class="line">  <span class="comment">/** window 值变更记录 */</span></span><br><span class="line">  <span class="keyword">private</span> updatedValueSet = <span class="keyword">new</span> Set&lt;PropertyKey&gt;();</span><br><span class="line"></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span>: SandBoxType;</span><br><span class="line"></span><br><span class="line">  proxy: WindowProxy;</span><br><span class="line">  sandboxRunning = <span class="literal">true</span>;</span><br><span class="line">  latestSetProp: PropertyKey | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  active() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.sandboxRunning) activeSandboxCount++;</span><br><span class="line">    <span class="keyword">this</span>.sandboxRunning = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inactive() &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">`[qiankun:sandbox] <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> modified global properties restore...`</span>, [</span><br><span class="line">        ...this.updatedValueSet.keys(),</span><br><span class="line">      ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'test'</span> || --activeSandboxCount === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// reset the global value to the prev value</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.globalWhitelistPrevDescriptor).forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> descriptor = <span class="keyword">this</span>.globalWhitelistPrevDescriptor[p];</span><br><span class="line">        <span class="keyword">if</span> (descriptor) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.globalContext, p, descriptor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// @ts-ignore</span></span><br><span class="line">          <span class="keyword">delete</span> <span class="keyword">this</span>.globalContext[p];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sandboxRunning = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the descriptor of global variables in whitelist before it been modified</span></span><br><span class="line">  globalWhitelistPrevDescriptor: &#123; [p <span class="keyword">in</span> <span class="keyword">typeof</span> globalVariableWhiteList[<span class="built_in">number</span>]]: PropertyDescriptor | <span class="literal">undefined</span> &#125; = &#123;&#125;;</span><br><span class="line">  globalContext: <span class="keyword">typeof</span> <span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, globalContext = <span class="built_in">window</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.globalContext = globalContext;</span><br><span class="line">    <span class="keyword">this</span>.type = SandBoxType.Proxy;</span><br><span class="line">    <span class="keyword">const</span> &#123; updatedValueSet &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; fakeWindow, propertiesWithGetter &#125; = createFakeWindow(globalContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> descriptorTargetMap = <span class="keyword">new</span> Map&lt;PropertyKey, SymbolTarget&gt;();</span><br><span class="line">    <span class="keyword">const</span> hasOwnProperty = <span class="function">(<span class="params">key: PropertyKey</span>) =&gt;</span> fakeWindow.hasOwnProperty(key) || globalContext.hasOwnProperty(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> Proxy(fakeWindow, &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.proxy = proxy;</span><br><span class="line"></span><br><span class="line">    activeSandboxCount++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> registerRunningApp(name: <span class="built_in">string</span>, proxy: Window) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.sandboxRunning) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentRunningApp = getCurrentRunningApp();</span><br><span class="line">      <span class="keyword">if</span> (!currentRunningApp || currentRunningApp.name !== name) &#123;</span><br><span class="line">        setCurrentRunningApp(&#123; name, <span class="built_in">window</span>: proxy &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// FIXME if you have any other good ideas</span></span><br><span class="line">      <span class="comment">// remove the mark in next tick, thus we can identify whether it in micro app or not</span></span><br><span class="line">      <span class="comment">// this approach is just a workaround, it could not cover all complex cases, such as the micro app runs in the same task context with master in some case</span></span><br><span class="line">      nextTask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setCurrentRunningApp(<span class="literal">null</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们暂时看不出这<code>latestSetProp, globalWhitelistPrevDescriptor</code>几个变量的作用，我们继续看一下Proxy中的各个配置：</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set拦截其中会检测fakeWindow和globalContext是否都有当前要修改的属性，如果有，那么直接给fakeWindow上的该属性赋值，如果没有，只有globalContext上有，看一下这个属性是否是writable或者有set方法，只有这两个有其一，才表明这个属性本身是可以修改的，我们给fakeWindow上添加这个属性并修改才是有意义的</p><p>同时set方法中也会查看当前修改的属性是否是globalVariableWhiteList中的一个，如果是，将其descriptor添加到globalWhitelistPrevDescriptor中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>: (target: FakeWindow, p: PropertyKey, value: <span class="built_in">any</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.sandboxRunning) &#123;</span><br><span class="line"><span class="keyword">this</span>.registerRunningApp(name, proxy);</span><br><span class="line"><span class="comment">// We must keep its description while the property existed in globalContext before</span></span><br><span class="line"><span class="keyword">if</span> (!target.hasOwnProperty(p) &amp;&amp; globalContext.hasOwnProperty(p)) &#123;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line"><span class="keyword">const</span> &#123; writable, configurable, enumerable, <span class="keyword">set</span> &#125; = descriptor!;</span><br><span class="line"><span class="comment">// only writable property can be overwritten</span></span><br><span class="line"><span class="comment">// here we ignored accessor descriptor of globalContext as it makes no sense to trigger its logic(which might make sandbox escaping instead)</span></span><br><span class="line"><span class="comment">// we force to set value by data descriptor</span></span><br><span class="line"><span class="keyword">if</span> (writable || <span class="keyword">set</span>) &#123;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(target, p, &#123; configurable, enumerable, writable: <span class="literal">true</span>, value &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">target[p] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sync the property to globalContext</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> p === <span class="string">'string'</span> &amp;&amp; globalVariableWhiteList.indexOf(p) !== <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.globalWhitelistPrevDescriptor[p] = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">globalContext[p] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updatedValueSet.add(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.latestSetProp = p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">`[qiankun] Set window.<span class="subst">$&#123;p.toString()&#125;</span> while sandbox destroyed or inactive in <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 strict-mode 下，Proxy 的 handler.set 返回 false 会抛出 TypeError，在沙箱卸载的情况下应该忽略错误</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>这个get其实就是做了很多的检测，比如如果要获取的属性是window或者self，这种，返回proxy本身这种，具体很多分支大家可以看一下下面的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>: (target: FakeWindow, p: PropertyKey): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.registerRunningApp(name, proxy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p === Symbol.unscopables) <span class="keyword">return</span> unscopables;</span><br><span class="line"><span class="comment">// avoid who using window.window or window.self to escape the sandbox environment to touch the really window</span></span><br><span class="line"><span class="comment">// see https://github.com/eligrey/FileSaver.js/blob/master/src/FileSaver.js#L13</span></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'window'</span> || p === <span class="string">'self'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hijack globalWindow accessing with globalThis keyword</span></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'globalThis'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">p === <span class="string">'top'</span> ||</span><br><span class="line">p === <span class="string">'parent'</span> ||</span><br><span class="line">(process.env.NODE_ENV === <span class="string">'test'</span> &amp;&amp; (p === <span class="string">'mockTop'</span> || p === <span class="string">'mockSafariTop'</span>))</span><br><span class="line">) &#123;</span><br><span class="line"><span class="comment">// if your master app in an iframe context, allow these props escape the sandbox</span></span><br><span class="line"><span class="keyword">if</span> (globalContext === globalContext.parent) &#123;</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (globalContext <span class="keyword">as</span> <span class="built_in">any</span>)[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy.hasOwnProperty would invoke getter firstly, then its value represented as globalContext.hasOwnProperty</span></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'hasOwnProperty'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> hasOwnProperty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'document'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p === <span class="string">'eval'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">eval</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actualTarget = propertiesWithGetter.has(p) ? globalContext : p <span class="keyword">in</span> target ? target : globalContext;</span><br><span class="line"><span class="keyword">const</span> value = actualTarget[p];</span><br><span class="line"></span><br><span class="line"><span class="comment">// frozen value should return directly, see https://github.com/umijs/qiankun/issues/2015</span></span><br><span class="line"><span class="keyword">if</span> (isPropertyFrozen(actualTarget, p)) &#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Some dom api must be bound to native window, otherwise it would cause exception like 'TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation'</span></span><br><span class="line"><span class="comment">See this code:</span></span><br><span class="line"><span class="comment">const proxy = new Proxy(window, &#123;&#125;);</span></span><br><span class="line"><span class="comment">const proxyFetch = fetch.bind(proxy);</span></span><br><span class="line"><span class="comment">proxyFetch('https://qiankun.com');</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> boundTarget = useNativeWindowForBindingsProps.get(p) ? nativeGlobal : globalContext;</span><br><span class="line"><span class="keyword">return</span> getTargetValue(boundTarget, value);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">has(target: FakeWindow, p: <span class="built_in">string</span> | <span class="built_in">number</span> | symbol): <span class="built_in">boolean</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p <span class="keyword">in</span> unscopables || p <span class="keyword">in</span> target || p <span class="keyword">in</span> globalContext;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getOwnPropertyDescriptor(target: FakeWindow, p: <span class="built_in">string</span> | <span class="built_in">number</span> | symbol): PropertyDescriptor | <span class="literal">undefined</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">as the descriptor of top/self/window/mockTop in raw window are configurable but not in proxy target, we need to get it from target to avoid TypeError</span></span><br><span class="line"><span class="comment">see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor</span></span><br><span class="line"><span class="comment">&gt; A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (target.hasOwnProperty(p)) &#123;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, p);</span><br><span class="line">descriptorTargetMap.set(p, <span class="string">'target'</span>);</span><br><span class="line"><span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (globalContext.hasOwnProperty(p)) &#123;</span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(globalContext, p);</span><br><span class="line">descriptorTargetMap.set(p, <span class="string">'globalContext'</span>);</span><br><span class="line"><span class="comment">// A property cannot be reported as non-configurable, if it does not exists as an own property of the target object</span></span><br><span class="line"><span class="keyword">if</span> (descriptor &amp;&amp; !descriptor.configurable) &#123;</span><br><span class="line">descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// trap to support iterator with sandbox</span></span><br><span class="line">ownKeys(target: FakeWindow): ArrayLike&lt;<span class="built_in">string</span> | symbol&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> uniq(Reflect.ownKeys(globalContext).concat(Reflect.ownKeys(target)));</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">defineProperty(target: Window, p: PropertyKey, attributes: PropertyDescriptor): <span class="built_in">boolean</span> &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">from</span> = descriptorTargetMap.get(p);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Descriptor must be defined to native window while it comes from native window via Object.getOwnPropertyDescriptor(window, p),</span></span><br><span class="line"><span class="comment">otherwise it would cause a TypeError with illegal invocation.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">from</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'globalContext'</span>:</span><br><span class="line"><span class="keyword">return</span> Reflect.defineProperty(globalContext, p, attributes);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> Reflect.defineProperty(target, p, attributes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">deleteProperty: (target: FakeWindow, p: <span class="built_in">string</span> | <span class="built_in">number</span> | symbol): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.registerRunningApp(name, proxy);</span><br><span class="line"><span class="keyword">if</span> (target.hasOwnProperty(p)) &#123;</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">delete</span> target[p];</span><br><span class="line">updatedValueSet.delete(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// makes sure `window instanceof Window` returns truthy in micro app</span></span><br><span class="line">getPrototypeOf() &#123;</span><br><span class="line"><span class="keyword">return</span> Reflect.getPrototypeOf(globalContext);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="patchers"><a href="#patchers" class="headerlink" title="patchers"></a>patchers</h3><h4 id="劫持interval"><a href="#劫持interval" class="headerlink" title="劫持interval"></a>劫持interval</h4><p>这部分功能主要是用于拦截sandbox运行期间的定时器，收集有哪些定时器，并能够在sandbox退出事把所有定时器清空</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rawWindowInterval = <span class="built_in">window</span>.setInterval;</span><br><span class="line"><span class="keyword">const</span> rawWindowClearInterval = <span class="built_in">window</span>.clearInterval;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">global: Window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> intervals: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  global.clearInterval = <span class="function">(<span class="params">intervalId: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    intervals = intervals.filter(<span class="function">(<span class="params">id</span>) =&gt;</span> id !== intervalId);</span><br><span class="line">    <span class="keyword">return</span> rawWindowClearInterval.call(<span class="built_in">window</span>, intervalId <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  global.setInterval = <span class="function">(<span class="params">handler: CallableFunction, timeout?: <span class="built_in">number</span>, ...args: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> intervalId = rawWindowInterval(handler, timeout, ...args);</span><br><span class="line">    intervals = [...intervals, intervalId];</span><br><span class="line">    <span class="keyword">return</span> intervalId;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    intervals.forEach(<span class="function">(<span class="params">id</span>) =&gt;</span> global.clearInterval(id));</span><br><span class="line">    global.setInterval = rawWindowInterval;</span><br><span class="line">    global.clearInterval = rawWindowClearInterval;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> noop;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="劫持eventListener"><a href="#劫持eventListener" class="headerlink" title="劫持eventListener"></a>劫持eventListener</h4><p>这个的功能与劫持interval相同，这里是劫持所有的eventListener，收集所有的事件监听器，并提供函数能在sandbox退出时清空所有的事件监听器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rawAddEventListener = <span class="built_in">window</span>.addEventListener;</span><br><span class="line"><span class="keyword">const</span> rawRemoveEventListener = <span class="built_in">window</span>.removeEventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">global: WindowProxy</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listenerMap = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, EventListenerOrEventListenerObject[]&gt;();</span><br><span class="line"></span><br><span class="line">  global.addEventListener = (</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>,</span><br><span class="line">    listener: EventListenerOrEventListenerObject,</span><br><span class="line">    options?: <span class="built_in">boolean</span> | AddEventListenerOptions,</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> listeners = listenerMap.get(<span class="keyword">type</span>) || [];</span><br><span class="line">    listenerMap.set(<span class="keyword">type</span>, [...listeners, listener]);</span><br><span class="line">    <span class="keyword">return</span> rawAddEventListener.call(<span class="built_in">window</span>, <span class="keyword">type</span>, listener, options);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  global.removeEventListener = (</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span>,</span><br><span class="line">    listener: EventListenerOrEventListenerObject,</span><br><span class="line">    options?: <span class="built_in">boolean</span> | AddEventListenerOptions,</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> storedTypeListeners = listenerMap.get(<span class="keyword">type</span>);</span><br><span class="line">    <span class="keyword">if</span> (storedTypeListeners &amp;&amp; storedTypeListeners.length &amp;&amp; storedTypeListeners.indexOf(listener) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      storedTypeListeners.splice(storedTypeListeners.indexOf(listener), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rawRemoveEventListener.call(<span class="built_in">window</span>, <span class="keyword">type</span>, listener, options);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    listenerMap.forEach(<span class="function">(<span class="params">listeners, <span class="keyword">type</span></span>) =&gt;</span></span><br><span class="line">      [...listeners].forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> global.removeEventListener(<span class="keyword">type</span>, listener)),</span><br><span class="line">    );</span><br><span class="line">    global.addEventListener = rawAddEventListener;</span><br><span class="line">    global.removeEventListener = rawRemoveEventListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> noop;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="劫持historyListener（针对umi框架）"><a href="#劫持historyListener（针对umi框架）" class="headerlink" title="劫持historyListener（针对umi框架）"></a>劫持historyListener（针对umi框架）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isFunction, noop &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// FIXME umi unmount feature request</span></span><br><span class="line">  <span class="comment">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span><br><span class="line">  <span class="keyword">let</span> rawHistoryListen = <span class="function">(<span class="params">_: <span class="built_in">any</span></span>) =&gt;</span> noop;</span><br><span class="line">  <span class="keyword">const</span> historyListeners: <span class="built_in">Array</span>&lt;<span class="keyword">typeof</span> noop&gt; = [];</span><br><span class="line">  <span class="keyword">const</span> historyUnListens: <span class="built_in">Array</span>&lt;<span class="keyword">typeof</span> noop&gt; = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history &amp;&amp; isFunction((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen)) &#123;</span><br><span class="line">    rawHistoryListen = (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen.bind((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history);</span><br><span class="line"></span><br><span class="line">    (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen = <span class="function">(<span class="params">listener: <span class="keyword">typeof</span> noop</span>) =&gt;</span> &#123;</span><br><span class="line">      historyListeners.push(listener);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> unListen = rawHistoryListen(listener);</span><br><span class="line">      historyUnListens.push(unListen);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        unListen();</span><br><span class="line">        historyUnListens.splice(historyUnListens.indexOf(unListen), <span class="number">1</span>);</span><br><span class="line">        historyListeners.splice(historyListeners.indexOf(listener), <span class="number">1</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rebuild = noop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     还存在余量 listener 表明未被卸载，存在两种情况</span></span><br><span class="line"><span class="comment">     1. 应用在 unmout 时未正确卸载 listener</span></span><br><span class="line"><span class="comment">     2. listener 是应用 mount 之前绑定的，</span></span><br><span class="line"><span class="comment">     第二种情况下应用在下次 mount 之前需重新绑定该 listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (historyListeners.length) &#123;</span><br><span class="line">      rebuild = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 必须使用 window.g_history.listen 的方式重新绑定 listener，从而能保证 rebuild 这部分也能被捕获到，否则在应用卸载后无法正确的移除这部分副作用</span></span><br><span class="line">        historyListeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen(listener));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卸载余下的 listener</span></span><br><span class="line">    historyUnListens.forEach(<span class="function">(<span class="params">unListen</span>) =&gt;</span> unListen());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// restore</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history &amp;&amp; isFunction((<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen)) &#123;</span><br><span class="line">      (<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).g_history.listen = rawHistoryListen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rebuild;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="patch-sandbox"><a href="#patch-sandbox" class="headerlink" title="patch sandbox"></a>patch sandbox</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patchLooseSandbox</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  appWrapperGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  proxy: Window,</span></span></span><br><span class="line"><span class="function"><span class="params">  mounting = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: CallableFunction,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Freer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dynamicStyleSheetElements: <span class="built_in">Array</span>&lt;HTMLLinkElement | HTMLStyleElement&gt; = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unpatchDynamicAppendPrototypeFunctions = patchHTMLDynamicAppendPrototypeFunctions(</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      check if the currently specified application is active</span></span><br><span class="line"><span class="comment">      While we switch page from qiankun app to a normal react routing page, the normal one may load stylesheet dynamically while page rendering,</span></span><br><span class="line"><span class="comment">      but the url change listener must to wait until the current call stack is flushed.</span></span><br><span class="line"><span class="comment">      This scenario may cause we record the stylesheet from react routing page dynamic injection,</span></span><br><span class="line"><span class="comment">      and remove them after the url change triggered and qiankun app is unmouting</span></span><br><span class="line"><span class="comment">      see https://github.com/ReactTraining/history/blob/master/modules/createHashHistory.js#L222-L230</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    () =&gt; checkActivityFunctions(<span class="built_in">window</span>.location).some(<span class="function">(<span class="params">name</span>) =&gt;</span> name === appName),</span><br><span class="line">    () =&gt; (&#123;</span><br><span class="line">      appName,</span><br><span class="line">      appWrapperGetter,</span><br><span class="line">      proxy,</span><br><span class="line">      strictGlobal: <span class="literal">false</span>,</span><br><span class="line">      speedySandbox: <span class="literal">false</span>,</span><br><span class="line">      scopedCSS,</span><br><span class="line">      dynamicStyleSheetElements,</span><br><span class="line">      excludeAssetFilter,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!mounting) calcAppCount(appName, <span class="string">'increase'</span>, <span class="string">'bootstrapping'</span>);</span><br><span class="line">  <span class="keyword">if</span> (mounting) calcAppCount(appName, <span class="string">'increase'</span>, <span class="string">'mounting'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mounting) calcAppCount(appName, <span class="string">'decrease'</span>, <span class="string">'bootstrapping'</span>);</span><br><span class="line">    <span class="keyword">if</span> (mounting) calcAppCount(appName, <span class="string">'decrease'</span>, <span class="string">'mounting'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// release the overwrite prototype after all the micro apps unmounted</span></span><br><span class="line">    <span class="keyword">if</span> (isAllAppsUnmounted()) unpatchDynamicAppendPrototypeFunctions();</span><br><span class="line"></span><br><span class="line">    recordStyledComponentsCSSRules(dynamicStyleSheetElements);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// As now the sub app content all wrapped with a special id container,</span></span><br><span class="line">    <span class="comment">// the dynamic style sheet would be removed automatically while unmoutting</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">rebuild</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      rebuildCSSRules(dynamicStyleSheetElements, <span class="function">(<span class="params">stylesheetElement</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> appWrapper = appWrapperGetter();</span><br><span class="line">        <span class="keyword">if</span> (!appWrapper.contains(stylesheetElement)) &#123;</span><br><span class="line">          <span class="comment">// Using document.head.appendChild ensures that appendChild invocation can also directly use the HTMLHeadElement.prototype.appendChild method which is overwritten at mounting phase</span></span><br><span class="line">          <span class="built_in">document</span>.head.appendChild.call(appWrapper, stylesheetElement);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// As the patcher will be invoked every mounting phase, we could release the cache for gc after rebuilding</span></span><br><span class="line">      <span class="keyword">if</span> (mounting) &#123;</span><br><span class="line">        dynamicStyleSheetElements = [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get native global window with a sandbox disgusted way, thus we could share it between qiankun instances🤪</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(nativeGlobal, <span class="string">'__proxyAttachContainerConfigMap__'</span>, &#123; enumerable: <span class="literal">false</span>, writable: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Share proxyAttachContainerConfigMap between multiple qiankun instance, thus they could access the same record</span></span><br><span class="line">nativeGlobal.__proxyAttachContainerConfigMap__ =</span><br><span class="line">  nativeGlobal.__proxyAttachContainerConfigMap__ || <span class="keyword">new</span> WeakMap&lt;WindowProxy, ContainerConfig&gt;();</span><br><span class="line"><span class="keyword">const</span> proxyAttachContainerConfigMap: WeakMap&lt;WindowProxy, ContainerConfig&gt; =</span><br><span class="line">  nativeGlobal.__proxyAttachContainerConfigMap__;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elementAttachContainerConfigMap = <span class="keyword">new</span> WeakMap&lt;HTMLElement, ContainerConfig&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> docCreatePatchedMap = <span class="keyword">new</span> WeakMap&lt;<span class="keyword">typeof</span> <span class="built_in">document</span>.createElement, <span class="keyword">typeof</span> <span class="built_in">document</span>.createElement&gt;();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchDocumentCreateElement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> docCreateElementFnBeforeOverwrite = docCreatePatchedMap.get(<span class="built_in">document</span>.createElement);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!docCreateElementFnBeforeOverwrite) &#123;</span><br><span class="line">    <span class="keyword">const</span> rawDocumentCreateElement = <span class="built_in">document</span>.createElement;</span><br><span class="line">    Document.prototype.createElement = <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>&lt;<span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">HTMLElementTagNameMap</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">this</span>: Document,</span></span></span><br><span class="line"><span class="function"><span class="params">      tagName: K,</span></span></span><br><span class="line"><span class="function"><span class="params">      options?: ElementCreationOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>): <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> element = rawDocumentCreateElement.call(<span class="keyword">this</span>, tagName, options);</span><br><span class="line">      <span class="keyword">if</span> (isHijackingTag(tagName)) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="built_in">window</span>: currentRunningSandboxProxy &#125; = getCurrentRunningApp() || &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (currentRunningSandboxProxy) &#123;</span><br><span class="line">          <span class="keyword">const</span> proxyContainerConfig = proxyAttachContainerConfigMap.get(currentRunningSandboxProxy);</span><br><span class="line">          <span class="keyword">if</span> (proxyContainerConfig) &#123;</span><br><span class="line">            elementAttachContainerConfigMap.set(element, proxyContainerConfig);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// It means it have been overwritten while createElement is an own property of document</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hasOwnProperty(<span class="string">'createElement'</span>)) &#123;</span><br><span class="line">      <span class="built_in">document</span>.createElement = Document.prototype.createElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    docCreatePatchedMap.set(Document.prototype.createElement, rawDocumentCreateElement);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unpatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (docCreateElementFnBeforeOverwrite) &#123;</span><br><span class="line">      Document.prototype.createElement = docCreateElementFnBeforeOverwrite;</span><br><span class="line">      <span class="built_in">document</span>.createElement = docCreateElementFnBeforeOverwrite;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patchStrictSandbox</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  appWrapperGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  proxy: Window,</span></span></span><br><span class="line"><span class="function"><span class="params">  mounting = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: CallableFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">  speedySandbox = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Freer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> containerConfig = proxyAttachContainerConfigMap.get(proxy);</span><br><span class="line">  <span class="keyword">if</span> (!containerConfig) &#123;</span><br><span class="line">    containerConfig = &#123;</span><br><span class="line">      appName,</span><br><span class="line">      proxy,</span><br><span class="line">      appWrapperGetter,</span><br><span class="line">      dynamicStyleSheetElements: [],</span><br><span class="line">      strictGlobal: <span class="literal">true</span>,</span><br><span class="line">      speedySandbox,</span><br><span class="line">      excludeAssetFilter,</span><br><span class="line">      scopedCSS,</span><br><span class="line">    &#125;;</span><br><span class="line">    proxyAttachContainerConfigMap.set(proxy, containerConfig);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// all dynamic style sheets are stored in proxy container</span></span><br><span class="line">  <span class="keyword">const</span> &#123; dynamicStyleSheetElements &#125; = containerConfig;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unpatchDocumentCreate = patchDocumentCreateElement();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> unpatchDynamicAppendPrototypeFunctions = patchHTMLDynamicAppendPrototypeFunctions(</span><br><span class="line">    (element) =&gt; elementAttachContainerConfigMap.has(element),</span><br><span class="line">    (element) =&gt; elementAttachContainerConfigMap.get(element)!,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!mounting) calcAppCount(appName, <span class="string">'increase'</span>, <span class="string">'bootstrapping'</span>);</span><br><span class="line">  <span class="keyword">if</span> (mounting) calcAppCount(appName, <span class="string">'increase'</span>, <span class="string">'mounting'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mounting) calcAppCount(appName, <span class="string">'decrease'</span>, <span class="string">'bootstrapping'</span>);</span><br><span class="line">    <span class="keyword">if</span> (mounting) calcAppCount(appName, <span class="string">'decrease'</span>, <span class="string">'mounting'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// release the overwritten prototype after all the micro apps unmounted</span></span><br><span class="line">    <span class="keyword">if</span> (isAllAppsUnmounted()) &#123;</span><br><span class="line">      unpatchDynamicAppendPrototypeFunctions();</span><br><span class="line">      unpatchDocumentCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    recordStyledComponentsCSSRules(dynamicStyleSheetElements);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// As now the sub app content all wrapped with a special id container,</span></span><br><span class="line">    <span class="comment">// the dynamic style sheet would be removed automatically while unmoutting</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">rebuild</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      rebuildCSSRules(dynamicStyleSheetElements, <span class="function">(<span class="params">stylesheetElement</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> appWrapper = appWrapperGetter();</span><br><span class="line">        <span class="keyword">if</span> (!appWrapper.contains(stylesheetElement)) &#123;</span><br><span class="line">          <span class="keyword">const</span> mountDom =</span><br><span class="line">            stylesheetElement[styleElementTargetSymbol] === <span class="string">'head'</span> ? getAppWrapperHeadElement(appWrapper) : appWrapper;</span><br><span class="line">          rawHeadAppendChild.call(mountDom, stylesheetElement);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="patchers-集成导出"><a href="#patchers-集成导出" class="headerlink" title="patchers 集成导出"></a>patchers 集成导出</h4><p>简单总结下patcher是做什么的：</p><ul><li>执行过程中会对一些全局的定时器或者监听器或者某些全局变量进行拦截统计，我们统称为副作用，然后返回free函数用于子应用卸载时（即unmount）调用</li><li>free函数内部会对上一部统计到的副作用进行清空，同时如果有部分副作用是需要下次子应用重新激活时重新启动的，放到free函数最终返回的rebuild中，最终会在mount时调用rebuild</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; Freer, SandBox &#125; <span class="keyword">from</span> <span class="string">'../../interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SandBoxType &#125; <span class="keyword">from</span> <span class="string">'../../interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> css <span class="keyword">from</span> <span class="string">'./css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; patchLooseSandbox, patchStrictSandbox &#125; <span class="keyword">from</span> <span class="string">'./dynamicAppend'</span>;</span><br><span class="line"><span class="keyword">import</span> patchHistoryListener <span class="keyword">from</span> <span class="string">'./historyListener'</span>;</span><br><span class="line"><span class="keyword">import</span> patchInterval <span class="keyword">from</span> <span class="string">'./interval'</span>;</span><br><span class="line"><span class="keyword">import</span> patchWindowListener <span class="keyword">from</span> <span class="string">'./windowListener'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patchAtMounting</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elementGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  sandbox: SandBox,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: CallableFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">  speedySandBox?: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Freer</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> basePatchers = [</span><br><span class="line">    () =&gt; patchInterval(sandbox.proxy),</span><br><span class="line">    () =&gt; patchWindowListener(sandbox.proxy),</span><br><span class="line">    () =&gt; patchHistoryListener(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> patchersInSandbox = &#123;</span><br><span class="line">    [SandBoxType.LegacyProxy]: [</span><br><span class="line">      ...basePatchers,</span><br><span class="line">      () =&gt; patchLooseSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">true</span>, scopedCSS, excludeAssetFilter),</span><br><span class="line">    ],</span><br><span class="line">    [SandBoxType.Proxy]: [</span><br><span class="line">      ...basePatchers,</span><br><span class="line">      () =&gt;</span><br><span class="line">        patchStrictSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">true</span>, scopedCSS, excludeAssetFilter, speedySandBox),</span><br><span class="line">    ],</span><br><span class="line">    [SandBoxType.Snapshot]: [</span><br><span class="line">      ...basePatchers,</span><br><span class="line">      () =&gt; patchLooseSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">true</span>, scopedCSS, excludeAssetFilter),</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> patchersInSandbox[sandbox.type]?.map(<span class="function">(<span class="params">patch</span>) =&gt;</span> patch());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patchAtBootstrapping</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elementGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  sandbox: SandBox,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: CallableFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">  speedySandBox?: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Freer</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> patchersInSandbox = &#123;</span><br><span class="line">    [SandBoxType.LegacyProxy]: [</span><br><span class="line">      () =&gt; patchLooseSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">false</span>, scopedCSS, excludeAssetFilter),</span><br><span class="line">    ],</span><br><span class="line">    [SandBoxType.Proxy]: [</span><br><span class="line">      () =&gt;</span><br><span class="line">        patchStrictSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">false</span>, scopedCSS, excludeAssetFilter, speedySandBox),</span><br><span class="line">    ],</span><br><span class="line">    [SandBoxType.Snapshot]: [</span><br><span class="line">      () =&gt; patchLooseSandbox(appName, elementGetter, sandbox.proxy, <span class="literal">false</span>, scopedCSS, excludeAssetFilter),</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> patchersInSandbox[sandbox.type]?.map(<span class="function">(<span class="params">patch</span>) =&gt;</span> patch());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; css &#125;;</span><br></pre></td></tr></table></figure><h3 id="Sandbox集合"><a href="#Sandbox集合" class="headerlink" title="Sandbox集合"></a>Sandbox集合</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; Freer, Rebuilder, SandBox &#125; <span class="keyword">from</span> <span class="string">'../interfaces'</span>;</span><br><span class="line"><span class="keyword">import</span> LegacySandbox <span class="keyword">from</span> <span class="string">'./legacy/sandbox'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; patchAtBootstrapping, patchAtMounting &#125; <span class="keyword">from</span> <span class="string">'./patchers'</span>;</span><br><span class="line"><span class="keyword">import</span> ProxySandbox <span class="keyword">from</span> <span class="string">'./proxySandbox'</span>;</span><br><span class="line"><span class="keyword">import</span> SnapshotSandbox <span class="keyword">from</span> <span class="string">'./snapshotSandbox'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; getCurrentRunningApp &#125; <span class="keyword">from</span> <span class="string">'./common'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">'./patchers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成应用运行时沙箱</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 沙箱分两个类型：</span></span><br><span class="line"><span class="comment"> * 1. app 环境沙箱</span></span><br><span class="line"><span class="comment"> *  app 环境沙箱是指应用初始化过之后，应用会在什么样的上下文环境运行。每个应用的环境沙箱只会初始化一次，因为子应用只会触发一次 bootstrap 。</span></span><br><span class="line"><span class="comment"> *  子应用在切换时，实际上切换的是 app 环境沙箱。</span></span><br><span class="line"><span class="comment"> * 2. render 沙箱</span></span><br><span class="line"><span class="comment"> *  子应用在 app mount 开始前生成好的的沙箱。每次子应用切换过后，render 沙箱都会重现初始化。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这么设计的目的是为了保证每个子应用切换回来之后，还能运行在应用 bootstrap 之后的环境下。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param appName</span></span><br><span class="line"><span class="comment"> * @param elementGetter</span></span><br><span class="line"><span class="comment"> * @param scopedCSS</span></span><br><span class="line"><span class="comment"> * @param useLooseSandbox</span></span><br><span class="line"><span class="comment"> * @param excludeAssetFilter</span></span><br><span class="line"><span class="comment"> * @param globalContext</span></span><br><span class="line"><span class="comment"> * @param speedySandBox</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createSandboxContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appName: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elementGetter: () =&gt; HTMLElement | ShadowRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  scopedCSS: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  useLooseSandbox?: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  excludeAssetFilter?: (url: <span class="built_in">string</span>) =&gt; <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  globalContext?: <span class="keyword">typeof</span> <span class="built_in">window</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  speedySandBox?: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sandbox: SandBox;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.Proxy) &#123;</span><br><span class="line">    sandbox = useLooseSandbox ? <span class="keyword">new</span> LegacySandbox(appName, globalContext) : <span class="keyword">new</span> ProxySandbox(appName, globalContext);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sandbox = <span class="keyword">new</span> SnapshotSandbox(appName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// some side effect could be be invoked while bootstrapping, such as dynamic stylesheet injection with style-loader, especially during the development phase</span></span><br><span class="line">  <span class="keyword">const</span> bootstrappingFreers = patchAtBootstrapping(</span><br><span class="line">    appName,</span><br><span class="line">    elementGetter,</span><br><span class="line">    sandbox,</span><br><span class="line">    scopedCSS,</span><br><span class="line">    excludeAssetFilter,</span><br><span class="line">    speedySandBox,</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// mounting freers are one-off and should be re-init at every mounting time</span></span><br><span class="line">  <span class="keyword">let</span> mountingFreers: Freer[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sideEffectsRebuilders: Rebuilder[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    instance: sandbox,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 沙箱被 mount</span></span><br><span class="line"><span class="comment">     * 可能是从 bootstrap 状态进入的 mount</span></span><br><span class="line"><span class="comment">     * 也可能是从 unmount 之后再次唤醒进入 mount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> mount() &#123;</span><br><span class="line">      <span class="comment">/* ------------------------------------------ 因为有上下文依赖（window），以下代码执行顺序不能变 ------------------------------------------ */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* ------------------------------------------ 1. 启动/恢复 沙箱------------------------------------------ */</span></span><br><span class="line">      sandbox.active();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(<span class="number">0</span>, bootstrappingFreers.length);</span><br><span class="line">      <span class="keyword">const</span> sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// must rebuild the side effects which added at bootstrapping firstly to recovery to nature state</span></span><br><span class="line">      <span class="keyword">if</span> (sideEffectsRebuildersAtBootstrapping.length) &#123;</span><br><span class="line">        sideEffectsRebuildersAtBootstrapping.forEach(<span class="function">(<span class="params">rebuild</span>) =&gt;</span> rebuild());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* ------------------------------------------ 2. 开启全局变量补丁 ------------------------------------------*/</span></span><br><span class="line">      <span class="comment">// render 沙箱启动时开始劫持各类全局监听，尽量不要在应用初始化阶段有 事件监听/定时器 等副作用</span></span><br><span class="line">      mountingFreers = patchAtMounting(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* ------------------------------------------ 3. 重置一些初始化时的副作用 ------------------------------------------*/</span></span><br><span class="line">      <span class="comment">// 存在 rebuilder 则表明有些副作用需要重建</span></span><br><span class="line">      <span class="keyword">if</span> (sideEffectsRebuildersAtMounting.length) &#123;</span><br><span class="line">        sideEffectsRebuildersAtMounting.forEach(<span class="function">(<span class="params">rebuild</span>) =&gt;</span> rebuild());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// clean up rebuilders</span></span><br><span class="line">      sideEffectsRebuilders = [];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复 global 状态，使其能回到应用加载之前的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> unmount() &#123;</span><br><span class="line">      <span class="comment">// record the rebuilders of window side effects (event listeners or timers)</span></span><br><span class="line">      <span class="comment">// note that the frees of mounting phase are one-off as it will be re-init at next mounting</span></span><br><span class="line">      sideEffectsRebuilders = [...bootstrappingFreers, ...mountingFreers].map(<span class="function">(<span class="params">free</span>) =&gt;</span> free());</span><br><span class="line"></span><br><span class="line">      sandbox.inactive();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么需要微前端&quot;&gt;&lt;a href=&quot;#为什么需要微前端&quot; class=&quot;headerlink&quot; title=&quot;为什么需要微前端&quot;&gt;&lt;/a&gt;为什么需要微前端&lt;/h2&gt;&lt;p&gt;微前端其实诞生两个大的背景下，在提倡拥抱变化的前端社区可以看到新的框架、技术、概念层出不穷，并且随着WEB标准的演进，前端应用已经具备更好的性能、更快的开发效率。但随着而来的是应用的复杂程度更高、涉及的团队规模更广、更高的性能要求，应用复杂度已经成为阻塞业务发展的重要瓶颈。如何让现有系统拥抱最新技术提高生产力、并且解耦单体应用，是现在前端工程不得不面临的挑战。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 设计模式学习与实践（一）</title>
    <link href="https://sunra.top/2022/11/19/javascript-design-parttern-1/"/>
    <id>https://sunra.top/2022/11/19/javascript-design-parttern-1/</id>
    <published>2022-11-19T06:24:48.000Z</published>
    <updated>2022-12-10T03:07:21.129Z</updated>
    
    <content type="html"><![CDATA[<p>随着对JS的知识的了解和实际的开发需要，内心对于重读设计模式的感触越来越深，所以就重新拿起了《JavaScrip设计模式与开发实践》一书，并结合《设计模式之美》的部分内容，先做个总结，并先讲一下单例模式，剩下的后续慢慢讲。</p><p>首先提出几个问题，也是我这次的几个比较总结性的收获：</p><ul><li>JavaScript是面向对象还是面向过程</li><li>函数是一等公民这一点是面向对象还是面向过程</li></ul><p>然后抛出我这次对设计模式的一个最大的收获，就是<strong>所有的设计模式，其实都是识别出代码中不变的部分和易变的部分，分别封装起来，然后组合二者,而要准确地识别出这一点，不仅需要代码能力的深厚，更是要真正地去理解业务</strong>。</p><p>比如策略模式，一个个策略就是易变的部分，而对策略的调用则是不变的部分。代理模式中，被代理的操作就是不变的，而代理本身就是易变的。</p><p>其实，设计模式的出现某种程度上就是为了弥补语言的不足，比如原型模式算是一种设计模式，但是JavaScript本身就通过原型链支持了这种模式。</p><a id="more"></a><h2 id="JavaScript是面向对象还是面向过程"><a href="#JavaScript是面向对象还是面向过程" class="headerlink" title="JavaScript是面向对象还是面向过程"></a>JavaScript是面向对象还是面向过程</h2><p>首先在最近相关的学习中，我逐渐明白了一些过去迷惑的概念，比如JavaScript到底是面向对象和面向过程这个问题？</p><p>面向对象编程是建立类与类之间的联系和协作模式，面向过程编程则是建立一个又一个的过程，每个过程处理某个或者某几个类，举个例子，面向过程像是构造一个过程教会一个小孩子语文，再构造一个过程教会他数学。而面向对象则是建立小孩子与语文，数学之间的关系</p><p>实际上，面向过程编程和面向过程编程语言并没有严格的官方定义。理解这两个概念最好的方式是跟面向对象编程和面向对象编程语言进行对比。相较于面向对象编程以类为组织代码的基本单元，面向过程编程则是以过程（或方法）作为组织代码的基本单元。它最主要的特点就是数据和方法相分离。相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。</p><p>也就是说理论上提供，继承，多态，封装的语言就可以算是面向对象的语言，那么JavaScript算是面向对象的语言吗？</p><p>笔者个人认为：<strong>JavaScript算是一门面向对象的语言，只是它的继承并不是通过类的形式，而是通过原型链的方式，虽然ES6后面也实现了class的语法，但本质上还是通过原型链的方式</strong>。</p><p>首先说继承，通过类的方式实现继承和通过原型链的方式有什么区别呢？<strong>通过类的方式是一种is-a的关系，也就是说子类是父类的一种，而原型链继承则是有点类似接口（has-a）的方式，或者说有点像鸭子类型，也就是说，我现在需要一个变量，我更关注的是它有没有say这个方法，而不是他是不是Duck的实例，即便他是Chicken的实例，他有say的方法，那也是我要的</strong>。</p><p><strong>原型链式的继承的本质就是原型链的委托机制，要得到一个对象，不是实例化一个类，而是找到一个对象作为原型并克隆它，对象会将请求委托给它构造器的原型，比如JavaScript就提供Object.create的方式</strong></p><p>面向接口编程是设计模式中最重要的思想，但是在JavaScript中，因为它是基于原型链继承的，所以它天生就暗含了面向接口编程的思想，面向接口编程与主流语言并不相同，更为简单。</p><p>再说多态，多态的含义是：统一操作作用于不同对象上面，可以产生不同的解释和不同的执行结果。换句话说，给不同的对象发送同一个消息时，这些对象会根据这个消息分别给出不同的反馈。</p><p>多态背后的思想是：讲“做什么”和“谁去做以及怎样做”分离开来，也就是将“不变的食物”和“可能改变的事物”分离开来。将二者分开，分别封装，给予了我们扩展程序的能力，程序看起来是可生长的，这也符合开闭原则。</p><p>使用继承来实现多态，是让对象表现出多态性的一个最常见的手段。继承分为实现继承和接口继承，前者就是基于父子类的方式，后者就是通过接口的方式。</p><p>多态本质是把做什么和谁去做分开，要实现这一点，就需要先消除类型之间的耦合关系，在Java中，我们需要通过向上转型来实现，而在JavaScript中，变量类型在运行时是可变的，一个对象，既可以是Duck类型，又可以是Chicken类型，我需要的是它say这个方法，这意味着<strong>JavaScript中，对象的多态性是与生俱来的</strong>。</p><p>多态的最根本的好处在于，你不必再向对象询问“你是什么类型”而后根据得到的答案调用对象的某个行为，你只管调用就行了，其他一切多态机制都会为你安排妥当。换句话说，多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p><h2 id="什么叫函数式编程"><a href="#什么叫函数式编程" class="headerlink" title="什么叫函数式编程"></a>什么叫函数式编程</h2><p>在函数式编程中，函数是头等对象即头等函数，这意味着一个函数，既可以作为其它函数的输入参数值，也可以从函数中返回值，被修改或者被分配给一个变量。λ演算是这种范型最重要的基础，λ演算的函数可以接受函数作为输入参数和输出返回值。</p><p>比起指令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。</p><p>所以说，<strong>是否是函数式编程并不影响是面向对象还是面向过程，但是函数式编程会对我们具体实现一些设计模式的时候的代码产生影响</strong>，也就是说，设计模式是一种思想层面的，结合具体的语言实现不同，而函数式编程语言函数可以作为入参和出参，这件事会对JavaScript实现设计模式产生影响。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>我们先来介绍下单例模式的定义：保证一个类仅有一个实例，并提供一个访问它的的全局访问点</p><h3 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">        <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">'sun1'</span>);</span><br><span class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">'sun2'</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们通过Singleton.getInstance来获取类唯一的对象，这种方式相对简单，但是有个问题，我们增加了这个类的不确定性，Singleton类的使用者必须知道这是一个单例类，并通过与以往new XXX的方式不同的方式来获取对象</p><h3 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h3><p>我们现在的目标是实现一个透明的单例类，用户从这类中创建对象的时候，可以像使用其他任何普通的类一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.html = html;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CreateDiv;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CreateDiv(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> CreateDiv(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>为了把instance封装起来，我们使用了自执行的匿名函数和闭包，并且让这个匿名函数返回真正的Singleton的构造方法，这增加了一些程序的复杂度，阅读起来也不是很舒服。</p><p>而且我们观察Singleton的构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，CreateDiv的构造函数实际上负责了两件事情，第一是创建对象和执行初始化init方法，第二是保证只有一个对象，<strong>这不符合单一职责原则</strong>。</p><p>假设某天我们要利用这个类，在页面中创建千千万万的div，即让这个类变回一个普通的类，我们必须改写CreateDiv的构造方法，把创建唯一对象的那段代码去掉，这又<strong>违反了开闭原则</strong>。</p><h3 id="通过代理实现单例模式"><a href="#通过代理实现单例模式" class="headerlink" title="通过代理实现单例模式"></a>通过代理实现单例模式</h3><p>现在我们通过引入代理的方式解决上述问题，首先我们从CreateDiv的构造函数中将负责管理单例的代码移除出去，使它成为一个普通的类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们引入代理类，proxySingletonCreateDiv</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> CreateDiv(html);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = proxySingletonCreateDiv(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> b = proxySingletonCreateDiv(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript中的单例模式"><a href="#JavaScript中的单例模式" class="headerlink" title="JavaScript中的单例模式"></a>JavaScript中的单例模式</h3><p>上面几种单例模式的实现，更多的是接近传统面向对象语言中的实现，单例对象从“类”中创建而来。在以类为中心的语言中，这是很自然的做法。比如在java中，如果需要某个对象，就必须先定义一个类，对象总是从类中来的。</p><p>JavaScript其实是一门无类的语言，也正是因为如此，生搬单例模式的概念并无意义。在JavaScript中创建对象的方法非常简单，既然我们需要一个唯一的对象，我们为什么要先为它创建一个类呢？这是多此一举。</p><p>要记住，<strong>单例模式的核心是，确保只有一个实例，并提供全局访问</strong>。</p><p><strong>全局变量不是单例模式，但是在JavaScript中，我们常用全局变量来实现单例模式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>这个a就是一个单例，它既满足只有一个实例，并且如果它声明在全局作用域，它就能够被全局访问。</p><p>但是全局变量存在很多问题，比如造成命名空间污染，在大中型项目中，如果不佳已管理，程序中可能存在很多这种变量，作为普通开发者，我们要尽量减少全局变量的使用，即使要使用，也要尽量降低它的影响。</p><p>我们可以使用以下几种方式降低全局变量带来的命名污染：</p><p><strong>1. 使用命名空间</strong></p><p>适当使用命名空间，并不会杜绝全局变量，但可以减少全局变量的数量，最简单的方法依然是使用对象字面量的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">    a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 使用闭包封装私有变量</strong></p><p>这种方法把一些变量封装在闭包内部，只暴露一些接口与外界通信：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> __name = <span class="string">'sun'</span>,</span><br><span class="line">        __age = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> __name + <span class="string">'-'</span> + __age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><p>前面我们了解了单例模式的一些实现方法，本节我们来了解惰性单例。</p><p>惰性单例指的是在需要的时候才创建对象的实例。惰性单例是单例模式的重点，这种技术在开发中十分有用。</p><p>实际上一开始我们使用Singleton.getInstance的就是这种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不过这是基于类的单例模式，前面说过，基于“类”的单例模式在JavaScript中并不适用</p><p>我们设想一个场景，点击登陆按钮后再创建一个全局唯一的登陆浮窗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"loginBtn"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            if (!div) &#123;</span><br><span class="line"><span class="javascript">                div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">                div.innerHTML = <span class="string">"登陆浮窗"</span>；</span></span><br><span class="line"><span class="javascript">                div.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.appendChild(div);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> div;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> loginLayer = createLoginLayer();</span></span><br><span class="line"><span class="javascript">        loginLayer.style.display = <span class="string">'block'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通用惰性单例"><a href="#通用惰性单例" class="headerlink" title="通用惰性单例"></a>通用惰性单例</h3><p>上一节我们完成了一个可用的惰性单例，但是我们发现它还有以下一些问题：</p><ul><li>这段代码仍然违反单一职责原则，创建对象和管理单例的逻辑都放在了createLoginLayer对象内部</li><li>如果我们下次需要创建页面中唯一的iframe，或者script，那么我们必须把createLoginLayer函数几乎是照抄一遍</li></ul><p>我们需要把不变的部分隔离出来，先不考虑创建一个div和iframe有多少差异，管理单例的逻辑可以抽离出来，这个逻辑始终是一致的，用一个对象标志是否创建过对象，如果是，则下次直接返回这个已经创建好的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">    obj = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在就把管理单例的逻辑从原本的代码中抽离出来，这些逻辑被封装在getSingle函数内部，创建方法fn被当作参数动态传入getSingle中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们可以讲用于创建登陆浮窗的方法用参数fn的形式传入getSingle，我们不仅可以传入createLoginLayer，我们还可以传入createScipt等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="string">"登陆浮窗"</span>；</span><br><span class="line">    div.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们把创建实例对象的职责和管理单例的职责分别放置在两个方法例，这两个方法可以独立变化而互不影响，合在一起就完成了单例的创建。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着对JS的知识的了解和实际的开发需要，内心对于重读设计模式的感触越来越深，所以就重新拿起了《JavaScrip设计模式与开发实践》一书，并结合《设计模式之美》的部分内容，先做个总结，并先讲一下单例模式，剩下的后续慢慢讲。&lt;/p&gt;
&lt;p&gt;首先提出几个问题，也是我这次的几个比较总结性的收获：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript是面向对象还是面向过程&lt;/li&gt;
&lt;li&gt;函数是一等公民这一点是面向对象还是面向过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后抛出我这次对设计模式的一个最大的收获，就是&lt;strong&gt;所有的设计模式，其实都是识别出代码中不变的部分和易变的部分，分别封装起来，然后组合二者,而要准确地识别出这一点，不仅需要代码能力的深厚，更是要真正地去理解业务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如策略模式，一个个策略就是易变的部分，而对策略的调用则是不变的部分。代理模式中，被代理的操作就是不变的，而代理本身就是易变的。&lt;/p&gt;
&lt;p&gt;其实，设计模式的出现某种程度上就是为了弥补语言的不足，比如原型模式算是一种设计模式，但是JavaScript本身就通过原型链支持了这种模式。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript中Set，Map和Object的区别</title>
    <link href="https://sunra.top/2022/11/11/javascript-set-map-obj/"/>
    <id>https://sunra.top/2022/11/11/javascript-set-map-obj/</id>
    <published>2022-11-11T10:21:47.000Z</published>
    <updated>2022-11-14T03:42:22.614Z</updated>
    
    <content type="html"><![CDATA[<p>最近在阅读《Web高效编程与实践优化》的计算机基础一节，看到他讲了JS中Set和Map的区别，以及Object的实现，算是解决了往常的一点疑惑吧，这里简单总结下：</p><a id="more"></a><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set一般是使用红黑树实现的，红黑树是一种平衡查找二叉树，它的查找时间复杂度为O（logN）。实际上，Chrome V8的Set是用哈希实现的，它是一个哈希Set</p><p>假设我们有这样一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set(); </span><br><span class="line">//数据为20个数 </span><br><span class="line">var data = [3, 62, 38, 42, 14, 4, 14, 33, 56, 20, 21, 63, 49, 41, 10, 14, 24, 59, 49, 29]; </span><br><span class="line">for(var i = 0; i &lt; data.length; i++)&#123; </span><br><span class="line">    <span class="keyword">set</span>.add(data[i]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哈希的一个关键的地方是哈希算法，即对一堆数或者字符串做哈希运算得到它们的随机值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComputeIntegerHash</span>(<span class="params">key, seed</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> hash = key; </span><br><span class="line">    hash = hash ^ seed; <span class="comment">//seed = 505553720 </span></span><br><span class="line">    hash = ~hash + (hash &lt;&lt; <span class="number">15</span>); <span class="comment">// hash = (hash &lt;&lt; 15) - hash - 1; </span></span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">12</span>); </span><br><span class="line">    hash = hash + (hash &lt;&lt; <span class="number">2</span>); </span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">4</span>); </span><br><span class="line">    hash = (hash * <span class="number">2057</span>) | <span class="number">0</span>; <span class="comment">// hash = (hash + (hash &lt;&lt; 3)) + (hash &lt;&lt; 11); </span></span><br><span class="line">    hash = hash ^ (hash &gt;&gt;&gt; <span class="number">16</span>); </span><br><span class="line">    <span class="keyword">return</span> hash &amp; <span class="number">0x3fffffff</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把数字进行各种位运算，得到一个比较随机的数，然后对这个数进行散射散射的目的是得到这个数放在数组的哪个index。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> capacity = <span class="number">64</span>; </span><br><span class="line"><span class="keyword">var</span> indexes = []; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++)&#123; </span><br><span class="line">    indexes.push(ComputeIntegerHash(data[i], seed)  &amp; (capacity - <span class="number">1</span>)); <span class="comment">//去掉高位 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(indexes)</span><br></pre></td></tr></table></figure><p>有20个数，容量capacity从16开始增长，每次扩大一倍，到64的时候，可以保证capacity&gt;size<em>2，因为<em>*只有容量是实际存储大小的两倍时，散射结果重复值才能比较低</em></em>。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668209218/origin-of-ray/f530bc8e-4ea0-4fed-8cd3-c849a672889f_lts2tw.png" alt></p><p>现在要查找key=56是否存在这个Set里面，先把56进行哈希，然后散射，按照存放的时候同样的过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SetHas</span>(<span class="params">key</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> index = ComputeIntegerHash(<span class="number">56</span>, seed) &amp; <span class="keyword">this</span>.capacity; </span><br><span class="line">    <span class="comment">//可能会有重复值，所以需要验证命中的index所存放的key是相等的 </span></span><br><span class="line">    <span class="keyword">return</span> setArray[index] !== <span class="literal">null</span>  &amp;&amp; setArray[index] === key; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是哈希存储结构的一个典型实现，但是<strong>Chrome的V8的Set/Map 并不是这样实现的，略有不同</strong>。 </p><p><strong>哈希算法是一样的，但是散射的时候用来去掉高位的并不是用 capacity，而是用capacity的一半，叫做buckets的数量</strong>，这个去掉高位其实就是通过hash值和容量做一个按位与运算，效果等同于取余。</p><h3 id="插入过程"><a href="#插入过程" class="headerlink" title="插入过程"></a>插入过程</h3><p>假设我们依次插入9，33，68，57</p><p>Set的存储结构分成三部分，第一部分有3个元素，分别表示有效元素个数、被删除的个数、buckets的数量，前两个数相加就表示总的元素个数。</p><p>插入9之后，元素个数加1变成1，初始化的buckets数量为2。</p><p>第二部分对应buckets，buckets[0]表示第1个bucket所存放的原始数据的index，源码里面叫做entry，9在data这个数组里面 的index为0，所以它在bucket的存放值为0，并且bucket的散射值为0，所以bucket[0]=0。</p><p>第三部分是记录key值的空间，9的entry为0，所以它放在了3+buckets.length+entry*2=5的位置，每个key值都有两个元素空 间，第一个存放key值，第二个是keyChain，它的作用下面将提到</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668344952/origin-of-ray/fe04589b-3119-4dab-a323-0d42b44c1576_oecgin.png" alt></p><p>插入33之后</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345195/origin-of-ray/67b65186-fc61-4c38-8ca4-a32ecc812813_ykt8dm.png" alt></p><p>插入68，68的bucket值也为1，和33重复了，因为entry=buckets[1]=1，不为 空，说明之前已经存过了，entry为1指向的数组的位置为 3+buckets.length+entry*2=7，也就是说之前的那个数是放在数组7的位 置，所以68的相邻元素存放值keyChain为7，同时bucket[1]变成68的 entry为2</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345886/origin-of-ray/2cc66895-f27b-4c7a-93bd-6cb29c3764a0_wsksby.png" alt></p><p>插入57</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668345953/origin-of-ray/d4f21b37-df29-497a-b109-f04af2790a75_ib658e.png" alt></p><h3 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h3><p>现在要查找33这个数，通过同样的哈希散射，得到33的bucket=1， bucket[1]=3，3指向的index位置为11，但是11放的是57，不是要找的 33，于是查看相邻的元素为9，非空，可继续查找，位置9存放的是 68，同样不等于33，而相邻的index=10指向位置7，而7存放的就是33 了，通过比较key值相等，所以这个Set里面有33这个数</p><p>这里有亮点需要注意：</p><ul><li><p>这里的数据总共是4个数，但是需要比较的次数比较多，key值就 比较了3次，key值的相邻keyChain值比较了2次，总共是5次，比直接来 个for循环还要多。所以数据量比较小时，使用哈希存储速度反而更 慢，但是当数据量偏大时优势会比较明显</p></li><li><p>还有一个问题就是一旦容量不够，就会触发扩容，会把上述所有的hash计算过程重新来一遍。</p></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>和Set基本一致，不同的地方是，map多了存储value的地方，</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1668346080/origin-of-ray/f342d1e1-b53d-4772-bbc4-d7afee416f53_yq0evb.png" alt></p><p>当然它不是直接存放字符串“hello”，而是存放hello的指针地址， 指向实际存放hello的内存位置。</p><h2 id="JS-Object"><a href="#JS-Object" class="headerlink" title="JS Object"></a>JS Object</h2><p>这个可以参考这篇博客：<a href="https://sunra.top/2021/07/27/javascript-obj-attr-search/">https://sunra.top/2021/07/27/javascript-obj-attr-search/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在阅读《Web高效编程与实践优化》的计算机基础一节，看到他讲了JS中Set和Map的区别，以及Object的实现，算是解决了往常的一点疑惑吧，这里简单总结下：&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>如何理解JS的多线程</title>
    <link href="https://sunra.top/2022/11/06/javascript-mulit-thread/"/>
    <id>https://sunra.top/2022/11/06/javascript-mulit-thread/</id>
    <published>2022-11-06T12:02:58.000Z</published>
    <updated>2022-11-06T13:50:32.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>首先我们回顾下操作系统的知识，即：</p><ul><li>为什么会出现进程和线程的概念，他们的出现是为了解决什么问题</li><li>进程和线程的概念与定义</li><li>线程的调度</li><li>线程的同步与互斥</li><li>死锁问题</li></ul><a id="more"></a><h3 id="进程与线程的由来"><a href="#进程与线程的由来" class="headerlink" title="进程与线程的由来"></a>进程与线程的由来</h3><p>要解释这个问题，要从操作系统的分类和发展历程来讲，我们平时接触比较多的计算机都是基于时间片进行调度的分时系统，但其实操作系统还有其他很多种类型，分时操作系统并不是一开始就有的，同样进程和线程的概念也不是一开始就有的。<br>操作系统的大致发展历程如下，我们简单了解下就好：</p><ul><li>手工操作阶段（此阶段无操作系统）</li><li>批处理操作系统<ul><li>单道批处理系统</li><li>多道批处理系统</li></ul></li><li>分时操作系统</li><li>实时操作系统<ul><li>硬实时操作系统</li><li>软实时操作系统</li></ul></li><li>网络操作系统和分布式操作系统</li></ul><p>上面不同的操作系统的资源调度算法都不尽相同，比如人硬实时系统就不是基于时间片调度的，他是基于优先级的。我们主要关注单道操作系统到多道操作系统的变换。</p><p>对于单道操作系统来讲，没必要出现进程和线程的概念，它就是按次序执行作业，不存在一段时间内多个作业并行的情况。</p><p>当然我们我们也能看出单道操作系统的问题，就是各种计算机资源利用效率很低，比如一个作业在等待I/O的时候，CPU是空闲的。</p><p>为了提高各种资源的利用效率，提出了多道批处理系统，这也是操作系统复杂度的一个很重要的来源：</p><ul><li>因为要并发，就存在程序的切换，切换之前要从备选项中选择一个进行运行，这个选择的过程就是调度，有多种不同的调度算法，比如FCFS，SJF，时间片等等。</li><li>因为并发带来了异步性，各个程序的执行顺序是不确定的，所有可能会对临界资源产生争抢，为了避免这种争抢，我们提出了互斥锁；另一种情况是我们需要某些程序按一定的顺序执行，所以我们提出了同步的概念。</li><li>因为互斥锁的提出，导致可能出现死锁的问题，比如A程序申请了P资源，等待Q资源，而B程序申请了Q资源但是在等待P资源，A和B之间就形成了循环依赖且二者都不愿意放弃到手资源，那么A和B程序之间就形成了死锁。</li></ul><p>为了描述上面的调度，互斥，同步，死锁问题，我们需要引入一个新的概念描述程序执行过程中状态，并且在程序切换时保存当时执行的上下文，这个概念就是进程。</p><p>然后后面我们发现相比于其他资源，CPU资源的调度非常频繁，所以我们单独为CPU调度抽取出一个概念，叫做线程。</p><h3 id="进程与线程的概念"><a href="#进程与线程的概念" class="headerlink" title="进程与线程的概念"></a>进程与线程的概念</h3><p>到现在，我们有这么几个概念：</p><ul><li>作业：可以理解为我们硬盘上的一个个还没执行的程序</li><li>进程：出了CPU之外的资源调度基本单位。当我们选择执行一个程序时，就是为该作业申请内存等资源，然后进程默认会启动一个线程，用于申请CPU资源</li><li>线程：CPU调度的基本单位。同一个进程的线程共享同一套资源，比如同一个内存空间，也就是说同一个进程的线程之间的数据是可以直接修改的</li></ul><p>线程又分为内核级线程（KLT）和用户级线程（ULT），内核级线程意思就是说，操作系统中真的存在多个线程，线程的切换需要用到操作系统的原语进行上下文的切换，寄存器等的保存与装载等等，我们确实切换了线程；而用户级线程的意思则是说，操作系统本身完全没有感知到线程切换，我们是在线程内部自己模拟了寄存器等的切换，二者各有各的好处，后者有时候也被称为协程，它的好处就是切换消耗少，不需要用到操作系统的中断处理来进行上下文切换，缺点就是并不能发挥多核处理器优势，因为不管你有多少个线程，在操作系统看起来都是一个。</p><h3 id="线程的调度算法"><a href="#线程的调度算法" class="headerlink" title="线程的调度算法"></a>线程的调度算法</h3><ul><li>FCFS，先来先服务算法，属于不可剥夺算法，不适用于分时系统和实时系统。表面上对所有作业是公平的，但是如果一个长作业先到了系统，就会是后面的短作业等待很长时间</li><li>SJF，短作业优先算法。对长作业不利，而且可能会导致长作业“饥饿”</li><li>优先级调度算法，按照高优先级作业到达是否中断当前作业分为抢占式和非抢占式，按照优先级是否可以在运行时改变分为静态优先级和动态优先级</li><li>高响应比优先算法。响应比=（等待时间+要求服务时间）/ 要求服务时间</li><li>时间片轮转调度算法。</li><li>多级队列调度算法。针对不同的CPU设置多个队列，每个队列采取不同的调度算法</li><li>多级反馈队列调度算法</li></ul><h3 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h3><p>同步是直接制约关系，比如A就是要比B先执行，而互斥是间接制约关系，比如A和B都要使用唯一的打印机资源，A占用了，B就只能阻塞。<br>临界区实现互斥的基本方法</p><h4 id="软件方法"><a href="#软件方法" class="headerlink" title="软件方法"></a>软件方法</h4><ol><li>单标志法</li><li>双标志法</li><li>双标志后检查法</li><li>Peterson’s Algothrim<h4 id="硬件实现方法"><a href="#硬件实现方法" class="headerlink" title="硬件实现方法"></a>硬件实现方法</h4></li><li>中断屏蔽算法：关中断，因为CPU只有在中断时可以进行进程切换，关中断可以直接阻止一切的进程切换</li><li>硬件指令方法：TestAndSet</li></ol><h4 id="互斥锁（mutex-lock）"><a href="#互斥锁（mutex-lock）" class="headerlink" title="互斥锁（mutex lock）"></a>互斥锁（mutex lock）</h4><p>一个进程在进入临界区时获得锁，在退出临界区时释放锁</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>信号量机制是一种功能较强的机制，可以用来解决互斥与同步问题，只能被两个标准的原语wait和signal访问，也可记录为P操作和V操作，分为两种：</p><ul><li>整型信号量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wait(S) &#123;</span><br><span class="line">    while(S &lt;=0);</span><br><span class="line">    S = S - 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal(S) &#123;</span><br><span class="line">    S = S + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>记录型信号量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wait(semaphore S) &#123;</span><br><span class="line">    S.value--;</span><br><span class="line">    if (S.value &lt; 0) &#123;</span><br><span class="line">        add this process to S.L;</span><br><span class="line">        block(S.L)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal(semaphore S) &#123;</span><br><span class="line">    S.value++;</span><br><span class="line">    if (S.value &lt;= 0) &#123;</span><br><span class="line">        remove a process P from S.L;</span><br><span class="line">        wakeup(P)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四核八线程是什么意思"><a href="#四核八线程是什么意思" class="headerlink" title="四核八线程是什么意思"></a>四核八线程是什么意思</h3><p>我们总是会提到一个计算机是四核八线程，这是个什么概念呢？</p><p>我们刚才说到的，无论是单道还是多道操作系统，它的并发都是基于只有一个CPU核心的基础上的，也就是说它在同一时刻，只能有一个程序在执行，只有一个程序计数器。</p><p>我们要实现真正意义上的多个程序在同一时刻执行，方法就是多几个CPU核心，也就是这里说的四核。</p><p>理论上四个核心就只能有四个线程并行，之所以出现四核八线程，其实还是一个核上模拟了两个核心，让上层操作系统以为它有八个核心而已，实际上还是4个核心。这是计算机虚拟技术的一种实现。</p><h2 id="理解JS的多线程"><a href="#理解JS的多线程" class="headerlink" title="理解JS的多线程"></a>理解JS的多线程</h2><h3 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h3><p>理解了多线程的概念后，我们可以来说JS的多线程Web Workers 了。                </p><p>HTML5引入了Web Workers，让JS支持线程。</p><p>JS的多线程是OS级别的 ，也就是说JS的多线程是真的多线程，也就是上面说的内核级线程 。</p><h3 id="JS没有线程同步的概念"><a href="#JS没有线程同步的概念" class="headerlink" title="JS没有线程同步的概念"></a>JS没有线程同步的概念</h3><p>JS的多线程无法操作DOM，没有window对象，每个线程的数据都 是独立的。主线程传给子线程的数据是通过拷贝复制，同样的子线程 给主线程的数据也是通过拷贝复制，而不是共享同一块内存区域。 </p><p>从这一点来看，JS的多线程并不属于同一个进程，或者说是内部有什么隔离机制</p><p>所以Web Workers基本上出不了什么错。 </p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1667742557/origin-of-ray/d7uwzsgurkb9f4gvvpnu.png" alt></p><p>在主逻辑里面fun1和fun2的调用是连在一起的，它是一个执行单 元，要么还没执行，要么得一口气执行完。执行完之后，再执行 setTimout append到后面的。然后由于已经超过了setInterval定的20ms， 所以又马上执行setInterval的函数。这里可以看出setTimeout的计时是从 逻辑单元执行完了才开始计时，而setInterval是执行到这一行的时候就 开始计时了。 </p><p>单线程里面的特例如异步回调，异步回调是Chrome自己的IO线程 处理的，每发一个请求必须要有一个线程跟着，Chrome限制了同一个 域最多同时只能发6个请求 </p><h3 id="Chrome的多线程模型"><a href="#Chrome的多线程模型" class="headerlink" title="Chrome的多线程模型"></a>Chrome的多线程模型</h3><p>我们从click事件来看一下Chrome的线程模式是怎么样的</p><p>每开一个tab，Chrome就会创建一个进程，进程是线程的容器 ，同一个域名的Tab是同一个进程</p><p>首先用户单击了鼠标，浏览器的UI线程收到之后，把这个消息数 据封装成一个鼠标事件发送给IO线程，IO线程再分配给具体页面的渲 染线程。其中IO线程和UI线程是浏览器的线程，而渲染线程是每个页 面自己的线程。 </p><p>如果在执行一段很耗时的JS代码，渲染线程里的render线程将会被 堵塞，而main线程继续接收IO线程发过来的消息并排队，等待render线 程处理。也就是说当页面卡住的时候，不断地单击鼠标，等页面空闲 了，单击的事件会再继续触发。 </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;首先我们回顾下操作系统的知识，即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么会出现进程和线程的概念，他们的出现是为了解决什么问题&lt;/li&gt;
&lt;li&gt;进程和线程的概念与定义&lt;/li&gt;
&lt;li&gt;线程的调度&lt;/li&gt;
&lt;li&gt;线程的同步与互斥&lt;/li&gt;
&lt;li&gt;死锁问题&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://sunra.top/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Redux 源码解析</title>
    <link href="https://sunra.top/2022/10/28/redux-origin-code/"/>
    <id>https://sunra.top/2022/10/28/redux-origin-code/</id>
    <published>2022-10-28T08:00:20.000Z</published>
    <updated>2022-10-29T23:40:18.845Z</updated>
    
    <content type="html"><![CDATA[<p>Redux是一个web前端的状态管理库，通用与所有前端页面，并不依赖于什么框架，是一个纯js的项目，其原理和源码比较简单，我们先要理解redux源码，再去看redux-toolkit源码，才能明白redux-toolkit的源码为什么要那么写，然后才能结合react源码理解react-redux的源码。这次我们就先来理解redux的源码。</p><a id="more"></a><h2 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h2><p>redux的项目结构很简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── applyMiddleware.ts</span><br><span class="line">├── bindActionCreators.ts</span><br><span class="line">├── combineReducers.ts</span><br><span class="line">├── compose.ts</span><br><span class="line">├── createStore.ts</span><br><span class="line">├── index.ts</span><br><span class="line">├── tree.txt</span><br><span class="line">├── types</span><br><span class="line">│   ├── actions.ts</span><br><span class="line">│   ├── middleware.ts</span><br><span class="line">│   ├── reducers.ts</span><br><span class="line">│   └── store.ts</span><br><span class="line">└── utils</span><br><span class="line">    ├── actionTypes.ts</span><br><span class="line">    ├── formatProdErrorMessage.ts</span><br><span class="line">    ├── isPlainObject.ts</span><br><span class="line">    ├── kindOf.ts</span><br><span class="line">    ├── symbol-observable.ts</span><br><span class="line">    └── warning.ts</span><br></pre></td></tr></table></figure><p>types文件见中都是些ts的接口或者类型定义，utils文件夹中都是些工具类，从文件名也能看出这些工具是做什么的</p><p>入口文件事index.ts，它就是export了其他几个文件的函数，主要代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">'./createStore'</span></span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./combineReducers'</span></span><br><span class="line"><span class="keyword">import</span> bindActionCreators <span class="keyword">from</span> <span class="string">'./bindActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> applyMiddleware <span class="keyword">from</span> <span class="string">'./applyMiddleware'</span></span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators,</span><br><span class="line">  applyMiddleware,</span><br><span class="line">  compose,</span><br><span class="line">  __DO_NOT_USE__ActionTypes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="createStore：创建-Store"><a href="#createStore：创建-Store" class="headerlink" title="createStore：创建 Store"></a>createStore：创建 Store</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">S</span>,</span></span><br><span class="line"><span class="function">  <span class="title">A</span> <span class="title">extends</span> <span class="title">Action</span>,</span></span><br><span class="line"><span class="function">  <span class="title">Ext</span> = </span>&#123;&#125;,</span><br><span class="line">  StateExt = never</span><br><span class="line">&gt;(</span><br><span class="line">  reducer: Reducer&lt;S, A&gt;,</span><br><span class="line">  preloadedState?: PreloadedState&lt;S&gt; | StoreEnhancer&lt;Ext, StateExt&gt;,</span><br><span class="line">  enhancer?: StoreEnhancer&lt;Ext, StateExt&gt;</span><br><span class="line">): Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext</span><br></pre></td></tr></table></figure><p>这个是该函数的声明，参数就是我们平时使用createStore时传入的，reducer，初始化的状态，以及最后一个我们平时不怎么用的enhancer</p><p>函数内部首先进行了一些检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'function'</span>) ||</span><br><span class="line">  (<span class="keyword">typeof</span> enhancer === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">3</span>] === <span class="string">'function'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">    <span class="string">'It looks like you are passing several store enhancers to '</span> +</span><br><span class="line">      <span class="string">'createStore(). This is not supported. Instead, compose them '</span> +</span><br><span class="line">      <span class="string">'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  enhancer = preloadedState <span class="keyword">as</span> StoreEnhancer&lt;Ext, StateExt&gt;</span><br><span class="line">  preloadedState = <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里之前的代码保证，传入的后两个参数不全是 function ，且如果一共只有两个参数，同时第二个参数是function，那么认为第二个参数是enhancer而非初始化状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有enhancer，那么返回 enhancer 之后的 createStore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Expected the enhancer to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">        enhancer</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>'`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> enhancer(createStore)(</span><br><span class="line">    reducer,</span><br><span class="line">    preloadedState <span class="keyword">as</span> PreloadedState&lt;S&gt;</span><br><span class="line">  ) <span class="keyword">as</span> Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">    <span class="string">`Expected the root reducer to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">      reducer</span></span></span><br><span class="line"><span class="string"><span class="subst">    )&#125;</span>'`</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="几个内部变量："><a href="#几个内部变量：" class="headerlink" title="几个内部变量："></a>几个内部变量：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentReducer = reducer</span><br><span class="line"><span class="keyword">let</span> currentState = preloadedState <span class="keyword">as</span> S</span><br><span class="line"><span class="keyword">let</span> currentListeners: <span class="function">(<span class="params">(<span class="params"></span>) =&gt; <span class="built_in">void</span></span>)[] | <span class="params">null</span> = []</span></span><br><span class="line"><span class="function"><span class="params">let</span> <span class="params">nextListeners</span> = <span class="params">currentListeners</span></span></span><br><span class="line"><span class="function"><span class="params">let</span> <span class="params">isDispatching</span> = <span class="params">false</span></span></span><br></pre></td></tr></table></figure><h3 id="内部工具函数"><a href="#内部工具函数" class="headerlink" title="内部工具函数"></a>内部工具函数</h3><h4 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reads the state tree managed by the store.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns The current state tree of your application.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>): <span class="title">S</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class="line">        <span class="string">'The reducer has already received the state as an argument. '</span> +</span><br><span class="line">        <span class="string">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> currentState <span class="keyword">as</span> S</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h4><ul><li>ensureCanMutateNextListeners 函数用于将 currentListeners 浅复制赋值给 nextListeners，这样可以保证依次执行 currentListeners 时不影响为 nextListeners 添加新的监听器</li><li>subscribe 添加新的 listener 到 nextListeners ，并且返回一个闭包函数，用于取消该订阅</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This makes a shallow copy of currentListeners so we can use</span></span><br><span class="line"><span class="comment"> * nextListeners as a temporary list while dispatching.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This prevents any bugs around consumers calling</span></span><br><span class="line"><span class="comment"> * subscribe/unsubscribe in the middle of a dispatch.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">    nextListeners = currentListeners.slice()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a change listener. It will be called any time an action is dispatched,</span></span><br><span class="line"><span class="comment"> * and some part of the state tree may potentially have changed. You may then</span></span><br><span class="line"><span class="comment"> * call `getState()` to read the current state tree inside the callback.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You may call `dispatch()` from a change listener, with the following</span></span><br><span class="line"><span class="comment"> * caveats:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. The subscriptions are snapshotted just before every `dispatch()` call.</span></span><br><span class="line"><span class="comment"> * If you subscribe or unsubscribe while the listeners are being invoked, this</span></span><br><span class="line"><span class="comment"> * will not have any effect on the `dispatch()` that is currently in progress.</span></span><br><span class="line"><span class="comment"> * However, the next `dispatch()` call, whether nested or not, will use a more</span></span><br><span class="line"><span class="comment"> * recent snapshot of the subscription list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. The listener should not expect to see all state changes, as the state</span></span><br><span class="line"><span class="comment"> * might have been updated multiple times during a nested `dispatch()` before</span></span><br><span class="line"><span class="comment"> * the listener is called. It is, however, guaranteed that all subscribers</span></span><br><span class="line"><span class="comment"> * registered before the `dispatch()` started will be called with the latest</span></span><br><span class="line"><span class="comment"> * state by the time it exits.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param listener A callback to be invoked on every dispatch.</span></span><br><span class="line"><span class="comment"> * @returns A function to remove this change listener.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener: () =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Expected the listener to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">        listener</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>'`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class="line">        <span class="string">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class="line">        <span class="string">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class="line">        <span class="string">'See https://redux.js.org/api/store#subscribelistener for more details.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  ensureCanMutateNextListeners()</span><br><span class="line">  nextListeners.push(listener)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class="line">          <span class="string">'See https://redux.js.org/api/store#subscribelistener for more details.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">    nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">    currentListeners = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h4><p>执行currentReducer，参数为 currentState和传入的action，同时遍历currentListeners依次执行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dispatches an action. It is the only way to trigger a state change.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The `reducer` function, used to create the store, will be called with the</span></span><br><span class="line"><span class="comment"> * current state tree and the given `action`. Its return value will</span></span><br><span class="line"><span class="comment"> * be considered the **next** state of the tree, and the change listeners</span></span><br><span class="line"><span class="comment"> * will be notified.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The base implementation only supports plain object actions. If you want to</span></span><br><span class="line"><span class="comment"> * dispatch a Promise, an Observable, a thunk, or something else, you need to</span></span><br><span class="line"><span class="comment"> * wrap your store creating function into the corresponding middleware. For</span></span><br><span class="line"><span class="comment"> * example, see the documentation for the `redux-thunk` package. Even the</span></span><br><span class="line"><span class="comment"> * middleware will eventually dispatch plain object actions using this method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param action A plain object representing “what changed”. It is</span></span><br><span class="line"><span class="comment"> * a good idea to keep actions serializable so you can record and replay user</span></span><br><span class="line"><span class="comment"> * sessions, or use the time travelling `redux-devtools`. An action must have</span></span><br><span class="line"><span class="comment"> * a `type` property which may not be `undefined`. It is a good idea to use</span></span><br><span class="line"><span class="comment"> * string constants for action types.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns For convenience, the same action object you dispatched.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that, if you use a custom middleware, it may wrap `dispatch()` to</span></span><br><span class="line"><span class="comment"> * return something else (for example, a Promise you can await).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action: A</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">    <span class="string">`Actions must be plain objects. Instead, the actual type was: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">      action</span></span></span><br><span class="line"><span class="string"><span class="subst">    )&#125;</span>'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">    <span class="string">'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.'</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  isDispatching = <span class="literal">true</span></span><br><span class="line">  currentState = currentReducer(currentState, action)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  isDispatching = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">  listener()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="replaceReducer"><a href="#replaceReducer" class="headerlink" title="replaceReducer"></a>replaceReducer</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces the reducer currently used by the store to calculate the state.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You might need this if your app implements code splitting and you want to</span></span><br><span class="line"><span class="comment"> * load some of the reducers dynamically. You might also need this if you</span></span><br><span class="line"><span class="comment"> * implement a hot reloading mechanism for Redux.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param nextReducer The reducer for the store to use instead.</span></span><br><span class="line"><span class="comment"> * @returns The same store instance with a new reducer in place.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>&lt;<span class="title">NewState</span>, <span class="title">NewActions</span> <span class="title">extends</span> <span class="title">A</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  nextReducer: Reducer&lt;NewState, NewActions&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Store</span>&lt;<span class="title">ExtendState</span>&lt;<span class="title">NewState</span>, <span class="title">StateExt</span>&gt;, <span class="title">NewActions</span>, <span class="title">StateExt</span>, <span class="title">Ext</span>&gt; &amp; <span class="title">Ext</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Expected the nextReducer to be a function. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">        nextReducer</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> do this more elegantly</span></span><br><span class="line">  ;(currentReducer <span class="keyword">as</span> unknown <span class="keyword">as</span> Reducer&lt;NewState, NewActions&gt;) = nextReducer</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This action has a similar effect to ActionTypes.INIT.</span></span><br><span class="line">  <span class="comment">// Any reducers that existed in both the new and old rootReducer</span></span><br><span class="line">  <span class="comment">// will receive the previous state. This effectively populates</span></span><br><span class="line">  <span class="comment">// the new state tree with any relevant data from the old one.</span></span><br><span class="line">  dispatch(&#123; <span class="keyword">type</span>: ActionTypes.REPLACE &#125; <span class="keyword">as</span> A)</span><br><span class="line">  <span class="comment">// change the type of the store by casting it to the new store</span></span><br><span class="line">  <span class="keyword">return</span> store <span class="keyword">as</span> unknown <span class="keyword">as</span> Store&lt;</span><br><span class="line">    ExtendState&lt;NewState, StateExt&gt;,</span><br><span class="line">    NewActions,</span><br><span class="line">    StateExt,</span><br><span class="line">    Ext</span><br><span class="line">  &gt; &amp;</span><br><span class="line">    Ext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interoperability point for observable/reactive libraries.</span></span><br><span class="line"><span class="comment"> * @returns A minimal observable of state changes.</span></span><br><span class="line"><span class="comment"> * For more information, see the observable proposal:</span></span><br><span class="line"><span class="comment"> * https://github.com/tc39/proposal-observable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> outerSubscribe = subscribe</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The minimal observable subscription method.</span></span><br><span class="line"><span class="comment">     * @param observer Any object that can be used as an observer.</span></span><br><span class="line"><span class="comment">     * The observer object should have a `next` method.</span></span><br><span class="line"><span class="comment">     * @returns An object with an `unsubscribe` method that can</span></span><br><span class="line"><span class="comment">     * be used to unsubscribe the observable from the store, and prevent further</span></span><br><span class="line"><span class="comment">     * emission of values from the observable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    subscribe(observer: unknown) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> observer !== <span class="string">'object'</span> || observer === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">          <span class="string">`Expected the observer to be an object. Instead, received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">            observer</span></span></span><br><span class="line"><span class="string"><span class="subst">          )&#125;</span>'`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">observeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> observerAsObserver = observer <span class="keyword">as</span> Observer&lt;S&gt;</span><br><span class="line">        <span class="keyword">if</span> (observerAsObserver.next) &#123;</span><br><span class="line">          observerAsObserver.next(getState())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      observeState()</span><br><span class="line">      <span class="keyword">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class="line">      <span class="keyword">return</span> &#123; unsubscribe &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [$$observable]() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化并返回结果"><a href="#初始化并返回结果" class="headerlink" title="初始化并返回结果"></a>初始化并返回结果</h3><p>首先自动dispatch一个action：{ type: ActionTypes.INIT }，然后返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When a store is created, an "INIT" action is dispatched so that every</span></span><br><span class="line"><span class="comment">// reducer returns their initial state. This effectively populates</span></span><br><span class="line"><span class="comment">// the initial state tree.</span></span><br><span class="line">dispatch(&#123; <span class="keyword">type</span>: ActionTypes.INIT &#125; <span class="keyword">as</span> A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  dispatch: dispatch <span class="keyword">as</span> Dispatch&lt;A&gt;,</span><br><span class="line">  subscribe,</span><br><span class="line">  getState,</span><br><span class="line">  replaceReducer,</span><br><span class="line">  [$$observable]: observable</span><br><span class="line">&#125; <span class="keyword">as</span> unknown <span class="keyword">as</span> Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext</span><br><span class="line"><span class="keyword">return</span> store</span><br></pre></td></tr></table></figure><p>所以说，确实如文档所说，store中的 state 和 action 就是一个纯对象，只不过这个纯对象有些规范，你可以不遵循这个规范，但是不遵循这个规范就没法正常运转。</p><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><p>这个文件中只有一个方法，也很简单，就是把一串函数变成一个函数A，A其实就是依次执行这一串函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs: <span class="built_in">Function</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// infer the argument type so it is usable in inference down the line</span></span><br><span class="line">    <span class="keyword">return</span> &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(</span><br><span class="line">    (a, b) =&gt;</span><br><span class="line">      (...args: <span class="built_in">any</span>) =&gt;</span><br><span class="line">        a(b(...args))</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h2><p>这个函数内部有两个工具函数，分别是<code>getUnexpectedStateShapeWarningMessage</code> 和 <code>assertReducerShape</code>，看函数名就知道做什么了，我们重点还是关注 <code>combineReducers</code> 函数，该函数大概做了以下几件事：</p><ul><li>根据传入的reducers，获得所有该对象的key，然后遍历每个key，如果key对应的value是个函数，那么就把该key和value塞进 finalReducers对象中</li><li>返回一个函数，该函数内部会遍历finalReducers中的每个key，然后利用 <code>finalReducers[key]</code> 对应的reducer去计算返回最新的 <code>state[key]</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Turns an object whose values are different reducer functions, into a single</span></span><br><span class="line"><span class="comment"> * reducer function. It will call every child reducer, and gather their results</span></span><br><span class="line"><span class="comment"> * into a single state object, whose keys correspond to the keys of the passed</span></span><br><span class="line"><span class="comment"> * reducer functions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @template S Combined state object type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param reducers An object whose values correspond to different reducer</span></span><br><span class="line"><span class="comment"> *   functions that need to be combined into one. One handy way to obtain it</span></span><br><span class="line"><span class="comment"> *   is to use ES6 `import * as reducers` syntax. The reducers may never</span></span><br><span class="line"><span class="comment"> *   return undefined for any action. Instead, they should return their</span></span><br><span class="line"><span class="comment"> *   initial state if the state passed to them was undefined, and the current</span></span><br><span class="line"><span class="comment"> *   state for any unrecognized action.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns A reducer function that invokes every reducer inside the passed</span></span><br><span class="line"><span class="comment"> *   object, and builds a state object with the same shape.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers: ReducersMapObject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="keyword">const</span> finalReducers: ReducersMapObject = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        warning(<span class="string">`No reducer provided for key "<span class="subst">$&#123;key&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      finalReducers[key] = reducers[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is used to make sure we don't warn about the same</span></span><br><span class="line">  <span class="comment">// keys multiple times.</span></span><br><span class="line">  <span class="keyword">let</span> unexpectedKeyCache: &#123; [key: <span class="built_in">string</span>]: <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    unexpectedKeyCache = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> shapeAssertionError: unknown</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    assertReducerShape(finalReducers)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    shapeAssertionError = e</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    state: StateFromReducersMapObject&lt;<span class="keyword">typeof</span> reducers&gt; = &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">    action: AnyAction</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">      <span class="keyword">throw</span> shapeAssertionError</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class="line">        state,</span><br><span class="line">        finalReducers,</span><br><span class="line">        action,</span><br><span class="line">        unexpectedKeyCache</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">        warning(warningMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> nextState: StateFromReducersMapObject&lt;<span class="keyword">typeof</span> reducers&gt; = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> actionType = action &amp;&amp; action.type</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">`When called with an action of type <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">            actionType ? <span class="string">`"<span class="subst">$&#123;<span class="built_in">String</span>(actionType)&#125;</span>"`</span> : <span class="string">'(unknown type)'</span></span></span></span><br><span class="line"><span class="string"><span class="subst">          &#125;</span>, the slice reducer for key "<span class="subst">$&#123;key&#125;</span>" returned undefined. `</span> +</span><br><span class="line">            <span class="string">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class="line">            <span class="string">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      nextState[key] = nextStateForKey</span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">    &#125;</span><br><span class="line">    hasChanged =</span><br><span class="line">      hasChanged || finalReducerKeys.length !== <span class="built_in">Object</span>.keys(state).length</span><br><span class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p>这个函数不是redux核心的逻辑，是用来给使用者提供的工具函数，比如react-redux就是用了这个函数，具体怎么使用的我们后面再讲，先大概理解它是做什么的</p><p>这个函数的两个参数，分别为 actionCreators 和dispatch函数，作用就是把 actionCreators 中每个key对应的 actionCreator 转换为调用 dispatch 函数，然后再返回</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>&lt;<span class="title">A</span> <span class="title">extends</span> <span class="title">AnyAction</span> = <span class="title">AnyAction</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  actionCreator: ActionCreator&lt;A&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  dispatch: Dispatch</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">this</span>: <span class="built_in">any</span>, ...args: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, args))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  actionCreators: ActionCreator&lt;<span class="built_in">any</span>&gt; | ActionCreatorsMapObject,</span></span></span><br><span class="line"><span class="function"><span class="params">  dispatch: Dispatch</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, but instead received: '<span class="subst">$&#123;kindOf(</span></span></span><br><span class="line"><span class="string"><span class="subst">        actionCreators</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>'. `</span> +</span><br><span class="line">        <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> boundActionCreators: ActionCreatorsMapObject = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> actionCreators) &#123;</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> boundActionCreators</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p>这个函数算是函数柯里化的一个应用，传入了 middlewares，是一个函数的数组，然后返回一个新的函数，新的函数作为一个闭包保存了 middlewares，新函数执行的时候，会首先调用新函数的参数：createStore来创建store，虽然加强 dispatch 函数功能，将所有的middleware函数在执行真正的dispatch之前执行，也就是，<code>const chain = middlewares.map(middleware =&gt; middleware(middlewareAPI)); dispatch = compose&lt;typeof dispatch&gt;(...chain)(store.dispatch)</code>这两行函数</p><p>我们也可以看到，applyMidleware函数返回的其实就是 StoreEnhancer， 也就是我们createStore函数的第三个参数，applyMiddleware是redux提供的唯一一个enhancer。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  ...middlewares: Middleware[]</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">StoreEnhancer</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore: StoreEnhancerStoreCreator</span>) =&gt;</span></span><br><span class="line">    &lt;S, A <span class="keyword">extends</span> AnyAction&gt;(</span><br><span class="line">      reducer: Reducer&lt;S, A&gt;,</span><br><span class="line">      preloadedState?: PreloadedState&lt;S&gt;</span><br><span class="line">    ) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> store = createStore(reducer, preloadedState)</span><br><span class="line">      <span class="keyword">let</span> dispatch: Dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">'Dispatching while constructing your middleware is not allowed. '</span> +</span><br><span class="line">            <span class="string">'Other middleware would not be applied to this dispatch.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> middlewareAPI: MiddlewareAPI = &#123;</span><br><span class="line">        getState: store.getState,</span><br><span class="line">        dispatch: <span class="function">(<span class="params">action, ...args</span>) =&gt;</span> dispatch(action, ...args)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">      dispatch = compose&lt;<span class="keyword">typeof</span> dispatch&gt;(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...store,</span><br><span class="line">        dispatch</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redux是一个web前端的状态管理库，通用与所有前端页面，并不依赖于什么框架，是一个纯js的项目，其原理和源码比较简单，我们先要理解redux源码，再去看redux-toolkit源码，才能明白redux-toolkit的源码为什么要那么写，然后才能结合react源码理解react-redux的源码。这次我们就先来理解redux的源码。&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://sunra.top/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>单调队列</title>
    <link href="https://sunra.top/2022/10/26/leetcode-862/"/>
    <id>https://sunra.top/2022/10/26/leetcode-862/</id>
    <published>2022-10-26T03:19:51.000Z</published>
    <updated>2022-10-29T09:33:45.787Z</updated>
    
    <content type="html"><![CDATA[<p>今天leetcode的每日一题是<a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/" rel="external nofollow noopener noreferrer" target="_blank">和至少为 K 的最短子数组</a>,这道题需要使用前缀和加单调队列。</p><a id="more"></a><p>我当时第一反应是使用滑动窗口算法，但是这道题这样的写法是有问题，我们先看一下我一开始的做法，以及这种做法为什么不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestSubarray = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> minLength = nums.length + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(right &lt; nums.length) &#123;</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        right++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= k) &#123;</span><br><span class="line">            minLength = <span class="built_in">Math</span>.min(minLength, right - left);</span><br><span class="line">            sum -= nums[left++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minLength === (nums.length + <span class="number">1</span>) ? <span class="number">-1</span> : minLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当输入为<code>[84,-37,32,40,95] 167</code>时，正确答案是3，而滑动窗口做饭的结果是5，因为当right为5的时候，left滑动到1的位置，也就是-37的时候，内部循环就跳出了，但是其实left到2的时候也是符合大于等于167这个条件的</p><p>既然我们的滑动窗口做法的问题出在，left收缩的时候可能会在没有收缩到最短的情况下就中断了，那么我们换个思路，在遍历每个right的时候，让left从right处向左扩张，只要遇到第一个符合条件的就是在right确定的时候，符合条件的最短的数组，同时为了节省计算，我们采用前缀和的方式，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestSubarray = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> preSum = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length + <span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; preSum.length; i++) &#123;</span><br><span class="line">        preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> minLength = nums.length + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(right &lt; preSum.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = right - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preSum[right] - preSum[left] &gt;= k) &#123;</span><br><span class="line">                minLength = <span class="built_in">Math</span>.min(minLength, right - left);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left--;</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minLength === preSum.length ? <span class="number">-1</span> : minLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不出意外，超时了，那么我们还能怎么优化这个算法呢？</p><p>我们可以遍历preSum，用某个合适的数据结构维护遍历过的presum[i],并及时移除无用的presum[i]</p><ul><li>遍历到preSum[i]时，如果发现preSum[i] - preSum[j] &gt;= k，那么i右侧的的数字无论是什么，都不可能以j为左端点得到一个更短的复合题意的数组，所以将j弹出数据结构</li><li>如果preSum[i] &lt;= preSum[j],那么如果在i右侧存在某个数x = preSum[m], 满足 x - preSum[j] &gt;= k, 则必然有 x - preSum[i] &gt;= k, 所以将j弹出数据结构</li></ul><p>由于优化二保证了数据结构中的 会形成一个递增的序列，因此优化一移除的是序列最左侧的若干元素，优化二移除的是序列最右侧的若干元素。我们需要一个数据结构，它支持移除最左端的元素和最右端的元素，以及在最右端添加元素，故选用双端队列。同时该队列保持递增，所以是个单调队列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestSubarray = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> preSum = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length + <span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; preSum.length; i++) &#123;</span><br><span class="line">        preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> queue = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = preSum.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; preSum.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = preSum[i];</span><br><span class="line">        <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span> &amp;&amp; cur - preSum[queue[<span class="number">0</span>]] &gt;= k) &#123;</span><br><span class="line">            result = <span class="built_in">Math</span>.min(result, i - queue[<span class="number">0</span>]);</span><br><span class="line">            queue.shift();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span> &amp;&amp; cur &lt;= preSum[queue[queue.length - <span class="number">1</span>]]) &#123;</span><br><span class="line">            queue.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        queue.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result === preSum.length ? <span class="number">-1</span> : result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天leetcode的每日一题是&lt;a href=&quot;https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;和至少为 K 的最短子数组&lt;/a&gt;,这道题需要使用前缀和加单调队列。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
</feed>
