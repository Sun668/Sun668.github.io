<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>一起探索互联网的秘密</subtitle>
  <link href="https://sunra.top/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/"/>
  <updated>2023-05-16T05:31:16.914Z</updated>
  <id>https://sunra.top/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技术人的管理方法论（三）—— 管理规划</title>
    <link href="https://sunra.top/2023/05/15/management-methods-of-technical-people-3/"/>
    <id>https://sunra.top/2023/05/15/management-methods-of-technical-people-3/</id>
    <published>2023-05-15T08:33:52.000Z</published>
    <updated>2023-05-16T05:31:16.914Z</updated>
    
    <content type="html"><![CDATA[<p>说起管理规划，大部分管理者并不陌生，因为管理者每半年或者每季度就需要做一次规划。有的公司叫制定KPI，有的公司叫梳理团队OKR，还有的公司叫季度规划或年度规划，总之就是要和上级约定，接下来我们要做什么，以及如何评估做的好不好，对管理者来说，这是和上级对齐的最重要的约定。</p><p>准确的说，完成团队KPI和OKR的设定，只是管理规划的一部分，因为这个只体现了上级对团队的期待，并不能完全涵盖你作为团队负责人对于管理工作的全部规划</p><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>基本含义</p><p>在管理者头脑中，构建自己的管理理想</p></li><li><p>呈现形式</p><p>管理者和上级达成的工作协议，实现良好的上下级协同</p></li><li><p>核心内容</p><p>管理规划要求管理者回答清楚一个这样的问题：“这个团队你打算怎么带”</p></li></ul><ul><li><p>回答上级</p><p>通常的角度是从投入和产出两个角度回答</p></li><li><p>回答自己</p><ul><li><p>职能</p><p>上级设立这个团队的目的是什么</p></li><li><p>目标</p><p>上级对这个团队的产出有什么期待</p></li><li><p>团队</p><p>上级对这个团队的发展有什么期待</p></li><li><p>路径</p><p>需要向上级申请哪些资源</p></li></ul></li></ul><h3 id="要素1-职能"><a href="#要素1-职能" class="headerlink" title="要素1:职能"></a>要素1:职能</h3><p>所谓的团队职能，就是回答“团队是干什么的”这个问题<br>从团队职责的角度来说，需要的语言越多，说明职责越不清晰</p><ul><li><p>帮助理清团队职责的三个问题</p><p>这三个问题首先需要管理者回答清楚，其次需要管理者用简洁的语言回答清楚，最后需要团队的每一个成员都清楚</p></li></ul><ul><li>公司为什么要设置这个团队，对这个团队的期望是什么</li><li>这个团队如果要持续存在下去，其独特的价值是什么</li><li>用什么来衡量团队价值的高低</li></ul><ul><li><p>回答清楚三个问题的作用</p><ul><li><p>提升团队凝聚力</p><p>只有大家都清楚自己团队是做什么的，才能明白为什么而凝聚在一起</p></li><li><p>有效激励员工</p><p>只有大家都清楚了工作的意义和价值，才能让大家工作更有成就感</p></li><li><p>提升员工主动性</p><p>如果员工不清楚团队的职责和工作范畴，不清楚什么事好坏对错，除了等和靠，他们没有其他选择</p></li></ul></li><li><p>团队职能的层次</p><ul><li><p>基本职责</p><p>团队职能的下限。至少要把工作完成，才能体现团队的基本价值。一般来说，团队的职能是上级给定的，如果心里对此不清楚，要先和上级搞清楚对团队的基本要求和核心职能</p></li><li><p>升华的使命</p><p>团队的职能上限</p></li></ul></li><li><p>团队职能设定的步骤</p><ul><li><p>第一步：收集信息</p><ul><li><p>向上沟通</p><p>听听上级对团队的期待和要求，以及希望用什么纬度来衡量自己做得好还是不好</p></li></ul></li></ul></li></ul><pre><code>- 向下沟通  探讨大家对团队的业务看法和理解，以及对未来发展的期待- 左看右看  看职能定位的边界在哪里，最好和兄弟团队的职能是无缝对接的，尤其不要覆盖兄弟团队的职责。当一个公司在高速发展的时候，可以做的事情有很多，没必要抢地盘。当然如果公司陷入迟滞，在具体看。- 自己的理解  自己对业务的理解，对领域的理解，对团队的期待，对自己的期待</code></pre><ul><li><p>第二步：提炼和升华</p><ul><li><p>职责的提炼</p><p>基于收集的信息，用易于理解的语言，对职责进行简短化提炼，并尽可能长期稳定下来，如负责服务端的开发</p></li><li><p>使命的升华</p><p>基于基本职责，寻找团队对于部门和公司的独特价值，要注意使用基于“结果”的描述，而非基于过程的描述</p></li></ul></li></ul><h3 id="要素2-目标"><a href="#要素2-目标" class="headerlink" title="要素2:目标"></a>要素2:目标</h3><p>如果说职能的界定明确了团队的价值，那么目标是要回答“通过什么来体现团队价值”</p><ul><li><p>目标设定的意义</p><ul><li>期待：最基本最核心的，包含自己和上级的诉求</li><li>有效的资源配置：明确的目标牵引着资源的调配</li><li>执行力：当目标不够清晰或者频繁变化的时候，就会表现出执行力不够</li><li>凝聚力：明确的团队目标和愿景，就是提高团队凝聚力的重要手段之一</li><li>激励：在提升员工自驱力的要素中，要让员工在工作中产生沉浸其中的状态，就要有明确的目标</li></ul></li><li><p>目标设定的原则</p><ul><li><p>SMART原则</p><ul><li>Specific：明确的</li><li>Measurable：可衡量的</li><li>Attainable：可达的</li><li>Relevant：相关的</li><li>Time-bound：有时限的</li></ul></li><li><p>尽可能少，过多的目标违背了设置目标的初衷：资源配置</p></li></ul></li><li><p>目标设定的维度</p><ul><li><p>业务目标</p><ul><li>必选的，接下来团队的产出要达到什么标准，比如KPI和OKR等就是为了这个目标，属于外在目标</li></ul></li><li><p>团建目标</p><ul><li>希望接下来团队的规模和梯度得到怎样的成长和发展</li></ul></li><li><p>专业目标</p><ul><li>加下来团队从专业能力的角度达到什么目标，比如稳定性达到什么级别等</li></ul></li></ul></li><li><p>目标设定的形式</p><p>KPI暗含这O，没有O就定不出KPI<br>OKR暗含KPI，OKR里的KR就包含可量化的结果KPI和不可量化的结果KRA</p><p>OKR不是对KPI的否定，两者都可以作为目标管理的手段使用<br>OKR更强调目标和手段的一致，KPI则更关注对结果考核，两者各有侧重</p></li></ul><ul><li><p>描述形式</p><ul><li><p>可以量化的指标</p><p>大家常说的的KPI，即到某时间点，什么指标达到什么数字</p></li><li><p>不可量化的目标</p><p>用关键结果来衡量。比如我们常说的KRA或者OKR。描述形式大致是：到某时间点，完成什么工作，该工作实现了哪些功能或达到了哪些效果</p></li></ul></li><li><p>对比</p><p>OKR更适合开放性强，追求创造的组织。而KPI更适用于规则成熟，追求之行的组织</p></li></ul><pre><code>- KPI的基本逻辑  无论如何确保KPI的完成，追求的是结果达成的确定性。这和工业时代强调追求业绩的确定性是相匹配的。而工业时代因为操作规程都有明确的要求，所以业绩达成是可控的。在这种情境下，KPI更为合适- OKR的基本逻辑  对O有帮助的事情都可以做，注重的是目标达成的可能性。这与知识经济时代追求创造性是相匹配的。在种情境下，OKR更为合适</code></pre><ul><li><p>目标设定可能遇到的挑战</p><ul><li><p>基于现有资源做目标，而不是基于远方的目标往前推</p><p>常见说法为：我们团队只能做到这个程度了，这个项目能完成就不错了。更合理的做法是：从上级的角度考虑，你的团队需要保证哪几项重要的结果，然后看看如何调整</p><p>解决方法为：以终为始的出发点</p></li><li><p>目标不明确</p><p>过程化的描述：在十月底完成架构改造。<br>这种描述值强调了做什么，没有交代完成之后的效果</p><p>解决方式为：结果导向的描述</p></li></ul></li></ul><ul><li><p>目标设定好之后，不向下传达</p><p>如果不向下传达，团队成员对于整个团队的方向感不清晰，于是我们前面提到的目标带来的效果就无法体现</p></li></ul><ul><li><p>苦恼于目标的频繁调整</p><p>业务目标经常变换的时候，就需要为团队设置技术目标，也叫做专业目标或者内部目标</p><p>设立的步骤有两步：</p><ol><li>选择要提升的关键维度，主要来源有，最能体现团队核心技术的技术维度，重大的技术攻坚方向或者技术债务偿还，新的技术储备等。</li><li>设定目标。可以是量化的KPI，也可以非量化的KRA，就像每个人有自己的价值观一样，每个团队都有自己最核心的评价维度，这是由团队职能决定的，如，服务端团队的稳定性和性能，数据团队的准确性和安全性，功能团队的高效和质量</li></ol></li></ul><h3 id="要素3-团队"><a href="#要素3-团队" class="headerlink" title="要素3:团队"></a>要素3:团队</h3><ul><li><p>角度</p><ul><li><p>从团建目标的视角来看</p><p>所谓团建目标，就是希望把团队发展成什么样子</p></li></ul></li></ul><pre><code>- 团队的规模- 团队的分工- 团队的梯度</code></pre><ul><li><p>从资源视角</p><p>从资源视角来看团队，是一个成熟管理者的标志之一。<br>既然站在公司的角度，每个团队都是一笔资源和成本，那么作为管理者在盘点自己当前人力和预算人力的时候，都要有成本意识</p></li></ul><pre><code>- 如何合理推算成本  - 对业务理解    通过对业务的理解，以及你希望达成的目标。需要投入的人力和目标是息息相关的，和手段的选择也是息息相关的 ，你的各项决策都能影响资源的估算  - 参照行业资源配比情况</code></pre><ul><li><p>人才培养视角</p><p>到下一个节点，你需要重点培养哪些人，给他们什么样的平台和空间，以及你有能力提供给他们什么样的指导和支持，期待他们能够胜任什么角色。</p></li></ul><pre><code>- 团队消化能力  一个团队能够良性吸纳的新人是有限的，我们把这个限度成为“团队消化能力”，如果新人引入过快，超过了这个限度，就会冲淡团队状态，和新组建一个团队差别不大</code></pre><ul><li>团队规划的呈现</li></ul><h3 id="要素4-路径"><a href="#要素4-路径" class="headerlink" title="要素4:路径"></a>要素4:路径</h3><ul><li><p>主要回答两个问题</p><ul><li>有几条路可以走</li><li>分别要做什么准备</li></ul></li><li><p>上级都是对资源敏感的</p><p>级别越高，对资源越敏感，凡事都讲究投入产出比。向上级汇报时，这两个问题都是必不可少的，第一个问题，可以回答我们达成目标的手段是否合理。第二个问题，可以回答我们申请的资源是否合理</p></li><li><p>增加人力时要考虑的三个方向</p><ul><li><p>资源类型的丰富性</p><ul><li><p>人</p></li><li><p>财</p></li><li><p>物</p></li><li><p>时间</p></li><li><p>信息</p><p>如果工作需要特殊的数据和信息，需要提前和上级沟通</p></li><li><p>权限</p></li></ul></li><li><p>手段选择的多样性</p></li><li><p>人才招聘的必要性</p></li></ul></li><li><p>结果评估三要素</p><ul><li>进度</li><li>质量</li><li>效果</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;说起管理规划，大部分管理者并不陌生，因为管理者每半年或者每季度就需要做一次规划。有的公司叫制定KPI，有的公司叫梳理团队OKR，还有的公司叫季度规划或年度规划，总之就是要和上级约定，接下来我们要做什么，以及如何评估做的好不好，对管理者来说，这是和上级对齐的最重要的约定。&lt;/p&gt;
&lt;p&gt;准确的说，完成团队KPI和OKR的设定，只是管理规划的一部分，因为这个只体现了上级对团队的期待，并不能完全涵盖你作为团队负责人对于管理工作的全部规划&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（二）—— 角色认知</title>
    <link href="https://sunra.top/2023/05/02/management-methods-of-techical-people-2/"/>
    <id>https://sunra.top/2023/05/02/management-methods-of-techical-people-2/</id>
    <published>2023-05-02T04:03:50.000Z</published>
    <updated>2023-05-16T05:31:16.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="角色认知"><a href="#角色认知" class="headerlink" title="角色认知"></a>角色认知</h2><p>无论是否意识到，每一个行为背后都隐含着你对自己身份的认定</p><p>新经理的焦点在能力层，希望掌握的是管理者做好管理的能力，从而做出有效的行为来和环境进行良好的互动，也就是术的层次</p><p>新经理的上级关注的焦点是在“身份”层，他们希望新经理在理解管理者这个角色的前提下，形成符合管理者角色的信念和价值观，然后再去培养对应的能力。</p><a id="more"></a><h3 id="角色的力量：屁股决定脑袋"><a href="#角色的力量：屁股决定脑袋" class="headerlink" title="角色的力量：屁股决定脑袋"></a>角色的力量：屁股决定脑袋</h3><p>如果新经理总是期待上级主动帮助他们“搞定执行”，说明他们的角色认知还停留在一线执行者的角色上<br>很多新经理站在一线执行者角色上发言时，往往会聚焦于对下做工作，即安抚一线执行者，和他们一起搞定，很少会对上做工作，即使有提到，也大多是理解上级的需求，默认上级的手段和意图都是匹配的，是很多新经理的思维误区。即，把上级也当作客户，客户想要的有时候他表达出来的不一样。</p><p>所以这里有个问题，基于自己的角色做出决定是否是正确的，还是说应该兼顾上级角色所做的决定，如果应该兼顾，兼顾到什么程度，以哪个角色为主？</p><ul><li><p>一线执行者</p><p>一线执行者这个角色最重要的要求就是搞定执行，按照要求交付出项目结果，所以该角色的所有反应和行为都围绕着能否确定地交付出成果，追求的是事物的确定性</p></li><li><p>部门总负责人</p><p>他思考的问题是，要达成什么目标，这个目标会给部门带来什么收益，追求的是事情的“可能性”</p></li><li><p>中间的管理者</p><p>如何利用下级的确定性交付来实现上级可能性的意图，即如何用下级最小的成本来获得上级最大的收益。<br>需要不断评估，追求的事情的性价比。</p></li></ul><h3 id="角色发生了什么变化"><a href="#角色发生了什么变化" class="headerlink" title="角色发生了什么变化"></a>角色发生了什么变化</h3><ul><li><p>工作职责</p><p>做工程师时，完成好上级安排的工作就万事大吉，至少是无咎的<br>而作为一个管理者，要做的是带领整个团队往前走，上级只是帮助设定一个目标，剩下做什么，怎么做都是自己要考虑的问题，所有对实现目标有帮助的工作都是份内的</p></li><li><p>对谁负责</p><p>作为以为工程师，主要是对自己和自己的工作负责</p><p>作为管理者，要充分认识到，你的团队是上级和公司给你的资源，你需要对上级负责，还要关心团队成员的发展和成长，对下级负责。</p></li><li><p>关注什么</p><p>工程师是过程导向的，因为他们需要一步一步把工作执行到位。</p><p>管理者是目标和结果导向的，需要时时关心目标和前进的方向。</p></li><li><p>能力要求</p><p>工程师属于个人贡献者，是靠个人专业能力来产生业绩的，工作内容以发挥专业能力为主，相对比较专一<br>管理者属于团队贡献者，要做成一线工作，除了技术判断力，还需要目标管理能力，团队规划能力，项目管理能力，沟通协作能力，团队建设能力等。</p></li><li><p>任务来源</p><p>工程师工作主要来源于上级安排</p><p>管理者工作内容部分来自上级工作的拆解和安排，但更多的是靠自己筹划，然后和上级去沟通确认</p></li><li><p>实施手段</p><p>工程师大部分工作亲力亲为</p><p>管理者的工作清单涵盖整体团队的工作，靠自己一个人是无论如何都做不完的，主要依靠团队</p></li></ul><ul><li><p>合作维度</p><p>工程师以平级合作为主</p><p>管理者需要和上级合作规划整个团队的目标，和下级合作做好落地执行，和平级管理者合作完成联合项目，有时候还要和平级的上下级一起去协调资源和进度</p></li><li><p>和团队成员的关系</p><p>管理者和团队中每个成员都是合作的关系，大家的绩效已经已经不在一个维度进行考核了</p></li><li><p>思维方式</p><p>对工程师来说，大部分工作内容和工作要求都是执行，更重要的是关注风险和成本，希望通过对风险的排除和成本的掌控，来保证工作交付的确定性，形成突出的“确定性思维”</p><p>对管理者来说，更关注一件事能带来的可能性收益，并以此来判断是否值得投入资源去做，称之为“可能性思维”</p></li><li><p>技术视角</p><p>对于工程师来说，技术是用来做事情的</p><p>对于管理者来说，技术是达成目标的手段之一</p></li></ul><h3 id="管理者常见误区"><a href="#管理者常见误区" class="headerlink" title="管理者常见误区"></a>管理者常见误区</h3><ul><li><p>过程导向，被动执行</p><ul><li><p>表现</p><ul><li>不主动找活干</li><li>指望上级替自己做决定</li><li>充当传话筒</li><li>过于关注苦劳和付出</li></ul></li><li><p>后果</p><ul><li>团队方向感缺失</li><li>团队做不出有效的业绩</li><li>无法带领一个团队</li></ul></li></ul></li><li><p>大包大揽</p><ul><li><p>表现</p><ul><li>包工作</li><li>包责任</li><li>包功劳</li></ul></li><li><p>后果</p><ul><li><p>梯队问题</p><p>团队梯队迟迟培养不起来，因为梯队的培养需要授权，需要让高能力人才有发挥的空间并承担相应的责任</p></li><li><p>激励问题</p><p>管理者冲锋在前，团队成员感受不到责任和成就，积极性受挫</p></li><li><p>个人发展受限</p><p>时间被占用太多，无法做更大的业务</p></li></ul></li></ul></li><li><p>带头大哥/当家保姆</p><ul><li><p>表现</p><ul><li>不会让兄弟吃亏</li><li>担心员工不高兴而离职</li><li>为技术强的下级打下手</li></ul></li><li><p>后果</p><ul><li><p>不职业的管理文化</p><p>要记住，团队是公司的资源，不是个人的，凡事当带头大哥很难“职业”</p></li><li><p>团队没有舵手</p></li></ul></li></ul></li><li><p>思维模式单一</p><ul><li><p>表现</p><ul><li>人手不够，要做就得招人</li><li>让团队加班就得发加班费</li><li>觉得自己不适合当管理</li><li>某个Bug没修就绝对不能发布</li></ul></li><li><p>后果</p><ul><li>容易被某个问题卡住</li><li>难堪重任，创造性解决问题的能力不强</li><li>认知受限，被单一思维惯性支配，考虑问题维度有限</li></ul></li></ul></li><li><p>固守边界</p><ul><li><p>表现</p><p>角色和责任的边界划分，是为了分工和合作，但因为很多大型项目有赖于多个团队一起合作，所以有需要有人主动站出来，去承担边界模糊的那部分职责。<br>作为一个管理者，需要以全剧目标为己任，才能得到公司要的业绩成果，同时给自己的团队成员一个交代</p></li><li><p>后果</p><ul><li>项目推进不畅</li><li>自我设限</li><li>个人影响力无法扩展</li></ul></li></ul></li><li><p>患得患失，把技术和管理对立</p><ul><li><p>表现</p><ul><li>不写代码心虚</li><li>离技术越来越远，担心个人发展</li><li>做管理最大的挑战是要舍弃技术，很难</li><li>管理是个矛盾的事，自己技术越来越差，却要带领整个团队</li></ul></li><li><p>后果</p><ul><li>成长缓慢，犹豫反复</li><li>对技术看法狭隘，影响技术判断力提升</li><li>误判，错失一个好的发展平台</li></ul></li></ul></li></ul><h3 id="如何避免陷入误区"><a href="#如何避免陷入误区" class="headerlink" title="如何避免陷入误区"></a>如何避免陷入误区</h3><p>这些问题都是因为没有角色认知导致的，需要慢慢做到对角色的zhuan bi a</p><ul><li><p>认知</p><p>认识到哪些是合适的，哪些是不合适的，先认识到才能避开</p></li><li><p>觉察</p><p>建立预警机制，当某些情形发生时，我们能觉察到这是一个坑</p></li></ul><ul><li>写觉察日记</li><li>物件提醒</li><li>请人帮忙，请别人或者上级定期反馈</li></ul><ul><li>改进</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;角色认知&quot;&gt;&lt;a href=&quot;#角色认知&quot; class=&quot;headerlink&quot; title=&quot;角色认知&quot;&gt;&lt;/a&gt;角色认知&lt;/h2&gt;&lt;p&gt;无论是否意识到，每一个行为背后都隐含着你对自己身份的认定&lt;/p&gt;
&lt;p&gt;新经理的焦点在能力层，希望掌握的是管理者做好管理的能力，从而做出有效的行为来和环境进行良好的互动，也就是术的层次&lt;/p&gt;
&lt;p&gt;新经理的上级关注的焦点是在“身份”层，他们希望新经理在理解管理者这个角色的前提下，形成符合管理者角色的信念和价值观，然后再去培养对应的能力。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（三）：Shading</title>
    <link href="https://sunra.top/2023/04/29/games101-shading/"/>
    <id>https://sunra.top/2023/04/29/games101-shading/</id>
    <published>2023-04-29T13:48:26.000Z</published>
    <updated>2023-05-16T05:31:16.910Z</updated>
    
    <content type="html"><![CDATA[<p>目前我们已经介绍了图形学中的以下几个步骤:</p><ul><li>前三个图表示的是MVP矩阵将模型上每个点的坐标转换到屏幕空间的过程</li><li>最后一个图表示的是，将转换后的屏幕空间中的点连接成的三角面片进行光栅化的过程，即判断每个三角面片会以影响哪些像素点</li></ul><a id="more"></a><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429090607759_gjxtzl.png" alt="image-20230429090607759"></p><p>但是到目前为止，我们只是得到了每个点在屏幕空间的坐标以及它会影响到哪些像素点，但是具体影响是什么，我们还没有得到。</p><p>接下来我们说的shading的过程讲的就是如何计算这些点对像素点的影响是什么。</p><p>shading的英文翻译为：The darkening or coloring of an illustration or diagram with parallel lines or a block of color，也就是我们平时所说的阴影</p><p>但是在计算机图形学里，它指的是计算这些点对像素点的影响的过程，即这些点的颜色等。</p><p>这里我们思考一个问题，我们是如何看到日常生活中的物体的：物理的光学部分我们都了解过这个问题，<strong>我们之所以能看到一个物体，是因为物体反射出来的光进入到了我们的眼睛</strong>，反射光的颜色和角度会影响我们对这个物体的观察</p><p>所以我们在图形学中也是利用这个理论，我们shading的过程就是计算每个点的反射光的角度和颜色等。</p><p>那么我们如何利用这个理论计算着物理光照的过程呢？</p><p>首先我们需要对光照模型进行建模，也就是一个物体的光照的结果是由什么组成的。</p><p>这个建模也分为几个部分：</p><ul><li>一个点会受到几种不同的光照影响</li><li>每种不同的光照遵循什么样的计算方式，如每种光照的颜色，角度，强度等等</li><li>不同的光照在某个点上的效果是如何叠加的</li><li>我们得到了不同的点的光照效果，如何计算出三角面中每个像素点效果，是直接三角面内的每个像素点的颜色就是三个点直接简单求平均还是怎样？</li><li>最后就是，每个点计算时的输入是什么？比如每个点的颜色，法向量是多少之类的</li></ul><p>这里我们以一个比较简单的布林-冯模型来介绍，其他的模型可能比这个复杂，但是只是具体的算法可能不同，但是步骤还是这些步骤</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429092234337_zghzrc.png" alt="image-20230429092234337"></p><h2 id="一个点上有几种不同的光"><a href="#一个点上有几种不同的光" class="headerlink" title="一个点上有几种不同的光"></a>一个点上有几种不同的光</h2><p>在这个模型中，我们将一个物体的反射光分为三个部分：</p><ul><li>镜面高光（Specular highlight）：出射角比较固定的反射光</li><li>漫反射（Diffuse reflection）：向各个方向反射的光</li><li>环境光（Ambient lighting）：也就是说，假设环境中没有任何光源，也不是黑的，总是有点光</li></ul><blockquote><p>注意，如果是过去使用过Unity的人，可能会接触几个概念，比如直接光和间接光，这个概念和这里的镜面反射，漫反射没关系。同时Unity中也有个概念叫做自发光，这个概念和环境光也不是一回事。</p></blockquote><h2 id="如何计算一个点上的光照效果"><a href="#如何计算一个点上的光照效果" class="headerlink" title="如何计算一个点上的光照效果"></a>如何计算一个点上的光照效果</h2><p>那么我么如何计算模型上某个点的光照效果呢？</p><p>首先是在计算一个点的光照效果的时候，我们有哪些输入：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429094006170_c4opr6.png" alt="image-20230429094006170"></p><p><strong>注意，上面的v向量并不是出射光的方向，而是反射点和摄像机之间的连线的方向</strong></p><p>那么有了这些输入之后，我们要怎样计算某种光在这点的光照效果呢？</p><h3 id="漫反射光照"><a href="#漫反射光照" class="headerlink" title="漫反射光照"></a>漫反射光照</h3><p>所谓漫反射就是向各个角度反射的光，反射角度我们就得到了</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429100008919_jk7hhj.png" alt="image-20230429100008919"></p><p>那么反射光的强度呢？也就是这个点的明暗又是怎么决定的呢？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429100210149_jdpkeg.png" alt="image-20230429100210149"></p><p>我们采取的模型是假设光照是一系列均匀密度的光线的集合，当你的平面不是和光线垂直的时候，就会有一部分光没有被反射，我们通过法线方向和入射光线的方向之间的夹角余弦来计算反射光在反射点损失了多少强度。</p><p>还有一个问题就是，随着距离的拉远，光照的能量也会逐渐衰减，我们也简单采用如下模型来计算，传播过程中的能量衰减</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775821/origin-of-ray/image-20230429100510404_gtijoi.png" alt="image-20230429100510404"></p><p>再加上这个点颜色值，我们就得到了这个点光照效果（这个颜色是怎么来的我们后面再说）</p><p><strong>下面公式中的$K_d$是漫反射系数，可以不止是这个点的颜色</strong></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429100559466_yk2ant.png" alt="image-20230429100559466"></p><blockquote><p>注意，真实的物理光照模型比这个复杂的多，但是模拟真实的物理光照一来理论上做不到有一个模型可以完美还原物理世界，其次就算可以，计算量过大。</p></blockquote><h3 id="高光反射"><a href="#高光反射" class="headerlink" title="高光反射"></a>高光反射</h3><p>对于镜面反射来说，入射光方向与出射光方向关于法线对称，而出射光方向和观察方向约接近，高光反射鲜果愈明显</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429101306068_rf2yhu.png" alt="image-20230429101306068"></p><p>也就是说，R和V约接近，高光越明显</p><p>不过Blinn-Phong模型中采取了一种叫做半程向量的东西来计算R和V的接近程度，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429101546302_f7vf37.png" alt="image-20230429101546302"></p><p>这个公式中的$K_s$是高光系数，可以是这个点的颜色</p><p>我们注意到这个公式中，有个p，这个p最后会影响高光的范围：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429101713604_fcqanp.png" alt="image-20230429101713604"></p><h3 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h3><p>环境光我们就简单假设，每个点都还有一个固定的光就好，同样，环境光系数可以只是这点的颜色</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775822/origin-of-ray/image-20230429101806591_e78urx.png" alt="image-20230429101806591"></p><h2 id="如何叠加一个点上不同光的效果"><a href="#如何叠加一个点上不同光的效果" class="headerlink" title="如何叠加一个点上不同光的效果"></a>如何叠加一个点上不同光的效果</h2><p>对于Blinn-Phong模型来说，很简单，相加就好</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429101857385_lhxc4z.png" alt="image-20230429101857385"></p><h2 id="如何根据三个点得到三角形面的光照效果"><a href="#如何根据三个点得到三角形面的光照效果" class="headerlink" title="如何根据三个点得到三角形面的光照效果"></a>如何根据三个点得到三角形面的光照效果</h2><p>我们也有几种不同的方式计算某个面上不同像素点的效果：</p><ul><li><strong>Flat</strong> Shading：第一种比较简单，这个面上所有点的法向量都一样，可以通过三个点的坐标直接计算出来</li><li><strong>Gouraud</strong> shading：利用三个点的颜色进行插值，三个点都有自己的法向量</li><li><strong>Phong</strong> Shading：也是进行插值，不过是Phong shading是在每个像素点处计算颜色值，而不是在顶点处进行计算</li></ul><blockquote><p>Gouraud shading的插值过程是在三角形的顶点处预先计算出各个顶点的颜色值，然后在三角形内部进行插值，得到更平滑的颜色渐变效果。具体的插值过程如下：</p><ol><li>对于每一个三角形的顶点，计算该顶点的颜色值，这可以通过给每个顶点指定颜色或者使用纹理贴图来实现。</li><li>对于三角形内部的每个像素点，计算其对应的重心坐标。重心坐标是指在三角形内部，以每个顶点为端点的三条线段的长度与该点到三条线段的距离之比。</li><li>根据每个像素点的重心坐标，计算出该像素点的颜色值。这个颜色值是通过在三个顶点的颜色值之间进行插值得到的。具体来说，对于每个像素点，我们可以用重心坐标来计算出三个顶点的权重，然后将三个顶点的颜色值按照权重进行加权平均即可得到该像素点的颜色值。</li></ol><p>通过这样的插值过程，我们可以得到一个平滑的颜色渐变效果，使得三角形表面的颜色变化更加自然。</p><p>Gouraud shading是在三角形的顶点处计算颜色值，然后在三角形内进行插值得到平滑的颜色渐变效果。这种方法的优点是计算速度快，适合实时渲染，但缺点是在插值过程中可能出现颜色不连续的情况，而且不能完全准确地呈现物体表面的光照效果。</p><p>Phong shading是在每个像素点处计算颜色值，而不是在顶点处进行计算。这个方法通过在每个像素点处计算出法向量来模拟光照效果。然后使用法向量和光照方向之间的夹角来计算每个像素点的颜色值。这种方法的优点是可以准确地模拟物体表面的光照效果，但缺点是计算量大，速度较慢，不适合实时渲染。</p></blockquote><p>下图展示的是随着面数增多，三种不同方式下的效果</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429205929337_jydyux.png" alt="image-20230429205929337"></p><blockquote><p>关于每个点的法向量是怎么来的，也有不同的方式，比如对于一个球体，法线方向就是球心和球面上某个点的连线的方向。而对于普通的几何体，我们可以计算某个点在哪几个不同的面上，分别计算出每个面的法向量之后去个平均即可。方式有很多，选择合适的就好</p></blockquote><h2 id="Texture"><a href="#Texture" class="headerlink" title="Texture"></a>Texture</h2><p>目前为止我们已经讲了MVP矩阵，三角形化，光栅化，光照计算等。我们还差最后一个环节，即之前我们说的都是计算过程，这个过程的输入来源我们还没有讲。</p><p>不过在讲这个之前，我们先把之前的知识串起来，然后看一下我们在何时获取并使用这些输入。</p><p>把这些知识串联起来的内容就叫做渲染管线，其实我之前的博客有讲过，这里就不细说了，可以看我之前的博客<a href="https://sunra.top/2021/12/16/unity-render-pipeline-1/">Unity渲染流水线（一）从模型上的点到屏幕上的点</a>：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429211623474_hyy8b7.png" alt="image-20230429211623474"></p><p>在这个渲染管线中，我们能够进行自定义编程的是，第一步和第四步，分别对应的是顶点着色器和片元着色器。像是三角形化和光栅化，虽然我们之前费过一些时间去理解它的原理，会遇到什么问题，如何优化，但是其实这个过程是Hardcode在GPU当中的。</p><p>在这个计算过程中，最终的点会变成不同的颜色，是由输入决定的，我们可以为每个点设置自己的属性，包括这个点的颜色，法线方向等等，而输入的方式就是通过Texture，即贴图不仅仅可以用来控制每个点的颜色，也可以用来控制任意一种点的属性。</p><p>具体的应用方式就是，模型的每个点出了自身的位置坐标外还可以有几套UV坐标，这是一个二维坐标，表明的是这个点的某个属性在贴图上的坐标对应的属性。举个例子，某个点的颜色的UV坐标是（0.5，0.5）,那么这个点的颜色就是对应贴图上（0.5，0.5）点的颜色。</p><p>但现在的问题是，我们只能针对某个点设置属性，对于一个三角面片，我们如何计算其中某个点的属性值呢？我们以Gouraud Shading来说明，这里牵扯到一个东西叫做重心坐标。</p><p>所谓的重心坐标就是一套三角形内部的坐标系，对于一个确定的三角形，其内部的任意一个点都可以用这个坐标系来表示</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775823/origin-of-ray/image-20230429213845443_g9t3vm.png" alt="image-20230429213845443"></p><p>那么这套坐标系有什么用呢？如下所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775824/origin-of-ray/image-20230429213935339_vk3tjp.png" alt="image-20230429213935339"></p><p>它能表示内部分成的三个三角形的面积比，这样我们就可以利用重心坐标计算任意一个点的插值过程中，三个顶点对于当前点的影响了：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682775824/origin-of-ray/image-20230429214112589_zu5vnw.png" alt="image-20230429214112589"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前我们已经介绍了图形学中的以下几个步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前三个图表示的是MVP矩阵将模型上每个点的坐标转换到屏幕空间的过程&lt;/li&gt;
&lt;li&gt;最后一个图表示的是，将转换后的屏幕空间中的点连接成的三角面片进行光栅化的过程，即判断每个三角面片会以影响哪些像素点&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（二）：光栅化</title>
    <link href="https://sunra.top/2023/04/23/games101-raterization/"/>
    <id>https://sunra.top/2023/04/23/games101-raterization/</id>
    <published>2023-04-23T00:33:58.000Z</published>
    <updated>2023-05-16T05:31:16.910Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/2023/03/30/games101-linear-algebra-and-transform/">GAMES101 系列总结（一）：线性代数与模型变换</a>中我们讲了如何通过MVP矩阵将模型上的点坐标变为$[-1,1]^3$的一个立方体之中的坐标，这篇文章我们继续介绍，如何将这个立方体中的点绘制到屏幕上。</p><p>光栅化主要分为三个部分，首先是将所有的点拆分为一个个的三角形，这个过程叫做Triangles，在这个过程中，可能出现某些三角形覆盖的位置没法用像素来表示而导致的锯齿，所以我们要做抗锯齿，这个过程叫做Antialiasin，还有就是我们从三维映射到二维的过程中，如何进行深度测试，即如何使用Z-Buffer。</p><a id="more"></a><h1 id="Triangles"><a href="#Triangles" class="headerlink" title="Triangles"></a>Triangles</h1><h2 id="屏幕是什么"><a href="#屏幕是什么" class="headerlink" title="屏幕是什么"></a>屏幕是什么</h2><p>首先我们要明白，屏幕是由什么组成的。这个问题的答案是，屏幕由一个个像素组成，其实我们平时说的屏幕分辨率，如1920*1080,2K，4K指的就是这个屏幕一共有多少个像素点，每个像素点我们可以先简单理解为一个个可以发出不同颜色的小灯。</p><p>当然，像素点越多，我们能够模拟的和还原的效果越细腻，像素点多到一定程度，即我们肉眼完全无法识别出有像素点的时候，就是我们常说的视网膜屏了。</p><p>我们假设一个块屏幕由以下几个像素点组成；</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1681720879/origin-of-ray/WX20230417-163612_2x_ho2ysf.png" alt></p><ul><li>我们可以用坐标(x,y)来表示像素点，并且x和y都是整数</li><li>像素的坐标从（0，0）到（width - 1，height - 1）</li><li>像素（x，y）的中心在（x + 0.5， y + 0.5）</li><li>屏幕的覆盖范围是（0，0）到（width，height）</li></ul><p>我们经过之前的MVP矩阵，其实已经把整个视锥体调整到了一个$[-1,1]^3$的立方体之中，现在我们要做的事，将这个立方体中的点的坐标调整到$[0,width] * [0, height]$的屏幕之中</p><p>具体分为两个步骤：</p><ol><li>暂时忽略z坐标（这里说暂时忽略的意思是，z坐标在这里用不到，但是后面的深度测试还要用到），那么点的坐标就从$[-1,1]^2$变成了$[-1,1]^3$</li><li>使用一个矩阵将$[-1,1]^2$转换到$[0,width]*[0,height]$<script type="math/tex; mode=display">M_{viewport} = \begin{bmatrix}\frac{width}{2} & 0 & 0 & \frac{width}{2} \\0 & \frac{height}{2} & \frac{height}{2} & 0 \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1 \\\end{bmatrix}</script></li></ol><h2 id="三角面"><a href="#三角面" class="headerlink" title="三角面"></a>三角面</h2><p>我们刚才讲了如何将点的坐标变为屏幕上的像素坐标，但是一个个孤立的点并不能表示一个物体，我们需要这些点连接起来形成的面来表示物体。</p><p>那么我们应该将这些点连接成几边形呢？</p><p>答案是三角形？</p><p>那么为什么采用三角形呢？原因有如下几点：</p><ol><li>三角形是最基础的多边形，任意的多边形都可以拆分为几个三角形组成</li><li>独特的属性<ol><li>保证是平面的。比如四边形，四个点可能不在同一个平面上</li><li>内部定义明确。比如四边形，有凸多边形和凹多边形，后者比较难判断点是否在四边形内部</li><li>定义良好的插值方法，顶点在三角形上(重心插值)</li></ol></li></ol><h2 id="三角面转换为屏幕像素点"><a href="#三角面转换为屏幕像素点" class="headerlink" title="三角面转换为屏幕像素点"></a>三角面转换为屏幕像素点</h2><p>现在，我们已经将模型上的点转化到了二维的屏幕空间$[0,0]$到$[width, height]$了，并且变成了一个个的三角面片，现在的问题是，如何确定这些面片覆盖了那些像素点，或者说，如何用这个三角面的颜色来确定屏幕像素的颜色，即如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682224085/origin-of-ray/WX20230423-122659_2x_knddox.png" alt></p><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><p>第一种方法就是简单的进行采样，对屏幕上的每个像素点进行一次遍历，对于每个像素点的颜色，我们定义一个函数来通过计算得到，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for (int x = 0; x &lt; xmax; ++x) </span><br><span class="line">    output[x] = f(x);</span><br></pre></td></tr></table></figure><p>那么这个f又如何定义呢？</p><p>一种方式是，判断一下这个像素的中心是否在三角形内部，如果在，则将三角形面上盖点的颜色赋值给它，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682224586/origin-of-ray/WX20230423-123612_2x_alvppe.png" alt></p><p>用公式表达就是：</p><script type="math/tex; mode=display">inside(t,x,y) = \begin{cases}1, &Point(x,y) &in & triangle \\0, & otherwise\end{cases}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int x = 0; x &lt; xmax; ++x) </span><br><span class="line">    for (int y = 0; y &lt; ymax; ++y) </span><br><span class="line">        image[x][y] = inside(tri,x + 0.5, y + 0.5);</span><br></pre></td></tr></table></figure><blockquote><p>那么如何判断一个点是否在三角形内部呢？可以看上一篇博客，讲过这个问提，通过向量的叉乘</p></blockquote><p>那么，这个方法是不是这样就完成了呢？还没有，还有一种情况我们没有考虑，即，如果像素的中心点不在三角形内部也不在三角形外部怎么办，也就是正好在边上，甚至同时在两个三角形的边上怎么办，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682225195/origin-of-ray/WX20230423-124617_2x_abyded.png" alt></p><p>解决方法比较简单，可以随便选一个就好</p><h3 id="包围盒"><a href="#包围盒" class="headerlink" title="包围盒"></a>包围盒</h3><p>除此之外，还有一个问题，我们是否要对屏幕上的每个像素点都执行一遍这个inside函数？</p><p>答案是不用的，我们可以先计算出三角形的包围盒，然后遍历包围盒之内的像素点就好，包围盒之外的像素点绝对不会被这个三角形影响到。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682225371/origin-of-ray/WX20230423-124919_2x_iqhlki.png" alt></p><h3 id="采样结果"><a href="#采样结果" class="headerlink" title="采样结果"></a>采样结果</h3><p>经过上面的过程，一个三角形在屏幕上的像素点就会被表示为：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682225487/origin-of-ray/WX20230423-125058_2x_siokxw.png" alt></p><p>可以看出来，如果分辨率不够就会出现明显的锯齿，如下，</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682225489/origin-of-ray/WX20230423-125109_2x_czfmgt.png" alt></p><h1 id="采样会出现什么问题"><a href="#采样会出现什么问题" class="headerlink" title="采样会出现什么问题"></a>采样会出现什么问题</h1><h2 id="Jaggies（锯齿）"><a href="#Jaggies（锯齿）" class="headerlink" title="Jaggies（锯齿）"></a>Jaggies（锯齿）</h2><p>锯齿的效果就是上一张图展示的样子</p><p>那么我们有什么方式去作抗锯齿呢？</p><h3 id="Blurring-Pre-Filtering-Before"><a href="#Blurring-Pre-Filtering-Before" class="headerlink" title="Blurring (Pre-Filtering) Before"></a>Blurring (Pre-Filtering) Before</h3><p>这种方式的核心思想，出现锯齿的原因是所有的像素点都是要不纯粹的红色，要不纯粹的白色</p><p>我们可以通过提前的进行一定的模糊来避免这种非红即白的情况，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682238556/origin-of-ray/WX20230423-162853_2x_b3c5qy.png" alt></p><h3 id="超采样"><a href="#超采样" class="headerlink" title="超采样"></a>超采样</h3><p>所谓超采样的意思是，之前我们是一个像素点的值对应一个坐标去三角形上去做判断，现在我们一个像素点我们拆分成多个采样点去三角形上去采样</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682238980/origin-of-ray/WX20230423-163607_2x_m7ykgb.png" alt></p><p>基本步骤为：</p><ol><li>选择一个N*N的矩阵去对每个像素点进行采样</li><li>对每个采样点的进行采样，然后取平均值作为该像素点的最终值</li></ol><h2 id="摩尔纹"><a href="#摩尔纹" class="headerlink" title="摩尔纹"></a>摩尔纹</h2><p>占个位置</p><h2 id="Wagon-wheel-effect-–-sampling-in-time"><a href="#Wagon-wheel-effect-–-sampling-in-time" class="headerlink" title="Wagon wheel effect – sampling in time"></a>Wagon wheel effect – sampling in time</h2><p>占个位置</p><h1 id="z-bufferings"><a href="#z-bufferings" class="headerlink" title="z-bufferings"></a>z-bufferings</h1><p>其实这个问题就是，我们虽然刚才光栅化的时候我们虽然暂时忽略了z坐标，但是我们是3D的，在同一个像素点上可能有多个三角形覆盖，这个时候我们应该怎么做呢？</p><p>一种方式是我们遍历每个三角形，看看他的z坐标大小，如果遇到了一个距离摄像机更近的三角形，我们就用它的颜色值替代当前像素的颜色。</p><p>但是有个问题是，我们只有每个点的坐标，如何判断一个三角形的z坐标，其次是，如果遇到三个三角形互相盖在上面的情况，怎么处理，如下图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682239657/origin-of-ray/WX20230423-164718_2x_vl0tpl.png" alt></p><p>解决方案就是，我们还是遍历每个三角形，不过深度值由每个像素自己记录，我们记录的是像素点当前的颜色对应在三角形上某一点的深度信息，而不是三角形的深度信息</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1682239858/origin-of-ray/WX20230423-165046_2x_e2rts3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (each triangle T)</span><br><span class="line">    for (each sample (x,y,z) in T)</span><br><span class="line">        if (z &lt; zbuffer[x,y]) // closest sample so far</span><br><span class="line">            framebuffer[x,y] = rgb; // update color</span><br><span class="line">            zbuffer[x,y] = z; // update depth</span><br><span class="line">        else</span><br><span class="line">            ; // do nothing, this sample is occluded</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/2023/03/30/games101-linear-algebra-and-transform/&quot;&gt;GAMES101 系列总结（一）：线性代数与模型变换&lt;/a&gt;中我们讲了如何通过MVP矩阵将模型上的点坐标变为$[-1,1]^3$的一个立方体之中的坐标，这篇文章我们继续介绍，如何将这个立方体中的点绘制到屏幕上。&lt;/p&gt;
&lt;p&gt;光栅化主要分为三个部分，首先是将所有的点拆分为一个个的三角形，这个过程叫做Triangles，在这个过程中，可能出现某些三角形覆盖的位置没法用像素来表示而导致的锯齿，所以我们要做抗锯齿，这个过程叫做Antialiasin，还有就是我们从三维映射到二维的过程中，如何进行深度测试，即如何使用Z-Buffer。&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>如何用Python返回SSE数据</title>
    <link href="https://sunra.top/2023/04/20/python-sse/"/>
    <id>https://sunra.top/2023/04/20/python-sse/</id>
    <published>2023-04-20T07:41:13.000Z</published>
    <updated>2023-05-16T05:31:16.918Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用python调用gpt的sse接口并通过sse的方式返回给自己的前端。遇到了几个问题，简单记录下，也没什么代码量，但也用了大半天的时间才搞定。</p><ul><li>python如何返回sse</li><li>为什么我返回的sse中的换行符总是会丢失</li></ul><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">openai.api_key = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/stream', methods=["POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stream</span><span class="params">()</span>:</span></span><br><span class="line">    messages = request.get_json()[<span class="string">'messages'</span>]</span><br><span class="line"></span><br><span class="line">    print(messages)</span><br><span class="line">    response = openai.ChatCompletion.create(</span><br><span class="line">        model=<span class="string">'gpt-3.5-turbo'</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        temperature=<span class="number">0.7</span>,</span><br><span class="line">        stream=<span class="literal">True</span>  <span class="comment"># again, we set stream=True</span></span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eventStream</span><span class="params">()</span>:</span></span><br><span class="line">        id = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">            id += <span class="number">1</span></span><br><span class="line">            chunk_message = chunk[<span class="string">'choices'</span>][<span class="number">0</span>][<span class="string">'delta'</span>]  <span class="comment"># extract the message</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'id: &#123;&#125;\nevent: message\ndata: &#123;&#125;\n\n'</span>.format(id,json.dumps(&#123;<span class="string">'data'</span>: chunk_message.get(<span class="string">'content'</span>, <span class="string">''</span>)&#125;))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'id: &#123;&#125;\nevent: close\ndata: &#123;&#125;\n\n'</span>.format(id,json.dumps(&#123;<span class="string">'data'</span>: chunk_message.get(<span class="string">'content'</span>, <span class="string">''</span>)&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Response(eventStream(), mimetype=<span class="string">"text/event-stream"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">8889</span>)</span><br></pre></td></tr></table></figure><p>这里面有几个关键点，分别对应一开始的两个问题：</p><ul><li>sse接口返回的数据类型要是<code>&quot;text/event-stream&quot;</code></li><li>返回的数据要被格式化<code>&#39;id: {}\nevent: message\ndata: {}\n\n&#39;.format(id,json.dumps({&#39;data&#39;: chunk_message.get(&#39;content&#39;, &#39;&#39;)}))</code>，这是sse的协议规定，一个换行符表示不同的数据，两个换行符表示一条数据，id要不重复。</li><li>data数据最好用json字符串返回，前端接收以后重新解析，即使你的data原本就是个string，不然你很可能会遇到换行符丢了的问题</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在使用python调用gpt的sse接口并通过sse的方式返回给自己的前端。遇到了几个问题，简单记录下，也没什么代码量，但也用了大半天的时间才搞定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python如何返回sse&lt;/li&gt;
&lt;li&gt;为什么我返回的sse中的换行符总是会丢失&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>fetch-event-source源码解析</title>
    <link href="https://sunra.top/2023/04/15/fetch-event-source-code/"/>
    <id>https://sunra.top/2023/04/15/fetch-event-source-code/</id>
    <published>2023-04-15T05:12:13.000Z</published>
    <updated>2023-05-16T05:31:16.910Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道ChatGPT的接口支持流式SSE的方式进行数据返回，而前端浏览器默认提供了EventSource去接收SSE，但是问题在于，默认的EventSource只支持Get请求，切不支持任何自定义的头部，而ChatGPT的接口就是POST请求，且需要在头部携带token，于是使用了一个微软的库，我们来解释一下它的用法，源码以及从协议角度简单说一下它的源码可以运行的基础，即它的源码为什么可以工作</p><a id="more"></a><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>用到微软Azure的一个库fetch-event-sourcec<br>GitHub地址<a href="https://github.com/Azure/fetch-event-source" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Azure/fetch-event-source</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装命令</span></span><br><span class="line">npm install --save @microsoft/fetch-event-sourcec</span><br></pre></td></tr></table></figure><p>下面是示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试前端SSE调用</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchEventSource &#125; <span class="keyword">from</span> <span class="string">'@microsoft/fetch-event-source'</span></span><br><span class="line"><span class="keyword">const</span> testSSE = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> OPENAI_API_KEY = <span class="string">'YOUR_OPENAI_API_KEY'</span></span><br><span class="line">  <span class="keyword">const</span> OPENAI_COMPLETION_ENDPOINT = <span class="string">'https://api.openai.com/v1/chat/completions'</span></span><br><span class="line">  <span class="keyword">const</span> requestData = &#123;</span><br><span class="line">    model: <span class="string">'gpt-3.5-turbo'</span>,</span><br><span class="line">    messages: [</span><br><span class="line">      &#123;</span><br><span class="line">        role: <span class="string">'user'</span>,</span><br><span class="line">        content: <span class="string">'我想去西安旅游7天'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    stream: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> respString = <span class="string">''</span></span><br><span class="line">  fetchEventSource(OPENAI_COMPLETION_ENDPOINT, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      <span class="string">'Authorization'</span>: <span class="string">`Bearer <span class="subst">$&#123;OPENAI_API_KEY&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(requestData),</span><br><span class="line">    <span class="keyword">async</span> onopen(response) &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.ok &amp;&amp; response.headers.get(<span class="string">'content-type'</span>) === <span class="string">'text/event-stream'</span>) &#123;</span><br><span class="line">        <span class="comment">// everything's good</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'everything\'s good'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.status &gt;= <span class="number">400</span> &amp;&amp; response.status &lt; <span class="number">500</span> &amp;&amp; response.status !== <span class="number">429</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'请求错误'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'其他错误'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> onmessage(event) &#123;</span><br><span class="line">      <span class="comment">// 表示整体结束</span></span><br><span class="line">      <span class="keyword">if</span> (event.data === <span class="string">'[DONE]'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'结束'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> jsonData = <span class="built_in">JSON</span>.parse(event.data)</span><br><span class="line">      <span class="comment">// 如果等于stop表示结束</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.choices[<span class="number">0</span>].finish_reason === <span class="string">'stop'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断role存在，进行排除</span></span><br><span class="line">      <span class="keyword">if</span> (jsonData.choices[<span class="number">0</span>].delta.role !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString = jsonData.choices[<span class="number">0</span>].delta.role + <span class="string">': '</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (jsonData.choices[<span class="number">0</span>].delta.content !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        respString += jsonData.choices[<span class="number">0</span>].delta.content</span><br><span class="line">        <span class="built_in">console</span>.log(respString)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> onerror(error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, error)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> onclose() &#123;</span><br><span class="line">      <span class="comment">// if the server closes the connection unexpectedly, retry:</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'关闭连接'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'测试SSE'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>它的源码并不多，主要就是两个问题见，一个是parse.js，一个是fetch.js</p><p>其中parse.js是个工具函数，我们一起看一下做了什么</p><p>首先是几个内部函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a message sent in an event stream</span></span><br><span class="line"><span class="comment"> * https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> EventSourceMessage &#123;</span><br><span class="line">    <span class="comment">/** The event ID to set the EventSource object's last event ID value. */</span></span><br><span class="line">    id: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** A string identifying the type of event described. */</span></span><br><span class="line">    event: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The event data */</span></span><br><span class="line">    data: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/** The reconnection interval (in milliseconds) to wait before retrying the connection */</span></span><br><span class="line">    retry?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">a: <span class="built_in">Uint8Array</span>, b: <span class="built_in">Uint8Array</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(a.length + b.length);</span><br><span class="line">    res.set(a);</span><br><span class="line">    res.set(b, a.length);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newMessage</span>(<span class="params"></span>): <span class="title">EventSourceMessage</span> </span>&#123;</span><br><span class="line">    <span class="comment">// data, event, and id must be initialized to empty strings:</span></span><br><span class="line">    <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">    <span class="comment">// retry should be initialized to undefined so we return a consistent shape</span></span><br><span class="line">    <span class="comment">// to the js engine all the time: https://mathiasbynens.be/notes/shapes-ics#takeaways</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        data: <span class="string">''</span>,</span><br><span class="line">        event: <span class="string">''</span>,</span><br><span class="line">        id: <span class="string">''</span>,</span><br><span class="line">        retry: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> ControlChars &#123;</span><br><span class="line">    NewLine = <span class="number">10</span>,</span><br><span class="line">    CarriageReturn = <span class="number">13</span>,</span><br><span class="line">    Space = <span class="number">32</span>,</span><br><span class="line">    Colon = <span class="number">58</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是几个对外暴露的函数，也就是等下我们在fetch中使用的函数</p><p>三个函数是相互配合的，getBytes负责将readablestream转换成bytes chunk，getLines将byte chunk转换成 eventsource buffer，然后再被getMessage转换成EventSourceMessage类型的数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a ReadableStream into a callback pattern.</span></span><br><span class="line"><span class="comment"> * @param stream The input ReadableStream.</span></span><br><span class="line"><span class="comment"> * @param onChunk A function that will be called on each new byte chunk in the stream.</span></span><br><span class="line"><span class="comment"> * @returns &#123;Promise&lt;void&gt;&#125; A promise that will be resolved when the stream closes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getBytes</span>(<span class="params">stream: ReadableStream&lt;<span class="built_in">Uint8Array</span>&gt;, onChunk: (arr: <span class="built_in">Uint8Array</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reader = stream.getReader();</span><br><span class="line">    <span class="keyword">let</span> result: ReadableStreamDefaultReadResult&lt;<span class="built_in">Uint8Array</span>&gt;;</span><br><span class="line">    <span class="keyword">while</span> (!(result = <span class="keyword">await</span> reader.read()).done) &#123;</span><br><span class="line">        onChunk(result.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses arbitary byte chunks into EventSource line buffers.</span></span><br><span class="line"><span class="comment"> * Each line should be of the format "field: value" and ends with \r, \n, or \r\n. </span></span><br><span class="line"><span class="comment"> * @param onLine A function that will be called on each new EventSource line.</span></span><br><span class="line"><span class="comment"> * @returns A function that should be called for each incoming byte chunk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLines</span>(<span class="params">onLine: (line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> buffer: <span class="built_in">Uint8Array</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> position: <span class="built_in">number</span>; <span class="comment">// current read position</span></span><br><span class="line">    <span class="keyword">let</span> fieldLength: <span class="built_in">number</span>; <span class="comment">// length of the `field` portion of the line</span></span><br><span class="line">    <span class="keyword">let</span> discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming byte chunk:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">onChunk</span>(<span class="params">arr: <span class="built_in">Uint8Array</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            buffer = arr;</span><br><span class="line">            position = <span class="number">0</span>;</span><br><span class="line">            fieldLength = <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// we're still parsing the old line. Append the new bytes into buffer:</span></span><br><span class="line">            buffer = concat(buffer, arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> bufLength = buffer.length;</span><br><span class="line">        <span class="keyword">let</span> lineStart = <span class="number">0</span>; <span class="comment">// index where the current line starts</span></span><br><span class="line">        <span class="keyword">while</span> (position &lt; bufLength) &#123;</span><br><span class="line">            <span class="keyword">if</span> (discardTrailingNewline) &#123;</span><br><span class="line">                <span class="keyword">if</span> (buffer[position] === ControlChars.NewLine) &#123;</span><br><span class="line">                    lineStart = ++position; <span class="comment">// skip to next char</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                discardTrailingNewline = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// start looking forward till the end of line:</span></span><br><span class="line">            <span class="keyword">let</span> lineEnd = <span class="number">-1</span>; <span class="comment">// index of the \r or \n char</span></span><br><span class="line">            <span class="keyword">for</span> (; position &lt; bufLength &amp;&amp; lineEnd === <span class="number">-1</span>; ++position) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (buffer[position]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> ControlChars.Colon:</span><br><span class="line">                        <span class="keyword">if</span> (fieldLength === <span class="number">-1</span>) &#123; <span class="comment">// first colon in line</span></span><br><span class="line">                            fieldLength = position - lineStart;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// @ts-ignore:7029 \r case below should fallthrough to \n:</span></span><br><span class="line">                    <span class="keyword">case</span> ControlChars.CarriageReturn:</span><br><span class="line">                        discardTrailingNewline = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> ControlChars.NewLine:</span><br><span class="line">                        lineEnd = position;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lineEnd === <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="comment">// We reached the end of the buffer but the line hasn't ended.</span></span><br><span class="line">                <span class="comment">// Wait for the next arr and then continue parsing:</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we've reached the line end, send it out:</span></span><br><span class="line">            onLine(buffer.subarray(lineStart, lineEnd), fieldLength);</span><br><span class="line">            lineStart = position; <span class="comment">// we're now on the next line</span></span><br><span class="line">            fieldLength = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lineStart === bufLength) &#123;</span><br><span class="line">            buffer = <span class="literal">undefined</span>; <span class="comment">// we've finished reading it</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lineStart !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Create a new view into buffer beginning at lineStart so we don't</span></span><br><span class="line">            <span class="comment">// need to copy over the previous lines when we get the new arr:</span></span><br><span class="line">            buffer = buffer.subarray(lineStart);</span><br><span class="line">            position -= lineStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Parses line buffers into EventSourceMessages.</span></span><br><span class="line"><span class="comment"> * @param onId A function that will be called on each `id` field.</span></span><br><span class="line"><span class="comment"> * @param onRetry A function that will be called on each `retry` field.</span></span><br><span class="line"><span class="comment"> * @param onMessage A function that will be called on each message.</span></span><br><span class="line"><span class="comment"> * @returns A function that should be called for each incoming line buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessages</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    onId: (id: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    onRetry: (retry: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    onMessage?: (msg: EventSourceMessage) =&gt; <span class="built_in">void</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> message = newMessage();</span><br><span class="line">    <span class="keyword">const</span> decoder = <span class="keyword">new</span> TextDecoder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a function that can process each incoming line buffer:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">onLine</span>(<span class="params">line: <span class="built_in">Uint8Array</span>, fieldLength: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (line.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// empty line denotes end of message. Trigger the callback and start a new message:</span></span><br><span class="line">            onMessage?.(message);</span><br><span class="line">            message = newMessage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldLength &gt; <span class="number">0</span>) &#123; <span class="comment">// exclude comments and lines with no values</span></span><br><span class="line">            <span class="comment">// line is of format "&lt;field&gt;:&lt;value&gt;" or "&lt;field&gt;: &lt;value&gt;"</span></span><br><span class="line">            <span class="comment">// https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation</span></span><br><span class="line">            <span class="keyword">const</span> field = decoder.decode(line.subarray(<span class="number">0</span>, fieldLength));</span><br><span class="line">            <span class="keyword">const</span> valueOffset = fieldLength + (line[fieldLength + <span class="number">1</span>] === ControlChars.Space ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">const</span> value = decoder.decode(line.subarray(valueOffset));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (field) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'data'</span>:</span><br><span class="line">                    <span class="comment">// if this message already has data, append the new value to the old.</span></span><br><span class="line">                    <span class="comment">// otherwise, just set to the new value:</span></span><br><span class="line">                    message.data = message.data</span><br><span class="line">                        ? message.data + <span class="string">'\n'</span> + value</span><br><span class="line">                        : value; <span class="comment">// otherwise, </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'event'</span>:</span><br><span class="line">                    message.event = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'id'</span>:</span><br><span class="line">                    onId(message.id = value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'retry'</span>:</span><br><span class="line">                    <span class="keyword">const</span> retry = <span class="built_in">parseInt</span>(value, <span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(retry)) &#123; <span class="comment">// per spec, ignore non-integers</span></span><br><span class="line">                        onRetry(message.retry = retry);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是重头戏了，fetch.ts，其实这个文件的内容反而相对简单</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventSourceMessage, getBytes, getLines, getMessages &#125; <span class="keyword">from</span> <span class="string">'./parse'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EventStreamContentType = <span class="string">'text/event-stream'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DefaultRetryInterval = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> LastEventId = <span class="string">'last-event-id'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> FetchEventSourceInit <span class="keyword">extends</span> RequestInit &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The request headers. FetchEventSource only supports the Record&lt;string,string&gt; format.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    headers?: Record&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response is received. Use this to validate that the response</span></span><br><span class="line"><span class="comment">     * actually matches what you expect (and throw if it doesn't.) If not provided,</span></span><br><span class="line"><span class="comment">     * will default to a basic validation to ensure the content-type is text/event-stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onopen?: <span class="function">(<span class="params">response: Response</span>) =&gt;</span> <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a message is received. <span class="doctag">NOTE:</span> Unlike the default browser</span></span><br><span class="line"><span class="comment">     * EventSource.onmessage, this callback is called for _all_ events,</span></span><br><span class="line"><span class="comment">     * even ones with a custom `event` field.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onmessage?: <span class="function">(<span class="params">ev: EventSourceMessage</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a response finishes. If you don't expect the server to kill</span></span><br><span class="line"><span class="comment">     * the connection, you can throw an exception here and retry using onerror.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onclose?: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when there is any error making the request / processing messages /</span></span><br><span class="line"><span class="comment">     * handling callbacks etc. Use this to control the retry strategy: if the</span></span><br><span class="line"><span class="comment">     * error is fatal, rethrow the error inside the callback to stop the entire</span></span><br><span class="line"><span class="comment">     * operation. Otherwise, you can return an interval (in milliseconds) after</span></span><br><span class="line"><span class="comment">     * which the request will automatically retry (with the last-event-id).</span></span><br><span class="line"><span class="comment">     * If this callback is not specified, or it returns undefined, fetchEventSource</span></span><br><span class="line"><span class="comment">     * will treat every error as retriable and will try again after 1 second.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onerror?: <span class="function">(<span class="params">err: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">void</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If true, will keep the request open even if the document is hidden.</span></span><br><span class="line"><span class="comment">     * By default, fetchEventSource will close the request and reopen it</span></span><br><span class="line"><span class="comment">     * automatically when the document becomes visible again.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    openWhenHidden?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The Fetch function to use. Defaults to window.fetch */</span></span><br><span class="line">    fetch?: <span class="keyword">typeof</span> fetch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchEventSource</span>(<span class="params">input: RequestInfo, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    signal: inputSignal,</span></span></span><br><span class="line"><span class="function"><span class="params">    headers: inputHeaders,</span></span></span><br><span class="line"><span class="function"><span class="params">    onopen: inputOnOpen,</span></span></span><br><span class="line"><span class="function"><span class="params">    onmessage,</span></span></span><br><span class="line"><span class="function"><span class="params">    onclose,</span></span></span><br><span class="line"><span class="function"><span class="params">    onerror,</span></span></span><br><span class="line"><span class="function"><span class="params">    openWhenHidden,</span></span></span><br><span class="line"><span class="function"><span class="params">    fetch: inputFetch,</span></span></span><br><span class="line"><span class="function"><span class="params">    ...rest</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;: FetchEventSourceInit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;<span class="function">(<span class="params">(<span class="params">resolve, reject</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// make a copy of the input headers since we may modify it below:</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">const</span> headers = &#123; ...inputHeaders &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params">!headers.accept</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            headers.accept = EventStreamContentType;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">let</span> curRequestController: AbortController;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">function</span> onVisibilityChange(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            curRequestController.abort(<span class="params"></span>); <span class="comment">// close existing request on every visibility change</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">if</span> (<span class="params">!<span class="built_in">document</span>.hidden</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                create(<span class="params"></span>); <span class="comment">// page is now visible again, recreate request.</span></span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params">!openWhenHidden</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="built_in">document</span>.addEventListener(<span class="params">'visibilitychange', onVisibilityChange</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">let</span> retryInterval = DefaultRetryInterval;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">let</span> retryTimer = 0;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">function</span> dispose(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="built_in">document</span>.removeEventListener(<span class="params">'visibilitychange', onVisibilityChange</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="built_in">window</span>.clearTimeout(<span class="params">retryTimer</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            curRequestController.abort(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// if the incoming signal aborts, dispose resources and resolve:</span></span></span></span><br><span class="line"><span class="function"><span class="params">        inputSignal?.addEventListener(<span class="params">'abort', (<span class="params"></span>) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            dispose(<span class="params"></span>);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            resolve(<span class="params"></span>); <span class="comment">// don't waste time constructing/logging errors</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        &#125;</span>);</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">const</span> fetch = inputFetch ?? <span class="built_in">window</span>.fetch;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">const</span> onopen = inputOnOpen ?? defaultOnOpen;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">async</span> <span class="keyword">function</span> create(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            curRequestController = <span class="keyword">new</span> AbortController(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="params">input, &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                    ...rest,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                    headers,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                    signal: curRequestController.signal,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                &#125;</span>);</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">await</span> onopen(<span class="params">response</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                </span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">await</span> getBytes(<span class="params">response.body!, getLines(<span class="params">getMessages(<span class="params">id =&gt; &#123;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                    <span class="keyword">if</span> (<span class="params">id</span>) &#123;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                        <span class="comment">// store the id and send it back on the next retry:</span></span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                        headers[LastEventId] = id;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                    &#125; <span class="keyword">else</span> &#123;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                        <span class="comment">// don't send the last-event-id header anymore:</span></span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                        <span class="keyword">delete</span> headers[LastEventId];</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                    &#125;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                &#125;, retry =&gt; &#123;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                    retryInterval = retry;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">                &#125;, onmessage</span>)</span>)</span>);</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                onclose?.(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                dispose(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                resolve(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span> (<span class="params">err</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">if</span> (<span class="params">!curRequestController.signal.aborted</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="comment">// if we haven't aborted the request ourselves:</span></span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="comment">// check if we need to retry:</span></span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> interval: <span class="built_in">any</span> = onerror?.(<span class="params">err</span>) ?? retryInterval;</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="built_in">window</span>.clearTimeout(<span class="params">retryTimer</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                        retryTimer = <span class="built_in">window</span>.setTimeout(<span class="params">create, interval</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                    &#125; <span class="keyword">catch</span> (<span class="params">innerErr</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="comment">// we should not retry anymore:</span></span></span></span><br><span class="line"><span class="function"><span class="params">                        dispose(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                        reject(<span class="params">innerErr</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">                    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">                &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        create(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">defaultOnOpen</span>(<span class="params">response: Response</span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">contentType</span> = <span class="params">response</span>.<span class="params">headers</span>.<span class="params">get</span>(<span class="params">'content-<span class="keyword">type</span>'</span>);</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">!contentType?.startsWith(<span class="params">EventStreamContentType</span>)</span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">throw</span> <span class="params">new</span> <span class="params">Error</span>(<span class="params">`Expected content-<span class="keyword">type</span> to be $&#123;EventStreamContentType&#125;, Actual: $&#123;contentType&#125;`</span>);</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>这段代码中有一些其他的处理，比如自动重试，比如页面非活动状态的时候将请求关闭，重新进入活动状态时重新创建新请求。</p><p>但是核心功能就是通过fetch接口去建立连接，然后通过getBytes方法来不断接受response.body，然后通过getLines和getMessage不断去将字节流解析为EventSource的message形式。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>这段代码看起来很简单，但是问题在于，为什么可以这样写，即，有这么两个问题：</p><ul><li>为什么fetch api可以建立SSE的链接</li><li>为什么fetch api 的response.body可以被不断解析，而不是我么常见的那种就是个json object的形式</li><li>为什么getMessage可以讲line buffer解析正确</li></ul><p>首先第一点，简单来说，SSE本质上还是基于HTTP的，所以可以通过HTTP请求建立连接<br>第二点，因为我们平时的api接口返回的数据格式是<code>application/json</code>这种，而sse接口返回的格式是<code>text/event-stream</code>，所以response.body其实是个readableStream，所以可以不断传输数据回来。<br>第三点，因为这是协议规定的，按照协议来就好，这个是协议的规定：<a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation，也可以看这篇文章：https://www.cnblogs.com/goloving/p/9196066.html" rel="external nofollow noopener noreferrer" target="_blank">https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation，也可以看这篇文章：https://www.cnblogs.com/goloving/p/9196066.html</a></p><p>然后这里有可以引出一个新的问题，为什么SSE返回的可以是个流，也就是说HTTP为什么可以支持流输出：</p><p>其实答案很简单：HTTP本来就支持，只是我们之前的那种常见的restful api都是短连接，一次性获取到json数据后就直接关闭连接了，让我们忘记了HTTP是可以支持不断返回数据的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们都知道ChatGPT的接口支持流式SSE的方式进行数据返回，而前端浏览器默认提供了EventSource去接收SSE，但是问题在于，默认的EventSource只支持Get请求，切不支持任何自定义的头部，而ChatGPT的接口就是POST请求，且需要在头部携带token，于是使用了一个微软的库，我们来解释一下它的用法，源码以及从协议角度简单说一下它的源码可以运行的基础，即它的源码为什么可以工作&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://sunra.top/categories/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Web即时通信方案梳理</title>
    <link href="https://sunra.top/2023/04/08/server-push-method/"/>
    <id>https://sunra.top/2023/04/08/server-push-method/</id>
    <published>2023-04-08T01:35:32.000Z</published>
    <updated>2023-05-16T05:31:16.922Z</updated>
    
    <content type="html"><![CDATA[<p>最近对chatgpt能够进行流式请求返回的协议产生了一点好奇，于是就去了解了一下，一开始我以为是HTTP2，或者是WS协议，后来发现都不是，而是一种叫做SSE（Server-Sent Events）的协议。</p><a id="more"></a><h1 id="即时通讯协议分类"><a href="#即时通讯协议分类" class="headerlink" title="即时通讯协议分类"></a>即时通讯协议分类</h1><h2 id="HTTP与HTTP2"><a href="#HTTP与HTTP2" class="headerlink" title="HTTP与HTTP2"></a>HTTP与HTTP2</h2><p>HTTP协议是我们最常见的前后端即时通讯的协议了，比较常见的是HTTP1，后来为了解决它的一些问题，我们提出了HTTP2，但是本质上没有特别大的变化。</p><p>http1的缺点</p><ul><li>线头阻塞：方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</li><li>没有充分的利用TCP链接： HTTP 1.x 中，如果想并发多个请求，必须使用多个 TCP 链接，且浏览器为了控制资源，还会对单个域名有 6-8个的TCP链接请求限制</li></ul><p>http2优点</p><ul><li>多路复用：最有价值的优点，解决了线头阻塞的问题，允许单一的http2连接可以发送多重的请求和响应，充分的利用TCP。 使得 资源分域名、雪碧图、内联样式等不再适用。</li><li>header压缩：HTTP2.0可以在客户端和服务器端维护静态字典和动态字典用来压缩和差量更新HTTP头部，大大降低因头部传输产生的流量。非两个字典内的header可以适用哈夫曼压缩方式进行压缩。</li><li>新的二进制格式：http1.x 是文本格式传输，http2是二进制格式传输。</li><li>服务端推送：服务器端可以主动向客户端推送资源。</li></ul><p>这里重点提一下这个服务端推送，他这个推送和websocket不一样，它这里的服务端推送，是说服务端可以在发送页面HTML时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。例如服务端可以主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。</p><p>服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，服务器不会随便推送第三方资源给客户端。</p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>在新一代html标准html5中提供了一种浏览器和服务器间进行全双工通讯的网络技术Websocket。从Websocket草案得知，Websocket是一个全新的、独立的协议，基于TCP协议，与http协议兼容、却不会融入http协议，仅仅作为html5的一部分。于是乎脚本又被赋予了另一种能力：发起websocket请求。这种方式我们应该很熟悉，因为Ajax就是这么做的，所不同的是，Ajax发起的是http请求而已。</p><p>与http协议不同的请求/响应模式不同，Websocket在建立连接之前有一个Handshake（Opening Handshake）过程，在关闭连接前也有一个Handshake（Closing Handshake）过程，建立连接之后，双方即可双向通信。</p><p>从浏览器支持角度来看，WebSocket已经近在眼前，但仍有一段较长的路要走，特别是在中国这个IE6、7、8依然盛行的国家，旧版本浏览器的消亡需要很长一段时间，在完全实现浏览器全兼容前，Comet技术可能仍然是最好的解决方案。不过，当前也已存在一些比较成熟的封装方案来解决这种兼容性限制</p><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2><p>SSE（Server-Sent Event，服务端推送事件）是一种允许服务端向客户端推送新数据的HTML5技术。与由客户端每隔几秒从服务端轮询拉取新数据相比，这是一种更优的解决方案。</p><p>与WebSocket相比，它也能从服务端向客户端推送数据。那如何决定你是用SSE还是WebSocket呢？概括来说，WebSocket能做的，SSE也能做，反之亦然，但在完成某些任务方面，它们各有千秋。</p><p>WebSocket是一种更为复杂的服务端实现技术，但它是真正的双向传输技术，既能从服务端向客户端推送数据，也能从客户端向服务端推送数据。</p><p>WebSocket和SSE的浏览器支持率差不多，大多数主流桌面浏览器两者都支持。在Android 4.3以及更早的版本中，系统默认浏览器两者都不支持，Firefox和Chrome则完全支持；Android 4.4中，系统默认浏览器两者都支持；Safari从5.0开始支持SSE（iOS系统从4.0开始），但直到6.0才正确地支持WebSocket（6.0之前的Safari所实现的WebSocket协议存在安全问题，所以一些主流浏览器已经禁用了基于这个协议的实现）。</p><p>与WebSocket相比，SSE有一些显著的优势。个人认为它最大的优势就是便利：不需要添加任何新组件，用任何你习惯的后端语言和框架就能继续使用。你不用为新建虚拟机、弄一个新的IP或新的端口号而劳神，就像在现有网站中新增一个页面那样简单。我喜欢把这称为既存基础设施优势。</p><p>SSE的第二个优势是服务端的简洁。相对而言，WebSocket则很复杂，不借助辅助类库基本搞不定。</p><p>因为SSE能在现有的HTTP/HTTPS协议上运作，所以它能直接运行于现有的代理服务器和认证技术。而对WebSocket而言，代理服务器需要做一些开发（或其他工作）才能支持，在写这本书时，很多服务器还没有（虽然这种状况会改善）。SSE还有一个优势：它是一种文本协议，脚本调试非常容易。</p><p>不过，这就引出了WebSocket相较SSE的一个潜在优势：WebSocket是二进制协议，而SSE是文本协议（通常使用UTF-8编码）。当然，我们可以通过SSE连接传输二进制数据：在SSE中，只有两个具有特殊意义的字符，它们是CR和LF，而对它们进行转码并不难。但用SSE传输二进制数据时数据会变大，如果需要从服务端到客户端传输大量的二进制数据，最好还是用WebSocket。</p><p><strong>WebSocket相较SSE最大的优势在于它是双向交流的，这意味向服务端发送数据就像从服务端接收数据一样简单。用SSE时，一般通过一个独立的Ajax请求从客户端向服务端传送数据。</strong>相对于WebSocket，这样使用Ajax会增加开销，但也就多一点点而已。如此一来，问题就变成了“什么时候需要关心这个差异？”如果需要以1次/秒或者更快的频率向服务端传输数据，那应该用WebSocket。0.2次/秒到1次/秒的频率是一个灰色地带，用WebSocket和用SSE差别不大；但如果你期望重负载，那就有必要确定基准点。频率低于0.2次/秒左右时，两者差别不大。</p><p>从服务端向客户端传输数据的性能如何？如果是文本数据而非二进制数据（如前文所提到的），SSE和WebSocket没什么区别。它们都用TCP/IP套接字，都是轻量级协议。延迟、带宽、服务器负载等都没有区别，除非……呃？除非什么？</p><p>当你在享用SSE的既存基础设施优势，并在客户端和服务端脚本之间设了一个网络服务器，区别就显现出来了。一个SSE连接不仅使用一个套接字，还会占用一个Apache线程或进程，如果用PHP，它会为这个连接专门创建一个PHP新实例。Apache和PHP会使用大量的内存，这会限制服务器所能支持的并行连接数。所以，要做到用SSE在数据传输性能上和WebSocket完全一样，需要写一个自己的后端服务器，当然，那些在任何情况下都会用自己的服务器并使用Node.js的人，会觉得这有什么稀奇的。</p><p>说一下WebSocket在旧版本浏览器上的兼容。当前，大约超过2/3的浏览器支持这些新技术，移动端浏览器的支持率会低一些。依惯例，每当需要双向套接字时，就会用到Flash，并且WebSocket的向后兼容通常是用Flash来做，这已经相当复杂了，如果浏览器上没有Flash，情况更糟。概括来说，WebSocket难兼容，SSE易兼容。</p><h1 id="即时通讯方法概述"><a href="#即时通讯方法概述" class="headerlink" title="即时通讯方法概述"></a>即时通讯方法概述</h1><p>1996年IETF  HTTP工作组发布了HTTP协议的1.0版本 ，到现在普遍使用的版本1.1，HTTP协议经历了17 年的发展。这种分布式、无状态、基于TCP的请求/响应式、在互联网盛行的今天得到广泛应用的协议，相对于互联网的迅猛发展，它似乎进步地很慢。互联网从兴起到现在，经历了门户网站盛行的web1.0时代，而后随着ajax技术的出现，发展为web应用盛行的web2.0时代，如今又朝着web3.0的方向迈进。反观http协议，从版本1.0发展到1.1，除了默认长连接之外就是缓存处理、带宽优化和安全性等方面的不痛不痒的改进。它一直保留着无状态、请求/响应模式，似乎从来没意识到这应该有所改变。</p><p>好在HTML5的时代已经到来，为Web端即时通讯的实现带来了WebSocket和SSE（Server-sent Events）两种技术方案</p><h2 id="Ajax短轮询：脚本发送http请求"><a href="#Ajax短轮询：脚本发送http请求" class="headerlink" title="Ajax短轮询：脚本发送http请求"></a>Ajax短轮询：脚本发送http请求</h2><p>传统的web应用要想与服务器交互，必须提交一个表单（form），服务器接收并处理传来的表单，然后返回全新的页面，因为前后两个页面的数据大部分都是相同的，这个过程传输了很多冗余的数据、浪费了带宽。于是Ajax技术便应运而生。</p><p>Ajax是Asynchronous JavaScript and XML的简称，由Jesse James Garrett 首先提出。这种技术开创性地允许浏览器脚本（JS）发送http请求。Outlook Web Access小组于98年使用，并很快成为IE4.0的一部分，但是这个技术一直很小众，直到2005年初，google在他的goole groups、gmail等交互式应用中广泛使用此种技术，才使得Ajax迅速被大家所接受。</p><p>Ajax的出现使客户端与服务器端传输数据少了很多，也快了很多，也满足了以丰富用户体验为特点的web2.0时代 初期发展的需要，但是慢慢地也暴露了他的弊端。比如无法满足即时通信等富交互式应用的实时更新数据的要求。这种浏览器端的小技术毕竟还是基于http协议，http协议要求的请求/响应的模式也是无法改变的，除非http协议本身有所改变。</p><h2 id="Comet：一种Hack技术（仍然是HTTP协议）"><a href="#Comet：一种Hack技术（仍然是HTTP协议）" class="headerlink" title="Comet：一种Hack技术（仍然是HTTP协议）"></a>Comet：一种Hack技术（仍然是HTTP协议）</h2><p>以即时通信为代表的web应用程序对数据的Low Latency要求，传统的基于轮询的方式已经无法满足，而且也会带来不好的用户体验。于是一种基于http长连接的“服务器推”技术便被hack出来。这种技术被命名为Comet，这个术语由Dojo Toolkit 的项目主管Alex Russell在博文Comet: Low Latency Data for the Browser首次提出，并沿用下来。</p><p>其实，服务器推很早就存在了，在经典的client/server模型中有广泛使用，只是浏览器太懒了，并没有对这种技术提供很好的支持。但是Ajax的出现使这种技术在浏览器上实现成为可能， google的gmail和gtalk的整合首先使用了这种技术。随着一些关键问题的解决（比如 IE 的加载显示问题），很快这种技术得到了认可，目前已经有很多成熟的开源Comet框架。</p><p>以下是典型的Ajax和Comet数据传输方式的对比，区别简单明了。典型的Ajax通信方式也是http协议的经典使用方式，要想取得数据，必须首先发送请求。在Low Latency要求比较高的web应用中，只能增加服务器请求的频率。Comet则不同，客户端与服务器端保持一个长连接，只有客户端需要的数据更新时，服务器才主动将数据推送给客户端。</p><p>Comet的实现主要有两种方式，基于Ajax的长轮询（long-polling）方式和基于 Iframe 及 htmlfile 的流（http streaming）方式。</p><h3 id="基于Ajax长轮询"><a href="#基于Ajax长轮询" class="headerlink" title="基于Ajax长轮询"></a>基于Ajax长轮询</h3><p>浏览器发出XMLHttpRequest 请求，服务器端接收到请求后，会阻塞请求直到有数据或者超时才返回，浏览器JS在处理请求返回信息（超时或有效数据）后再次发出请求，重新建立连接。在此期间服务器端可能已经有新的数据到达，服务器会选择把数据保存，直到重新建立连接，浏览器会把所有数据一次性取回。</p><h3 id="基于Iframe及htmlfile的流"><a href="#基于Iframe及htmlfile的流" class="headerlink" title="基于Iframe及htmlfile的流"></a>基于Iframe及htmlfile的流</h3><p>Iframe是html标记，这个标记的src属性会保持对指定服务器的长连接请求，服务器端则可以不停地返回数据，相对于第一种方式，这种方式跟传统的服务器推则更接近。</p><p>在第一种方式中，浏览器在收到数据后会直接调用JS回调函数，但是这种方式该如何响应数据呢？可以通过在返回数据中嵌入JS脚本的方式，如<code>&lt;script type=&quot;text/javascript&quot;&gt;js_func(“data from server ”)&lt;/script&gt;</code>，服务器端将返回的数据作为回调函数的参数，浏览器在收到数据后就会执行这段JS脚本。</p><h3 id="WebSocket-1"><a href="#WebSocket-1" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>WebScoket是一种新的协议，自然也是一种新的解决方案</p><h3 id="SSE-1"><a href="#SSE-1" class="headerlink" title="SSE"></a>SSE</h3><p>SSE是一种新的协议，自然也是一种新的解决方案</p><h1 id="即时通讯方案简单原理解析"><a href="#即时通讯方案简单原理解析" class="headerlink" title="即时通讯方案简单原理解析"></a>即时通讯方案简单原理解析</h1><h2 id="传统Web的通信原理"><a href="#传统Web的通信原理" class="headerlink" title="传统Web的通信原理"></a>传统Web的通信原理</h2><p>浏览器本身作为一个瘦客户端，不具备直接通过系统调用来达到和处于异地的另外一个客户端浏览器通信的功能。这和我们桌面应用的工作方式是不同的，通常桌面应用通过socket可以和远程主机上另外一端的一个进程建立TCP连接，从而达到全双工的即时通信。</p><p>浏览器从诞生开始一直走的是客户端请求服务器，服务器返回结果的模式，即使发展至今仍然没有任何改变。所以可以肯定的是，要想实现两个客户端的通信，必然要通过服务器进行信息的转发。例如A要和B通信，则应该是A先把信息发送给IM应用服务器，服务器根据A信息中携带的接收者将它再转发给B，同样B到A也是这种模式。</p><h2 id="传统通信模式实现IM应用需要解决的问题"><a href="#传统通信模式实现IM应用需要解决的问题" class="headerlink" title="传统通信模式实现IM应用需要解决的问题"></a>传统通信模式实现IM应用需要解决的问题</h2><p>我们认识到基于web实现IM软件依然要走浏览器请求服务器的模式，这这种方式下，针对IM软件的开发需要解决如下三个问题：</p><ul><li>双全工通信：即达到浏览器拉取（pull）服务器数据，服务器推送（push）数据到浏览器；</li><li>低延迟：即浏览器A发送给B的信息经过服务器要快速转发给B，同理B的信息也要快速交给A，实际上就是要求任何浏览器能够快速请求服务器的数据，服务器能够快速推送数据到浏览器；</li><li>支持跨域：通常客户端浏览器和服务器都是处于网络的不同位置，浏览器本身不允许通过脚本直接访问不同域名下的服务器，即使IP地址相同域名不同也不行，域名相同端口不同也不行，这方面主要是为了安全考虑。</li></ul><h2 id="全双工低延迟解决方案"><a href="#全双工低延迟解决方案" class="headerlink" title="全双工低延迟解决方案"></a>全双工低延迟解决方案</h2><h3 id="客户端浏览器短轮询"><a href="#客户端浏览器短轮询" class="headerlink" title="客户端浏览器短轮询"></a>客户端浏览器短轮询</h3><p>这是最简单的一种解决方案，其原理是在客户端通过Ajax的方式的方式每隔一小段时间就发送一个请求到服务器，服务器返回最新数据，然后客户端根据获得的数据来更新界面，这样就间接实现了即时通信。优点是简单，缺点是对服务器压力较大，浪费带宽流量（通常情况下数据都是没有发生改变的）</p><h3 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询"></a>长轮询</h3><p>在上面的轮询解决方案中，由于每次都要发送一个请求，服务端不管数据是否发生变化都发送数据，请求完成后连接关闭。这中间经过的很多通信是不必要的，于是又出现了长轮询（long-polling）方式。这种方式是客户端发送一个请求到服务器，服务器查看客户端请求的数据是否发生了变化（是否有最新数据），如果发生变化则立即响应返回，否则保持这个连接并定期检查最新数据，直到发生了数据更新或连接超时。同时客户端连接一旦断开，则再次发出请求，这样在相同时间内大大减少了客户端请求服务器的次数。</p><h3 id="基于http-stream通信"><a href="#基于http-stream通信" class="headerlink" title="基于http-stream通信"></a>基于http-stream通信</h3><p>还存在一种基于http-stream流的通信方式。其原理是让客户端在一次请求中保持和服务端连接不断开，然后服务端源源不断传送数据给客户端，就好比数据流一样，并不是一次性将数据全部发给客户端。它与polling方式的区别在于整个通信过程客户端只发送一次请求，然后服务端保持与客户端的长连接，并利用这个连接在回送数据给客户端。</p><p>这种方案有分为几种不同的数据流传输方式。</p><h4 id="基于XHR对象的streaming方式"><a href="#基于XHR对象的streaming方式" class="headerlink" title="基于XHR对象的streaming方式"></a>基于XHR对象的streaming方式</h4><p>这种方式的思想是构造一个XHR对象，通过监听它的onreadystatechange事件，当它的readyState为3的时候，获取它的responseText然后进行处理，readyState为3表示数据传送中，整个通信过程还没有结束，所以它还在不断获取服务端发送过来的数据，直到readyState为4的时候才表示数据发送完毕，一次通信过程结束。在这个过程中，服务端传给客户端的数据是分多次以stream的形式发送给客户端，客户端也是通过stream形式来获取的，所以称作http-streaming数据流方式，</p><p>这里由于客户端收到的数据是分段发过来的，所以最好定义一个游标received，来获取最新数据而舍弃之前已经接收到的数据，通过这个游标每次将接收到的最新数据打印出来，并且在通信结束后打印出整个responseText。</p><h4 id="基于iframe数据流"><a href="#基于iframe数据流" class="headerlink" title="基于iframe数据流"></a>基于iframe数据流</h4><p>由于低版本的IE不允许在XHR的readyState为3的时候获取其responseText属性，为了达到在IE上使用这个技术，又出现了基于iframe的数据流通信方式。具体来讲，就是在浏览器中动态载入一个iframe,让它的src属性指向请求的服务器的URL，实际上就是向服务器发送了一个http请求，然后在浏览器端创建一个处理数据的函数，在服务端通过iframe与浏览器的长连接定时输出数据给客户端，但是这个返回的数据并不是一般的数据，而是一个类似于<code>&lt;script type=\&quot;text/javascript\&quot;&gt;parent.process(&#39;&quot;+randomNum.toString()+&quot;&#39;)&lt;/script&gt;</code>脚本执行的方式，浏览器接收到这个数据就会将它解析成js代码并找到页面上指定的函数去执行，实际上是服务端间接使用自己的数据间接调用了客户端的代码，达到实时更新客户端的目的。</p><h4 id="基于htmlfile的数据流通信"><a href="#基于htmlfile的数据流通信" class="headerlink" title="基于htmlfile的数据流通信"></a>基于htmlfile的数据流通信</h4><p>又出现新问题了，在IE中，使用iframe请求服务端，服务端保持通信连接没有全部返回之前，浏览器title一直处于加载状态，并且底部也显示正在加载，这对于一个产品来讲用户体验是不好的，于是谷歌的天才们又想出了一中hack方式。就是在IE中，动态生成一个htmlfile对象，这个对象ActiveX形式的com组件，它实际上就是一个在内存中实现的HTML文档，通过将生成的iframe添加到这个内存中的HTMLfile中，并利用iframe的数据流通信方式达到上面的效果。同时由于HTMLfile对象并不是直接添加到页面上的，所以并没有造成浏览器显示正在加载的现象。</p><h4 id="SSE-2"><a href="#SSE-2" class="headerlink" title="SSE"></a>SSE</h4><p>为了解决浏览器只能够单向传输数据到服务端，HTML5提供了一种新的技术叫做服务器推送事件SSE，它能够实现客户端请求服务端，然后服务端利用与客户端建立的这条通信连接push数据给客户端，客户端接收数据并处理的目的。从独立的角度看，SSE技术提供的是从服务器单向推送数据给浏览器的功能，但是配合浏览器主动请求，实际上就实现了客户端和服务器的双向通信。它的原理是在客户端构造一个eventSource对象，该对象具有readySate属性，分别表示如下：</p><p>0：正在连接到服务器；<br>1：打开了连接；<br>2：关闭了连接。</p><p>同时eventSource对象会保持与服务器的长连接，断开后会自动重连，如果要强制连接可以调用它的close方法。可以它的监听onmessage事件，服务端遵循SSE数据传输的格式给客户端，客户端在onmessage事件触发时就能够接收到数据，从而进行某种处理</p><blockquote><p>浏览器原生API EventSource对SSE有一些限制，比如无法支持POST请求和自定义头部等等，可以采用<code>@microsoft/fetch-event-source</code>来进行增强</p></blockquote><h4 id="WebSocket-2"><a href="#WebSocket-2" class="headerlink" title="WebSocket"></a>WebSocket</h4><p>在上面的这些解决方案中，都是利用浏览器单向请求服务器或者服务器单向推送数据到浏览器这些技术组合在一起而形成的hack技术，在HTML5中，为了加强web的功能，提供了websocket技术，它不仅是一种web通信方式，也是一种应用层协议。它提供了浏览器和服务器之间原生的双全工跨域通信，通过浏览器和服务器之间建立websocket连接（实际上是TCP连接）,在同一时刻能够实现客户端到服务器和服务器到客户端的数据发送。关于该技术的原理，请参见：《WebSocket详解（一）：初步认识WebSocket技术》、《WebSocket详解（二）：技术原理、代码演示和应用案例》、《WebSocket详解（三）：深入WebSocket通信协议细节》，此处就不在赘述了，直接给出代码。在看代码之前，需要先了解websocket整个工作过程。</p><p>首先是客户端new 一个websocket对象，该对象会发送一个http请求到服务端，服务端发现这是个webscoket请求，会同意协议转换，发送回客户端一个101状态码的response，以上过程称之为一次握手，经过这次握手之后，客户端就和服务端建立了一条TCP连接，在该连接上，服务端和客户端就可以进行双向通信了。这时的双向通信在应用层走的就是ws或者wss协议了，和http就没有关系了。所谓的ws协议，就是要求客户端和服务端遵循某种格式发送数据报文（帧），然后对方才能够理解。</p><p>参考文章：<br><a href="http://www.52im.net/thread-336-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">Web端即时通讯技术盘点：短轮询、Comet、Websocket、SSE</a><br><a href="http://www.52im.net/thread-338-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">新手入门贴：史上最全Web端即时通讯技术原理详解</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近对chatgpt能够进行流式请求返回的协议产生了一点好奇，于是就去了解了一下，一开始我以为是HTTP2，或者是WS协议，后来发现都不是，而是一种叫做SSE（Server-Sent Events）的协议。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（一）：线性代数与模型变换</title>
    <link href="https://sunra.top/2023/03/30/games101-linear-algebra-and-transform/"/>
    <id>https://sunra.top/2023/03/30/games101-linear-algebra-and-transform/</id>
    <published>2023-03-30T08:16:06.000Z</published>
    <updated>2023-05-16T05:31:16.910Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始重新系统学习计算机图形学的知识，于是目光放到了GAMES101，一边看，一边做，一边总结吧。这次总结下线性代数的基础知识，以及游戏中是如何做模型变换的。最后完成一下作业1.</p><a id="more"></a><h1 id="线性代数基础知识"><a href="#线性代数基础知识" class="headerlink" title="线性代数基础知识"></a>线性代数基础知识</h1><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><ol><li>向量就是一个有方向，有长度的线段，用数学符号写作：$\vec{a}$</li><li>或者表示为一个从起点指向终点的的线段，比如有两个点A，B，那么从A指向B的向量可以表示为$\vec{AB}=B - A$</li><li>向量没有绝对的起点，也就是说，如果在空间中移动一个向量，向量本身是没变的</li><li>向量的长度表示为：$||\vec{a}||$，向量除以自身长度就是改方向的单位向量：$\frac{\vec{a}}{||\vec{a}||}$</li><li>向量相加符合平行四边形法则或者叫三角形法则</li></ol><h2 id="可以用向量表示坐标"><a href="#可以用向量表示坐标" class="headerlink" title="可以用向量表示坐标"></a>可以用向量表示坐标</h2><p>如果有两个单位向量相互垂直，我们选择其中一个是$\vec{X}$，一个是$\vec{Y}$，我们可以表示一个向量$\vec{A}=\binom{x}{y}$，或者$\vec{A}^T=(x,y)$</p><p>我们假设这个向量起点是原点，那么终点就是我们平时在几何中说的(x,y)点</p><h2 id="向量的点乘"><a href="#向量的点乘" class="headerlink" title="向量的点乘"></a>向量的点乘</h2><p>向量之间可以点乘，假设有两个方向不同的向量$\vec{a}, \vec{b}$，假设将他们的起点放到一起，他们之间会存在一个夹角，假设为$\theta$</p><p>那么 $\vec{a} \cdot \vec{b} = ||\vec{a}||||\vec{b}||cos\theta$</p><p>向量的点乘有交换律和结合律。</p><script type="math/tex; mode=display">\vec{a} \cdot \vec{b} = \vec{b} \cdot \vec{a} \\\vec{a} \cdot (\vec{b} + \vec{c}) = \vec{a} \cdot \vec{b} + \vec{a} \cdot \vec{c} \\(k\vec{a}) \cdot \vec{b} = \vec{a} \cdot (k\vec{b}) = k(\vec{a} \cdot \vec{b})</script><p>用坐标方式表示向量点乘为：</p><script type="math/tex; mode=display">\vec{a} \cdot \vec{b} = \binom{x_a}{y_a} \cdot \binom{x_b}{y_b} = x_ax_b + y_ay_b \\\vec{a} \cdot \vec{b} = \begin{bmatrix}    x_a \\ y_a \\ z_a\end{bmatrix} \cdot \begin{bmatrix}    x_b \\ y_b \\ z_b\end{bmatrix} = x_ay_a + x_by_b + z_az_b</script><p>向量点乘的应用有：</p><ul><li>我们可以用两个向量之间点乘的结果和0比较来判断二者之间是锐角还是钝角。</li><li>求两个向量之间的夹角</li><li>求一个向量在另一个向量上的投影</li></ul><h2 id="向量的叉乘"><a href="#向量的叉乘" class="headerlink" title="向量的叉乘"></a>向量的叉乘</h2><p>向量还有一种乘法是叉乘</p><p>向量叉乘的方向遵循右手定则，假设 $\vec{a} \times \vec{b}$，那么结果的方向就是右手四指从向量a的方向转向b的方向握紧，然后竖起大拇指是，拇指的方向。也就是说叉乘的结果垂直于a和b所在的平面</p><p>那么叉乘的长度其实是 $||\vec{a} \times \vec{b}||=||\vec{a}||||\vec{b}||sin\theta$</p><p>向量的叉乘并不支持结合律，准确的说，是交换叉乘顺序的结果是相反的，即方向是反的：$\vec{a} \times \vec{b} = -\vec{b} \times \vec{a}$</p><p>用矩阵的方式表示向量叉乘为：</p><script type="math/tex; mode=display">\vec{a} \times \vec{b} = \begin{bmatrix}    y_az_b - y_bz_a \\    x_az_b - x_bz_a \\    x_ay_b - x_by_a\end{bmatrix} \\\vec{a} \times \vec{b} = A * \vec{b} = \begin{bmatrix}    0 & -z_a & y_a \\    z_a & 0 & -x_a \\    -y_a & x_a & 0 \\\end{bmatrix} \begin{bmatrix}    x_b \\ y_b \\ z_b\end{bmatrix}</script><p>叉乘可以判断一个向量在另一个向量的左边还是右边，这个比较好理解，右手定则旋转的时候，是顺时针还是逆时针转，结果是相反的。</p><p>还有一个作用是判断一个点是否在一个三角形内部</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680175423/origin-of-ray/screenshot-20230330-192228_m9tuer.png" alt></p><p>上图中，如果向量BC叉乘向量BP，向量CA叉乘向量CP，向量AB叉乘向量AP的符号都是相同的，那么说明P点在内部</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>矩阵就是一个m行，n列的二维数组。</p><p>两个矩阵可以做乘法的前提是，第一个矩阵的列数和第二个矩阵的行数是相同的。</p><p>也就是说一个M行N列的矩阵可以和一个N行P列的矩阵相乘，结果是一个M行P列的矩阵。</p><p>假设A，B两个矩阵相乘的到C矩阵，其中A的每一项为$a<em>{ij}$， B的每一项为$B</em>{ij}$, C的每一项为$c<em>{ij}$，那么 $c</em>{ij} = \sum<em>{k=0}^{k=N}a</em>{ik}b_{kj}$</p><p>这里比较重要的一点是，如何讲坐标转换的方程组写成矩阵的形式</p><p>比如，如何讲二维坐标系上的点根据y轴做对称</p><p>用方程组来写就是</p><script type="math/tex; mode=display">\begin{cases}    x' = -x; \\    y' = y\end{cases}</script><p>用矩阵的方式来写就是</p><script type="math/tex; mode=display">\begin{bmatrix}    -1 & 0 \\    0 & 1\end{bmatrix}\begin{bmatrix}    x \\ y\end{bmatrix} = \begin{bmatrix}    -x \\ y\end{bmatrix}</script><p>每个矩阵都有自己的转置矩阵和逆矩阵</p><p>A的转置矩阵写作 $A_T$，且$(AB)^T=B^TA^T$</p><p>A的逆矩阵写作 $A^{-1}$，且 $AA^{-1} = I$，其中I是单位矩阵，任何矩阵乘上单位矩阵等于什么都没做，也就是说任何矩阵乘上A矩阵所产生的变化都可以通过再乘上A的逆矩阵还原</p><h1 id="如何用矩阵做变换（Transform）"><a href="#如何用矩阵做变换（Transform）" class="headerlink" title="如何用矩阵做变换（Transform）"></a>如何用矩阵做变换（Transform）</h1><h2 id="2D变换"><a href="#2D变换" class="headerlink" title="2D变换"></a>2D变换</h2><ol><li>缩小</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-102939_2x_ch8yoi.png" alt></p><p>当图片缩放s倍的时候，用方程式来表示就是</p><script type="math/tex; mode=display">\begin{cases}x' = sx \\y' = sy \\\end{cases}</script><p>对应的缩放矩阵就是：</p><script type="math/tex; mode=display">\begin{bmatrix}s & 0 \\0 & s\end{bmatrix}</script><ol><li>反转</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103001_2x_npdyxc.png" alt></p><script type="math/tex; mode=display">\begin{bmatrix}-1 & 0 \\0 & 1 \\\end{bmatrix}</script><ol><li>切变</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-103010_2x_h48ruq.png" alt></p><script type="math/tex; mode=display">\begin{bmatrix}1 & a \\0 & 1\end{bmatrix}</script><ol><li>旋转</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103029_2x_khbazr.png" alt></p><script type="math/tex; mode=display">\begin{bmatrix}cos\theta & -sin\theta \\sin\theta & cos\theta\end{bmatrix}</script><p>到目前为止，我们所有的变换都可以通过矩阵的方式来表达，因为我们之前的这些变换都可以用以下方程式来表达：</p><script type="math/tex; mode=display">\begin{cases}x' = ax + by \\y' = cx + dy\end{cases}</script><p>表示为矩阵就是</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y'\end{bmatrix}=\begin{bmatrix}a & b \\c & d \\\end{bmatrix}\begin{bmatrix}x \\ y\end{bmatrix}</script><p>但是有个问题是，这种方式无法表现平移，因为平移无法写成这种形式</p><ol><li>平移</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229931/origin-of-ray/WX20230331-103041_2x_cdpzl7.png" alt></p><p>平移的方程组是这样的：</p><script type="math/tex; mode=display">\begin{cases}x' = x + t_x;\\y' = y + t_y;\end{cases}</script><p>如果讲缩放，旋转，平移都用矩阵来表示，应该如下：</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y'\end{bmatrix}=\begin{bmatrix}a & b \\c & d \end{bmatrix}\begin{bmatrix}x \\ y\end{bmatrix}+\begin{bmatrix}t_x \\ t_y\end{bmatrix}</script><p>于是这个时候我们就要引入齐次坐标，即加入w，这个时候2D的点坐标表示为(x, y, 1),2D的向量表示为（x,y,0）</p><p>当表示点的时候，w为1，当表示向量的时候，w为0，而且这样有一个很神奇的地方，就是两个点相减，w会变成0，恰好正是向量，点和向量相加，w为1，也是个点</p><p>用了齐次坐标之后，我们就可以统一旋转，缩放，平移到一个矩阵中了</p><p>平移用齐次坐标表示为：</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y' \\ z'\end{bmatrix}=\begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}x \\ y \\ 1\end{bmatrix}=\begin{bmatrix}x + t_x \\y + t_y \\1\end{bmatrix}</script><ol><li>混合</li></ol><p>我们现在可以用齐次坐标来分别表示旋转，平移，缩放</p><script type="math/tex; mode=display">S(s_x, s_y) = \begin{bmatrix}s_x & 0 & 0 \\0 & s_y & 0 \\0 & 0 & 1\end{bmatrix}\\R(\theta) = \begin{matrix}cos\theta & -sin\theta & 0 \\sin\theta & cos\theta & 0 \\0 & 0 & 1\end{matrix}\\T(t_x, t_y) = \begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1\end{bmatrix}</script><p>那么我们如何将这些操作混合呢？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680229930/origin-of-ray/WX20230331-103100_2x_f3wqos.png" alt></p><p>可以看到上图，我们现平移后旋转，与先旋转后，平移的结果是不同的，因为我们的旋转矩阵是绕着原点旋转的</p><p>所以我们一般会规定顺序来进行混合操作，先操作的先和当前点的坐标左乘，得到新的点之后，再和接下来的操作矩阵左乘就好。</p><p>然后虽然我们的顺序不能变，因为矩阵相乘没有交换律，但是矩阵相乘是有结合律的，也就是：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680235553/origin-of-ray/WX20230331-120541_2x_tdldry.png" alt></p><p>所以我们可以实现的到旋转，缩放，平移矩阵相乘的结果作为变换矩阵，然后再和每一个点去左乘</p><p>这里其实还有一个问题，就是，我们如果就想让一个点绕自己的左下角旋转怎么办？</p><p>很简单，将左下角平移到原点，然后旋转，最后再将左下角平移回去：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680235680/origin-of-ray/WX20230331-120741_2x_owrzbw.png" alt></p><h2 id="3D变换"><a href="#3D变换" class="headerlink" title="3D变换"></a>3D变换</h2><p>3d的变换其实和2D没什么区别，只是齐次坐标有四个维度而已</p><p>变换矩阵如下：</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\ y' \\ z' \\ 1\end{bmatrix}=\begin{bmatrix}a & b & c & t_x \\d & e & f & t_y \\g & h & o & t_z \\0 & 0 & 0 & 1\end{bmatrix}\begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix}</script><p>其中缩放矩阵可以写作；</p><script type="math/tex; mode=display">S(s_x, s_y, s_z) = \begin{bmatrix}s_x & 0 & 0 & 0\\0 & x_y & 0 & 0\\0 & 0 & s_z & 0 \\0 & 0 & 0 & 1\end{bmatrix}</script><p>平移矩阵可以表示为：</p><script type="math/tex; mode=display">T(t_x, t_y, t_z) = \begin{bmatrix}1 & 0 & 0 & t_x \\0 & 1 & 0 & t_y \\0 & 0 & 1 & t_z \\0 & 0 & 0 & 1\end{bmatrix}</script><p>而旋转就比较复杂了，因为它可以分为绕不同轴的旋转</p><script type="math/tex; mode=display">R_x(\theta) = \begin{bmatrix}1 & 0 & 0 & 0 \\0 & cos\theta & -sin\theta & 0 \\0 & sin\theta & cos\theta & 0 \\0 & 0 & 0 & 1\end{bmatrix} \\R_y(\theta) = \begin{bmatrix}cos\theta & 0 & sin\theta & 0 \\0 & 1 & 0 & 0 \\sin\theta & 0 & cos\theta & 0 \\0 & 0 & 0 & 1\end{bmatrix} \\R_z(\theta) = \begin{bmatrix}cos\theta & -sin\theta & 0 & 0 \\sin\theta & cos\theta & 0 & 0 \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1\end{bmatrix}</script><p>这里还有一个公式，可以将任意一个旋转矩阵分解为三个轴方向的旋转矩阵相乘。下面这种方式表示绕$\vec{n}$轴旋转$\theta$角度。</p><script type="math/tex; mode=display">R(\vec{n}, \alpha) = cos\alpha\vec{I} + (1 - cos\alpha)\vec{n}\vec{n}^T + sin\alpha\begin{bmatrix}0 & -n_z & n_y \\n_z & 0 & -n_x \\-n_y & n_x & 0 \\\end{bmatrix}</script><h1 id="图形学中的观测变换"><a href="#图形学中的观测变换" class="headerlink" title="图形学中的观测变换"></a>图形学中的观测变换</h1><p>我们在做游戏开发的时候，写Shader的时候，经常会用到一个叫做MVP矩阵的东西，将模型上的点坐标变为屏幕上的坐标。</p><p>这里的MVP指的分别是Model，View，Projection，即模型变换，视图变换和投影变换</p><p>模型变换是将坐标从模型自身的坐标系变为游戏世界坐标系上的坐标</p><p>视图变换则是将世界坐标系上的坐标变为观察空间的坐标</p><p>投影变换则是将观察空间的坐标变为裁剪空间，这一步其实并没有做投影到二维平面的操作，具体的投影操作是渲染管线中写在GPU中的，一般不在Shader处理。</p><p>我们这里说的观测变换只是渲染管线中的一步，在最开始，是在顶点着色器中逐顶点操作的，我们得到了点在裁剪空间中的坐标，在接下来的渲染管线中，还要经过光栅化，采样，逐片元的片元着色器输出颜色，深度测试等等才会最终投影到二维平面上。</p><p>累比平时我们的拍照的方式，Model矩阵就像是我们找一个合适的拍照位置，View矩阵就是用摄像机找一个角度</p><p>我们这里不讲Model矩阵，因为他和View矩阵一样，就是从一个坐标系变为另一个坐标系，而Projection矩阵不太一样的地方是，观察空间是一个边长为1正方体的盒子，我们需要考虑缩放</p><h2 id="View矩阵"><a href="#View矩阵" class="headerlink" title="View矩阵"></a>View矩阵</h2><p>View矩阵是将点从世界坐标变为观察空间，即从相对世界坐标系原点，变为相对于摄像机位置的坐标。</p><p>在经过Model变换之后，我们已经有了点在空间中的坐标，现在我们需要定义摄像机在空间的位置和方向：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680243906/origin-of-ray/WX20230331-142433_2x_an1pc4.png" alt></p><p>这里摄像机的坐标和方向，都是相对于世界坐标系的。而我们的物体坐标目前也是相对于世界坐标系的。</p><p>现在我们要做的就是把相对于世界坐标系的物体坐标变为相对于摄像机坐标。</p><p>这里我们引入一个常见的物理概念——相对运动，即如果对摄像机和物体做相同的变换操作，二者相对位置不变。</p><p>那我们现在可以尝试把摄像机移动到原点，摄像机的观察方向朝向世界坐标系z轴的负方向，求出这个变换的矩阵，再对每个点应用这个矩阵，就相当于把物体移动到了观察空间。虽然从物体坐标来看，是在世界坐标系中做了一定的移动，但是这个移动没有改变物体和摄像机的相对位置，也成功把摄像机移动到了世界坐标的原点，所以结果就等于把物体移动到了观察空间。</p><p>那么怎么得到这个View矩阵呢？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244406/origin-of-ray/WX20230331-143313_2x_om55nf.png" alt></p><p>这种方法比较复杂</p><p>我们这里可以利用一个比较好的性质，就是旋转矩阵其实是一个正交矩阵，正交矩阵的逆矩阵和转置矩阵是相同的，也就是说，我们可以求一下世界坐标轴变换到摄像机坐标轴的矩阵，然后求他的转置矩阵，即逆矩阵，就是摄像机坐标轴变换到世界坐标轴的矩阵</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244572/origin-of-ray/WX20230331-143602_2x_cpsn3o.png" alt></p><h2 id="Projection矩阵"><a href="#Projection矩阵" class="headerlink" title="Projection矩阵"></a>Projection矩阵</h2><p>刚才通过View矩阵，我们摄像机和物体整体相对位置不变移动到了摄像机在世界坐标系原点的位置。</p><p>这样做的目的是什么呢？当然有一个好处是好理解，但是其实一点对于计算器来说没有意义，因为都是乘一个矩阵，计算量不会有差别。</p><p>这样做的另一个好处是，为了投影矩阵减少计算。</p><p>我们的投影矩阵分为两种，一种是平行投影，一种是正交投影：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680244940/origin-of-ray/WX20230331-144201_2x_are3h7.png" alt></p><h3 id="平行投影"><a href="#平行投影" class="headerlink" title="平行投影"></a>平行投影</h3><p>我们先看比较简单的平行投影</p><p>对于这个投影一个比较简单的理解方式，就是直接把z轴丢掉，就是最终这个点在屏幕上的坐标，然后x和y方向都通过平移和缩放到[-1,1]之间。这里我们可以直接丢掉z的原因就在于我们的摄像机被移动到了原点且朝向z轴负方向。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245161/origin-of-ray/WX20230331-144545_2x_f4qhis.png" alt></p><p>但是，丢掉z轴这个事情目前还不能做，我们还需要z的信息后续做深度测试，我们现在要做的是将x,y,z归一化到$[-1,1]^3$的正方体中</p><p>如下图所示，在平行投影中，我们一开始的观察空间是一个立方体，我们要将这个立方体的中心移动到原点，并且缩放为一个边长为1的正方体</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245344/origin-of-ray/WX20230331-144846_2x_jxcjxv.png" alt></p><h3 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a>正交投影</h3><p>正交投影和平行投影不同点在于有一个近大远小的效果，它的初始观察空间不是一个立方体，而是一个梯台</p><p>我们在求这个梯台归一化矩阵可以分两步走：</p><ol><li>将梯台缩放为立方体，这个时候的观察空间就相当于平行投影了</li><li>再利用平行投影的归一化矩阵</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245630/origin-of-ray/WX20230331-145336_2x_iwwpge.png" alt></p><p>所以我们目前主要关注第一步就好</p><p>而又因为我们现在的摄像机是朝向z负方向的，所以缩放底并不会对z坐标造成影响，我们只需要关注x和y，我们以y坐标举例：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1680245798/origin-of-ray/WX20230331-145627_2x_bdvmtg.png" alt></p><p>同样的，x左边变为$x’ = \frac{n}{z}x$</p><p>那么这个时候，我们的变换矩阵就可以写出来了，首先是，正交投影空间变平行投影空间的</p><script type="math/tex; mode=display">M_{presp-ortho}\begin{bmatrix}x \\ y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}\frac{n}{z}x \\ \frac{n}{z}y \\ z \\ 1\end{bmatrix} = \begin{bmatrix}nx \\ ny \\ z^2 \\ z\end{bmatrix}\\即 \\M_{presp-ortho} = \begin{bmatrix}n & 0 & 0 & 0 \\0 & n & 0 & 0 \\0 & 0 & z & 0 \\0 & 0 & 1 & 0 \\\end{bmatrix}</script><p>那么正式的正交投影View矩阵就是$M_{presp-ortho}$再乘平行投影的View矩阵</p><p>至此，我们完成了将一个点从模型空间变换到了世界坐标系下的归一化空间中</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开始重新系统学习计算机图形学的知识，于是目光放到了GAMES101，一边看，一边做，一边总结吧。这次总结下线性代数的基础知识，以及游戏中是如何做模型变换的。最后完成一下作业1.&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>如何将Canvas转为SVG</title>
    <link href="https://sunra.top/2023/03/30/canvas-to-svg/"/>
    <id>https://sunra.top/2023/03/30/canvas-to-svg/</id>
    <published>2023-03-30T04:27:55.000Z</published>
    <updated>2023-05-16T05:31:16.906Z</updated>
    
    <content type="html"><![CDATA[<p>之前做了个关系图谱的需求，因为导出png等图片放大会失真，所以希望导出为矢量图。但是G6自带的导出图谱功能再Canvas模式下无法导出为SVG，而SVG模式又有很多特性不支持，所以就想办法能不能把Canvas导出为SVG了。</p><a id="more"></a><p>本代码使用了一个多年的老库，叫做canvas-to-svg</p><p>该库模拟了canvas并且暴露了一些canvas的api，最后可以导出为svg</p><p>需要注意的是，部分canvas的api并不支持，比如 setTransform，resetTransform等，如果你需要用到这两个api，可以将其拆分为translate和rotate等</p><p>直接上代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CanvasToSVG <span class="keyword">from</span> <span class="string">'canvas-to-svg'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTextWaterMaskToCanvas</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: CanvasRenderingContext2D,</span></span></span><br><span class="line"><span class="function"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  context.font = <span class="string">'16px Microsoft YaHei'</span>;</span><br><span class="line">  context.fillStyle = <span class="string">'#F2F3F5'</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width, height &#125; = context.canvas;</span><br><span class="line">  <span class="keyword">const</span> textMaskCountHorizontal = <span class="built_in">Math</span>.max(<span class="number">1</span>, width / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> textMaskCountVertical = <span class="built_in">Math</span>.max(<span class="number">1</span>, height / <span class="number">150</span>);</span><br><span class="line">  <span class="keyword">const</span> fwidth = width / textMaskCountHorizontal;</span><br><span class="line">  <span class="keyword">const</span> fheight = height / textMaskCountVertical;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> hh = <span class="number">0</span>; hh &lt; height; hh += fheight) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ww = <span class="number">0</span>; ww &lt; width; ww += fwidth) &#123;</span><br><span class="line">      context.translate(ww, hh);</span><br><span class="line">      context.rotate(-<span class="built_in">Math</span>.atan(height / width));</span><br><span class="line">      context.fillText(textWaterMask, -fwidth / <span class="number">2</span>, fheight / <span class="number">2</span>);</span><br><span class="line">      context.rotate(<span class="built_in">Math</span>.atan(height / width));</span><br><span class="line">      context.translate(-ww, -hh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadFullImageWithWaterMaskCreator</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  graphInstance: IGraph | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  textWaterMask: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    name?: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">type</span>?: DataUrlType,</span></span></span><br><span class="line"><span class="function"><span class="params">    imageConfig?: &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      backgroundColor?: <span class="built_in">string</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">      padding?: <span class="built_in">number</span> | <span class="built_in">number</span>[];</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">    callback?: (success: <span class="built_in">boolean</span>) =&gt; <span class="built_in">void</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    graphInstance?.toFullDataURL(</span><br><span class="line">      res =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.src = res;</span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// const canvas = document.createElement('canvas');</span></span><br><span class="line">            <span class="comment">// canvas.width = image.width;</span></span><br><span class="line">            <span class="comment">// canvas.height = image.height;</span></span><br><span class="line">            <span class="comment">// const context = canvas.getContext('2d');</span></span><br><span class="line">            <span class="keyword">const</span> context = <span class="keyword">new</span> CanvasToSVG(image.width, image.height);</span><br><span class="line">            <span class="keyword">if</span> (context &amp;&amp; name) &#123;</span><br><span class="line">              context.rect(<span class="number">0</span>, <span class="number">0</span>, image.width, image.height);</span><br><span class="line">              context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, image.width, image.height);</span><br><span class="line"></span><br><span class="line">              addTextWaterMaskToCanvas(context, textWaterMask);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// downloadCanvasImage(canvas, name, type);</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> svg = context.getSerializedSvg(<span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">const</span> svgData = URL.createObjectURL(</span><br><span class="line">                <span class="keyword">new</span> Blob([svg], &#123; <span class="keyword">type</span>: <span class="string">'image/svg'</span> &#125;),</span><br><span class="line">              );</span><br><span class="line">              <span class="keyword">const</span> downloadLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">              downloadLink.download = <span class="string">`<span class="subst">$&#123;name&#125;</span>.svg`</span>;</span><br><span class="line">              downloadLink.href = svgData;</span><br><span class="line">              downloadLink.click();</span><br><span class="line"></span><br><span class="line">              callback?.(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            callback?.(<span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        image.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          callback?.(<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">type</span>,</span><br><span class="line">      imageConfig,</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前做了个关系图谱的需求，因为导出png等图片放大会失真，所以希望导出为矢量图。但是G6自带的导出图谱功能再Canvas模式下无法导出为SVG，而SVG模式又有很多特性不支持，所以就想办法能不能把Canvas导出为SVG了。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>贪心算法和模拟退火算法</title>
    <link href="https://sunra.top/2023/03/24/greedy-algorithm-and-simulated-annealing-algorithm/"/>
    <id>https://sunra.top/2023/03/24/greedy-algorithm-and-simulated-annealing-algorithm/</id>
    <published>2023-03-24T06:15:46.000Z</published>
    <updated>2023-05-16T05:31:16.910Z</updated>
    
    <content type="html"><![CDATA[<p>贪心算法是比较常见的一种算法，贪心的本质是选择每一阶段的局部最优，从而达到全局最优。而模拟退火算法比较常见于人工智能当中。</p><p>这两种算法之所以放在一起考虑是因为，模拟退火算法像是加强版的贪心算法。</p><p>如果一个问题的每一步的局部最优解无法得到全局最优解，我们常规前后端程序员的算法思维想到的是动态规划。</p><p>但是对于AI开发来讲，参数可能是上亿级别的，根本没有办法动态规划，这个时候就可以尝试用模拟退火算法以一定概率跳出这个局部，去整体中找到一个更优的答案，但是，其实这种算法也不像常规算法一样，会得到一个必然的结果。</p><p>本文把两种算法放在一起进行总结和比较，看看他们分别适用于什么情况，以及如何使用。</p><a id="more"></a><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="什么是贪心算法"><a href="#什么是贪心算法" class="headerlink" title="什么是贪心算法"></a>什么是贪心算法</h2><p>贪心的本质是选择每一阶段的局部最优，从而达到全局最优。</p><p>这么说有点抽象，来举一个例子：</p><p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？</p><p>指定每次拿最大的，最终结果就是拿走最大数额的钱。</p><p>每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。</p><p>再举一个例子如果是 有一堆盒子，你有一个背包体积为n，如何把背包尽可能装满，如果还每次选最大的盒子，就不行了。这时候就需要动态规划。</p><h2 id="什么时候使用贪心算法"><a href="#什么时候使用贪心算法" class="headerlink" title="什么时候使用贪心算法"></a>什么时候使用贪心算法</h2><p>说实话贪心算法并没有固定的套路。</p><p>所以唯一的难点就是如何通过局部最优，推出整体最优。</p><p>那么如何能看出局部最优是否能推出整体最优呢？有没有什么固定策略或者套路呢？</p><p>不好意思，也没有！ 靠自己手动模拟，如果模拟可行，就可以试一试贪心策略，如果不可行，可能需要动态规划。</p><p>有同学问了如何验证可不可以用贪心算法呢？</p><p>最好用的策略就是举反例，如果想不到反例，那么就试一试贪心吧。</p><h2 id="贪心算法一般步骤："><a href="#贪心算法一般步骤：" class="headerlink" title="贪心算法一般步骤："></a>贪心算法一般步骤：</h2><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>这个四步其实过于理论化了，我们平时在做贪心类的题目 很难去按照这四步去思考，真是有点“鸡肋”。</p><p>做题的时候，只要想清楚 局部最优 是什么，如果推导出全局最优，其实就够了。</p><h1 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h1><h2 id="金属退火原理"><a href="#金属退火原理" class="headerlink" title="金属退火原理"></a>金属退火原理</h2><p>金属退火是将金属加热到一定温度，保持足够时间，然后以适宜速度冷却(通常是缓慢冷却，有时是控制冷却)的一种金属热处理工艺。模拟退火算法来源于固体退火原理，将固体加温至充分高，再让其徐徐冷却，加温时，固体内部粒子随温升变为无序状，内能增大，而徐徐冷却时粒子渐趋有序，在每个温度都达到平衡态，最后在常温时达到基态，内能减为最小。</p><p>处在低温状态时，固体中分子具有的内能很低，在原本的位置上做小范围的振动。若是将固体加热到一定温度，分子内能将会增加，热运动加剧，分子排列的无序度增加。此时再将温度缓缓降低，在每个温度都达到平衡态（即准静态过程），分子具有的能量逐渐降低，最终回归到有序排列的状态，分子内能也跟着降到最低。</p><h2 id="模拟退火算法机制"><a href="#模拟退火算法机制" class="headerlink" title="模拟退火算法机制"></a>模拟退火算法机制</h2><p>模拟退火算法(Simulated Annealing,SA)最早的思想是由N. Metropolis等人于1953年提出。1983年,S. Kirkpatrick等成功地将退火思想引入到组合优化领域。它是基于Monte-Carlo 迭代求解策略的一种随机寻优算法，其出发点是基于物理中固体物质的退火过程与一般组合优化问题之间的相似性。</p><p>介绍模拟退火前，还是有必要先介绍爬山算法。</p><h3 id="爬山算法"><a href="#爬山算法" class="headerlink" title="爬山算法"></a>爬山算法</h3><p>爬山算法是一种简单的贪心搜索算法，该算法每次从当前解的临近解空间中选择一个最优解作为当前解，直到达到一个局部最优解。</p><p>爬山算法实现很简单，其主要缺点是会陷入局部最优解，而不一定能搜索到全局最优解。如上图所示：假设C点为当前解，爬山算法搜索到A点这个局部最优解就会停止搜索，因为在A点无论向那个方向小幅度移动都不能得到更优的解。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1679639508/origin-of-ray/2010122016525713_tp8p5t.png" alt></p><h3 id="模拟退火核心思想"><a href="#模拟退火核心思想" class="headerlink" title="模拟退火核心思想"></a>模拟退火核心思想</h3><p><strong>模拟退火其实也是一种贪心算法，但是它的搜索过程引入了随机因素。模拟退火算法以一定的概率来接受一个比当前解要差的解，因此有可能会跳出这个局部的最优解，达到全局的最优解</strong>。</p><p>模拟退火算法从某一较高初温出发，伴随温度参数的不断下降,结合一定的概率突跳特性在解空间中随机寻找目标函数的全局最优解，即在局部最优解能概率性地跳出并最终趋于全局最优。</p><p>这里的“一定的概率”的计算参考了金属冶炼的退火过程，这也是模拟退火算法名称的由来。将温度T当作控制参数，目标函数值f视为内能E，而固体在某温度T时的一个状态对应一个解<br>，然后算法试图随着控制参数T的降低，使目标函数f(内能E)也逐渐降低，直至趋于全局最小值（退火中低温时的最低能量状态），就像金属退火过程一样。</p><h3 id="模拟退火的数学原理"><a href="#模拟退火的数学原理" class="headerlink" title="模拟退火的数学原理"></a>模拟退火的数学原理</h3><p>从上面我们知道，会结合概率突跳特性在解空间中随机寻找目标函数的全局最优解，那么具体的更新解的机制是什么呢？如果新解比当前解更优，则接受新解，否则基于Metropolis准则判断是否接受新解。接受概率为：</p><script type="math/tex; mode=display">\begin{equation}P = \begin{cases}    1 & E_{t + 1} < E_t;\\    e^{-\frac{E_{t + 1} - E_t}{kT}} & E_{t + 1} \geq E_t;\end{cases}\end{equation}</script><p>如上公式，假设当前时刻搜索的解为$x<em>t$，对应的系统能量(目标函数)为$E_t$，对搜索点施加随机扰动，产生新解$x</em>{t+1}$，相应地，系统能量为$E_{t+1}$，那么系统对搜索点从到转变的接受概率就为上公式。</p><p>即，如果新的解所对应的能量更低了，那么接受概率就为1，也就是一定接受。如果新的解对应的能量高，那么就以$e^{-\frac{E_{t + 1} - E_t}{kT}}$的概率去接受这个新解，即以这个概率去跳出这个局部最优解。</p><p>这个过程就是在随机挑选x，然后去找到一个对应E最低的x出来，这里的E更加低对应于我们具体的算法就是，更加接近于我们需要的目标</p><p>这里还有一个问题，就是我们随机挑选x的时候，如何选择x每次变化的大小。</p><p>这个问题其实就是<code>退火</code>这两个字的由来，即温度会逐渐降低，x变化的幅度也会越来越小。</p><h3 id="模拟退火的流程"><a href="#模拟退火的流程" class="headerlink" title="模拟退火的流程"></a>模拟退火的流程</h3><p>算法实质分两层循环，在任一温度水平下，随机扰动产生新解，并计算目标函数值的变化，决定是否被接受。由于算法初始温度比较高，这样，使E增大的新解在初始时也可能被接受，因而能跳出局部极小值，然后通过缓慢地降低温度，算法就最终可能收敛到全局最优解，具体流程为：</p><ol><li>令 $T = T_0$,表示开始退火的初始温度，随机产生一个初始解$x_0$,并计算对应的目标函数值$E_0$;</li><li>令 $T = kT$,其中k取值0到1之间，为温度下降速率；</li><li>对当前解$x<em>t$施加随机扰动，在其邻域内产生一个新解$x</em>{t+1}$，并计算对应的目标函数值$E<em>{t+1}$,计算<br>$\Delta E =E</em>{t+1} - E_t$</li><li>若$\Delta E &lt; 0$接受新解作为当前解，否则按照概率$e^{-\frac{\Delta E}{kT}}$判断是否接受新解；</li><li>在温度T下，重复L次扰动和接受过程，即执行步骤3和4；</li><li>判断温度是否达到终止温度水平，若是则终止算法，否则返回步骤2.</li></ol><p>其中有几个需要注意的点：</p><ul><li>初始点的选取对算法结果有一定的影响，最好是多次运行对结果进行综合判断。</li><li>在算法运行初期，温度下降快，避免接受过多的差结果。当运行时间增加，温度下降减缓，以便于更快稳定结果。</li><li>当迭代次数增加到一定次数时，结果可能已经达到稳定，但是距离算法结束还有一段时间。在设计程序时应该加入适当的输出条件，满足输出条件即可结束程序。</li></ul><h2 id="模拟退火的应用"><a href="#模拟退火的应用" class="headerlink" title="模拟退火的应用"></a>模拟退火的应用</h2><ul><li><p>模拟退火算法在VLSI设计中的应用，利用模拟退火算法进行VLSI(Very Large Scale Integration,超大规模集成电路)的最优设计，是目前模拟退火算法最成功的应用实例之一。用模拟退火算法几乎可以很好地完成所有优化的VLSI设计工作。如全局布线、布板、布局和逻辑最小化等等。</p></li><li><p>模拟退火算法可用来进行图像恢复等工作，即把一幅被污染的图像重新恢复成清晰的原图，滤掉其中被畸变的部分。因此它在图像处理方面的应用前景是广阔的。</p></li><li><p>模拟退火算法在神经网计算机中的应用。模拟退火算法具有跳出局部最优陷阱的能力。在Boltzmann机中，即使系统落入了局部最优的陷阱，经过一段时间后，它还能再跳出来，系统最终将往全局最优值的方向收敛。</p></li><li><p>在力导向布局算法中，其实也暗含模拟退火的思想。一开始所有节点随机布局，然后节点的位置收到节点之间力的作用而产生变化。位置变化相当于x变化，变化后的位置，如果节点收到的合力降低了，相当于能量E降低，我们就接受新的解，然后随着合力的降低，其实也等同于T降低，那么对位置的影响就会变小，满满的合力降低到一定阈值之下，位置变化也不大了，我们就认为算法收敛出了结果。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;贪心算法是比较常见的一种算法，贪心的本质是选择每一阶段的局部最优，从而达到全局最优。而模拟退火算法比较常见于人工智能当中。&lt;/p&gt;
&lt;p&gt;这两种算法之所以放在一起考虑是因为，模拟退火算法像是加强版的贪心算法。&lt;/p&gt;
&lt;p&gt;如果一个问题的每一步的局部最优解无法得到全局最优解，我们常规前后端程序员的算法思维想到的是动态规划。&lt;/p&gt;
&lt;p&gt;但是对于AI开发来讲，参数可能是上亿级别的，根本没有办法动态规划，这个时候就可以尝试用模拟退火算法以一定概率跳出这个局部，去整体中找到一个更优的答案，但是，其实这种算法也不像常规算法一样，会得到一个必然的结果。&lt;/p&gt;
&lt;p&gt;本文把两种算法放在一起进行总结和比较，看看他们分别适用于什么情况，以及如何使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Tailwind CSS 入门</title>
    <link href="https://sunra.top/2023/03/18/tailwindcss-introduction-md/"/>
    <id>https://sunra.top/2023/03/18/tailwindcss-introduction-md/</id>
    <published>2023-03-18T01:17:30.000Z</published>
    <updated>2023-05-16T05:31:16.922Z</updated>
    
    <content type="html"><![CDATA[<p>Tailwind这个CSS的框架不算是什么新东西了，不过也一直没有去研究过，最近有需要就看了下，看起来还是比较简单的。</p><p>这东西看起来就是个新的DSL之类的，提供了许多常用且内置的css样式，封装成语法，然后提供一个PostCSS插件，把封装好的语法又处理回普通的css。</p><p>我们需要做的事就是安装Tailwind的PostCSS插件，然后使用他封装好的DSL即可。</p><a id="more"></a><h1 id="什么是PostCSS"><a href="#什么是PostCSS" class="headerlink" title="什么是PostCSS"></a>什么是PostCSS</h1><p>在 Web 应用开发中，CSS 代码的编写是重要的一部分。CSS 规范从最初的 CSS1 到现在的 CSS3，再到 CSS 规范的下一步版本，规范本身一直在不断的发展演化之中。这给开发人员带来了效率上的提高。不过与其他 Web 领域的规范相似的处境是，CSS 规范在浏览器兼容性方面一直存在各种各样的问题。不同浏览器在 CSS 规范的实现方面的进度也存在很大差异。另外，CSS 规范本身的发展速度与社区的期待还有一定的差距。这也是为什么 SASS 和 LESS 等 CSS 预处理语言可以流行的重要原因。SASS 和 LESS 等提供了很多更实用的功能，也体现了开发人员对 CSS 语言的需求。本文中要介绍的 PostCSS 是目前流行的一个对 CSS 进行处理的工具。PostCSS 依托其强大的插件体系为 CSS 处理增加了无穷的可能性。</p><p>PostCSS 本身是一个功能比较单一的工具。它提供了一种方式用 JavaScript 代码来处理 CSS。它负责把 CSS 代码解析成抽象语法树结构（Abstract Syntax Tree，AST），再交由插件来进行处理。插件基于 CSS 代码的 AST 所能进行的操作是多种多样的，比如可以支持变量和混入（mixin），增加浏览器相关的声明前缀，或是把使用将来的 CSS 规范的样式规则转译（transpile）成当前的 CSS 规范支持的格式。从这个角度来说，PostCSS 的强大之处在于其不断发展的插件体系。目前 PostCSS 已经有 200 多个功能各异的插件。开发人员也可以根据项目的需要，开发出自己的 PostCSS 插件。</p><p><strong>PostCSS 从其诞生之时就带来了社区对其类别划分的争议。这主要是由于其名称中的 post，很容易让人联想到 PostCSS 是用来做 CSS 后处理（post-processor）的，从而与已有的 CSS 预处理（pre-processor）语言，如 SASS 和 LESS 等进行类比</strong>。</p><p>实际上，PostCSS 的主要功能只有两个：第一个就是前面提到的把 CSS 解析成 JavaScript 可以操作的 AST，第二个就是调用插件来处理 AST 并得到结果。因此，不能简单的把 PostCSS 归类成 CSS 预处理或后处理工具。PostCSS 所能执行的任务非常多，同时涵盖了传统意义上的预处理和后处理。PostCSS 是一个全新的工具，给前端开发人员带来了不一样的处理 CSS 的方式。</p><h1 id="如何使用PostCSS"><a href="#如何使用PostCSS" class="headerlink" title="如何使用PostCSS"></a>如何使用PostCSS</h1><p>PostCSS 一般不单独使用，而是与已有的构建工具进行集成。PostCSS 与主流的构建工具，如 Webpack、Grunt 和 Gulp 都可以进行集成。完成集成之后，选择满足功能需求的 PostCSS 插件并进行配置。</p><p>Webpack 中使用 postcss-loader 来执行插件处理。在清单 1 中，postcss-loader 用来对.css 文件进行处理，并添加在 style-loader 和 css-loader 之后。通过一个额外的 postcss 方法来返回所需要使用的 PostCSS 插件。require(‘autoprefixer’) 的作用是加载 Autoprefixer 插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">context: path.join(__dirname, <span class="string">'app'</span>),</span><br><span class="line">entry: <span class="string">'./app'</span>,</span><br><span class="line">output: &#123;</span><br><span class="line">path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">filename: <span class="string">'bundle.js'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">loaders: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">loader: <span class="string">"style-loader!css-loader!postcss-loader"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">postcss: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何启用并设置Tailwind-PostCSS"><a href="#如何启用并设置Tailwind-PostCSS" class="headerlink" title="如何启用并设置Tailwind PostCSS"></a>如何启用并设置Tailwind PostCSS</h1><h2 id="通过-npm-安装-Tailwind"><a href="#通过-npm-安装-Tailwind" class="headerlink" title="通过 npm 安装 Tailwind"></a>通过 npm 安装 Tailwind</h2><p>对于大多数项目（并利用 Tailwind 的自定义功能），您需要通过 npm 安装 Tailwind 及其依赖项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure><p>由于 Tailwind 不会自动添加浏览器引擎前缀到生成的 CSS 中，我们建议您安装 autoprefixer 去处理这个问题，就像上面的代码片段所展示的那样。</p><h2 id="作为-PostCSS-插件来添加-Tailwind"><a href="#作为-PostCSS-插件来添加-Tailwind" class="headerlink" title="作为 PostCSS 插件来添加 Tailwind"></a>作为 PostCSS 插件来添加 Tailwind</h2><p>将 tailwindcss 和 autoprefixer 添加到您的 PostCSS 配置中。 多数情况下，这是项目根目录下的 postcss.config.js 文件，但也可能是 .postcssrc 文件或是由 package.json 文件中的 postcss 键所指定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    tailwindcss: &#123;&#125;,</span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建您的配置文件"><a href="#创建您的配置文件" class="headerlink" title="创建您的配置文件"></a>创建您的配置文件</h2><p>如果您想要自定义您的 Tailwind 安装，可以使用 Tailwind CLI 工具生成一份配置文件，这个命令行工具已包含在了 tailwindcss 这个 npm 包里了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure><p>这将会在您的工程根目录创建一个最小的 tailwind.config.js 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  purge: [],</span><br><span class="line">  darkMode: <span class="literal">false</span>, <span class="comment">// or 'media' or 'class'</span></span><br><span class="line">  theme: &#123;</span><br><span class="line">    extend: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  variants: &#123;&#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包含-Tailwind-到您的-CSS-中"><a href="#包含-Tailwind-到您的-CSS-中" class="headerlink" title="包含 Tailwind 到您的 CSS 中"></a>包含 Tailwind 到您的 CSS 中</h2><p>如果您尚未创建一个 CSS 文件，请使用 @tailwind 指令注入 Tailwind 的基础 (base)，组件 (components) 和功能 (utilities) 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./your-css-folder/styles.css */</span></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><p>Tailwind 将在构建时将这些指令替换为基于您配置的设计系统生成的所有样式。</p><p>如果您使用的是 postcss-import（或背后使用它的工具，例如 Webpacker for Rails），请使用我们的导入而不是 @tailwind 指令来避免在导入任何其他文件时出现问题：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"tailwindcss/base"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"tailwindcss/components"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"tailwindcss/utilities"</span>;</span><br></pre></td></tr></table></figure><p>如果您使用的是像 React 或 Vue 这样的 JavaScript 框架，支持直接将 CSS 文件导入到 JS 中，那么您也可以完全跳过创建 CSS 文件，而直接导入 tailwindcss / tailwind.css，而后者已经安装了所有这些指令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"tailwindcss/tailwind.css"</span></span><br></pre></td></tr></table></figure><h2 id="生成您的-CSS"><a href="#生成您的-CSS" class="headerlink" title="生成您的 CSS"></a>生成您的 CSS</h2><p>实际构建项目的方式将取决于您使用的工具。 您的框架可能包含诸如 npm run dev 之类的命令，以启动在后台编译 CSS 的开发服务器，您可能自己在运行 webpack，或者您正在使用 postcss-cli 并运行诸如 postcss styles.css -o compiled.css 之类的命令。</p><h2 id="使用其他预处理器优化"><a href="#使用其他预处理器优化" class="headerlink" title="使用其他预处理器优化"></a>使用其他预处理器优化</h2><p>由于 Tailwind 是一个 PostCSS 插件，没有什么可以阻止您使用 Sass，Less，Stylus 或其他预处理器，就像您可以使用其他 PostCSS 插件，如 Autoprefixer。</p><p>重要的是要注意，您不需要在Tailwind中使用预处理器—您通常在 Tailwind 项目中写很少的 CSS，所以使用预处理器并不像在一个您写了很多自定义 CSS 的项目中那样有利。</p><h3 id="构建时导入"><a href="#构建时导入" class="headerlink" title="构建时导入"></a>构建时导入</h3><p>预处理器提供的最有用的功能之一是能够将您的 CSS 组织成多个文件，并在构建时通过提前处理 @import 语句而不是在浏览器中结合它们。</p><p>用于处理 PostCSS 的规范插件是 postcss-import。</p><p>要使用它，请通过 npm 安装该插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-import</span><br></pre></td></tr></table></figure><p>然后把它作为 PostCS 配置中的第一个插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'postcss-import'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'tailwindcss'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>postcss-import</code>，需要注意的一个重要问题是，它严格遵守 CSS 规范，不允许在任何地方使用 <code>@import</code> 语句，除非在文件的顶部。</p><h3 id="内置Nesting插件以支持-apply等语法"><a href="#内置Nesting插件以支持-apply等语法" class="headerlink" title="内置Nesting插件以支持@apply等语法"></a>内置Nesting插件以支持<code>@apply</code>等语法</h3><p>为了增加对嵌套声明的支持，我们推荐我们捆绑的 tailwindcss/nesting 插件，这是一个 PostCSS 插件，它可以包装 PostCSS 嵌套或 PostCSS 嵌套，并作为一个兼容层来确保你选择的嵌套插件正确理解 Tailwind 的自定义语法，比如@application 和@screen。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'postcss-import'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'tailwindcss/nesting'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'tailwindcss'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>These days CSS variables (officially known as custom properties) have really good browser support, so you don’t need a preprocessor to use variables at all.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--theme-color</span>: <span class="number">#52b3d0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We use CSS variables extensively within Tailwind itself, so if you can use Tailwind, you can use native CSS variables.</p><p>You may also find that most of the things you’ve used variables for in the past can be replaced with Tailwind’s theme() function, which gives you access to all of your design tokens from your tailwind.config.js file directly in your CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">theme</span>(<span class="string">'colors.blue.500'</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">theme</span>(<span class="string">'spacing.2'</span>) <span class="built_in">theme</span>(<span class="string">'spacing.4'</span>);</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vendor-prefixes"><a href="#Vendor-prefixes" class="headerlink" title="Vendor prefixes"></a>Vendor prefixes</h3><p>For automatically managing vendor prefixes in your CSS, you should use Autoprefixer.</p><p>To use it, install it via npm: —&gt; 您可以使用 postcss-preset-env 插件为您的项目添加对即将到来的 CSS 特性的支持。</p><p>要使用它，请通过 npm 安装它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install autoprefixer</span><br></pre></td></tr></table></figure><p>Then add it to the very end of your plugin list in your PostCSS configuration:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'tailwindcss'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生产优化"><a href="#生产优化" class="headerlink" title="生产优化"></a>生产优化</h2><p>使用默认配置，TailwindCSS 的开发版本是3645.2kB未压缩，294.2kB用Gzip进行压缩，72.8kB用Brotli进行压缩。</p><p>这听起来可能很庞大，那是因为设计就很庞大。</p><p>为了使开发经验尽可能的富有成效，Tailwind 为您生成了成千上万的功能类，其中大部分您可能不会真正使用。</p><p>把 Tailwind 想象成一个巨大的乐高盒子—您把它倾倒在地板上，建造您想建造的东西，然后当您完成后，您把所有您不用的碎片放回盒子里。</p><p>例如，Tailwind 为您的间距尺度中的每一个尺寸，为您可能想要应用边距的元素的每一个侧面，在您的项目中使用的每一个断点生成边距实用程序。这导致了数以百计的不同组合，这些组合都是重要的，但不可能都是需要的。</p><p>当构建生产时，您应该总是使用 Tailwind 的 purge 选项来 tree-shake 优化未使用的样式，并优化您的最终构建大小当使用 Tailwind 删除未使用的样式时，很难最终得到超过 10kb 的压缩 CSS。</p><h3 id="编写可清除的-HTML"><a href="#编写可清除的-HTML" class="headerlink" title="编写可清除的 HTML"></a>编写可清除的 HTML</h3><p>在开始使用 <code>Purge</code> 功能之前，重要的是要了解它是如何工作的，并建立正确的心理模型，以确保您在为生产构建时永远不会意外地删除重要的样式。</p><p><code>PurgeCSS</code>(我们在引擎下使用的库)在寻找 HTML 中的类的方式上故意非常幼稚。它并不试图解析您的 HTML 并查找类的属性，也不动态执行您的 JavaScript —它只是在整个文件中查找符合这个正则表达式的任何字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[^<span class="xml"><span class="tag">&lt;&gt;</span>"'`\s]*[^<span class="tag">&lt;&gt;</span>"'`\s:]/g</span></span><br></pre></td></tr></table></figure><p>这基本上可以匹配任何由空格、引号或角括号分隔的字符串，包括 HTML 标签、属性、类，甚至是您标记中的实际书面内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"md:flex"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"md:flex-shrink-0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"rounded-lg md:w-56"</span> <span class="attr">src</span>=<span class="string">"/img/shopping.jpg"</span> <span class="attr">alt</span>=<span class="string">"Woman paying for a purchase"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mt-4 md:mt-0 md:ml-6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"uppercase tracking-wide text-sm text-indigo-600 font-bold"</span>&gt;</span></span><br><span class="line">      Marketing</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/get-started"</span> <span class="attr">class</span>=<span class="string">"block mt-1 text-lg leading-tight font-semibold text-gray-900 hover:underline"</span>&gt;</span></span><br><span class="line">      Finding customers for your new business</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-2 text-gray-600"</span>&gt;</span></span><br><span class="line">      Getting a new business off the ground is a lot of hard work.</span><br><span class="line">      Here are five ideas you can use to find your first customers.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这意味着，重要的是避免在您的模板中使用字符串连接动态创建类字符串，否则 PurgeCSS 将不知道保存这些类。</p><p>如，不要使用字符串连接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-&#123;&#123;  error  ?  'red'  :  'green'  &#125;&#125;-600"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而是动态选择一个完整的类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;  error  ?  'text-red-600'  :  'text-green-600'  &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要一个类名出现在您的模板中，PurgeCSS 就不会删除它。</p><h3 id="删除未使用的CSS"><a href="#删除未使用的CSS" class="headerlink" title="删除未使用的CSS"></a>删除未使用的CSS</h3><p>基本用途<br>要开始使用，请使用 purge 选项为您所有的模板文件提供一个路径数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  purge: [</span><br><span class="line">    <span class="string">'./src/**/*.html'</span>,</span><br><span class="line">    <span class="string">'./src/**/*.vue'</span>,</span><br><span class="line">    <span class="string">'./src/**/*.jsx'</span>,</span><br><span class="line">  ],</span><br><span class="line">  theme: &#123;&#125;,</span><br><span class="line">  variants: &#123;&#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，如果您的项目中有一个 JS 文件，在您的 HTML 中动态切换一些类，您应该确保在这个列表中包括该文件。</p><p>现在，每当您在编译 <code>CSS</code> 时将 <code>NODE_ENV</code> 设置为 <code>production</code>，<code>Tailwind</code> 将自动从您的 <code>CSS</code> 中清除未使用的样式。</p><h3 id="手动启用"><a href="#手动启用" class="headerlink" title="手动启用"></a>手动启用</h3><p>如果您想手动控制是否应该删除未使用的样式（而不是隐性地依赖环境变量），您可以使用一个对象语法，并提供 enabled 选项，使用 content 选项指定您的模板。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  purge: &#123;</span><br><span class="line">    enabled: <span class="literal">true</span>,</span><br><span class="line">    content: [<span class="string">'./src/**/*.html'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们建议只在生产中移除未使用的样式，因为在开发中移除它们意味着您需要在任何时候改变您的模板时重新编译，并且在启用 PurgeCSS 的情况下编译速度要慢得多。</strong></p><h1 id="如何使用Tailwind"><a href="#如何使用Tailwind" class="headerlink" title="如何使用Tailwind"></a>如何使用Tailwind</h1><h2 id="功能类优先"><a href="#功能类优先" class="headerlink" title="功能类优先"></a>功能类优先</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-shrink-0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"h-12 w-12"</span> <span class="attr">src</span>=<span class="string">"/img/logo.svg"</span> <span class="attr">alt</span>=<span class="string">"ChitChat Logo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-xl font-medium text-black"</span>&gt;</span>ChitChat<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-gray-500"</span>&gt;</span>You have a new message!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用了：</p><ul><li><p>使用 Tailwind 的 <code>flexbox</code> 和 <code>padding</code> 功能类 (<code>flex</code>, <code>flex-shrink-0</code>, 和 <code>p-6</code>) 来控制整体的卡片布局</p></li><li><p>使用 <code>max-width</code> 和 <code>margin</code> 功能类 (<code>max-w-sm</code> 和 <code>mx-auto</code>) 来设置卡片的宽度和水平居中</p></li><li><p>使用 <code>background color</code>, <code>border radius</code>, 和 <code>box-shadow</code>功能类 (<code>bg-white</code>, <code>rounded-xl</code>, 和 <code>shadow-md</code>) 设置卡片的外观样式</p></li><li><p>使用 <code>width</code> 和 <code>height</code> 功能类 (<code>w-12</code> and <code>h-12</code>) 来设置 logo 图片的大小</p></li><li><p>使用 <code>space-between</code> 功能类 (<code>space-x-4</code>) 来处理 logo 和文本之间的间距</p></li><li><p>使用 <code>font size</code>，<code>text color</code>，和 f<code>ont-weight</code> 功能类 (<code>text-xl</code>，t<code>ext-black</code>，<code>font-medium</code> 等等) 给卡片文字设置样式</p></li></ul><p>这种方法使我们无需编写一行自定义的 CSS 即可实现一个完全定制的组件设计。</p><p>我知道您在想：“这太繁琐了，真是一团糟！” 您是对的，这有点丑陋。实际上，当您第一次看到它时，几乎不可能认为这是一个好主意—您必须实际尝试一下。</p><p>但是，一旦您以这种方式实际构建了一些东西，您就会很快注意到一些真正重要的优点：</p><ul><li><p>您没有为了给类命名而浪费精力。 不需要仅仅为了设置一些样式而额外添加一些像 <code>sidebar-inner-wrapper</code> 这样愚蠢的类名，不必再为了一个 flex 容器的完美抽象命名而倍受折磨。</p></li><li><p>您的 CSS 停止增长。 使用传统方法，每次添加新功能时 CSS 文件都会变大。使用功能类，所有内容都是可重用的，因此您几乎不需要编写新的CSS。</p></li><li><p>更改会更安全。 CSS 是全局性的，您永远不知道当您进行更改时会破坏掉什么。您 HTML 中的类是本地的，因此您可以更改它们而不必担心其他问题。</p></li></ul><p>当您意识到在 HTML 中使用预定义的功能类是多么的富有成效时，以任何其他方式工作都感觉像是折磨。</p><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><p>Tailwind 中的每个功能类都可以有条件的应用于不同的断点，这使得您可以轻松的构建复杂的响应式界面而不用离开 HTML。</p><ol><li>根据常用的设备分辨率方案，默认内置了 5 个断点：</li></ol><div class="table-container"><table><thead><tr><th>断点前缀</th><th>最小宽度</th><th>CSS</th></tr></thead><tbody><tr><td>sm</td><td>640px</td><td>@media (min-width: 640px) { … }</td></tr><tr><td>md</td><td>768px</td><td>@media (min-width: 768px) { … }</td></tr><tr><td>lg</td><td>1024px</td><td>@media (min-width: 1024px) { … }</td></tr><tr><td>xl</td><td>1280px</td><td>@media (min-width: 1280px) { … }</td></tr><tr><td>2xl</td><td>1536px</td><td>@media (min-width: 1536px) { … }</td></tr></tbody></table></div><p>要添加一个仅在特定断点生效的功能类，只需要在该功能类前加上断点名称，后面跟 : 字符。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Width of 16 by default, 32 on medium screens, and 48 on large screens --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"w-16 md:w-32 lg:w-48"</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这适用于框架中的每一个功能类，这意味着您可以在给定的断点更改任何东西，甚至包括字符间距和光标样式之类的内容。</p><ol><li>自定义断点</li></ol><p>您可以在 tailwind.config.js 文件中完全自定义您的断点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  theme: &#123;</span><br><span class="line">    screens: &#123;</span><br><span class="line">      <span class="string">'tablet'</span>: <span class="string">'640px'</span>,</span><br><span class="line">      <span class="comment">// =&gt; @media (min-width: 640px) &#123; ... &#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">'laptop'</span>: <span class="string">'1024px'</span>,</span><br><span class="line">      <span class="comment">// =&gt; @media (min-width: 1024px) &#123; ... &#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">'desktop'</span>: <span class="string">'1280px'</span>,</span><br><span class="line">      <span class="comment">// =&gt; @media (min-width: 1280px) &#123; ... &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tailwind还支持许多其他常见的功能，比如，深色模式，提取组件，自定义功能类等，还提供了诸如<code>@apply</code>等函数与指令，具体文档可以参考下面的文档链接。</p><p>参考文章：</p><ul><li><a href="https://www.dute.org/blog/what-is-postcss.html" rel="external nofollow noopener noreferrer" target="_blank">一文搞懂什么是PostCSS</a></li><li><a href="https://www.tailwindcss.cn/docs/" rel="external nofollow noopener noreferrer" target="_blank">TailwindCSS 中文文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Tailwind这个CSS的框架不算是什么新东西了，不过也一直没有去研究过，最近有需要就看了下，看起来还是比较简单的。&lt;/p&gt;
&lt;p&gt;这东西看起来就是个新的DSL之类的，提供了许多常用且内置的css样式，封装成语法，然后提供一个PostCSS插件，把封装好的语法又处理回普通的css。&lt;/p&gt;
&lt;p&gt;我们需要做的事就是安装Tailwind的PostCSS插件，然后使用他封装好的DSL即可。&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://sunra.top/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>如何用G6开发一个关系图谱</title>
    <link href="https://sunra.top/2023/03/10/g6-relationship-graph/"/>
    <id>https://sunra.top/2023/03/10/g6-relationship-graph/</id>
    <published>2023-03-10T06:28:01.000Z</published>
    <updated>2023-05-16T05:31:16.910Z</updated>
    
    <content type="html"><![CDATA[<p>最近在想着飞书文档的关系图是怎么实现的，于是想起了之前用的G6，于是简单实现了一版。</p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>主要功能如下：</p><ul><li>节点分为两部分，上半部分是图标，下半部分是文字<ul><li>鼠标放到图标上时，会产生水波纹的扩散特效，同时出现一圈边框</li><li>文字需要有下划线以及白色背景，且水波纹特效不能被白色背景挡住</li><li>文字的下划线需要是方格</li></ul></li><li>连线要有渐变色，且渐变色要从箭头起点到箭头终点，且如果支持双向关系，如何实现两条边</li><li>连线上中间位置要有一个Label</li><li>节点和连线要支持半透明</li><li>整体布局要是力导向布局，且支持节点拖拽，拖拽时不能让节点之间产生重叠，但是也不能因为连线拖动其他节点（单独提出这一点是因为G6自带的力导向布局节点会被拖拽）</li></ul><a id="more"></a><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="自定义节点"><a href="#自定义节点" class="headerlink" title="自定义节点"></a>自定义节点</h2><p>这个功能点的第一个难点在于：</p><ul><li>G6只有keyShapre能够响应事件，且连线是连到keyShape伤的，而keyShape就是每个group的第一个shape</li><li>所以我们如果想要鼠标Hover到image产生水波纹，应该让image节点当keyShape</li><li>但是如果让image当keyShape，即使我们的图片是圆的，keyShape的框也是方的，连线如果连接到image的四个角上，就会出现连线和图片之间有一点空白，所以我们又需要让circle当作keyShape，然后image在后面添加，但这样又会导致我们的keyShapre，也就是circle被image盖在上面，导致无法触发hover事件</li></ul><p>解决方案有两种，取决于你用的renderer是svg还是canvas</p><ul><li><p>如果是canvas，那么还是让circle当keyShape，不过给circle和image都添加zIndex，然后调用group.sort()</p></li><li><p>如果是svg，group.sort是无效的，我们需要自己在afterDraw方法里通过js的方法改变层级，把后面的circle移动到最前面（越早添加越在后面）</p></li></ul><p>第二个难点在于，如何添加水波纹特效以及，如何在Hover circle的时候开启水波纹</p><p>解决方案分为两个步骤：</p><ul><li>使用官方示例的水波纹代码，不过记住先把visible设置为false，同时注意层级，要让文字在最上方</li><li>然后监听<code>node:mousemove</code>事件，如果Hover的target是circle，调用setItemState，然后在注册节点时，设置setState的回调，再通过shape.attr方法设置visible为true就好，然后监听<code>node:mouseleave</code>，将状态设置为另一个，同时setState回调中设置visible为false</li></ul><blockquote><p>设置并监听state变化的方案也可以用来实现边框，当然这种简单的样式也可以通过stateStyle解决</p></blockquote><p>第三个难点在于，如何添加文字下划线，以及文字过长如何折行，因为G6的text不支持我需要的下划线</p><p>解决方案是：</p><ul><li>自己算文字长度，超过一定长度就打断，超过两行后面的删除并添加省略号</li><li>然后在文字下方添加path shape作为下划线，长度用文字长度即可</li></ul><blockquote><p>注意，自定义节点要记得继承某个内置节点，最起码继承single-node，不然很多特性是没有的</p></blockquote><p>这里只展示canvas代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> ItemStatus &#123;</span><br><span class="line">  OPACITY = <span class="string">'opacity'</span>,</span><br><span class="line">  NORMAL = <span class="string">'normal'</span>,</span><br><span class="line">  ACTIVE = <span class="string">'active'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLetterWidth</span>(<span class="params">letter: <span class="built_in">string</span>, fontSize: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[\u4E00-\u9FA5]+'</span>);</span><br><span class="line">  <span class="keyword">if</span> (pattern.test(letter)) &#123;</span><br><span class="line">    <span class="comment">// Chinese charactors</span></span><br><span class="line">    <span class="keyword">return</span> fontSize;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// get the width of single letter according to the fontSize</span></span><br><span class="line">    <span class="keyword">return</span> G6.Util.getLetterWidth(letter, fontSize);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getStringWidth</span>(<span class="params">str: <span class="built_in">string</span>, fontSize: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentWidth = <span class="number">0</span>;</span><br><span class="line">  str.split(<span class="string">''</span>).forEach(<span class="function"><span class="params">letter</span> =&gt;</span> &#123;</span><br><span class="line">    currentWidth += getLetterWidth(letter, fontSize);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> currentWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceTooLongStringWithEllipsis</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  strs: <span class="built_in">string</span>[],</span></span></span><br><span class="line"><span class="function"><span class="params">  maxWidth: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  fontSize: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ellipsis = <span class="string">'...'</span>;</span><br><span class="line">  <span class="keyword">const</span> ellipsisLength = getStringWidth(ellipsis, fontSize);</span><br><span class="line">  <span class="keyword">if</span> (strs.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> secondLine = strs[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> currentWidth = ellipsisLength;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; secondLine.length; i++) &#123;</span><br><span class="line">      currentWidth += getLetterWidth(secondLine[i], fontSize);</span><br><span class="line">      <span class="keyword">if</span> (currentWidth &gt;= maxWidth) &#123;</span><br><span class="line">        strs[<span class="number">1</span>] = <span class="string">`<span class="subst">$&#123;secondLine.slice(<span class="number">0</span>, i)&#125;</span><span class="subst">$&#123;ellipsis&#125;</span>`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [strs[<span class="number">0</span>], strs[<span class="number">1</span>]];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strs;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NODE_ICON_SIZE = <span class="number">48</span>;</span><br><span class="line"><span class="keyword">const</span> NODE_ICON_RADIUS = NODE_ICON_SIZE / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> NODE_NAME_FONT_SIZE = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">const</span> NODE_NAME_HEIGHT = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">G6.registerNode(</span><br><span class="line">    <span class="string">'test-node'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      draw(cfg, group) &#123;</span><br><span class="line">        <span class="keyword">const</span> keyShape = group?.addShape(<span class="string">'circle'</span>, &#123;</span><br><span class="line">          attrs: &#123;</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span>,</span><br><span class="line">            r: NODE_ICON_RADIUS,</span><br><span class="line">            fill: <span class="string">'rgba(255,255,255,0)'</span>,</span><br><span class="line">            opacity: <span class="number">0</span>,</span><br><span class="line">            lineWidth: <span class="number">1</span>,</span><br><span class="line">            cursor: <span class="string">'pointer'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          name: <span class="string">'test-node-dummy'</span>,</span><br><span class="line">          draggle: <span class="literal">true</span>,</span><br><span class="line">          zIndex: <span class="number">10</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        group?.addShape(<span class="string">'image'</span>, &#123;</span><br><span class="line">          attrs: &#123;</span><br><span class="line">            x: -NODE_ICON_SIZE / <span class="number">2</span>,</span><br><span class="line">            y: -NODE_ICON_SIZE / <span class="number">2</span>,</span><br><span class="line">            width: NODE_ICON_SIZE,</span><br><span class="line">            height: NODE_ICON_SIZE,</span><br><span class="line">            img: <span class="string">''</span>,</span><br><span class="line">            cursor: <span class="string">'pointer'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          name: <span class="string">'test-node-icon'</span>,</span><br><span class="line">          draggle: <span class="literal">true</span>,</span><br><span class="line">          zIndex: <span class="number">9</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> lableSplit = fittingString(</span><br><span class="line">          cfg?.supName <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">          <span class="number">200</span>,</span><br><span class="line">          NODE_NAME_FONT_SIZE,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lableSplit.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> label = lableSplit[i];</span><br><span class="line">            <span class="keyword">const</span> labelWidth = getStringWidth(</span><br><span class="line">                label,</span><br><span class="line">                NODE_NAME_FONT_SIZE,</span><br><span class="line">            );</span><br><span class="line">            group?.addShape(<span class="string">'rect'</span>, &#123;</span><br><span class="line">                attrs: &#123;</span><br><span class="line">                x: -labelWidth / <span class="number">2</span>,</span><br><span class="line">                y:</span><br><span class="line">                    NODE_ICON_SIZE -</span><br><span class="line">                    NODE_NAME_HEIGHT +</span><br><span class="line">                    i * NODE_NAME_HEIGHT +</span><br><span class="line">                    <span class="number">4</span>,</span><br><span class="line">                width: labelWidth,</span><br><span class="line">                height: NODE_NAME_HEIGHT,</span><br><span class="line">                fill: <span class="string">'#FFFFFF'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                name: <span class="string">`test-node-name-background-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                zIndex: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            group?.addShape(<span class="string">'text'</span>, &#123;</span><br><span class="line">                attrs: &#123;</span><br><span class="line">                text: label,</span><br><span class="line">                fill: <span class="string">'#646A73'</span>,</span><br><span class="line">                fontSize: <span class="number">14</span>,</span><br><span class="line">                textAlign: <span class="string">'center'</span>,</span><br><span class="line">                x: <span class="number">0</span>,</span><br><span class="line">                y: NODE_ICON_SIZE + i * NODE_NAME_HEIGHT,</span><br><span class="line">                width: labelWidth,</span><br><span class="line">                height: NODE_NAME_HEIGHT,</span><br><span class="line">                cursor: <span class="string">'pointer'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                name: <span class="string">`test-node-name-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                zIndex: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            group?.addShape(<span class="string">'path'</span>, &#123;</span><br><span class="line">                attrs: &#123;</span><br><span class="line">                path: [</span><br><span class="line">                    [</span><br><span class="line">                    <span class="string">'M'</span>,</span><br><span class="line">                    -labelWidth / <span class="number">2</span>,</span><br><span class="line">                    NODE_ICON_SIZE + i * NODE_NAME_HEIGHT + <span class="number">2</span>,</span><br><span class="line">                    ],</span><br><span class="line">                    [</span><br><span class="line">                    <span class="string">'L'</span>,</span><br><span class="line">                    labelWidth / <span class="number">2</span>,</span><br><span class="line">                    NODE_ICON_SIZE + i * NODE_NAME_HEIGHT + <span class="number">2</span>,</span><br><span class="line">                    ],</span><br><span class="line">                ],</span><br><span class="line">                stroke: <span class="string">'#000000'</span>,</span><br><span class="line">                lineWidth: <span class="number">1</span>,</span><br><span class="line">                lineDash: [<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                &#125;,</span><br><span class="line">                name: <span class="string">`test-node-name-underline-<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">                zIndex: <span class="number">3</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> back1 = group?.addShape(<span class="string">'circle'</span>, &#123;</span><br><span class="line">          zIndex: <span class="number">5</span>,</span><br><span class="line">          attrs: &#123;</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span>,</span><br><span class="line">            r: <span class="number">0</span>,</span><br><span class="line">            fill: <span class="string">'rgba(255,255,255,0)'</span>,</span><br><span class="line">            opacity: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          name: <span class="string">'test-node-wave1'</span>,</span><br><span class="line">          draggle: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> back2 = group?.addShape(<span class="string">'circle'</span>, &#123;</span><br><span class="line">          zIndex: <span class="number">6</span>,</span><br><span class="line">          attrs: &#123;</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span>,</span><br><span class="line">            r: <span class="number">0</span>,</span><br><span class="line">            fill: <span class="string">'rgba(255,255,255,0)'</span>,</span><br><span class="line">            opacity: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          name: <span class="string">'test-node-wave2'</span>,</span><br><span class="line">          draggle: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> back3 = group?.addShape(<span class="string">'circle'</span>, &#123;</span><br><span class="line">          zIndex: <span class="number">7</span>,</span><br><span class="line">          attrs: &#123;</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span>,</span><br><span class="line">            r: <span class="number">0</span>,</span><br><span class="line">            fill: <span class="string">'rgba(255,255,255,0)'</span>,</span><br><span class="line">            opacity: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          name: <span class="string">'test-node-wave3'</span>,</span><br><span class="line">          draggle: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        back1?.animate(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            r: NODE_ICON_RADIUS + <span class="number">16</span>,</span><br><span class="line">            opacity: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            duration: <span class="number">3000</span>,</span><br><span class="line">            easing: <span class="string">'easeCubic'</span>,</span><br><span class="line">            delay: <span class="number">100</span>,</span><br><span class="line">            repeat: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// no delay</span></span><br><span class="line">        back2?.animate(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            r: NODE_ICON_RADIUS + <span class="number">16</span>,</span><br><span class="line">            opacity: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            duration: <span class="number">3000</span>,</span><br><span class="line">            easing: <span class="string">'easeCubic'</span>,</span><br><span class="line">            delay: <span class="number">1000</span>,</span><br><span class="line">            repeat: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// 1s delay</span></span><br><span class="line">        back3?.animate(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// Magnifying and disappearing</span></span><br><span class="line">            r: NODE_ICON_RADIUS + <span class="number">16</span>,</span><br><span class="line">            opacity: <span class="number">0.1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            duration: <span class="number">3000</span>,</span><br><span class="line">            easing: <span class="string">'easeCubic'</span>,</span><br><span class="line">            delay: <span class="number">2000</span>,</span><br><span class="line">            repeat: <span class="literal">true</span>, <span class="comment">// repeat</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ); <span class="comment">// 3s delay</span></span><br><span class="line"></span><br><span class="line">        back1?.hide();</span><br><span class="line">        back2?.hide();</span><br><span class="line">        back3?.hide();</span><br><span class="line"></span><br><span class="line">        group?.sort();</span><br><span class="line">        <span class="keyword">return</span> keyShape <span class="keyword">as</span> IShape;</span><br><span class="line">      &#125;,</span><br><span class="line">      setState(name, value, item) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name === <span class="string">'status'</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (value === ItemStatus.ACTIVE) &#123;</span><br><span class="line">            <span class="keyword">const</span> group = item?.getContainer();</span><br><span class="line">            <span class="keyword">const</span> shapes = group?.getChildren() ?? [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> shape of shapes) &#123;</span><br><span class="line">              <span class="keyword">if</span> (shape.cfg.name?.includes(<span class="string">'test-node-wave'</span>)) &#123;</span><br><span class="line">                shape.attr(<span class="string">'opacity'</span>, <span class="number">0.6</span>);</span><br><span class="line">                shape.attr(<span class="string">'fill'</span>, <span class="string">'#4E83FD'</span>);</span><br><span class="line">                shape.show();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.cfg.name?.includes(<span class="string">'test-node-dummy'</span>)) &#123;</span><br><span class="line">                shape.attr(<span class="string">'opacity'</span>, <span class="number">1</span>);</span><br><span class="line">                shape.attr(<span class="string">'stroke'</span>, <span class="string">'#4E83FD'</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                shape.attr(<span class="string">'opacity'</span>, <span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> group = item?.getContainer();</span><br><span class="line">            <span class="keyword">const</span> shapes = group?.getChildren() ?? [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> shape of shapes) &#123;</span><br><span class="line">              <span class="keyword">if</span> (shape.cfg.name?.includes(<span class="string">'test-node-wave'</span>)) &#123;</span><br><span class="line">                shape.attr(<span class="string">'opacity'</span>, <span class="number">0</span>);</span><br><span class="line">                shape.attr(<span class="string">'fill'</span>, <span class="string">'#FFFFFF'</span>);</span><br><span class="line">                shape.hide();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.cfg.name?.includes(<span class="string">'test-node-dummy'</span>)) &#123;</span><br><span class="line">                shape.attr(<span class="string">'opacity'</span>, <span class="number">0</span>);</span><br><span class="line">                shape.attr(<span class="string">'stroke'</span>, <span class="string">'#FFFFFF'</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                shape.attr(<span class="string">'opacity'</span>, value === ItemStatus.OPACITY ? <span class="number">0.2</span> : <span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'single-node'</span>,</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h2 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h2><p>第一个难点在于，不能简单的在draw或者afterdraw中添加一个lable就可以了，这种只适用于文字和连线的起点相对位置不变的情况，而我们的需求时，节点可以拖拽，那就意味着连线长度可以变，而我们要求的是文字在连线中间。</p><p>解决方案是：</p><ul><li>在afterUpdate中每次都删除上一个添加的text shape并添加新的text shape</li><li>afterUpdate中其实是没有group的，可以在draw之后，把group强行挂载到cfg上</li></ul><p>第二个难点在于，如何保持渐变色一定是从连线起点到终点，因为G6只支持某个固定角度的设置，比如设置0度的渐变，就一定是从左到右渐变，如果某条线是从右到左，那这个渐变色就反了</p><p>解决方案是：</p><ul><li>还是在afterUpdate中，不断计算新的startPoint和endPoint的位置，算出角度来</li><li>通过计算出来的角度，再通过shape.attr设置stroke的渐变色属性</li></ul><p>第三个难点在于，如何支持双线曲线，因为默认的是直线，双向直线会重合</p><p>解决方案在于：</p><ul><li>定义另一个自定义类型，基于贝塞尔曲线扩展</li></ul><p>具体代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EDGE_LABEL_HEIGHT = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> EDGE_LABEL_FONT_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLabelToEdge</span>(<span class="params">cfg: ModelConfig | <span class="literal">undefined</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> config = cfg <span class="keyword">as</span> ModelConfig;</span><br><span class="line">  <span class="keyword">const</span> group = cfg?.group <span class="keyword">as</span> IGroup;</span><br><span class="line">  <span class="keyword">const</span> shape = group?.get(<span class="string">'children'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// get the coordinate of the mid point on the path</span></span><br><span class="line">  <span class="comment">// 获取路径图形的中点坐标</span></span><br><span class="line">  <span class="keyword">const</span> midPoint = shape.getPoint(<span class="number">0.5</span>);</span><br><span class="line">  <span class="keyword">const</span> startPoint = cfg?.startPoint;</span><br><span class="line">  <span class="keyword">const</span> endPoint = cfg?.endPoint;</span><br><span class="line">  <span class="keyword">if</span> (startPoint &amp;&amp; endPoint) &#123;</span><br><span class="line">    <span class="keyword">const</span> angle =</span><br><span class="line">      <span class="built_in">Math</span>.atan2(endPoint.y - startPoint.y, endPoint.x - startPoint.x) * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (angle &gt; -<span class="built_in">Math</span>.PI &amp;&amp; angle &lt; <span class="built_in">Math</span>.PI) &#123;</span><br><span class="line">      shape.attr(<span class="string">'stroke'</span>, <span class="string">`l(0) 0:#4E83FD 1:#B6CBFE`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      shape.attr(<span class="string">'stroke'</span>, <span class="string">`l(0) 0:#B6CBFE 1:#4E83FD`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (midPoint) &#123;</span><br><span class="line">    <span class="keyword">const</span> labelWidth = getStringWidth(</span><br><span class="line">      config.text <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      EDGE_LABEL_FONT_SIZE,</span><br><span class="line">    );</span><br><span class="line">    group?.removeChild(config.preEdgeText <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">    group?.removeChild(config.preEdgeTextBackground <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">    config.preEdgeTextBackground = group.addShape(<span class="string">'rect'</span>, &#123;</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        x: midPoint.x - (labelWidth + <span class="number">12</span>) / <span class="number">2</span>,</span><br><span class="line">        y: midPoint.y - EDGE_LABEL_HEIGHT + <span class="number">4</span>,</span><br><span class="line">        width: labelWidth + <span class="number">12</span>,</span><br><span class="line">        height: EDGE_LABEL_HEIGHT,</span><br><span class="line">        fill: <span class="string">'#E1EAFF'</span>,</span><br><span class="line">        radius: EDGE_LABEL_HEIGHT / <span class="number">2</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      name: <span class="string">'test-edge-background'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    config.preEdgeText = group.addShape(<span class="string">'text'</span>, &#123;</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        text: cfg?.text,</span><br><span class="line">        fill: <span class="string">'#3370FF'</span>,</span><br><span class="line">        fontWeight: <span class="number">500</span>,</span><br><span class="line">        fontSize: <span class="number">10</span>,</span><br><span class="line">        lineHeight: <span class="number">16</span>,</span><br><span class="line">        textAlign: <span class="string">'center'</span>,</span><br><span class="line">        x: midPoint.x,</span><br><span class="line">        y: midPoint.y,</span><br><span class="line">        width: labelWidth + <span class="number">12</span>,</span><br><span class="line">        height: EDGE_LABEL_HEIGHT,</span><br><span class="line">      &#125;,</span><br><span class="line">      name: <span class="string">'test-edge-text'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">G6.registerEdge(</span><br><span class="line"><span class="string">'test-edge-single'</span>,</span><br><span class="line">&#123;</span><br><span class="line">    afterDraw(cfg, group) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = cfg <span class="keyword">as</span> ModelConfig;</span><br><span class="line">    config.group = group;</span><br><span class="line">    addLabelToEdge(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">    afterUpdate(cfg) &#123;</span><br><span class="line">    addLabelToEdge(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'line'</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">G6.registerEdge(</span><br><span class="line"><span class="string">'test-edge-double'</span>,</span><br><span class="line">&#123;</span><br><span class="line">    afterDraw(cfg, group) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = cfg <span class="keyword">as</span> ModelConfig;</span><br><span class="line">    config.group = group;</span><br><span class="line">    addLabelToEdge(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">    afterUpdate(cfg) &#123;</span><br><span class="line">    addLabelToEdge(cfg);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'quadratic'</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="事件监听改变节点和连线样式"><a href="#事件监听改变节点和连线样式" class="headerlink" title="事件监听改变节点和连线样式"></a>事件监听改变节点和连线样式</h2><p>事件监听的代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightLocalNodesAndEdges</span>(<span class="params">graphInstance: IGraph, e: IG6GraphEvent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; localEdges, localNodesId, otherNodesId, otherEdges &#125; =</span><br><span class="line">    getAllLocalNodesAndEdges(graphInstance, e.item?.getModel().id <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">  localEdges.forEach(<span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.setItemState(</span><br><span class="line">      edge.getModel().id <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      <span class="string">'status'</span>,</span><br><span class="line">      ItemStatus.NORMAL,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  otherEdges.forEach(<span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.setItemState(</span><br><span class="line">      edge.getModel().id <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">      <span class="string">'status'</span>,</span><br><span class="line">      ItemStatus.OPACITY,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  localNodesId.forEach(<span class="function"><span class="params">nodeId</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.setItemState(nodeId <span class="keyword">as</span> <span class="built_in">string</span>, <span class="string">'status'</span>, ItemStatus.NORMAL);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  otherNodesId.forEach(<span class="function"><span class="params">nodeId</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.setItemState(nodeId <span class="keyword">as</span> <span class="built_in">string</span>, <span class="string">'status'</span>, ItemStatus.OPACITY);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightAllNodesAndGraph</span>(<span class="params">graphInstance: IGraph</span>) </span>&#123;</span><br><span class="line">  graphInstance.findAll(<span class="string">'edge'</span>, <span class="function"><span class="params">edge</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.setItemState(edge, <span class="string">'status'</span>, ItemStatus.NORMAL);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  graphInstance.findAll(<span class="string">'node'</span>, <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    graphInstance.setItemState(node, <span class="string">'status'</span>, ItemStatus.NORMAL);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useInternalEventListener</span>(<span class="params">graphInstance: IGraph | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onMouseMoveOnNode</span>(<span class="params">e: IG6GraphEvent</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !e.target.cfg.name?.includes(<span class="string">'test-node--name-'</span>) &amp;&amp;</span><br><span class="line">        graphInstance</span><br><span class="line">      ) &#123;</span><br><span class="line">        highlightLocalNodesAndEdges(graphInstance, e);</span><br><span class="line">        graphInstance.setItemState(e.item <span class="keyword">as</span> Item, <span class="string">'status'</span>, ItemStatus.ACTIVE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onMouseLeaveNode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (graphInstance) &#123;</span><br><span class="line">        highlightAllNodesAndGraph(graphInstance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    graphInstance?.on(<span class="string">'node:mousemove'</span>, onMouseMoveOnNode);</span><br><span class="line"></span><br><span class="line">    graphInstance?.on(<span class="string">'node:mouseleave'</span>, onMouseLeaveNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      graphInstance?.off(<span class="string">'node:mousemove'</span>, onMouseMoveOnNode);</span><br><span class="line"></span><br><span class="line">      graphInstance?.off(<span class="string">'node:mouseleave'</span>, onMouseLeaveNode);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [graphInstance]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局算法和拖拽节点"><a href="#布局算法和拖拽节点" class="headerlink" title="布局算法和拖拽节点"></a>布局算法和拖拽节点</h2><p>G6其实自带了一个力导向布局，不过很怪，其效果和d3的不一样，且拖拽时不支持只有碰撞检测</p><p>这里有几个难点：</p><ul><li>如何使用d3的力导向布局，这里主要是d3会改变点的数据结构，导致G6执行异常</li><li>如果自己实现碰撞检测</li><li>拖拽节点的时候，如何平滑一点</li></ul><p>解决方案如下：</p><ul><li>用Promise封装d3的布局算法，在监听到end事件之后再把数据处理成G6支持的格式，不然没等所有tick都完成就让G6渲染，到一半的时候，d3又把数据格式改了，就会报错</li><li>自己实现的碰撞检测其实简单判断下节点之间的距离，如果小于一定值，就把其他节点推开，然后记录被推开的节点，算一被推开的节点和所有节点之间的距离，如果还是有接近的，再修改位置并继续递归这一轮修改位置的节点，为了防止栈溢出，可以设置最大递归30层</li><li>如果每次计算完成节点后调用refreshPosition方法，其实会导致线条抖动，解决方案是开启force布局，于是可以用layout来实现平滑的重新渲染，但是所有节点的位置使用fx和fy来设置，防止力导向布局修改位置</li></ul><p>代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> REFRESH_NODE_POSITION_RECURSION_COUNT = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> REFRESH_NODE_COLLIDE_RADIUS = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">const</span> REFRESH_NODE_COLLIDE_RADIUS_SEQUARE = <span class="built_in">Math</span>.pow(</span><br><span class="line">  REFRESH_NODE_COLLIDE_RADIUS,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTwoNodeDistance</span>(<span class="params">node1: NodeConfig, node2: NodeConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> distance =</span><br><span class="line">    <span class="built_in">Math</span>.pow((node1.x <span class="keyword">as</span> <span class="built_in">number</span>) - (node2.x <span class="keyword">as</span> <span class="built_in">number</span>), <span class="number">2</span>) +</span><br><span class="line">    <span class="built_in">Math</span>.pow((node1.y <span class="keyword">as</span> <span class="built_in">number</span>) - (node2.y <span class="keyword">as</span> <span class="built_in">number</span>), <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(distance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshNodesPositionHelper</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  dragedNode: NodeConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">  positionChangedNodes: NodeConfig[],</span></span></span><br><span class="line"><span class="function"><span class="params">  allNodes: NodeConfig[],</span></span></span><br><span class="line"><span class="function"><span class="params">  deep = 0,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (deep &gt; REFRESH_NODE_POSITION_RECURSION_COUNT) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> nextPositionChangedNodesSet = <span class="keyword">new</span> Set&lt;NodeConfig&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> positionChangedNode of positionChangedNodes) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> everyNode of allNodes) &#123;</span><br><span class="line">      <span class="keyword">if</span> (positionChangedNode.id === everyNode.id) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> distance = getTwoNodeDistance(positionChangedNode, everyNode);</span><br><span class="line">      <span class="keyword">if</span> (distance &lt; REFRESH_NODE_COLLIDE_RADIUS) &#123;</span><br><span class="line">        nextPositionChangedNodesSet.add(everyNode);</span><br><span class="line">        <span class="keyword">const</span> detaX = <span class="built_in">Math</span>.abs(</span><br><span class="line">          (positionChangedNode.x <span class="keyword">as</span> <span class="built_in">number</span>) - (everyNode.x <span class="keyword">as</span> <span class="built_in">number</span>),</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> detaY = <span class="built_in">Math</span>.abs(</span><br><span class="line">          (positionChangedNode.y <span class="keyword">as</span> <span class="built_in">number</span>) - (everyNode.y <span class="keyword">as</span> <span class="built_in">number</span>),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一元二次方程组求根公式 2 * moveDistance^2 + 2(detaX + detaY)*moveDistance = REFRESH_NODE_COLLIDE_RADIUS_SEQUARE - (detaX^2 + detaY^2)</span></span><br><span class="line">        <span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> b = <span class="number">2</span> * (detaX + detaY);</span><br><span class="line">        <span class="keyword">const</span> c =</span><br><span class="line">          detaX * detaX + detaY * detaY - REFRESH_NODE_COLLIDE_RADIUS_SEQUARE;</span><br><span class="line">        <span class="keyword">const</span> moveDistance = (<span class="built_in">Math</span>.sqrt(b * b - <span class="number">4</span> * a * c) - b) / (<span class="number">2</span> * a);</span><br><span class="line"></span><br><span class="line">        everyNode.x =</span><br><span class="line">          (everyNode.x <span class="keyword">as</span> <span class="built_in">number</span>) +</span><br><span class="line">          ((everyNode.x <span class="keyword">as</span> <span class="built_in">number</span>) - (positionChangedNode.x <span class="keyword">as</span> <span class="built_in">number</span>) &gt; <span class="number">0</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : <span class="number">-1</span>) *</span><br><span class="line">            moveDistance;</span><br><span class="line"></span><br><span class="line">        everyNode.y =</span><br><span class="line">          (everyNode.y <span class="keyword">as</span> <span class="built_in">number</span>) +</span><br><span class="line">          ((everyNode.y <span class="keyword">as</span> <span class="built_in">number</span>) - (positionChangedNode.y <span class="keyword">as</span> <span class="built_in">number</span>) &gt; <span class="number">0</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : <span class="number">-1</span>) *</span><br><span class="line">            moveDistance;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextPositionChangedNodesSet.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> nextPositionChangedNodes: NodeConfig[] = [];</span><br><span class="line">    nextPositionChangedNodesSet.forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      nextPositionChangedNodes.push(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    refreshNodesPositionHelper(</span><br><span class="line">      dragedNode,</span><br><span class="line">      nextPositionChangedNodes,</span><br><span class="line">      allNodes,</span><br><span class="line">      deep + <span class="number">1</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    allNodes.forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">      node.fx = node.x;</span><br><span class="line">      node.fy = node.y;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onNodeDrag</span>(<span class="params">e: IG6GraphEvent</span>) </span>&#123;</span><br><span class="line">    graphInstance?.layout();</span><br><span class="line">    <span class="keyword">const</span> model = e.item?.get(<span class="string">'model'</span>);</span><br><span class="line">    model.x = e.x;</span><br><span class="line">    model.y = e.y;</span><br><span class="line">    model.fx = e.x;</span><br><span class="line">    model.fy = e.y;</span><br><span class="line">    <span class="keyword">const</span> allNodes = graphInstance</span><br><span class="line">    ?.findAll(<span class="string">'node'</span>, <span class="function"><span class="params">node</span> =&gt;</span> node.getID() !== e.item?.getID())</span><br><span class="line">    .map(<span class="function"><span class="params">node</span> =&gt;</span> node.getModel()) <span class="keyword">as</span> NodeConfig[];</span><br><span class="line"></span><br><span class="line">    refreshNodesPositionHelper(model, [model], allNodes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMouseMoveOnNode</span>(<span class="params">e: IG6GraphEvent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">    !e.target.cfg.name?.includes(<span class="string">'test-node--name-'</span>) &amp;&amp;</span><br><span class="line">    graphInstance</span><br><span class="line">    ) &#123;</span><br><span class="line">    highlightLocalNodesAndEdges(graphInstance, e);</span><br><span class="line">    graphInstance.setItemState(e.item <span class="keyword">as</span> Item, <span class="string">'status'</span>, ItemStatus.ACTIVE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMouseLeaveNode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (graphInstance) &#123;</span><br><span class="line">    highlightAllNodesAndGraph(graphInstance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">graphInstance?.on(<span class="string">'node:drag'</span>, onNodeDrag);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在想着飞书文档的关系图是怎么实现的，于是想起了之前用的G6，于是简单实现了一版。&lt;/p&gt;
&lt;h1 id=&quot;最终效果&quot;&gt;&lt;a href=&quot;#最终效果&quot; class=&quot;headerlink&quot; title=&quot;最终效果&quot;&gt;&lt;/a&gt;最终效果&lt;/h1&gt;&lt;p&gt;主要功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点分为两部分，上半部分是图标，下半部分是文字&lt;ul&gt;
&lt;li&gt;鼠标放到图标上时，会产生水波纹的扩散特效，同时出现一圈边框&lt;/li&gt;
&lt;li&gt;文字需要有下划线以及白色背景，且水波纹特效不能被白色背景挡住&lt;/li&gt;
&lt;li&gt;文字的下划线需要是方格&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;连线要有渐变色，且渐变色要从箭头起点到箭头终点，且如果支持双向关系，如何实现两条边&lt;/li&gt;
&lt;li&gt;连线上中间位置要有一个Label&lt;/li&gt;
&lt;li&gt;节点和连线要支持半透明&lt;/li&gt;
&lt;li&gt;整体布局要是力导向布局，且支持节点拖拽，拖拽时不能让节点之间产生重叠，但是也不能因为连线拖动其他节点（单独提出这一点是因为G6自带的力导向布局节点会被拖拽）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（一）—— 管理的基本框架</title>
    <link href="https://sunra.top/2023/03/05/management-methods-of-technical-people/"/>
    <id>https://sunra.top/2023/03/05/management-methods-of-technical-people/</id>
    <published>2023-03-05T02:59:20.000Z</published>
    <updated>2023-05-16T05:31:16.914Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个程序员，我们平时关注的关于管理方面的知识，最初可能是设计模式，管理的是某一个需求的复杂度，慢慢的，我们会开始关注领域划分，DDD，业务建模等，这些管理的是系统的复杂度，再后来，事情的复杂度逐渐进化到我们个人无法处理了，我们就需要团队合作了，这里管理的就是项目复杂度。</p><p>其实这三者是自始至终都会存在且相互关联的，很多理念也很相似，只是我们需要逐渐的参与实际工作才会一步步认知到这种复杂度。</p><p>关于设计模式和领域驱动设计，我之前的博客都有总结过一些我看过的书和具体的实践，这次结合亲身的体验与《知行》这本书，总结一下项目管理中的一些方法论。</p><a id="more"></a><p>先谈几点自己在本书中最大的几点收获：</p><ol><li>角色认知很重要，如果没有认识到自己已经是管理者了，那么就认识不到管理者应该做什么，反而去和团队成员互卷，没做好自己应该做的事，也让人家没事做。</li><li>制度很重要，文化，价值观等不要空喊口号，要让团队成员做什么，就要让制度奖励这种行为，不想让团队成员做什么，就要让制度惩罚着这种行为。</li><li>识别出团队成员的工作内容就是管理者该做的，你都不知道你的成员在做什么，就不要当管理者了，说明你还没认知到自己是管理者了。</li><li>物质奖励超出一定程度可能确实效果不明显的，但是如果物质奖励不到位，杀伤力是最大的。</li><li>任何制度的执行都是有成本的，比如时间成本，机会成本，不要所有制度都照搬</li><li>对于知识创造型团队，靠流程或者自动化工具保证的是下限，上限需要靠人，很多团队都反过来了，通过制度惩罚人来让人保证下限。要把重复性的工作交给自动化流程，让人解放出来去做有创造性的工作。</li><li>管理工具没有好坏之分，你的团队需要高效执行，而不太需要创造，那就KPI，如果需要创造行，那就OKR，注意，这里说的是两种工具的精神，把OKR用成KPI的也不在少数。tuan</li><li>团队文化很重要，但你想象中的团队文化是不是和你塑造出来的一样也很重要。同时也要认识到，人的不同方面的素质就是正态分布的，不要指望手下的人天生就会高效协作，那要管理者有什么用。</li></ol><h2 id="管理路口的彷徨"><a href="#管理路口的彷徨" class="headerlink" title="管理路口的彷徨"></a>管理路口的彷徨</h2><h3 id="工程师有哪些发展路径"><a href="#工程师有哪些发展路径" class="headerlink" title="工程师有哪些发展路径"></a>工程师有哪些发展路径</h3><ul><li><p>技术类</p><ul><li>架构师</li><li>技术专家</li></ul></li><li><p>管理类</p><ul><li>技术管理者</li><li>职业经理</li></ul></li><li><p>创业类</p><ul><li>创始人</li><li>技术合伙人</li></ul></li><li><p>顾问类</p><ul><li>投资顾问</li><li>管理顾问</li></ul></li></ul><h3 id="哪些人容易走上管理岗位"><a href="#哪些人容易走上管理岗位" class="headerlink" title="哪些人容易走上管理岗位"></a>哪些人容易走上管理岗位</h3><ul><li><p>天时</p><p>最好是去那些发展快的行业和公司，在稳定的行业想要走上管理岗位，需要漫长的等待。但也并不是要去创业公司和小公司。天时轮和A轮的公司，大多处于生存期，还没有上规模，而没有规模的公司不需要你去做管理。这种创业公司更适合技术合伙人的方向而不是技术管理者。也不要总是换公司，因为对提高管理能力不利，因为大部分时间都在做同水平的重复。</p></li><li><p>地利</p><p>就是自身优势，能力和所负责的工作内容<br>第一类是负责最全局的模块，核心是“广”<br>第二类是负责最核心的技术模块，核心是“深”</p></li><li><p>人和</p><p>人和的关键在于能否得到他人的支持</p><ol><li>机会。平台和资源的支持，一般是上级</li><li>陪伴和共同成长的支持。一般是平级的管理者</li><li>指导和前进的方向。一般是导师，指导人，管理教练或者上级</li><li>情感支持。让你勇于面对困难和挫折</li></ol></li></ul><h3 id="纠结：要不要转回去做技术"><a href="#纠结：要不要转回去做技术" class="headerlink" title="纠结：要不要转回去做技术"></a>纠结：要不要转回去做技术</h3><ul><li><p>担心失去技术能力</p><ul><li>建立学习机制</li><li>请教专家</li><li>共创</li></ul></li><li><p>担心做不好管理</p><ul><li>管理和技术并不是完全无关的</li><li>认清现实，当业务复杂度到了一定程度，就不是凭借个人技术可以解决的了，项目管理势在必行</li></ul></li></ul><h3 id="如何保持技术竞争力"><a href="#如何保持技术竞争力" class="headerlink" title="如何保持技术竞争力"></a>如何保持技术竞争力</h3><p>从技术实现者变为技术应用者，你和技术之间的关系就发生了变化，技术能力这个词的意思也就发生了转变</p><ul><li><p>从技术实现者到技术应用者发生了什么变化</p><ul><li>对于技术实现者来说，程序设计能力，编码实现能力，技术攻坚能力和技术评估能力，都是需要具备的，主要关心的是怎么把事情做出来</li><li><p>对于技术应用者来说，技术评估能力变得尤为重要，技术管理者主要关心的是要不要做以及这是一件什么事情，是要在综合评估之后做出决策和判断的</p><ul><li>管理者的技术不体现在技术的专业精深和编码熟练度上，而是技术评估能力上</li><li>团队里专业技术更强的人越来越多，是一种必然，也是一种好现象</li><li>管理者想要让员工服气，更重要的是带着员工取得良好的业绩，获得良好的回报，帮助员工更好地成长</li></ul></li></ul></li><li><p>技术评估的纬度</p><ul><li><p>结果评估</p><ul><li>这是件什么事</li><li>希望得到什么结果</li><li>从几个纬度去衡量结果，从哪几个技术指标去验收成果（要以终为始，结果可测量）</li></ul></li><li><p>可行性评估</p><ul><li>能不能做</li><li><p>值不值得</p><ul><li><p>成本</p><ul><li>投入的资源成本：人财物时</li><li><p>技术维护的成本</p><ul><li>技术选型成本</li><li>技术升级成本</li><li>问题排查成本</li><li>代码维护成本</li></ul></li><li><p>机会成本</p></li><li>协作成本</li></ul></li><li><p>收益</p></li></ul></li></ul></li><li><p>风险评估</p><ul><li>那些技术风险需要未雨绸缪</li><li>该技术方案带来的最大损失的可能性和边界</li></ul></li></ul></li><li><p>技术判断力的来源</p><ul><li>新经理的技术判断力多半来自之前的积累</li><li><p>提升技术判断力的方式</p><ul><li>建立学习机制</li><li>专项技术调研项目化</li><li>和技术专家交流</li><li>听取工作汇报</li></ul></li></ul></li></ul><h3 id="管理风格"><a href="#管理风格" class="headerlink" title="管理风格"></a>管理风格</h3><p>所谓管理风格，本质上就是你和团队的协作方式，也就是你和团队的相对关系，即你在团队的什么位置</p><ul><li><p>发号施令型</p><p>指令式管理。当一项工作不容有闪失，而你又是唯一熟悉且最有掌控力的人，一个命令式的你更能降低风险，达成目标。所以，命令式管理更适用于需要强制性的场景</p></li></ul><ul><li>全程指挥，但不会亲力亲为</li><li>重事不重人，眼睛盯着目标和结果，对人的发展和成长关注少</li><li>执行力强，但是很难培养团队梯度</li></ul><ul><li><p>以身作则型</p><p>支持式管理。当一个团队特别需要凝聚力和斗志去努力攻坚的时候，一个支持式的你会促成很好地效果。所以支持式管理特别能带动团队士气和凝聚力，在提升大家热情和积极性方面很有优势</p></li></ul><ul><li>凡事冲在最前，和团队打成一片</li><li>重人不重事，不会忽视做事，只是更在意人的感受，支持员工的方式倾向于直接替员工做事，而不是指导员工独立做事</li><li>员工有归属感，但是管理不了大规模团队</li></ul><ul><li><p>激发辅导型</p><p>当有一些核心人才需要重点培养，，团队发展需要梯队的时候，一个教练式的你会带来明显的效果。不但能把事情做好，团队成员也能得到快速成长。虽然执行速度通常不快，但是不会偏离方向</p></li></ul><ul><li>不会亲力亲为帮员工做事，但是会辅导和启发员工怎么去完成工作，并提供鼓励，支持和反馈</li><li>既关心员工在做事过程中有没有得到锻炼和成长，也关心事情本身有没有很好地完成</li><li>有助于建立团队梯度，但这种方式对管理者精力消耗比较大，很难覆盖到全体成员，适合核心团队的培养</li></ul><ul><li><p>无为而治型</p><p>当团队梯度成熟的时候，团队成员需要发挥空间的时候，一个授权式的你能提供最恰当的管理方式。因为成熟的下属最需要的不是你的帮助，而是你的放权。</p></li></ul><ul><li>安排好工作后就撒手不管了，把工作完全授权给团队成员</li><li>对于不成熟团队，成员会野蛮生长，对于成熟团队，成员就会有很好的发挥空间</li></ul><h3 id="如何找到管理自信"><a href="#如何找到管理自信" class="headerlink" title="如何找到管理自信"></a>如何找到管理自信</h3><ul><li><p>不自信的来源</p><ul><li>管理经验不足和管理方法欠缺</li><li>和团队成员对立比较</li><li>背负沉重的心理负担，担心辜负上级的期望</li></ul></li><li><p>应对方法</p><ul><li><p>能力三核</p><p>了解自己有哪些能力，并进行迁移，知识不太具有可迁移性，但是技能和才干可以，可以通过朋友对自己的称赞，“盖普洛优势识别器2.0”或者“VIA品格优势”等相关理论和测评工具</p></li></ul></li></ul><pre><code>- 知识：知道和理解的内容和信息- 技能：操作并完成的技术  - 快速学习能力  - 进度控制能力- 才干  - 自信  - 前瞻</code></pre><ul><li><p>不要和团队成员对立</p><p>现在是团队的负责人，需要把自己从和人和团队成员的比较和竞争中抽离，去看看自己将带出一个什么样的团队，以及在这过程中，你能为公司，团队和团队成员带来什么样的成绩和成长。<br>你要做的是，用大家的力量去做出更好的成果，而不是单单因为你的职位才让大家服气。</p></li><li><p>获得外部持续的正反馈</p><ul><li><p>建立正反馈通道，尤其是和上级沟通，可以和上级约好一个例行的沟通机制，定期汇报团队工作，并就一些重要工作征求上级的看法和评价</p><ul><li>在你看来，我有哪一两点是做的不错的</li><li>你能感受到我明显有进步的地方吗</li><li>我希望了解你比较看重什么</li></ul></li></ul></li></ul><h2 id="管理的基本框架"><a href="#管理的基本框架" class="headerlink" title="管理的基本框架"></a>管理的基本框架</h2><h3 id="什么是管理"><a href="#什么是管理" class="headerlink" title="什么是管理"></a>什么是管理</h3><p>管理问题不仅复杂，而且不稳定：</p><ol><li>工业时代追求严格管控，强调外驱，更多地依靠胡萝卜加大棒的奖惩机制。</li><li>知识经济时代追求创新，强调内驱，更多地依靠激发员工的自主性。<br>无论是内驱还是外驱，都需要物质精神双方面<br>如果物质奖励无法保证员工的生存，怎么精神鼓励都是无效的。<br>区别可能只在于，外驱的精深鼓励偏pua，管理工具偏kpi，内驱的精深鼓励偏信任，放权等积极方面，管理工具偏okr（okr重要的是精神，不代表用了okr就是okr的管理方式，很多公司的okr和kpi没有区别）</li></ol><ul><li><p>管理的发展</p><ul><li><p>古典管理方法论</p><p>管理是由五个要素组成的一种普遍的人类活动，这五个要素是：计划，组织，指挥，协调和控制，强调管理的过程性，强调“做事”的可控性</p></li><li><p>科学管理之父弗雷德里克</p><p>管理就是确切地知道你要别人干什么，并使他用最好的方法去干，他的关注焦点有两个：</p><ol><li>一个是干什么</li><li>一个是怎么干<br>有明显的目标方向和做事方法，强调目标和做事</li></ol></li><li><p>现代管理学之父彼得德鲁克</p><p>管理是一种实践，其本质不在于“知”，而在于“行”，其验证不在于逻辑，而在于成果，其唯一权威就是“成就”，他的这个说法焦点在于实践性和结果性，强调“目标”</p></li><li><p>当代管理学大师斯蒂芬罗宾</p><p>所谓管理，是指同别人一起，或通过别人使活动完成得更加有效的过程。这个背后隐藏着三个要素：“人”，“过程”，“有效”用正式一点的名词叫做组织性，过程性和方向性</p></li></ul></li><li><p>管理大致分为三个阶段，对应三个不同时代</p><ul><li><p>关注过程：强调如何做事</p><p>工业生产时代：工业时代早期，以流水线为典型特征的业务模式，“标准化”和不折不扣地“照章办事”是最重要的工作价值观，任何员工的主动创新都可能会给流水线造成巨大的破坏性，因此管理的焦点放在“过程”，强调做事</p></li><li><p>关注过程和目标：强调设定目标并通过掌握如何“做事”来达成目标</p><p>工业竞争时代：工业时代中后期，随着竞争越来越激烈，生产本身不能带来显著的竞争优势时，管理者开始考虑，如何才能让生产更加“有效”，即产生更多地业绩，因而越来越关注生产的目的性，除了继续强调“做事”之外，管理工作也强调“为了什么做事”，即“目标”</p></li><li><p>关注团队，过程和目标：强调设定“目标”并通过掌握如何“带人”和如何“做事”来达成目标</p><p>知识经济时代：工业发展更加充分之后，“守正出奇”的趋势越来越明显，尤其是信息化产业把我们带向了知识经济时代之后，“创造性”变成了很多企业的生命线。显然，所有生产要素中，只有“人”这个要素具有创造性，因此“人”在管理中的地位被提高了</p></li></ul></li></ul><h3 id="什么是领导力"><a href="#什么是领导力" class="headerlink" title="什么是领导力"></a>什么是领导力</h3><p>领导力就是动员大家为了共同的愿景努力奋斗的艺术。<br>这句话中包含了“动员大家”，“共同愿景”，“努力奋斗”，分别对应了管理第三个阶段中的“带人”，“目标”，“做事”</p><ul><li>带人</li><li>目标</li><li>做事</li></ul><h3 id="管理的基本框架：管理三明治"><a href="#管理的基本框架：管理三明治" class="headerlink" title="管理的基本框架：管理三明治"></a>管理的基本框架：管理三明治</h3><p>我们把无所不在的空气般的认知作为管理的“天”，把承载一切工作的沟通作为管理的“地”，把管理者日常需要做的看方向，带人，做事放在中间，就组成了一个管理框架。管理者就是在角色的“天”和沟通的“地”之间不断劳作——看方向，带人，做事</p><ul><li><p>角色认知</p><p>一旦跳上马车，首先得是一名车夫，这就是所谓的“认知管理”，对应到管理，就是当我们从一位工程师成为团队管理者时，也需要对“管理者”这个角色有充分的认知</p></li><li><p>管理规划：目标</p><p>启动马车之前，需要先看看马车上拉的是什么，目的地在哪里，马队是什么情况，选择哪条路。对应到管理中，就是弄清楚团队的基本职能，工作的目标是什么，团队的状况以及路径选择</p></li></ul><ul><li><p>含义</p><p>管理规划就是在头脑中构建出的管理的愿景，它代表着未来管理的方向</p></li><li><p>形式</p><p>从形势看，管理规划是一个协议，体现你和上级就未来管理工作达成的共识</p></li><li><p>内容</p><p>管理规划是为了回答一个问题，接下来你的团队要投入哪些资源来达成什么目标</p></li><li><p>出现场景</p><ol><li>季度或者年度交替，需要重新审视团队投入产出情况</li><li>由于组织调整，团队或所负责的业务范畴发生显著变化的时候</li><li>空降到一个新团队做管理的时候</li></ol></li><li><p>管理规划四要素</p><p>目标，团队和路径三个要素彼此关联，都是基于职能来规划和设计的，职能是规划的起点以及核心</p></li></ul><pre><code>- 职能：这是什么车，它是做什么的  对应职能，你团队是做什么的  弄清楚自己的团队承担怎样的职责和使命，决定了需要设定什么样的工作目标，以及用哪些纬度来衡量目标；据定了需要什么样的人加入团队以及需要多少人；决定了选择什么样的手段，以及投入什么样的资源来完成工作。  这里很重要的一点就是以终为始。- 目标：这辆车要去哪里  目标，你要产出什么  明确了要去哪里，才能评估需要什么样的马，需要多少匹，以及有哪些路线可以选择。  关于目的地在哪里的问题，是管理规划的第二要素，称为目标。对于为什么要设定目标，很少会有人质疑，因为大家都认为设定目标是理所当然的事情，其必要性不言而喻。但是对于技术团队而言，设定清晰而明确的目标，却是很困难的。- 团队：马队现状如何  团队，你要依靠谁  接手一个新型团队时，你也要盘点自己带的是一个什么团队，因为所有的工作，都是靠团队来完成的，团队才是真正拉车的人。所以，盘点自己的团队，以及看看在“赶路过程”中，如何升级完善自己的团队，并考虑在达成目标之后你期待收获一个什么样的团队- 路径：驾驶马车走哪条路  路径，你要投入什么  路径选择的不同，会带来投入资源的差异，对应到管理中，你需要选择达成目标的方式和手段，并据此向公司申请相应类别和规模的资源。由于公司的预算是要提前做的，因此在管理规划中要考虑到。  把目标拆解为路径，是为了做资源预算  目标拆解为计划，目的是为了落地执行</code></pre><ul><li><p>团队建设：带人</p><p>清楚方向之后，开始驾驭马车前行，这个过程中，需要持续的做两件事，一边抓住马缰绳，协调好整个马队，让马匹一起用力，对应到管理，就是团队建设，带人。</p></li></ul><ul><li><p>三个层次</p><ul><li><p>个体：跑得动</p><ul><li>个体能力：员工能力培养</li><li>意愿：员工激励</li></ul></li><li><p>个体之间：跑得快</p><ul><li><p>人员分工</p><ul><li><p>目标一致</p></li><li><p>标准相同</p><p>不要一个人在追质量，一个人在追进度</p></li></ul></li><li><p>协作水平</p><p>团队成员之间有没有很好地信任和默契，协作上是否高效顺畅</p></li></ul></li><li><p>整体：跑得远</p><ul><li><p>梯队</p><p>团队员工的新老强弱的能力构成。一个团队如果只靠一两个高手支撑，那这个团队很脆弱。这个属于团队整体的“硬件”</p></li><li><p>文化</p><p>团队的文化和价值观，也可以叫做团队氛围。团队成员能够在这里找到非常强的认同感，大家也非常清楚在这个团队中什么是重要的，什么事不重要的，什么是应该的，什么是不应该的。</p><p>团队文化不是喊口号喊出来的，而是要通过制度保证的，你希望团队成员做什么，就要通过制度奖励，你需要团队成员不做什么，就通过制度惩罚</p></li></ul></li></ul></li></ul><ul><li><p>任务管理：做事</p><p>一边挥舞马鞭，指挥马队到达一个又一个里程碑。，就是完成一个又一个的任务，对应到管理中，就是完成一个又一个的任务</p></li></ul><ul><li>事前：做什么事，排优先级</li><li>事中：执行落地</li><li>事后：怎么做更好。自动驾驶，流程机制</li></ul><ul><li><p>沟通反馈</p><p>驾驭马车过程中，车夫不断吆喝也好，挥舞马鞭也好，就是分别和马队以及周围环境相互沟通。</p></li></ul><ul><li><p>场景</p><ul><li>向上沟通</li><li>向下沟通</li><li>横向沟通</li></ul></li><li><p>目的</p><ul><li>建立关系</li><li>同步信息</li><li>表达情感</li><li>说服影响</li></ul></li><li><p>内容</p><ul><li>计划</li><li>进展</li><li>风险</li><li>协同</li><li>人员</li></ul></li><li><p>方式</p><ul><li>当面</li><li>电话</li><li>消息</li><li>电子邮件</li><li>协作平台</li></ul></li><li><p>工具</p><ul><li>3F倾听</li><li>积极主动反馈</li><li>回放确认</li></ul></li><li><p>意识</p><ul><li>主动通报</li><li>换位思考</li><li>闭环意识</li><li>结论优先</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一个程序员，我们平时关注的关于管理方面的知识，最初可能是设计模式，管理的是某一个需求的复杂度，慢慢的，我们会开始关注领域划分，DDD，业务建模等，这些管理的是系统的复杂度，再后来，事情的复杂度逐渐进化到我们个人无法处理了，我们就需要团队合作了，这里管理的就是项目复杂度。&lt;/p&gt;
&lt;p&gt;其实这三者是自始至终都会存在且相互关联的，很多理念也很相似，只是我们需要逐渐的参与实际工作才会一步步认知到这种复杂度。&lt;/p&gt;
&lt;p&gt;关于设计模式和领域驱动设计，我之前的博客都有总结过一些我看过的书和具体的实践，这次结合亲身的体验与《知行》这本书，总结一下项目管理中的一些方法论。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>力导向算法</title>
    <link href="https://sunra.top/2023/02/23/force-oriented-algorithm/"/>
    <id>https://sunra.top/2023/02/23/force-oriented-algorithm/</id>
    <published>2023-02-23T02:59:53.000Z</published>
    <updated>2023-05-16T05:31:16.910Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作上需要实现一个关系图谱，其中图中的节点布局需要用到力导向布局，于是就对其中涉及到的力导向算法产生了兴趣，就去研究了一下。</p><p>力导向绘图 (Force-directed graph drawing)可以用于描述关系图的结点之间的关系，把结点分布到画布上合理的位置，比如描述企业之间的关系，社交网络中的人际关系等。</p><a id="more"></a><h1 id="算法的基本原理"><a href="#算法的基本原理" class="headerlink" title="算法的基本原理"></a>算法的基本原理</h1><p>首先看一下一个效果图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1677373207/origin-of-ray/bVbgUak_jbxebp.png" alt></p><p>上图中的点的分布就是通过力导向算法计算出来，就是将节点视为同性电荷，他们之间存在斥力，这种斥力模拟库仑定律，越近斥力越大；如果两个点之间存在连线，则视为两个点之间有引力，这个引力模拟胡克定律，越远引力越大。</p><p>初始状态下我们随机放置点，然后这些点会因为引力和斥力在空间中移动，直到到达一种平衡，就形成了力导向布局。</p><h2 id="斥力"><a href="#斥力" class="headerlink" title="斥力"></a>斥力</h2><p>把每个节点看做一个电荷，电荷与电荷之间存在斥力，也就是库仑力，根据库仑定律( Coulomb’s law)，电子之间的斥力可以这么计算：</p><script type="math/tex; mode=display">F = k_e\frac{q_1q_2}{r^2}\overrightarrow{e}</script><p>我们可以假设$q_1和q_2$都是1，那么上述公式就变成了</p><script type="math/tex; mode=display">F = k_e\frac{1}{r^2}\overrightarrow{e}</script><h2 id="引力"><a href="#引力" class="headerlink" title="引力"></a>引力</h2><p>一些粒子之间被一些边所牵连，这些边产生类似弹簧的胡克引力：</p><script type="math/tex; mode=display">F_s = k_s(x - x_0)</script><p>牵制着边两端的粒子。斥力和引力不断作用，粒子在不断位移之后趋于平衡，逐渐不再发生相对位移，能量不断消耗，最终趋于零。</p><p>在引力和斥力地作用下不断地更新坐标，经过多次迭代达到一个稳定状态，收敛结束。参数和迭代次数需要调试。</p><h2 id="计算步骤"><a href="#计算步骤" class="headerlink" title="计算步骤"></a>计算步骤</h2><p>如果要用代码去实现简化后的力导向图的布局，我们需要几个步骤。</p><ul><li>设置点数据nodes, 链接数据links。</li><li>对点进行随机定位。</li><li>渲染视图</li><li>执行力算法计算位置，渲染视图（重复执行N次）</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>其实理解了上面的流程，完全可以自己实现一个版本的力导向算法，我这里只是提供一个简单的版本，每个人实现的算法和最后的效果可能完全不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.y = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(source, target) &#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CANVAS_WIDTH = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> CANVAS_HEIGHT = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForceDirected</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(n) &#123;</span><br><span class="line">    <span class="keyword">this</span>.mNodeList = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>).map(<span class="keyword">new</span> Node());</span><br><span class="line">    <span class="keyword">this</span>.mEdgeList = []</span><br><span class="line">    <span class="keyword">this</span>.mDxMap = [];</span><br><span class="line">    <span class="keyword">this</span>.mDyMap = [];</span><br><span class="line">    <span class="keyword">this</span>.ejectFactor = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">this</span>.condenseFactor = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> edgeCount = <span class="built_in">Math</span>.random() * <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; edgeCount; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> targetId = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * n);</span><br><span class="line">        <span class="keyword">let</span> edge = <span class="keyword">new</span> Edge(i, targetId);</span><br><span class="line">        <span class="keyword">this</span>.mEdgeList.push(edge);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.coefficient = <span class="built_in">Math</span>.sqrt(CANVAS_WIDTH * CANVAS_HEIGHT / mNodeList.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> initialSize = <span class="number">40.0</span>;</span><br><span class="line">    <span class="keyword">const</span> initialX = CANVAS_WIDTH * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">const</span> initialY = CANVAS_HEIGHT * <span class="number">.5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="keyword">this</span>.mNodeList) &#123;</span><br><span class="line">      <span class="keyword">this</span>.mNodeList[i].x = initialX + initialSize * (<span class="built_in">Math</span>.random() - <span class="number">.5</span>);</span><br><span class="line">      <span class="keyword">this</span>.mNodeList[i].y = initialY + initialSize * (<span class="built_in">Math</span>.random() - <span class="number">.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算斥力</span></span><br><span class="line">  calculateRepulsive() &#123;</span><br><span class="line">    <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.mNodeList.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.mNodeList.length; j++) &#123;</span><br><span class="line">        distX = <span class="keyword">this</span>.mNodeList[i].x - <span class="keyword">this</span>.mNodeList[j].x;</span><br><span class="line">        distY = <span class="keyword">this</span>.mNodeList[i].y - <span class="keyword">this</span>.mNodeList[j].y;</span><br><span class="line">        dist = <span class="built_in">Math</span>.sqrt(distX * distX + distY * distY);</span><br><span class="line">        <span class="keyword">if</span> (dist &gt; <span class="number">0</span> &amp;&amp; dist &lt; <span class="number">250</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.mDxMap[i] = distX * <span class="keyword">this</span>.ejectFactor / <span class="built_in">Math</span>.pow(dist, <span class="number">2</span>);</span><br><span class="line">          <span class="keyword">this</span>.mDyMap[i] = distY * <span class="keyword">this</span>.ejectFactor / <span class="built_in">Math</span>.pow(dist, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算引力</span></span><br><span class="line">  calculateTraction() &#123;</span><br><span class="line">    <span class="keyword">let</span> startNode, endNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> e = <span class="number">0</span>; e &lt; mEdgeList.length; e++) &#123;</span><br><span class="line">      <span class="keyword">const</span> eStartID = mEdgeList[e].source;</span><br><span class="line">      <span class="keyword">const</span> eEndID = mEdgeList[e].target;</span><br><span class="line">      startNode = <span class="keyword">this</span>.mNodeList[eStartID];</span><br><span class="line">      endNode = <span class="keyword">this</span>.mNodeList[eEndID];</span><br><span class="line">      <span class="keyword">let</span> distX, distY, dist;</span><br><span class="line">      distX = startNode.x - endNode.x;</span><br><span class="line">      distY = startNode.y - endNode.y;</span><br><span class="line">      dist = <span class="built_in">Math</span>.sqrt(distX * distX + distY * distY);</span><br><span class="line">      <span class="keyword">this</span>.mDxMap[eStartID] = <span class="keyword">this</span>.mDxMap[eStartID] - distX * dist / k * <span class="keyword">this</span>.condenseFactor;</span><br><span class="line">      <span class="keyword">this</span>.mDyMap[eStartID] = <span class="keyword">this</span>.mDyMap[eStartID] - distY * dist / k * <span class="keyword">this</span>.condenseFactor;</span><br><span class="line">      <span class="keyword">this</span>.mDxMap[eEndID] = <span class="keyword">this</span>.mDxMap[eEndID] + distX * dist / k * <span class="keyword">this</span>.condenseFactor;</span><br><span class="line">      <span class="keyword">this</span>.mDyMap[eEndID] = <span class="keyword">this</span>.mDyMap[eEndID] + distY * dist / k * <span class="keyword">this</span>.condenseFactor;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateCoordinates() &#123;</span><br><span class="line">    <span class="keyword">let</span> maxt = <span class="number">4</span>, maxty = <span class="number">3</span>; <span class="comment">//Additional coefficients.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; mNodeList.length; v++) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = mNodeList[v];</span><br><span class="line">      <span class="keyword">let</span> dx = <span class="built_in">Math</span>.floor(mDxMap[v]);</span><br><span class="line">      <span class="keyword">let</span> dy = <span class="built_in">Math</span>.floor(mDyMap[v]);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (dx &lt; -maxt) dx = -maxt;</span><br><span class="line">      <span class="keyword">if</span> (dx &gt; maxt) dx = maxt;</span><br><span class="line">      <span class="keyword">if</span> (dy &lt; -maxty) dy = -maxty;</span><br><span class="line">      <span class="keyword">if</span> (dy &gt; maxty) dy = maxty;</span><br><span class="line">      node.x = node.x + dx &gt;= CANVAS_WIDTH || node.x + dx &lt;= <span class="number">0</span> ? node.x - dx : node.x + dx;</span><br><span class="line">      node.y = node.y + dy &gt;= CANVAS_HEIGHT || node.y + dy &lt;= <span class="number">0</span> ? node.y - dy : node.y + dy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update(iterateCount) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; iterateCount; i++) &#123;</span><br><span class="line">      calculateRepulsive();</span><br><span class="line">      calculateTraction();</span><br><span class="line">      updateCoordinates();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近工作上需要实现一个关系图谱，其中图中的节点布局需要用到力导向布局，于是就对其中涉及到的力导向算法产生了兴趣，就去研究了一下。&lt;/p&gt;
&lt;p&gt;力导向绘图 (Force-directed graph drawing)可以用于描述关系图的结点之间的关系，把结点分布到画布上合理的位置，比如描述企业之间的关系，社交网络中的人际关系等。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>微信自定义机器人后台express消息解码插件</title>
    <link href="https://sunra.top/2023/02/18/wechat-bot-msg-decode/"/>
    <id>https://sunra.top/2023/02/18/wechat-bot-msg-decode/</id>
    <published>2023-02-18T04:54:40.000Z</published>
    <updated>2023-05-16T05:31:16.930Z</updated>
    
    <content type="html"><![CDATA[<p>最近在搭建自己的微信公众号机器人后台，用户向公众号发送小消息后，会被微信的服务端转发到自己设置的服务器，一开始我们可以选择明文模式，但是为了安全考虑，还是会开启安全模式，此模式下，所有的消息会被整体加密，我们需要在服务端解密，而微信官方文档写的不好，也没有nodejs版本的示例代码，于是我结合实例代码做了一版express的插件，记录一下:</p><a id="more"></a><h1 id="微信公众号消息解密插件"><a href="#微信公众号消息解密插件" class="headerlink" title="微信公众号消息解密插件"></a>微信公众号消息解密插件</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; getConfig &#125; = <span class="built_in">require</span>(<span class="string">'../utils/getConfig'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; includes &#125; = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">const</span> parseString = <span class="built_in">require</span>(<span class="string">'xml2js'</span>).parseString;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PKCS7</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除补位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>text 解密后的明文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    decode(text) &#123;</span><br><span class="line">        <span class="keyword">let</span> pad = text[text.length - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (pad &lt; <span class="number">1</span> || pad &gt; <span class="number">32</span>) &#123;</span><br><span class="line">        pad = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> text.slice(<span class="number">0</span>, text.length - pad)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 填充补位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>text 需要进行填充补位的明文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    encode(text) &#123;</span><br><span class="line">        <span class="keyword">const</span> blockSize = <span class="number">32</span></span><br><span class="line">        <span class="keyword">const</span> textLength = text.length</span><br><span class="line">        <span class="comment">// 计算需要填充的位数</span></span><br><span class="line">        <span class="keyword">const</span> amountToPad = blockSize - (textLength % blockSize)</span><br><span class="line">        <span class="keyword">const</span> result = Buffer.alloc(amountToPad)</span><br><span class="line">        result.fill(amountToPad)</span><br><span class="line">        <span class="keyword">return</span> Buffer.concat([text, result])</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信公众号消息加解密</span></span><br><span class="line"><span class="comment">     * 官方文档(写的非常之烂)：https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Message_Encryption/Technical_Plan.html</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WXMsgCrypto</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以下信息在公众号 - 开发 - 基本配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>token          令牌(Token)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>encodingAESKey 消息加解密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>appId          公众号的AppId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">constructor</span>(token, encodingAESKey, appId) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!token || !encodingAESKey || !appId) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'please check arguments'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.token = token</span><br><span class="line">        <span class="keyword">this</span>.appId = appId</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> AESKey = Buffer.from(encodingAESKey + <span class="string">'='</span>, <span class="string">'base64'</span>)</span><br><span class="line">        <span class="keyword">if</span> (AESKey.length !== <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'encodingAESKey invalid'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.key = AESKey</span><br><span class="line">        <span class="keyword">this</span>.iv = AESKey.slice(<span class="number">0</span>, <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">this</span>.pkcs7 = <span class="keyword">new</span> PKCS7()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>timestamp    时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>nonce        随机数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>encrypt      加密后的文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getSignature(timestamp, nonce, encrypt) &#123;</span><br><span class="line">        <span class="keyword">const</span> sha = crypto.createHash(<span class="string">'sha1'</span>)</span><br><span class="line">        <span class="keyword">const</span> arr = [<span class="keyword">this</span>.token, timestamp, nonce, encrypt].sort()</span><br><span class="line">        sha.update(arr.join(<span class="string">''</span>))</span><br><span class="line">        <span class="keyword">return</span> sha.digest(<span class="string">'hex'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对密文进行解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>text    待解密的密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    decrypt(text) &#123;</span><br><span class="line">        <span class="comment">// 创建解密对象，AES采用CBC模式，数据采用PKCS#7填充；IV初始向量大小为16字节，取AESKey前16字节</span></span><br><span class="line">        <span class="keyword">const</span> decipher = crypto.createDecipheriv(<span class="string">'aes-256-cbc'</span>, <span class="keyword">this</span>.key, <span class="keyword">this</span>.iv)</span><br><span class="line">        decipher.setAutoPadding(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> deciphered = Buffer.concat([decipher.update(text, <span class="string">'base64'</span>), decipher.final()])</span><br><span class="line"></span><br><span class="line">        deciphered = <span class="keyword">this</span>.pkcs7.decode(deciphered)</span><br><span class="line">        <span class="comment">// 算法：AES_Encrypt[random(16B) + msg_len(4B) + msg + $CorpID]</span></span><br><span class="line">        <span class="comment">// 去除16位随机数</span></span><br><span class="line">        <span class="keyword">const</span> content = deciphered.slice(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">const</span> length = content.slice(<span class="number">0</span>, <span class="number">4</span>).readUInt32BE(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: content.slice(<span class="number">4</span>, length + <span class="number">4</span>).toString(),</span><br><span class="line">            appId: content.slice(length + <span class="number">4</span>).toString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对明文进行加密</span></span><br><span class="line"><span class="comment">     * 算法：Base64_Encode(AES_Encrypt[random(16B) + msg_len(4B) + msg + $appId])</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>text    待加密明文文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    encrypt(text) &#123;</span><br><span class="line">        <span class="comment">// 16B 随机字符串</span></span><br><span class="line">        <span class="keyword">const</span> randomString = crypto.pseudoRandomBytes(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> msg = Buffer.from(text)</span><br><span class="line">        <span class="comment">// 获取4B的内容长度的网络字节序</span></span><br><span class="line">        <span class="keyword">const</span> msgLength = Buffer.alloc(<span class="number">4</span>)</span><br><span class="line">        msgLength.writeUInt32BE(msg.length, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> id = Buffer.from(<span class="keyword">this</span>.appId)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> bufMsg = Buffer.concat([randomString, msgLength, msg, id])</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对明文进行补位操作</span></span><br><span class="line">        <span class="keyword">const</span> encoded = <span class="keyword">this</span>.pkcs7.encode(bufMsg)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建加密对象，AES采用CBC模式，数据采用PKCS#7填充；IV初始向量大小为16字节，取AESKey前16字节</span></span><br><span class="line">        <span class="keyword">const</span> cipher = crypto.createCipheriv(<span class="string">'aes-256-cbc'</span>, <span class="keyword">this</span>.key, <span class="keyword">this</span>.iv)</span><br><span class="line">        cipher.setAutoPadding(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cipheredMsg = Buffer.concat([cipher.update(encoded), cipher.final()])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cipheredMsg.toString(<span class="string">'base64'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; token, WechatAppID, EncodingAESKey &#125; = getConfig();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wxmc = <span class="keyword">new</span> WXMsgCrypto(token, EncodingAESKey, WechatAppID)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WXMsgCryptoMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (includes(req.path, <span class="string">'/wechatAccess'</span>) &amp;&amp; req.method.toLowerCase() === <span class="string">'post'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> query = req.query</span><br><span class="line">        <span class="keyword">let</span> xml = req.body.xml</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">        <span class="keyword">let</span> msgSignature = wxmc.getSignature(query.timestamp, query.nonce, xml.encrypt)</span><br><span class="line">        <span class="keyword">if</span> (msgSignature !== query.msg_signature) &#123;</span><br><span class="line">            res.send(<span class="string">'服务器出错，请稍后重试!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parseString(wxmc.decrypt(xml.encrypt).message, &#123;</span><br><span class="line">                explicitArray: <span class="literal">false</span></span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">                req.body.xml = res.xml</span><br><span class="line">                next()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = WXMsgCryptoMiddleware;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> WXMsgCryptoMiddleware = <span class="built_in">require</span>(<span class="string">'./middlewares/WXMsgCrypto'</span>);</span><br><span class="line"></span><br><span class="line">app.use(WXMsgCryptoMiddleware)</span><br></pre></td></tr></table></figure><p>然后在代码中就可以通过<code>req.body.xml</code>获得解密后的消息了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在搭建自己的微信公众号机器人后台，用户向公众号发送小消息后，会被微信的服务端转发到自己设置的服务器，一开始我们可以选择明文模式，但是为了安全考虑，还是会开启安全模式，此模式下，所有的消息会被整体加密，我们需要在服务端解密，而微信官方文档写的不好，也没有nodejs版本的示例代码，于是我结合实例代码做了一版express的插件，记录一下:&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>10倍程序员工作法</title>
    <link href="https://sunra.top/2023/02/11/10-times-programmer-work/"/>
    <id>https://sunra.top/2023/02/11/10-times-programmer-work/</id>
    <published>2023-02-11T10:01:01.000Z</published>
    <updated>2023-05-16T05:31:16.902Z</updated>
    
    <content type="html"><![CDATA[<p>最近chatgpt大火，让很多人觉得很多工作包括程序员会被取代。其他岗位我不太了解，但是对于程序员这个职业，我认为但是其实这说明，大家对于程序员在处理的问题的认知是程序员处理的是某一个独立的问题上，或者某个独立的很具体的问题上，当然这和程序员面试题有关，毕竟程序员面试题其实就是这种，面试题，说起来就是做卷子，做卷子你怎么可能有背靠互联网的机器人比，而那些不好衡量的看起来是空话的东西，在一次面试中，人还真不一定表现的比背后是所有面试经验帖的机器人高明。</p><p>但是其实这已经是忘记了程序员是为什么而存在的。程序员掌握的技术叫做信息技术，目的是为了快速的收集和处理信息，那么为什么这个技术重要呢？了解这个问题，其实也能明白AI到底给我们带来了什么。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实说起来，现在算是第四次工业革命了:</p><ol><li>第一次是蒸汽时代，人类掌握了巨大的物理上的力量，机械赋予了人类更加强大的改造物理世界的力量</li><li>第二次是电气时代，算是第一次的一种延续，让人们可以更加快速地改造世界，同时加快了人们物质上的合作效率</li><li>第三次是信息时代，也就是我们大部分人经历的时代。很多人可能不理解信息为什么重要，毕竟这东西虚无飘渺，且互联网上看起来信息爆炸，根本不值钱。但其实，对于社会来说，信息就是最值钱的东西，因为，<strong>钱其实就是信息，甚至整个人类社会存在的基础也是信息，就像《人类简史》中所说，没有一个共同的想象，人类最大只能维持成一个个小部落，就像动物一样，正是一个个共同想象，让人类产生了合作</strong>。而市场的作用就是交流信息，没有任何一个人可以处理人类社会中所有的信息，就算他能接触到所有信息。再比如奢侈品，比如玉石，钻石，黄金，你凭什么说他们之间的价格不同，就是信息，他的物理本质没有贵贱之分，所以没必要问奢侈品为什么贵，没有原因。</li><li>第四次就是人工智能了，算是第三次的延续。为什么会有这个东西呢，就是因为信息爆炸了，太多了，<strong>个人处理不过来，处理信息的速度太低了，而很多人合作又会带来新的信息要处理，这些是管理学要做的了</strong>。在过去充当人工智能的岗位有很多，比如低端咨询岗位，他们其实就是帮忙整合信息的，因为信息太多了，比如买房子，除非你最近想买房子，不然你不可能每天去收集，去处理，所以就催生了专门处理这些信息的人呢。</li></ol><p>所以如果说第三次工业革命是让人们可以更快的收集和处理信息了，那么第四次，chatgpt包括人工智能在我个人看来，是给了每个人更强的工具去筛选和处理信息。</p><p>这看起来没有本质变化，还是在提高处理信息的速度，但是别忘了，任何复杂问题都是简单问题耦合在一起造成的，<strong>量变产生质变。当问题的数量足够多，参与的人足够多，其实就不是一个问题了</strong>。</p><p><strong>复杂度就是最大的问题，资本一切提高效率的努力，认识世界规律的努力，管理学等等，都是为了降低复杂度，当然整体效率提高不代表个体幸福，因为整体想要高效，其中的每个个体都不能有个性</strong>。反过来说，如果一个工具能提高足够多的效率，就是工业革命了，工业革命其实就是工具带来了极大的效率提高。</p><p>说这些，就是为了表达一个观点，程序员处理的事情其实是降低信息复杂度，把信息的分析和处理交给机器，首先要做的事程序员本身理解这种信息，然后转化为程序，所以程序员的工作价值主要并不在于编程，如果不能帮助处理信息，降低复杂度，把复杂度交给机器，再高明的技术都没用，毕竟决定科技发展方向的从来都是资本。</p><p>所以，提高程序员工作效率的关注点不应该只放在如何更快的敲代码上，当然除了极少部分为程序员做工具的人。</p><h1 id="10x程序员工作法"><a href="#10x程序员工作法" class="headerlink" title="10x程序员工作法"></a>10x程序员工作法</h1><p>以下内容来自于极客时间中的同名专栏，这里只是我个人的笔记总结，推荐大家去看看专栏</p><h2 id="思考框架"><a href="#思考框架" class="headerlink" title="思考框架"></a>思考框架</h2><p><strong>本质复杂度和偶然复杂度</strong><br>软件行业里有一本名著叫《人月神话》，其中提到两个非常重要的概念：本质复杂度（Essential Complexity）和偶然复杂度（Accident Complexity）。<br>简单来说，本质复杂度就是解决一个问题时，无论怎么做都必须要做的事，而偶然复杂度是因为选用的做事方法不当，而导致要多做的事。<br>比如你要做一个网站，网站的内容是你无论如何都要写的，这就是“本质复杂度”。而如果今天你还在用汇编写一个网站，效率是不可能高起来的，因为你选错了工具。这类选错方法或工具而引发的问题就是“偶然复杂度”。<br><strong>最佳实践的四大原则</strong></p><ul><li>以终为始；</li><li>任务分解；</li><li>沟通反馈；</li><li>自动化。</li></ul><p><strong>思考框架：</strong></p><ul><li>Where are we?（我们现在在哪？）</li><li>Where are we going?（我们要到哪儿去？）</li><li>How can we get there?（我们如何到达那里？）</li></ul><p><strong>四大原则与思考框架之间的联系</strong><br>在实际的工作中，这个思考框架会帮助我更好地了解自己的工作。比如，当一个产品经理给我交代一个要开发的功能特性时，我通常会问他这样一些问题：</p><ul><li>为什么要做这个特性，它会给用户带来怎样的价值？</li><li>什么样的用户会用到这个特性，他们在什么场景下使用，他们又会怎样使用它？</li><li>达成这个目的是否有其它手段？是不是一定要开发一个系统？</li><li>这个特性上线之后，怎么衡量它的有效性？</li></ul><p>如果产品经理能够回答好这些问题，说明他基本上已经把这个工作想得比较清楚了，这个时候，我才会放心地去了解后续的细节。<br><strong>以终为始</strong>就是在工作的一开始就确定好自己的目标。<strong>我们需要看到的是真正的目标，而不是把别人交代给我们的工作当作目标</strong>。你可以看出这个原则是在帮助我们回答思考框架中，Where are we going?（我们要到哪儿去？）这个问题。<br><strong>任务分解</strong>是将大目标拆分成一个一个可行的执行任务，工作分解得越细致，我们便越能更好地掌控工作，它是帮助我们回答思维框架中，How can we get there?（我们如何到达那里？）的问题。<br>如果说前两个原则是要在动手之前做的分析，那后面两个原则就是在通往目标的道路上，为我们保驾护航，因为在实际工作中，我们少不了与人和机器打交道。<br><strong>沟通反馈</strong>是为了疏通与其他人交互的渠道。一方面，我们保证信息能够传达出去，减少因为理解偏差造成的工作疏漏；另一方面，也要保证我们能够准确接收外部信息，以免因为自我感觉良好，阻碍了进步。<br><strong>自动化</strong>就是将繁琐的工作通过自动化的方式交给机器执行，这是我们程序员本职工作的一部分，我们擅长的是为其他人打造自动化的服务，但自己的工作却应用得不够，这也是我们工作中最值得优化的部分。<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112035/origin-of-ray/1667091571184-7dee658b-ff37-4377-b884-6d18b4d80736.png_averageHue_23d1c4bc_clientId_ua2b346c7-a2c6-4_from_paste_height_457_id_u7555d25b_name_image_jub744.png" alt="image.png"></p><h2 id="以始为终"><a href="#以始为终" class="headerlink" title="以始为终"></a>以始为终</h2><p><strong>以始为终：如何让努力不白费</strong><br>我们日常面对的真实工作场景：许多人都是刚刚听到别人要求做的一个功能，就开始脑补接下来的一切。导致的结果，就是付出的努力毫无意义。<br>“以终为始”是一种反直觉的思维方式，是大多数人不具备的。所以，日常生活中，我们看到很多有趣的现象。比如，大学毕业时，有很多人想考研，如果你问他为什么要考研，得到的理由通常是为了找个好工作。但考研真的能帮他找个好工作吗？不一定，因为找工作和考研根本就不是同一棵技能树。如果真的是想找个好工作，那你就应该了解工作的要求是什么，怎样才能掌握工作要求的技能。<br>“设计登录功能”的例子，对比“以终为始”的思维，你也许会替我的同事抱不平，他们或许也有“以终为始”的思路，只不过，他们的“终”和我这个客户的“终”不一样罢了。这就要说到<strong>做软件，本质上是在构建一个“集体想象”。</strong><br><strong>想象的共同体</strong><br>我们这些做软件的人其实就是一个想象的共同体，这个“集体想象”就是我们要做的软件，任何想象都需要一个载体将其展现出来，我们编写软件的过程就是将这个“集体想象”落实的过程。<br>既然是“集体想象”，那么在载体将想象呈现出来之前，我们的想象很难统一起来，都或多或少存在差异。<br>所以，<strong>任何事物都要经过两次创造：一次是在头脑中的创造，也就是智力上的或者第一次创造（Mental/First Creation），然后才是付诸实践，也就是实际的构建或第二次创造（Physical/Second Creation）</strong>。<br>再回到前面“设计一个登录功能”的例子上，我的同事们在构建的其实是他们自己的想象，而不是我们共同的想象。<br>这其中最大的一个区别就在于，没有人会为他们自己的想象买单的。所以说，<strong>他们看到的“终”不是真正的终，只是一个自我的“终”，至于看到什么样的“终”，这取决于每个人的见识</strong>。<br>对做软件的人来说，我们应该把“终”定位成做一个对用户有价值的软件，能够为别人带来价值，自己的价值才能体现出来。<br><strong>规划和发现</strong><br>有了“以终为始”的思维，我们考虑的是别人会怎么用我们的平台。我们设计的方式是，用户到我们的网站，阅读相关文档，然后参考文档一步一步照着做。这其中的一个关键点是：文档，特别是《起步走》的文档，这是用户接触我们这个平台的第一步，决定了他对我们产品的第一印象。<br>所以，我们决定从写《起步走》这个文档开始，这个文档描绘了用户怎样一步一步使用我们的开发平台，完成第一个“Hello World”级别的应用。请注意，这个时候，我们一行代码都没有写。<br>人类是一个擅长脑补的群体，一旦有人看到了这个文档，他就已经可以构想出这个平台已经存在的样子，进而给出各种各样的反馈：“我认为这个地方可以这样做”“我觉得那个地方可以改改”。<br><strong>所有这些反馈都是真实的，因为他们已经“看到了”一个真实的东西。正是这些真实的反馈，让我们逐渐地锁定了目标。</strong>之后，我们才开始动手写代码。<br>“以终为始”的方式，不仅仅可以帮我们规划工作，还可以帮我们发现工作中的问题。<br>亚马逊 CTO 介绍亚马逊是如何开发一项产品的，简单来说，他们采用向后工作的方法，开发一项产品的顺序为：</p><ol><li>写新闻稿；</li><li>写 FAQ（常见问题解答）；</li><li>写用户文档；</li><li>写代码。</li></ol><p><strong>理解的鸿沟</strong><br>我们讨论的主题是“以终为始”。那我们第一个问题就是，“终”到底是什么？在前面这个例子里，“终”就是“完成”，可是，小李认为他的活已经做完了，老张却认为他没做完。<br>弥合差异的方式有很多，有一个最佳实践，它的名字叫 <strong>DoD（Definition of Done，完成的定义）</strong>，从这个概念的名字便不难看出，它就是为了解决软件开发中常见的“完成”问题而生的。<br>怎样让 DoD 更好地发挥作用。</p><ul><li><strong>DoD 是一个清单，清单是由一个个的检查项组成的，用来检查我们的工作完成情况</strong>。DoD 的检查项，就是我们开发产品所需的一系列有价值的活动。比如：编写代码、编写测试代码、通过测试人员验收等。什么样的活动是有价值的，也许每个团队的认识是不同的。但如果你的团队认为除了功能代码，其他都没价值，也许这是个信号，说明你的团队整体上是缺乏职业素养的，在这样的团队工作，前景并不乐观。</li><li><strong>DoD 的检查项应该是实际可检查的</strong>。你说代码写好了，代码在哪里；你说测试覆盖率达标了，怎么看到；你说你功能做好了，演示一下。</li><li><strong>DoD 是团队成员间彼此汇报的一种机制</strong>。别把“汇报”想复杂了，最简单的汇报就是说一句“这个功能做完了”。当我们有了 DoD，做事只有两种状态，即“做完”和“没做完”。在团队协作中，我们经常会听到有人说“这个事做完了 80%”，对不起，那叫没做完，根本没有 80% 做完的说法。</li></ul><p>如果你可以放开思路，会发现 DoD 的思维在工作中用途非常广泛。比如，当我们需要和其他团队合作开发一个接口时，我们都知道第一步就是要把接口定义下来。<br><strong>在协作中一旦确立好 DoD，我们甚至可以通过流程把它固化下来，从而更高效高质地完成工作。</strong>当然，我们在工作生活中难免会有一些临时的工作，它们没有复杂到需要一个流程，但是也可以用 DoD 思维来高效地解决。比如：经常会有人过来，让我帮忙做些事。运用 DoD 的思维，我首先会问他我具体要做哪些事，确认好细节（相当于定义好“检查项”），然后我就知道，这个忙我能帮到什么程度。我请别人帮忙的时候，也会很清楚告诉他，哪些事是需要他做的，尽量减少不必要的误解。<br>DoD 是一个思维模式，是一种尽可能消除不确定性，达成共识的方式。我们本着“以终为始”的方式做事情，DoD 让我们能够在一开始就把“终”清晰地定义出来。<br>人与人协作中，经常会出现各种问题，根本原因就是，有太多因为理解差异造成的误解，进而浪费了大量的时间，而 DoD 就是一种将容易产生歧义的理念落到实处的方法。<br><strong>在做任何事之前，先定义完成的标准。</strong><br><strong>接到需求任务，首先要做什么？</strong><br>在软件开发中，程序员做什么一般都由需求来定义。我们都知道，需求是软件开发的一个重要组成部分，但你可能并没有仔细想过，不同的需求描述方式，可能会影响我们程序员对需求的理解。<br><strong>因为信息的传递是会衰减的，你不可能把你理解的信息 100% 传递给另外一个人</strong>，而这中间，如何传递，也就是如何描述将直接决定衰减的比例。<br>很多公司的软件开发模式是基于功能列表的，这个列表“规定”了程序员要做的功能，各个组从产品经理那里领来开发列表，然后“照单抓药”开始写代码。但是，通常这种功能列表只是一些简单的描述，你并不能看到全局。<br>很多团队的一个状态就是，程序员们都知道要开发的功能是什么，但这个功能是谁在什么样的场景下使用的，很多人却回答不上来。如果你去问他为什么要开发这个功能，他通常会说：这是功能列表里规定的。<br><strong>这种功能列表式的需求描述方式，将一个完整的需求敲成了碎片。</strong> 只有所有功能全部开发完成，对接在一起的时候，才是“破镜重圆”的时刻。<br>根据这种基于功能列表的需求描述，每个组在安排工作的时候，都会按照自己的理解进行功能排列。所以，当你的组完成了一个功能时，这个功能却可能上不了线，因为你还要依赖于其他组的工作，而这个组不巧，却刚好把相关的功能开发排在了后面。这还只是两个组之间有依赖的情况，如果需要多个组协同，可以想象，状况会多么糟糕。<br>因此，一些新的需求描述方式也就应运而生，这其中，用户故事（User Story）是我最喜欢的一种方式。它是站在用户的角度来描述了一个用户希望得到的功能，关注用户在系统中完成一个动作需要经过怎样的路径。既然它是“故事”，它就需要是一个完整的场景，可以讲述出来。<br><strong>如果你的团队采用用户故事的格式进行需求描述固然好，如果不能，在功能列表中，补充验收标准也会极大程度地改善双方协作的效率。</strong><br>验收标准所给出实现细节应该是业务上的，程序员在这种问题上思考才是真正意义上的浪费时间，我们的发挥空间应该是在技术实现上。<br>虽然你名义上是程序员，但当拿到一个需求的时候，你要做的事不是立即动手写代码，而是扮演产品经理的角色，分析需求，圈定任务范围。相信我，事前分析绝对比你拿一个写好的系统给老板，而他却告诉你这不是他想要的，好太多了。<br>如果今天的内容你只能记住一件事，那请记住：<strong>在做任何需求或任务之前，先定好验收标准</strong>。<br><strong>精益创业</strong><br>精益创业提供给我们的是一个做产品的思考框架，我们能够接触到的大多数产品都可以放在这个框架内思考。<br>有了框架结构，我们的生活就简单了，当产品经理要做一个新产品或是产品的一个新特性，我们就可以用精益创业的这几个概念来检验一下产品经理是否想清楚了。<br>比如，<strong>你要做这个产品特性，你要验证的东西是什么呢？他要验证的目标是否有数据可以度量呢？要解决的这个问题是不是当前最重要的事情，是否还有其他更重要的问题呢？</strong><br>如果上面的问题都得到肯定的答复，那么验证这个目标是否有更简单的解决方案，是不是一定要通过开发一个产品特性来实现呢？<br><strong>扩大工作上下文</strong><br>程序员总喜欢用技术去解决一切问题，但很多令人寝食难安的问题其实根本不是问题。之所以找不出更简单的解决方案，很多时候原因在于程序员被自己的思考局限住了。<br><strong>不同角色工作真正的差异在于上下文的差异。在一个局部上下文难以解决的问题，换到另外一个上下文甚至是可以不解决的。所以说无论单点有多努力也只是局部优化，很难达到最优的效果。</strong><br>想把工作做好，就需要不断扩大自己工作的上下文，多了解一下别人的工作逻辑是什么样的，认识软件开发的全生命周期。<br>扩大自己的上下文，除了能对自己当前的工作效率提高有帮助，对自己的职业生涯也是有好处的。随着你看到的世界越来越宽广，得到的机会也就越来越多。<br>如果今天的内容你只记住一件事，那请记住：<strong>扩大自己工作的上下文，别把自己局限在一个“程序员”的角色上。</strong><br><strong>通往结果的路径</strong><br>关于“以终为始”，我们前面讲的内容一直是看到结果，结果是重要的。然而，通向结果的路径才是更重要的。<br>对比我们的工作，多数情况下，即便目标清晰，路径却是模糊的。所以，不同的人有不同的处理方式。有些人是走到哪算哪，然后再看；有些人则是先推演一下路径，看看能走到什么程度。在我们做软件的过程中，这两种路径所带来的差异，已经在前面的小故事里体现出来了。一种是前期其乐融融，后期手忙脚乱；一种是前面思前想后，后面四平八稳。我个人是推崇后一种做法的。<br>这个思想并不难理解，我们可以很容易地将它运用在工作中的很多方面。比如：</p><ul><li>在做一个产品之前，先来推演一下这个产品如何推广，通过什么途径推广给什么样的人；</li><li>在做技术改进之前，先来考虑一下上线是怎样一个过程，为可能出现的问题准备预案；</li><li>在设计一个产品特性之前，先来考虑数据由谁提供，完整的流程是什么样的。</li></ul><p><strong>让自己的工作成果可以被数字化</strong><br><strong>迭代0</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112080/origin-of-ray/1667388901396-30a76c14-7687-4f11-b4ff-3a85fb08be48.png_averageHue_23fefefe_clientId_u6d7a8eac-a85f-4_from_paste_height_772_id_u1823cf52_name_image_fsji0l.png" alt="image.png"><br>对比这个清单，大多数新项目都在一项或几项上准备得不够充分。即便你做的不是一个从头开始的项目，对照这个清单，也会发现项目在某些项上的欠缺，可以有针对性地做一些补充。如果今天的内容你只记住一件事，那么请记住：设计你的迭代 0 清单，给自己的项目做体检。</p><h2 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h2><p>好了，和大家分享这两个例子只是为了热热身，说明人类解决问题的方案是差不多的。当一个复杂问题摆在面前时，我们解决问题的一个主要思路是分而治之。<br>一个大问题，我们都很难给出答案，但回答小问题却是我们擅长的。所以，当我们学会将问题分解，就相当于朝着问题的解决迈进了一大步。<br><strong>那么，用这种思路解决问题的难点是什么呢？给出一个可执行的分解。</strong><br>不过，在实际工作中，大多数人都高估了自己可执行粒度，低估任务分解的程度。换句话说，如果你没做过任务分解的练习，你分解出来的大部分任务，粒度都会偏大。<br>只有能把任务拆分得非常小，你才能对自己的执行能力有一个更清楚地认识，真正的高手都是有很强的分解能力。这个差别就相当于，同样观察一个物品，你用的是眼睛，而高手用的是显微镜。在你看来，高手全是微操作。<br><strong>如今软件行业都在提倡拥抱变化，而任务分解是我们拥抱变化的前提。</strong><br><strong>实际上，很多人之所以写不好测试，主要是因为他不懂任务分解。</strong><br>小事反馈周期短，而大事反馈周期长。小事容易做好，而大事难度则大得多。所以，以这个标准来看，底层的测试才更容易写好。另外，因为涉及到的模块过多，任何一个模块做了调整，都有可能破坏高层测试，所以，高层测试通常是相对比较脆弱的。<br><strong>测试驱动开发TDD</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112098/origin-of-ray/1668079382524-b25c0e83-faac-4d58-89d5-ea262f5837fc.png_averageHue_23fdfbfa_clientId_u4873b967-c53e-4_from_paste_height_652_id_u38c9e075_name_image_kctirp.png" alt="image.png"><br>在测试驱动开发中，重构与测试是相辅相成的：没有测试，你只能是提心吊胆地重构；没有重构，代码的混乱程度是逐步增加的，测试也会变得越来越不好写。因为重构和测试的互相配合，它会驱动着你把代码写得越来越好。这是对“驱动”一词最粗浅的理解。<br><strong>测试驱动设计</strong><br>许多人抗拒测试有两个主要原因：<br>第一，测试需要“额外”的工作量。这里我特意把额外加上引号，因为，你也许本能上认为，测试是额外的工作，但实际上，测试也应该是程序员工作的一部分，这在上一篇文章中我已经讲过。<br>第二，很多人会觉得代码太多不好测。之所以这些人认为代码不好测，其中暗含了一个假设：代码已经写好了，然后，再写测试来测它。<br>如果我们把思路反过来，我有一个测试，怎么写代码能通过它。<strong>一旦你先思考测试，设计思路就完全变了：我的代码怎么写才是能测试的，也就是说，我们要编写具有可测试性的代码。</strong>用这个角度，测试是不是就变得简单了呢？<br>我们举个写代码中最常见的问题：static 方法<br>Mock 对象的做法面对 static 时行不通了。因为它跳出了对象体系，<strong>static 方法是没法继承的，也就是说，没法用一系列面向对象的手法处理它</strong>。<br>你没有办法使用 Mock 对象，也就不好设置对应的方法返回值。要想让这个方法返回相应的值，你必须打开这个 static 方法，了解它的实现细节，精心地按照里面的路径，小心翼翼地设置对应的参数，才有可能让它给出一个你预期的结果。更糟糕的是，因为这个方法是别人维护的，有一天他心血来潮修改了其中的实现，你小心翼翼设置的参数就崩溃了。而要重新进行设置的话，你只能把代码重读一遍。<br><strong>如此一来，你的工作就退回到原始的状态。更重要的是，它并不是你应该关注的重点，这也不会增加你的 KPI。</strong><br>显然，你跑偏了。讨论到这里你已经知道了 static 方法对测试而言，并不友好。所以，如果你要想让你的代码更可测，<strong>一个好的解决方案是尽量不写 static 方法</strong>。<br>static 是一个方便但邪恶的东西。所以，要限制它的使用。除非你的 static 方法是不涉及任何状态而且行为简单，比如，判断字符串是否为空。否则，不要写 static 方法。你看出来了，这样的 static 方法更适合做库函数。所以，我们日常写应用时，能不用尽量不用。<br>如果你在自己的代码遇到第三方的 static 方法怎么办，很简单，将第三方代码包装一下，让你的业务代码面对的都是你自己的封装就好了。<br><strong>如何做好任务分解</strong><br>最后，我要特别强调一点，所有分解出来的任务，都是独立的。也就是说，<strong>每做完一个任务，代码都是可以提交的</strong>。只有这样，我们才可能做到真正意义上的小步提交。<br>如果今天的内容你只能记住一件事，那请记住：<strong>按照完整实现一个需求的顺序去安排分解出来的任务。</strong><br><strong>为什么你的测试不够好？</strong><br>我看到过很多团队在测试上出现过各种各样的问题，比如：</p><ul><li>测试不稳定，这次能过，下次过不了；</li><li>有时候是一个测试要测的东西很简单，测试周边的依赖很多，搭建环境就需要很长的时间；</li><li>这个测试要运行，必须等到另外一个测试运行结束；……</li></ul><p>如果你也在工作中遇到过类似的问题，那你理解的写测试和我理解的写测试可能不是一回事，那问题出在哪呢？为什么你的测试不够好呢？主要是因为这些测试不够简单。<br><strong>只有将复杂的测试拆分成简单的测试，测试才有可能做好。</strong><br>测试为什么要简单呢？有一个很有趣的逻辑，不知道你想没想过，测试的作用是什么？显然，它是用来保证代码的正确性。随之而来的一个问题是，谁来保证测试的正确性？<br>既然无法用写程序的方式保证测试的正确性，我们只有一个办法：<strong>把测试写简单，简单到一目了然，不需要证明它的正确性。</strong>所以，如果你见到哪个测试写得很复杂，它一定不是一个好的测试。<br><strong>测试坏味道</strong><br><strong>很多人总想在一个测试里做很多的事情，比如，出现了几个不同方法的调用。请问，你的代码到底是在测试谁呢？</strong>这个测试一旦出错，就需要把所有相关的几个方法都查看一遍，这无疑是增加了工作的复杂度。<br>另一个典型“坏味道”的高发区是在断言上，请记住，<strong>测试一定要有断言</strong>。<br>还有一种常见的“坏味道”：复杂。最典型的场景是，<strong>当你看到测试代码里出现各种判断和循环语句，基本上这个测试就有问题了</strong>。举个例子，测试一个函数，你的断言写在一堆 if 语句中，美其名曰，根据条件执行。还是前面提到的那个观点，你怎么保证这个测试函数写的是对的？除非你用调试的手段，否则，你都无法判断你的条件分支是否执行到了。你或许会疑问，我有一大堆不同的数据要测，不用循环不用判断，我怎么办呢？你真正应该做的是，多写几个测试，每个测试覆盖一种场景。<br><strong>一段旅程（A-TRIP）</strong><br>怎么样的测试算是好的测试呢？<br>有人做了一个总结 A-TRIP，这是五个单词的缩写，分别是</p><ul><li><strong>Automatic，自动化；</strong>把测试尽可能交给机器执行，人工参与的部分越少越好。</li><li><strong>Thorough，全面的；</strong>应该尽可能用测试覆盖各种场景。理解这一点有两个角度。一个是在写代码之前，要考虑各种场景：正常的、异常的、各种边界条件；另一个角度是，写完代码之后，我们要看测试是否覆盖了所有的代码和所有的分支，这就是各种测试覆盖率工具发挥作用的场景了。</li><li><strong>Repeatable，可重复的；</strong>这里面有两个角度：某一个测试反复运行，结果应该是一样的，这说的是，每一个测试本身都不应该依赖于任何不在控制之下的环境；还有一个角度，一堆测试反复运行，结果应该是一样的。这说明测试和测试之间没有任何依赖，这也是我们接下来要说的测试的另外一个特点。</li><li><strong>Independent，独立的；</strong>测试和测试之间不应该有任何依赖，什么叫有依赖？比如，如果测试依赖于外部数据库或是第三方服务，测试 A 在运行时在数据库里写了一些值，测试 B 要用到数据库里的这些值，测试 B 必须在测试 A 之后运行，这就叫有依赖。</li><li><strong>Professional，专业的。</strong></li></ul><p><strong>如何砍需求？</strong><br>以我们用了好多次的登录为例，如果我问你这个需求是什么，大多数人的第一直觉还是用户名密码登录。<br>基本上，闯入你脑海的需求描述是主题（epic），在敏捷开发中，有人称之为主用户故事（master story）。<br>如果你对需求的管理粒度就是主题，那好多事情就没法谈了。比如，时间紧迫的时候，我想砍需求，你问产品经理，我不做登录行不行，你就等着被拒绝吧。<br>但是，如果你说时间比较紧，我能不能把登录验证码放到后面做，或是邮件地址验证的功能放到后面，这种建议产品经理是可以和你谈的。<br>这其中的差别就在于，后者将需求分解了。<br><strong>需求要分解</strong><br><strong>“主题”只是帮你记住大方向，真正用来进行需求管理，还是要靠进一步分解出来的需求</strong>。这里的讨论，我们会继续沿用前面专栏文章中已经介绍过的需求描述方式：用户故事，它将是我们这里讨论需求管理的基本单位。<br><strong>评价用户故事有一个“ INVEST 原则”</strong>，这是六个单词的缩写，分别是：</p><ul><li>Independent，独立的。一个用户故事应该完成一个独立的功能，尽可能不依赖于其它用户故事，因为彼此依赖的用户故事会让管理优先级、预估工作量都变得更加困难。如果真的有依赖，一种好的做法是，将依赖部分拆出来，重新调整。</li><li>Negotiable，可协商的。有事大家商量是一起工作的前提，我们无法保证所有的细节都能 100% 落实到用户故事里，这个时候最好的办法是大家商量。它也是满足其它评判标准的前提，就像前面提到的，一个用户故事不独立，需要分解，这也需要大家一起商量的。</li><li>Valuable，有价值的。一个用户故事都应该有其自身价值，这一项应该最容易理解，没有价值的事不做。但正如我们一直在说的那样，做任何一个事情之前，先问问价值所在。</li><li>Estimatable，可估算的。我们会利用用户故事估算的结果安排后续的工作计划。不能估算的用户故事，要么是因为有很多不确定的因素，要么是因为需求还是太大，这样的故事还没有到一个能开发的状态，还需要产品经理进一步分析。</li><li>Small，小。步子大了，不行。不能在一定时间内完成的用户故事只应该有一个结果，拆分。小的用户故事才方便调度，才好安排工作。Testable，可测试的。不能测试谁知道你做得对不对。这个是我们在前面已经强调过的内容，也就是验收标准，你得知道怎样才算是工作完成。</li></ul><p>第一个关注点是可协商。作为实现者，我们要问问题。只是被动接受的程序员，价值就少了一半，只要你开始发问，你就会发现很多写需求的人没有想清楚的地方。<br>在我的职业生涯中，我无数次将需求挡了回去，不是我不合作，而是我不想做一些糊涂的需求。我之所以能问出问题，一方面是出于常识，另一方面就是这里说的用户故事是否有价值。用户故事，之所以是故事，就是要讲，要沟通。<br>还有一个更重要的关注点，也是这个模块的核心：小。无论是独立性也好，还是可估算的也罢，其前提都是小。只有当用户故事够小了，我们后续的腾挪空间才会大。那接下来就是一个重要的问题，怎么才算小？这就牵扯到用户故事另一个重要方面：估算。<br>通常情况下，是双方对需求的理解出现了偏差，这时候负责用户故事编写的同事就要站出来，帮助大家澄清需求。所以，一般来说，估算的过程也是大家加深对需求理解的过程。估算还有另外一个重要的作用：发现特别大的用户故事。一般而言，一个用户故事应该在一个迭代内完成。<br>许多团队真正的困境在于，在开发过程中缺少需求分解的环节。在这种情况下，需求的管理基本单位就是一个主题，既然是基本单位，那就是一个不可分割的整体。团队就被生生绑死在一个巨大的需求上，没有回旋的余地。如果团队可以将需求分解，需求的基本单位就会缩小，每个人看到的就不再是“铁板”一块，才能更方便地进行调整，才会有比较大的腾挪空间。<br><strong>需求管理</strong><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112146/origin-of-ray/1669688919178-f48fc53b-2a0f-432e-997b-35ebe0be2265.png_averageHue_23fefefc_clientId_u496d162f-a4d1-4_from_paste_height_653_id_ue8a35552_name_image_qktkqz.png" alt="image.png"><br>用几个程序员生活中的例子帮你理解一下。让系统不能正常运行的线上故障，就属于重要且紧急事情，不赶紧解决，就影响公司的正常运营。团队对系统升级改造就属于重要不紧急：改造好，性能也好，可维护性也得到提升；不改造，一时半会也能用。一些临时任务都属于紧急不重要，而刷朋友圈则属于既不紧急也不重要。<br>按照时间管理的理念，重要且紧急的事情要立即做。重要但不紧急的事情应该是我们重点投入精力的地方。紧急但不重要的事情，可以委托别人做。不重要不紧急的事情，尽量少做。<strong>这个矩阵带给我们思维上最大的改变是，让人意识到事情和事情不是等价的。如果不把精力放在重要的事情上，到最后可能都变成紧急的事情</strong>。<br>把这个思路带回到我们现实的需求管理中，你会发现，<strong>其实团队面临的各种需求所采用的优先级排序方式，基本上都是按照紧急程度排列的</strong>，但它们是否真的重要呢？<br>如果你把这个问题抛给需求的提出者，我几乎可以肯定，他们给你的答案是，他们提出的需求就是重要的。一种可能是，他们也分不清重要和紧急的差别，正如有时候我们也糊涂一样。<br>试想，两个产品经理出现在你面前，一个告诉你，公司要拓展新方向，这个功能要做；另一个却说，公司要进一步盈利，那个功能必须做。在你看来，他们两个说得都对，听上去都挺重要的。但骨感的现实是，你把两件事都接下来，等着你的是累死都完不成的任务。这个时候，我们能做的是什么呢？跳出这个上下文，到更大的上下文中。<strong>你判断不了哪个需求更重要，就请更高一级的老板来判断。</strong><br>再发散讲几句，为人做事同样要不断扩展自己的上下文，这也就是我们常说的涨见识。很多所谓的人生难题不过是因为见识有限造成的。比如，如果你觉得公司内总有人跟你比技术，莫不如把眼光放得长远一些，把自己放在全行业的水平上去比较。因为你是为自己的职业生涯在工作，而不是一个公司。<br>需求分解之后，最重要的是，排列需求的优先级。优先级的排列方式有很多，我们可以借鉴时间管理的方法，把事情按照重要和紧急的维度进行划分，得到了四个象限。我们要尽可能把精力放在重要的事情上，而不是把紧急的事情当成优先级排序的方式。<br><strong>需求分解成一个个小块，其实也分解了原本合一的上下文</strong>。如果想要有效地管理需求，尤其是确定事情的重要程度，<strong>一种方式是找回丢失的上下文</strong>。如果我们自己无法判断上下文，一种好的办法是，<strong>引入外部更大的上下文</strong>。<br><strong>如何用最小的代价做产品？</strong><br>我们的直觉当然是把所有的东西都实现了再去检验，但是世界不会停下来等着我们。事实也一次又一次教育我们，“憋大招”的瀑布式软件开发已经成为不合时宜的“老古董”。那我们的理想怎么实现呢？唯有分解。<br>我们前面提到，精益创业就是通过不断地尝试在真实世界中验证产品想法，其中一个重要的实践是最小可行产品（Minimum Viable Product，MVP），我们这次就把这个实践展开讨论一下。<br>先说“最小”。这里的“最小”，指的是最小的代价。怎么叫最小的代价，就是能不做的事情就不做，能简化的事情就简化。<br>首先，我们必须清楚一件事，我们要做的是验证一个想法的可行性，甚至不是为了开发一个软件，开发软件只是一种验证手段。<br>很多程序员都会有一个认识上的误区，容易把解决方案当成问题。我们开发软件的目的是为了解决问题，如果不写软件就把问题解决了，岂不是更好。<br>第一步，我们要验证这样一个想法是否可行。我们做了一个产品文档，就好像我们已经有了这个产品一样，让负责销售的同事拿着这个文档给客户讲讲，看看客户对这个想法的反映。在这个过程中，我们验证了基本的想法，已有设备进行物联网化改造的需求存在，客户看到了这样的一个东西，各种各样的想法和要求就会冒出来。此外，我们还获得了一个额外的收获，我们知道了客户对于这样一个产品能够接受的价格区间，这可以帮助团队给产品进行适当的定价。验证了方向上的想法，我们开始进入到具体的产品设计阶段。这个阶段我们想验证的是，我们给出的产品设计用户是否可以接受。于是，我们决定把这个产品的交互做出来。得益于原型工具的快速发展，我们用一个原型工具做出了相对完整的用户界面，而且把各种交互流都做出来了。在用户看来，这几乎就是完整的软件了。<br>说完了”最小”，我们再来看”可行”。<strong>可行是要找到一条路径，给用户一个完整的体验。做程序员出身的人，对软件系统的认识总是一个模块一个模块的，相对比较弱的方面是缺少一个完整的图景</strong>。但从产品可行的角度，我们需要转换一下思路，不是一个模块做得有多完整，而一条用户路径是否通畅<br>当时间有限时，我们需要学会找到一条可行的路径，在完整用户体验和完整系统之间，找到一个平衡。<br>逐步上线了一个功能相对完整的 P2P 平台。在这个过程中，我们每个阶段都会上线新功能，从用户可见的角度，他看到的始终是一个完整的平台，其中的变化只有站在内部实现者的角度才能看得清楚。(比如还款功能，虽然是完整的生命周期中的一个，但是第一个月没有用户会用到，所以排期可以靠后一点)<br>想要在实践中运用好最小可行产品的理念，就是要用最小的代价找到一条可行的路径。<strong>最小的代价就是能不做的事就不做，能简化的事情就简化。</strong><br>程序员通常愿意用自己的代码解决问题，而写代码通常是代价非常高的解决方案，它应该成为最后的产品解决方案。可行的路径，是一条完整的用户体验路径，至少在用户眼中是这样的。<br>我们常常会想给客户一个完整的系统，但在时间有限的情况下，我们必须学会分解。<br>如果今天的内容你只能记住一件事，那请记住：做好产品开发，最可行的方式是采用 MVP。</p><p>在这个模块中，我们学习到了一些最佳实践：<br>测试金字塔<br>— 行业中测试组合的最佳实践。<br>— 多写单元测试是关键。<br>测试驱动开发<br>— 测试驱动开发的节奏是：红——绿——重构，重构是测试驱动开发区别于测试先行的关键。<br>— 有人把测试驱动开发理解成测试驱动设计，它给行业带来的思维改变是，编写可测的代码。<br>艾森豪威尔矩阵（Eisenhower Matrix）<br>— 将事情按照重要和紧急进行划分。<br>— 重要且紧急的事情要立即做。重要但不紧急的事情应该是我们重点投入精力的地方。紧急但不重要的事情，可以委托别人做。不重要不紧急的事情，尽量少做。<br>最小可行产品<br>— “刚刚好”满足客户需求的产品。<br>— 在实践中，要用最小的代价找到一条可行的路径。<br>另外，我还提到了一些可以直接在工作中应用的做法和评判标准：</p><ul><li>尽量不写 static 方法；</li><li>主分支开发模型是一种更好的开发分支模型；</li><li>好的用户故事应该符合 INVEST 原则；</li><li>估算是一个加深对需求理解的过程，好的估算是以任务分解为基础的；</li><li>好的测试应该符合 A-TRIP。</li></ul><p>我也带你学习了一些重要的思想，帮你更好地改善自己的开发工作：</p><ul><li>分而治之，是人类解决问题的基本手段；</li><li>软件变更成本，它会随着时间和开发阶段逐步增加；</li><li>测试框架把自动化测试作为一种最佳实践引入到开发过程中，使得测试动作可以通过标准化的手段固定下来；</li><li>极限编程之所以叫“极限”，它背后的理念就是把好的实践推向极限；</li><li>大师级程序员的工作秘笈是任务分解，分解到可以进行的微操作；按照完整实现一个需求的顺序安排开发任务。</li></ul><h2 id="沟通反馈"><a href="#沟通反馈" class="headerlink" title="沟通反馈"></a>沟通反馈</h2><p>我们努力地学习各种知识，为的就是更好地理解这个世界的运作方式，而沟通反馈，就是我们与真实世界互动的最好方式。<br>当几个人一起讨论问题时，别人往往刚开了个头，他就认为自己已经理解了别人的想法，然后开始表达自己的观点。信息都不全，何谈解码。所以，开发团队的讨论中常常出现一个人高谈阔论，却离题万里的情况。我们要想让自己更好地工作生活，就必须接纳真实世界的反馈，而接纳真实世界的反馈，一是需要我们打开自己的接收器，把信号接纳进来，让反馈进来，这是解码的前提；二是扩展见识，提升自己解码器的效果，更好地理解别人要表达的内容到底是什么。说了编码器和解码器可能出现的问题，我们再来看另外一个可能造成影响的问题：编解码器算法，也就是怎么协调沟通双方更有效地进行沟通。<br>人生不如意之事，十有八九，之所以很多人有如此多的不如意，很大原因在于我们对真实世界有着很多不切实际的幻想，美好的愿望并不能驱动这个世界，在软件开发中也是如此。虽然人和人生活在一个世界中，但对世界的理解却是千差万别的。<br>改善编解码，需要从几个角度着手，分别是：编码器，让信息能输出更准确；解码器，减少信号过滤，改善解码能力；还有编解码算法，也就是各种来自行业的“最佳实践”，协调沟通的双方。<br>用业务的语言去写代码，一来是可读性高，二来是能够识别代码中不变和易变的部分，更好地实践设计模式，做到领域驱动设计<br><strong>轻量级沟通</strong><br>开会是为了解决问题，但真实情况却是开了会又没有解决多少问题，这真是一个奇特的矛盾。回想一下，你参加过的会议里面，有没有效果特别好的呢？在我职业生涯中，凡是效果特别好的会议，基本上都是用来做信息同步的。比如，领导宣布一个事情，这种会议几乎不会浪费时间。宣布消息，大家收到消息，结束。那效果不好的会议是什么样呢？几乎都是那些讨论会，你一言我一语，每个会几乎无一例外，都有几个擅长打岔的，这个会基本上都会跑偏，时间就会这样一分一秒地流逝了。<br><strong>改善会议的第一个行动项是，减少参与讨论的人数</strong>。有人会说，我这个讨论有好几个议题，每个议题要不同的人参与，那你要做的是，分别找这几个人专门讨论，而不是把大家放到一起。相比于会议的形式，面对面沟通因为注意力有限，参与的人数不可能太多。也因为参与的人数相对少一些，每个人的投入也会更多一些。<br><strong>第二个行动项是，如果你要讨论，找人面对面沟通。</strong>如果有一个问题需要讨论，我要做的是，分别找到相关人针对关心的主题进行讨论，然后，我把讨论的结果汇总再去征求大家意见。如果大家达成一致了，我才会选择开会。这个时候，<strong>开会的目的不再是讨论，而是信息同步</strong>：我准备这么干了，相关各方已经同意了，知会大家一下，结束。<br>多尝试用可视化的方式进行沟通。<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112178/origin-of-ray/1669902990925-8a11e407-496a-4218-b2ad-770dd8554be1.png_averageHue_23edeeee_clientId_u496d162f-a4d1-4_from_paste_height_1168_id_ud3c871f5_name_image_aakl9n.png" alt="image.png"><br>持续集成的诞生，就是人们尝试缩短集成周期的结果。为什么要缩短周期呢？因为我们希望尽早得到反馈，知道自己的工作结果是否有效。所以，想要做好持续集成，就需要顺应<strong>持续集成的本质：尽快得到工作反馈</strong>。<br>由此，我们便得到<strong>持续集成的关键点，你只要记住一句话，快速反馈</strong>。<br>快速反馈，这句分成两个部分，快速和反馈，这也就引出了<strong>持续集成的两个重要目标：怎样快速地得到反馈，以及什么样的反馈是有效的</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34020170/1670545816448-b0372507-d4ed-4351-8b1b-278b49a0797a.png#averageHue=%23fdfdfd&amp;clientId=u3a9da171-cf06-4&amp;from=paste&amp;height=595&amp;id=u656beaf1&amp;name=image.png&amp;originHeight=1190&amp;originWidth=2284&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244883&amp;status=done&amp;style=none&amp;taskId=uf9db3aa5-fa20-4d6f-8e7e-2c758351358&amp;title=&amp;width=1142" alt="image.png"><br>什么是复盘？复盘，原本是一个围棋术语，就是对弈者下完一盘棋之后，重新把对弈过程摆一遍，看看哪些地方下得好，哪些下得不好，哪些地方可以有不同甚至是更好的下法等等。<strong>这种把过程还原，进行研讨与分析的方式，就是复盘</strong>。<br>现如今，复盘的概念已经被人用到了很多方面，比如，股市的复盘、企业管理的复盘，它也成为了许多人最重要的工具，帮助个体和企业不断地提升。这其中最有名的当属联想的创始人柳传志老爷子，他甚至把“复盘”写到了联想的核心价值观里。为什么复盘这么好用呢？在我看来有一个重要的原因，在于<strong>客体化</strong>。俗话说，当局者迷，旁观者清。以我们的软件开发作为例子，在解决问题的时候，我们的注意力更多是在解决问题本身上，而很少会想这个问题是怎么引起的。<strong>当你复盘时，你会站在另外一个视角，去思考引起这个问题的原因。这个时候，你不再是当事者，而变成了旁观者。</strong>你观察原来那件事的发生过程，就好像是别人在做的一样。你由一个主观的视角，变成了一个客观的视角。用别人的视角看问题，这就是客体化。<br>你的团队如果能一下洞见到根因固然好，如果不能，那么最好多问一些为什么。具体怎么问，有一个常见的做法是：5 个为什么（5 Whys）。这种做法是丰田集团的创始人丰田佐吉提出的，后来随着丰田生产方式而广为人知。为什么要多问几个为什么？因为初始的提问，你能得到的只是表面原因，只有多问几个为什么，你才有可能找到根本原因。我给你举个例子。服务器经常返回 504，那我们可以采用“5 个为什么”的方式来问一下。</p><ol><li>为什么会出现 504 呢？因为服务器处理时间比较长，超时了。</li><li>为什么会超时呢？因为服务器查询后面的 Redis 卡住了。</li><li>为什么访问 Redis 会卡住呢？因为另外一个更新 Redis 的服务删除了大批量的数据，然后，重新插入，服务器阻塞了。</li><li>为什么它要大批量的删除数据重新插入呢？因为更新算法设计得不合理。</li><li>为什么一个设计得不合理的算法就能上线呢？因为这个设计没有按照流程进行评审。</li></ol><p>多走近用户，才能明白自己的代码用来做什么了，也能在讨论需求时更加明白哪些需求是有必要的<br>作为一个程序员，克服技术难题是我们工作的一个重要组成部分，所以，一旦有困难我们会下意识地把自己投入进去。但这真的是最好的做法吗？并不是，<strong>不是所有的问题，都是值得解决的技术难题。</strong><br>写程序有一个重要的原则叫 Fail Fast，这是什么意思呢？就是如果遇到问题，尽早报错。<br>如果配置文件缺少了一个重要参数，比如，缺少了数据库最大连接数，你打算怎么处理？很多人会选择给一个缺省值，这就不是 Fail Fast 的做法。既然是重要参数，少了就报错，这才叫 Fail Fast。<br>其实，<strong>Fail Fast 也有一些反直觉的味道，很多人以构建健壮系统为由，兼容了很多奇怪的问题，而不是把它暴露出来。反而会把系统中的 Bug 隐藏起来</strong>。我们都知道，靠 debug 来定位问题是最为费时费力的一种做法。所以，别怕系统有问题，有问题就早点报出来。</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>在我看来，做有价值的事是重要的，这里面的有价值，不仅仅是“做”了什么，通过“不做”节省时间和成本也是有价值的。我的两个同事阻止了客户的浪费，所以，我将这个项目视为成功。<br>对于开发来说，也遵循同样的道理。程序员这个群体技术能力实在太强，做一个技术方案简直是太符合直觉的做法，我们就是忠实地把一个个需求做出来，把“全世界”都自动化了。<strong>但事实上，这个世界太多的浪费就是做了不该做的东西。</strong>在我们的专栏里，我反复地说，我们要多问问题，目的就是为了不做那些不该做的事。<br><strong>小心 NIH 综合症</strong><br>你可以从需求的角度判断哪些工作是可以不做的，但我们也要防止程序员自己“加戏”，我再给你讲一个技术人员普遍存在的问题：NIH 综合症（Not Invented Here Syndrome）。<br>比如，这种乱象在前端领域也出现了，各种各样的框架，让很多前端程序员哭诉，实在学不动了。再比如，我曾经面试过一个接触 Go 比较早的程序员，他就是恨不得把所有框架都自己写。<br>说了这么多，无非就是想说明一件事，<strong>写代码之前，先问问自己真的要做吗？能不做就不做，直到你有了足够的理由去做。</strong>对应到 Larry Wall 的说法，你要懒惰，花大力气去规避精力消耗。<br>一般来说，在构建持续交付的基础设施时，会有下面几个不同的环境。</p><ol><li>持续集成环境，持续集成是持续交付的前提，这个过程主要是执行基本的检查，打出一个可以发布的包。</li><li>测试环境（Test），这个环境往往是单机的，主要负责功能验证，这里运行的测试基本上都是验收测试级别的，而一般把单元测试和集成测试等执行比较快的测试放到持续集成环境中执行。</li><li>预生产环境（Staging），这个环境通常与生产环境配置是相同的，比如，负载均衡，集群之类的都要有，只是机器数量上会少一些，主要负责验证部署环境，比如，可以用来发现由多机并发带来的一些问题。</li><li>生产环境（Production），这就是真实的线上环境了。</li></ol><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112199/origin-of-ray/1670548946042-82f31fce-91f5-49a5-9e76-a8981ec76fe9.png_averageHue_23f8f7f7_clientId_u3a9da171-cf06-4_from_paste_height_551_id_u8619be65_name_image_keqa8u.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112216/origin-of-ray/1670548966490-daed7c11-d337-4904-9721-51cc1be48350.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_737_id_u62feb077_name_image_x6u6xh.png" alt="image.png"><br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112236/origin-of-ray/1670549025670-7d994107-12f6-412d-9007-62cf3d1a161b.png_averageHue_23f5f5f5_clientId_u3a9da171-cf06-4_from_paste_height_734_id_u59f6a867_name_image_xvvqi1.png" alt="image.png"><br>保证自己的代码不要过于混乱：SOLID原则</p><p>今天，我们从软件行业的一个段子说起。甲方想要做个电商网站，作为乙方的程序员问：“你要做个什么样的呢？”甲方说：“像淘宝那样就好。”程序员问：“那你打算出多少钱？”甲方想了想，“5 万块钱差不多了吧！”<br>这当然是个调侃客户不懂需求的段子，但你有没有想过，<strong>为什么在甲方看来并不复杂的系统，你却觉得困难重重呢？因为你们想的根本不是一个东西</strong>。<br>在客户看来，我要的不就是一个能买东西的网站吗？只要能上线商品，用户能看到能购买不就好了，5 万块钱差不多了。<br>而你脑中想的却是，“淘宝啊，那得是多大的技术挑战啊，每年一到‘双 11’，那就得考虑各种并发抢购。淘宝得有多少程序员，5 万块你就想做一个，门都没有。”</p><p><strong>做一个新项目的时候，并不需要考虑太多的想象中的需求，最重要的是做好两点</strong></p><ol><li><strong>分析需求，做好领域划分和抽象（</strong>越高层的抽象越稳定，越细节的东西越容易变化<strong>），保证架构的可扩展性</strong></li><li><strong>尽量少引入各种框架，或者保证框架的可插拔，可快速替换</strong></li></ol><p>回顾上面的过程，你就可以看到，每次随着业务量的增长，原有技术无法满足需要，于是，就需要用新的技术去解决这个问题。这里的关键点在于：不同的业务量。</p><p>一个只服务于几个人的系统，单机就够了，一个刚刚入行的程序员也能很好地实现这个系统。而当业务量到达一台机器抗不住的时候，就需要用多台机器去处理，这个时候就必须考虑分布式系统的问题，可能就要适当地引入中间件。而当系统变成为海量业务提供服务，就没有哪个已经打造好的中间件可以提供帮助了，需要自己从更底层解决问题。虽然在业务上看来，这些系统是一样的，但在技术上看来，在不同的阶段，一个系统面对的问题是不同的，因为它面对业务的量级是不同的。更准确地说，不同量级的系统根本就不是一个系统。<br>在前面的例子中，淘宝的工程师之所以要改进系统，真实的驱动力不是技术，而是不断攀升的业务量带来的问题复杂度。所以，评估系统当前所处的阶段，采用恰当的技术解决，是我们最应该考虑的问题。<br><strong>那请记住：用简单技术解决问题，直到问题变复杂。</strong><br>也许你会说，我做的系统没有那么大的业务量，我还想提高技术怎么办？答案是到有好问题的地方去。现在的 IT 行业提供给程序员的机会很多，找到一个有好问题的地方并不是一件困难的事，当然，前提条件是，你自己得有解决问题的基础能力。</p><p><strong>如何做微服务</strong><br>先回答一个问题，我们为什么要做微服务？对这个问题的标准回答是，相对于整体服务（Monolithic）而言，微服务足够小，代码更容易理解，测试更容易，部署也更简单。这些道理都对，但这是做好了微服务的结果。<br>怎么才能达到这个状态呢？这里面有一个关键因素，怎么划分微服务，也就是一个庞大的系统按照什么样的方式分解。这是在很多关于微服务的讨论中所最为欠缺的，也是很多团队做“微服务”却死得很难看的根本原因。<br>不了解这一点，写出的服务，要么是服务之间互相调用，造成整个系统执行效率极低；要么是你需要花大力气解决各个服务之间的数据一致性。<br><strong>换句话说，服务划分不好，等待团队的就是无穷无尽的偶然复杂度泥潭。只有正确地划分了微服务，它才会是你心目中向往的样子。</strong><br><strong>那应该怎么划分微服务呢？你需要了解领域驱动设计。</strong><br>领域驱动设计（Domain Driven Design，DDD）是 Eric Evans 提出的从系统分析到软件建模的一套方法论。它要解决什么问题呢？就是将业务概念和业务规则转换成软件系统中概念和规则，从而降低或隐藏业务复杂性，使系统具有更好的扩展性，以应对复杂多变的现实业务问题。<br><strong>DDD 到底讲了什么呢？它把你的思考起点，从技术的角度拉到了业务上。</strong><br>贴近业务，走近客户，我们在这个专栏中已经提到过很多次。但把这件事直接体现在写代码上，恐怕还是很多人不那么习惯的一件事。DDD 最为基础的就是通用语言（Ubiquitous Language），让业务人员和程序员说一样的语言。这一点我在《21 | 你的代码为谁而写？》中已经提到过了。使用通用语言，等于把思考的层次从代码细节中拉到了业务层面。越高层的抽象越稳定，越细节的东西越容易变化。<br>有了通用语言做基础，然后就要进入到 DDD 的实战环节了。<strong>DDD 分为战略设计（Strategic Design）和战术设计（Tactical Design）。</strong><br>战略设计是高层设计，它帮我们将系统切分成不同的领域，并处理不同领域的关系。我在前面的内容中给你举过“订单”和“用户”的例子。从业务上区分，把不同的概念放到不同的地方，这是从根本上解决问题，否则，无论你的代码写得再好，混乱也是不可避免的。而这种以业务的角度思考问题的方式就是 DDD 战略设计带给我的。战术设计，通常是指在一个领域内，在技术层面上如何组织好不同的领域对象。举个例子，国内的程序员喜欢用 myBatis 做数据访问，而非 JPA，常见的理由是 JPA 在有关联的情况下，性能太差。但真正的原因是没有设计好关联。<br>说了半天，这和微服务有什么关系呢？微服务真正的难点并非在于技术实现，而是业务划分，而这刚好是 DDD 战略设计中限界上下文（Bounded Context）的强项。<br>虽然通用语言打通了业务与技术之间的壁垒，但计算机并不擅长处理模糊的人类语言，所以，通用语言必须在特定的上下文中表达，才是清晰的。就像我们说过的“订单”那个例子，交易的“订单”和物流的“订单”是不同的，它们都有着自己的上下文，而这个上下文就是限界上下文。<br>它限定了通用语言自由使用的边界，一旦出界，含义便无法保证。正是由于边界的存在，一个限界上下文刚好可以成为一个独立的部署单元，而这个部署单元就可以成为一个服务。<br><strong>所以要做好微服务，第一步应该是识别限界上下文。</strong><br>你也看出来了，每个限界上下文都应该是独立的，每个上下文之间就不应该存在大量的耦合，<strong>困扰很多人的微服务之间大量相互调用，本身就是一个没有划分好边界而带来的伪命题，靠技术解决业务问题</strong>，事倍功半。<br>有了限界上下文就可以做微服务了吧？且慢！<br>以我拙见，一次性把边界划清楚并不是一件很容易的事。大家在一个进程里，调整起来会容易很多。然后，让不同的限界上下文先各自独立演化。等着它演化到值得独立部署了，再来考虑微服务拆分的事情。到那时，你也学到各种关于微服务的技术，也就该派上用场了！</p><p>DDD与精益创业，微服务的划分异曲同工，都需要划分好上下文界限，切用最简单的方式实现当下的需求，再逐步扩大（需要好的设计保证可扩展）精益创业实际上是一种持续验证，验证想法的有效性，获得经过验证的认知（Validated Learning）。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112260/origin-of-ray/1670740142955-ce3186d8-a3eb-425b-bc3f-d4f14ed071fe.png_averageHue_23f6f6f6_clientId_uec93d73b-3fc1-4_from_paste_height_1592_id_u97ed25ef_name_image_jwyysc.png" alt="image.png"></p><p>如果你了解了业务，你自己就可以推演出基本的代码结构。但反过来，如果让你看了代码，从中推演出业务，那几乎是不可能的。<br>事实上，每次了解到一个业务，我都会在脑子中过一下，如果是我做这个业务，我会怎么做。这样一来，我就会先在整体上有一个预判，后面再对应到实际的代码上，就不会那么陌生了。要了解业务，我一般都会请人给我讲一下，这个业务是做什么的，解决什么样的问题，具体的业务流程是什么样子的，等等。<br><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1676112273/origin-of-ray/1670740542457-15af9ad4-a2e9-402f-9cc0-e6c51d46db57.png_averageHue_23f2f2f2_clientId_uec93d73b-3fc1-4_from_paste_height_429_id_u4aff8d90_name_image_ihfmvt.png" alt="image.png"><br>改造遗留系统，我给你几个建议：</p><ol><li>构建测试防护网，保证新老模块功能一致；</li><li>分成小块，逐步替换；</li><li>构建好领域模型；</li><li>寻找行业中关于系统构建的最新理解。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近chatgpt大火，让很多人觉得很多工作包括程序员会被取代。其他岗位我不太了解，但是对于程序员这个职业，我认为但是其实这说明，大家对于程序员在处理的问题的认知是程序员处理的是某一个独立的问题上，或者某个独立的很具体的问题上，当然这和程序员面试题有关，毕竟程序员面试题其实就是这种，面试题，说起来就是做卷子，做卷子你怎么可能有背靠互联网的机器人比，而那些不好衡量的看起来是空话的东西，在一次面试中，人还真不一定表现的比背后是所有面试经验帖的机器人高明。&lt;/p&gt;
&lt;p&gt;但是其实这已经是忘记了程序员是为什么而存在的。程序员掌握的技术叫做信息技术，目的是为了快速的收集和处理信息，那么为什么这个技术重要呢？了解这个问题，其实也能明白AI到底给我们带来了什么。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript实现AVL树</title>
    <link href="https://sunra.top/2023/02/02/avl-tree-javascript/"/>
    <id>https://sunra.top/2023/02/02/avl-tree-javascript/</id>
    <published>2023-02-02T02:56:03.000Z</published>
    <updated>2023-05-16T05:31:16.906Z</updated>
    
    <content type="html"><![CDATA[<p>最近尝试实现了下AVL树，发现这玩意写起来还是很多细节的，搞了半天，所以就在这里记录下。</p><p>AVL树就是平衡二叉检索树，一方面它是BST，即二叉检索树，一方面它是平衡的，也就是任何一个节点为根结点的子树的左子树和右子树的高度差不到1。</p><a id="more"></a><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>关于BST就不多说了，比较简单，就是每个节点的左孩子都小于根节点，右孩子都大于根节点，插入的时候注意就好。</p><p>但是BST有个问题，比如依次插入1，2，3，4，5，6，那么最终会得到一个只有右孩子的树，其实这个BST已经退化成了普通链表，所以我们需要一定的方式保持这个树的平衡，而保持平衡的方式如下：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1675307019/origin-of-ray/912c7f2fdaf3490689db1a7144775b11_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0_qzoplx.webp" alt></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="四种不平衡的情况"><a href="#四种不平衡的情况" class="headerlink" title="四种不平衡的情况"></a>四种不平衡的情况</h2><h3 id="左左情况"><a href="#左左情况" class="headerlink" title="左左情况"></a>左左情况</h3><p>这个情况下要右旋，然后返回旋转后新的根节点，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#_rotateRight(node) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.left;</span><br><span class="line">    node.left = avlNode.right;</span><br><span class="line">    avlNode.right = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右右情况"><a href="#右右情况" class="headerlink" title="右右情况"></a>右右情况</h3><p>这个情况下要左旋，然后返回旋转后新的根节点，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#_rotateLeft(node) &#123;</span><br><span class="line">    <span class="keyword">const</span> avlNode = node.right;</span><br><span class="line">    node.right = avlNode.left;</span><br><span class="line">    avlNode.left = node;</span><br><span class="line">    <span class="keyword">return</span> avlNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左右情况"><a href="#左右情况" class="headerlink" title="左右情况"></a>左右情况</h3><p>这个情况下先要对根节点的左子节点做左旋，变为左左情况，然后再对根节点做右旋，然后返回旋转后新的根节点，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#_rotateLeftRight(node) &#123;</span><br><span class="line">    node.left = this.#_rotateLeft(node.left);</span><br><span class="line">    return this.#_rotateRight(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右左情况"><a href="#右左情况" class="headerlink" title="右左情况"></a>右左情况</h3><p>这个情况下先要对根节点的右子节点做右旋，变为右右情况，然后再对根节点做左旋，然后返回旋转后新的根节点，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#_rotateRightLeft(node) &#123;</span><br><span class="line">    node.right = this.#_rotateRight(node.right);</span><br><span class="line">    return this.#_rotateLeft(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修复不平衡的情况"><a href="#修复不平衡的情况" class="headerlink" title="修复不平衡的情况"></a>修复不平衡的情况</h2><h3 id="获取节点的高度"><a href="#获取节点的高度" class="headerlink" title="获取节点的高度"></a>获取节点的高度</h3><p>我们在做平衡的时候需要判断是否需要平衡以及是哪种不平衡的情况好选择不同的旋转方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#_getAvlTreeHeight(node) &#123;</span><br><span class="line">    <span class="comment">// 空节点的高度为0</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里使用后序遍历，因为每次递归的结果需要子节点递归的结果</span></span><br><span class="line">    const leftHeight = this.#_getAvlTreeHeight(node.left);</span><br><span class="line">    const rightHeight = this.#_getAvlTreeHeight(node.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点高度为左右子树高度中的较大值加上1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平衡"><a href="#平衡" class="headerlink" title="平衡"></a>平衡</h3><p>平衡以node为根节点的子树，并返回新的根节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#_balance(node) &#123;</span><br><span class="line">    <span class="comment">// 空节点不需要平衡，直接返回空节点</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取左右子树的高度</span></span><br><span class="line">    const leftSubTreeHeight = this.#_getAvlTreeHeight(node.left);</span><br><span class="line">    const rightSubTreeHeight = this.#_getAvlTreeHeight(node.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果左子树高度大于右子树高度，且大不止1，说明不平衡，且这里隐含一个逻辑，就是左子树的左子树一定不为空</span></span><br><span class="line">    <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 左左情况，直接右旋</span></span><br><span class="line">        if (this.#_getAvlTreeHeight(node.left.left) &gt;= this.#_getAvlTreeHeight(node.left.right)) &#123;</span><br><span class="line">            node = this.#_rotateRight(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 左右情况，先左旋后右旋</span></span><br><span class="line">            node = this.#_rotateLeftRight(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 右右情况，直接左旋</span></span><br><span class="line">        if (this.#_getAvlTreeHeight(node.right.right) &gt;= this.#_getAvlTreeHeight(node.right.left)) &#123;</span><br><span class="line">            node = this.#_rotateLeft(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 右左情况，先右旋，后左旋</span></span><br><span class="line">            node = this.#_rotateRightLeft(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回平衡后的子树的新的根节点</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入新的节点，并返回新的根节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码最需要理解的地方是，这个递归函数每次返回的是在以node节点为根节点的树上插入newNode并平衡后的新子树的根节点。</span></span><br><span class="line">#_insertHelper(node, newNode) &#123;</span><br><span class="line">    <span class="comment">// 如果是根节点为空，则直接把newNode当作根节点返回</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果新节点的值比当前节点小</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.val &lt; node.val) &#123;</span><br><span class="line">        <span class="comment">// 左节点为空，那么直接就把新节点当作左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">            node.left = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果左子节点不为空，那么在左子树中插入新节点，并把插入后返回的新子树的根节点作为左子树</span></span><br><span class="line">            node.left = this.#_insertHelper(node.left, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 右节点为空，那么直接就把新节点当作右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">            node.right = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果右子节点不为空，那么在右子树中插入新节点，并把插入后返回的新子树的根节点作为右子树</span></span><br><span class="line">            node.right = this.#_insertHelper(node.right, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入后进行平衡，并返回平衡后的新子树的根节点</span></span><br><span class="line">    return this.#_balance(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insert(newNode) &#123;</span><br><span class="line">    <span class="comment">// 从根节点开始插入newNode，并且重新赋值根节点，保证下次调用的正确</span></span><br><span class="line">    this.#_root = this.#_insertHelper(this.#_root, newNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>这个比较简单，和BST没什么区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> #_searchHelper(node, val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.val === val) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.val) &#123;</span><br><span class="line">        return this.#_searchHelper(node.left, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        return this.#_searchHelper(node.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">search(val) &#123;</span><br><span class="line">    return this.#_searchHelper(this.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>在以node为根节点的子树上删除值为val的节点，并返回平衡后新的树的根节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#_removeHelper(node, val) &#123;</span><br><span class="line">    <span class="comment">// 如果node为空，说明树为空，不需要删除，新树的根节点也是null</span></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 如果找到了要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span> (val === node.val) &#123;</span><br><span class="line">        <span class="comment">// 要删除的节点左右子树都有</span></span><br><span class="line">        <span class="keyword">if</span> (node.left &amp;&amp; node.right) &#123;</span><br><span class="line">            <span class="comment">// 那就找到该节点右子树</span></span><br><span class="line">            <span class="keyword">let</span> p = node.right;</span><br><span class="line">            <span class="comment">// 然后在右子树中一直找左子树</span></span><br><span class="line">            <span class="keyword">while</span>(p.left) &#123;</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 然后把结果替换到当前节点中，因为右子树中最左的子节点一定小于右子树中其他的节点，同时大雨左子树中所有节点</span></span><br><span class="line">            node.val = p.val;</span><br><span class="line">            <span class="comment">// 上一步只是把节点值替换，但是节点还在，我们需要右子树中删除该节点，然后返回平衡后新的右子树作为node的右子树。</span></span><br><span class="line">            <span class="comment">// 而记住，此时我们要删除的是p.val了，而不是val，因为我们已经把p.val放到了node.val，且这个p有个性质就是它最起码没有左子节点了，座椅下一次会进入紧接着的else逻辑</span></span><br><span class="line">            node.right = this.#_removeHelper(node.right, p.val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不是左右子树都有，直接就替换上来，然后删除原本的就好</span></span><br><span class="line">            <span class="keyword">let</span> p = node.left !== <span class="literal">null</span> ? node.left : node.right;</span><br><span class="line">            node = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.val) &#123;</span><br><span class="line">        <span class="comment">// 如果要删除的值比当前小，就去左子树删除</span></span><br><span class="line">        node.left = this.#_removeHelper(node.left, val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果要删除的值比当前大，就去右子树删除</span></span><br><span class="line">        node.right = this.#_removeHelper(node.right, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回平衡后新的子树根节点</span></span><br><span class="line">    return this.#_balance(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove(val) &#123;</span><br><span class="line">    return this.#_removeHelper(this.#_root, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码和测试"><a href="#完整代码和测试" class="headerlink" title="完整代码和测试"></a>完整代码和测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvlTree</span></span>&#123;</span><br><span class="line">    #_rotateLeft(node) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.right;</span><br><span class="line">        node.right = avlNode.left;</span><br><span class="line">        avlNode.left = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_rotateRight(node) &#123;</span><br><span class="line">        <span class="keyword">const</span> avlNode = node.left;</span><br><span class="line">        node.left = avlNode.right;</span><br><span class="line">        avlNode.right = node;</span><br><span class="line">        <span class="keyword">return</span> avlNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_rotateLeftRight(node) &#123;</span><br><span class="line">        node.left = this.#_rotateLeft(node.left);</span><br><span class="line">        return this.#_rotateRight(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_rotateRightLeft(node) &#123;</span><br><span class="line">        node.right = this.#_rotateRight(node.right);</span><br><span class="line">        return this.#_rotateLeft(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_getAvlTreeHeight(node) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const leftHeight = this.#_getAvlTreeHeight(node.left);</span><br><span class="line">        const rightHeight = this.#_getAvlTreeHeight(node.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_balance(node) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const leftSubTreeHeight = this.#_getAvlTreeHeight(node.left);</span><br><span class="line">        const rightSubTreeHeight = this.#_getAvlTreeHeight(node.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftSubTreeHeight - rightSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            if (this.#_getAvlTreeHeight(node.left.left) &gt;= this.#_getAvlTreeHeight(node.left.right)) &#123;</span><br><span class="line">                node = this.#_rotateRight(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = this.#_rotateLeftRight(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightSubTreeHeight - leftSubTreeHeight &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            if (this.#_getAvlTreeHeight(node.right.right) &gt;= this.#_getAvlTreeHeight(node.right.left)) &#123;</span><br><span class="line">                node = this.#_rotateLeft(node)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = this.#_rotateRightLeft(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_insertHelper(node, newNode) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newNode.val &lt; node.val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">                node.left = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.left = this.#_insertHelper(node.left, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">                node.right = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.right = this.#_insertHelper(node.right, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return this.#_balance(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    insert(newNode) &#123;</span><br><span class="line">        this.#_root = this.#_insertHelper(this.#_root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_inOrder(node) &#123;</span><br><span class="line">        <span class="keyword">const</span> stack = [node];</span><br><span class="line">        <span class="keyword">const</span> result = [];</span><br><span class="line">        <span class="keyword">while</span>(stack.length) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">                current.right &amp;&amp; stack.push(current.right);</span><br><span class="line"></span><br><span class="line">                stack.push(current, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                current.left &amp;&amp; stack.push(current.left);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = stack.pop();</span><br><span class="line">                result.push(current.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    print() &#123;</span><br><span class="line">        if (this.#_root === null) return;</span><br><span class="line">        this.#_inOrder(this.#_root);</span><br><span class="line">        console.log(this.#_getAvlTreeHeight(this.#_root.left))</span><br><span class="line">        console.log(this.#_getAvlTreeHeight(this.#_root.right))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_searchHelper(node, val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.val === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.val) &#123;</span><br><span class="line">            return this.#_searchHelper(node.left, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            return this.#_searchHelper(node.right, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    search(val) &#123;</span><br><span class="line">        return this.#_searchHelper(this.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_removeHelper(node, val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (val === node.val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.left &amp;&amp; node.right) &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.right;</span><br><span class="line">                <span class="keyword">while</span>(p.left) &#123;</span><br><span class="line">                    p = p.left;</span><br><span class="line">                &#125;</span><br><span class="line">                node.val = p.val;</span><br><span class="line">                node.right = this.#_removeHelper(node.right, p.val)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> p = node.left !== <span class="literal">null</span> ? node.left : node.right;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; node.val) &#123;</span><br><span class="line">            node.left = this.#_removeHelper(node.left, val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.right = this.#_removeHelper(node.right, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this.#_balance(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(val) &#123;</span><br><span class="line">        return this.#_removeHelper(this.#_root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #_root = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> avlTree = <span class="keyword">new</span> AvlTree();</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">0</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">2</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">3</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">4</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">6</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">8</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">9</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">14</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">15</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">16</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">17</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">18</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">19</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">20</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">21</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">11</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">31</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">61</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">111</span>));</span><br><span class="line">avlTree.insert(<span class="keyword">new</span> TreeNode(<span class="number">221</span>));</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">20</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">1</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">11</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">221</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">8</span>);</span><br><span class="line">avlTree.print()</span><br><span class="line"></span><br><span class="line">avlTree.remove(<span class="number">4</span>);</span><br><span class="line">avlTree.print()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近尝试实现了下AVL树，发现这玩意写起来还是很多细节的，搞了半天，所以就在这里记录下。&lt;/p&gt;
&lt;p&gt;AVL树就是平衡二叉检索树，一方面它是BST，即二叉检索树，一方面它是平衡的，也就是任何一个节点为根结点的子树的左子树和右子树的高度差不到1。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>分析模式——可复用的对象模型</title>
    <link href="https://sunra.top/2023/01/26/analysis-patterns/"/>
    <id>https://sunra.top/2023/01/26/analysis-patterns/</id>
    <published>2023-01-26T03:10:44.000Z</published>
    <updated>2023-05-16T05:31:16.906Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了《分析模式——可复用的对象模型》一书，这本书算是DDD方面的一本启蒙书籍，阅读完成后还是受益良多，一方面是很多观点和平时的工作相互印证，很受启发，另一方面学到了一些业务建模的模式，本文主要总结一下收到启发的地方和建模原则，具体的建模方式举一个例子体会一下就好。</p><p>这里先简单说几个我最有收获的几个点：</p><ul><li>对象开发的一个重要原则是是软件的结构反映问题的结构。</li><li>问题没有梳理清楚导致的耦合是没有办法通过设计模式来解决的，比如物流和订单，他们使用了同一个数据表，他们需要互相感知到对方，那么他们就一定在某种程度上的耦合在一起，属于本质复杂度，这种耦合是没办法通过良好的设计模式进行解耦的，即使它们是两个系统，他们也要一起改动。</li><li>业务领域的划分也要做到高内聚，低耦合，最少知识原则，如果每个业务领域需要知道很多其他业务领域的知识，那么其实还是耦合的。</li><li>不同领域之间如果非要有联系，也尽量减少双向的联系，每一个双向的联系都会为系统带来更高的复杂度。</li><li>在系统开始阶段要尽量降低系统复杂度的同时，对修改保持开放，也就是开闭原则，除非十分必要，不要上来就引入很多第三方工具，要考虑这些工具的引入成本，维护成本，升级成本，甚至是机会成本，也不要上来就搞什么微服务，微服务最好是从一个成熟的系统中经过验证稳定的业务领域中孵化出来，否则只是单纯的技术架构上的微服务只会徒增系统整体的复杂性和风险。</li></ul><a id="more"></a><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p><strong>我们可以把架构设计简单分为横向和纵向的划分，横向的划分，解决的是业务架构，为的是降低业务逻辑的本质复杂度，降低业务领域之间的耦合，而纵向的架构解决的是非功能性的需求，比如通过缓存层，消息队列等技术来提高稳定性，吞吐率等。</strong></p><p>我们本文的重点就是解决横向的架构设计的一些原则。</p><p>分析的目的是为了理解问题，在我看来，这可不仅是一个使用用例来罗列需求的过程。在系统开发过程中，用例就算不是必不可少的，也是很有价值的，但是捕获这种用例并不意味着分析的结束。分析还涉及透过表面需求以提出反映问题内在机制的心智模型。</p><p>考虑编写一个模拟台球比赛的软件，可以通过描述表面特征的用例来评估这个问题：“玩家击打白球，使它以一定速度移动，接着，白球又以一定的角度击中了红球，使红球以一定的方向移动了一定的距离。”可以拍摄几百次这样的事件，并测量球的速度，角度和移动的距离。然而仅靠这些恐怕不足以写出好的模拟程序，要写好这个程序，需要透过表面现象去了解其背后的运动规律，包括质量，速度，动量等。</p><p>像台球比赛这样的问题并不多见，因为这些运动规律广为人知。然后在许多企业中，这一层面的基本机制还没有被很好地理解，需要我们去努力地发现。</p><p>模型无所谓对错，关键在于哪个模型更加合用。</p><p>模型的选择可能会影响开发出来的软件的灵活性和可复用性。对于台球比赛这种软件，你可能会主张使用爱因斯坦模型，因为开发出来的软件可以灵活到足以处理原子碰撞问题。但这样处理比较危险，因为<strong>引入太多的灵活性可能导致系统过于复杂，这是一种糟糕的工程实践</strong>。</p><p>使用分析和设计技术的主要原因之一是为了让领域专家参与进来，而这对概念建模来说至关重要。有效的模型只能由真正了解该领域的人来构建，这些人是该领域的全职工作者。IT技能对于建模技能既没有帮助也没有阻碍。</p><p>分析技术应该与软件技术相互独立，理想情况下，概念建模应该完全独立于软件技术，就像上面说的运动定律那样。这种独立性可以防止技术阻碍人们对问题的理解，并且得到的模型对各种软件技术都同样有效。</p><p>与概念模型密切相关的是软件的接口而不是软件的实现。</p><h1 id="一些建模原则"><a href="#一些建模原则" class="headerlink" title="一些建模原则"></a>一些建模原则</h1><p>这里罗列一些书中的建模原则，其实这些原则和设计模式的的原则是相通的，二者只是关注点不同。</p><ol><li>建模时应该是模型中变化最频繁的部分所影响的类型数量最小化。（这一点其实和设计模式的将容易变化和不容易变化的部分分开是相通的）</li><li>当为具有超类型的类型定义特性时，考虑将这些特性放在超类型上是否合理。</li><li>应该显式地将模型分为操作层和知识层。举个例子，配置类的文件或者某些我们自定义的可以解析的语义是知识层，它可以定义类之间的关系以及某些程序运行的原则，而具体如何实例化类属于操作层。</li><li>当多个属性通过可以在若干个类型中使用的行为相互作用时，应该将这些属性组合成一个新的基本类型。比如我们系统中涉及大量的不同单位的数据，我们可以将单位和数值从这些数据中抽取出来组合成数量类型。</li><li>操作层包含那些每天都发生变化的概念，这些概念的配置由知识层进行约束，其变化频率会低很多。这里的变化频率指的是运行时的变化。</li><li>如果一个类型有非常多类似的关联，那么将这些关联对象抽象成一个新类型，再创建一个知识层来区分它们。</li><li>要记录某个值的变化历史，应该为该值建立一个账户。</li><li>使用账户时，应该遵循如下守恒原则：所记录的项目不能被创建或者销毁，只能从一处转移到另一处，这样可以更加容易查找和避免漏洞。</li><li>想要了解一个计算是如何进行的，可以将计算结果表示为一个对象，该对象用于记住创建它的计算以及所使用的输入值。</li><li>当有多个等价的特性集可供选择时，选取领域专家认为最合适的那个，如果领域专家认为二者都非常有价值，那么就将二者都抽取出来，并将其中之一标记为派生。</li><li>将一个特性标记为派生，只是对接口的约束，并不影响底层的数据结构。</li><li>如果可以通过不同的条件来创建对象的集合，那就应该使用组合。</li><li>在将一个处理过程作为某个类型的一项特性时，应该为该过程提供一个抽象接口，以便通过子类化方便地改变其实现。例如，纯粹硬编码的实现是一个子类，各种参数驱动的方法是其他子类。</li><li>当多个属性在某个行为中进行交互，而该行为又可能在多个类型中使用时，应该将这些属性组合成一个新的基本类型。</li><li>如果超类型适用的领域较窄，子类型适用的领域较宽，那么就不应该使用泛化。</li><li>如果两个相似类型之间的差别通常可以忽略，那么就可以使用抽象超类型。如果两者之间的差别很重要，那么就不要使用抽象超类型。</li><li>如果使用一个抽象超类型不会给客户端带来更多的工作量，那么就应该提供这个抽象类型。</li><li>当某种信息既可能从一个信息源直接获取，也可能根据其他可用数据计算出来时，应该提供一个抽象接口，将从信息源获取和计算这两种方式分别作为其子类。</li><li>当面临几种替代方法时，首先选择最简单的方法，然后根据需要改为更复杂的方法。</li><li>当即中建模方案中难以抉择时，遵循领域专家的直觉。</li><li>只有在下述情况下才应该使用子类型：超类型所有特性都适用于子类型，并且从概念上，子类型的每个实例都是超类型的实例这一说法是合理的。</li><li>当以客户视角看到单笔交易可以被交易员分为多笔交易时，应该将产品和合同分开。产品与合同区分的关键在于，产品代表客户意图，而合同指的是对手方和主方之间的实际交易的内容。</li><li>不要重复有相同含义的基本关联。遵循这一原则，就可以获得职责划分良好的类型。</li><li>在职责分配上应保持一致。要小心那些有时对某事负责，有时又将该职责委托出去的类型。（这种行为可能是正确的，但总是应该对其保持怀疑的态度）</li><li>单向关联和双向关联之间做出选择需要在两个方面进行权衡，一方面是类型开发工作人员的工作量小（减少类型间的耦合）；另一方面是类型使用者的使用方便性。</li><li>如果一个包只需要见到另一个包的一部分，可以考虑将后一个包分割成两个互相可见的包。</li><li>子类型化的本质在于可以在超类型对其毫不知情的情况下对其进行扩展。通常需要设计一些子类型来积累经验，然后再进行抽象。</li></ol><h1 id="举例两个分析模式"><a href="#举例两个分析模式" class="headerlink" title="举例两个分析模式"></a>举例两个分析模式</h1><p>图中的每一个方框代表一个类型。</p><h2 id="责任模式"><a href="#责任模式" class="headerlink" title="责任模式"></a>责任模式</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220145_aun9wt.jpg" alt></p><ul><li>知识层中定义了责任类型，责任类型定义了什么样的委托方可选的责任方有哪些这个映射关系</li><li>那么操作层就是实例化一个责任，在具体的责任重选择参与方的时候要遵循知识层的责任类型中的规范</li><li>每个责任可能有一个时间段，对应的是一个活动。</li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674914530/origin-of-ray/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230128220202_mjg72s.jpg" alt></p><ul><li>每个观察有自己的参与方</li><li>观察可以子类型化为假定，推测和有效观察</li><li>观察也可以子类型化为测量和分类观察，测量的结果是一个数量（数值+单位），分类观察的结果是是否存在。举个例子，血压是一个测量，而血压高是一个分类观察。血压这个测量可以推测出血压高这个分类观察，而一旦血压的测量是错的，这个推测链应该直接被连锁否定掉。</li><li>在知识层，观察有自己的规程，也就是如何进行着观察</li><li>知识层的现象类型，现象和观察概念，规定了操作层的观察可以是什么，如血压就是一个现象类型，增加是一个现象，血压增加是一个观察概念，同时观察概念之间是可以互相推测的。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近读了《分析模式——可复用的对象模型》一书，这本书算是DDD方面的一本启蒙书籍，阅读完成后还是受益良多，一方面是很多观点和平时的工作相互印证，很受启发，另一方面学到了一些业务建模的模式，本文主要总结一下收到启发的地方和建模原则，具体的建模方式举一个例子体会一下就好。&lt;/p&gt;
&lt;p&gt;这里先简单说几个我最有收获的几个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象开发的一个重要原则是是软件的结构反映问题的结构。&lt;/li&gt;
&lt;li&gt;问题没有梳理清楚导致的耦合是没有办法通过设计模式来解决的，比如物流和订单，他们使用了同一个数据表，他们需要互相感知到对方，那么他们就一定在某种程度上的耦合在一起，属于本质复杂度，这种耦合是没办法通过良好的设计模式进行解耦的，即使它们是两个系统，他们也要一起改动。&lt;/li&gt;
&lt;li&gt;业务领域的划分也要做到高内聚，低耦合，最少知识原则，如果每个业务领域需要知道很多其他业务领域的知识，那么其实还是耦合的。&lt;/li&gt;
&lt;li&gt;不同领域之间如果非要有联系，也尽量减少双向的联系，每一个双向的联系都会为系统带来更高的复杂度。&lt;/li&gt;
&lt;li&gt;在系统开始阶段要尽量降低系统复杂度的同时，对修改保持开放，也就是开闭原则，除非十分必要，不要上来就引入很多第三方工具，要考虑这些工具的引入成本，维护成本，升级成本，甚至是机会成本，也不要上来就搞什么微服务，微服务最好是从一个成熟的系统中经过验证稳定的业务领域中孵化出来，否则只是单纯的技术架构上的微服务只会徒增系统整体的复杂性和风险。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>KM 算法</title>
    <link href="https://sunra.top/2023/01/22/km-algorithm/"/>
    <id>https://sunra.top/2023/01/22/km-algorithm/</id>
    <published>2023-01-22T03:40:37.000Z</published>
    <updated>2023-05-16T05:31:16.914Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客讲了二分图匹配的<a href="https://sunra.top/2023/01/13/hungary-algorithm/">匈牙利算法</a>，但是匈牙利算法中的每个匹配边权重都是一样的，如果我们在匹配边权重不同的情况下得到最佳匹配，那么就需要用到KM算法。</p><a id="more"></a><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>其实我们在理解了匈牙利算法之后，再来理解KM算法就简单了。</p><p>我们现在知道匈牙利算法能解决最大匹配的问题，现在加了权重，KM算法实际上就是想了个办法，将问题转换成了匈牙利算法可以解决的形式。</p><p>现在二分图带了权重，可以理解为加了一种约束，这种约束让我们优先选择那些权重大的边出来，进行匹配。</p><p><strong>因此我们要先把权重最大的边都挑出来，学术一点，就是挑一个子图出来。因为我们挑出来的都是权重最大的边，我们只要在这个子图中，找到最大匹配，这个最大匹配一定是权重最大的（很重要，意思就是这个子图里，在上面随便找都是权重最大的匹配，这样我们就能用匈牙利算法解决问题了）</strong>。流程就是：</p><p>找权重最大的边组成的子图————→在这个子图上找最大匹配</p><p>上述流程很简单吧，有一个问题是，我们都找最大权重的边组成子图，这个子图很小，很容易冲突。形象来说，大家找对象的要求都太高了，很可能会没法满足他们的要求。这时候只能委屈一部分人，让他稍微降低一下的要求，让他从别的人里挑对象。</p><p>这个KM算法的流程，核心思想就是：优先选择最满意的，因为要求太高找不到对象的那些人，降低标准扩大择偶范围，直到找到对象为止。</p><p>这个问题中，找最大匹配的那一部分我们会了呀，用匈牙利算法就搞定了。剩下就是两个问题了：</p><ol><li><p>怎么找到这个所谓的“权重最大的子图”。</p></li><li><p>怎么扩大择偶范围。既不能降得太低，也不能不降。</p></li></ol><p>上述两个问题，就是KM算法的精髓。</p><p>这个权重最大的子图，就是“相等子图”。扩大择偶范围，就是“顶标的更新—-建立新的相等子图”的过程。</p><p>要注意的是，上面说的权重最大，并不是整个图的范围内权重越大越好，而是目前能力范围内我们能选的最大的权重边（毕竟有些人需要降低标准才能找到对象）。</p><h2 id="第一个问题-如何寻找“权重最大的”子图？"><a href="#第一个问题-如何寻找“权重最大的”子图？" class="headerlink" title="第一个问题 如何寻找“权重最大的”子图？"></a>第一个问题 如何寻找“权重最大的”子图？</h2><p>首先强调一点，我们的这个子图的目的，是为了实现一个效果：</p><p>在这个子图上，不考虑权重找到最大匹配 等价于 在带权重的图上找权重最大的最大匹配。</p><p>我们挑一伙人出来，这些人彼此的满意度都比较高，那些低的暂时不考虑。在这伙人里找对象。找不到了再考虑加人进来。</p><p>为了实现这个目标，我们给每个人，增加一个顶标。我们暂不考虑这个顶标是怎么加的，将在下一步中再详细讲这个问题。现在假设我们已经有一个顶标了。</p><p>这个顶标是我们决定一条边是否加入子图的依据。顶标可以理解为择偶的最高标准，如果双方的适配程度达到了这个最高标准，就加入到择偶范围内来，就是加入到子图中。</p><p>因此，比如说小王择偶的最高标准是$S<em>{Wang}$  ，小李择偶最高标准$S</em>{li}$。小王和小李的喜欢程度是W（即二分图中，小王和小李的连线权重），若$W= S<em>{Wang} + S</em>{li}$就加入子图中，进入择偶候选人范围。注意到上面这个等式，于是这样选出来的子图，叫做相等子图。</p><p>然而这个最高标准，是不断变化的。也就是下一个问题，如何不断地调整最高标准，让择偶范围不断变化。</p><h2 id="第二个问题-如何扩大择偶范围？"><a href="#第二个问题-如何扩大择偶范围？" class="headerlink" title="第二个问题 如何扩大择偶范围？"></a>第二个问题 如何扩大择偶范围？</h2><p>我们这里拿一个具体的例子来看。</p><p>这里有5个女生x1-x5， 5个男生y1-y5。他们之间为0就是没有连线，大于0的数是权重，就是他们相互喜欢的程度。</p><script type="math/tex; mode=display">\begin{bmatrix} & y1 & y2 & y3 & y4 & y5 \\x1 & 3 & 5 & 5 & 4 & 1 \\x2 & 2 & 2 & 0 & 2 & 2 \\x3 & 2 & 4 & 4 & 1 & 0 \\x4 & 0 & 1 & 1 & 0 & 0 \\x5 & 1 & 2 & 1 & 3 & 3\end{bmatrix}</script><p><strong>第一步，最高标准初始化。</strong></p><p>需要注意的是，我们是一个无向的二分图，意思就是权重是双方共同的喜欢程度，因此可以选一个人作为代表就行了。于是，我们让女生做单方面的选择。</p><p>于是男生们的顶标都设为0。</p><p>一开始女生们都想找最喜欢的对象，我们将她们的最高标准都设为她们最喜欢的那个。比如，x1对所有男生都有意向，喜欢程度分别是3,5,5,4,1。那么她目前的最高标准就是5。</p><p>在第一次选择中，y2、y3加入择偶范围，其他三人暂不考虑。所有女生都这样，选出自己最喜欢的加入择偶范围。</p><p>我们就得到了子图</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674362847/origin-of-ray/v2-d41065309a9ebbebaba9697c72efd5b4_1440w_txjm2g.png" alt></p><p>这样的好处就是，这样挑出来的子图中，彼此喜欢程度一定是最大的。这样我们就不用考虑权重的问题了，问题就变成了一个在局部子图上，挑选最大匹配的问题，就可以用匈牙利算法解决了。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1674362942/origin-of-ray/v2-e0c9824569b8e0f5908bb48f145d276f_1440w_ht9nwm.png" alt></p><p>走到这一步的时候，我们无法继续找到增广路径了，此时就要扩大择偶范围</p><p><strong>第二步，最高标准调整。</strong></p><p>我们随便选择一条上面没走下去的交替路（由于没有成功找到另一个未匹配的对象，所以这条交替路没有资格被称为增广路）比如就选这条：</p><p>x4——y2——x3——y3———x1——y2——????</p><p>这条路线，在很多文章里也会被成为交替树。一旦找到增广路，我们就能扩大匹配范围，给x4也找到对象。但是现在失败了，这个失败的本质是和路线上的人发生了冲突。2</p><p>于是我们看看，有哪些人和x4的失败有关。女生：x1，x3，x4。男生：y2，y3。</p><p>现在我们要协调这几个人的择偶最高标准（也就是他们的顶标），扩大择偶范围了。</p><p>首先，我们不能破坏原有的关系，原来的顶标都是设计好的，能保证选到自己最喜欢的对象。所以要保证他们之间最高标准不变，这样保证原来的匹配不会发生变化。</p><p>这里让上面和x4冲突的这些人里：女生的顶标减少，男生顶标增加，这样他俩合起来标准不变。</p><p>但是，女生的顶标减小了，其他人的机会就来了。</p><p>再回到刚刚我们挑子图的公式，就是小王配小李的这个等式，</p><p>现在小王因为和别人冲突了，降低了标准，W就减小了，也就是有些权重没那么大的边，现在有机会被加进子图里了。</p><p>现在女生：x1，x3，x4都喜欢y2和y3，发生冲突了，而y1,y4,y5还没被他们考虑。原本x1的标准是5，现在她要考虑y1的话，x1y1权重是3，需要降低2个标准。</p><p>同理，x1y4需要降低1； x3y1需要降低2， x3y4需要降低4-1=3；x3y5需要降低4-0=4。x4也一样算法。</p><p>所以考虑到最大权重，最少要降低1个标准。</p><p>因此我们把x1，x3，x4的标准-1，y2，y3对应+1。</p><p><strong>在这个标准下，我们依旧要挑满足“两人顶标和=两人连线权重”的边。</strong></p><p>可以看出来，x4同学降低标准后，所有男同学都满足她的标准了。</p><p>此时我们就可以给这个图找到完美匹配了,</p><p><img src="https://pic3.zhimg.com/80/v2-51d28f52efd5d822280d3d0ba2540a9e_1440w.webp" alt></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇博客讲了二分图匹配的&lt;a href=&quot;https://sunra.top/2023/01/13/hungary-algorithm/&quot;&gt;匈牙利算法&lt;/a&gt;，但是匈牙利算法中的每个匹配边权重都是一样的，如果我们在匹配边权重不同的情况下得到最佳匹配，那么就需要用到KM算法。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>匈牙利算法</title>
    <link href="https://sunra.top/2023/01/13/hungary-algorithm/"/>
    <id>https://sunra.top/2023/01/13/hungary-algorithm/</id>
    <published>2023-01-13T14:12:06.000Z</published>
    <updated>2023-05-16T05:31:16.910Z</updated>
    
    <content type="html"><![CDATA[<p>接触到这个算法是因为看到了一个题目，叫做素数伴侣。就是说给你你串数字，从中选择两个数字相加，如果他们的和是个素数，那么这一对叫做素数伴侣。然后我们需要找到这串数字中最多能找到多少对素数伴侣。</p><p>这个问题的解法首先是把数字分为两部分，一部分是偶数，一部分是奇数，因为两个偶数相加或者两个奇数相加一定还是偶数，不可能是素数。</p><p>于是这个问题就变成了分别从偶数中选一个，然后从奇数中选一个，看看最多选出多少对相加为素数。这个问题就用到了匈牙利算法。</p><p>匈牙利算法主要用于解决一些与二分图匹配有关的问题，所以我们先来了解一下二分图。</p><a id="more"></a><h1 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h1><p>二分图：又称作二部图，是图论中的一种特殊模型。 设G=(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(A,B)，并且图中的每条边所关联的两个顶点i和j分别属于这两个不同的顶点集(i∈A, j∈B)，则称图G为一个二分图。</p><p>简单来说，如果图中所有顶点可以被分为两个集合，图中所有的边的头和尾不属于同一个顶点集合，而是跨越两个集合，则这个图是一个二分图。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917617/origin-of-ray/v2-81f21981c992bc0b5b1acf04b37ff6c2_r_tjxivp.png" alt></p><p>我们再看一下这个图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917884/origin-of-ray/screenshot-20230117-091101_x2bdmd.png" alt></p><p>这个图乍一看不像是二分图，但是我们转化一下他的样子，就会发现它其实还是一个二分图</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673917885/origin-of-ray/screenshot-20230117-091111_oj8vev.png" alt></p><h1 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h1><h2 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h2><p><strong>匹配</strong>：在图论中，一个匹配（matching）是指一个边的集合，其中任意两条边都没有公共顶点。</p><p><strong>最大匹配</strong>：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。</p><p><strong>完美匹配</strong>：如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。完美匹配一定是最大匹配（完美匹配的任何一个点都已经匹配，添加一条新的匹配边一定会与已有的匹配边冲突），但并非每个图都存在完美匹配。</p><p><strong>交替路径</strong>：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径称为交替路径。</p><p><strong>增广路径</strong>：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路（agumenting path）。</p><p><strong>增广路径性质</strong>：</p><ol><li>P的路径长度必定为奇数，第一条边和最后一条边都不属于M，因为两个端点分属两个集合，且未匹配。</li><li>P经过取反操作可以得到一个更大的匹配M’。</li><li>M为G的最大匹配当且仅当不存在相对于M的增广路径。</li></ol><h2 id="算法基本原理"><a href="#算法基本原理" class="headerlink" title="算法基本原理"></a>算法基本原理</h2><p>匈牙利算法：利用增广路径求二分图的最大匹配算法称作匈牙利算法。（匈牙利数学家Edmonds于1965年提出）。</p><p>基本思想：通过寻找增广路径，把增广路径中的匹配边和非匹配边的相互交换，这样就会多出一条匹配边，直到找不到增广路径为止。</p><blockquote><p>这里有一点要先确定好的是，这个过程是从已有边中找匹配边和非匹配边，不能创造新的边出来</p></blockquote><p>我们以上面最后一个图为例来讲解一下整个算法的过程：</p><ol><li>从顶点a出发，按照交替路径前进，第一个非匹配边为，到达顶点e，e为非匹配点，构成增广路径。令为匹配边，顶点a，e为匹配顶点。</li><li>从顶点b出发，第一非匹配边为，到达顶点e，选择匹配边，到达a，选择非匹配边，g为非匹配点，找到一条增广路径，交换增广路径中的匹配边与非匹配边，即b-e，a-g变为匹配边，a-e变为非匹配边。</li><li>从顶点c出发，第一非匹配边为，到达顶点e，然后按照交替路径前进，到达顶点b，无法继续前进，且b已经是匹配点了，所以没有找到新的增光路径</li><li>从顶点c出发，选择第二条非匹配边</li><li>从顶点d出发，选择非匹配边，到达顶点g，选择匹配边，到达顶点a，选择非匹配边到达顶点e，选择匹配边，到达顶部b，没有可以选择的边，且没有找到增广路径</li><li>继续从顶点d出发，选择非匹配边，找到增广路径，将边变为匹配边，算法结束。</li></ol><p>最终我们的得到的结果为下图，下图中的红色线就是通过算法得到的最大匹配了：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1673922535/origin-of-ray/screenshot-20230117-102841_rk6fvq.png" alt></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顶点、边的编号均从 0 开始</span></span><br><span class="line"><span class="comment">// 邻接表储存</span></span><br><span class="line"></span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> w):from(f), to(t), weight(w) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[__maxNodes]; <span class="comment">/* G[i] 存储顶点 i 出发的边的编号 */</span></span><br><span class="line">vector&lt;Edge&gt; edges;</span><br><span class="line">typedef vector&lt;<span class="keyword">int</span>&gt;::iterator iterator_t;</span><br><span class="line"><span class="keyword">int</span> num_nodes;</span><br><span class="line"><span class="keyword">int</span> num_left;</span><br><span class="line"><span class="keyword">int</span> num_right;</span><br><span class="line"><span class="keyword">int</span> num_edges;</span><br><span class="line"><span class="keyword">int</span> matching[__maxNodes]; <span class="comment">/* 存储求解结果 */</span></span><br><span class="line"><span class="keyword">int</span> check[__maxNodes];</span><br><span class="line"></span><br><span class="line"><span class="function">bool <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (iterator_t i = G[u].begin(); i != G[u].end(); ++i) &#123; <span class="comment">// 对 u 的每个邻接点</span></span><br><span class="line">        <span class="keyword">int</span> v = edges[*i].to;</span><br><span class="line">        <span class="keyword">if</span> (!check[v]) &#123;     <span class="comment">// 要求不在交替路中</span></span><br><span class="line">            check[v] = <span class="keyword">true</span>; <span class="comment">// 放入交替路</span></span><br><span class="line">            <span class="keyword">if</span> (matching[v] == -<span class="number">1</span> || dfs(matching[v])) &#123;</span><br><span class="line">                <span class="comment">// 如果是未盖点，说明交替路为增广路，则交换路径，并返回成功</span></span><br><span class="line">                matching[v] = u;</span><br><span class="line">                matching[u] = v;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 不存在增广路，返回失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    memset(matching, -<span class="number">1</span>, sizeof(matching));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">0</span>; u &lt; num_left; ++u) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matching[u] == -<span class="number">1</span>) &#123;</span><br><span class="line">            memset(check, <span class="number">0</span>, sizeof(check));</span><br><span class="line">            <span class="keyword">if</span> (dfs(u))</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="keyword">int</span> prev[__maxNodes];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    memset(matching, -<span class="number">1</span>, sizeof(matching));</span><br><span class="line">    memset(check, -<span class="number">1</span>, sizeof(check));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num_left; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matching[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">            Q.push(i);</span><br><span class="line">            prev[i] = -<span class="number">1</span>; <span class="comment">// 设 i 为路径起点</span></span><br><span class="line">            bool flag = <span class="keyword">false</span>; <span class="comment">// 尚未找到增广路</span></span><br><span class="line">            <span class="keyword">while</span> (!Q.empty() &amp;&amp; !flag) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = Q.front();</span><br><span class="line">                <span class="keyword">for</span> (iterator_t ix = G[u].begin(); ix != G[u].end() &amp;&amp; !flag; ++ix) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = edges[*ix].to;</span><br><span class="line">                    <span class="keyword">if</span> (check[v] != i) &#123;</span><br><span class="line">                        check[v] = i;</span><br><span class="line">                        Q.push(matching[v]);</span><br><span class="line">                        <span class="keyword">if</span> (matching[v] &gt;= <span class="number">0</span>) &#123; <span class="comment">// 此点为匹配点</span></span><br><span class="line">                            prev[matching[v]] = u;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 找到未匹配点，交替路变为增广路</span></span><br><span class="line">                            flag = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">int</span> d=u, e=v;</span><br><span class="line">                            <span class="keyword">while</span> (d != -<span class="number">1</span>) &#123;</span><br><span class="line">                                <span class="keyword">int</span> t = matching[d];</span><br><span class="line">                                matching[d] = e;</span><br><span class="line">                                matching[e] = d;</span><br><span class="line">                                d = prev[d];</span><br><span class="line">                                e = t;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (matching[i] != -<span class="number">1</span>) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://www.cxyxiaowu.com/874.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cxyxiaowu.com/874.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接触到这个算法是因为看到了一个题目，叫做素数伴侣。就是说给你你串数字，从中选择两个数字相加，如果他们的和是个素数，那么这一对叫做素数伴侣。然后我们需要找到这串数字中最多能找到多少对素数伴侣。&lt;/p&gt;
&lt;p&gt;这个问题的解法首先是把数字分为两部分，一部分是偶数，一部分是奇数，因为两个偶数相加或者两个奇数相加一定还是偶数，不可能是素数。&lt;/p&gt;
&lt;p&gt;于是这个问题就变成了分别从偶数中选一个，然后从奇数中选一个，看看最多选出多少对相加为素数。这个问题就用到了匈牙利算法。&lt;/p&gt;
&lt;p&gt;匈牙利算法主要用于解决一些与二分图匹配有关的问题，所以我们先来了解一下二分图。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
</feed>
