<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>一起探索互联网的秘密</subtitle>
  <link href="https://sunra.top/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/"/>
  <updated>2024-03-31T02:08:01.283Z</updated>
  <id>https://sunra.top/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Eva+MatterJS实现一个2D版推金币Demo</title>
    <link href="https://sunra.top/posts/318bdcbc/"/>
    <id>https://sunra.top/posts/318bdcbc/</id>
    <published>2024-03-31T01:46:36.000Z</published>
    <updated>2024-03-31T02:08:01.283Z</updated>
    
    <content type="html"><![CDATA[<p>最近拼多多的推金币比较火，就尝试想用一下2D的游戏引擎试一下效果，做了一个简单的Demo。</p><p>引擎选择的是Eva，采用这个引擎是因为它基于ECS的微内核架构，让扩展非常方便，同时也提供了几个官方的插件，足以支持大部分需求，它的渲染引擎插件是基于PixiJS，物理引擎插件是基于MatterJS，它的插件所依赖的版本比较低了，对于我来说还够用，如果有需要完全可以自己实现。</p><span id="more"></span><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ol><li>下载官方的demo仓库：<a href="https://github.com/eva-engine/start-demo">https://github.com/eva-engine/start-demo</a></li><li>网上随便找一个金币的图片和推板的图片</li></ol><h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><h2 id="资源依赖"><a href="#资源依赖" class="headerlink" title="资源依赖"></a>资源依赖</h2><p>首先是需要将金币和推板的图片资源定义好。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">RESOURCE_TYPE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@eva/eva.js&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;coin&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">RESOURCE_TYPE</span>.<span class="property">IMAGE</span>,</span><br><span class="line">    <span class="attr">src</span>: &#123;</span><br><span class="line">      <span class="attr">image</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;./statics/coin.png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">preload</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;pusher&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">RESOURCE_TYPE</span>.<span class="property">IMAGE</span>,</span><br><span class="line">    <span class="attr">src</span>: &#123;</span><br><span class="line">      <span class="attr">image</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;./statics/pusher.png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">preload</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后通过resource加载资源</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Game</span>, <span class="title class_">GameObject</span>, resource &#125; <span class="keyword">from</span> <span class="string">&#x27;@eva/eva.js&#x27;</span>;</span><br><span class="line">resource.<span class="title function_">addResource</span>(resources);</span><br></pre></td></tr></table></figure><h2 id="创建金币和推板"><a href="#创建金币和推板" class="headerlink" title="创建金币和推板"></a>创建金币和推板</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GameObject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@eva/eva.js&quot;</span>;</span><br><span class="line"><span class="comment">// import &#123; Physics, PhysicsType &#125; from &quot;../matter/plugin&quot;;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Physics</span>, <span class="title class_">PhysicsType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@eva/plugin-matterjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Img</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@eva/plugin-renderer-img&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Move</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../../src/components/move&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createCoin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> coin = <span class="keyword">new</span> <span class="title class_">GameObject</span>(<span class="string">&#x27;coin&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">size</span>: &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">60</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">position</span>: &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">75</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">300</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">300</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">300</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">origin</span>: &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">0.5</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 4.给游戏对象添加Componet</span></span><br><span class="line">  <span class="keyword">const</span> physics = coin.<span class="title function_">addComponent</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Physics</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">PhysicsType</span>.<span class="property">CIRCLE</span>,</span><br><span class="line">      <span class="attr">radius</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">bodyOptions</span>: &#123;</span><br><span class="line">        <span class="attr">isStatic</span>: <span class="literal">false</span>, <span class="comment">// 物体是否静止，静止状态下任何作用力作用于物体都不会产生效果</span></span><br><span class="line">        <span class="attr">restitution</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">friction</span>: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  coin.<span class="title function_">addComponent</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Img</span>(&#123;</span><br><span class="line">        <span class="attr">resource</span>: <span class="string">&#x27;coin&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  <span class="comment">//目前支持的碰撞事件 collisionStart  collisionActive  collisionEnd</span></span><br><span class="line">  <span class="comment">//刚体事件 tick,beforeUpdate,afterUpdate,beforeRender,afterRender,afterTick 通常使用beforeUpdate和afterUpdate即可</span></span><br><span class="line">  physics.<span class="title function_">on</span>(<span class="string">&#x27;collisionStart&#x27;</span>, <span class="function">(<span class="params">gameObject1, gameObject2</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> coin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPusher</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pusher = <span class="keyword">new</span> <span class="title class_">GameObject</span>(<span class="string">&#x27;pusher&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">size</span>: &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">200</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">position</span>: &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">400</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">origin</span>: &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">0.5</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 4.给游戏对象添加Componet</span></span><br><span class="line">  <span class="keyword">const</span> physics = pusher.<span class="title function_">addComponent</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Physics</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">PhysicsType</span>.<span class="property">RECTANGLE</span>,</span><br><span class="line">      <span class="attr">bodyOptions</span>: &#123;</span><br><span class="line">        <span class="attr">isStatic</span>: <span class="literal">true</span>, <span class="comment">// 物体是否静止，静止状态下任何作用力作用于物体都不会产生效</span></span><br><span class="line">        <span class="attr">restitution</span>: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  pusher.<span class="title function_">addComponent</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Img</span>(&#123;</span><br><span class="line">        <span class="attr">resource</span>: <span class="string">&#x27;pusher&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  pusher.<span class="title function_">addComponent</span>(<span class="keyword">new</span> <span class="title class_">Move</span>())</span><br><span class="line">  <span class="comment">//目前支持的碰撞事件 collisionStart  collisionActive  collisionEnd</span></span><br><span class="line">  <span class="comment">//刚体事件 tick,beforeUpdate,afterUpdate,beforeRender,afterRender,afterTick 通常使用beforeUpdate和afterUpdate即可</span></span><br><span class="line">  <span class="comment">// physics.on(&#x27;collisionStart&#x27;, (gameObject1, gameObject2) =&gt; &#123;&#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pusher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为推板创建Component来实现来回移动"><a href="#为推板创建Component来实现来回移动" class="headerlink" title="为推板创建Component来实现来回移动"></a>为推板创建Component来实现来回移动</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">UpdateParams</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@eva/eva.js&#x27;</span></span><br><span class="line"><span class="comment">// import &#123; Physics &#125; from &#x27;../matter/plugin&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Physics</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@eva/plugin-matterjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Matter</span> <span class="keyword">from</span> <span class="string">&#x27;matter-js&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Move</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> componentName = <span class="string">&#x27;Move&#x27;</span></span><br><span class="line">  speed = &#123;</span><br><span class="line">    <span class="comment">// 设置属性</span></span><br><span class="line">    <span class="comment">// 移动速度</span></span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">  direction = <span class="number">1</span>;</span><br><span class="line">  maxY = <span class="number">500</span>;</span><br><span class="line">  minY = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = <span class="variable language_">this</span>.<span class="property">gameObject</span>.<span class="property">transform</span>.<span class="property">position</span>.<span class="property">x</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">e: UpdateParams</span>) &#123;</span><br><span class="line">    <span class="comment">// 让物体按照一定速度移动 位移 = 速度 * 时间</span></span><br><span class="line">    <span class="comment">// this.gameObject.transform.position.x -= this.speed.x * (e.deltaTime / 1000)</span></span><br><span class="line">    <span class="keyword">const</span> body = <span class="variable language_">this</span>.<span class="property">gameObject</span>.<span class="title function_">getComponent</span>(<span class="title class_">Physics</span>).<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">const</span> y = body.<span class="property">position</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">direction</span> * <span class="variable language_">this</span>.<span class="property">speed</span>.<span class="property">y</span> * (e.<span class="property">deltaTime</span> / <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">if</span> (y &gt; <span class="variable language_">this</span>.<span class="property">maxY</span>) &#123;</span><br><span class="line">      <span class="title class_">Matter</span>.<span class="property">Body</span>.<span class="title function_">setPosition</span>(body, &#123; <span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">x</span>, <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">maxY</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; <span class="variable language_">this</span>.<span class="property">minY</span>) &#123;</span><br><span class="line">      <span class="title class_">Matter</span>.<span class="property">Body</span>.<span class="title function_">setPosition</span>(body, &#123; <span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">x</span>, <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">minY</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">Matter</span>.<span class="property">Body</span>.<span class="title function_">setPosition</span>(body, &#123; <span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">x</span>, y &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.gameObject.transform.position.y += this.direction * this.speed.y * (e.deltaTime / 1000)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(this.gameObject.transform.position.y, this.direction * this.speed.y * (e.deltaTime / 1000))</span></span><br><span class="line">    <span class="keyword">if</span>(y &gt;= <span class="variable language_">this</span>.<span class="property">maxY</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">direction</span> = -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(y &lt;= <span class="variable language_">this</span>.<span class="property">minY</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">direction</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意的是，要通过修改推板的MatterBody来移动，直接修改gameObject.transform是无效的，因为在我们的推板还有物理引擎，在物理引擎中，Pysics组件的update函数中有一段代码是将当前的transform变为body的position</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">body</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">gameObject</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gameObject</span>.<span class="property">transform</span>.<span class="property">anchor</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gameObject</span>.<span class="property">transform</span>.<span class="property">anchor</span>.<span class="property">y</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gameObject</span>.<span class="property">transform</span>.<span class="property">position</span>.<span class="property">x</span> = <span class="variable language_">this</span>.<span class="property">body</span>.<span class="property">position</span>.<span class="property">x</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gameObject</span>.<span class="property">transform</span>.<span class="property">position</span>.<span class="property">y</span> = <span class="variable language_">this</span>.<span class="property">body</span>.<span class="property">position</span>.<span class="property">y</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">bodyParams</span>.<span class="property">stopRotation</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gameObject</span>.<span class="property">transform</span>.<span class="property">rotation</span> = <span class="variable language_">this</span>.<span class="property">body</span>.<span class="property">angle</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="游戏启动代码"><a href="#游戏启动代码" class="headerlink" title="游戏启动代码"></a>游戏启动代码</h2><p>接下来就是定义如何启动</p><p>这里会将游戏渲染到 id 为’canvas’的canvas组件上，该组件是在index.html中已经定好的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> game = <span class="keyword">new</span> <span class="title class_">Game</span>(&#123;</span><br><span class="line">    <span class="attr">systems</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">RendererSystem</span>(&#123;</span><br><span class="line">          <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">canvas</span>: <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#canvas&#x27;</span>),</span><br><span class="line">          <span class="attr">backgroundColor</span>: <span class="number">0x00000000</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">750</span>,</span><br><span class="line">          <span class="attr">height</span>: <span class="number">1000</span>,</span><br><span class="line">          <span class="attr">resolution</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">PhysicsSystem</span>(&#123;</span><br><span class="line">          <span class="attr">resolution</span>: <span class="number">1</span>, <span class="comment">// 保持RendererSystem的resolution一致</span></span><br><span class="line">          <span class="comment">// isTest: true, // 是否开启调试模式</span></span><br><span class="line">          <span class="comment">// canvas: document.getElementById(&#x27;game-container&#x27;), // 调试模式下canvas节点的挂载点</span></span><br><span class="line">          <span class="attr">world</span>: &#123;</span><br><span class="line">            <span class="attr">gravity</span>: &#123;</span><br><span class="line">              <span class="attr">y</span>: <span class="number">0</span>, <span class="comment">// 重力</span></span><br><span class="line">              <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ImgSystem</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TransitionSystem</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">SpriteAnimationSystem</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">RenderSystem</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">EventSystem</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">GraphicsSystem</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TextSystem</span>(),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  game.<span class="property">scene</span>.<span class="property">transform</span>.<span class="property">size</span>.<span class="property">width</span> = <span class="number">750</span>;</span><br><span class="line">  game.<span class="property">scene</span>.<span class="property">transform</span>.<span class="property">size</span>.<span class="property">height</span> = <span class="number">1484</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// game.scene.addChild(createBackground());</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    game.<span class="property">scene</span>.<span class="title function_">addChild</span>(<span class="title function_">createCoin</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  game.<span class="property">scene</span>.<span class="title function_">addChild</span>(<span class="title function_">createPusher</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">startGame</span>()</span><br></pre></td></tr></table></figure><h1 id="调试小技巧"><a href="#调试小技巧" class="headerlink" title="调试小技巧"></a>调试小技巧</h1><p>我在实现了上述代码的时候，发现碰撞效果和渲染效果并不完全一致，猜测是碰撞体和渲染的图片并不是完全重合的，所以要想办法将碰撞体渲染出来并重叠在图片上，比对二者是否完全重合，具体步骤如下：</p><p>在index.html文件中，创建一个新的canvas用于渲染matterJS的碰撞体，将其position设置为absolute，定位在左上角，同时z-index为1，这样碰撞体的渲染就正好改在了pixijs的渲染效果上了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.nice</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>:center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">58</span>, <span class="number">58</span>, <span class="number">58</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">58</span>, <span class="number">58</span>, <span class="number">58</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;750&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;750&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">id</span>=<span class="string">&quot;game-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; position: absolute; top: 0; left: 0; z-index: 1; background: 0% 0% / contain rgba(20, 21, 31, 0);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcdn.net/ajax/libs/eventemitter3/3.1.2/index.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后开启eva matterjs插件的test模式，并将canvas设置为我们在index.html创建的canvas</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">PhysicsSystem</span>(&#123;</span><br><span class="line">  <span class="attr">resolution</span>: <span class="number">1</span>, <span class="comment">// 保持RendererSystem的resolution一致</span></span><br><span class="line">  <span class="attr">isTest</span>: <span class="literal">true</span>, <span class="comment">// 是否开启调试模式</span></span><br><span class="line">  <span class="attr">canvas</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;game-container&#x27;</span>), <span class="comment">// 调试模式下canvas节点的挂载点</span></span><br><span class="line">  <span class="attr">world</span>: &#123;</span><br><span class="line">    <span class="attr">gravity</span>: &#123;</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0</span>, <span class="comment">// 重力</span></span><br><span class="line">      <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近拼多多的推金币比较火，就尝试想用一下2D的游戏引擎试一下效果，做了一个简单的Demo。&lt;/p&gt;
&lt;p&gt;引擎选择的是Eva，采用这个引擎是因为它基于ECS的微内核架构，让扩展非常方便，同时也提供了几个官方的插件，足以支持大部分需求，它的渲染引擎插件是基于PixiJS，物理引擎插件是基于MatterJS，它的插件所依赖的版本比较低了，对于我来说还够用，如果有需要完全可以自己实现。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Floyd-Warshall 多源最短路径算法</title>
    <link href="https://sunra.top/posts/b4b34198/"/>
    <id>https://sunra.top/posts/b4b34198/</id>
    <published>2024-02-07T06:37:53.000Z</published>
    <updated>2024-03-31T02:07:10.463Z</updated>
    
    <content type="html"><![CDATA[<p>单源最短路径算法和多源最短路径算法的区别在于它们解决的问题不同。</p><p>单源最短路径算法是指在给定一个起点，计算该起点到图中其他所有顶点的最短路径。其中最著名的算法是Dijkstra算法和Bellman-Ford算法。Dijkstra算法适用于有向图中没有负权边的情况，而Bellman-Ford算法可以处理有负权边的情况。</p><p>多源最短路径算法是指计算图中任意两个顶点之间的最短路径。其中最著名的算法是Floyd-Warshall算法。Floyd-Warshall算法通过动态规划的方式计算任意两个顶点之间的最短路径，可以处理有向图和负权边的情况。</p><p>总结起来，单源最短路径算法解决的是从一个起点到其他所有顶点的最短路径问题，而多源最短路径算法解决的是任意两个顶点之间的最短路径问题。</p><span id="more"></span><p>我们之前的博客介绍过Dijkstra算法，这次主要是记录下Floyd算法。</p><h1 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h1><p>Floyd-Warshall 算法使用一种不同的动态规划公式来解决所有结点对最短路径问题，运行时间为$O(n^3)$，图上可以存在负权重的边，但是不存在负权重的环。</p><p>Floyd 算法考虑的是一条最短路径上的中间结点。</p><p>中间节点：简单路径$p = <v_1, v_2, ..., v_l>$上的中间节点指的是路径p上除了$v<em>1$和$v_l$之外的任意节点，也就是集合${v_2,v_3,…v</em>{l-1}}$中的结点。</p><p>假定图G中所有节点为V={1,2,3,4…,n}，考虑其中一个子集${1，2，3，…，k}$，对于任意节点对 $i,j \in V$，考虑从i到j的所有中间节点均取自于集合${1,2,3,…k}$的那些路径，并设p为其中权重最小的路径。我们分别考虑k是否是路径p上一个中间节点的情况</p><blockquote><p><strong>注意：这里k的含义是路径中所有节点中的序号中最大的</strong></p></blockquote><ul><li>如果k不是p上的中间节点，则p上所有中间节点都属于集合{1,2,3,…k-1}。因此，从i到j且中间节点均取自于{1,2,3…,k-1}的一条最短路径同时也是从i到j且中间节点均取自于{1,2,3,…,k}的一条最短路径</li><li>如果节点k是路径p上的中间节点，则将路径p分解成$p_1 : i \rightarrow k$和$p_2: k \rightarrow j$。可得 $p_1$是从结点 i到结点 k 的，中间结点全部取自集合 {1，2，3，… k - 1}的一条最短路径（因为 k 是末尾结点）。类似的， $p_2$是从结点 k到结点 j的，中间结点全部取自集合 {1，2，3，… k - 1}的一条最短路径。</li></ul><p>我们假设$d_{ij}^{k}$是从节点i到节点j的所有中间节点全部取自${1,2,3,…,k}$的最短路径权重。k=0时，意味着路径只有一条边构成，也就是i直接到j的距离。</p><p>根据以上定义，我们可以递归定义：</p><script type="math/tex; mode=display">d_{ij}^k = \begin{cases}  w_{ij} & k=0 \\  min(d_{ij}^{k-1}, d_{ik}^{k-1} + d_{kj}^{k-1})\end{cases}</script><p>我们可以自底向上计算最短路径的权重，算法输入为n*n的矩阵W，输出最短路径权重矩阵$D^n$，伪代码如下：</p><p><img src="https://kingworker.cn/resources/blog/floyd/1.webp" alt=""></p><h1 id="算法源码"><a href="#算法源码" class="headerlink" title="算法源码"></a>算法源码</h1><p>用js简单实现一个floyd算法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">floydWarshall</span>(<span class="params">graph</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = graph.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> dist = <span class="title class_">Array</span>(n)</span><br><span class="line">    .<span class="title function_">fill</span>()</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="title class_">Infinity</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化距离矩阵</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === j) &#123;</span><br><span class="line">        dist[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (graph[i][j] !== <span class="number">0</span>) &#123;</span><br><span class="line">        dist[i][j] = graph[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算最短路径</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dist[i][k] + dist[k][j] &lt; dist[i][j]) &#123;</span><br><span class="line">          dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例图</span></span><br><span class="line"><span class="keyword">const</span> graph = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">5</span>, <span class="title class_">Infinity</span>, <span class="number">10</span>],</span><br><span class="line">  [<span class="title class_">Infinity</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="title class_">Infinity</span>],</span><br><span class="line">  [<span class="title class_">Infinity</span>, <span class="title class_">Infinity</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="title class_">Infinity</span>, <span class="title class_">Infinity</span>, <span class="title class_">Infinity</span>, <span class="number">0</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shortestPaths = <span class="title function_">floydWarshall</span>(graph);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shortestPaths);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从这个算法的具体实现中，我们可以看出，最重要的部分就是计算最短路径的三层嵌套循环，而且我们需要注意，我们的递推矩阵是二维的。</p><p>我们可以这样理解这个三层的嵌套循环，最外层的k表示当前可以用到的序号最大的点的序号，在此基础上内层的双层循环更新整个最短路径矩阵，然后利用k=n时的最短路径矩阵去递推k=n+1时的最短路径矩阵。</p><h1 id="如果增加一条边，如何更新最短路径矩阵"><a href="#如果增加一条边，如何更新最短路径矩阵" class="headerlink" title="如果增加一条边，如何更新最短路径矩阵"></a>如果增加一条边，如何更新最短路径矩阵</h1><p>现在我们已经构建好了最短路径矩阵，如果这个时候我们要增加一条边，我们如果更新整个最短路径矩阵呢？是否需要重新走一遍刚才的流程？</p><p>答案是否定的。</p><p>假设我们增加一条从x到y权重为w的边，我们可以通过以下方式来更新最短路径矩阵D：</p><ol><li>w是否小于$D[x][y]$，如果$w \ge D[x][y]$，那么整个矩阵都不需要更新</li><li>如果$w \lt D[x][y]$，那么只需要遍历最短路径矩阵D中的每一项，比较$D[i][j]$与$D[i][x] + w + D[y][j]$的大小，选择其中小的一项作为矩阵中的新值</li></ol><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">n, edges</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">INF</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> / <span class="number">3</span>); <span class="comment">// 防止更新最短路时加法溢出</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">d</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="literal">null</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="variable language_">this</span>.<span class="property">INF</span>)); <span class="comment">// 邻接矩阵（初始化为无穷大，表示 i 到 j 没有边）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">d</span>[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">of</span> edges) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">d</span>[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = e[<span class="number">2</span>]; <span class="comment">// 添加一条边（输入保证没有重边和自环）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">d</span>[i][j] = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">d</span>[i][j], <span class="variable language_">this</span>.<span class="property">d</span>[i][k] + <span class="variable language_">this</span>.<span class="property">d</span>[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addEdge</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> x = e[<span class="number">0</span>], y = e[<span class="number">1</span>], w = e[<span class="number">2</span>], n = <span class="variable language_">this</span>.<span class="property">d</span>.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">if</span> (w &gt;= <span class="variable language_">this</span>.<span class="property">d</span>[x][y]) &#123; <span class="comment">// 无需更新</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">d</span>[i][j] = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">d</span>[i][j], <span class="variable language_">this</span>.<span class="property">d</span>[i][x] + w + <span class="variable language_">this</span>.<span class="property">d</span>[y][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">shortestPath</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ans = <span class="variable language_">this</span>.<span class="property">d</span>[start][end];</span><br><span class="line">        <span class="keyword">return</span> ans &lt; <span class="variable language_">this</span>.<span class="property">INF</span> / <span class="number">3</span> ? ans : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;单源最短路径算法和多源最短路径算法的区别在于它们解决的问题不同。&lt;/p&gt;
&lt;p&gt;单源最短路径算法是指在给定一个起点，计算该起点到图中其他所有顶点的最短路径。其中最著名的算法是Dijkstra算法和Bellman-Ford算法。Dijkstra算法适用于有向图中没有负权边的情况，而Bellman-Ford算法可以处理有负权边的情况。&lt;/p&gt;
&lt;p&gt;多源最短路径算法是指计算图中任意两个顶点之间的最短路径。其中最著名的算法是Floyd-Warshall算法。Floyd-Warshall算法通过动态规划的方式计算任意两个顶点之间的最短路径，可以处理有向图和负权边的情况。&lt;/p&gt;
&lt;p&gt;总结起来，单源最短路径算法解决的是从一个起点到其他所有顶点的最短路径问题，而多源最短路径算法解决的是任意两个顶点之间的最短路径问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Bellman-Ford算法</title>
    <link href="https://sunra.top/posts/3742c510/"/>
    <id>https://sunra.top/posts/3742c510/</id>
    <published>2024-02-04T08:13:23.000Z</published>
    <updated>2024-03-31T02:07:10.459Z</updated>
    
    <content type="html"><![CDATA[<p>贝尔曼-福特算法(Bellman–Ford algorithm )用于计算出起点到各个节点的最短距离，是一种单源最短路径算法，支持存在负权重的情况</p><span id="more"></span><h1 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h1><ul><li><p>它的原理是对图进行最多V-1次松弛操作，得到所有可能的最短路径。其优于迪科斯彻算法的方面是边的权值可以为负数、实现简单，缺点是时间复杂度过高，高达O(VE)。但算法可以进行若干种优化，提高了效率。</p></li><li><p>Bellman Ford算法每次对所有的边进行松弛，每次松弛都会得到一条最短路径，所以总共需要要做的松弛操作是V - 1次。在完成这么多次松弛后如果还是可以松弛的话，那么就意味着，其中包含负环。</p></li></ul><ul><li>相比狄克斯特拉算法(Dijkstra algorithm),其最大优点便是Bellman–Ford支持存在负权重的情况，并且代码实现相对简单。缺点便是时间复杂度较高，达到O(V*E)，V代表顶点数，E代表边数。</li></ul><p>可用于解决以下问题：</p><ul><li>从A出发是否存在到达各个节点的路径(有计算出值当然就可以到达)；</li><li>从A出发到达各个节点最短路径(时间最少、或者路径最少等)</li><li>图中是否存在负环路（权重之和为负数）</li></ul><p>其思路为：</p><ol><li><p>初始化时将起点s到各个顶点v的距离dist(s-&gt;v)赋值为∞，dist(s-&gt;s)赋值为0</p></li><li><p>后续进行最多n-1次遍历操作,对所有的边进行松弛操作,假设:</p></li></ol><blockquote><p>所谓的松弛，以边ab为例，若dist(a)代表起点s到达a点所需要花费的总数，dist(b)代表起点s到达b点所需要花费的总数,weight(ab)代表边ab的权重，若存在:(dist(a) +weight(ab)) &lt; dist(b)则说明存在到b的更短的路径,s-&gt;…-&gt;a-&gt;b,更新b点的总花费为(dist(a) +weight(ab))，父节点为a</p></blockquote><ol><li>遍历都结束后，若再进行一次遍历，还能得到s到某些节点更短的路径的话，则说明存在负环路</li></ol><p>思路上与狄克斯特拉算法(Dijkstra algorithm)最大的不同是每次都是从源点s重新出发进行”松弛”更新操作，而Dijkstra则是从源点出发向外扩逐个处理相邻的节点，不会去重复处理节点，这边也可以看出Dijkstra效率相对更高点。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vertices, edges</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span> = vertices;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">edges</span> = edges;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initialize</span>(<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> distances = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      distances[<span class="variable language_">this</span>.<span class="property">vertices</span>[i]] = <span class="title class_">Infinity</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    distances[source] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distances;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">relax</span>(<span class="params">u, v, weight, distances</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (distances[u] !== <span class="title class_">Infinity</span> &amp;&amp; distances[u] + weight &lt; distances[v]) &#123;</span><br><span class="line">      distances[v] = distances[u] + weight;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">bellmanFord</span>(<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> distances = <span class="variable language_">this</span>.<span class="title function_">initialize</span>(source);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">this</span>.<span class="property">edges</span>.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; u, v, weight &#125; = <span class="variable language_">this</span>.<span class="property">edges</span>[j];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">relax</span>(u, v, weight, distances);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">edges</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; u, v, weight &#125; = <span class="variable language_">this</span>.<span class="property">edges</span>[i];</span><br><span class="line">      <span class="keyword">if</span> (distances[u] !== <span class="title class_">Infinity</span> &amp;&amp; distances[u] + weight &lt; distances[v]) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Negative weight cycle detected&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(distances);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="keyword">const</span> vertices = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> edges = [</span><br><span class="line">  &#123; <span class="attr">u</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">v</span>: <span class="string">&quot;B&quot;</span>, <span class="attr">weight</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">u</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">v</span>: <span class="string">&quot;C&quot;</span>, <span class="attr">weight</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">u</span>: <span class="string">&quot;B&quot;</span>, <span class="attr">v</span>: <span class="string">&quot;C&quot;</span>, <span class="attr">weight</span>: -<span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">u</span>: <span class="string">&quot;B&quot;</span>, <span class="attr">v</span>: <span class="string">&quot;D&quot;</span>, <span class="attr">weight</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">u</span>: <span class="string">&quot;D&quot;</span>, <span class="attr">v</span>: <span class="string">&quot;E&quot;</span>, <span class="attr">weight</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">u</span>: <span class="string">&quot;E&quot;</span>, <span class="attr">v</span>: <span class="string">&quot;D&quot;</span>, <span class="attr">weight</span>: -<span class="number">2</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> <span class="title class_">Graph</span>(vertices, edges);</span><br><span class="line">graph.<span class="title function_">bellmanFord</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;贝尔曼-福特算法(Bellman–Ford algorithm )用于计算出起点到各个节点的最短距离，是一种单源最短路径算法，支持存在负权重的情况&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>计算二叉树堂兄弟节点的和</title>
    <link href="https://sunra.top/posts/2d31523a/"/>
    <id>https://sunra.top/posts/2d31523a/</id>
    <published>2024-01-28T02:49:25.000Z</published>
    <updated>2024-03-31T02:07:10.471Z</updated>
    
    <content type="html"><![CDATA[<p>这是一道leetcode的中等难度的题目，代码不算复杂，但还是有一点可以记录下来举一反三。</p><span id="more"></span><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>题目链接：<a href="https://leetcode.cn/problems/cousins-in-binary-tree-ii/description/">https://leetcode.cn/problems/cousins-in-binary-tree-ii/description/</a></p><p>给你一棵二叉树的根 root ，请你将每个节点的值替换成该节点的所有 堂兄弟节点值的和 。</p><p>如果两个节点在树中有相同的深度且它们的父节点不同，那么它们互为 堂兄弟 。</p><p>请你返回修改值之后，树的根 root 。</p><p>注意，一个节点的深度指的是从树根节点到这个节点经过的边数。</p><h1 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h1><p>所谓堂兄弟，就是同层的非兄弟节点。</p><p>我们的第一步就是要想个办法，筛选出所谓的堂兄弟节点，要做到这一点，要做到两点：</p><ul><li>首先是要知道所有的当前节点的同层节点，我们可以用广度优先遍历的改进版，也就是层序遍历，每次遍历一层</li><li>其次知道谁是当前节点的兄弟节点，而只有当前节点的父节点知道当前节点的的兄弟节点是谁</li></ul><p>所以二者结合起来，就是：</p><ul><li>使用层序遍历，每次在遍历第n层的时候，通过第一次遍历第n层节点的所有子节点的方式去收集所有第n+1层的节点，同时计算n+1层所有节点的和，假设为sum</li><li>然后再次遍历第n层结点的每一个子节点，这次对于每一个子节点，更新它的值为sum减去，其父节点所有子节点的和</li></ul><p>最后需要补充一点，因为每次遍历第n层的时候，更新的是第n+1层的节点，所以根节点没有办法 被更新，有两种处理方式：一种是，直接将根节点的值变为0，因为他没有堂兄弟节点；第二种方式，加一个哨兵节点dummy，将dummy的左子节点指向root，然后从dummy开始进行层序遍历，最后返回dummu.left即可</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">TreeNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> replaceValueInTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dummy = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>, root);</span><br><span class="line">    <span class="keyword">const</span> q = [dummy];</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> q2 = [];</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> fa <span class="keyword">of</span> q) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fa.<span class="property">left</span>) &#123;</span><br><span class="line">                q2.<span class="title function_">push</span>(fa.<span class="property">left</span>);</span><br><span class="line">                sum += fa.<span class="property">left</span>.<span class="property">val</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fa.<span class="property">right</span>) &#123;</span><br><span class="line">                q2.<span class="title function_">push</span>(fa.<span class="property">right</span>);</span><br><span class="line">                sum += fa.<span class="property">right</span>.<span class="property">val</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> fa <span class="keyword">of</span> q) &#123;</span><br><span class="line">            <span class="keyword">const</span> child_sum = (fa.<span class="property">left</span> ? fa.<span class="property">left</span>.<span class="property">val</span> : <span class="number">0</span>) + (fa.<span class="property">right</span> ? fa.<span class="property">right</span>.<span class="property">val</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fa.<span class="property">left</span>) &#123;</span><br><span class="line">                fa.<span class="property">left</span>.<span class="property">val</span> = sum - child_sum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fa.<span class="property">right</span>) &#123;</span><br><span class="line">                fa.<span class="property">right</span>.<span class="property">val</span> = sum - child_sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">        q.<span class="title function_">push</span>(...q2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">left</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一道leetcode的中等难度的题目，代码不算复杂，但还是有一点可以记录下来举一反三。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>贪心算法：不要同时贪多个维度</title>
    <link href="https://sunra.top/posts/b3a0c7a8/"/>
    <id>https://sunra.top/posts/b3a0c7a8/</id>
    <published>2024-01-21T08:39:32.000Z</published>
    <updated>2024-03-31T02:08:01.287Z</updated>
    
    <content type="html"><![CDATA[<p>最近在通过《代码随想录》训练关于贪心算法方面的题目，有了一个新的心得体会，在这里摘抄一下，就是，如果一道题目有多个维度，<strong>那先不要上来就尝试在多个维度同时做贪心</strong>，那大概率会让给自己的思路陷入混乱。</p><span id="more"></span><h1 id="分发糖果"><a href="#分发糖果" class="headerlink" title="分发糖果"></a>分发糖果</h1><p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p><p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p><p>每个孩子至少分配到 1 个糖果。<br>相邻的孩子中，评分高的孩子必须获得更多的糖果。<br>那么这样下来，老师至少需要准备多少颗糖果呢？</p><p>示例 1:</p><p>输入: [1,0,2]<br>输出: 5<br>解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。</p><p><strong>这道题目一定是要确定一边之后，再确定另一边，例如比较每一个孩子的左边，然后再比较右边，如果两边一起考虑一定会顾此失彼</strong>。</p><p>先确定右边评分大于左边的情况（也就是从前向后遍历）</p><p>此时局部最优：只要右边评分比左边大，右边的孩子就多一个糖果，全局最优：相邻的孩子中，评分高的右孩子获得比左边孩子更多的糖果</p><p>局部最优可以推出全局最优。</p><p>如果ratings[i] &gt; ratings[i - 1] 那么[i]的糖 一定要比[i - 1]的糖多一个，所以贪心：candyVec[i] = candyVec[i - 1] + 1</p><p>再确定左孩子大于右孩子的情况（从后向前遍历）</p><p>如果 ratings[i] &gt; ratings[i + 1]，此时candyVec[i]（第i个小孩的糖果数量）就有两个选择了，一个是candyVec[i + 1] + 1（从右边这个加1得到的糖果数量），一个是candyVec[i]（之前比较右孩子大于左孩子得到的糖果数量）。</p><p>那么又要贪心了，局部最优：取candyVec[i + 1] + 1 和 candyVec[i] 最大的糖果数量，保证第i个小孩的糖果数量既大于左边的也大于右边的。全局最优：相邻的孩子中，评分高的孩子获得更多的糖果。</p><p>局部最优可以推出全局最优。</p><p>所以就取candyVec[i + 1] + 1 和 candyVec[i] 最大的糖果数量，candyVec[i]只有取最大的才能既保持对左边candyVec[i - 1]的糖果多，也比右边candyVec[i + 1]的糖果多。</p><h1 id="根据身高重建队列"><a href="#根据身高重建队列" class="headerlink" title="根据身高重建队列"></a>根据身高重建队列</h1><p>假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。</p><p>请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。</p><p>示例 1：</p><p>输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</p><p>输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</p><p>解释：</p><ul><li>编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。</li><li>编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。</li><li>编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。</li><li>编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</li><li>编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。</li><li>编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</li></ul><p>因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。</p><p>对于本题相信大家困惑的点是先确定k还是先确定h呢，也就是究竟先按h排序呢，还是先按照k排序呢？</p><p>如果按照k来从小到大排序，排完之后，会发现k的排列并不符合条件，身高也不符合条件，两个维度哪一个都没确定下来。</p><p>那么按照身高h来排序呢，身高一定是从大到小排（身高相同的话则k小的站前面），让高个子在前面。</p><p>此时我们可以确定一个维度了，就是身高，前面的节点一定都比本节点高！</p><p>那么只需要按照k为下标重新插入队列就可以了，为什么呢？</p><p>按照身高排序之后，优先按身高高的people的k来插入，后序插入节点也不会影响前面已经插入的节点，最终按照k的规则完成了队列。</p><p>所以在按照身高从大到小排序后：</p><p>局部最优：优先按身高高的people的k来插入。插入操作过后的people满足队列属性</p><p>全局最优：最后都做完插入操作，整个队列满足题目队列属性</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在通过《代码随想录》训练关于贪心算法方面的题目，有了一个新的心得体会，在这里摘抄一下，就是，如果一道题目有多个维度，&lt;strong&gt;那先不要上来就尝试在多个维度同时做贪心&lt;/strong&gt;，那大概率会让给自己的思路陷入混乱。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>从几个贪心算法的问题体会如何通过问题等价来简化问题</title>
    <link href="https://sunra.top/posts/f8333921/"/>
    <id>https://sunra.top/posts/f8333921/</id>
    <published>2024-01-12T23:13:19.000Z</published>
    <updated>2024-03-31T02:08:01.287Z</updated>
    
    <content type="html"><![CDATA[<p>算法学习的路线，个人体验，首先是学习基本的数据结构和算法，通晓每种数据结构适合存储什么类型的信息，然后了解通用的算法思想，比如贪心，双指针，单调栈，回溯等。第三步就是学会抽象，或者说等价，将具体的问题等价为简单的问题，然后用通用的算法去解决。第四步，就是有的算法只存在理论上的可行性，实际由于各种原因，如何去工程上的近似，或者有些问题不存在理论上的解法，只存在工程上的解法。</p><p>基本的数据结构，其实就是栈，队列，数组，链表，哈希，树，图之类的，其他的复杂数据结构都是再基本数据结构基础上组合出来的，比如跳表。</p><p>这次我们就从几个贪心算法体验问题等价能够带来的问题简化。</p><span id="more"></span><h1 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h1><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例  1:</span><br><span class="line"></span><br><span class="line">输入: [2,3,1,1,4]</span><br><span class="line"></span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</span><br></pre></td></tr></table></figure><p>刚看到本题一开始可能想：当前位置元素如果是 3，我究竟是跳一步呢，还是两步呢，还是三步呢，究竟跳几步才是最优呢？</p><p>其实跳几步无所谓，关键在于可跳的覆盖范围！</p><p>不一定非要明确一次究竟跳几步，每次取最大的跳跃步数，这个就是可以跳跃的覆盖范围。</p><p>这个范围内，别管是怎么跳的，反正一定可以跳过来。</p><p><strong>那么这个问题就转化为跳跃覆盖范围究竟可不可以覆盖到终点！</strong></p><p>每次移动取最大跳跃步数（得到最大的覆盖范围），每移动一个单位，就更新最大覆盖范围。</p><p>贪心算法局部最优解：每次取最大跳跃步数（取最大覆盖范围），整体最优解：最后得到整体最大覆盖范围，看是否能到终点。</p><p>局部最优推出全局最优，找不出反例，试试贪心！</p><h1 id="买卖股票的最佳时机II"><a href="#买卖股票的最佳时机II" class="headerlink" title="买卖股票的最佳时机II"></a>买卖股票的最佳时机II</h1><p>给定一个数组，它的第  i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure><p>这道题目可能我们只会想，选一个低的买入，再选个高的卖，再选一个低的买入…..循环反复。</p><p>如果想到其实最终利润是可以分解的，那么本题就很容易了！</p><p>如何分解呢？</p><p>假如第 0 天买入，第 3 天卖出，那么利润为：prices[3] - prices[0]。</p><p>相当于(prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])。</p><p>此时就是把利润分解为每天为单位的维度，而不是从 0 天到第 3 天整体去考虑！</p><p>那么根据 prices 可以得到每天的利润序列：(prices[i] - prices[i - 1])…..(prices[1] - prices[0])。</p><p>其实我们需要收集每天的正利润就可以，收集正利润的区间，就是股票买卖的区间，而我们只需要关注最终利润，不需要记录区间。</p><p>那么只收集正利润就是贪心所贪的地方！</p><p>局部最优：收集每天的正利润，全局最优：求得最大利润。</p><h1 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a>加油站</h1><p>在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。</p><p>你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p><p>说明:</p><p>如果题目有解，该答案即为唯一答案。<br>输入数组均为非空数组，且长度相同。<br>输入数组中的元素均为非负数。<br>示例 1: 输入:</p><p>gas = [1,2,3,4,5]<br>cost = [3,4,5,1,2]</p><p>直接从全局进行贪心选择，情况如下：</p><p>情况一：如果gas的总和小于cost总和，那么无论从哪里出发，一定是跑不了一圈的</p><p>情况二：rest[i] = gas[i]-cost[i]为一天剩下的油，i从0开始计算累加到最后一站，如果累加没有出现负数，说明从0出发，油就没有断过，那么0就是起点。</p><p>情况三：如果累加的最小值是负数，汽车就要从非0节点出发，从后向前，看哪个节点能把这个负数填平，能把这个负数填平的节点就是出发节点。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;算法学习的路线，个人体验，首先是学习基本的数据结构和算法，通晓每种数据结构适合存储什么类型的信息，然后了解通用的算法思想，比如贪心，双指针，单调栈，回溯等。第三步就是学会抽象，或者说等价，将具体的问题等价为简单的问题，然后用通用的算法去解决。第四步，就是有的算法只存在理论上的可行性，实际由于各种原因，如何去工程上的近似，或者有些问题不存在理论上的解法，只存在工程上的解法。&lt;/p&gt;
&lt;p&gt;基本的数据结构，其实就是栈，队列，数组，链表，哈希，树，图之类的，其他的复杂数据结构都是再基本数据结构基础上组合出来的，比如跳表。&lt;/p&gt;
&lt;p&gt;这次我们就从几个贪心算法体验问题等价能够带来的问题简化。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>手机端浏览器音频自动播放</title>
    <link href="https://sunra.top/posts/cd7098e0/"/>
    <id>https://sunra.top/posts/cd7098e0/</id>
    <published>2023-12-26T09:10:22.000Z</published>
    <updated>2024-03-31T02:08:01.287Z</updated>
    
    <content type="html"><![CDATA[<p>最近在尝试做一个文字转语音的功能，使用第三方的接口进行文字转语音，接口传入文字，返回音频文件，然后自动播放，这个流程在PC运行正常的，但是到了手机端，发现没有效果，因为手机端的浏览器默认不需要audio自动播放，需要明显的用户操作，比如点击才可以。</p><span id="more"></span><p>为了解决这个问题，方法也很简单，就是在用户之前的点击行为后，先创建几个audio，然后将将创建的audio缓存下来，直接播放再停止，那么这几个缓存的audio就可以突破浏览器自动播放的限制。</p><p>代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AudioPlayer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">audioQueue</span>: <span class="title class_">Array</span>&lt;&#123; <span class="attr">audio</span>: <span class="title class_">HTMLAudioElement</span>; <span class="attr">chunkId</span>: <span class="built_in">number</span> &#125;&gt; = [];</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">currentAudio</span>: <span class="title class_">HTMLAudioElement</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">unlockedAudioQueue</span>: <span class="title class_">HTMLAudioElement</span>[] = [];</span><br><span class="line">  <span class="keyword">private</span> nextChunkId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">statusChange</span>: <span class="function">(<span class="params">playing: <span class="built_in">Boolean</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">statusChange: (playing: <span class="built_in">Boolean</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">statusChange</span> = statusChange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">unlockedAudioQueue</span>.<span class="property">length</span> &lt; count) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">unlockedAudioQueue</span>.<span class="property">length</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> audio = <span class="keyword">new</span> <span class="title class_">Audio</span>();</span><br><span class="line">        audio.<span class="title function_">play</span>();</span><br><span class="line">        audio.<span class="title function_">pause</span>();</span><br><span class="line">        audio.<span class="property">currentTime</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">unlockedAudioQueue</span>.<span class="title function_">push</span>(audio);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">unlockedAudioQueue</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">addAudioToQueue</span>(<span class="params">audioUrl: <span class="built_in">string</span>, chunkId: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newAudio = <span class="variable language_">this</span>.<span class="property">unlockedAudioQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">    newAudio.<span class="property">src</span> = audioUrl;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">audioQueue</span>.<span class="title function_">push</span>(&#123; <span class="attr">audio</span>: newAudio, chunkId &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">audioQueue</span> = <span class="variable language_">this</span>.<span class="property">audioQueue</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">chunkId</span> - b.<span class="property">chunkId</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addAudioToQueue&quot;</span>, <span class="variable language_">this</span>.<span class="property">nextChunkId</span>, chunkId, audioUrl);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">currentAudio</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">playNext</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentAudio</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentAudio</span>.<span class="title function_">pause</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentAudio</span>.<span class="property">src</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentAudio</span>.<span class="property">currentTime</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">audioQueue</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">playNext</span>(<span class="params">retryCount = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;playNext&quot;</span>, <span class="variable language_">this</span>.<span class="property">audioQueue</span>, <span class="variable language_">this</span>.<span class="property">nextChunkId</span>, retryCount);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">audioQueue</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">audioQueue</span>[<span class="number">0</span>].<span class="property">chunkId</span> !== <span class="variable language_">this</span>.<span class="property">nextChunkId</span> &amp;&amp; retryCount &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">playNext</span>(retryCount + <span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">statusChange</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">const</span> audioQueueItem = <span class="variable language_">this</span>.<span class="property">audioQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentAudio</span> = audioQueueItem.<span class="property">audio</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">nextChunkId</span> = audioQueueItem.<span class="property">chunkId</span> + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentAudio</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentAudio</span>.<span class="property">onended</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentAudio</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currentAudio</span>.<span class="property">src</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currentAudio</span>.<span class="title function_">pause</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currentAudio</span>.<span class="property">currentTime</span> = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">currentAudio</span> = <span class="literal">null</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">playNext</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentAudio</span>?.<span class="title function_">play</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">statusChange</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在用户前置点击的操作中，调用init，缓存10个audio，当真的需要播放音频的时候，再将音频blob传入，chunkId的逻辑是因为，我的需求中，一段长文字返回后一起识别延迟比较明显，所以就并行请求，但是为了播放的正常顺序，加一个id，大家可以根据自己需求来</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在尝试做一个文字转语音的功能，使用第三方的接口进行文字转语音，接口传入文字，返回音频文件，然后自动播放，这个流程在PC运行正常的，但是到了手机端，发现没有效果，因为手机端的浏览器默认不需要audio自动播放，需要明显的用户操作，比如点击才可以。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>编程时的状态驱动思想</title>
    <link href="https://sunra.top/posts/664e0ec4/"/>
    <id>https://sunra.top/posts/664e0ec4/</id>
    <published>2023-11-27T04:28:19.000Z</published>
    <updated>2024-03-31T02:08:01.291Z</updated>
    
    <content type="html"><![CDATA[<p>状态驱动是编程时的一种很重要的算法思想，能够帮助我们梳理和解决很多的问题，可以说很多的计算机算法，做的事情都是将程序从一个状态转移成为另一个状态。</p><span id="more"></span><p>我们通过一个常见的例子来说明状态驱动的思想如何帮助我们梳理清楚思路的</p><p>题目如下：</p><p>三对狮子，三个大狮子分别是三个小狮子的妈妈，大狮子会吃别的狮子的孩子不吃自己的孩子。他们要过一条河，只有一条船，可以同时坐两头狮子。三个大狮子都会划船，三个小狮子中只有一只会划船。<br>问：六头狮子，怎样才能全部到达河对岸，而小狮子不能被吃掉？？</p><p>在遇到上述题目的时候，如果我们经常刷一些算法题目的话，可能会这样思考这个问题：</p><p>通过DFS，从初始状态，分析每个状态可能变成的其他状态，分析这些状态是否合法（也就是没有小狮子会被吃掉），如果合法则继续递归，如果遇到了重复的情况，则直接复用之前递归出来的结果，如果遇到了环则不再继续往更深层递归。</p><p>这确实是一种思路，也确实看似涉及到了状态。</p><p>但是这种思路更像是状态搜索，即通过算法搜索出所有状态，直到找到最终状态。</p><p>而且这种状态搜索的方式只适用于计算机，也无法对我们进行系统的设计有所参考。</p><p>本文所说的状态驱动，思考方式是反其道而行之的，即，先通过排列组合列举出所有可能的情况，然后筛选出其中的合法状态，最后在能够通过一步进行状态转移的状态之间建立路径，最后如果能从初始状态到目的状态之间找到一条路径，那么就是问题的答案。</p><p>这种思考方式不仅可以用于解决算法问题，对于我们设计系统也有帮助。</p><p>比如我们需要设计一个匹配系统，匹配过程中可能有各种事件发生，事件之间有互斥发生的关系需要代码控制，这种设计思路下，我们考虑的是当一件事发生的时候，其他的事情是否可以发生，如果不可以，我们需要通过一个标志位去锁住，知道另一个时间发生时去解除锁。</p><p>每次新增一个事件，我们都要增加锁，并且要处理不同锁之间的关系，那么这个系统的复杂度会膨胀的非常厉害，而且很难说这个系统处于一个什么状态。</p><p>而如果我们采用状态驱动，先梳理出所有的状态，收到不同的事件时，进行合法的状态转移，这样不仅逻辑清晰，当增加新的事件时，只需要对应到它会引起的状态变化即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;状态驱动是编程时的一种很重要的算法思想，能够帮助我们梳理和解决很多的问题，可以说很多的计算机算法，做的事情都是将程序从一个状态转移成为另一个状态。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>在react中实现一个可以进行异步函数重试的状态机hook</title>
    <link href="https://sunra.top/posts/8cc741bb/"/>
    <id>https://sunra.top/posts/8cc741bb/</id>
    <published>2023-11-11T23:57:53.000Z</published>
    <updated>2024-03-31T02:07:10.479Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要实现一个状态机，一开始没当回事，后来写着写着，发现其中的状态管理和变化需要被仔细设计才能保证没有问题，今天就简单记录其中一版。</p><span id="more"></span><h1 id="状态机转换图"><a href="#状态机转换图" class="headerlink" title="状态机转换图"></a>状态机转换图</h1><p><img src="https://kingworker.cn/resources/blog/retryable-async-function-hook/1.png" alt=""></p><p>注意这个图中有一个细节，举个例子来说，continueRun在success指向running的箭头上，这说明continueRun可以将状态从success变为running，同时在fail到running上没有continueRun，说明，continueRun并不能把状态从fail变为running</p><h1 id="状态机源码"><a href="#状态机源码" class="headerlink" title="状态机源码"></a>状态机源码</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AsyncFunc</span>&lt;T, U&gt; = <span class="function">(<span class="params">...args: T[]</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;U&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FunctionStatus</span> = <span class="string">&#x27;init&#x27;</span> | <span class="string">&#x27;running&#x27;</span> | <span class="string">&#x27;stoped&#x27;</span> | <span class="string">&#x27;success&#x27;</span> | <span class="string">&#x27;fail&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FunctionStatusChangeCallback</span>&lt;R&gt; = <span class="function">(<span class="params">status: FunctionStatus, result?: R</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RetryableFunctionParams</span>&lt;R&gt; &#123;</span><br><span class="line">  count?: <span class="built_in">number</span>;</span><br><span class="line">  timeout?: <span class="built_in">number</span>;</span><br><span class="line">  retryDuration?: <span class="built_in">number</span>;</span><br><span class="line">  errorConsumeCount?: <span class="built_in">boolean</span>;</span><br><span class="line">  callback?: <span class="title class_">FunctionStatusChangeCallback</span>&lt;R&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Retryable</span>&lt;T, U&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">fn</span>: <span class="title class_">AsyncFunc</span>&lt;T, U&gt;;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">maxRetries</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">retries</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">errorConsumeCount</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">startTime</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">timeout</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">args</span>: T[];</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">retryDuration</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">planToStop</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">resolve</span>: (<span class="function">(<span class="params">value: U | PromiseLike&lt;U&gt;</span>) =&gt;</span> <span class="built_in">void</span>) | <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">reject</span>: (<span class="function">(<span class="params">reason?: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>) | <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">status</span>: <span class="title class_">FunctionStatus</span>;</span><br><span class="line">  <span class="keyword">private</span> callback?: <span class="title class_">FunctionStatusChangeCallback</span>&lt;U&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn: AsyncFunc&lt;T, U&gt;, params: RetryableFunctionParams&lt;U&gt;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fn</span> = fn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = params.<span class="property">callback</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxRetries</span> = params.<span class="property">count</span> ?? <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">retries</span> = params.<span class="property">count</span> ?? <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">retryDuration</span> = params.<span class="property">retryDuration</span> ?? <span class="number">500</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errorConsumeCount</span> = params.<span class="property">errorConsumeCount</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timeout</span> = params.<span class="property">timeout</span> ?? <span class="number">1000</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">planToStop</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">changeStatus</span>(<span class="string">&#x27;init&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getStatus = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">status</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  stop = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">planToStop</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> !== <span class="string">&#x27;running&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">changeStatus</span>(<span class="string">&#x27;stoped&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  continueRun = (resetTimeout?: <span class="built_in">boolean</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (resetTimeout) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">canRetry</span>() &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">execute</span>();</span><br><span class="line">      &#125;, <span class="variable language_">this</span>.<span class="property">retryDuration</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  restart = (...<span class="attr">args</span>: T[]): <span class="title class_">Promise</span>&lt;U&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">planToStop</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">retries</span> = <span class="variable language_">this</span>.<span class="property">maxRetries</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args</span> = args;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;U&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">resolve</span> = resolve;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reject</span> = reject;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">execute</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  resetFunc = (<span class="attr">fn</span>: <span class="title class_">AsyncFunc</span>&lt;T, U&gt;): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fn</span> = fn;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">canRetry</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">planToStop</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">retries</span> &gt; <span class="number">0</span> &amp;&amp; (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - <span class="variable language_">this</span>.<span class="property">startTime</span> &lt; <span class="variable language_">this</span>.<span class="property">timeout</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">changeStatus</span>: <span class="title class_">FunctionStatusChangeCallback</span>&lt;U&gt; = <span class="function">(<span class="params">status, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = status;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span>?.(status, result);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> execute = <span class="keyword">async</span> (): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">planToStop</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">changeStatus</span>(<span class="string">&#x27;stoped&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">changeStatus</span>(<span class="string">&#x27;running&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">retries</span>--;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>(...<span class="variable language_">this</span>.<span class="property">args</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">resolve</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">resolve</span>(result);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">planToStop</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">changeStatus</span>(<span class="string">&#x27;stoped&#x27;</span>, result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">changeStatus</span>(<span class="string">&#x27;success&#x27;</span>, result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">errorConsumeCount</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">retries</span>++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">planToStop</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">changeStatus</span>(<span class="string">&#x27;stoped&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">canRetry</span>()) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">execute</span>();</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">retryDuration</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reject</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">changeStatus</span>(<span class="string">&#x27;fail&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> useRetryableAsyncFunc&lt;T, U&gt;(<span class="attr">fn</span>: <span class="title class_">AsyncFunc</span>&lt;T, U&gt;, <span class="attr">params</span>: <span class="title class_">RetryableFunctionParams</span>&lt;U&gt;) &#123;</span><br><span class="line">  <span class="keyword">const</span> retryAble = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Retryable</span>(fn, params);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    retryAble.<span class="title function_">resetFunc</span>(fn);</span><br><span class="line">  &#125;, [fn]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> retryAble;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近需要实现一个状态机，一开始没当回事，后来写着写着，发现其中的状态管理和变化需要被仔细设计才能保证没有问题，今天就简单记录其中一版。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>Vite学习笔记（四）Vite源码分析</title>
    <link href="https://sunra.top/posts/7c19c20e/"/>
    <id>https://sunra.top/posts/7c19c20e/</id>
    <published>2023-11-03T23:01:43.000Z</published>
    <updated>2024-03-31T02:07:10.487Z</updated>
    
    <content type="html"><![CDATA[<p>本次博客正式进入源码的解析部分，我们主要分析源码中的以下几个部分：</p><ul><li>如何进行配置合并与生成，即resolveConfig部分</li><li>插件的调用机制，即pluginContainer</li><li>模块之间的引用图谱部分，即moduleGraph</li><li>vite的热更新模块内，即hmr</li><li>vite的依赖打包优化部分，即optimizeDeps</li></ul><span id="more"></span><h1 id="入口和基本逻辑分析"><a href="#入口和基本逻辑分析" class="headerlink" title="入口和基本逻辑分析"></a>入口和基本逻辑分析</h1><p>我们分析的源码版本是4.5.0版本，想要结合源码阅读本博客的可以自己下载对应版本的源码。</p><p>仓库地址是<a href="https://github.com/vitejs/vite.git，这是一个monorepo，我们主要关注packages目录下的vite部分。">https://github.com/vitejs/vite.git，这是一个monorepo，我们主要关注packages目录下的vite部分。</a></p><p>vite的源码部分主要分三块，client，node和types，其中types部分主要是定义了一些vite所依赖的一些第三方库的类型的补充，如http的类型，client部分是vite在浏览器端运行的代码，主要是负责处理vite的一些更新逻辑，如服务端发来新的代码更新，如何进行热更新，不是我们这次的重点。</p><p>我们本次的博客的重点是node部分，也就是vite devserver的代码</p><h2 id="入口分析"><a href="#入口分析" class="headerlink" title="入口分析"></a>入口分析</h2><p>那么我们如何找到vite node部分的入口呢？</p><p>我们平时使用vite的时候都是通过命令行的方式，也就是node cli，那么我们就可以去package.json中找到bin配置，里面制定了vite启动执行的代码，我们可以发现它的值是<code>bin/vite.js</code>,我们再去看这个文件，这个文件中的代码不多，大部分是处理命令行参数的，最终运行的代码是下面这一段：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">import</span>(<span class="string">&#x27;../dist/node/cli.js&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是引入dist/node下面的cli文件，这个cli.js是的打包出来的，如果查看rollup.config.js就会发现，它对应的就是src/node/cli.ts，那么这个时候我们就找到入口了。</p><p>在cli文件中，使用了<code>cac</code>这个库去生成命令行，我们主要看vite如何启动本地开发服务器的，所以我们找到其中声明vite命令的对应代码，如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dev</span></span><br><span class="line">cli</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&#x27;[root]&#x27;</span>, <span class="string">&#x27;start dev server&#x27;</span>) <span class="comment">// default command</span></span><br><span class="line">  .<span class="title function_">alias</span>(<span class="string">&#x27;serve&#x27;</span>) <span class="comment">// the command is called &#x27;serve&#x27; in Vite&#x27;s API</span></span><br><span class="line">  .<span class="title function_">alias</span>(<span class="string">&#x27;dev&#x27;</span>) <span class="comment">// alias to align with the script name</span></span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;--host [host]&#x27;</span>, <span class="string">`[string] specify hostname`</span>, &#123; <span class="attr">type</span>: [convertHost] &#125;)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;--port &lt;port&gt;&#x27;</span>, <span class="string">`[number] specify port`</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;--open [path]&#x27;</span>, <span class="string">`[boolean | string] open browser on startup`</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;--cors&#x27;</span>, <span class="string">`[boolean] enable CORS`</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;--strictPort&#x27;</span>, <span class="string">`[boolean] exit if specified port is already in use`</span>)</span><br><span class="line">  .<span class="title function_">option</span>(</span><br><span class="line">    <span class="string">&#x27;--force&#x27;</span>,</span><br><span class="line">    <span class="string">`[boolean] force the optimizer to ignore the cache and re-bundle`</span>,</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">action</span>(<span class="keyword">async</span> (<span class="attr">root</span>: <span class="built_in">string</span>, <span class="attr">options</span>: <span class="title class_">ServerOptions</span> &amp; <span class="title class_">GlobalCLIOptions</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">filterDuplicateOptions</span>(options)</span><br><span class="line">    <span class="comment">// output structure is preserved even after bundling so require()</span></span><br><span class="line">    <span class="comment">// is ok here</span></span><br><span class="line">    <span class="keyword">const</span> &#123; createServer &#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./server&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> server = <span class="keyword">await</span> <span class="title function_">createServer</span>(&#123;</span><br><span class="line">        root,</span><br><span class="line">        <span class="attr">base</span>: options.<span class="property">base</span>,</span><br><span class="line">        <span class="attr">mode</span>: options.<span class="property">mode</span>,</span><br><span class="line">        <span class="attr">configFile</span>: options.<span class="property">config</span>,</span><br><span class="line">        <span class="attr">logLevel</span>: options.<span class="property">logLevel</span>,</span><br><span class="line">        <span class="attr">clearScreen</span>: options.<span class="property">clearScreen</span>,</span><br><span class="line">        <span class="attr">optimizeDeps</span>: &#123; <span class="attr">force</span>: options.<span class="property">force</span> &#125;,</span><br><span class="line">        <span class="attr">server</span>: <span class="title function_">cleanOptions</span>(options),</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!server.<span class="property">httpServer</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;HTTP server not available&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> server.<span class="title function_">listen</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> info = server.<span class="property">config</span>.<span class="property">logger</span>.<span class="property">info</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> viteStartTime = <span class="variable language_">global</span>.<span class="property">__vite_start_time</span> ?? <span class="literal">false</span></span><br><span class="line">      <span class="keyword">const</span> startupDurationString = viteStartTime</span><br><span class="line">        ? colors.<span class="title function_">dim</span>(</span><br><span class="line">            <span class="string">`ready in <span class="subst">$&#123;colors.reset(</span></span></span><br><span class="line"><span class="subst"><span class="string">              colors.bold(<span class="built_in">Math</span>.ceil(performance.now() - viteStartTime)),</span></span></span><br><span class="line"><span class="subst"><span class="string">            )&#125;</span> ms`</span>,</span><br><span class="line">          )</span><br><span class="line">        : <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="title function_">info</span>(</span><br><span class="line">        <span class="string">`\n  <span class="subst">$&#123;colors.green(</span></span></span><br><span class="line"><span class="subst"><span class="string">          <span class="string">`<span class="subst">$&#123;colors.bold(<span class="string">&#x27;VITE&#x27;</span>)&#125;</span> v<span class="subst">$&#123;VERSION&#125;</span>`</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">        )&#125;</span>  <span class="subst">$&#123;startupDurationString&#125;</span>\n`</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">clear</span>:</span><br><span class="line">            !server.<span class="property">config</span>.<span class="property">logger</span>.<span class="property">hasWarned</span> &amp;&amp;</span><br><span class="line">            !(globalThis <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">__vite_cjs_skip_clear_screen</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      server.<span class="title function_">printUrls</span>()</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">customShortcuts</span>: <span class="title class_">CLIShortcut</span>&lt;<span class="keyword">typeof</span> server&gt;[] = []</span><br><span class="line">      <span class="keyword">if</span> (profileSession) &#123;</span><br><span class="line">        customShortcuts.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">          <span class="attr">description</span>: <span class="string">&#x27;start/stop the profiler&#x27;</span>,</span><br><span class="line">          <span class="keyword">async</span> <span class="title function_">action</span>(<span class="params">server</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (profileSession) &#123;</span><br><span class="line">              <span class="keyword">await</span> <span class="title function_">stopProfiler</span>(server.<span class="property">config</span>.<span class="property">logger</span>.<span class="property">info</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> inspector = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;node:inspector&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">                <span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">default</span>,</span><br><span class="line">              )</span><br><span class="line">              <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                profileSession = <span class="keyword">new</span> inspector.<span class="title class_">Session</span>()</span><br><span class="line">                profileSession.<span class="title function_">connect</span>()</span><br><span class="line">                profileSession.<span class="title function_">post</span>(<span class="string">&#x27;Profiler.enable&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                  profileSession!.<span class="title function_">post</span>(<span class="string">&#x27;Profiler.start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    server.<span class="property">config</span>.<span class="property">logger</span>.<span class="title function_">info</span>(<span class="string">&#x27;Profiler started&#x27;</span>)</span><br><span class="line">                    <span class="title function_">res</span>()</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      server.<span class="title function_">bindCLIShortcuts</span>(&#123; <span class="attr">print</span>: <span class="literal">true</span>, customShortcuts &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">const</span> logger = <span class="title function_">createLogger</span>(options.<span class="property">logLevel</span>)</span><br><span class="line">      logger.<span class="title function_">error</span>(colors.<span class="title function_">red</span>(<span class="string">`error when starting dev server:\n<span class="subst">$&#123;e.stack&#125;</span>`</span>), &#123;</span><br><span class="line">        <span class="attr">error</span>: e,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="title function_">stopProfiler</span>(logger.<span class="property">info</span>)</span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这段代码中最主要的就是action函数，其中就是调用了<code>createServer</code>方法，这个时候我们就找到了本地服务器启动的真正代码，即createServer函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createServer</span>(<span class="params"></span></span><br><span class="line"><span class="params">  inlineConfig: InlineConfig = &#123;&#125;,</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ViteDevServer</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_createServer</span>(inlineConfig, &#123; <span class="attr">ws</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主流程分析"><a href="#主流程分析" class="headerlink" title="主流程分析"></a>主流程分析</h2><p>接下来我们简单分析下这个createServer的主流程，我先把完整的代码贴在这里，有兴趣的可以读一下，也可以直接跳过看后面的分析</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">_createServer</span>(<span class="params"></span></span><br><span class="line"><span class="params">  inlineConfig: InlineConfig = &#123;&#125;,</span></span><br><span class="line"><span class="params">  options: &#123; ws: <span class="built_in">boolean</span> &#125;,</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ViteDevServer</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> config = <span class="keyword">await</span> <span class="title function_">resolveConfig</span>(inlineConfig, <span class="string">&#x27;serve&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; root, <span class="attr">server</span>: serverConfig &#125; = config</span><br><span class="line">  <span class="keyword">const</span> httpsOptions = <span class="keyword">await</span> <span class="title function_">resolveHttpsConfig</span>(config.<span class="property">server</span>.<span class="property">https</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; middlewareMode &#125; = serverConfig</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resolvedWatchOptions = <span class="title function_">resolveChokidarOptions</span>(config, &#123;</span><br><span class="line">    <span class="attr">disableGlobbing</span>: <span class="literal">true</span>,</span><br><span class="line">    ...serverConfig.<span class="property">watch</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> middlewares = <span class="title function_">connect</span>() <span class="keyword">as</span> <span class="title class_">Connect</span>.<span class="property">Server</span></span><br><span class="line">  <span class="keyword">const</span> httpServer = middlewareMode</span><br><span class="line">    ? <span class="literal">null</span></span><br><span class="line">    : <span class="keyword">await</span> <span class="title function_">resolveHttpServer</span>(serverConfig, middlewares, httpsOptions)</span><br><span class="line">  <span class="keyword">const</span> ws = <span class="title function_">createWebSocketServer</span>(httpServer, config, httpsOptions)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (httpServer) &#123;</span><br><span class="line">    <span class="title function_">setClientErrorHandler</span>(httpServer, config.<span class="property">logger</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// eslint-disable-next-line eqeqeq</span></span><br><span class="line">  <span class="keyword">const</span> watchEnabled = serverConfig.<span class="property">watch</span> !== <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> watcher = watchEnabled</span><br><span class="line">    ? (chokidar.<span class="title function_">watch</span>(</span><br><span class="line">        <span class="comment">// config file dependencies and env file might be outside of root</span></span><br><span class="line">        [root, ...config.<span class="property">configFileDependencies</span>, config.<span class="property">envDir</span>],</span><br><span class="line">        resolvedWatchOptions,</span><br><span class="line">      ) <span class="keyword">as</span> <span class="title class_">FSWatcher</span>)</span><br><span class="line">    : <span class="title function_">createNoopWatcher</span>(resolvedWatchOptions)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">moduleGraph</span>: <span class="title class_">ModuleGraph</span> = <span class="keyword">new</span> <span class="title class_">ModuleGraph</span>(<span class="function">(<span class="params">url, ssr</span>) =&gt;</span></span><br><span class="line">    container.<span class="title function_">resolveId</span>(url, <span class="literal">undefined</span>, &#123; ssr &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> container = <span class="keyword">await</span> <span class="title function_">createPluginContainer</span>(config, moduleGraph, watcher)</span><br><span class="line">  <span class="keyword">const</span> closeHttpServer = <span class="title function_">createServerCloseFn</span>(httpServer)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">exitProcess</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">server</span>: <span class="title class_">ViteDevServer</span> = &#123;</span><br><span class="line">    config,</span><br><span class="line">    middlewares,</span><br><span class="line">    httpServer,</span><br><span class="line">    watcher,</span><br><span class="line">    <span class="attr">pluginContainer</span>: container,</span><br><span class="line">    ws,</span><br><span class="line">    moduleGraph,</span><br><span class="line">    <span class="attr">resolvedUrls</span>: <span class="literal">null</span>, <span class="comment">// will be set on listen</span></span><br><span class="line">    <span class="title function_">ssrTransform</span>(<span class="params"></span></span><br><span class="line"><span class="params">      code: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      inMap: SourceMap | &#123; mappings: <span class="string">&#x27;&#x27;</span> &#125; | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">      url: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      originalCode = code,</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">ssrTransform</span>(code, inMap, url, originalCode, server.<span class="property">config</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">transformRequest</span>(<span class="params">url, options</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">transformRequest</span>(url, server, options)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">warmupRequest</span>(<span class="params">url, options</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">transformRequest</span>(url, server, options).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          e?.<span class="property">code</span> === <span class="variable constant_">ERR_OUTDATED_OPTIMIZED_DEP</span> ||</span><br><span class="line">          e?.<span class="property">code</span> === <span class="variable constant_">ERR_CLOSED_SERVER</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="comment">// these are expected errors</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Unexpected error, log the issue but avoid an unhandled exception</span></span><br><span class="line">        server.<span class="property">config</span>.<span class="property">logger</span>.<span class="title function_">error</span>(<span class="string">`Pre-transform error: <span class="subst">$&#123;e.message&#125;</span>`</span>, &#123;</span><br><span class="line">          <span class="attr">error</span>: e,</span><br><span class="line">          <span class="attr">timestamp</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">transformIndexHtml</span>: <span class="literal">null</span>!, <span class="comment">// to be immediately set</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">ssrLoadModule</span>(<span class="params">url, opts?: &#123; fixStacktrace?: <span class="built_in">boolean</span> &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDepsOptimizerEnabled</span>(config, <span class="literal">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">initDevSsrDepsOptimizer</span>(config, server)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">ssrLoadModule</span>(</span><br><span class="line">        url,</span><br><span class="line">        server,</span><br><span class="line">        <span class="literal">undefined</span>,</span><br><span class="line">        <span class="literal">undefined</span>,</span><br><span class="line">        opts?.<span class="property">fixStacktrace</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">ssrFixStacktrace</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">ssrFixStacktrace</span>(e, moduleGraph)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">ssrRewriteStacktrace</span>(<span class="params">stack: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">ssrRewriteStacktrace</span>(stack, moduleGraph)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">reloadModule</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (serverConfig.<span class="property">hmr</span> !== <span class="literal">false</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">file</span>) &#123;</span><br><span class="line">        <span class="title function_">updateModules</span>(<span class="variable language_">module</span>.<span class="property">file</span>, [<span class="variable language_">module</span>], <span class="title class_">Date</span>.<span class="title function_">now</span>(), server)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">listen</span>(<span class="params">port?: <span class="built_in">number</span>, isRestart?: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">startServer</span>(server, port)</span><br><span class="line">      <span class="keyword">if</span> (httpServer) &#123;</span><br><span class="line">        server.<span class="property">resolvedUrls</span> = <span class="keyword">await</span> <span class="title function_">resolveServerUrls</span>(</span><br><span class="line">          httpServer,</span><br><span class="line">          config.<span class="property">server</span>,</span><br><span class="line">          config,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> (!isRestart &amp;&amp; config.<span class="property">server</span>.<span class="property">open</span>) server.<span class="title function_">openBrowser</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> server</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">openBrowser</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> options = server.<span class="property">config</span>.<span class="property">server</span></span><br><span class="line">      <span class="keyword">const</span> url =</span><br><span class="line">        server.<span class="property">resolvedUrls</span>?.<span class="property">local</span>[<span class="number">0</span>] ?? server.<span class="property">resolvedUrls</span>?.<span class="property">network</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (url) &#123;</span><br><span class="line">        <span class="keyword">const</span> path =</span><br><span class="line">          <span class="keyword">typeof</span> options.<span class="property">open</span> === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">            ? <span class="keyword">new</span> <span class="title function_">URL</span>(options.<span class="property">open</span>, url).<span class="property">href</span></span><br><span class="line">            : url</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We know the url that the browser would be opened to, so we can</span></span><br><span class="line">        <span class="comment">// start the request while we are awaiting the browser. This will</span></span><br><span class="line">        <span class="comment">// start the crawling of static imports ~500ms before.</span></span><br><span class="line">        <span class="comment">// preTransformRequests needs to be enabled for this optimization.</span></span><br><span class="line">        <span class="keyword">if</span> (server.<span class="property">config</span>.<span class="property">server</span>.<span class="property">preTransformRequests</span>) &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">httpGet</span>(</span><br><span class="line">              path,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                  <span class="comment">// Allow the history middleware to redirect to /index.html</span></span><br><span class="line">                  <span class="title class_">Accept</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                  <span class="comment">// Ignore response, scripts discovered while processing the entry</span></span><br><span class="line">                  <span class="comment">// will be preprocessed (server.config.server.preTransformRequests)</span></span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">              .<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// Ignore errors</span></span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="title function_">end</span>()</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_openBrowser</span>(path, <span class="literal">true</span>, server.<span class="property">config</span>.<span class="property">logger</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        server.<span class="property">config</span>.<span class="property">logger</span>.<span class="title function_">warn</span>(<span class="string">&#x27;No URL available to open in browser&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!middlewareMode) &#123;</span><br><span class="line">        process.<span class="title function_">off</span>(<span class="string">&#x27;SIGTERM&#x27;</span>, exitProcess)</span><br><span class="line">        <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">CI</span> !== <span class="string">&#x27;true&#x27;</span>) &#123;</span><br><span class="line">          process.<span class="property">stdin</span>.<span class="title function_">off</span>(<span class="string">&#x27;end&#x27;</span>, exitProcess)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([</span><br><span class="line">        watcher.<span class="title function_">close</span>(),</span><br><span class="line">        ws.<span class="title function_">close</span>(),</span><br><span class="line">        container.<span class="title function_">close</span>(),</span><br><span class="line">        <span class="title function_">getDepsOptimizer</span>(server.<span class="property">config</span>)?.<span class="title function_">close</span>(),</span><br><span class="line">        <span class="title function_">getDepsOptimizer</span>(server.<span class="property">config</span>, <span class="literal">true</span>)?.<span class="title function_">close</span>(),</span><br><span class="line">        <span class="title function_">closeHttpServer</span>(),</span><br><span class="line">      ])</span><br><span class="line">      <span class="comment">// Await pending requests. We throw early in transformRequest</span></span><br><span class="line">      <span class="comment">// and in hooks if the server is closing for non-ssr requests,</span></span><br><span class="line">      <span class="comment">// so the import analysis plugin stops pre-transforming static</span></span><br><span class="line">      <span class="comment">// imports and this block is resolved sooner.</span></span><br><span class="line">      <span class="comment">// During SSR, we let pending requests finish to avoid exposing</span></span><br><span class="line">      <span class="comment">// the server closed error to the users.</span></span><br><span class="line">      <span class="keyword">while</span> (server.<span class="property">_pendingRequests</span>.<span class="property">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(</span><br><span class="line">          [...server.<span class="property">_pendingRequests</span>.<span class="title function_">values</span>()].<span class="title function_">map</span>(</span><br><span class="line">            <span class="function">(<span class="params">pending</span>) =&gt;</span> pending.<span class="property">request</span>,</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      server.<span class="property">resolvedUrls</span> = <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="variable constant_">ASYNC_DISPOSE</span>]() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">close</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">printUrls</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (server.<span class="property">resolvedUrls</span>) &#123;</span><br><span class="line">        <span class="title function_">printServerUrls</span>(</span><br><span class="line">          server.<span class="property">resolvedUrls</span>,</span><br><span class="line">          serverConfig.<span class="property">host</span>,</span><br><span class="line">          config.<span class="property">logger</span>.<span class="property">info</span>,</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middlewareMode) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;cannot print server URLs in middleware mode.&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">          <span class="string">&#x27;cannot print server URLs before server.listen is called.&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">bindCLIShortcuts</span>(<span class="params">options</span>) &#123;</span><br><span class="line">      <span class="title function_">bindCLIShortcuts</span>(server, options)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">restart</span>(<span class="params">forceOptimize?: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!server.<span class="property">_restartPromise</span>) &#123;</span><br><span class="line">        server.<span class="property">_forceOptimizeOnRestart</span> = !!forceOptimize</span><br><span class="line">        server.<span class="property">_restartPromise</span> = <span class="title function_">restartServer</span>(server).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          server.<span class="property">_restartPromise</span> = <span class="literal">null</span></span><br><span class="line">          server.<span class="property">_forceOptimizeOnRestart</span> = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> server.<span class="property">_restartPromise</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">_restartPromise</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">_importGlobMap</span>: <span class="keyword">new</span> <span class="title class_">Map</span>(),</span><br><span class="line">    <span class="attr">_forceOptimizeOnRestart</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">_pendingRequests</span>: <span class="keyword">new</span> <span class="title class_">Map</span>(),</span><br><span class="line">    <span class="attr">_fsDenyGlob</span>: <span class="title function_">picomatch</span>(config.<span class="property">server</span>.<span class="property">fs</span>.<span class="property">deny</span>, &#123; <span class="attr">matchBase</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    <span class="attr">_shortcutsOptions</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server.<span class="property">transformIndexHtml</span> = <span class="title function_">createDevHtmlTransformFn</span>(server)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!middlewareMode) &#123;</span><br><span class="line">    exitProcess = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> server.<span class="title function_">close</span>()</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        process.<span class="title function_">exit</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    process.<span class="title function_">once</span>(<span class="string">&#x27;SIGTERM&#x27;</span>, exitProcess)</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">CI</span> !== <span class="string">&#x27;true&#x27;</span>) &#123;</span><br><span class="line">      process.<span class="property">stdin</span>.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, exitProcess)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onHMRUpdate</span> = <span class="keyword">async</span> (<span class="params">file: <span class="built_in">string</span>, configOnly: <span class="built_in">boolean</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (serverConfig.<span class="property">hmr</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">handleHMRUpdate</span>(file, server, configOnly)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        ws.<span class="title function_">send</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">          <span class="attr">err</span>: <span class="title function_">prepareError</span>(err),</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onFileAddUnlink</span> = <span class="keyword">async</span> (<span class="params">file: <span class="built_in">string</span>, isUnlink: <span class="built_in">boolean</span></span>) =&gt; &#123;</span><br><span class="line">    file = <span class="title function_">normalizePath</span>(file)</span><br><span class="line">    <span class="keyword">await</span> container.<span class="title function_">watchChange</span>(file, &#123; <span class="attr">event</span>: isUnlink ? <span class="string">&#x27;delete&#x27;</span> : <span class="string">&#x27;create&#x27;</span> &#125;)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">handleFileAddUnlink</span>(file, server, isUnlink)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">onHMRUpdate</span>(file, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  watcher.<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line">    file = <span class="title function_">normalizePath</span>(file)</span><br><span class="line">    <span class="keyword">await</span> container.<span class="title function_">watchChange</span>(file, &#123; <span class="attr">event</span>: <span class="string">&#x27;update&#x27;</span> &#125;)</span><br><span class="line">    <span class="comment">// invalidate module graph cache on file change</span></span><br><span class="line">    moduleGraph.<span class="title function_">onFileChange</span>(file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">onHMRUpdate</span>(file, <span class="literal">false</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  watcher.<span class="title function_">on</span>(<span class="string">&#x27;add&#x27;</span>, <span class="function">(<span class="params">file</span>) =&gt;</span> <span class="title function_">onFileAddUnlink</span>(file, <span class="literal">false</span>))</span><br><span class="line">  watcher.<span class="title function_">on</span>(<span class="string">&#x27;unlink&#x27;</span>, <span class="function">(<span class="params">file</span>) =&gt;</span> <span class="title function_">onFileAddUnlink</span>(file, <span class="literal">true</span>))</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;vite:invalidate&#x27;</span>, <span class="keyword">async</span> (&#123; path, message &#125;: <span class="title class_">InvalidatePayload</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> mod = moduleGraph.<span class="property">urlToModuleMap</span>.<span class="title function_">get</span>(path)</span><br><span class="line">    <span class="keyword">if</span> (mod &amp;&amp; mod.<span class="property">isSelfAccepting</span> &amp;&amp; mod.<span class="property">lastHMRTimestamp</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      config.<span class="property">logger</span>.<span class="title function_">info</span>(</span><br><span class="line">        colors.<span class="title function_">yellow</span>(<span class="string">`hmr invalidate `</span>) +</span><br><span class="line">          colors.<span class="title function_">dim</span>(path) +</span><br><span class="line">          (message ? <span class="string">` <span class="subst">$&#123;message&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        &#123; <span class="attr">timestamp</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">const</span> file = <span class="title function_">getShortName</span>(mod.<span class="property">file</span>!, config.<span class="property">root</span>)</span><br><span class="line">      <span class="title function_">updateModules</span>(</span><br><span class="line">        file,</span><br><span class="line">        [...mod.<span class="property">importers</span>],</span><br><span class="line">        mod.<span class="property">lastHMRTimestamp</span>,</span><br><span class="line">        server,</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!middlewareMode &amp;&amp; httpServer) &#123;</span><br><span class="line">    httpServer.<span class="title function_">once</span>(<span class="string">&#x27;listening&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// update actual port since this may be different from initial value</span></span><br><span class="line">      serverConfig.<span class="property">port</span> = (httpServer.<span class="title function_">address</span>() <span class="keyword">as</span> net.<span class="property">AddressInfo</span>).<span class="property">port</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// apply server configuration hooks from plugins</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">postHooks</span>: ((<span class="function">() =&gt;</span> <span class="built_in">void</span>) | <span class="built_in">void</span>)[] = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> hook <span class="keyword">of</span> config.<span class="title function_">getSortedPluginHooks</span>(<span class="string">&#x27;configureServer&#x27;</span>)) &#123;</span><br><span class="line">    postHooks.<span class="title function_">push</span>(<span class="keyword">await</span> <span class="title function_">hook</span>(server))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Internal middlewares ------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// request timer</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">DEBUG</span>) &#123;</span><br><span class="line">    middlewares.<span class="title function_">use</span>(<span class="title function_">timeMiddleware</span>(root))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cors (enabled by default)</span></span><br><span class="line">  <span class="keyword">const</span> &#123; cors &#125; = serverConfig</span><br><span class="line">  <span class="keyword">if</span> (cors !== <span class="literal">false</span>) &#123;</span><br><span class="line">    middlewares.<span class="title function_">use</span>(<span class="title function_">corsMiddleware</span>(<span class="keyword">typeof</span> cors === <span class="string">&#x27;boolean&#x27;</span> ? &#123;&#125; : cors))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// proxy</span></span><br><span class="line">  <span class="keyword">const</span> &#123; proxy &#125; = serverConfig</span><br><span class="line">  <span class="keyword">if</span> (proxy) &#123;</span><br><span class="line">    middlewares.<span class="title function_">use</span>(<span class="title function_">proxyMiddleware</span>(httpServer, proxy, config))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// base</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">base</span> !== <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    middlewares.<span class="title function_">use</span>(<span class="title function_">baseMiddleware</span>(config.<span class="property">rawBase</span>, middlewareMode))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// open in editor support</span></span><br><span class="line">  middlewares.<span class="title function_">use</span>(<span class="string">&#x27;/__open-in-editor&#x27;</span>, <span class="title function_">launchEditorMiddleware</span>())</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ping request handler</span></span><br><span class="line">  <span class="comment">// Keep the named function. The name is visible in debug logs via `DEBUG=connect:dispatcher ...`</span></span><br><span class="line">  middlewares.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">viteHMRPingMiddleware</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">headers</span>[<span class="string">&#x27;accept&#x27;</span>] === <span class="string">&#x27;text/x-vite-ping&#x27;</span>) &#123;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">204</span>).<span class="title function_">end</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// serve static files under /public</span></span><br><span class="line">  <span class="comment">// this applies before the transform middleware so that these files are served</span></span><br><span class="line">  <span class="comment">// as-is without transforms.</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">publicDir</span>) &#123;</span><br><span class="line">    middlewares.<span class="title function_">use</span>(</span><br><span class="line">      <span class="title function_">servePublicMiddleware</span>(config.<span class="property">publicDir</span>, config.<span class="property">server</span>.<span class="property">headers</span>),</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// main transform middleware</span></span><br><span class="line">  middlewares.<span class="title function_">use</span>(<span class="title function_">transformMiddleware</span>(server))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// serve static files</span></span><br><span class="line">  middlewares.<span class="title function_">use</span>(<span class="title function_">serveRawFsMiddleware</span>(server))</span><br><span class="line">  middlewares.<span class="title function_">use</span>(<span class="title function_">serveStaticMiddleware</span>(root, server))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// html fallback</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">appType</span> === <span class="string">&#x27;spa&#x27;</span> || config.<span class="property">appType</span> === <span class="string">&#x27;mpa&#x27;</span>) &#123;</span><br><span class="line">    middlewares.<span class="title function_">use</span>(<span class="title function_">htmlFallbackMiddleware</span>(root, config.<span class="property">appType</span> === <span class="string">&#x27;spa&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// run post config hooks</span></span><br><span class="line">  <span class="comment">// This is applied before the html middleware so that user middleware can</span></span><br><span class="line">  <span class="comment">// serve custom content instead of index.html.</span></span><br><span class="line">  postHooks.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn &amp;&amp; <span class="title function_">fn</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">appType</span> === <span class="string">&#x27;spa&#x27;</span> || config.<span class="property">appType</span> === <span class="string">&#x27;mpa&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// transform index.html</span></span><br><span class="line">    middlewares.<span class="title function_">use</span>(<span class="title function_">indexHtmlMiddleware</span>(root, server))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// handle 404s</span></span><br><span class="line">    middlewares.<span class="title function_">use</span>(<span class="title function_">notFoundMiddleware</span>())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// error handler</span></span><br><span class="line">  middlewares.<span class="title function_">use</span>(<span class="title function_">errorMiddleware</span>(server, middlewareMode))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// httpServer.listen can be called multiple times</span></span><br><span class="line">  <span class="comment">// when port when using next port number</span></span><br><span class="line">  <span class="comment">// this code is to avoid calling buildStart multiple times</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">initingServer</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; | <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">let</span> serverInited = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">initServer</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (serverInited) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (initingServer) <span class="keyword">return</span> initingServer</span><br><span class="line"></span><br><span class="line">    initingServer = (<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> container.<span class="title function_">buildStart</span>(&#123;&#125;)</span><br><span class="line">      <span class="comment">// start deps optimizer after all container plugins are ready</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDepsOptimizerEnabled</span>(config, <span class="literal">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">initDepsOptimizer</span>(config, server)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">warmupFiles</span>(server)</span><br><span class="line">      initingServer = <span class="literal">undefined</span></span><br><span class="line">      serverInited = <span class="literal">true</span></span><br><span class="line">    &#125;)()</span><br><span class="line">    <span class="keyword">return</span> initingServer</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!middlewareMode &amp;&amp; httpServer) &#123;</span><br><span class="line">    <span class="comment">// overwrite listen to init optimizer before server start</span></span><br><span class="line">    <span class="keyword">const</span> listen = httpServer.<span class="property">listen</span>.<span class="title function_">bind</span>(httpServer)</span><br><span class="line">    httpServer.<span class="property">listen</span> = (<span class="keyword">async</span> (<span class="attr">port</span>: <span class="built_in">number</span>, ...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ensure ws server started</span></span><br><span class="line">        ws.<span class="title function_">listen</span>()</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">initServer</span>()</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        httpServer.<span class="title function_">emit</span>(<span class="string">&#x27;error&#x27;</span>, e)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">listen</span>(port, ...args)</span><br><span class="line">    &#125;) <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">ws</span>) &#123;</span><br><span class="line">      ws.<span class="title function_">listen</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">initServer</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> server</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码按照功能主要可以分为以下几个部分：</p><ol><li>运行配置的生成，即<code>resolveConfig</code>部分</li><li>定义httpServer及其middleware，后续使用</li><li>定义watcher，用于监听文件变化</li><li>定义moduleGraph，用于存储和分析模块之间的依赖关系</li><li>定义pluginContainer，用于合并所有插件的hook，并对外暴露调用方法</li><li>给watcher监听文件变化的方法添加回调函数，其中会更新moduleGraph，并处理HMR</li><li>给middleware添加需要的中间件，比如进行文件处理的<code>middlewares.use(transformMiddleware(server))</code>，在这个中间件中，会调用pluginContianer的经过聚合之后的transform，具体如何聚合的后面我们专门分析</li><li>返回创建的http服务器，其中有listen，close等函数，可以用来启动服务器。</li></ol><h1 id="Vite的配置生成"><a href="#Vite的配置生成" class="headerlink" title="Vite的配置生成"></a>Vite的配置生成</h1><p>这段的逻辑在我们的resolveConfig中，其中包含了vite是如何进行配置生成与合并的，内容比较多，我们挑选其中几个讲，如果有需要，可以自己去阅读下源码。</p><ol><li>加载配置文件的逻辑</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; configFile &#125; = config</span><br><span class="line"><span class="keyword">if</span> (configFile !== <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> loadResult = <span class="keyword">await</span> <span class="title function_">loadConfigFromFile</span>(</span><br><span class="line">    configEnv,</span><br><span class="line">    configFile,</span><br><span class="line">    config.<span class="property">root</span>,</span><br><span class="line">    config.<span class="property">logLevel</span>,</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (loadResult) &#123;</span><br><span class="line">    config = <span class="title function_">mergeConfig</span>(loadResult.<span class="property">config</span>, config)</span><br><span class="line">    configFile = loadResult.<span class="property">path</span></span><br><span class="line">    configFileDependencies = loadResult.<span class="property">dependencies</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是说，是否有指定配置文件，如果指定了，那就从文件中加载，如果加载到了，进行配置的合并</p><ol><li>插件的过滤机制，即在插件配置中可以定义apply是serve还是build，指定该插件是在vite dev还是vite build时使用</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">filterPlugin</span> = (<span class="params">p: Plugin</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!p.<span class="property">apply</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> p.<span class="property">apply</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> p.<span class="title function_">apply</span>(&#123; ...config, mode &#125;, configEnv)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.<span class="property">apply</span> === command <span class="comment">// command 就是 serve 或者 build，通过解析命令行参数传递进来的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve plugins</span></span><br><span class="line"><span class="keyword">const</span> rawUserPlugins = (</span><br><span class="line">  (<span class="keyword">await</span> <span class="title function_">asyncFlatten</span>(config.<span class="property">plugins</span> || [])) <span class="keyword">as</span> <span class="title class_">Plugin</span>[]</span><br><span class="line">).<span class="title function_">filter</span>(filterPlugin)</span><br></pre></td></tr></table></figure><ol><li>根据enforce进行插件排序</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [prePlugins, normalPlugins, postPlugins] =</span><br><span class="line">    <span class="title function_">sortUserPlugins</span>(rawUserPlugins)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sortUserPlugins</span>(<span class="params"></span></span><br><span class="line"><span class="params">  plugins: (Plugin | Plugin[])[] | <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params"></span>): [<span class="title class_">Plugin</span>[], <span class="title class_">Plugin</span>[], <span class="title class_">Plugin</span>[]] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">prePlugins</span>: <span class="title class_">Plugin</span>[] = []</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">postPlugins</span>: <span class="title class_">Plugin</span>[] = []</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">normalPlugins</span>: <span class="title class_">Plugin</span>[] = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (plugins) &#123;</span><br><span class="line">    plugins.<span class="title function_">flat</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p.<span class="property">enforce</span> === <span class="string">&#x27;pre&#x27;</span>) prePlugins.<span class="title function_">push</span>(p)</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (p.<span class="property">enforce</span> === <span class="string">&#x27;post&#x27;</span>) postPlugins.<span class="title function_">push</span>(p)</span><br><span class="line">      <span class="keyword">else</span> normalPlugins.<span class="title function_">push</span>(p)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [prePlugins, normalPlugins, postPlugins]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>运行所有插件中的config hook，生成配置</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// run config hooks</span></span><br><span class="line"><span class="keyword">const</span> userPlugins = [...prePlugins, ...normalPlugins, ...postPlugins]</span><br><span class="line">config = <span class="keyword">await</span> <span class="title function_">runConfigHook</span>(config, userPlugins, configEnv)</span><br></pre></td></tr></table></figure><h1 id="模块引用图谱"><a href="#模块引用图谱" class="headerlink" title="模块引用图谱"></a>模块引用图谱</h1><p>这段代码的入口：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">moduleGraph</span>: <span class="title class_">ModuleGraph</span> = <span class="keyword">new</span> <span class="title class_">ModuleGraph</span>(<span class="function">(<span class="params">url, ssr</span>) =&gt;</span></span><br><span class="line">  container.<span class="title function_">resolveId</span>(url, <span class="literal">undefined</span>, &#123; ssr &#125;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>还是先把ModuleGraph的所有代码放在这里，然后进行主要的流程分析：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ModuleGraph</span> &#123;</span><br><span class="line">  urlToModuleMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line">  idToModuleMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line">  <span class="comment">// a single file may corresponds to multiple modules with different queries</span></span><br><span class="line">  fileToModulesMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt;&gt;()</span><br><span class="line">  safeModulesPath = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _unresolvedUrlToModuleMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;</span><br><span class="line">    <span class="built_in">string</span>,</span><br><span class="line">    <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleNode</span>&gt; | <span class="title class_">ModuleNode</span></span><br><span class="line">  &gt;()</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _ssrUnresolvedUrlToModuleMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;</span><br><span class="line">    <span class="built_in">string</span>,</span><br><span class="line">    <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleNode</span>&gt; | <span class="title class_">ModuleNode</span></span><br><span class="line">  &gt;()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> resolveId: (</span></span><br><span class="line"><span class="params">      url: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      ssr: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    ) =&gt; <span class="built_in">Promise</span>&lt;PartialResolvedId | <span class="literal">null</span>&gt;,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getModuleByUrl</span>(</span><br><span class="line">    <span class="attr">rawUrl</span>: <span class="built_in">string</span>,</span><br><span class="line">    ssr?: <span class="built_in">boolean</span>,</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleNode</span> | <span class="literal">undefined</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// Quick path, if we already have a module for this rawUrl (even without extension)</span></span><br><span class="line">    rawUrl = <span class="title function_">removeImportQuery</span>(<span class="title function_">removeTimestampQuery</span>(rawUrl))</span><br><span class="line">    <span class="keyword">const</span> mod = <span class="variable language_">this</span>.<span class="title function_">_getUnresolvedUrlToModule</span>(rawUrl, ssr)</span><br><span class="line">    <span class="keyword">if</span> (mod) &#123;</span><br><span class="line">      <span class="keyword">return</span> mod</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [url] = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">_resolveUrl</span>(rawUrl, ssr)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">urlToModuleMap</span>.<span class="title function_">get</span>(url)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getModuleById</span>(<span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">ModuleNode</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">idToModuleMap</span>.<span class="title function_">get</span>(<span class="title function_">removeTimestampQuery</span>(id))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getModulesByFile</span>(<span class="attr">file</span>: <span class="built_in">string</span>): <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt; | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fileToModulesMap</span>.<span class="title function_">get</span>(file)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onFileChange</span>(<span class="attr">file</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mods = <span class="variable language_">this</span>.<span class="title function_">getModulesByFile</span>(file)</span><br><span class="line">    <span class="keyword">if</span> (mods) &#123;</span><br><span class="line">      <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line">      mods.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mod</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">invalidateModule</span>(mod, seen)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">invalidateModule</span>(</span><br><span class="line">    <span class="attr">mod</span>: <span class="title class_">ModuleNode</span>,</span><br><span class="line">    <span class="attr">seen</span>: <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>(),</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="built_in">number</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">    <span class="attr">isHmr</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">hmrBoundaries</span>: <span class="title class_">ModuleNode</span>[] = [],</span><br><span class="line">    softInvalidate = <span class="literal">false</span>,</span><br><span class="line">  ): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> prevInvalidationState = mod.<span class="property">invalidationState</span></span><br><span class="line">    <span class="keyword">const</span> prevSsrInvalidationState = mod.<span class="property">ssrInvalidationState</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle soft invalidation before the `seen` check, as consecutive soft/hard invalidations can</span></span><br><span class="line">    <span class="comment">// cause the final soft invalidation state to be different.</span></span><br><span class="line">    <span class="comment">// If soft invalidated, save the previous `transformResult` so that we can reuse and transform the</span></span><br><span class="line">    <span class="comment">// import timestamps only in `transformRequest`. If there&#x27;s no previous `transformResult`, hard invalidate it.</span></span><br><span class="line">    <span class="keyword">if</span> (softInvalidate) &#123;</span><br><span class="line">      mod.<span class="property">invalidationState</span> ??= mod.<span class="property">transformResult</span> ?? <span class="string">&#x27;HARD_INVALIDATED&#x27;</span></span><br><span class="line">      mod.<span class="property">ssrInvalidationState</span> ??= mod.<span class="property">ssrTransformResult</span> ?? <span class="string">&#x27;HARD_INVALIDATED&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If hard invalidated, further soft invalidations have no effect until it&#x27;s reset to `undefined`</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      mod.<span class="property">invalidationState</span> = <span class="string">&#x27;HARD_INVALIDATED&#x27;</span></span><br><span class="line">      mod.<span class="property">ssrInvalidationState</span> = <span class="string">&#x27;HARD_INVALIDATED&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Skip updating the module if it was already invalidated before and the invalidation state has not changed</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      seen.<span class="title function_">has</span>(mod) &amp;&amp;</span><br><span class="line">      prevInvalidationState === mod.<span class="property">invalidationState</span> &amp;&amp;</span><br><span class="line">      prevSsrInvalidationState === mod.<span class="property">ssrInvalidationState</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    seen.<span class="title function_">add</span>(mod)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isHmr) &#123;</span><br><span class="line">      mod.<span class="property">lastHMRTimestamp</span> = timestamp</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Save the timestamp for this invalidation, so we can avoid caching the result of possible already started</span></span><br><span class="line">      <span class="comment">// processing being done for this module</span></span><br><span class="line">      mod.<span class="property">lastInvalidationTimestamp</span> = timestamp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Don&#x27;t invalidate mod.info and mod.meta, as they are part of the processing pipeline</span></span><br><span class="line">    <span class="comment">// Invalidating the transform result is enough to ensure this module is re-processed next time it is requested</span></span><br><span class="line">    mod.<span class="property">transformResult</span> = <span class="literal">null</span></span><br><span class="line">    mod.<span class="property">ssrTransformResult</span> = <span class="literal">null</span></span><br><span class="line">    mod.<span class="property">ssrModule</span> = <span class="literal">null</span></span><br><span class="line">    mod.<span class="property">ssrError</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://github.com/vitejs/vite/issues/3033</span></span><br><span class="line">    <span class="comment">// Given b.js -&gt; c.js -&gt; b.js (arrow means top-level import), if c.js self-accepts</span></span><br><span class="line">    <span class="comment">// and refetches itself, the execution order becomes c.js -&gt; b.js -&gt; c.js. The import</span></span><br><span class="line">    <span class="comment">// order matters here as it will fail. The workaround for now is to not hmr invalidate</span></span><br><span class="line">    <span class="comment">// b.js so that c.js refetches the already cached b.js, skipping the import loop.</span></span><br><span class="line">    <span class="keyword">if</span> (hmrBoundaries.<span class="title function_">includes</span>(mod)) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    mod.<span class="property">importers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">importer</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!importer.<span class="property">acceptedHmrDeps</span>.<span class="title function_">has</span>(mod)) &#123;</span><br><span class="line">        <span class="comment">// If the importer statically imports the current module, we can soft-invalidate the importer</span></span><br><span class="line">        <span class="comment">// to only update the import timestamps. If it&#x27;s not statically imported, e.g. watched/glob file,</span></span><br><span class="line">        <span class="comment">// we can only soft invalidate if the current module was also soft-invalidated. A soft-invalidation</span></span><br><span class="line">        <span class="comment">// doesn&#x27;t need to trigger a re-load and re-transform of the importer.</span></span><br><span class="line">        <span class="keyword">const</span> shouldSoftInvalidateImporter =</span><br><span class="line">          importer.<span class="property">staticImportedUrls</span>?.<span class="title function_">has</span>(mod.<span class="property">url</span>) || softInvalidate</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">invalidateModule</span>(</span><br><span class="line">          importer,</span><br><span class="line">          seen,</span><br><span class="line">          timestamp,</span><br><span class="line">          isHmr,</span><br><span class="line">          <span class="literal">undefined</span>,</span><br><span class="line">          shouldSoftInvalidateImporter,</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">invalidateAll</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">idToModuleMap</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mod</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">invalidateModule</span>(mod, seen, timestamp)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Update the module graph based on a module&#x27;s updated imports information</span></span><br><span class="line"><span class="comment">   * If there are dependencies that no longer have any importers, they are</span></span><br><span class="line"><span class="comment">   * returned as a Set.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> staticImportedUrls Subset of `importedModules` where they&#x27;re statically imported in code.</span></span><br><span class="line"><span class="comment">   *   This is only used for soft invalidations so `undefined` is fine but may cause more runtime processing.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">updateModuleInfo</span>(</span><br><span class="line">    <span class="attr">mod</span>: <span class="title class_">ModuleNode</span>,</span><br><span class="line">    <span class="attr">importedModules</span>: <span class="title class_">Set</span>&lt;<span class="built_in">string</span> | <span class="title class_">ModuleNode</span>&gt;,</span><br><span class="line">    <span class="attr">importedBindings</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;&gt; | <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">acceptedModules</span>: <span class="title class_">Set</span>&lt;<span class="built_in">string</span> | <span class="title class_">ModuleNode</span>&gt;,</span><br><span class="line">    <span class="attr">acceptedExports</span>: <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt; | <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">isSelfAccepting</span>: <span class="built_in">boolean</span>,</span><br><span class="line">    ssr?: <span class="built_in">boolean</span>,</span><br><span class="line">    staticImportedUrls?: <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;,</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt; | <span class="literal">undefined</span>&gt; &#123;</span><br><span class="line">    mod.<span class="property">isSelfAccepting</span> = isSelfAccepting</span><br><span class="line">    <span class="keyword">const</span> prevImports = ssr ? mod.<span class="property">ssrImportedModules</span> : mod.<span class="property">clientImportedModules</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">noLongerImported</span>: <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt; | <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> resolvePromises = []</span><br><span class="line">    <span class="keyword">let</span> resolveResults = <span class="keyword">new</span> <span class="title class_">Array</span>(importedModules.<span class="property">size</span>)</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="comment">// update import graph</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> imported <span class="keyword">of</span> importedModules) &#123;</span><br><span class="line">      <span class="keyword">const</span> nextIndex = index++</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> imported === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        resolvePromises.<span class="title function_">push</span>(</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">ensureEntryFromUrl</span>(imported, ssr).<span class="title function_">then</span>(<span class="function">(<span class="params">dep</span>) =&gt;</span> &#123;</span><br><span class="line">            dep.<span class="property">importers</span>.<span class="title function_">add</span>(mod)</span><br><span class="line">            resolveResults[nextIndex] = dep</span><br><span class="line">          &#125;),</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        imported.<span class="property">importers</span>.<span class="title function_">add</span>(mod)</span><br><span class="line">        resolveResults[nextIndex] = imported</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resolvePromises.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(resolvePromises)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> nextImports = <span class="keyword">new</span> <span class="title class_">Set</span>(resolveResults)</span><br><span class="line">    <span class="keyword">if</span> (ssr) &#123;</span><br><span class="line">      mod.<span class="property">ssrImportedModules</span> = nextImports</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mod.<span class="property">clientImportedModules</span> = nextImports</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove the importer from deps that were imported but no longer are.</span></span><br><span class="line">    prevImports.<span class="title function_">forEach</span>(<span class="function">(<span class="params">dep</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !mod.<span class="property">clientImportedModules</span>.<span class="title function_">has</span>(dep) &amp;&amp;</span><br><span class="line">        !mod.<span class="property">ssrImportedModules</span>.<span class="title function_">has</span>(dep)</span><br><span class="line">      ) &#123;</span><br><span class="line">        dep.<span class="property">importers</span>.<span class="title function_">delete</span>(mod)</span><br><span class="line">        <span class="keyword">if</span> (!dep.<span class="property">importers</span>.<span class="property">size</span>) &#123;</span><br><span class="line">          <span class="comment">// dependency no longer imported</span></span><br><span class="line">          ;(noLongerImported || (noLongerImported = <span class="keyword">new</span> <span class="title class_">Set</span>())).<span class="title function_">add</span>(dep)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update accepted hmr deps</span></span><br><span class="line">    resolvePromises = []</span><br><span class="line">    resolveResults = <span class="keyword">new</span> <span class="title class_">Array</span>(acceptedModules.<span class="property">size</span>)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> accepted <span class="keyword">of</span> acceptedModules) &#123;</span><br><span class="line">      <span class="keyword">const</span> nextIndex = index++</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> accepted === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        resolvePromises.<span class="title function_">push</span>(</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">ensureEntryFromUrl</span>(accepted, ssr).<span class="title function_">then</span>(<span class="function">(<span class="params">dep</span>) =&gt;</span> &#123;</span><br><span class="line">            resolveResults[nextIndex] = dep</span><br><span class="line">          &#125;),</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolveResults[nextIndex] = accepted</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resolvePromises.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(resolvePromises)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mod.<span class="property">acceptedHmrDeps</span> = <span class="keyword">new</span> <span class="title class_">Set</span>(resolveResults)</span><br><span class="line">    mod.<span class="property">staticImportedUrls</span> = staticImportedUrls</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update accepted hmr exports</span></span><br><span class="line">    mod.<span class="property">acceptedHmrExports</span> = acceptedExports</span><br><span class="line">    mod.<span class="property">importedBindings</span> = importedBindings</span><br><span class="line">    <span class="keyword">return</span> noLongerImported</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">ensureEntryFromUrl</span>(</span><br><span class="line">    <span class="attr">rawUrl</span>: <span class="built_in">string</span>,</span><br><span class="line">    ssr?: <span class="built_in">boolean</span>,</span><br><span class="line">    setIsSelfAccepting = <span class="literal">true</span>,</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleNode</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_ensureEntryFromUrl</span>(rawUrl, ssr, setIsSelfAccepting)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">_ensureEntryFromUrl</span>(</span><br><span class="line">    <span class="attr">rawUrl</span>: <span class="built_in">string</span>,</span><br><span class="line">    ssr?: <span class="built_in">boolean</span>,</span><br><span class="line">    setIsSelfAccepting = <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Optimization, avoid resolving the same url twice if the caller already did it</span></span><br><span class="line">    resolved?: <span class="title class_">PartialResolvedId</span>,</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleNode</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// Quick path, if we already have a module for this rawUrl (even without extension)</span></span><br><span class="line">    rawUrl = <span class="title function_">removeImportQuery</span>(<span class="title function_">removeTimestampQuery</span>(rawUrl))</span><br><span class="line">    <span class="keyword">let</span> mod = <span class="variable language_">this</span>.<span class="title function_">_getUnresolvedUrlToModule</span>(rawUrl, ssr)</span><br><span class="line">    <span class="keyword">if</span> (mod) &#123;</span><br><span class="line">      <span class="keyword">return</span> mod</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> modPromise = (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> [url, resolvedId, meta] = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">_resolveUrl</span>(</span><br><span class="line">        rawUrl,</span><br><span class="line">        ssr,</span><br><span class="line">        resolved,</span><br><span class="line">      )</span><br><span class="line">      mod = <span class="variable language_">this</span>.<span class="property">idToModuleMap</span>.<span class="title function_">get</span>(resolvedId)</span><br><span class="line">      <span class="keyword">if</span> (!mod) &#123;</span><br><span class="line">        mod = <span class="keyword">new</span> <span class="title class_">ModuleNode</span>(url, setIsSelfAccepting)</span><br><span class="line">        <span class="keyword">if</span> (meta) mod.<span class="property">meta</span> = meta</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">urlToModuleMap</span>.<span class="title function_">set</span>(url, mod)</span><br><span class="line">        mod.<span class="property">id</span> = resolvedId</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">idToModuleMap</span>.<span class="title function_">set</span>(resolvedId, mod)</span><br><span class="line">        <span class="keyword">const</span> file = (mod.<span class="property">file</span> = <span class="title function_">cleanUrl</span>(resolvedId))</span><br><span class="line">        <span class="keyword">let</span> fileMappedModules = <span class="variable language_">this</span>.<span class="property">fileToModulesMap</span>.<span class="title function_">get</span>(file)</span><br><span class="line">        <span class="keyword">if</span> (!fileMappedModules) &#123;</span><br><span class="line">          fileMappedModules = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">fileToModulesMap</span>.<span class="title function_">set</span>(file, fileMappedModules)</span><br><span class="line">        &#125;</span><br><span class="line">        fileMappedModules.<span class="title function_">add</span>(mod)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// multiple urls can map to the same module and id, make sure we register</span></span><br><span class="line">      <span class="comment">// the url to the existing module in that case</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">urlToModuleMap</span>.<span class="title function_">has</span>(url)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">urlToModuleMap</span>.<span class="title function_">set</span>(url, mod)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_setUnresolvedUrlToModule</span>(rawUrl, mod, ssr)</span><br><span class="line">      <span class="keyword">return</span> mod</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Also register the clean url to the module, so that we can short-circuit</span></span><br><span class="line">    <span class="comment">// resolving the same url twice</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_setUnresolvedUrlToModule</span>(rawUrl, modPromise, ssr)</span><br><span class="line">    <span class="keyword">return</span> modPromise</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// some deps, like a css file referenced via @import, don&#x27;t have its own</span></span><br><span class="line">  <span class="comment">// url because they are inlined into the main css import. But they still</span></span><br><span class="line">  <span class="comment">// need to be represented in the module graph so that they can trigger</span></span><br><span class="line">  <span class="comment">// hmr in the importing css file.</span></span><br><span class="line">  <span class="title function_">createFileOnlyEntry</span>(<span class="attr">file</span>: <span class="built_in">string</span>): <span class="title class_">ModuleNode</span> &#123;</span><br><span class="line">    file = <span class="title function_">normalizePath</span>(file)</span><br><span class="line">    <span class="keyword">let</span> fileMappedModules = <span class="variable language_">this</span>.<span class="property">fileToModulesMap</span>.<span class="title function_">get</span>(file)</span><br><span class="line">    <span class="keyword">if</span> (!fileMappedModules) &#123;</span><br><span class="line">      fileMappedModules = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileToModulesMap</span>.<span class="title function_">set</span>(file, fileMappedModules)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;FS_PREFIX&#125;</span><span class="subst">$&#123;file&#125;</span>`</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> m <span class="keyword">of</span> fileMappedModules) &#123;</span><br><span class="line">      <span class="keyword">if</span> (m.<span class="property">url</span> === url || m.<span class="property">id</span> === file) &#123;</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mod = <span class="keyword">new</span> <span class="title class_">ModuleNode</span>(url)</span><br><span class="line">    mod.<span class="property">file</span> = file</span><br><span class="line">    fileMappedModules.<span class="title function_">add</span>(mod)</span><br><span class="line">    <span class="keyword">return</span> mod</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for incoming urls, it is important to:</span></span><br><span class="line">  <span class="comment">// 1. remove the HMR timestamp query (?t=xxxx) and the ?import query</span></span><br><span class="line">  <span class="comment">// 2. resolve its extension so that urls with or without extension all map to</span></span><br><span class="line">  <span class="comment">// the same module</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">resolveUrl</span>(<span class="attr">url</span>: <span class="built_in">string</span>, ssr?: <span class="built_in">boolean</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ResolvedUrl</span>&gt; &#123;</span><br><span class="line">    url = <span class="title function_">removeImportQuery</span>(<span class="title function_">removeTimestampQuery</span>(url))</span><br><span class="line">    <span class="keyword">const</span> mod = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">_getUnresolvedUrlToModule</span>(url, ssr)</span><br><span class="line">    <span class="keyword">if</span> (mod?.<span class="property">id</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [mod.<span class="property">url</span>, mod.<span class="property">id</span>, mod.<span class="property">meta</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_resolveUrl</span>(url, ssr)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">_getUnresolvedUrlToModule</span>(</span><br><span class="line">    <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">    ssr?: <span class="built_in">boolean</span>,</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleNode</span>&gt; | <span class="title class_">ModuleNode</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      ssr ? <span class="variable language_">this</span>.<span class="property">_ssrUnresolvedUrlToModuleMap</span> : <span class="variable language_">this</span>.<span class="property">_unresolvedUrlToModuleMap</span></span><br><span class="line">    ).<span class="title function_">get</span>(url)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">_setUnresolvedUrlToModule</span>(</span><br><span class="line">    <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">mod</span>: <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleNode</span>&gt; | <span class="title class_">ModuleNode</span>,</span><br><span class="line">    ssr?: <span class="built_in">boolean</span>,</span><br><span class="line">  ): <span class="built_in">void</span> &#123;</span><br><span class="line">    ;(ssr</span><br><span class="line">      ? <span class="variable language_">this</span>.<span class="property">_ssrUnresolvedUrlToModuleMap</span></span><br><span class="line">      : <span class="variable language_">this</span>.<span class="property">_unresolvedUrlToModuleMap</span></span><br><span class="line">    ).<span class="title function_">set</span>(url, mod)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@internal</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">_resolveUrl</span>(</span><br><span class="line">    <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">    ssr?: <span class="built_in">boolean</span>,</span><br><span class="line">    alreadyResolved?: <span class="title class_">PartialResolvedId</span>,</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">ResolvedUrl</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> resolved = alreadyResolved ?? (<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">resolveId</span>(url, !!ssr))</span><br><span class="line">    <span class="keyword">const</span> resolvedId = resolved?.<span class="property">id</span> || url</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      url !== resolvedId &amp;&amp;</span><br><span class="line">      !url.<span class="title function_">includes</span>(<span class="string">&#x27;\0&#x27;</span>) &amp;&amp;</span><br><span class="line">      !url.<span class="title function_">startsWith</span>(<span class="string">`virtual:`</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">const</span> ext = <span class="title function_">extname</span>(<span class="title function_">cleanUrl</span>(resolvedId))</span><br><span class="line">      <span class="keyword">if</span> (ext) &#123;</span><br><span class="line">        <span class="keyword">const</span> pathname = <span class="title function_">cleanUrl</span>(url)</span><br><span class="line">        <span class="keyword">if</span> (!pathname.<span class="title function_">endsWith</span>(ext)) &#123;</span><br><span class="line">          url = pathname + ext + url.<span class="title function_">slice</span>(pathname.<span class="property">length</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [url, resolvedId, resolved?.<span class="property">meta</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h2><p>首先，ModuleGraph中有几个私有变量，存储了模块之间的映射关系，即：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlToModuleMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line">idToModuleMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line"><span class="comment">// a single file may corresponds to multiple modules with different queries</span></span><br><span class="line">fileToModulesMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt;&gt;()</span><br></pre></td></tr></table></figure><p>这几个变量分别是url，文件id和文件路径与module之间的映射关系，其中fileToModulesMap比较特殊，因为一个文件可能编译出来不止一个模块。</p><p>获取这几个变量中的数据，也是通过对外暴露的方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getModuleByUrl</span>(</span><br><span class="line">  <span class="attr">rawUrl</span>: <span class="built_in">string</span>,</span><br><span class="line">  ssr?: <span class="built_in">boolean</span>,</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleNode</span> | <span class="literal">undefined</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// Quick path, if we already have a module for this rawUrl (even without extension)</span></span><br><span class="line">  rawUrl = <span class="title function_">removeImportQuery</span>(<span class="title function_">removeTimestampQuery</span>(rawUrl))</span><br><span class="line">  <span class="keyword">const</span> mod = <span class="variable language_">this</span>.<span class="title function_">_getUnresolvedUrlToModule</span>(rawUrl, ssr)</span><br><span class="line">  <span class="keyword">if</span> (mod) &#123;</span><br><span class="line">    <span class="keyword">return</span> mod</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [url] = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">_resolveUrl</span>(rawUrl, ssr)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">urlToModuleMap</span>.<span class="title function_">get</span>(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getModuleById</span>(<span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">ModuleNode</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">idToModuleMap</span>.<span class="title function_">get</span>(<span class="title function_">removeTimestampQuery</span>(id))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getModulesByFile</span>(<span class="attr">file</span>: <span class="built_in">string</span>): <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt; | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fileToModulesMap</span>.<span class="title function_">get</span>(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件更改时的处理逻辑"><a href="#文件更改时的处理逻辑" class="headerlink" title="文件更改时的处理逻辑"></a>文件更改时的处理逻辑</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onFileChange</span>(<span class="attr">file</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mods = <span class="variable language_">this</span>.<span class="title function_">getModulesByFile</span>(file)</span><br><span class="line">  <span class="keyword">if</span> (mods) &#123;</span><br><span class="line">    <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line">    mods.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mod</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">invalidateModule</span>(mod, seen)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码简单来说，就是找到更改文件对应的module，然后将其变为invalid状态，其中的seen参数是为了防止重复处理</p><h2 id="更新模块信息"><a href="#更新模块信息" class="headerlink" title="更新模块信息"></a>更新模块信息</h2><p>即<code>updateModuleInfo</code>函数，当模块更新时，需要重新更新它的引用和被引用关系</p><h2 id="启动时生成内部变量"><a href="#启动时生成内部变量" class="headerlink" title="启动时生成内部变量"></a>启动时生成内部变量</h2><p>即<code>ensureEntryFromUrl</code>函数，主要作用就是在项目启动时分析以来，并为内部的三个主要变量进行赋值。</p><h1 id="插件调用机制"><a href="#插件调用机制" class="headerlink" title="插件调用机制"></a>插件调用机制</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="keyword">await</span> <span class="title function_">createPluginContainer</span>(config, moduleGraph, watcher)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createPluginContainer</span>(<span class="params"></span></span><br><span class="line"><span class="params">  config: ResolvedConfig,</span></span><br><span class="line"><span class="params">  moduleGraph?: ModuleGraph,</span></span><br><span class="line"><span class="params">  watcher?: FSWatcher,</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">PluginContainer</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    plugins,</span><br><span class="line">    logger,</span><br><span class="line">    root,</span><br><span class="line">    <span class="attr">build</span>: &#123; rollupOptions &#125;,</span><br><span class="line">  &#125; = config</span><br><span class="line">  <span class="keyword">const</span> &#123; getSortedPluginHooks, getSortedPlugins &#125; =</span><br><span class="line">    <span class="title function_">createPluginHookUtils</span>(plugins)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">seenResolves</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="literal">true</span> | <span class="literal">undefined</span>&gt; = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> debugResolve = <span class="title function_">createDebugger</span>(<span class="string">&#x27;vite:resolve&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> debugPluginResolve = <span class="title function_">createDebugger</span>(<span class="string">&#x27;vite:plugin-resolve&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">onlyWhenFocused</span>: <span class="string">&#x27;vite:plugin&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> debugPluginTransform = <span class="title function_">createDebugger</span>(<span class="string">&#x27;vite:plugin-transform&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">onlyWhenFocused</span>: <span class="string">&#x27;vite:plugin&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> debugSourcemapCombineFilter =</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">DEBUG_VITE_SOURCEMAP_COMBINE_FILTER</span></span><br><span class="line">  <span class="keyword">const</span> debugSourcemapCombine = <span class="title function_">createDebugger</span>(<span class="string">&#x27;vite:sourcemap-combine&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">onlyWhenFocused</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> watchFiles = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">minimalContext</span>: <span class="title class_">MinimalPluginContext</span> = &#123;</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      rollupVersion,</span><br><span class="line">      <span class="attr">watchMode</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">debug</span>: noop,</span><br><span class="line">    <span class="attr">info</span>: noop,</span><br><span class="line">    <span class="attr">warn</span>: noop,</span><br><span class="line">    <span class="comment">// @ts-expect-error noop</span></span><br><span class="line">    <span class="attr">error</span>: noop,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">warnIncompatibleMethod</span>(<span class="params">method: <span class="built_in">string</span>, plugin: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    logger.<span class="title function_">warn</span>(</span><br><span class="line">      colors.<span class="title function_">cyan</span>(<span class="string">`[plugin:<span class="subst">$&#123;plugin&#125;</span>] `</span>) +</span><br><span class="line">        colors.<span class="title function_">yellow</span>(</span><br><span class="line">          <span class="string">`context method <span class="subst">$&#123;colors.bold(</span></span></span><br><span class="line"><span class="subst"><span class="string">            <span class="string">`<span class="subst">$&#123;method&#125;</span>()`</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">          )&#125;</span> is not supported in serve mode. This plugin is likely not vite-compatible.`</span>,</span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// parallel, ignores returns</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> hookParallel&lt;H <span class="keyword">extends</span> <span class="title class_">AsyncPluginHooks</span> &amp; <span class="title class_">ParallelPluginHooks</span>&gt;(</span><br><span class="line">    <span class="attr">hookName</span>: H,</span><br><span class="line">    <span class="attr">context</span>: <span class="function">(<span class="params">plugin: Plugin</span>) =&gt;</span> <span class="title class_">ThisType</span>&lt;<span class="title class_">FunctionPluginHooks</span>[H]&gt;,</span><br><span class="line">    <span class="attr">args</span>: <span class="function">(<span class="params">plugin: Plugin</span>) =&gt;</span> <span class="title class_">Parameters</span>&lt;<span class="title class_">FunctionPluginHooks</span>[H]&gt;,</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">parallelPromises</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">unknown</span>&gt;[] = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="title function_">getSortedPlugins</span>(hookName)) &#123;</span><br><span class="line">      <span class="comment">// Don&#x27;t throw here if closed, so buildEnd and closeBundle hooks can finish running</span></span><br><span class="line">      <span class="keyword">const</span> hook = plugin[hookName]</span><br><span class="line">      <span class="keyword">if</span> (!hook) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">handler</span>: <span class="title class_">Function</span> = <span class="title function_">getHookHandler</span>(hook)</span><br><span class="line">      <span class="keyword">if</span> ((hook <span class="keyword">as</span> &#123; sequential?: <span class="built_in">boolean</span> &#125;).<span class="property">sequential</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(parallelPromises)</span><br><span class="line">        parallelPromises.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">await</span> handler.<span class="title function_">apply</span>(<span class="title function_">context</span>(plugin), <span class="title function_">args</span>(plugin))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parallelPromises.<span class="title function_">push</span>(handler.<span class="title function_">apply</span>(<span class="title function_">context</span>(plugin), <span class="title function_">args</span>(plugin)))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(parallelPromises)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// throw when an unsupported ModuleInfo property is accessed,</span></span><br><span class="line">  <span class="comment">// so that incompatible plugins fail in a non-cryptic way.</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ModuleInfoProxy</span>: <span class="title class_">ProxyHandler</span>&lt;<span class="title class_">ModuleInfo</span>&gt; = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">info: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key <span class="keyword">in</span> info) &#123;</span><br><span class="line">        <span class="keyword">return</span> info[key]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Don&#x27;t throw an error when returning from an async function</span></span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;then&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>(</span><br><span class="line">        <span class="string">`[vite] The &quot;<span class="subst">$&#123;key&#125;</span>&quot; property of ModuleInfo is not supported.`</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// same default value of &quot;moduleInfo.meta&quot; as in Rollup</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">EMPTY_OBJECT</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getModuleInfo</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">module</span> = moduleGraph?.<span class="title function_">getModuleById</span>(id)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">module</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">module</span>.<span class="property">info</span>) &#123;</span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">info</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">        &#123; id, <span class="attr">meta</span>: <span class="variable language_">module</span>.<span class="property">meta</span> || <span class="variable constant_">EMPTY_OBJECT</span> &#125; <span class="keyword">as</span> <span class="title class_">ModuleInfo</span>,</span><br><span class="line">        <span class="title class_">ModuleInfoProxy</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">info</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">updateModuleInfo</span>(<span class="params">id: <span class="built_in">string</span>, &#123; meta &#125;: &#123; meta?: <span class="built_in">object</span> | <span class="literal">null</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (meta) &#123;</span><br><span class="line">      <span class="keyword">const</span> moduleInfo = <span class="title function_">getModuleInfo</span>(id)</span><br><span class="line">      <span class="keyword">if</span> (moduleInfo) &#123;</span><br><span class="line">        moduleInfo.<span class="property">meta</span> = &#123; ...moduleInfo.<span class="property">meta</span>, ...meta &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we should create a new context for each async hook pipeline so that the</span></span><br><span class="line">  <span class="comment">// active plugin in that pipeline can be tracked in a concurrency-safe manner.</span></span><br><span class="line">  <span class="comment">// using a class to make creating new contexts more efficient</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Context</span> <span class="keyword">implements</span> <span class="title class_">PluginContext</span> &#123;</span><br><span class="line">    meta = minimalContext.<span class="property">meta</span></span><br><span class="line">    ssr = <span class="literal">false</span></span><br><span class="line">    _scan = <span class="literal">false</span></span><br><span class="line">    <span class="attr">_activePlugin</span>: <span class="title class_">Plugin</span> | <span class="literal">null</span></span><br><span class="line">    <span class="attr">_activeId</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">    <span class="attr">_activeCode</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">    _resolveSkips?: <span class="title class_">Set</span>&lt;<span class="title class_">Plugin</span>&gt;</span><br><span class="line">    <span class="attr">_addedImports</span>: <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt; | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">initialPlugin?: Plugin</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_activePlugin</span> = initialPlugin || <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">parse</span>(<span class="params">code: <span class="built_in">string</span>, opts: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">rollupParseAst</span>(code, opts)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">resolve</span>(<span class="params"></span></span><br><span class="line"><span class="params">      id: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      importer?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">      options?: &#123;</span></span><br><span class="line"><span class="params">        attributes?: Record&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span></span><br><span class="line"><span class="params">        custom?: CustomPluginOptions</span></span><br><span class="line"><span class="params">        isEntry?: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">        skipSelf?: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">      &#125;,</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="attr">skip</span>: <span class="title class_">Set</span>&lt;<span class="title class_">Plugin</span>&gt; | <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">if</span> (options?.<span class="property">skipSelf</span> !== <span class="literal">false</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_activePlugin</span>) &#123;</span><br><span class="line">        skip = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">this</span>.<span class="property">_resolveSkips</span>)</span><br><span class="line">        skip.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">_activePlugin</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> out = <span class="keyword">await</span> container.<span class="title function_">resolveId</span>(id, importer, &#123;</span><br><span class="line">        <span class="attr">attributes</span>: options?.<span class="property">attributes</span>,</span><br><span class="line">        <span class="attr">custom</span>: options?.<span class="property">custom</span>,</span><br><span class="line">        <span class="attr">isEntry</span>: !!options?.<span class="property">isEntry</span>,</span><br><span class="line">        skip,</span><br><span class="line">        <span class="attr">ssr</span>: <span class="variable language_">this</span>.<span class="property">ssr</span>,</span><br><span class="line">        <span class="attr">scan</span>: <span class="variable language_">this</span>.<span class="property">_scan</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> out === <span class="string">&#x27;string&#x27;</span>) out = &#123; <span class="attr">id</span>: out &#125;</span><br><span class="line">      <span class="keyword">return</span> out <span class="keyword">as</span> <span class="title class_">ResolvedId</span> | <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">load</span>(</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">        resolveDependencies?: <span class="built_in">boolean</span></span><br><span class="line">      &#125; &amp; <span class="title class_">Partial</span>&lt;<span class="title class_">PartialNull</span>&lt;<span class="title class_">ModuleOptions</span>&gt;&gt;,</span><br><span class="line">    ): <span class="title class_">Promise</span>&lt;<span class="title class_">ModuleInfo</span>&gt; &#123;</span><br><span class="line">      <span class="comment">// We may not have added this to our module graph yet, so ensure it exists</span></span><br><span class="line">      <span class="keyword">await</span> moduleGraph?.<span class="title function_">ensureEntryFromUrl</span>(<span class="title function_">unwrapId</span>(options.<span class="property">id</span>), <span class="variable language_">this</span>.<span class="property">ssr</span>)</span><br><span class="line">      <span class="comment">// Not all options passed to this function make sense in the context of loading individual files,</span></span><br><span class="line">      <span class="comment">// but we can at least update the module info properties we support</span></span><br><span class="line">      <span class="title function_">updateModuleInfo</span>(options.<span class="property">id</span>, options)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> container.<span class="title function_">load</span>(options.<span class="property">id</span>, &#123; <span class="attr">ssr</span>: <span class="variable language_">this</span>.<span class="property">ssr</span> &#125;)</span><br><span class="line">      <span class="keyword">const</span> moduleInfo = <span class="variable language_">this</span>.<span class="title function_">getModuleInfo</span>(options.<span class="property">id</span>)</span><br><span class="line">      <span class="comment">// This shouldn&#x27;t happen due to calling ensureEntryFromUrl, but 1) our types can&#x27;t ensure that</span></span><br><span class="line">      <span class="comment">// and 2) moduleGraph may not have been provided (though in the situations where that happens,</span></span><br><span class="line">      <span class="comment">// we should never have plugins calling this.load)</span></span><br><span class="line">      <span class="keyword">if</span> (!moduleInfo)</span><br><span class="line">        <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`Failed to load module with id <span class="subst">$&#123;options.id&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> moduleInfo</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getModuleInfo</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getModuleInfo</span>(id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getModuleIds</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> moduleGraph</span><br><span class="line">        ? moduleGraph.<span class="property">idToModuleMap</span>.<span class="title function_">keys</span>()</span><br><span class="line">        : <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addWatchFile</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      watchFiles.<span class="title function_">add</span>(id)</span><br><span class="line">      ;(<span class="variable language_">this</span>.<span class="property">_addedImports</span> || (<span class="variable language_">this</span>.<span class="property">_addedImports</span> = <span class="keyword">new</span> <span class="title class_">Set</span>())).<span class="title function_">add</span>(id)</span><br><span class="line">      <span class="keyword">if</span> (watcher) <span class="title function_">ensureWatchedFile</span>(watcher, id, root)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getWatchFiles</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [...watchFiles]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">emitFile</span>(<span class="params">assetOrFile: EmittedFile</span>) &#123;</span><br><span class="line">      <span class="title function_">warnIncompatibleMethod</span>(<span class="string">`emitFile`</span>, <span class="variable language_">this</span>.<span class="property">_activePlugin</span>!.<span class="property">name</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setAssetSource</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">warnIncompatibleMethod</span>(<span class="string">`setAssetSource`</span>, <span class="variable language_">this</span>.<span class="property">_activePlugin</span>!.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getFileName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">warnIncompatibleMethod</span>(<span class="string">`getFileName`</span>, <span class="variable language_">this</span>.<span class="property">_activePlugin</span>!.<span class="property">name</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">warn</span>(<span class="params"></span></span><br><span class="line"><span class="params">      e: <span class="built_in">string</span> | RollupLog | (() =&gt; <span class="built_in">string</span> | RollupLog),</span></span><br><span class="line"><span class="params">      position?: <span class="built_in">number</span> | &#123; column: <span class="built_in">number</span>; line: <span class="built_in">number</span> &#125;,</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> err = <span class="title function_">formatError</span>(<span class="keyword">typeof</span> e === <span class="string">&#x27;function&#x27;</span> ? <span class="title function_">e</span>() : e, position, <span class="variable language_">this</span>)</span><br><span class="line">      <span class="keyword">const</span> msg = <span class="title function_">buildErrorMessage</span>(</span><br><span class="line">        err,</span><br><span class="line">        [colors.<span class="title function_">yellow</span>(<span class="string">`warning: <span class="subst">$&#123;err.message&#125;</span>`</span>)],</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">      )</span><br><span class="line">      logger.<span class="title function_">warn</span>(msg, &#123;</span><br><span class="line">        <span class="attr">clear</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">error</span>(</span><br><span class="line">      <span class="attr">e</span>: <span class="built_in">string</span> | <span class="title class_">RollupError</span>,</span><br><span class="line">      position?: <span class="built_in">number</span> | &#123; <span class="attr">column</span>: <span class="built_in">number</span>; <span class="attr">line</span>: <span class="built_in">number</span> &#125;,</span><br><span class="line">    ): <span class="built_in">never</span> &#123;</span><br><span class="line">      <span class="comment">// error thrown here is caught by the transform middleware and passed on</span></span><br><span class="line">      <span class="comment">// the the error middleware.</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="title function_">formatError</span>(e, position, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debug = noop</span><br><span class="line">    info = noop</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">formatError</span>(<span class="params"></span></span><br><span class="line"><span class="params">    e: <span class="built_in">string</span> | RollupError,</span></span><br><span class="line"><span class="params">    position: <span class="built_in">number</span> | &#123; column: <span class="built_in">number</span>; line: <span class="built_in">number</span> &#125; | <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params">    ctx: Context,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">TransformContext</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Context</span> &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">originalCode</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">originalSourcemap</span>: <span class="title class_">SourceMap</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">    <span class="attr">sourcemapChain</span>: <span class="title class_">NonNullable</span>&lt;<span class="title class_">SourceDescription</span>[<span class="string">&#x27;map&#x27;</span>]&gt;[] = []</span><br><span class="line">    <span class="attr">combinedMap</span>: <span class="title class_">SourceMap</span> | &#123; <span class="attr">mappings</span>: <span class="string">&#x27;&#x27;</span> &#125; | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">filename: <span class="built_in">string</span>, code: <span class="built_in">string</span>, inMap?: SourceMap | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">filename</span> = filename</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">originalCode</span> = code</span><br><span class="line">      <span class="keyword">if</span> (inMap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debugSourcemapCombine) &#123;</span><br><span class="line">          <span class="comment">// @ts-expect-error inject name for debug purpose</span></span><br><span class="line">          inMap.<span class="property">name</span> = <span class="string">&#x27;$inMap&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sourcemapChain</span>.<span class="title function_">push</span>(inMap)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_getCombinedSourcemap</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        debugSourcemapCombine &amp;&amp;</span><br><span class="line">        debugSourcemapCombineFilter &amp;&amp;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">filename</span>.<span class="title function_">includes</span>(debugSourcemapCombineFilter)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="title function_">debugSourcemapCombine</span>(<span class="string">&#x27;----------&#x27;</span>, <span class="variable language_">this</span>.<span class="property">filename</span>)</span><br><span class="line">        <span class="title function_">debugSourcemapCombine</span>(<span class="variable language_">this</span>.<span class="property">combinedMap</span>)</span><br><span class="line">        <span class="title function_">debugSourcemapCombine</span>(<span class="variable language_">this</span>.<span class="property">sourcemapChain</span>)</span><br><span class="line">        <span class="title function_">debugSourcemapCombine</span>(<span class="string">&#x27;----------&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> combinedMap = <span class="variable language_">this</span>.<span class="property">combinedMap</span></span><br><span class="line">      <span class="comment">// &#123; mappings: &#x27;&#x27; &#125;</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        combinedMap &amp;&amp;</span><br><span class="line">        !(<span class="string">&#x27;version&#x27;</span> <span class="keyword">in</span> combinedMap) &amp;&amp;</span><br><span class="line">        combinedMap.<span class="property">mappings</span> === <span class="string">&#x27;&#x27;</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sourcemapChain</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> combinedMap</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> m <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">sourcemapChain</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> m === <span class="string">&#x27;string&#x27;</span>) m = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(m)</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">&#x27;version&#x27;</span> <span class="keyword">in</span> (m <span class="keyword">as</span> <span class="title class_">SourceMap</span>))) &#123;</span><br><span class="line">          <span class="comment">// &#123; mappings: &#x27;&#x27; &#125;</span></span><br><span class="line">          <span class="keyword">if</span> ((m <span class="keyword">as</span> <span class="title class_">SourceMap</span>).<span class="property">mappings</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            combinedMap = &#123; <span class="attr">mappings</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// empty, nullified source map</span></span><br><span class="line">          combinedMap = <span class="literal">null</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!combinedMap) &#123;</span><br><span class="line">          combinedMap = m <span class="keyword">as</span> <span class="title class_">SourceMap</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          combinedMap = <span class="title function_">combineSourcemaps</span>(<span class="title function_">cleanUrl</span>(<span class="variable language_">this</span>.<span class="property">filename</span>), [</span><br><span class="line">            m <span class="keyword">as</span> <span class="title class_">RawSourceMap</span>,</span><br><span class="line">            combinedMap <span class="keyword">as</span> <span class="title class_">RawSourceMap</span>,</span><br><span class="line">          ]) <span class="keyword">as</span> <span class="title class_">SourceMap</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (combinedMap !== <span class="variable language_">this</span>.<span class="property">combinedMap</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">combinedMap</span> = combinedMap</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sourcemapChain</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">combinedMap</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getCombinedSourcemap</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> map = <span class="variable language_">this</span>.<span class="title function_">_getCombinedSourcemap</span>()</span><br><span class="line">      <span class="keyword">if</span> (!map || (!(<span class="string">&#x27;version&#x27;</span> <span class="keyword">in</span> map) &amp;&amp; map.<span class="property">mappings</span> === <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MagicString</span>(<span class="variable language_">this</span>.<span class="property">originalCode</span>).<span class="title function_">generateMap</span>(&#123;</span><br><span class="line">          <span class="attr">includeContent</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">hires</span>: <span class="string">&#x27;boundary&#x27;</span>,</span><br><span class="line">          <span class="attr">source</span>: <span class="title function_">cleanUrl</span>(<span class="variable language_">this</span>.<span class="property">filename</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> map</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> closed = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> processesing = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;&gt;()</span><br><span class="line">  <span class="comment">// keeps track of hook promises so that we can wait for them all to finish upon closing the server</span></span><br><span class="line">  <span class="keyword">function</span> handleHookPromise&lt;T&gt;(<span class="attr">maybePromise</span>: <span class="literal">undefined</span> | T | <span class="title class_">Promise</span>&lt;T&gt;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(maybePromise <span class="keyword">as</span> <span class="built_in">any</span>)?.<span class="property">then</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> maybePromise</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> promise = maybePromise <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;T&gt;</span><br><span class="line">    processesing.<span class="title function_">add</span>(promise)</span><br><span class="line">    <span class="keyword">return</span> promise.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> processesing.<span class="title function_">delete</span>(promise))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">container</span>: <span class="title class_">PluginContainer</span> = &#123;</span><br><span class="line">    <span class="attr">options</span>: <span class="keyword">await</span> (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> options = rollupOptions</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> optionsHook <span class="keyword">of</span> <span class="title function_">getSortedPluginHooks</span>(<span class="string">&#x27;options&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) <span class="title function_">throwClosedServerError</span>()</span><br><span class="line">        options =</span><br><span class="line">          (<span class="keyword">await</span> <span class="title function_">handleHookPromise</span>(</span><br><span class="line">            optionsHook.<span class="title function_">call</span>(minimalContext, options),</span><br><span class="line">          )) || options</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> options</span><br><span class="line">    &#125;)(),</span><br><span class="line"></span><br><span class="line">    getModuleInfo,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">buildStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">handleHookPromise</span>(</span><br><span class="line">        <span class="title function_">hookParallel</span>(</span><br><span class="line">          <span class="string">&#x27;buildStart&#x27;</span>,</span><br><span class="line">          <span class="function">(<span class="params">plugin</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Context</span>(plugin),</span><br><span class="line">          <span class="function">() =&gt;</span> [container.<span class="property">options</span> <span class="keyword">as</span> <span class="title class_">NormalizedInputOptions</span>],</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">resolveId</span>(<span class="params">rawId, importer = join(root, <span class="string">&#x27;index.html&#x27;</span>), options</span>) &#123;</span><br><span class="line">      <span class="comment">// 见后续分析</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">load</span>(<span class="params">id, options</span>) &#123;</span><br><span class="line">      <span class="comment">// 见后续分析</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">transform</span>(<span class="params">code, id, options</span>) &#123;</span><br><span class="line">      <span class="comment">// 见后续分析</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">watchChange</span>(<span class="params">id, change</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="keyword">new</span> <span class="title class_">Context</span>()</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">hookParallel</span>(</span><br><span class="line">        <span class="string">&#x27;watchChange&#x27;</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> ctx,</span><br><span class="line">        <span class="function">() =&gt;</span> [id, change],</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (closed) <span class="keyword">return</span></span><br><span class="line">      closed = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(processesing))</span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="keyword">new</span> <span class="title class_">Context</span>()</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">hookParallel</span>(</span><br><span class="line">        <span class="string">&#x27;buildEnd&#x27;</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> ctx,</span><br><span class="line">        <span class="function">() =&gt;</span> [],</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">hookParallel</span>(</span><br><span class="line">        <span class="string">&#x27;closeBundle&#x27;</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> ctx,</span><br><span class="line">        <span class="function">() =&gt;</span> [],</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="variable constant_">ASYNC_DISPOSE</span>]() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">close</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> container</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resolveId"><a href="#resolveId" class="headerlink" title="resolveId"></a>resolveId</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> skip = options?.<span class="property">skip</span></span><br><span class="line"><span class="keyword">const</span> ssr = options?.<span class="property">ssr</span></span><br><span class="line"><span class="keyword">const</span> scan = !!options?.<span class="property">scan</span></span><br><span class="line"><span class="keyword">const</span> ctx = <span class="keyword">new</span> <span class="title class_">Context</span>()</span><br><span class="line">ctx.<span class="property">ssr</span> = !!ssr</span><br><span class="line">ctx.<span class="property">_scan</span> = scan</span><br><span class="line">ctx.<span class="property">_resolveSkips</span> = skip</span><br><span class="line"><span class="keyword">const</span> resolveStart = debugResolve ? performance.<span class="title function_">now</span>() : <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">partial</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">PartialResolvedId</span>&gt; = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="title function_">getSortedPlugins</span>(<span class="string">&#x27;resolveId&#x27;</span>)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (closed &amp;&amp; !ssr) <span class="title function_">throwClosedServerError</span>()</span><br><span class="line">  <span class="keyword">if</span> (!plugin.<span class="property">resolveId</span>) <span class="keyword">continue</span></span><br><span class="line">  <span class="keyword">if</span> (skip?.<span class="title function_">has</span>(plugin)) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">_activePlugin</span> = plugin</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pluginResolveStart = debugPluginResolve ? performance.<span class="title function_">now</span>() : <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> handler = <span class="title function_">getHookHandler</span>(plugin.<span class="property">resolveId</span>)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">handleHookPromise</span>(</span><br><span class="line">    handler.<span class="title function_">call</span>(ctx <span class="keyword">as</span> <span class="built_in">any</span>, rawId, importer, &#123;</span><br><span class="line">      <span class="attr">attributes</span>: options?.<span class="property">attributes</span> ?? &#123;&#125;,</span><br><span class="line">      <span class="attr">custom</span>: options?.<span class="property">custom</span>,</span><br><span class="line">      <span class="attr">isEntry</span>: !!options?.<span class="property">isEntry</span>,</span><br><span class="line">      ssr,</span><br><span class="line">      scan,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (!result) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    id = result</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    id = result.<span class="property">id</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(partial, result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debugPluginResolve?.(</span><br><span class="line">    <span class="title function_">timeFrom</span>(pluginResolveStart),</span><br><span class="line">    plugin.<span class="property">name</span>,</span><br><span class="line">    <span class="title function_">prettifyUrl</span>(id, root),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// resolveId() is hookFirst - first non-null result is returned.</span></span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (debugResolve &amp;&amp; rawId !== id &amp;&amp; !rawId.<span class="title function_">startsWith</span>(<span class="variable constant_">FS_PREFIX</span>)) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = rawId + id</span><br><span class="line">  <span class="comment">// avoid spamming</span></span><br><span class="line">  <span class="keyword">if</span> (!seenResolves[key]) &#123;</span><br><span class="line">    seenResolves[key] = <span class="literal">true</span></span><br><span class="line">    <span class="title function_">debugResolve</span>(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;timeFrom(resolveStart)&#125;</span> <span class="subst">$&#123;colors.cyan(rawId)&#125;</span> -&gt; <span class="subst">$&#123;colors.dim(</span></span></span><br><span class="line"><span class="subst"><span class="string">        id,</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>`</span>,</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id) &#123;</span><br><span class="line">  partial.<span class="property">id</span> = <span class="title function_">isExternalUrl</span>(id) ? id : <span class="title function_">normalizePath</span>(id)</span><br><span class="line">  <span class="keyword">return</span> partial <span class="keyword">as</span> <span class="title class_">PartialResolvedId</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段代码中我们可以看出，resolveId这个hook只要有一个插件中执行成功了，就不会再执行之后的其他插件的resolveId。</p><h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ssr = options?.<span class="property">ssr</span></span><br><span class="line"><span class="keyword">const</span> ctx = <span class="keyword">new</span> <span class="title class_">Context</span>()</span><br><span class="line">ctx.<span class="property">ssr</span> = !!ssr</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="title function_">getSortedPlugins</span>(<span class="string">&#x27;load&#x27;</span>)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (closed &amp;&amp; !ssr) <span class="title function_">throwClosedServerError</span>()</span><br><span class="line">  <span class="keyword">if</span> (!plugin.<span class="property">load</span>) <span class="keyword">continue</span></span><br><span class="line">  ctx.<span class="property">_activePlugin</span> = plugin</span><br><span class="line">  <span class="keyword">const</span> handler = <span class="title function_">getHookHandler</span>(plugin.<span class="property">load</span>)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">handleHookPromise</span>(</span><br><span class="line">    handler.<span class="title function_">call</span>(ctx <span class="keyword">as</span> <span class="built_in">any</span>, id, &#123; ssr &#125;),</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(result)) &#123;</span><br><span class="line">      <span class="title function_">updateModuleInfo</span>(id, result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>可以看出，每次load除了调用hook，还会调用<code>updateModuleInfo</code>更新模块的引用关系和信息</p><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inMap = options?.<span class="property">inMap</span></span><br><span class="line"><span class="keyword">const</span> ssr = options?.<span class="property">ssr</span></span><br><span class="line"><span class="keyword">const</span> ctx = <span class="keyword">new</span> <span class="title class_">TransformContext</span>(id, code, inMap <span class="keyword">as</span> <span class="title class_">SourceMap</span>)</span><br><span class="line">ctx.<span class="property">ssr</span> = !!ssr</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="title function_">getSortedPlugins</span>(<span class="string">&#x27;transform&#x27;</span>)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (closed &amp;&amp; !ssr) <span class="title function_">throwClosedServerError</span>()</span><br><span class="line">  <span class="keyword">if</span> (!plugin.<span class="property">transform</span>) <span class="keyword">continue</span></span><br><span class="line">  ctx.<span class="property">_activePlugin</span> = plugin</span><br><span class="line">  ctx.<span class="property">_activeId</span> = id</span><br><span class="line">  ctx.<span class="property">_activeCode</span> = code</span><br><span class="line">  <span class="keyword">const</span> start = debugPluginTransform ? performance.<span class="title function_">now</span>() : <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">TransformResult</span> | <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">const</span> handler = <span class="title function_">getHookHandler</span>(plugin.<span class="property">transform</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title function_">handleHookPromise</span>(</span><br><span class="line">      handler.<span class="title function_">call</span>(ctx <span class="keyword">as</span> <span class="built_in">any</span>, code, id, &#123; ssr &#125;),</span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    ctx.<span class="title function_">error</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!result) <span class="keyword">continue</span></span><br><span class="line">  debugPluginTransform?.(</span><br><span class="line">    <span class="title function_">timeFrom</span>(start),</span><br><span class="line">    plugin.<span class="property">name</span>,</span><br><span class="line">    <span class="title function_">prettifyUrl</span>(id, root),</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isObject</span>(result)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">code</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      code = result.<span class="property">code</span></span><br><span class="line">      <span class="keyword">if</span> (result.<span class="property">map</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debugSourcemapCombine) &#123;</span><br><span class="line">          <span class="comment">// @ts-expect-error inject plugin name for debug purpose</span></span><br><span class="line">          result.<span class="property">map</span>.<span class="property">name</span> = plugin.<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">        ctx.<span class="property">sourcemapChain</span>.<span class="title function_">push</span>(result.<span class="property">map</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">updateModuleInfo</span>(id, result)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    code = result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  code,</span><br><span class="line">  <span class="attr">map</span>: ctx.<span class="title function_">_getCombinedSourcemap</span>(),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出，transform方法是全部都会顺序执行的，这一点和resolveId不同</p><h1 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h1><p>热更新的代码分为两部分，一部分是服务端检测文件的变化，判断哪些模块需要更新，然后发送ws消息给客户端，客户端代码重新拉取新的模块进行更新逻辑。</p><p>我们这次主要看服务端的代码，客户端代码的更新逻辑更多的是和框架本身的关系。</p><p>服务端热更新的入口代码在watcher的回调函数中：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onHMRUpdate</span> = <span class="keyword">async</span> (<span class="params">file: <span class="built_in">string</span>, configOnly: <span class="built_in">boolean</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (serverConfig.<span class="property">hmr</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">handleHMRUpdate</span>(file, server, configOnly)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      ws.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">err</span>: <span class="title function_">prepareError</span>(err),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onFileAddUnlink</span> = <span class="keyword">async</span> (<span class="params">file: <span class="built_in">string</span>, isUnlink: <span class="built_in">boolean</span></span>) =&gt; &#123;</span><br><span class="line">  file = <span class="title function_">normalizePath</span>(file)</span><br><span class="line">  <span class="keyword">await</span> container.<span class="title function_">watchChange</span>(file, &#123; <span class="attr">event</span>: isUnlink ? <span class="string">&#x27;delete&#x27;</span> : <span class="string">&#x27;create&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">handleFileAddUnlink</span>(file, server, isUnlink)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">onHMRUpdate</span>(file, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watcher.<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line">  file = <span class="title function_">normalizePath</span>(file)</span><br><span class="line">  <span class="keyword">await</span> container.<span class="title function_">watchChange</span>(file, &#123; <span class="attr">event</span>: <span class="string">&#x27;update&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">// invalidate module graph cache on file change</span></span><br><span class="line">  moduleGraph.<span class="title function_">onFileChange</span>(file)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">onHMRUpdate</span>(file, <span class="literal">false</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watcher.<span class="title function_">on</span>(<span class="string">&#x27;add&#x27;</span>, <span class="function">(<span class="params">file</span>) =&gt;</span> <span class="title function_">onFileAddUnlink</span>(file, <span class="literal">false</span>))</span><br><span class="line">watcher.<span class="title function_">on</span>(<span class="string">&#x27;unlink&#x27;</span>, <span class="function">(<span class="params">file</span>) =&gt;</span> <span class="title function_">onFileAddUnlink</span>(file, <span class="literal">true</span>))</span><br></pre></td></tr></table></figure><p>主要的处理函数，是handleHMRUpdate，我们就看一下其中的源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleHMRUpdate</span>(<span class="params"></span></span><br><span class="line"><span class="params">  file: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  server: ViteDevServer,</span></span><br><span class="line"><span class="params">  configOnly: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ws, config, moduleGraph &#125; = server</span><br><span class="line">  <span class="keyword">const</span> shortFile = <span class="title function_">getShortName</span>(file, config.<span class="property">root</span>)</span><br><span class="line">  <span class="keyword">const</span> fileName = path.<span class="title function_">basename</span>(file)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isConfig = file === config.<span class="property">configFile</span></span><br><span class="line">  <span class="keyword">const</span> isConfigDependency = config.<span class="property">configFileDependencies</span>.<span class="title function_">some</span>(</span><br><span class="line">    <span class="function">(<span class="params">name</span>) =&gt;</span> file === name,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isEnv =</span><br><span class="line">    config.<span class="property">inlineConfig</span>.<span class="property">envFile</span> !== <span class="literal">false</span> &amp;&amp;</span><br><span class="line">    <span class="title function_">getEnvFilesForMode</span>(config.<span class="property">mode</span>).<span class="title function_">includes</span>(fileName)</span><br><span class="line">  <span class="keyword">if</span> (isConfig || isConfigDependency || isEnv) &#123;</span><br><span class="line">    <span class="comment">// auto restart server</span></span><br><span class="line">    debugHmr?.(<span class="string">`[config change] <span class="subst">$&#123;colors.dim(shortFile)&#125;</span>`</span>)</span><br><span class="line">    config.<span class="property">logger</span>.<span class="title function_">info</span>(</span><br><span class="line">      colors.<span class="title function_">green</span>(</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;path.relative(process.cwd(), file)&#125;</span> changed, restarting server...`</span>,</span><br><span class="line">      ),</span><br><span class="line">      &#123; <span class="attr">clear</span>: <span class="literal">true</span>, <span class="attr">timestamp</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">restartServerWithUrls</span>(server)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      config.<span class="property">logger</span>.<span class="title function_">error</span>(colors.<span class="title function_">red</span>(e))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (configOnly) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debugHmr?.(<span class="string">`[file change] <span class="subst">$&#123;colors.dim(shortFile)&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (dev only) the client itself cannot be hot updated.</span></span><br><span class="line">  <span class="keyword">if</span> (file.<span class="title function_">startsWith</span>(<span class="title function_">withTrailingSlash</span>(normalizedClientDir))) &#123;</span><br><span class="line">    ws.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;full-reload&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mods = moduleGraph.<span class="title function_">getModulesByFile</span>(file)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check if any plugin wants to perform custom HMR handling</span></span><br><span class="line">  <span class="keyword">const</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">hmrContext</span>: <span class="title class_">HmrContext</span> = &#123;</span><br><span class="line">    file,</span><br><span class="line">    timestamp,</span><br><span class="line">    <span class="attr">modules</span>: mods ? [...mods] : [],</span><br><span class="line">    <span class="attr">read</span>: <span class="function">() =&gt;</span> <span class="title function_">readModifiedFile</span>(file),</span><br><span class="line">    server,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> hook <span class="keyword">of</span> config.<span class="title function_">getSortedPluginHooks</span>(<span class="string">&#x27;handleHotUpdate&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> filteredModules = <span class="keyword">await</span> <span class="title function_">hook</span>(hmrContext)</span><br><span class="line">    <span class="keyword">if</span> (filteredModules) &#123;</span><br><span class="line">      hmrContext.<span class="property">modules</span> = filteredModules</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!hmrContext.<span class="property">modules</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">// html file cannot be hot updated</span></span><br><span class="line">    <span class="keyword">if</span> (file.<span class="title function_">endsWith</span>(<span class="string">&#x27;.html&#x27;</span>)) &#123;</span><br><span class="line">      config.<span class="property">logger</span>.<span class="title function_">info</span>(colors.<span class="title function_">green</span>(<span class="string">`page reload `</span>) + colors.<span class="title function_">dim</span>(shortFile), &#123;</span><br><span class="line">        <span class="attr">clear</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      ws.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;full-reload&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: config.<span class="property">server</span>.<span class="property">middlewareMode</span></span><br><span class="line">          ? <span class="string">&#x27;*&#x27;</span></span><br><span class="line">          : <span class="string">&#x27;/&#x27;</span> + <span class="title function_">normalizePath</span>(path.<span class="title function_">relative</span>(config.<span class="property">root</span>, file)),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// loaded but not in the module graph, probably not js</span></span><br><span class="line">      debugHmr?.(<span class="string">`[no modules matched] <span class="subst">$&#123;colors.dim(shortFile)&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateModules</span>(shortFile, hmrContext.<span class="property">modules</span>, timestamp, server)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateModules</span>(<span class="params"></span></span><br><span class="line"><span class="params">  file: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  modules: ModuleNode[],</span></span><br><span class="line"><span class="params">  timestamp: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  &#123; config, ws, moduleGraph &#125;: ViteDevServer,</span></span><br><span class="line"><span class="params">  afterInvalidation?: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">updates</span>: <span class="title class_">Update</span>[] = []</span><br><span class="line">  <span class="keyword">const</span> invalidatedModules = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line">  <span class="keyword">const</span> traversedModules = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="title class_">ModuleNode</span>&gt;()</span><br><span class="line">  <span class="keyword">let</span> needFullReload = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> mod <span class="keyword">of</span> modules) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">boundaries</span>: &#123; <span class="attr">boundary</span>: <span class="title class_">ModuleNode</span>; <span class="attr">acceptedVia</span>: <span class="title class_">ModuleNode</span> &#125;[] = []</span><br><span class="line">    <span class="keyword">const</span> hasDeadEnd = <span class="title function_">propagateUpdate</span>(mod, traversedModules, boundaries)</span><br><span class="line"></span><br><span class="line">    moduleGraph.<span class="title function_">invalidateModule</span>(</span><br><span class="line">      mod,</span><br><span class="line">      invalidatedModules,</span><br><span class="line">      timestamp,</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      boundaries.<span class="title function_">map</span>(<span class="function">(<span class="params">b</span>) =&gt;</span> b.<span class="property">boundary</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (needFullReload) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasDeadEnd) &#123;</span><br><span class="line">      needFullReload = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updates.<span class="title function_">push</span>(</span><br><span class="line">      ...boundaries.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; boundary, acceptedVia &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">`<span class="subst">$&#123;boundary.<span class="keyword">type</span>&#125;</span>-update`</span> <span class="keyword">as</span> <span class="keyword">const</span>,</span><br><span class="line">        timestamp,</span><br><span class="line">        <span class="attr">path</span>: <span class="title function_">normalizeHmrUrl</span>(boundary.<span class="property">url</span>),</span><br><span class="line">        <span class="attr">explicitImportRequired</span>:</span><br><span class="line">          boundary.<span class="property">type</span> === <span class="string">&#x27;js&#x27;</span></span><br><span class="line">            ? <span class="title function_">isExplicitImportRequired</span>(acceptedVia.<span class="property">url</span>)</span><br><span class="line">            : <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">acceptedPath</span>: <span class="title function_">normalizeHmrUrl</span>(acceptedVia.<span class="property">url</span>),</span><br><span class="line">      &#125;)),</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (needFullReload) &#123;</span><br><span class="line">    config.<span class="property">logger</span>.<span class="title function_">info</span>(colors.<span class="title function_">green</span>(<span class="string">`page reload `</span>) + colors.<span class="title function_">dim</span>(file), &#123;</span><br><span class="line">      <span class="attr">clear</span>: !afterInvalidation,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    ws.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;full-reload&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (updates.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    debugHmr?.(colors.<span class="title function_">yellow</span>(<span class="string">`no update happened `</span>) + colors.<span class="title function_">dim</span>(file))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  config.<span class="property">logger</span>.<span class="title function_">info</span>(</span><br><span class="line">    colors.<span class="title function_">green</span>(<span class="string">`hmr update `</span>) +</span><br><span class="line">      colors.<span class="title function_">dim</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>(updates.<span class="title function_">map</span>(<span class="function">(<span class="params">u</span>) =&gt;</span> u.<span class="property">path</span>))].<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>)),</span><br><span class="line">    &#123; <span class="attr">clear</span>: !afterInvalidation, <span class="attr">timestamp</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  )</span><br><span class="line">  ws.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;update&#x27;</span>,</span><br><span class="line">    updates,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们简单分析一下其中几种情况：</p><h2 id="vite代码本身改变需要full-reload"><a href="#vite代码本身改变需要full-reload" class="headerlink" title="vite代码本身改变需要full-reload"></a>vite代码本身改变需要full-reload</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (dev only) the client itself cannot be hot updated.</span></span><br><span class="line"><span class="keyword">if</span> (file.<span class="title function_">startsWith</span>(<span class="title function_">withTrailingSlash</span>(normalizedClientDir))) &#123;</span><br><span class="line">  ws.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;full-reload&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">withTrailingSlash</span>(<span class="params">path: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (path[path.<span class="property">length</span> - <span class="number">1</span>] !== <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;path&#125;</span>/`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> normalizedClientDir = <span class="title function_">normalizePath</span>(<span class="variable constant_">CLIENT_DIR</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">CLIENT_ENTRY</span> = <span class="title function_">resolve</span>(<span class="variable constant_">VITE_PACKAGE_DIR</span>, <span class="string">&#x27;dist/client/client.mjs&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">CLIENT_DIR</span> = path.<span class="title function_">dirname</span>(<span class="variable constant_">CLIENT_ENTRY</span>)</span><br></pre></td></tr></table></figure><h2 id="html文件需要full-reload"><a href="#html文件需要full-reload" class="headerlink" title="html文件需要full-reload"></a>html文件需要full-reload</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html file cannot be hot updated</span></span><br><span class="line"><span class="keyword">if</span> (file.<span class="title function_">endsWith</span>(<span class="string">&#x27;.html&#x27;</span>)) &#123;</span><br><span class="line">  config.<span class="property">logger</span>.<span class="title function_">info</span>(colors.<span class="title function_">green</span>(<span class="string">`page reload `</span>) + colors.<span class="title function_">dim</span>(shortFile), &#123;</span><br><span class="line">    <span class="attr">clear</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  ws.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;full-reload&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: config.<span class="property">server</span>.<span class="property">middlewareMode</span></span><br><span class="line">      ? <span class="string">&#x27;*&#x27;</span></span><br><span class="line">      : <span class="string">&#x27;/&#x27;</span> + <span class="title function_">normalizePath</span>(path.<span class="title function_">relative</span>(config.<span class="property">root</span>, file)),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有循环引用需要full-reload"><a href="#有循环引用需要full-reload" class="headerlink" title="有循环引用需要full-reload"></a>有循环引用需要full-reload</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hasDeadEnd = <span class="title function_">propagateUpdate</span>(mod, traversedModules, boundaries)</span><br><span class="line"></span><br><span class="line">moduleGraph.<span class="title function_">invalidateModule</span>(</span><br><span class="line">  mod,</span><br><span class="line">  invalidatedModules,</span><br><span class="line">  timestamp,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  boundaries.<span class="title function_">map</span>(<span class="function">(<span class="params">b</span>) =&gt;</span> b.<span class="property">boundary</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (needFullReload) &#123;</span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hasDeadEnd) &#123;</span><br><span class="line">  needFullReload = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">propagateUpdate</span>(<span class="params"></span></span><br><span class="line"><span class="params">  node: ModuleNode,</span></span><br><span class="line"><span class="params">  traversedModules: <span class="built_in">Set</span>&lt;ModuleNode&gt;,</span></span><br><span class="line"><span class="params">  boundaries: &#123; boundary: ModuleNode; acceptedVia: ModuleNode &#125;[],</span></span><br><span class="line"><span class="params">  currentChain: ModuleNode[] = [node],</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">boolean</span> <span class="comment">/* hasDeadEnd */</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (traversedModules.<span class="title function_">has</span>(node)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  traversedModules.<span class="title function_">add</span>(node)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// #7561</span></span><br><span class="line">  <span class="comment">// if the imports of `node` have not been analyzed, then `node` has not</span></span><br><span class="line">  <span class="comment">// been loaded in the browser and we should stop propagation.</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">id</span> &amp;&amp; node.<span class="property">isSelfAccepting</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    debugHmr?.(</span><br><span class="line">      <span class="string">`[propagate update] stop propagation because not analyzed: <span class="subst">$&#123;colors.dim(</span></span></span><br><span class="line"><span class="subst"><span class="string">        node.id,</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>`</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">isSelfAccepting</span>) &#123;</span><br><span class="line">    boundaries.<span class="title function_">push</span>(&#123; <span class="attr">boundary</span>: node, <span class="attr">acceptedVia</span>: node &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additionally check for CSS importers, since a PostCSS plugin like</span></span><br><span class="line">    <span class="comment">// Tailwind JIT may register any file as a dependency to a CSS file.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> importer <span class="keyword">of</span> node.<span class="property">importers</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isCSSRequest</span>(importer.<span class="property">url</span>) &amp;&amp; !currentChain.<span class="title function_">includes</span>(importer)) &#123;</span><br><span class="line">        <span class="title function_">propagateUpdate</span>(</span><br><span class="line">          importer,</span><br><span class="line">          traversedModules,</span><br><span class="line">          boundaries,</span><br><span class="line">          currentChain.<span class="title function_">concat</span>(importer),</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A partially accepted module with no importers is considered self accepting,</span></span><br><span class="line">  <span class="comment">// because the deal is &quot;there are parts of myself I can&#x27;t self accept if they</span></span><br><span class="line">  <span class="comment">// are used outside of me&quot;.</span></span><br><span class="line">  <span class="comment">// Also, the imported module (this one) must be updated before the importers,</span></span><br><span class="line">  <span class="comment">// so that they do get the fresh imported module when/if they are reloaded.</span></span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">acceptedHmrExports</span>) &#123;</span><br><span class="line">    boundaries.<span class="title function_">push</span>(&#123; <span class="attr">boundary</span>: node, <span class="attr">acceptedVia</span>: node &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!node.<span class="property">importers</span>.<span class="property">size</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #3716, #3913</span></span><br><span class="line">    <span class="comment">// For a non-CSS file, if all of its importers are CSS files (registered via</span></span><br><span class="line">    <span class="comment">// PostCSS plugins) it should be considered a dead end and force full reload.</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !<span class="title function_">isCSSRequest</span>(node.<span class="property">url</span>) &amp;&amp;</span><br><span class="line">      [...node.<span class="property">importers</span>].<span class="title function_">every</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> <span class="title function_">isCSSRequest</span>(i.<span class="property">url</span>))</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> importer <span class="keyword">of</span> node.<span class="property">importers</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> subChain = currentChain.<span class="title function_">concat</span>(importer)</span><br><span class="line">    <span class="keyword">if</span> (importer.<span class="property">acceptedHmrDeps</span>.<span class="title function_">has</span>(node)) &#123;</span><br><span class="line">      boundaries.<span class="title function_">push</span>(&#123; <span class="attr">boundary</span>: importer, <span class="attr">acceptedVia</span>: node &#125;)</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">id</span> &amp;&amp; node.<span class="property">acceptedHmrExports</span> &amp;&amp; importer.<span class="property">importedBindings</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> importedBindingsFromNode = importer.<span class="property">importedBindings</span>.<span class="title function_">get</span>(node.<span class="property">id</span>)</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        importedBindingsFromNode &amp;&amp;</span><br><span class="line">        <span class="title function_">areAllImportsAccepted</span>(importedBindingsFromNode, node.<span class="property">acceptedHmrExports</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentChain.<span class="title function_">includes</span>(importer)) &#123;</span><br><span class="line">      <span class="comment">// circular deps is considered dead end</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">propagateUpdate</span>(importer, traversedModules, boundaries, subChain)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里的判断逻辑就会解释我们上一篇博客<a href="https://sunra.top/posts/6b29912b/">Vite学习笔记（三）如何兼容旧项目中的react-css-module并实现热更新</a>中说的为什么不添加<code>__CSS_TO_MODULE_FLAG__=1</code>会让每次css更新都让页面full-reload</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本次博客正式进入源码的解析部分，我们主要分析源码中的以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何进行配置合并与生成，即resolveConfig部分&lt;/li&gt;
&lt;li&gt;插件的调用机制，即pluginContainer&lt;/li&gt;
&lt;li&gt;模块之间的引用图谱部分，即moduleGraph&lt;/li&gt;
&lt;li&gt;vite的热更新模块内，即hmr&lt;/li&gt;
&lt;li&gt;vite的依赖打包优化部分，即optimizeDeps&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Packing" scheme="https://sunra.top/categories/Packing/"/>
    
    
  </entry>
  
  <entry>
    <title>Vite学习笔记（三）如何兼容旧项目中的react-css-module并实现热更新</title>
    <link href="https://sunra.top/posts/6b29912b/"/>
    <id>https://sunra.top/posts/6b29912b/</id>
    <published>2023-10-29T07:37:17.000Z</published>
    <updated>2024-03-31T02:07:10.487Z</updated>
    
    <content type="html"><![CDATA[<p>我们在迁移到vite的时候，可能会遇到一个情况，就是旧的项目中如果采用webpack，可能会将css文件直接当作css moudle去使用，但是这一点在vite中是不支持的，想要当作css module去引入，就必须以module.css作为扩展名，在研究了以下vite的源码之后，我们可以通过插件来实现这个无缝切换，并且实现css的热更新。</p><span id="more"></span><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; transformSync &#125; <span class="keyword">from</span> <span class="string">&#x27;@babel/core&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cssLangs = <span class="string">`\\.(css|less|sass|scss|styl|stylus|pcss|postcss)($|\\?)`</span>;</span><br><span class="line"><span class="keyword">const</span> importRE =</span><br><span class="line">  <span class="regexp">/import\s+([\S]+)\s+from\s+(&#x27;|&quot;)([\S]+)\.(css|less|sass|scss|styl|stylus|postcss)(\?[\S]*)?(&#x27;|&quot;)/</span>;</span><br><span class="line"><span class="keyword">const</span> jsRE = <span class="regexp">/\.(js|mjs|ts|jsx|tsx)/</span>;</span><br><span class="line"><span class="keyword">const</span> cssLangRE = <span class="keyword">new</span> <span class="title class_">RegExp</span>(cssLangs);</span><br><span class="line"><span class="keyword">const</span> cssModuleRE = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`\\.module<span class="subst">$&#123;cssLangs&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">autoCSSModulePlugin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">visitor</span>: &#123;</span><br><span class="line">        <span class="title class_">ImportDeclaration</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; node &#125; = path;</span><br><span class="line">          <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 如果不是module css的那么就通过 转化为 module.styl来模块化css</span></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            node.<span class="property">specifiers</span> &amp;&amp;</span><br><span class="line">            node.<span class="property">specifiers</span>.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            cssLangRE.<span class="title function_">test</span>(node.<span class="property">source</span>.<span class="property">value</span>) &amp;&amp;</span><br><span class="line">            !cssModuleRE.<span class="title function_">test</span>(node.<span class="property">source</span>.<span class="property">value</span>)</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">const</span> cssFile = node.<span class="property">source</span>.<span class="property">value</span>;</span><br><span class="line">            <span class="comment">// node.source.value = cssFile + (cssFile.indexOf(&#x27;?&#x27;) &gt; -1 ? &#x27;&amp;&#x27; : &#x27;?&#x27;) + &#x27;.module.styl&#x27;;</span></span><br><span class="line">            node.<span class="property">source</span>.<span class="property">value</span> = cssFile.<span class="title function_">replace</span>(<span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.css?__CSS_TO_MODULE_FLAG__=1&amp;.module.styl&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transform</span>(<span class="params">code, &#123; sourceMap, file &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// const parsePlugins = [&#x27;jsx&#x27;];</span></span><br><span class="line">  <span class="comment">// if (/\.tsx?$/.test(file)) &#123;</span></span><br><span class="line">  <span class="comment">//   parsePlugins.push(&#x27;typescript&#x27;);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">transformSync</span>(code, &#123;</span><br><span class="line">    <span class="attr">configFile</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">parserOpts</span>: &#123;</span><br><span class="line">      <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">      <span class="attr">allowAwaitOutsideFunction</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">plugins</span>: [<span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;typescript&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sourceMaps</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">sourceFileName</span>: file,</span><br><span class="line">    <span class="attr">inputSourceMap</span>: sourceMap,</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">autoCSSModulePlugin</span>()],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">code</span>: result.<span class="property">code</span>,</span><br><span class="line">    <span class="attr">map</span>: result.<span class="property">map</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">viteCSSToModulesPlugin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;vite-plugin-css-to-modules&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="title function_">confirm</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">css</span>: &#123;</span><br><span class="line">          <span class="attr">modules</span>: &#123;</span><br><span class="line">            <span class="attr">scopeBehaviour</span>: <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">            <span class="attr">localsConvention</span>: <span class="string">&#x27;dashes&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">code, id</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (jsRE.<span class="title function_">test</span>(id) &amp;&amp; importRE.<span class="title function_">test</span>(code)) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="title function_">transform</span>(code, &#123;</span><br><span class="line">          <span class="attr">file</span>: id,</span><br><span class="line">          <span class="attr">sourceMap</span>: <span class="variable language_">this</span>.<span class="title function_">getCombinedSourcemap</span>(),</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><p>这个代码主要就是做了一件事，在分析文件中是否有import css的代码，如果有的话，将形如 <code>import styles from a.css</code> 变为 <code>import styles from a.css?__CSS_TO_MODULE_FLAG__=1&amp;.module.styl</code>。</p><p>其实只要在问号后面的参数中有<code>.module.styl</code>就可以让vite把该css当作module处理了，但是这样会导致每次css更新都会让页面full-reload，经过源码分析，是因为更新之后，vite会在引入链接中拼接时间戳。</p><p>即如果我们只是将链接转化成<code>import styles from a.css?.module.styl</code>，在vite进行入口分析时，它的id为<code>a.css?.module.style</code>那么在第一次更新之后，vite引入的url会变成<code>import styles from a.css?t=1234567890000&amp;.module.styl</code>，这个链接在vite内部分析依赖的时候，他的id会被处理成，<code>a.css?&amp;.module.styl</code>，多了一个<code>&amp;</code>符号，会被识别成另一个文件，而vite在此时会让页面整个full-reload。而在前面随便加入另一个参数，即可让每次识别出来的id都是<code>a.css?__CSS_TO_MODULE_FLAG__=1&amp;.module.styl</code>，也就是说，<code>__CSS_TO_MODULE_FLAG__=1</code>你可以换成任何键值对。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在迁移到vite的时候，可能会遇到一个情况，就是旧的项目中如果采用webpack，可能会将css文件直接当作css moudle去使用，但是这一点在vite中是不支持的，想要当作css module去引入，就必须以module.css作为扩展名，在研究了以下vite的源码之后，我们可以通过插件来实现这个无缝切换，并且实现css的热更新。&lt;/p&gt;</summary>
    
    
    
    <category term="Packing" scheme="https://sunra.top/categories/Packing/"/>
    
    
  </entry>
  
  <entry>
    <title>Vite学习笔记（二）Vite的插件API与MPA插件开发</title>
    <link href="https://sunra.top/posts/ed327df9/"/>
    <id>https://sunra.top/posts/ed327df9/</id>
    <published>2023-10-21T12:30:04.000Z</published>
    <updated>2024-03-31T02:07:10.487Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客我们介绍一下Vite的插件API，并且开发一个简单的插件来支持MPA项目。</p><span id="more"></span><p>首先我们在上一篇博客中提到过，Vite 自身不包含 loader 的概念。</p><p>Vite 通过原生 ES 模块导入提供了开箱即用的支持,能够直接导入 <code>.js</code>、<code>.jsx</code>、<code>.ts</code>、<code>.tsx</code>、<code>.css</code>、<code>.json</code> 等文件,不需要额外的 loader 配置。</p><p>对于其他类型的资源文件,Vite 提供了两种处理方式:</p><ol><li><p>使用专门的插件,比如 <code>@vitejs/plugin-vue</code> 来处理 <code>.vue</code> 文件,<code>unplugin-auto-import</code> 来自动导入 API。这些插件会在内部使用 loader 做转换和加载。</p></li><li><p>使用 <code>vite.transform</code> 钩子对某些文件类型提供自定义的转换链。这相当于 loader 的功能,但需要自行实现。</p></li></ol><p>另外,Vite 也支持在 <code>vite.config.js</code> 中使用 Rollup 的 <code>load</code> 钩子来加载自定义文件类型，但是这种方式对于开发模式不起作用，因为开发模式下vite使用的是esbuild进行打包。</p><h1 id="插件API介绍"><a href="#插件API介绍" class="headerlink" title="插件API介绍"></a>插件API介绍</h1><p>Vite 插件扩展了设计出色的 Rollup 接口，带有一些 Vite 独有的配置项。因此，你只需要编写一个 Vite 插件，就可以同时为开发环境和生产环境工作。</p><h2 id="Rollup插件"><a href="#Rollup插件" class="headerlink" title="Rollup插件"></a>Rollup插件</h2><p>Vite的插件API及其功能基本和Rollup的差不多，我们只需要了解Rollup的插件API，然后再看看Vite与其之间的一点小区别就好。</p><p>这是Rollup的插件文档：<a href="https://cn.rollupjs.org/plugin-development/">https://cn.rollupjs.org/plugin-development/</a></p><p>Rollup 插件是一个对象，具有 属性、构建钩子 和 输出生成钩子 中的一个或多个，并遵循我们的 约定。插件应作为一个导出一个函数的包进行发布，该函数可以使用插件特定的选项进行调用并返回此类对象。</p><p>插件允许你通过例如在打包之前进行转译代码或在node_modules文件夹中查找第三方模块来自定义 Rollup 的行为。</p><p>我们这里简单介绍几个常用的插件API</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>name<br>类型:    string<br>插件的名称，用于在警告和错误消息中标识插件。</p><p>version<br>类型:    string<br>插件的版本，用于插件间通信场景。</p><h3 id="构建类型"><a href="#构建类型" class="headerlink" title="构建类型"></a>构建类型</h3><p>为了与构建过程交互，你的插件对象包括“钩子”。钩子是在构建的各个阶段调用的函数。钩子可以影响构建的运行方式，提供关于构建的信息，或在构建完成后修改构建。有不同种类的钩子：</p><p>async：该钩子也可以返回一个解析为相同类型的值的 Promise；否则，该钩子被标记为 sync。<br>first：如果有多个插件实现此钩子，则钩子按顺序运行，直到钩子返回一个不是 null 或 undefined 的值。<br>sequential：如果有多个插件实现此钩子，则所有这些钩子将按指定的插件顺序运行。如果钩子是 async，则此类后续钩子将等待当前钩子解决后再运行。<br>parallel：如果有多个插件实现此钩子，则所有这些钩子将按指定的插件顺序运行。如果钩子是 async，则此类后续钩子将并行运行，而不是等待当前钩子。<br>order: “pre” | “post” | null：如果有多个插件实现此钩子，则可以先运行此插件（”pre”），最后运行此插件（”post”），或在用户指定的位置运行（没有值或 null）。</p><p>除了函数之外，钩子也可以是对象。在这种情况下，实际的钩子函数（或 banner/footer/intro/outro 的值）必须指定为 handler。这允许你提供更多的可选属性，以改变钩子的执行</p><h3 id="构建钩子"><a href="#构建钩子" class="headerlink" title="构建钩子"></a>构建钩子</h3><p>构建钩子在构建阶段运行，该阶段由 rollup.rollup(inputOptions) 触发。它们主要涉及在 Rollup 处理输入文件之前定位、提供和转换输入文件。构建阶段的第一个钩子是 options，最后一个钩子始终是 buildEnd。如果有构建错误，则在此之后将调用 closeBundle。</p><p><img src="https://kingworker.cn/resources/blog/vite-2-plugin/1.png" alt=""></p><p>此外，在监视模式下，watchChange 钩子可以在任何时候触发，以通知当前运行生成输出后将触发新的运行。另外，当监视器关闭时，closeWatcher 钩子将被触发。</p><h4 id="buildEnd"><a href="#buildEnd" class="headerlink" title="buildEnd"></a>buildEnd</h4><p>类型：    (error?: Error) =&gt; void</p><p>类别：    async, parallel</p><p>上一个钩子：    moduleParsed、resolveId 或 resolveDynamicImport</p><p>下一个钩子：    输出生成阶段的 outputOptions，因为这是构建阶段的最后一个钩子</p><p>在 Rollup 完成产物但尚未调用 generate 或 write 之前调用；也可以返回一个 Promise。如果在构建过程中发生错误，则将其传递给此钩子。</p><h4 id="buildStart"><a href="#buildStart" class="headerlink" title="buildStart"></a>buildStart</h4><p>类型：    (options: InputOptions) =&gt; void</p><p>类别：    async, parallel</p><p>上一个钩子：    options</p><p>下一个钩子：    并行解析每个入口点的 resolveId</p><p>在每个 rollup.rollup 构建上调用。当你需要访问传递给 rollup.rollup() 的选项时，建议使用此钩子，因为它考虑了所有 options 钩子的转换，并且还包含未设置选项的正确默认值。</p><h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><p>类型:    (options: InputOptions) =&gt; InputOptions | null</p><p>类别:    async，sequential</p><p>上一个钩子:    这是构建阶段的第一个钩子</p><p>下一个钩子:    buildStart</p><p>替换或操作传递给 rollup.rollup 的选项对象。返回 null 不会替换任何内容。如果只需要读取选项，则建议使用 buildStart 钩子，因为该钩子可以访问所有 options 钩子的转换考虑后的选项。</p><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p>类型:    (code: string, id: string) =&gt; TransformResult</p><p>类别:    async, sequential</p><p>上一个钩子:    load，用于加载当前处理的文件。如果使用缓存并且该模块有一个缓存副本，则为 shouldTransformCachedModule，如果插件为该钩子返回了 true</p><p>下一个钩子:    moduleParsed，一旦文件已被处理和解析<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TransformResult</span> = <span class="built_in">string</span> | <span class="literal">null</span> | <span class="title class_">Partial</span>&lt;<span class="title class_">SourceDescription</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SourceDescription</span> &#123;</span><br><span class="line"><span class="attr">code</span>: <span class="built_in">string</span>;</span><br><span class="line">map?: <span class="built_in">string</span> | <span class="title class_">SourceMap</span>;</span><br><span class="line">ast?: <span class="title class_">ESTree</span>.<span class="property">Program</span>;</span><br><span class="line">assertions?: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125; | <span class="literal">null</span>;</span><br><span class="line">meta?: &#123; [<span class="attr">plugin</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; | <span class="literal">null</span>;</span><br><span class="line">moduleSideEffects?: <span class="built_in">boolean</span> | <span class="string">&#x27;no-treeshake&#x27;</span> | <span class="literal">null</span>;</span><br><span class="line">syntheticNamedExports?: <span class="built_in">boolean</span> | <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可用于转换单个模块。为了避免额外的解析开销，例如此钩子已经使用 this.parse 生成了 AST，此钩子可以选择性地返回一个 { code, ast, map } 对象。ast 必须是一个标准的 ESTree AST，每个节点都有 start 和 end 属性。如果转换不移动代码，则可以通过将 map 设置为 null 来保留现有的源映射。否则，你可能需要生成源映射。请参见 源代码转换 一节。</p><p>请注意，在观察模式下或明确使用缓存时，当重新构建时，此钩子的结果会被缓存，仅当模块的 code 发生更改或上次触发此钩子时添加了通过 this.addWatchFile 添加的文件时，才会再次触发该模块的钩子。</p><p>在所有其他情况下，将触发 shouldTransformCachedModule 钩子，该钩子可以访问缓存的模块。从 shouldTransformCachedModule 返回 true 将从缓存中删除该模块，并再次调用 transform。</p><p>你还可以使用返回值的对象形式来配置模块的其他属性。请注意，可能只返回属性而没有代码转换。</p><p>如果对于 moduleSideEffects 返回 false，并且没有其他模块从该模块导入任何内容，则即使该模块具有副作用，该模块也不会被包含。</p><p>如果返回 true，则 Rollup 将使用其默认算法，包括模块中具有副作用的所有语句（例如修改全局或导出变量）。</p><p>如果返回 “no-treeshake”，则将关闭此模块的除屑优化，并且即使为空，它也将包含在生成的块之一中。</p><p>如果返回 null 或省略标志，则 moduleSideEffects 将由加载此模块的 load 钩子、解析此模块的第一个 resolveId 钩子、treeshake.moduleSideEffects 选项或最终默认为 true 确定。</p><h3 id="输出钩子"><a href="#输出钩子" class="headerlink" title="输出钩子"></a>输出钩子</h3><p>输出生成钩子可以提供有关生成的产物的信息并在构建完成后修改构建。它们的工作方式和类型与 构建钩子 相同，但是对于每个调用 bundle.generate(outputOptions) 或 bundle.write(outputOptions)，它们都会单独调用。仅使用输出生成钩子的插件也可以通过输出选项传递，并且因此仅针对某些输出运行。</p><p>输出生成阶段的第一个钩子是 outputOptions，最后一个钩子是 generateBundle（如果通过 bundle.generate(…) 成功生成输出），writeBundle（如果通过 bundle.write(…) 成功生成输出），或 renderError（如果在输出生成期间的任何时候发生错误）</p><p><img src="https://kingworker.cn/resources/blog/vite-2-plugin/2.png" alt=""></p><h2 id="Vite插件"><a href="#Vite插件" class="headerlink" title="Vite插件"></a>Vite插件</h2><h3 id="通用钩子"><a href="#通用钩子" class="headerlink" title="通用钩子"></a>通用钩子</h3><p>在开发中，Vite 开发服务器会创建一个插件容器来调用 Rollup 构建钩子，与 Rollup 如出一辙。</p><p>以下钩子在服务器启动时被调用：</p><p>options<br>buildStart</p><p>以下钩子会在每个传入模块请求时被调用：</p><p>resolveId<br>load<br>transform</p><p>它们还有一个扩展的 options 参数，包含其他特定于 Vite 的属性。你可以在 SSR 文档 中查阅更多内容。</p><p>一些 resolveId 调用的 importer 值可能是根目录下的通用 index.html 的绝对路径，这是由于 Vite 非打包的开发服务器模式无法始终推断出实际的导入者。对于在 Vite 的解析管道中处理的导入，可以在导入分析阶段跟踪导入者，提供正确的 importer 值。</p><p>以下钩子在服务器关闭时被调用：</p><p>buildEnd<br>closeBundle</p><p>请注意 moduleParsed 钩子在开发中是 不会 被调用的，因为 Vite 为了性能会避免完整的 AST 解析。</p><p><strong>Output Generation Hooks（除了 closeBundle) 在开发中是 不会 被调用的。你可以认为 Vite 的开发服务器只调用了 rollup.rollup() 而没有调用 bundle.generate()。</strong></p><h3 id="Vite独有钩子"><a href="#Vite独有钩子" class="headerlink" title="Vite独有钩子"></a>Vite独有钩子</h3><p>config</p><p>类型： (config: UserConfig, env: { mode: string, command: string }) =&gt; UserConfig | null | void</p><p>种类： async, sequential</p><p>在解析 Vite 配置前调用。钩子接收原始用户配置（命令行选项指定的会与配置文件合并）和一个描述配置环境的变量，包含正在使用的 mode 和 command。它可以返回一个将被深度合并到现有配置中的部分配置对象，或者直接改变配置（如果默认的合并不能达到预期的结果）</p><p>configResolved</p><p>类型： (config: ResolvedConfig) =&gt; void | Promise<void></p><p>种类： async, parallel</p><p>在解析 Vite 配置后调用。使用这个钩子读取和存储最终解析的配置。当插件需要根据运行的命令做一些不同的事情时，它也很有用。<br>configureServer<br>类型： (server: ViteDevServer) =&gt; (() =&gt; void) | void | Promise&lt;(() =&gt; void) | void&gt;</p><p>种类： async, sequential</p><p>是用于配置开发服务器的钩子。最常见的用例是在内部 connect 应用程序中添加自定义中间件:</p><p>configureServer 钩子将在内部中间件被安装前调用，所以自定义的中间件将会默认会比内部中间件早运行。如果你想注入一个在内部中间件 之后 运行的中间件，你可以从 configureServer 返回一个函数，将会在内部中间件安装后被调用：</p><p>此外还有：configurePreviewServer，transformIndexHtml，handleHotUpdate</p><h2 id="插件顺序"><a href="#插件顺序" class="headerlink" title="插件顺序"></a>插件顺序</h2><p>一个 Vite 插件可以额外指定一个 enforce 属性（类似于 webpack 加载器）来调整它的应用顺序。enforce 的值可以是pre 或 post。解析后的插件将按照以下顺序排列：</p><p>Alias<br>带有 enforce: ‘pre’ 的用户插件<br>Vite 核心插件<br>没有 enforce 值的用户插件<br>Vite 构建用的插件<br>带有 enforce: ‘post’ 的用户插件<br>Vite 后置构建插件（最小化，manifest，报告）</p><h1 id="MPA项目插件实战代码"><a href="#MPA项目插件实战代码" class="headerlink" title="MPA项目插件实战代码"></a>MPA项目插件实战代码</h1><p>这个插件主要通过使用开发服务器的server.middleware来进行rewrite来实现多入口项目的启动</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">ResolvedConfig</span>, <span class="title class_">PluginOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;ejs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; normalizePath &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&#x27;node-html-parser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> history <span class="keyword">from</span> <span class="string">&#x27;connect-history-api-fallback&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Options</span> <span class="keyword">as</span> <span class="title class_">EJSOptions</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ejs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">HtmlTagDescriptor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InjectOptions</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  <span class="doctag">@description</span> Data injected into the html template</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data?: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span><br><span class="line"></span><br><span class="line">  tags?: <span class="title class_">HtmlTagDescriptor</span>[]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span> esj options configuration</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ejsOptions?: <span class="title class_">EJSOptions</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PageOption</span> &#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">template</span>: <span class="built_in">string</span></span><br><span class="line">  entry?: <span class="built_in">string</span></span><br><span class="line">  injectOptions?: <span class="title class_">InjectOptions</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pages</span> = <span class="title class_">PageOption</span>[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserOptions</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span> Page options</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">pages</span>: <span class="title class_">Pages</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULT_TEMPLATE</span> = <span class="string">&#x27;index.html&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bodyInjectRE = <span class="regexp">/&lt;\/body&gt;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createMultiPagePlugin</span>(<span class="params">userOptions: UserOptions</span>): <span class="title class_">PluginOption</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    pages = [],</span><br><span class="line">  &#125; = userOptions;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">viteConfig</span>: <span class="title class_">ResolvedConfig</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">env</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;vite-plugin-multi-page&#x27;</span>,</span><br><span class="line">    <span class="attr">enforce</span>: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">configResolved</span>(<span class="params">resolvedConfig</span>) &#123;</span><br><span class="line">      viteConfig = resolvedConfig;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">configureServer</span>(<span class="params">server</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">rewrites</span>: &#123; <span class="attr">from</span>: <span class="title class_">RegExp</span>; <span class="attr">to</span>: <span class="built_in">any</span> &#125;[] = [];</span><br><span class="line">      <span class="keyword">const</span> proxy = viteConfig.<span class="property">server</span>?.<span class="property">proxy</span> ?? &#123;&#125;;</span><br><span class="line">      <span class="keyword">const</span> baseUrl = viteConfig.<span class="property">base</span> ?? <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">      <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(proxy);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> page <span class="keyword">of</span> pages) &#123;</span><br><span class="line">        rewrites.<span class="title function_">push</span>(<span class="title function_">createRewire</span>(page.<span class="property">url</span>, page, baseUrl, keys));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      server.<span class="property">middlewares</span>.<span class="title function_">use</span>(</span><br><span class="line">        <span class="title function_">history</span>(&#123;</span><br><span class="line">          <span class="attr">disableDotRule</span>: <span class="literal">undefined</span>,</span><br><span class="line">          <span class="attr">htmlAcceptHeaders</span>: [<span class="string">&#x27;text/html&#x27;</span>, <span class="string">&#x27;application/xhtml+xml&#x27;</span>],</span><br><span class="line">          <span class="attr">rewrites</span>: rewrites,</span><br><span class="line">        &#125;),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">transformIndexHtml</span>: &#123;</span><br><span class="line">      <span class="attr">enforce</span>: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">transform</span>(<span class="params">html, ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> url = ctx.<span class="property">filename</span>;</span><br><span class="line">        <span class="keyword">const</span> base = viteConfig.<span class="property">base</span>;</span><br><span class="line">        <span class="keyword">const</span> excludeBaseUrl = url.<span class="title function_">replace</span>(base, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> htmlName = path.<span class="title function_">relative</span>(process.<span class="title function_">cwd</span>(), excludeBaseUrl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> page = <span class="title function_">getPageConfig</span>(htmlName, userOptions.<span class="property">pages</span>, <span class="variable constant_">DEFAULT_TEMPLATE</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123; injectOptions = &#123;&#125; &#125; = page;</span><br><span class="line">        <span class="keyword">const</span> _html = <span class="keyword">await</span> <span class="title function_">renderHtml</span>(html, &#123;</span><br><span class="line">          injectOptions,</span><br><span class="line">          viteConfig,</span><br><span class="line">          env,</span><br><span class="line">          <span class="attr">entry</span>: page.<span class="property">entry</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> &#123; tags = [] &#125; = injectOptions;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">html</span>: _html,</span><br><span class="line">          <span class="attr">tags</span>: tags,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">renderHtml</span>(<span class="params"></span></span><br><span class="line"><span class="params">  html: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  config: &#123;</span></span><br><span class="line"><span class="params">    injectOptions: InjectOptions</span></span><br><span class="line"><span class="params">    viteConfig: ResolvedConfig</span></span><br><span class="line"><span class="params">    env: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span></span><br><span class="line"><span class="params">    entry?: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">    verbose?: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  &#125;,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; injectOptions, viteConfig, env, entry, verbose &#125; = config;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, ejsOptions &#125; = injectOptions;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">ejsData</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">    ...(viteConfig?.<span class="property">env</span> ?? &#123;&#125;),</span><br><span class="line">    ...(viteConfig?.<span class="property">define</span> ?? &#123;&#125;),</span><br><span class="line">    ...(env || &#123;&#125;),</span><br><span class="line">    ...data,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">render</span>(html, ejsData, ejsOptions);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (entry) &#123;</span><br><span class="line">    result = <span class="title function_">removeEntryScript</span>(result, verbose);</span><br><span class="line">    result = result.<span class="title function_">replace</span>(</span><br><span class="line">      bodyInjectRE,</span><br><span class="line">      <span class="string">`&lt;script type=&quot;module&quot; src=&quot;<span class="subst">$&#123;normalizePath(</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="string">`<span class="subst">$&#123;entry&#125;</span>`</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeEntryScript</span>(<span class="params">html: <span class="built_in">string</span>, verbose = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!html) &#123;</span><br><span class="line">    <span class="keyword">return</span> html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> root = <span class="title function_">parse</span>(html);</span><br><span class="line">  <span class="keyword">const</span> scriptNodes = root.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;script[type=module]&#x27;</span>) || [];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">removedNode</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">  scriptNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    removedNode.<span class="title function_">push</span>(item.<span class="title function_">toString</span>());</span><br><span class="line">    item.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  verbose &amp;&amp;</span><br><span class="line">    removedNode.<span class="property">length</span> &amp;&amp;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`vite-plugin-html: Since you have already configured entry, <span class="subst">$&#123;removedNode.toString()&#125;</span> is deleted. You may also delete it from the index.html.`</span>);</span><br><span class="line">  <span class="keyword">return</span> root.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPageConfig</span>(<span class="params"></span></span><br><span class="line"><span class="params">  htmlName: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  pages: Pages,</span></span><br><span class="line"><span class="params">  defaultPage: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">PageOption</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">defaultPageOption</span>: <span class="title class_">PageOption</span> = &#123;</span><br><span class="line">    <span class="attr">url</span>: defaultPage,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`./<span class="subst">$&#123;defaultPage&#125;</span>`</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> page = pages.<span class="title function_">filter</span>(<span class="function">(<span class="params">page</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">resolve</span>(<span class="string">&#x27;/&#x27;</span> + page.<span class="property">template</span>) === path.<span class="title function_">resolve</span>(<span class="string">&#x27;/&#x27;</span> + htmlName);</span><br><span class="line">  &#125;)?.[<span class="number">0</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(htmlName, page);</span><br><span class="line">  <span class="keyword">return</span> page ?? defaultPageOption ?? <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRewire</span>(<span class="params"></span></span><br><span class="line"><span class="params">  reg: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  page: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  baseUrl: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  proxyUrlKeys: <span class="built_in">string</span>[],</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">from</span>: <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^/<span class="subst">$&#123;reg&#125;</span>*`</span>),</span><br><span class="line">    <span class="title function_">to</span>(<span class="params">&#123; parsedUrl &#125;: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">pathname</span>: <span class="built_in">string</span> = parsedUrl.<span class="property">pathname</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> excludeBaseUrl = pathname.<span class="title function_">replace</span>(baseUrl, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> template = path.<span class="title function_">resolve</span>(baseUrl, page.<span class="property">template</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (excludeBaseUrl === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> isApiUrl = proxyUrlKeys.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span></span><br><span class="line">        pathname.<span class="title function_">startsWith</span>(path.<span class="title function_">resolve</span>(baseUrl, item)),</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> isApiUrl ? excludeBaseUrl : template;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇博客我们介绍一下Vite的插件API，并且开发一个简单的插件来支持MPA项目。&lt;/p&gt;</summary>
    
    
    
    <category term="Packing" scheme="https://sunra.top/categories/Packing/"/>
    
    
  </entry>
  
  <entry>
    <title>Vite学习笔记（一）Vite的概念和使用</title>
    <link href="https://sunra.top/posts/69c0341b/"/>
    <id>https://sunra.top/posts/69c0341b/</id>
    <published>2023-10-15T01:50:52.000Z</published>
    <updated>2024-03-31T02:07:10.487Z</updated>
    
    <content type="html"><![CDATA[<p>本系列的博客分为三个部分，分别介绍Vite的基本概念与使用，Vite的插件API与插件开发，以及Vite的源码解析。</p><span id="more"></span><h1 id="前端构建工具发展历史"><a href="#前端构建工具发展历史" class="headerlink" title="前端构建工具发展历史"></a>前端构建工具发展历史</h1><h2 id="古早时代"><a href="#古早时代" class="headerlink" title="古早时代"></a>古早时代</h2><p>最开始的前端开发是没有模块的概念的，那时对于JS的要求是我们写了几个脚本，我们希望这些脚本能够集成到HTML，并且能够满足文件尽量小，HTTP并发数量可控，以及可以做到缓存。所以那时候整体上的工具就是围绕单个文件的操作。</p><p>曾经风靡一时的雅虎前端优化10条就包含了上面的这些点，而YUI tools就是那时候的佼佼者，他能够帮助我们压缩js文件并且适当地完成混淆。但很多时候也就仅限于此，那时候前端并没有多少话语权，同时前端的编程能力也较为羸弱，那时候有些前端甚至被称为美工，或者页面仔。对于像HTTP请求的优化，更多其实是由后端服务开发工程师来做的，前端没有权限或者也没有能力来做到。</p><h2 id="grunt-amp-gulp"><a href="#grunt-amp-gulp" class="headerlink" title="grunt &amp; gulp"></a>grunt &amp; gulp</h2><p>虽然把他们放在一起，但是grunt其实比gulp要早很多，我们可以理解为gulp是grunt的升级版，但总体上他们干的事是一样的。相比于现在的Webpack之类的构建工具，他更多是一个任务管理工具，通过一些列细节的小任务，进行不同的组合来达成一个完整的任务。但是具体任务做什么其实是使用者自己决定的，虽然grunt也提供了一系列工具来进行集成，但是其本身并没有规定任何的模块管理还代码打包的事宜，所以总体上来说构建功能仍然是缺失的。</p><p>gulp相比于grunt并没有本质的提升，只是在任务管理方面有了一定的提升，包括任务执行方式，文件流转方式，以及相对应的性能等。所以这边就不再赘述。</p><h2 id="browserify"><a href="#browserify" class="headerlink" title="browserify"></a>browserify</h2><p>browserify可以称得上是第一代前端构建工具了，他是首个采用了nodejs的模块管理方式–即require,module.exports的模块加载和导出方式–来进行前端项目打包的工具。当你在js代码中使用require(‘./xx.js’)这样的代码，browserify会帮助你去加载对应的文件并且可以把对应的文件进行link和合并，最终产出前端需要的合并文件。</p><p>但是相较于webpack，browserify仍然只能打包js，对于css、图片等，你仍然需要依赖当时还很流行的grunt、gulp这样的工具进行处理，你需要为这些文件单独写处理任务，再结合browserify来最终完善整个应用。这一方面在使用体验上无法进行统一，另外其兼容方式并不是那么地完善导致体验并不理想。</p><p>也因为此，browserify最终败给了webpack。</p><h2 id="webpak-amp-rollup"><a href="#webpak-amp-rollup" class="headerlink" title="webpak &amp; rollup"></a>webpak &amp; rollup</h2><p>webpack和rollup本质其实也是js构建工具，但和browserify相比，他们在使用方式做了更全面的设计，其本身就已经是一个核心，并且具有了一定的任务管理的能力。他们都具有插件集成的能力，并且webpack还具有loader的机制来帮助我们应对不同类型文件的引入需求。在这样强大能力的基础上，越来越多原先集中于gulp等任务管理工具的能力都被迁移到了webpack和rollup阵营。现在我们只需要一个命令就可以完成一个大型应用对于各类不同资源的引入需求，webpack能够帮助我们管理代码打包，资源加载，代码压缩等等web前端的大部分需求。</p><p>似乎到这里，这个工具已经很完美，我们所有的需求都已经得到了满足，我们对于前端构建还有什么不满意的地方吗？有！主要集中在两个点：</p><ol><li>配置过于繁琐</li><li>慢！</li></ol><p>如果我们单纯使用webpack来管理项目，那么很可能你的项目里会出现数个不同的webpack配置，他们要么用于不同的环境，要么就是一个文件太多要进行拆分，webpack的配置内容实在关于多，以至于新手一开始完全摸不着头脑。这主要是因为webpack为了满足更多的场景，会不停的增加功能，同时因为webpack是太多的插件了，这些插件也需要学习，就导致其学习成本非常巨大。</p><p>而第二点则是有目共睹的，一旦我们的项目达到一定的规模，webpack的启动速度就难以令人满意。上1-2两分钟时非常正常的，大一点的项目比如后台管理，10分钟也是人之常情。另外一点就是热更新的速度，这一点上也不令人满意。</p><p>那么这些问题真的能解决吗？能，Vite就是为此而生的。</p><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p>Vite采用rollup作为底层，并且大量兼容了rollup的API，其发布初始就具备了大部分的rollup生态能力，所以也不存在Vite功能缺失很多的问题。我们来细数一下Vite是如何解决上述的webpack存在的问题的：</p><p>VIte的配置并不繁琐，因为其预设就是为前端项目开发而生，所以对于dev-server，css依赖，图片加载之类的功能其都配置成开箱即用，你完全不需要再去配置插件、loader之类的。所以很可能你的vite配置不会超过20行代码，这在webpack项目中基本不太可能。</p><p>而第二点，Vite在开发环境中采用ESM的模块加载方式，并且尽可能剔除了不必要的代码构建，同时采用了激进的Esbuild–一个用go语言开发的JS编译工具，性能是webpack之类的10-100倍–来进行编译提速，这就让Vite启动速度极其迅速，基本3秒内就能就能完成。同时得益于ESM加载方式，Vite不需要提前进行代码打包，所以即便你的项目变得巨大，但是Vite并不关心你的文件规模，所以他的启动速度仍然不会有太多的变化。对于开发时的编译也类似，我们就不在赘述。</p><h1 id="Vite简介"><a href="#Vite简介" class="headerlink" title="Vite简介"></a>Vite简介</h1><p>这里需要有一点要注意，Vite其实对标或者和Vite同级的概念并不是webpack或者rollup，因为vite并不仅仅是个打包工具，它还内置HMR等功能，而webpack只是个打包工具，HRM要通过webpack-dev-server。</p><p><strong>如果非要给vite找一个对标工具，它更像是react的cra。而esbuild对标的才是webpack或者rollup,虽然目前的esbuild看起来更像是个编译工具，比如像babel，但其目标应该是做一个构建工具</strong></p><p>接下来提取一些Vite官网的一些介绍。</p><h2 id="为什么选用Vite"><a href="#为什么选用Vite" class="headerlink" title="为什么选用Vite"></a>为什么选用Vite</h2><h3 id="缓慢的服务器启动"><a href="#缓慢的服务器启动" class="headerlink" title="缓慢的服务器启动"></a>缓慢的服务器启动</h3><p>当冷启动开发服务器时，基于打包器的方式启动必须优先抓取并构建你的整个应用，然后才能提供服务。</p><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间。</p><ul><li><p>依赖 大多为在开发时不会变动的纯 JavaScript。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。依赖也通常会存在多种模块化格式（例如 ESM 或者 CommonJS）。</p></li><li><p>Vite 将会使用 esbuild <a href="https://cn.vitejs.dev/guide/dep-pre-bundling.html">预构建</a>依赖。esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。</p></li><li><p>源码 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载（例如基于路由拆分的代码模块）。</p></li></ul><p>Vite 以 原生 ESM 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p><p><img src="https://kingworker.cn/resources/blog/vite-1-introduction/1.png" alt=""></p><h3 id="缓慢的更新"><a href="#缓慢的更新" class="headerlink" title="缓慢的更新"></a>缓慢的更新</h3><p>基于打包器启动时，重建整个包的效率很低。原因显而易见：因为这样更新速度会随着应用体积增长而直线下降。</p><p>一些打包器的开发服务器将构建内容存入内存，这样它们只需要在文件更改时使模块图的一部分失活[1]，但它也仍需要整个重新构建并重载页面。这样代价很高，并且重新加载页面会消除应用的当前状态，所以打包器支持了动态模块热替换（HMR）：允许一个模块 “热替换” 它自己，而不会影响页面其余部分。这大大改进了开发体验 —— 然而，在实践中我们发现，即使采用了 HMR 模式，其热更新速度也会随着应用规模的增长而显著下降。</p><p>在 Vite 中，HMR 是在原生 ESM 上执行的。当编辑一个文件时，Vite 只需要精确地使已编辑的模块与其最近的 HMR 边界之间的链失活（大多数时候只是模块本身），使得无论应用大小如何，HMR 始终能保持快速更新。</p><p>Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存，因此一旦被缓存它们将不需要再次请求。</p><p>一旦你体验到 Vite 的神速，你是否愿意再忍受像曾经那样使用打包器开发就要打上一个大大的问号了。</p><h2 id="为什么生产环境仍需打包"><a href="#为什么生产环境仍需打包" class="headerlink" title="为什么生产环境仍需打包"></a>为什么生产环境仍需打包</h2><p>尽管原生 ESM 现在得到了广泛支持，但由于嵌套导入会导致额外的网络往返，在生产环境中发布未打包的 ESM 仍然效率低下（即使使用 HTTP/2）。为了在生产环境中获得最佳的加载性能，最好还是将代码进行 tree-shaking、懒加载和 chunk 分割（以获得更好的缓存）。</p><p>要确保开发服务器和生产环境构建之间的最优输出和行为一致并不容易。所以 Vite 附带了一套 <a href="https://cn.vitejs.dev/guide/features.html#build-optimizations">构建优化</a> 的 <a href="https://cn.vitejs.dev/guide/build.html">构建命令</a>，开箱即用。</p><h2 id="为何不用-ESBuild-打包？"><a href="#为何不用-ESBuild-打包？" class="headerlink" title="为何不用 ESBuild 打包？"></a>为何不用 ESBuild 打包？</h2><p>Vite 目前的插件 API 与使用 esbuild 作为打包器并不兼容。尽管 esbuild 速度更快，但 Vite 采用了 Rollup 灵活的插件 API 和基础建设，这对 Vite 在生态中的成功起到了重要作用。目前来看，我们认为 Rollup 提供了更好的性能与灵活性方面的权衡。</p><p>即便如此，esbuild 在过去几年有了很大进展，我们不排除在未来使用 esbuild 进行生产构建的可能性。我们将继续利用他们所发布的新功能，就像我们在 JS 和 CSS 最小化压缩方面所做的那样，esbuild 使 Vite 在避免对其生态造成干扰的同时获得了性能提升。</p><h2 id="Vite中是否有Loader的概念"><a href="#Vite中是否有Loader的概念" class="headerlink" title="Vite中是否有Loader的概念"></a>Vite中是否有Loader的概念</h2><p>Vite 自身不包含 loader 的概念。</p><p>Vite 通过原生 ES 模块导入提供了开箱即用的支持,能够直接导入 <code>.js</code>、<code>.jsx</code>、<code>.ts</code>、<code>.tsx</code>、<code>.css</code>、<code>.json</code> 等文件,不需要额外的 loader 配置。</p><p>对于其他类型的资源文件,Vite 提供了两种处理方式:</p><ol><li><p>使用专门的插件,比如 <code>@vitejs/plugin-vue</code> 来处理 <code>.vue</code> 文件,<code>unplugin-auto-import</code> 来自动导入 API。这些插件会在内部使用 loader 做转换和加载。</p></li><li><p>使用 <code>vite.transform</code> 钩子对某些文件类型提供自定义的转换链。这相当于 loader 的功能,但需要自行实现。</p></li></ol><p>另外,Vite 也支持在 <code>vite.config.js</code> 中使用 Rollup 的 <code>load</code> 钩子来加载自定义文件类型。</p><p>所以综合来说,Vite 本身不支持 loader,但通过插件和钩子可以实现类似 loader 的转换和加载能力。Vite 倾向于使用原生 ES 模块和插件来处理资源,而不是直接使用 loader。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说，vite借用了以下几个已有的功能：</p><ol><li>新版本浏览器的支持esm</li><li>esbuild的高效打包能力，将代码及其依赖的第三方包中非esm的代码打包成esm</li><li>rollup的打包能力和成熟的插件系统</li></ol><p>那么vite是怎么利用这几个功能的呢？</p><ol><li>开发环境下（默认开发者用的都是最新的支持esm加载的浏览器），自己实现和HMR功能，并且分析esm之间的依赖，去将esbuild打包出来的esm供浏览器使用，提高了开发环境下的的热更新效率和速度</li><li>生产环境下，还是使用rollup的打包功能，并且可以直接使用rollup的插件社区</li><li>内置了许多常用的前端开发用到的插件到vite中，做到开箱即用</li></ol><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="如何使用vite构建一个react项目"><a href="#如何使用vite构建一个react项目" class="headerlink" title="如何使用vite构建一个react项目"></a>如何使用vite构建一个react项目</h2><p>vite对react的支持优先级是高于vue2的，可以开箱即用，使用npm命令就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create @vitejs/app</span><br></pre></td></tr></table></figure><p>该命令会创建一个代码模板，并在vite.config.js中使用react-fastRefresh插件</p><h2 id="vite中如何加载静态资源"><a href="#vite中如何加载静态资源" class="headerlink" title="vite中如何加载静态资源"></a>vite中如何加载静态资源</h2><p>这个直接看官方文档就可以，在上一步创建的项目中稍加改动就好。</p><p>文档地址：<a href="https://cn.vitejs.dev/guide/assets.html">https://cn.vitejs.dev/guide/assets.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本系列的博客分为三个部分，分别介绍Vite的基本概念与使用，Vite的插件API与插件开发，以及Vite的源码解析。&lt;/p&gt;</summary>
    
    
    
    <category term="Packing" scheme="https://sunra.top/categories/Packing/"/>
    
    
  </entry>
  
  <entry>
    <title>改良空间复杂度的差分数组</title>
    <link href="https://sunra.top/posts/5d83c182/"/>
    <id>https://sunra.top/posts/5d83c182/</id>
    <published>2023-09-28T06:51:14.000Z</published>
    <updated>2024-03-31T02:07:10.471Z</updated>
    
    <content type="html"><![CDATA[<p>今天的leetcode每日一题是一道关于差分数组的困难题，其实说是困难题目，但是如果之前知道差分数组的思想，这个题目也不难，甚至是非常明显的<a href="https://sunra.top/posts/54851">差分数组</a>，只不过使用最基础的差分数组的写法在空间上比较浪费，所以需要稍微改良一下。</p><span id="more"></span><p>题目描述如下：</p><p>给你一个下标从 0 开始的二维整数数组 flowers ，其中 flowers[i] = [$start_i$, $end_i$] 表示第 i 朵花的 花期 从 $start_i$ 到 $end_i$ （都 包含）。同时给你一个下标从 0 开始大小为 n 的整数数组 people ，people[i] 是第 i 个人来看花的时间。</p><p>请你返回一个大小为 n 的整数数组 answer ，其中 answer[i]是第 i 个人到达时在花期内花的数目 。</p><h1 id="基本的差分数组思想"><a href="#基本的差分数组思想" class="headerlink" title="基本的差分数组思想"></a>基本的差分数组思想</h1><p>这个题目一眼看过去，采用最基础的差分数组的写法，我们就需要声明一个长度为n+1(n为所有flowers中end值的最大值)的数组count，并且每一项都初始化为0，然后遍历flowers数组，对于每一对$[start, end]$，我们让$count[start]++,count[end+1]—$，最后在计算每个people的时候，计算差分数组的前缀和即可</p><p>但是这个题目的数据有如下限制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= flowers.length &lt;= 5 * 104</span><br><span class="line">flowers[i].length == 2</span><br><span class="line">1 &lt;= starti &lt;= endi &lt;= 109</span><br><span class="line">1 &lt;= people.length &lt;= 5 * 104</span><br><span class="line">1 &lt;= people[i] &lt;= 109</span><br></pre></td></tr></table></figure><h1 id="改良的差分数组"><a href="#改良的差分数组" class="headerlink" title="改良的差分数组"></a>改良的差分数组</h1><p>如果是这样，我们声明的数组就可能很大，所以我们需要考虑是否能够优化这个差分数组的存储。</p><p>我们回过头来仔细观察这个差分数组，会发现，其实我们没有必要存储那些从头到尾都没有变化（即flowers数组中从来没出现该项的下标）的项，所以我们可以考虑用map来存储差分数组中变化的项，这样就能节省大量空间。</p><p>其次，在对差分数组求前缀和的过程中，我们可以保存下来累计的结果，即先计算出先到的人能看到的花朵数，然后存储下来，再继续计算前缀和到下一个人来的时间点。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fullBloomFlowers = <span class="keyword">function</span>(<span class="params">flowers, people</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cnt = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [start, end] <span class="keyword">of</span> flowers) &#123;</span><br><span class="line">        cnt.<span class="title function_">set</span>(start, cnt.<span class="title function_">has</span>(start) ? cnt.<span class="title function_">get</span>(start) + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        cnt.<span class="title function_">set</span>(end + <span class="number">1</span>, cnt.<span class="title function_">has</span>(end + <span class="number">1</span>) ? cnt.<span class="title function_">get</span>(end + <span class="number">1</span>) - <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> cnt.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>([item[<span class="number">0</span>], item[<span class="number">1</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">const</span> m = people.<span class="property">length</span>; </span><br><span class="line">    <span class="keyword">const</span> indices = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> i);</span><br><span class="line">    indices.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> people[a] - people[b]);</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>, curr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> indices) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; arr.<span class="property">length</span> &amp;&amp; arr[j][<span class="number">0</span>] &lt;= people[i]) &#123;</span><br><span class="line">            curr += arr[j][<span class="number">1</span>];</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] = curr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h1><p>第 i 到达的时间为 people[i]，假设在 people[i] 时间点之前花开的数目为 x，在 people[i] 时间之前花谢的数目为 y，则在 people[i] 时间点还处于开花状态的数目等于 x−y。我们只需要找到 start≤people[i] 的花朵数目，减去 end&lt;people[i] 的花朵数目即为 people[i] 时间点可以看到花开的数目。 根据以上分析，我们可以单独统计起始时间 start 与结束 end，利用二分查找即可快速查找结果。</p><p>首先需要将所有的起始时间 start、结束时间 end 按照从早到晚进行排序；<br>设第 i 个人到达的时间 people[i]，利用二分查找找到 $start_i$≤people[i] 的花朵数目为 x，利用二分查找找到 $end_i$&lt;people[i] 的花朵数目为 y，则第 i 个人可以看到的花朵数目为 x−y；</p><p>依次遍历并统计每个人的查询结果即可；</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天的leetcode每日一题是一道关于差分数组的困难题，其实说是困难题目，但是如果之前知道差分数组的思想，这个题目也不难，甚至是非常明显的&lt;a href=&quot;https://sunra.top/posts/54851&quot;&gt;差分数组&lt;/a&gt;，只不过使用最基础的差分数组的写法在空间上比较浪费，所以需要稍微改良一下。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>福特-富尔克森算法</title>
    <link href="https://sunra.top/posts/148d778b/"/>
    <id>https://sunra.top/posts/148d778b/</id>
    <published>2023-09-26T12:54:55.000Z</published>
    <updated>2024-03-31T02:07:10.463Z</updated>
    
    <content type="html"><![CDATA[<p>这个算法是图论中比较经典的最大流问题的算法，使用场景有很多，比如在互联网中已知中间链路每一段的最大流量，如何最快速地把数据从一个节点传递到另一个节点。</p><span id="more"></span><h1 id="算法核心思路"><a href="#算法核心思路" class="headerlink" title="算法核心思路"></a>算法核心思路</h1><p><img src="https://kingworker.cn/resources/blog/ford-fulkerson-algorithm/1.png" alt=""></p><p>假设上图为一个网络拓扑图，连接节点之间的边表示各种通道，上面的数字代表通道流量的上限，即通道的容量。每一条边的实际流量不可以超过通道的容量。</p><p>假定我们现在要从数据中心S，最快速地将数据传递到T，需要制定一个方案，使得从S到T的流量可以达到最大。</p><p>从图中可以看出，一些边由于自身容量很小，可能会成为瓶颈，而要想实现网络流量最大化，就要在一些节点进行分流，比如从A到D的边流量最大是8，显然消化不了从S到A的20，因此需要从A到B分流。</p><p>要解决这个问题，我们需要这样思考。<strong>将一个连通图从中间一刀劈开，分为G1和G2两部分，起始节点和目标节点分别在G1和G2，那么显然整个网络能够传输的最大流量不会超过<u>连接G1和G2这两部分所有边</u>的容量之和</strong>。</p><p>比如，我们把起始节点S放在G1，其他部分放在G2，如图中左边弧形切割线所示。从S出发的最大流显然无法超过被切割的三条边，也就是SA，SB，SC的总和。类似的，我们也可以把目标节点放在G2，其他放在G1，就是图中右边弧线的切割方式，网络中能够传输到T的总流量一定也不会超过DT，ET，FT三条边容量的总和。</p><p>我们可以任意划分节点，只要S和T在图的两部分就可以，计算出每一种划分方式连接G1和G2所有边的总和，然后其中最小的值就是整个图的容量瓶颈。</p><p>接下来的问题是，是否有一种设定各条边上流量的方式，让从S到T的流量能够等于最小切割流量。答案是肯定的。我们观察上图，L2对应的切割就是整个图的瓶颈，要想整个图的流量达到最大，瓶颈处的流量就必须饱和。如果被L2切割的边中有一条边的流量没有达到容量，那么说明整个网络还有进一步增加的可能性，我们就需要想办法调整每一条边的流量，让L2的各条边流量都达到饱和。</p><p><strong>调整流量的本质就是找到一条从S到T流量尚未饱和的路径，然后增加这条路径上的每一条边的流量（当然减少某条边上的反向流量也等同于增加这条边的流量）。这条流量可以增加的路径，被称为增广路径。可以证明，只要从S到T的流量还没有达到最小切割流量，就可以不断找到增广路径，直到流量达到这个值为止</strong>。</p><h1 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h1><p>对于一个有权重的图G（V，E），如果（u,v）属于E，那么它的权重为capacity(u,v)，表示这条边的容量。我们用另一个数组flow(u,v),表示每条边已经分配的流量。此外我们使用一个临时数组remaining(u,v)表示每条边还剩余的可分配的流量。</p><p>由remaining这个数组和节点的集合构成一个剩余流量图G_r，如果u，v之间没有剩余流量了，那么(u,v)这条边就不存在于剩余流量图G_r中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ford-Fulkerson(G, start, end) &#123;</span><br><span class="line">    while(G_r中存在从start到end的一条路径path) &#123;</span><br><span class="line">        remaining(path) = min&#123;remaining(u,v), (u,v)在路径path上&#125;;</span><br><span class="line">        for each (u, v) in path &#123;</span><br><span class="line">            // 如果这条边已经被分配了流量，增加其流量，否则减少其反方向流量</span><br><span class="line">            if (flow(u,v) &gt; 0) &#123;</span><br><span class="line">                flow(u,v) += remaining(path)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                flow(v,u) -= remaining(path)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述伪代码中有一点在于如何从<strong>剩余流量图G_r中</strong>找到从start到end的一条路径path，答案是BFS。</p><p>所以如果假设最大容量是F，那么这个算法的时间复杂度是O(|E|*F)，即最差的情况是每次找到增广路径，都只让流量增加1，每次找增广路径都要遍历所有的边</p><h1 id="算法具体实现"><a href="#算法具体实现" class="headerlink" title="算法具体实现"></a>算法具体实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">/ Ford - Fulkerson algorith in C</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> A 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_NODES 1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> O 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line"><span class="type">int</span> capacity[MAX_NODES][MAX_NODES];</span><br><span class="line"><span class="type">int</span> flow[MAX_NODES][MAX_NODES];</span><br><span class="line"><span class="type">int</span> color[MAX_NODES];</span><br><span class="line"><span class="type">int</span> pred[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head, tail;</span><br><span class="line"><span class="type">int</span> q[MAX_NODES + <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  q[tail] = x;</span><br><span class="line">  tail++;</span><br><span class="line">  color[x] = B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> x = q[head];</span><br><span class="line">  head++;</span><br><span class="line">  color[x] = C;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using BFS as a searching algorithm</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">  <span class="type">int</span> u, v;</span><br><span class="line">  <span class="keyword">for</span> (u = <span class="number">0</span>; u &lt; n; u++) &#123;</span><br><span class="line">    color[u] = A;</span><br><span class="line">  &#125;</span><br><span class="line">  head = tail = <span class="number">0</span>;</span><br><span class="line">  enqueue(start);</span><br><span class="line">  pred[start] = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span> (head != tail) &#123;</span><br><span class="line">    u = dequeue();</span><br><span class="line">    <span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (color[v] == A &amp;&amp; capacity[u][v] - flow[u][v] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        enqueue(v);</span><br><span class="line">        pred[v] = u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> color[target] == C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Applying fordfulkerson algorithm</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fordFulkerson</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> sink)</span> &#123;</span><br><span class="line">  <span class="type">int</span> i, j, u;</span><br><span class="line">  <span class="type">int</span> max_flow = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      flow[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Updating the residual values of edges</span></span><br><span class="line">  <span class="keyword">while</span> (bfs(source, sink)) &#123;</span><br><span class="line">    <span class="type">int</span> increment = O;</span><br><span class="line">    <span class="keyword">for</span> (u = n - <span class="number">1</span>; pred[u] &gt;= <span class="number">0</span>; u = pred[u]) &#123;</span><br><span class="line">      increment = min(increment, capacity[pred[u]][u] - flow[pred[u]][u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (u = n - <span class="number">1</span>; pred[u] &gt;= <span class="number">0</span>; u = pred[u]) &#123;</span><br><span class="line">      flow[pred[u]][u] += increment;</span><br><span class="line">      flow[u][pred[u]] -= increment;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Adding the path flows</span></span><br><span class="line">    max_flow += increment;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max_flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      capacity[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  n = <span class="number">6</span>;</span><br><span class="line">  e = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  capacity[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">  capacity[<span class="number">0</span>][<span class="number">4</span>] = <span class="number">3</span>;</span><br><span class="line">  capacity[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">9</span>;</span><br><span class="line">  capacity[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">7</span>;</span><br><span class="line">  capacity[<span class="number">2</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">  capacity[<span class="number">3</span>][<span class="number">5</span>] = <span class="number">5</span>;</span><br><span class="line">  capacity[<span class="number">4</span>][<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">  capacity[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> s = <span class="number">0</span>, t = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Max Flow: %d\n&quot;</span>, fordFulkerson(s, t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="二分图配对问题"><a href="#二分图配对问题" class="headerlink" title="二分图配对问题"></a>二分图配对问题</h2><p>其实在讲第一部分的时候，不知道大家有没有想起这个二分图的配对问题，两个问题都涉及了寻找增广路径</p><p><img src="https://kingworker.cn/resources/blog/ford-fulkerson-algorithm/3.png" alt=""></p><p>从上图可以看出，要实现L两边节点的最大配对，其实就等同于实现S到T的最大流，有两对节点能够配对，流量就是2，有三对能过够配对，流量就是3，所以这个问题可以用福特-富尔克森算法来解，这个算法对于边的最大容量和最小容量之比很大的图效率都不高，但是在二分图中，边的最大和最小容量都是1，所以这种算法的复杂度只有O(|E|)。</p><p>当然，二分图有更简单的方法，因为它每一部分内部的点之间没有边，所以可以采用寻找交替路径的方法，也就是<a href="https://sunra.top/posts/5352/">匈牙利算法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个算法是图论中比较经典的最大流问题的算法，使用场景有很多，比如在互联网中已知中间链路每一段的最大流量，如何最快速地把数据从一个节点传递到另一个节点。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>用两个哈希表实现O(1)复杂度的LFU算法</title>
    <link href="https://sunra.top/posts/6b9ec583/"/>
    <id>https://sunra.top/posts/6b9ec583/</id>
    <published>2023-09-23T13:03:01.000Z</published>
    <updated>2024-03-31T02:07:10.483Z</updated>
    
    <content type="html"><![CDATA[<p>LFU缓存是非常常见的缓存策略算法，如果考虑在O（1）的复杂度下实现，还是有一点意思的。</p><span id="more"></span><h1 id="LFU定义"><a href="#LFU定义" class="headerlink" title="LFU定义"></a>LFU定义</h1><p>LFUCache 类：</p><ul><li>LFUCache(int capacity) - 用数据结构的容量 capacity 初始化对象</li><li>int get(int key) - 如果键 key 存在于缓存中，则获取键的值，否则返回 -1 。</li><li>void put(int key, int value) - 如果键 key 已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量 capacity 时，则应该在插入新项之前，移除最不经常使用的项。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 最久未使用 的键。</li></ul><p>为了确定最不常使用的键，可以为缓存中的每个键维护一个 使用计数器 。使用计数最小的键是最久未使用的键。</p><p>当一个键首次插入到缓存中时，它的使用计数器被设置为 1 (由于 put 操作)。对缓存中的键执行 get 或 put 操作，使用计数器的值将会递增。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>既然时间复杂度需要时O(1),那我们一定要想到的就是哈希表，并且存储key-value对的方式就是哈希表。</p><p>那么问题就在于，如果达到容量了，我们怎么找出需要移除的那一项，即如何快速找出最不经常使用的那一项的key，然后通过哈希表找到value</p><p>也就是说我们需要有一种数据结构，可以让我们快速找到（count，time）与key之间的映射关系，并且（count，time）权重最小的</p><p>这里有几种思路：</p><ol><li><p>数组并配合任意一种排序算法，保证数组按照（count，time）升序或者降序排列</p></li><li><p>BST，AVL，红黑树，优先级队列，等二叉搜索树，通过（count，time）来进行排序</p></li><li><p>我们定义两个哈希表，第一个 freq_table 以频率 freq 为索引，每个索引存放一个双向链表，这个链表里存放所有使用频率为 freq 的缓存，缓存里存放三个信息，分别为键 key，值 value，以及使用频率 freq。第二个 key_table 以键值 key 为索引，每个索引存放对应缓存在 freq_table 中链表里的内存地址，这样我们就能利用两个哈希表来使得两个操作的时间复杂度均为 O(1)O(1)O(1)。同时需要记录一个当前缓存最少使用的频率 minFreq，这是为了删除操作服务的。</p></li></ol><p>只有第三种思路可以达到O（1），其实仔细思考下，因为我们只需要直到最少使用频率是哪个就好，没必要每次都完整排好序。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line">    <span class="type">int</span> minfreq, capacity;</span><br><span class="line">    Map&lt;Integer, Node&gt; keyTable;</span><br><span class="line">    Map&lt;Integer, DoublyLinkedList&gt; freqTable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LFUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minfreq = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        keyTable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Node&gt;();</span><br><span class="line">        freqTable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, DoublyLinkedList&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!keyTable.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> keyTable.get(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> node.val, freq = node.freq;</span><br><span class="line">        freqTable.get(freq).remove(node);</span><br><span class="line">        <span class="comment">// 如果当前链表为空，我们需要在哈希表中删除，且更新minFreq</span></span><br><span class="line">        <span class="keyword">if</span> (freqTable.get(freq).size == <span class="number">0</span>) &#123;</span><br><span class="line">            freqTable.remove(freq);</span><br><span class="line">            <span class="keyword">if</span> (minfreq == freq) &#123;</span><br><span class="line">                minfreq += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入到 freq + 1 中</span></span><br><span class="line">        <span class="type">DoublyLinkedList</span> <span class="variable">list</span> <span class="operator">=</span> freqTable.getOrDefault(freq + <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">DoublyLinkedList</span>());</span><br><span class="line">        list.addFirst(<span class="keyword">new</span> <span class="title class_">Node</span>(key, val, freq + <span class="number">1</span>));</span><br><span class="line">        freqTable.put(freq + <span class="number">1</span>, list);</span><br><span class="line">        keyTable.put(key, freqTable.get(freq + <span class="number">1</span>).getHead());</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!keyTable.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 缓存已满，需要进行删除操作</span></span><br><span class="line">            <span class="keyword">if</span> (keyTable.size() == capacity) &#123;</span><br><span class="line">                <span class="comment">// 通过 minFreq 拿到 freqTable[minFreq] 链表的末尾节点</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> freqTable.get(minfreq).getTail();</span><br><span class="line">                keyTable.remove(node.key);</span><br><span class="line">                freqTable.get(minfreq).remove(node);</span><br><span class="line">                <span class="keyword">if</span> (freqTable.get(minfreq).size == <span class="number">0</span>) &#123;</span><br><span class="line">                    freqTable.remove(minfreq);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">DoublyLinkedList</span> <span class="variable">list</span> <span class="operator">=</span> freqTable.getOrDefault(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">DoublyLinkedList</span>());</span><br><span class="line">            list.addFirst(<span class="keyword">new</span> <span class="title class_">Node</span>(key, value, <span class="number">1</span>));</span><br><span class="line">            freqTable.put(<span class="number">1</span>, list);</span><br><span class="line">            keyTable.put(key, freqTable.get(<span class="number">1</span>).getHead());</span><br><span class="line">            minfreq = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 与 get 操作基本一致，除了需要更新缓存的值</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> keyTable.get(key);</span><br><span class="line">            <span class="type">int</span> <span class="variable">freq</span> <span class="operator">=</span> node.freq;</span><br><span class="line">            freqTable.get(freq).remove(node);</span><br><span class="line">            <span class="keyword">if</span> (freqTable.get(freq).size == <span class="number">0</span>) &#123;</span><br><span class="line">                freqTable.remove(freq);</span><br><span class="line">                <span class="keyword">if</span> (minfreq == freq) &#123;</span><br><span class="line">                    minfreq += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">DoublyLinkedList</span> <span class="variable">list</span> <span class="operator">=</span> freqTable.getOrDefault(freq + <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">DoublyLinkedList</span>());</span><br><span class="line">            list.addFirst(<span class="keyword">new</span> <span class="title class_">Node</span>(key, value, freq + <span class="number">1</span>));</span><br><span class="line">            freqTable.put(freq + <span class="number">1</span>, list);</span><br><span class="line">            keyTable.put(key, freqTable.get(freq + <span class="number">1</span>).getHead());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> key, val, freq;</span><br><span class="line">    Node prev, next;</span><br><span class="line"></span><br><span class="line">    Node() &#123;</span><br><span class="line">        <span class="built_in">this</span>(-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(<span class="type">int</span> key, <span class="type">int</span> val, <span class="type">int</span> freq) &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.freq = freq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyLinkedList</span> &#123;</span><br><span class="line">    Node dummyHead, dummyTail;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    DoublyLinkedList() &#123;</span><br><span class="line">        dummyHead = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        dummyTail = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        dummyHead.next = dummyTail;</span><br><span class="line">        dummyTail.prev = dummyHead;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prevHead</span> <span class="operator">=</span> dummyHead.next;</span><br><span class="line">        node.prev = dummyHead;</span><br><span class="line">        dummyHead.next = node;</span><br><span class="line">        node.next = prevHead;</span><br><span class="line">        prevHead.prev = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> node.prev, next = node.next;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dummyTail.prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;LFU缓存是非常常见的缓存策略算法，如果考虑在O（1）的复杂度下实现，还是有一点意思的。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何在Android模拟器上安装Xposed</title>
    <link href="https://sunra.top/posts/8137920d/"/>
    <id>https://sunra.top/posts/8137920d/</id>
    <published>2023-09-16T02:39:34.000Z</published>
    <updated>2024-03-31T02:08:01.279Z</updated>
    
    <content type="html"><![CDATA[<p>Xposed是一个运行于Android操作系统的钩子框架。其通过替换Android系统的关键文件，可以拦截几乎所有Java函数的调用，并允许通过Xposed模块中的自定义代码更改调用这些函数时的行为。因此，Xposed常被用来修改Android系统和应用程序的功能。</p><span id="more"></span><p>Xposed Installer是Xposed框架的官方安装器，可以在拥有root权限的设备上安装Xposed框架。Xposed Installer也提供模块的下载、管理、日志显示等功能。</p><p>这篇博客就简单介绍两种方式去在Android Sutdio的模拟器上安装Xposed的方法。</p><h1 id="方法一：获取Root并安装Xposed"><a href="#方法一：获取Root并安装Xposed" class="headerlink" title="方法一：获取Root并安装Xposed"></a>方法一：获取Root并安装Xposed</h1><h2 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h2><p>1、Android开发者必备的 Android Studio<br>2、SuperSU（<a href="https://www.supersuroot.org/）：Root权限管理的工具，两个部分组成：zip包root设备，apk管理root权限。">https://www.supersuroot.org/）：Root权限管理的工具，两个部分组成：zip包root设备，apk管理root权限。</a><br>3、XposedInstaller（<a href="https://xposed-installer.en.uptodown.com/android/download）：Xposed安装器。">https://xposed-installer.en.uptodown.com/android/download）：Xposed安装器。</a></p><h2 id="创建新的AVD"><a href="#创建新的AVD" class="headerlink" title="创建新的AVD"></a>创建新的AVD</h2><p>打开Android Studio，依次点击顶部菜单栏：Tools -&gt; AVD Manager -&gt; + Create Virtual Device…，接着选择模拟器相关的配置，比如这里我选择的是：Pixel6，点解Next，来到选择镜像的页面：</p><p>选择镜像时，务必注意以下三点！！！</p><p>1、Android 8.0(包含8.0)以下的系统镜像！！！<br>2、Target里<strong>不带(Google APIs)</strong>的镜像，带(Google APIs)的是不能Root的！！！<br>3、ABI为x86的镜像！！!</p><p>没有镜像的话点Download下载，下载完后点Next进入下一步</p><p>点击Finish，等待AVD模拟器生成。生成后不用启动，直接X掉。</p><p>Android Studio依次点击顶部菜单栏：File -&gt; Settings -&gt; System Settings -&gt; Android SDK。点击 SDK Tools选项卡，安装圈住的两个东西：</p><ol><li>Android Emulator</li><li>Intel X86 Emulator Accelerator</li></ol><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="命令行以可写方式启动"><a href="#命令行以可写方式启动" class="headerlink" title="命令行以可写方式启动"></a>命令行以可写方式启动</h3><p>必须以可写方式启动，不然没办法传文件进虚拟机</p><p>接着键入下述命令启动AVD（Pixel_6_API_9处改成你的前面定义的模拟器名称即可）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd Pixel_6_API_9 -writable-system</span><br></pre></td></tr></table></figure><p>如果你忘记了也没关系，可以键入：emulator -list-avds，查看AVD列表。 成功执行后，可以看到我们的AVD已经运行起来了</p><p>把这个终端缩小就好，别关掉，关掉的话AVD也会关掉的！！！</p><h3 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h3><p>新建一个终端，cd到android sdk的 platform-tools 目录下，通过adb命令安装两个apk：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb install SuperSu路径</span><br><span class="line">adb install xposed路径</span><br></pre></td></tr></table></figure><p>安装完后不要打开！！！</p><h3 id="输入su获取root权限"><a href="#输入su获取root权限" class="headerlink" title="输入su获取root权限"></a>输入su获取root权限</h3><p>终端键入下述命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb shell setenforce 0</span><br></pre></td></tr></table></figure><p>接着把x86下的su.pie文件分别push到模拟器的system/bin和system/xbin目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push xxx/x86/su.pie /system/bin/su</span><br><span class="line">adb push xxx/x86/su.pie /system/xbin/su</span><br></pre></td></tr></table></figure><p>修改文件权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell chmod 0755 /system/bin/su</span><br><span class="line">adb shell chmod 0755 /system/xbin/su</span><br><span class="line">adb shell su --install</span><br><span class="line">adb shell su --daemon&amp;</span><br></pre></td></tr></table></figure><p>安装完后就可以打开SuperSu了，打开后会出现如下页面：</p><p>接下来会有如下这个弹框，务必注意！！！</p><p><img src="https://kingworker.cn/resources/blog/android-studio-emulator-xposed/1.awebp" alt=""></p><p>点击选 CANCEL，不然等下重启后，等待你的只有Google的开机页面！！！ 会进不了系统，你只能重头再来一遍了，务必选择 CANCEL！！！</p><p>到此SuperSu就安装配置完成了：</p><p>它只是一个Root权限管理的APP而已，接着打开Xposed Installer，点击箭头指向的小云：</p><p><img src="https://kingworker.cn/resources/blog/android-studio-emulator-xposed/2.awebp" alt=""></p><p>点击Install安装Xposed Framework的zip包,等待下载完成。</p><p>接着会弹出下图所示的授权弹窗：</p><p><img src="https://kingworker.cn/resources/blog/android-studio-emulator-xposed/3.awebp" alt=""></p><p>点击Grant，运行授权，接着会自动安装，然后会自动重启：</p><p>重启的过程可能为会稍微久一点，2-3分钟左右，重启完打开Xposed Installer就可以看到Xposed安装成功</p><h1 id="方法二：无须root"><a href="#方法二：无须root" class="headerlink" title="方法二：无须root"></a>方法二：无须root</h1><p>这种方法安装的其实是一个叫做太极的包，有了它，不需要root，也可以使用Xposed的功能和模块，并且支持Arm64架构</p><p>这个安装比较简单，无需root，直接adb install 太极的安装包即可。但只有太极阴内核，功能不是完全开放的，对于作者来说目前是够用的，如果想要开发所有功能，太极也提供了阳内核</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Xposed是一个运行于Android操作系统的钩子框架。其通过替换Android系统的关键文件，可以拦截几乎所有Java函数的调用，并允许通过Xposed模块中的自定义代码更改调用这些函数时的行为。因此，Xposed常被用来修改Android系统和应用程序的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>卡特兰数的等价问题</title>
    <link href="https://sunra.top/posts/7d9799f6/"/>
    <id>https://sunra.top/posts/7d9799f6/</id>
    <published>2023-09-10T00:49:54.000Z</published>
    <updated>2024-03-31T02:07:10.463Z</updated>
    
    <content type="html"><![CDATA[<p>之前的一篇关于<a href="https://sunra.top/posts/4d8231cb/">机器智能的本质就是分类和组合</a>的博客，我们提到过，很多应用科学将实际问题变成了信息处理的分类，组织，查找和重组，而计算机的算法再把这些信息处理问题变为计算问题。显然，这里有两个桥梁，通过第一个桥梁，很多问题其实到了算法这一步都是等价的，这次我们就用卡特兰数来说明这个问题。</p><span id="more"></span><h1 id="几个具体的问题"><a href="#几个具体的问题" class="headerlink" title="几个具体的问题"></a>几个具体的问题</h1><p>下面我们列举几个问题，大家可以先思考一下他们是怎么解决，当然我们放在这里。说明他们其实都是卡特兰数的问题，在这个基础上，大家试试能不能看出来如何解决。</p><h2 id="进出栈序列"><a href="#进出栈序列" class="headerlink" title="进出栈序列"></a>进出栈序列</h2><p>这是一道最经典的入门级卡特兰数题目，如果能把这题看懂，相信后面的题目也能迎刃而解。</p><p>题目描述：</p><p>n 个元素进栈序列为：1，2，3，4，…，n，则有多少种出栈序列</p><h2 id="括号序列"><a href="#括号序列" class="headerlink" title="括号序列"></a>括号序列</h2><p>题目描述：</p><p>n 对括号，则有多少种 “括号匹配” 的括号序列</p><h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>题目描述</p><p>n + 1 个叶子节点能够构成多少种形状不同的（国际）满二叉树</p><p>（国际）满二叉树定义：如果一棵二叉树的结点要么是叶子结点，要么它有两个子结点，这样的树就是满二叉树。</p><h2 id="电影购票"><a href="#电影购票" class="headerlink" title="电影购票"></a>电影购票</h2><p>题目描述</p><p>电影票一张 50 coin，且售票厅没有 coin。m 个人各自持有 50 coin，n 个人各自持有 100 coin。</p><p>则有多少种排队方式，可以让每个人都买到电影票。</p><h2 id="走格子"><a href="#走格子" class="headerlink" title="走格子"></a>走格子</h2><p>在一个w×h的网格上，你最开始在(0,0)上，你每个单位时间可以向上走一格，或者向右走一格，在任意一个时刻，你往右走的次数都不能少于往上走的次数，问走到(n,n),0≤n有多少种不同的合法路径。</p><h1 id="什么是卡特兰数"><a href="#什么是卡特兰数" class="headerlink" title="什么是卡特兰数"></a>什么是卡特兰数</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>学卡特兰数我觉得可能比组合数要难一点，因为组合数可以很明确的告诉你那个公式是在干什么，而卡特兰数却像是在用大量例子来解释什么时卡特兰数</p><p>这里，我对卡特兰数做一点自己的理解</p><p>卡特兰数是一个在组合数学里经常出现的一个数列，它并没有一个具体的意义，却是一个十分常见的数学规律</p><p>对卡特兰数的初步理解：有一些操作，这些操作有着一定的限制，如一种操作数不能超过另外一种操作数，或者两种操作不能有交集等，这些操作的合法操作顺序的数量</p><p>为了区分组合数，这里用fn表示卡特兰数的第n项</p><p>从零开始，卡特兰数的前几项为1,1,2,5,14,42,132,429,1430,4862,16796,58786,208012,742900,2674440,9694845,35357670,129644790…</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>递归定义</p><script type="math/tex; mode=display">fn=f_0∗f_{n−1}+f_1∗f_{n−2}+…+f{_n−1}f_0，其中n≥2</script><p>递推关系</p><script type="math/tex; mode=display">fn=\frac{4n - 2}{n + 1}fn−1</script><p>通项公式</p><script type="math/tex; mode=display">fn=\frac{1}{n + 1}C_{2n}^{n+1}</script><p>经化简后可得</p><script type="math/tex; mode=display">fn=C_{2n}^n - C_{2n}^{n+1} = C_{2n}^n - C_{2n}^{n-1}</script><p>只要我们在解决问题时得到了上面的一个关系，那么你就已经解决了这个问题，因为他们都是卡特兰数列</p><h1 id="建立具体问题于卡特兰数之间的桥梁"><a href="#建立具体问题于卡特兰数之间的桥梁" class="headerlink" title="建立具体问题于卡特兰数之间的桥梁"></a>建立具体问题于卡特兰数之间的桥梁</h1><h2 id="走格子-1"><a href="#走格子-1" class="headerlink" title="走格子"></a>走格子</h2><p>我们先以最后一个问题为例子来讲</p><p>直接求不好，考虑求有多少种不合法路径<br>路径总数为在2n次移动中选n次向上移动，即$C_{2n}^n$</p><p>画一下图，我们把y=x+1这条线画出来，发现所有的合法路径都是不能碰到这条线的，碰到即说明是一条不合法路径</p><p>先随便画一条碰到这条线的不合法路径，所有的不合法路径都会与这条线有至少一个交点，我们把第一个交点设为(a,a+1)</p><p><img src="https://kingworker.cn/resources/blog/equivalence-problem-of-catalan-number/1.png" alt=""></p><p>我们把(a,a+1)之后的路径全部按照y=x+1这条线对称过去这样，最后的终点就会变成(n−1,n+1)</p><p><img src="https://kingworker.cn/resources/blog/equivalence-problem-of-catalan-number/2.png" alt=""></p><p>由于所有的不合法路径一定会与y=x+1有这么一个交点</p><p>我们可以得出，所有不合法路径对称后都唯一对应着一条到(n−1,n+1)的路径且所有到(n−1,n+1)的一条路径都唯一对应着一条不合法路径（只需将其对称回去即可）</p><p>所以不合法路径总数是$C^{n−1}_{2n}$</p><p>那么合法的路径总数为$C^n<em>{2n}−C^{n−1}</em>{2n}$</p><p>这是一个非常好用且重要的一个方法，其它的问题也可以用该方法解决</p><p>即找到不合法路径唯一对应的到另一个点的路径</p><p>此时我们再回头看一开始我们提出的几个问题：</p><h2 id="括号序列-1"><a href="#括号序列-1" class="headerlink" title="括号序列"></a>括号序列</h2><p>你有n个左括号，n个右括号，问有多少个长度为2n的括号序列使得所有的括号都是合法的</p><p>合法的序列个数为卡特兰数</p><p>要使所有的括号合法，实际上就是在每一个前缀中左括号的数量都不少于右括号的数量将左括号看做1，右括号看做0，这题又和上面那题一模一样了</p><h2 id="进出栈序列-1"><a href="#进出栈序列-1" class="headerlink" title="进出栈序列"></a>进出栈序列</h2><p>有一个栈，我们有2n次操作，n次进栈，n次出栈，问有多少中合法的进出栈序列</p><p>合法的序列个数为卡特兰数</p><p>要使序列合法，在任何一个前缀中进栈次数都不能少于出栈次数…</p><p>后面就不用我说了吧，和上面的问题又是一模一样的了</p><h2 id="满二叉树-1"><a href="#满二叉树-1" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>使用深度优先搜索这个满二叉树，向左扩展时标记为 +1，向右扩展时标记为 -1。</p><p>由于每个非叶子节点都有两个左右子节点，所有它必然会先向左扩展，再向右扩展。总体下来，左右扩展将会形成匹配，即变成进出栈的题型。n + 1 个叶子结点会有 2n 次扩展，构成 卡特兰数 种形状不同的满二叉树。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基本上所有的卡特兰数问题经过一定的转换都可以还原成进出栈问题。因此，只要我们能够学会进出栈问题的解法，无论问题再怎么变化，本质还是不变的。</p><p>卡特兰数问题中都会存在一种匹配关系，如进出栈匹配，括号匹配等，一旦计数问题中存在这种关系，那我们就需要去考虑这是否是卡特兰数问题。此外，我们还可以记住序列前四项：1, 1, 2, 5，这些将有利于我们联想到卡特兰数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前的一篇关于&lt;a href=&quot;https://sunra.top/posts/4d8231cb/&quot;&gt;机器智能的本质就是分类和组合&lt;/a&gt;的博客，我们提到过，很多应用科学将实际问题变成了信息处理的分类，组织，查找和重组，而计算机的算法再把这些信息处理问题变为计算问题。显然，这里有两个桥梁，通过第一个桥梁，很多问题其实到了算法这一步都是等价的，这次我们就用卡特兰数来说明这个问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>机器智能的本质——分类与组合</title>
    <link href="https://sunra.top/posts/4d8231cb/"/>
    <id>https://sunra.top/posts/4d8231cb/</id>
    <published>2023-09-01T04:51:17.000Z</published>
    <updated>2024-03-31T02:07:10.463Z</updated>
    
    <content type="html"><![CDATA[<p>计算机虽然最初是用于科学计算的，但是很快他处理的对象就涵盖了世界上的所有东西，有具体的，比如人，动物和物品，也有抽象的，比如加法，函数等。<strong>对于这些东西，无论是抽象的还是具体的，大部分操作其实不是计算，而是分类，组织，查找和重组。因此很多应用科学将实际问题变成了信息处理的分类，组织，查找和重组</strong>，而计算机的算法再把这些信息处理问题变为计算问题。显然，这里有两个桥梁，我们这次就围绕这两个桥梁展开。</p><span id="more"></span><h1 id="这是选择分类问题"><a href="#这是选择分类问题" class="headerlink" title="这是选择分类问题"></a>这是选择分类问题</h1><p>我们先从计算机下棋说起，无论是下象棋还是下围棋，从本质上讲都是一个N选1的问题，对于下围棋来说，每走完一步，我们接下来都有N种选择，每个选择都是树中下一级节点。接下来再走一步，还有N种选择。将所有可能性放到一个图中，就会形成一个N叉树。</p><p>由于对弈双方是轮流进行选择的，因此在这个N叉树种，一方有奇数层选择权，而一方有偶数层的选择权，选择权不断交替，这种树被称为博弈树。将下棋这件事变成上述的N叉树，就是一开始说的建立起了实际问题和信息处理之间的桥梁，至于N选1的时候应该怎么选，那就是算法的问题了。</p><blockquote><p>将实际的问题对应到一个数据结构，然后在数据结构的基础上实现算法，当然也可以为了提高算法性能，适当调整数据结构的细节。选择数据结构的时候最好能够选择一个能更好表达其逻辑的机构，不仅有利于设计算法，也有利于提高算法性能，比如这个下棋问题，如果选择栈作为数据结构，不仅难理解，算法性能也不会高</p></blockquote><p>计算机下棋是一个定义及其明确，边界非常清楚的N选1问题。在人工智能领域还有很多N选1问题的边界就没那么清楚了，他们更准确地讲师模式分类问题，比如语音识别，手写体和印刷体文字识别，以及医学影像或人脸识别等，甚至计算机自动翻译人类的语言也属于这一类问题。</p><p>下面我们就以汉字的识别来说明这一类智能问题与分类问题之间的对应关系。为了让读者有形象的认识，我们省去笔画的影响，只关注字的形状，需要指出的是，实际的手写字识别中，笔画是很重要的.</p><p>如图所示，是一些很相似的手写字</p><p><img src="https://kingworker.cn/resources/blog/essence-of-intelligence-classification/1.png" alt=""></p><p>所谓的手写字识别，就是把上述的不同写法归类，在实际的应用中，各种各样的写法不是很容易识别。利用计算机识别这些字，其实就是根绝各个字之间的差异，将他们分类到不同的类别中。那些能够帮助分类的差异，可以被认为是一个很多维度中的变量。</p><p>为了更加直观地说明这一点，我们就把上面例子中的“田”“由”“甲”“申”相似的字进一步简化，变为二维空间中的一些点，在这两个维度中，一个表示中间一竖向上出头的长度，另一个表示中间一竖方向，那么这四个字再而二维空间中的位置表示就如图所示：</p><p><img src="https://kingworker.cn/resources/blog/essence-of-intelligence-classification/2.png" alt=""></p><p>所谓模式识别，就是在多维空间中划出不同区域，在某个区域中所有不同写法，都被认定为某个字。</p><p>当然，要分的类别越多，准确分类的难度就越大，总的来说，语音识别比文字识别难，而人脸识别比语音识别难。</p><p>对于难度更高的人脸识别，其实我们通常在应用中重新定义问题，把一个上万类的分类问题变为一个两类的分类问题————“是证件上这个人，还是其他人”</p><h1 id="组织信息：集合与判定"><a href="#组织信息：集合与判定" class="headerlink" title="组织信息：集合与判定"></a>组织信息：集合与判定</h1><p>前面说过，很多所谓的智能操作，本质上讲就是选择和分类。当然我们不可能为每一种选择，每一种每类设计一种专门的计算机，于是我们需要另一个桥梁把他们中间最基本的操作和计算机的底层逻辑联系起来。为此，我们从集合说起。</p><p>集合是对世界上的万物进行分类的最底层逻辑，它甚至很难有一个明确的定义，在计算机领域，经常要用到集合的三个基本性质。</p><p>首先，给定一个事物，能够判断它是否属于某个集合，不允许有既属于某个集合，又不属于该集合的情况发生</p><p>其次，如果两个集合相同，则集合中的所有元素相同。</p><p>最后，集合中不能有重复元素，但是没有次序</p><h2 id="二叉决策树"><a href="#二叉决策树" class="headerlink" title="二叉决策树"></a>二叉决策树</h2><p>由于对于某一个事物是否属于某个集合的判定结果是二值的，这就和我们前面提到的二分法或者二进制有着天然的联系了。无论是在计算机还是在信息论中，二分法都有着非常重要的地位。建立在“是”和“非”这种二值逻辑基础上的开关电路可以实现计算机的任何计算。当然，只要能说出集合的特性，比如“大于零的整数”，我们就可以很容易使用一课二叉树，将所有元素判定到这个集合中，或者集合外。这样一来，对于是非的判断就等价于一种二选一的分类了，我们可以用一个二叉树来表示这种分类的逻辑。</p><p>二叉树是一种非常有效的信息组织方式，其有效性至少有如下三个：</p><ol><li>操作简单。给定一个判断条件，任何元素来了以后就可以放在左边或者右边，查找的时候，可以根据判定条件，要么去左边找，要么去右边找</li><li>能够非常高效地表达大量的事物</li><li>二叉决策树和它的任意子树具有相同的形式，只要实现任意一个局部操作，即可扩展到所有情况。</li></ol><p>二分这个概念，以及和它对应的二叉树，对于计算机科学的重要性，犹如质量和长度对于物理。</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>我们前面也讲了，不是每个集合的特征都是明确的，甚至并非每个集合都有特征，当一个集合特征不明显的时候，就无法用决策树进行判定了。但是如果一个集合内的所有元素都可以枚举出来，我们其实是很清楚这个集合包括了哪些元素的，这些元素之外的集合都不属于相应的集合。</p><p>而哈希表则是构建这一类集合的有效存储方式。</p><p>对于枚举的方式划定集合边界，很多人可能会提出一个疑问，类似哈希表这样的存储结构是否要占用太多的内存空间。这确实是一个值得思考的问题，我们以屏蔽某些网站为例子。</p><p>我们有三种方法解决这个问题：</p><ol><li>直接存储整个哈希表，不论它需要占据多少空间，随着计算机性能的不断提升，这种以机器成本换取开发成本的方式在非商业领域很常见。</li><li>布隆过滤器，感兴趣的可以看我的另一篇博客：<a href="https://sunra.top/posts/57ece636/?highlight=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">布隆过滤器</a></li><li>二分决策和哈希表结合。先用简单的规则分类，对于规则无法涵盖的情况再放到一个预先设定的好的集合中专门处理，这种方法带来的效率提升是很明显的，因为例外的情况是少数。</li></ol><p>对比二叉决策树和哈希表两种情况，他们除了结构不同，其实在对待所要处理的对象的思路也不同。前者需要的是对所关注集合提炼出一个概念，比如整数，后者则是划分一个集合的边界。</p><p>人们在处理信息的时候，从本质上讲思维方式属于前者，人们会通过样本提炼出概念，然后把概念应用到所有地方，判定元素和集合的关系。而计算机，或者说人工智能，思维方式是后者，通过机器学习划分一条边界，说明哪些情况在边界内，哪些在边界外，但是它们没法提炼概念</p><h1 id="B-树，B-树，数据库的组织方式"><a href="#B-树，B-树，数据库的组织方式" class="headerlink" title="B+树，B*树，数据库的组织方式"></a>B+树，B*树，数据库的组织方式</h1><p>在计算机中，为了方便数据的查找和定位，任何事物通常都会被描述成一对由键和值构成的二元组，在一个系统的内部，键是唯一的，不能重复的，键一旦确定，值就确定了。任何事物的键都很小，能比较，而描述它们的值可能很大</p><blockquote><p>这里键的设定和比较可以考虑和之前讲<a href="https://sunra.top/posts/57ece636/?highlight=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">编码</a>的博客相结合</p></blockquote><p>树的结构有很多超出人想象的神奇之处，比如二分的直接结果就是一层层将世界上的事物分门别类，每一类可以看成一类集合，在层层分类之后，同一个集合内部的各个元素之间，不同集合之间的关系就一目了然了。</p><p>但是对于很多问题，如果真的能够直接采用N叉树，会比进行多次二分更有效，比如读音和单词的对应，直接采用26叉树更好，逻辑也更加清晰。因此在一定的场合，我们直接采用N叉树。当然不受限制的N叉树使用起来非常麻烦，一旦某个节点分叉太多，效率甚至可能退化为线性复杂度，所以我们提出了B树</p><p>关于B树的定义可以直接看这篇博客：<a href="https://zhuanlan.zhihu.com/p/146252512">https://zhuanlan.zhihu.com/p/146252512</a></p><p>在计算机中，使用比较多的是B树的变种，B+树，其改进的点在于：</p><ol><li>所有非叶子节点只保留键，它们的作用是确定子节点中关键值的区间，所有内容都必须保留在叶子节点中</li><li>用一个指针将叶子节点从头到尾串起来</li></ol><p>B+树的优点有两个，一个是结构干净，另一个则是通过叶节点指针，将所有数值排序整理还，便于一次访问大量数据，这里有点像跳表的思路。</p><p>这里我们可以思考如何用一个B+树存储整个英文字典</p><p>如果使用二叉树，我们可以使用5次二分为26个字母建立起一棵二叉树，然后通过五次查找找到第一个字母，再类似的往下一个个字母找，这个方法的一个问题是，像E，S,T这种字母出现频率很高，而J，X，Z等出现频率低，这个二叉树很不平衡，找起来效率低</p><p>而使用26叉树，每个二叉树要预留26个子节点位置，这样层数会少，但是大部分位置会浪费，此时我们就可以使用B+树了</p><p><img src="https://kingworker.cn/resources/blog/essence-of-intelligence-classification/3.png" alt=""></p><p>B<em> 树就是在B+树的基础上在非叶子节点之间增加了指向兄弟节点的指针，此外，B</em> 树对合并小节点以及分割大节点的机制做了调整</p><blockquote><p>这里别忘了，能够用树处理的是集合有定义的情况，当集合没有定义，只能枚举的时候，还是要使用哈希表</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;计算机虽然最初是用于科学计算的，但是很快他处理的对象就涵盖了世界上的所有东西，有具体的，比如人，动物和物品，也有抽象的，比如加法，函数等。&lt;strong&gt;对于这些东西，无论是抽象的还是具体的，大部分操作其实不是计算，而是分类，组织，查找和重组。因此很多应用科学将实际问题变成了信息处理的分类，组织，查找和重组&lt;/strong&gt;，而计算机的算法再把这些信息处理问题变为计算问题。显然，这里有两个桥梁，我们这次就围绕这两个桥梁展开。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>二进制编码的本质和妙用</title>
    <link href="https://sunra.top/posts/e7d8d29d/"/>
    <id>https://sunra.top/posts/e7d8d29d/</id>
    <published>2023-08-26T09:13:52.000Z</published>
    <updated>2024-03-31T02:07:10.475Z</updated>
    
    <content type="html"><![CDATA[<p>用一句话来讲计算机的功能，就是传输，存储和处理信息。要完成这样的任务，就要对信息本身进行编码，对信息要传送的目的地编码，对存储信息的物理单元编码。因此，有效的编码既是计算机科学的基础，也是掌握这门科学的钥匙。</p><span id="more"></span><h1 id="人和计算机对信息编码的差异"><a href="#人和计算机对信息编码的差异" class="headerlink" title="人和计算机对信息编码的差异"></a>人和计算机对信息编码的差异</h1><p>编码其实就是对一个对象加一个代号，在计算器发明之前就有，比如文字就是对信息的一种编码，数字也是。我们的名字，街道的名字，数学方程式等都是编码。</p><p>不过不同于其他的编码，<strong>计算机编码完全是为了区分不同的对象</strong>，因此人们在一开始就需要根据区分对象的数目设计好编码，再把真实世界的对象对应到某个编码中，因此计算机编码从一开始就是抽象的。</p><h1 id="二进制编码的妙用"><a href="#二进制编码的妙用" class="headerlink" title="二进制编码的妙用"></a>二进制编码的妙用</h1><p>二进制编码的本质就是区分不同的对象或者状态，善用二进制编码，可以帮助我们用最小的代价去表示所有的情况并进行比对。</p><p>接下来我就用两个例子来说明这个问题。</p><h2 id="分割黄金问题"><a href="#分割黄金问题" class="headerlink" title="分割黄金问题"></a>分割黄金问题</h2><p>泰勒是一名雇主，雇佣鲍勃为自己工作，工期一共七天。泰勒答应一共支付一根金条作为报酬，但是鲍勃要求每天给1/7的工资。请问如何在今天上切两刀，保证每天正好支付1/7的工资。</p><p>这个问题，我们很容易陷入如何两刀把一根金条平分成七份的纠结之中，这样其实很难操作。</p><p>但是如果我们换个思路，其实这个问题是在问，如果表示出1/7,2/7,….7/7这其中状况，如果我们用二进制来表示7种状况的话，我们可以立马想到，只需要三位就可以，即001~111这七种，而我们只需要分别有三个部分，分别表示每一位的1就好，即用十进制表示的1，2，4。所以说，我们只需要两刀将金条切成1/7,2/7,4/7就好</p><p>这样第一天给1/7那块，第二天给2/7那块，再要回1/7那块，如此往后推演即可。</p><h2 id="小白鼠实验问题"><a href="#小白鼠实验问题" class="headerlink" title="小白鼠实验问题"></a>小白鼠实验问题</h2><p>假设有64瓶药，其中63瓶是无毒的，假设小白鼠喝有毒的会死掉，且一只小白鼠只能参与一次实验，请问最少需要几只小白鼠。</p><p>这个问题也可以用二进制编码的方式来解决。</p><p>64需要6位来表示，所以我们只需要六只小白鼠，然后000000~111111所有的毒药组合中，对于每一瓶药，用二进制表示其编号之后，如果第n位为1，则该瓶要就给n号小白鼠。</p><p>举个例子，假设110001号药水，就要喂给1，2，6号小白鼠。</p><p>在这种情况下，如果没有小白鼠死亡，就是0号有毒。</p><p>这种方式其实是用每个小鼠是否死亡作为每一位的编码是0还是1来表示出了64种情况。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用一句话来讲计算机的功能，就是传输，存储和处理信息。要完成这样的任务，就要对信息本身进行编码，对信息要传送的目的地编码，对存储信息的物理单元编码。因此，有效的编码既是计算机科学的基础，也是掌握这门科学的钥匙。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
</feed>
