<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Origin of Ray</title>
  
  <subtitle>一起探索互联网的秘密</subtitle>
  <link href="https://sunra.top/atom.xml" rel="self"/>
  
  <link href="https://sunra.top/"/>
  <updated>2023-09-16T03:27:07.885Z</updated>
  <id>https://sunra.top/</id>
  
  <author>
    <name>Ray Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何在Android模拟器上安装Xposed</title>
    <link href="https://sunra.top/posts/8137920d/"/>
    <id>https://sunra.top/posts/8137920d/</id>
    <published>2023-09-16T02:39:34.000Z</published>
    <updated>2023-09-16T03:27:07.885Z</updated>
    
    <content type="html"><![CDATA[<p>Xposed是一个运行于Android操作系统的钩子框架。其通过替换Android系统的关键文件，可以拦截几乎所有Java函数的调用，并允许通过Xposed模块中的自定义代码更改调用这些函数时的行为。因此，Xposed常被用来修改Android系统和应用程序的功能。</p><span id="more"></span><p>Xposed Installer是Xposed框架的官方安装器，可以在拥有root权限的设备上安装Xposed框架。Xposed Installer也提供模块的下载、管理、日志显示等功能。</p><p>这篇博客就简单介绍两种方式去在Android Sutdio的模拟器上安装Xposed的方法。</p><h1 id="方法一：获取Root并安装Xposed"><a href="#方法一：获取Root并安装Xposed" class="headerlink" title="方法一：获取Root并安装Xposed"></a>方法一：获取Root并安装Xposed</h1><h2 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h2><p>1、Android开发者必备的 Android Studio<br>2、SuperSU（<a href="https://www.supersuroot.org/）：Root权限管理的工具，两个部分组成：zip包root设备，apk管理root权限。">https://www.supersuroot.org/）：Root权限管理的工具，两个部分组成：zip包root设备，apk管理root权限。</a><br>3、XposedInstaller（<a href="https://xposed-installer.en.uptodown.com/android/download）：Xposed安装器。">https://xposed-installer.en.uptodown.com/android/download）：Xposed安装器。</a></p><h2 id="创建新的AVD"><a href="#创建新的AVD" class="headerlink" title="创建新的AVD"></a>创建新的AVD</h2><p>打开Android Studio，依次点击顶部菜单栏：Tools -&gt; AVD Manager -&gt; + Create Virtual Device…，接着选择模拟器相关的配置，比如这里我选择的是：Pixel6，点解Next，来到选择镜像的页面：</p><p>选择镜像时，务必注意以下三点！！！</p><p>1、Android 8.0(包含8.0)以下的系统镜像！！！<br>2、Target里<strong>不带(Google APIs)</strong>的镜像，带(Google APIs)的是不能Root的！！！<br>3、ABI为x86的镜像！！!</p><p>没有镜像的话点Download下载，下载完后点Next进入下一步</p><p>点击Finish，等待AVD模拟器生成。生成后不用启动，直接X掉。</p><p>Android Studio依次点击顶部菜单栏：File -&gt; Settings -&gt; System Settings -&gt; Android SDK。点击 SDK Tools选项卡，安装圈住的两个东西：</p><ol><li>Android Emulator</li><li>Intel X86 Emulator Accelerator</li></ol><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="命令行以可写方式启动"><a href="#命令行以可写方式启动" class="headerlink" title="命令行以可写方式启动"></a>命令行以可写方式启动</h3><p>必须以可写方式启动，不然没办法传文件进虚拟机</p><p>接着键入下述命令启动AVD（Pixel_6_API_9处改成你的前面定义的模拟器名称即可）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd Pixel_6_API_9 -writable-system</span><br></pre></td></tr></table></figure><p>如果你忘记了也没关系，可以键入：emulator -list-avds，查看AVD列表。 成功执行后，可以看到我们的AVD已经运行起来了</p><p>把这个终端缩小就好，别关掉，关掉的话AVD也会关掉的！！！</p><h3 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h3><p>新建一个终端，cd到android sdk的 platform-tools 目录下，通过adb命令安装两个apk：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb install SuperSu路径</span><br><span class="line">adb install xposed路径</span><br></pre></td></tr></table></figure><p>安装完后不要打开！！！</p><h3 id="输入su获取root权限"><a href="#输入su获取root权限" class="headerlink" title="输入su获取root权限"></a>输入su获取root权限</h3><p>终端键入下述命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb shell setenforce 0</span><br></pre></td></tr></table></figure><p>接着把x86下的su.pie文件分别push到模拟器的system/bin和system/xbin目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push xxx/x86/su.pie /system/bin/su</span><br><span class="line">adb push xxx/x86/su.pie /system/xbin/su</span><br></pre></td></tr></table></figure><p>修改文件权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell chmod 0755 /system/bin/su</span><br><span class="line">adb shell chmod 0755 /system/xbin/su</span><br><span class="line">adb shell su --install</span><br><span class="line">adb shell su --daemon&amp;</span><br></pre></td></tr></table></figure><p>安装完后就可以打开SuperSu了，打开后会出现如下页面：</p><p>接下来会有如下这个弹框，务必注意！！！</p><p><img src="https://kingworker.cn/resources/blog/android-studio-emulator-xposed/1.awebp" alt=""></p><p>点击选 CANCEL，不然等下重启后，等待你的只有Google的开机页面！！！ 会进不了系统，你只能重头再来一遍了，务必选择 CANCEL！！！</p><p>到此SuperSu就安装配置完成了：</p><p>它只是一个Root权限管理的APP而已，接着打开Xposed Installer，点击箭头指向的小云：</p><p><img src="https://kingworker.cn/resources/blog/android-studio-emulator-xposed/2.awebp" alt=""></p><p>点击Install安装Xposed Framework的zip包,等待下载完成。</p><p>接着会弹出下图所示的授权弹窗：</p><p><img src="https://kingworker.cn/resources/blog/android-studio-emulator-xposed/3.awebp" alt=""></p><p>点击Grant，运行授权，接着会自动安装，然后会自动重启：</p><p>重启的过程可能为会稍微久一点，2-3分钟左右，重启完打开Xposed Installer就可以看到Xposed安装成功</p><h1 id="方法二：无须root"><a href="#方法二：无须root" class="headerlink" title="方法二：无须root"></a>方法二：无须root</h1><p>这种方法安装的其实是一个叫做太极的包，有了它，不需要root，也可以使用Xposed的功能和模块，并且支持Arm64架构</p><p>这个安装比较简单，无需root，直接adb install 太极的安装包即可。但只有太极阴内核，功能不是完全开放的，对于作者来说目前是够用的，如果想要开发所有功能，太极也提供了阳内核</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Xposed是一个运行于Android操作系统的钩子框架。其通过替换Android系统的关键文件，可以拦截几乎所有Java函数的调用，并允许通过Xposed模块中的自定义代码更改调用这些函数时的行为。因此，Xposed常被用来修改Android系统和应用程序的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>卡特兰数的等价问题</title>
    <link href="https://sunra.top/posts/7d9799f6/"/>
    <id>https://sunra.top/posts/7d9799f6/</id>
    <published>2023-09-10T00:49:54.000Z</published>
    <updated>2023-09-16T03:27:07.889Z</updated>
    
    <content type="html"><![CDATA[<p>之前的一篇关于<a href="https://sunra.top/posts/4d8231cb/">机器智能的本质就是分类和组合</a>的博客，我们提到过，很多应用科学将实际问题变成了信息处理的分类，组织，查找和重组，而计算机的算法再把这些信息处理问题变为计算问题。显然，这里有两个桥梁，通过第一个桥梁，很多问题其实到了算法这一步都是等价的，这次我们就用卡特兰数来说明这个问题。</p><span id="more"></span><h1 id="几个具体的问题"><a href="#几个具体的问题" class="headerlink" title="几个具体的问题"></a>几个具体的问题</h1><p>下面我们列举几个问题，大家可以先思考一下他们是怎么解决，当然我们放在这里。说明他们其实都是卡特兰数的问题，在这个基础上，大家试试能不能看出来如何解决。</p><h2 id="进出栈序列"><a href="#进出栈序列" class="headerlink" title="进出栈序列"></a>进出栈序列</h2><p>这是一道最经典的入门级卡特兰数题目，如果能把这题看懂，相信后面的题目也能迎刃而解。</p><p>题目描述：</p><p>n 个元素进栈序列为：1，2，3，4，…，n，则有多少种出栈序列</p><h2 id="括号序列"><a href="#括号序列" class="headerlink" title="括号序列"></a>括号序列</h2><p>题目描述：</p><p>n 对括号，则有多少种 “括号匹配” 的括号序列</p><h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>题目描述</p><p>n + 1 个叶子节点能够构成多少种形状不同的（国际）满二叉树</p><p>（国际）满二叉树定义：如果一棵二叉树的结点要么是叶子结点，要么它有两个子结点，这样的树就是满二叉树。</p><h2 id="电影购票"><a href="#电影购票" class="headerlink" title="电影购票"></a>电影购票</h2><p>题目描述</p><p>电影票一张 50 coin，且售票厅没有 coin。m 个人各自持有 50 coin，n 个人各自持有 100 coin。</p><p>则有多少种排队方式，可以让每个人都买到电影票。</p><h2 id="走格子"><a href="#走格子" class="headerlink" title="走格子"></a>走格子</h2><p>在一个w×h的网格上，你最开始在(0,0)上，你每个单位时间可以向上走一格，或者向右走一格，在任意一个时刻，你往右走的次数都不能少于往上走的次数，问走到(n,n),0≤n有多少种不同的合法路径。</p><h1 id="什么是卡特兰数"><a href="#什么是卡特兰数" class="headerlink" title="什么是卡特兰数"></a>什么是卡特兰数</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>学卡特兰数我觉得可能比组合数要难一点，因为组合数可以很明确的告诉你那个公式是在干什么，而卡特兰数却像是在用大量例子来解释什么时卡特兰数</p><p>这里，我对卡特兰数做一点自己的理解</p><p>卡特兰数是一个在组合数学里经常出现的一个数列，它并没有一个具体的意义，却是一个十分常见的数学规律</p><p>对卡特兰数的初步理解：有一些操作，这些操作有着一定的限制，如一种操作数不能超过另外一种操作数，或者两种操作不能有交集等，这些操作的合法操作顺序的数量</p><p>为了区分组合数，这里用fn表示卡特兰数的第n项</p><p>从零开始，卡特兰数的前几项为1,1,2,5,14,42,132,429,1430,4862,16796,58786,208012,742900,2674440,9694845,35357670,129644790…</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>递归定义</p><script type="math/tex; mode=display">fn=f_0∗f_{n−1}+f_1∗f_{n−2}+…+f{_n−1}f_0，其中n≥2</script><p>递推关系</p><script type="math/tex; mode=display">fn=\frac{4n - 2}{n + 1}fn−1</script><p>通项公式</p><script type="math/tex; mode=display">fn=\frac{1}{n + 1}C_{2n}^{n+1}</script><p>经化简后可得</p><script type="math/tex; mode=display">fn=C_{2n}^n - C_{2n}^{n+1} = C_{2n}^n - C_{2n}^{n-1}</script><p>只要我们在解决问题时得到了上面的一个关系，那么你就已经解决了这个问题，因为他们都是卡特兰数列</p><h1 id="建立具体问题于卡特兰数之间的桥梁"><a href="#建立具体问题于卡特兰数之间的桥梁" class="headerlink" title="建立具体问题于卡特兰数之间的桥梁"></a>建立具体问题于卡特兰数之间的桥梁</h1><h2 id="走格子-1"><a href="#走格子-1" class="headerlink" title="走格子"></a>走格子</h2><p>我们先以最后一个问题为例子来讲</p><p>直接求不好，考虑求有多少种不合法路径<br>路径总数为在2n次移动中选n次向上移动，即$C_{2n}^n$</p><p>画一下图，我们把y=x+1这条线画出来，发现所有的合法路径都是不能碰到这条线的，碰到即说明是一条不合法路径</p><p>先随便画一条碰到这条线的不合法路径，所有的不合法路径都会与这条线有至少一个交点，我们把第一个交点设为(a,a+1)</p><p><img src="https://kingworker.cn/resources/blog/equivalence-problem-of-catalan-number/1.png" alt=""></p><p>我们把(a,a+1)之后的路径全部按照y=x+1这条线对称过去这样，最后的终点就会变成(n−1,n+1)</p><p><img src="https://kingworker.cn/resources/blog/equivalence-problem-of-catalan-number/2.png" alt=""></p><p>由于所有的不合法路径一定会与y=x+1有这么一个交点</p><p>我们可以得出，所有不合法路径对称后都唯一对应着一条到(n−1,n+1)的路径且所有到(n−1,n+1)的一条路径都唯一对应着一条不合法路径（只需将其对称回去即可）</p><p>所以不合法路径总数是$C^{n−1}_{2n}$</p><p>那么合法的路径总数为$C^n<em>{2n}−C^{n−1}</em>{2n}$</p><p>这是一个非常好用且重要的一个方法，其它的问题也可以用该方法解决</p><p>即找到不合法路径唯一对应的到另一个点的路径</p><p>此时我们再回头看一开始我们提出的几个问题：</p><h2 id="括号序列-1"><a href="#括号序列-1" class="headerlink" title="括号序列"></a>括号序列</h2><p>你有n个左括号，n个右括号，问有多少个长度为2n的括号序列使得所有的括号都是合法的</p><p>合法的序列个数为卡特兰数</p><p>要使所有的括号合法，实际上就是在每一个前缀中左括号的数量都不少于右括号的数量将左括号看做1，右括号看做0，这题又和上面那题一模一样了</p><h2 id="进出栈序列-1"><a href="#进出栈序列-1" class="headerlink" title="进出栈序列"></a>进出栈序列</h2><p>有一个栈，我们有2n次操作，n次进栈，n次出栈，问有多少中合法的进出栈序列</p><p>合法的序列个数为卡特兰数</p><p>要使序列合法，在任何一个前缀中进栈次数都不能少于出栈次数…</p><p>后面就不用我说了吧，和上面的问题又是一模一样的了</p><h2 id="满二叉树-1"><a href="#满二叉树-1" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>使用深度优先搜索这个满二叉树，向左扩展时标记为 +1，向右扩展时标记为 -1。</p><p>由于每个非叶子节点都有两个左右子节点，所有它必然会先向左扩展，再向右扩展。总体下来，左右扩展将会形成匹配，即变成进出栈的题型。n + 1 个叶子结点会有 2n 次扩展，构成 卡特兰数 种形状不同的满二叉树。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基本上所有的卡特兰数问题经过一定的转换都可以还原成进出栈问题。因此，只要我们能够学会进出栈问题的解法，无论问题再怎么变化，本质还是不变的。</p><p>卡特兰数问题中都会存在一种匹配关系，如进出栈匹配，括号匹配等，一旦计数问题中存在这种关系，那我们就需要去考虑这是否是卡特兰数问题。此外，我们还可以记住序列前四项：1, 1, 2, 5，这些将有利于我们联想到卡特兰数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前的一篇关于&lt;a href=&quot;https://sunra.top/posts/4d8231cb/&quot;&gt;机器智能的本质就是分类和组合&lt;/a&gt;的博客，我们提到过，很多应用科学将实际问题变成了信息处理的分类，组织，查找和重组，而计算机的算法再把这些信息处理问题变为计算问题。显然，这里有两个桥梁，通过第一个桥梁，很多问题其实到了算法这一步都是等价的，这次我们就用卡特兰数来说明这个问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>catalan-number</title>
    <link href="https://sunra.top/posts/88ee06a6/"/>
    <id>https://sunra.top/posts/88ee06a6/</id>
    <published>2023-09-10T00:33:19.000Z</published>
    <updated>2023-09-16T03:27:07.889Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>机器智能的本质——分类与组合</title>
    <link href="https://sunra.top/posts/4d8231cb/"/>
    <id>https://sunra.top/posts/4d8231cb/</id>
    <published>2023-09-01T04:51:17.000Z</published>
    <updated>2023-09-16T03:26:14.861Z</updated>
    
    <content type="html"><![CDATA[<p>计算机虽然最初是用于科学计算的，但是很快他处理的对象就涵盖了世界上的所有东西，有具体的，比如人，动物和物品，也有抽象的，比如加法，函数等。<strong>对于这些东西，无论是抽象的还是具体的，大部分操作其实不是计算，而是分类，组织，查找和重组。因此很多应用科学将实际问题变成了信息处理的分类，组织，查找和重组</strong>，而计算机的算法再把这些信息处理问题变为计算问题。显然，这里有两个桥梁，我们这次就围绕这两个桥梁展开。</p><span id="more"></span><h1 id="这是选择分类问题"><a href="#这是选择分类问题" class="headerlink" title="这是选择分类问题"></a>这是选择分类问题</h1><p>我们先从计算机下棋说起，无论是下象棋还是下围棋，从本质上讲都是一个N选1的问题，对于下围棋来说，每走完一步，我们接下来都有N种选择，每个选择都是树中下一级节点。接下来再走一步，还有N种选择。将所有可能性放到一个图中，就会形成一个N叉树。</p><p>由于对弈双方是轮流进行选择的，因此在这个N叉树种，一方有奇数层选择权，而一方有偶数层的选择权，选择权不断交替，这种树被称为博弈树。将下棋这件事变成上述的N叉树，就是一开始说的建立起了实际问题和信息处理之间的桥梁，至于N选1的时候应该怎么选，那就是算法的问题了。</p><blockquote><p>将实际的问题对应到一个数据结构，然后在数据结构的基础上实现算法，当然也可以为了提高算法性能，适当调整数据结构的细节。选择数据结构的时候最好能够选择一个能更好表达其逻辑的机构，不仅有利于设计算法，也有利于提高算法性能，比如这个下棋问题，如果选择栈作为数据结构，不仅难理解，算法性能也不会高</p></blockquote><p>计算机下棋是一个定义及其明确，边界非常清楚的N选1问题。在人工智能领域还有很多N选1问题的边界就没那么清楚了，他们更准确地讲师模式分类问题，比如语音识别，手写体和印刷体文字识别，以及医学影像或人脸识别等，甚至计算机自动翻译人类的语言也属于这一类问题。</p><p>下面我们就以汉字的识别来说明这一类智能问题与分类问题之间的对应关系。为了让读者有形象的认识，我们省去笔画的影响，只关注字的形状，需要指出的是，实际的手写字识别中，笔画是很重要的.</p><p>如图所示，是一些很相似的手写字</p><p><img src="https://kingworker.cn/resources/blog/essence-of-intelligence-classification/1.png" alt=""></p><p>所谓的手写字识别，就是把上述的不同写法归类，在实际的应用中，各种各样的写法不是很容易识别。利用计算机识别这些字，其实就是根绝各个字之间的差异，将他们分类到不同的类别中。那些能够帮助分类的差异，可以被认为是一个很多维度中的变量。</p><p>为了更加直观地说明这一点，我们就把上面例子中的“田”“由”“甲”“申”相似的字进一步简化，变为二维空间中的一些点，在这两个维度中，一个表示中间一竖向上出头的长度，另一个表示中间一竖方向，那么这四个字再而二维空间中的位置表示就如图所示：</p><p><img src="https://kingworker.cn/resources/blog/essence-of-intelligence-classification/2.png" alt=""></p><p>所谓模式识别，就是在多维空间中划出不同区域，在某个区域中所有不同写法，都被认定为某个字。</p><p>当然，要分的类别越多，准确分类的难度就越大，总的来说，语音识别比文字识别难，而人脸识别比语音识别难。</p><p>对于难度更高的人脸识别，其实我们通常在应用中重新定义问题，把一个上万类的分类问题变为一个两类的分类问题————“是证件上这个人，还是其他人”</p><h1 id="组织信息：集合与判定"><a href="#组织信息：集合与判定" class="headerlink" title="组织信息：集合与判定"></a>组织信息：集合与判定</h1><p>前面说过，很多所谓的智能操作，本质上讲就是选择和分类。当然我们不可能为每一种选择，每一种每类设计一种专门的计算机，于是我们需要另一个桥梁把他们中间最基本的操作和计算机的底层逻辑联系起来。为此，我们从集合说起。</p><p>集合是对世界上的万物进行分类的最底层逻辑，它甚至很难有一个明确的定义，在计算机领域，经常要用到集合的三个基本性质。</p><p>首先，给定一个事物，能够判断它是否属于某个集合，不允许有既属于某个集合，又不属于该集合的情况发生</p><p>其次，如果两个集合相同，则集合中的所有元素相同。</p><p>最后，集合中不能有重复元素，但是没有次序</p><h2 id="二叉决策树"><a href="#二叉决策树" class="headerlink" title="二叉决策树"></a>二叉决策树</h2><p>由于对于某一个事物是否属于某个集合的判定结果是二值的，这就和我们前面提到的二分法或者二进制有着天然的联系了。无论是在计算机还是在信息论中，二分法都有着非常重要的地位。建立在“是”和“非”这种二值逻辑基础上的开关电路可以实现计算机的任何计算。当然，只要能说出集合的特性，比如“大于零的整数”，我们就可以很容易使用一课二叉树，将所有元素判定到这个集合中，或者集合外。这样一来，对于是非的判断就等价于一种二选一的分类了，我们可以用一个二叉树来表示这种分类的逻辑。</p><p>二叉树是一种非常有效的信息组织方式，其有效性至少有如下三个：</p><ol><li>操作简单。给定一个判断条件，任何元素来了以后就可以放在左边或者右边，查找的时候，可以根据判定条件，要么去左边找，要么去右边找</li><li>能够非常高效地表达大量的事物</li><li>二叉决策树和它的任意子树具有相同的形式，只要实现任意一个局部操作，即可扩展到所有情况。</li></ol><p>二分这个概念，以及和它对应的二叉树，对于计算机科学的重要性，犹如质量和长度对于物理。</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>我们前面也讲了，不是每个集合的特征都是明确的，甚至并非每个集合都有特征，当一个集合特征不明显的时候，就无法用决策树进行判定了。但是如果一个集合内的所有元素都可以枚举出来，我们其实是很清楚这个集合包括了哪些元素的，这些元素之外的集合都不属于相应的集合。</p><p>而哈希表则是构建这一类集合的有效存储方式。</p><p>对于枚举的方式划定集合边界，很多人可能会提出一个疑问，类似哈希表这样的存储结构是否要占用太多的内存空间。这确实是一个值得思考的问题，我们以屏蔽某些网站为例子。</p><p>我们有三种方法解决这个问题：</p><ol><li>直接存储整个哈希表，不论它需要占据多少空间，随着计算机性能的不断提升，这种以机器成本换取开发成本的方式在非商业领域很常见。</li><li>布隆过滤器，感兴趣的可以看我的另一篇博客：<a href="https://sunra.top/posts/57ece636/?highlight=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">布隆过滤器</a></li><li>二分决策和哈希表结合。先用简单的规则分类，对于规则无法涵盖的情况再放到一个预先设定的好的集合中专门处理，这种方法带来的效率提升是很明显的，因为例外的情况是少数。</li></ol><p>对比二叉决策树和哈希表两种情况，他们除了结构不同，其实在对待所要处理的对象的思路也不同。前者需要的是对所关注集合提炼出一个概念，比如整数，后者则是划分一个集合的边界。</p><p>人们在处理信息的时候，从本质上讲思维方式属于前者，人们会通过样本提炼出概念，然后把概念应用到所有地方，判定元素和集合的关系。而计算机，或者说人工智能，思维方式是后者，通过机器学习划分一条边界，说明哪些情况在边界内，哪些在边界外，但是它们没法提炼概念</p><h1 id="B-树，B-树，数据库的组织方式"><a href="#B-树，B-树，数据库的组织方式" class="headerlink" title="B+树，B*树，数据库的组织方式"></a>B+树，B*树，数据库的组织方式</h1><p>在计算机中，为了方便数据的查找和定位，任何事物通常都会被描述成一对由键和值构成的二元组，在一个系统的内部，键是唯一的，不能重复的，键一旦确定，值就确定了。任何事物的键都很小，能比较，而描述它们的值可能很大</p><blockquote><p>这里键的设定和比较可以考虑和之前讲<a href="https://sunra.top/posts/57ece636/?highlight=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">编码</a>的博客相结合</p></blockquote><p>树的结构有很多超出人想象的神奇之处，比如二分的直接结果就是一层层将世界上的事物分门别类，每一类可以看成一类集合，在层层分类之后，同一个集合内部的各个元素之间，不同集合之间的关系就一目了然了。</p><p>但是对于很多问题，如果真的能够直接采用N叉树，会比进行多次二分更有效，比如读音和单词的对应，直接采用26叉树更好，逻辑也更加清晰。因此在一定的场合，我们直接采用N叉树。当然不受限制的N叉树使用起来非常麻烦，一旦某个节点分叉太多，效率甚至可能退化为线性复杂度，所以我们提出了B树</p><p>关于B树的定义可以直接看这篇博客：<a href="https://zhuanlan.zhihu.com/p/146252512">https://zhuanlan.zhihu.com/p/146252512</a></p><p>在计算机中，使用比较多的是B树的变种，B+树，其改进的点在于：</p><ol><li>所有非叶子节点只保留键，它们的作用是确定子节点中关键值的区间，所有内容都必须保留在叶子节点中</li><li>用一个指针将叶子节点从头到尾串起来</li></ol><p>B+树的优点有两个，一个是结构干净，另一个则是通过叶节点指针，将所有数值排序整理还，便于一次访问大量数据，这里有点像跳表的思路。</p><p>这里我们可以思考如何用一个B+树存储整个英文字典</p><p>如果使用二叉树，我们可以使用5次二分为26个字母建立起一棵二叉树，然后通过五次查找找到第一个字母，再类似的往下一个个字母找，这个方法的一个问题是，像E，S,T这种字母出现频率很高，而J，X，Z等出现频率低，这个二叉树很不平衡，找起来效率低</p><p>而使用26叉树，每个二叉树要预留26个子节点位置，这样层数会少，但是大部分位置会浪费，此时我们就可以使用B+树了</p><p><img src="https://kingworker.cn/resources/blog/essence-of-intelligence-classification/3.png" alt=""></p><p>B<em> 树就是在B+树的基础上在非叶子节点之间增加了指向兄弟节点的指针，此外，B</em> 树对合并小节点以及分割大节点的机制做了调整</p><blockquote><p>这里别忘了，能够用树处理的是集合有定义的情况，当集合没有定义，只能枚举的时候，还是要使用哈希表</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;计算机虽然最初是用于科学计算的，但是很快他处理的对象就涵盖了世界上的所有东西，有具体的，比如人，动物和物品，也有抽象的，比如加法，函数等。&lt;strong&gt;对于这些东西，无论是抽象的还是具体的，大部分操作其实不是计算，而是分类，组织，查找和重组。因此很多应用科学将实际问题变成了信息处理的分类，组织，查找和重组&lt;/strong&gt;，而计算机的算法再把这些信息处理问题变为计算问题。显然，这里有两个桥梁，我们这次就围绕这两个桥梁展开。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>二进制编码的本质和妙用</title>
    <link href="https://sunra.top/posts/e7d8d29d/"/>
    <id>https://sunra.top/posts/e7d8d29d/</id>
    <published>2023-08-26T09:13:52.000Z</published>
    <updated>2023-09-16T03:26:14.869Z</updated>
    
    <content type="html"><![CDATA[<p>用一句话来讲计算机的功能，就是传输，存储和处理信息。要完成这样的任务，就要对信息本身进行编码，对信息要传送的目的地编码，对存储信息的物理单元编码。因此，有效的编码既是计算机科学的基础，也是掌握这门科学的钥匙。</p><span id="more"></span><h1 id="人和计算机对信息编码的差异"><a href="#人和计算机对信息编码的差异" class="headerlink" title="人和计算机对信息编码的差异"></a>人和计算机对信息编码的差异</h1><p>编码其实就是对一个对象加一个代号，在计算器发明之前就有，比如文字就是对信息的一种编码，数字也是。我们的名字，街道的名字，数学方程式等都是编码。</p><p>不过不同于其他的编码，<strong>计算机编码完全是为了区分不同的对象</strong>，因此人们在一开始就需要根据区分对象的数目设计好编码，再把真实世界的对象对应到某个编码中，因此计算机编码从一开始就是抽象的。</p><h1 id="二进制编码的妙用"><a href="#二进制编码的妙用" class="headerlink" title="二进制编码的妙用"></a>二进制编码的妙用</h1><p>二进制编码的本质就是区分不同的对象或者状态，善用二进制编码，可以帮助我们用最小的代价去表示所有的情况并进行比对。</p><p>接下来我就用两个例子来说明这个问题。</p><h2 id="分割黄金问题"><a href="#分割黄金问题" class="headerlink" title="分割黄金问题"></a>分割黄金问题</h2><p>泰勒是一名雇主，雇佣鲍勃为自己工作，工期一共七天。泰勒答应一共支付一根金条作为报酬，但是鲍勃要求每天给1/7的工资。请问如何在今天上切两刀，保证每天正好支付1/7的工资。</p><p>这个问题，我们很容易陷入如何两刀把一根金条平分成七份的纠结之中，这样其实很难操作。</p><p>但是如果我们换个思路，其实这个问题是在问，如果表示出1/7,2/7,….7/7这其中状况，如果我们用二进制来表示7种状况的话，我们可以立马想到，只需要三位就可以，即001~111这七种，而我们只需要分别有三个部分，分别表示每一位的1就好，即用十进制表示的1，2，4。所以说，我们只需要两刀将金条切成1/7,2/7,4/7就好</p><p>这样第一天给1/7那块，第二天给2/7那块，再要回1/7那块，如此往后推演即可。</p><h2 id="小白鼠实验问题"><a href="#小白鼠实验问题" class="headerlink" title="小白鼠实验问题"></a>小白鼠实验问题</h2><p>假设有64瓶药，其中63瓶是无毒的，假设小白鼠喝有毒的会死掉，且一只小白鼠只能参与一次实验，请问最少需要几只小白鼠。</p><p>这个问题也可以用二进制编码的方式来解决。</p><p>64需要6位来表示，所以我们只需要六只小白鼠，然后000000~111111所有的毒药组合中，对于每一瓶药，用二进制表示其编号之后，如果第n位为1，则该瓶要就给n号小白鼠。</p><p>举个例子，假设110001号药水，就要喂给1，2，6号小白鼠。</p><p>在这种情况下，如果没有小白鼠死亡，就是0号有毒。</p><p>这种方式其实是用每个小鼠是否死亡作为每一位的编码是0还是1来表示出了64种情况。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用一句话来讲计算机的功能，就是传输，存储和处理信息。要完成这样的任务，就要对信息本身进行编码，对信息要传送的目的地编码，对存储信息的物理单元编码。因此，有效的编码既是计算机科学的基础，也是掌握这门科学的钥匙。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>计算的本质与如何寻找最好的算法</title>
    <link href="https://sunra.top/posts/f7998c29/"/>
    <id>https://sunra.top/posts/f7998c29/</id>
    <published>2023-08-19T07:55:39.000Z</published>
    <updated>2023-09-16T03:26:14.865Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客的题目和写作动机都来自于吴军博士的《计算之魂》，我只是在此梳理下自己的理解，同时这篇文章所讲内容就像书中引言所讲的那种，偏向于“道”的层次，有种学生时期做题到一定程度之后，慢慢有了一定的比较玄的所谓的题感的意思。吴军博士在书中将这种感觉称为一个程序员对计算的“品味”，对于已经站在门槛上有了感觉但是说不清的程序员来讲，会有种醍醐灌顶的感觉。</p><p>博客篇幅有限，先梳理下计算的本质与如何提高算法性能。</p><span id="more"></span><h1 id="计算的本质"><a href="#计算的本质" class="headerlink" title="计算的本质"></a>计算的本质</h1><h2 id="什么是计算机"><a href="#什么是计算机" class="headerlink" title="什么是计算机"></a>什么是计算机</h2><p>计算机科学史专家们认为，最早的计算机是中国的算盘，虽然同时期的希腊也有自己的算盘，但是希腊的算盘并没有被史学家们认为是计算机，而只是辅助计算的工具。</p><p>二者的差别在于哪里呢？古希腊的算盘实际上是使用一些小石珠或者铜珠在计算过程中帮忙计数的，也就是它有存储功能，但是计算这个功能还是靠人动脑筋的，这种计算过程和用纸笔算没有区别，因此它只是辅助计算工具。而中国的算盘不一样，中国的算盘是靠一套珠算口诀来操作的，而不是心算，在中国，真正会打算盘的人，都不用动脑筋心算的，<u>也就是说，使用中国算盘，人提供的只是机械动能，而不是头脑的运算能力</u>。</p><p>从算盘的设计和使用上可以看出构成计算机的三个要素，计算单元，存储单元，再加上控制它的指令序列。没有指令序列，计算机就不完整，中国和希腊的算盘差异就在这里。任何能计算，有存储能力，受指令控制的机器都可以被算作计算机。</p><h2 id="机械计算机，布尔代数和开关电路"><a href="#机械计算机，布尔代数和开关电路" class="headerlink" title="机械计算机，布尔代数和开关电路"></a>机械计算机，布尔代数和开关电路</h2><p>算盘的指令存储和执行很简单，但还是由人来完成的，并且学会这门技艺并不简单，因此，人们自然会去想要发明不需要训练也能使用的机器。</p><p>1642年，法国数学家布莱兹帕斯卡发明了最早的机械计算机，它可以进行加减法，使用者只要拨动有刻度的旋钮，然后摇动操纵杆，就可以完成计算，相比算盘，帕斯卡机械计算机的优点在于使用者不需要训练，但是不足之处在于，计算之前输入数据太慢，导致整个计算过程太慢。</p><p>这个其实反映了计算机发展过程中一直存在的一个大问题，就是数据输入和输出的速度远远跟不上计算的速度。</p><p>后面也有巴贝奇和阿达制造出了能进行微积分运算的机械计算机，也是通过齿轮的转动来实现的。</p><p>巴贝奇和阿达的想法非常好，即<strong>采用程序控制物理运动实现计算，这其实就是计算机的本质</strong>。不过他们在实现想法的时候陷入了一个误区，那就是用复杂方法解决复杂问题，随着需要计算的精度越来越高，他们的机械计算机的设计也越来越复杂，超过了人类思考的极限与制造工艺的极限。</p><p>带领大家走出死胡同的是英国数学家乔治·布尔，美国科学家克劳德·香农和德国工程师康德拉·楚泽。</p><p><strong>布尔的贡献在于通过二进制将算数和简单的数理逻辑统一了起来，并且为大家提供了一个工具，即布尔代数。楚泽通过自己的实践证明了，布尔代数可以实现任何的十进制计算，并实现复杂的控制逻辑。香农则从理论上指出任何逻辑控制和计算都和开关电路等价，奠定了今天数字电路设计的基础。</strong></p><p>香农没有像巴贝奇那样，试图靠设计更复杂的计算机来解决更复杂的计算问题，而是在看到分析仪都到死胡同的时候，退回到计算这个问题的本源，开始用简单的方法解决复杂的问题。</p><p>香农发现，加减乘除各种运算都可以用很多个基本的逻辑电路搭建出来，就如同用乐高积木搭建出一个复杂的房子一样，也就是说，<strong>香农在布尔代数和算术运算之间搭起了一座桥梁，这算桥梁就是逻辑电路</strong>。</p><p>香农的电路设计思想可以被总结为“模块化”和“等价性”。</p><p>所谓的模块化就是用少量简单的模块搭建出各种复杂的功能，这是今天计算机行业的核心指导思想，比如超算。所以很多学者讲，超算其实从计算机科学的角度看，水平并没有什么突破，更多的是工程上的成就。</p><p>模块化的思想是的计算机产业和其他工业相比有很大的不同，一般的工业产品有大量形状和功能各不相同的组成部分，但是在<strong>计算机产品种，常常是大量相同模块的重复，这就是IT行业能够快速发展，适用范围广泛以及摩尔定律能够成立的重要原因</strong>。</p><p>计算机和IT产品容易通过模块化实现的一个重要原因是等价性，即再复杂的计算都可以等价成很多的加减乘除运算，再进而等价成开关电路的逻辑运算。</p><h2 id="图灵机：计算的本质是机械运动"><a href="#图灵机：计算的本质是机械运动" class="headerlink" title="图灵机：计算的本质是机械运动"></a>图灵机：计算的本质是机械运动</h2><p>在20世纪30年代中期，图灵就开始思考下面三个非常根本的问题：</p><ol><li>数学问题是否都有明确的答案</li><li>如果有明确答案，是否可以通过有限的计算得到答案</li><li>对于那些有可能在有限步骤计算出来的数学问题，是否有一种假想的机器，它不断运动，最后当它停下来的时候，这个数学问题就解决了</li></ol><p>图灵在读了冯诺依曼的《量子力学的数学基础》后很受启发，他认为人的意识是基于不确定性原理的，但是计算则基于机械运动（电子运动可以被认为是等价于机械运动）。今天我们知道，前者是不确定性，后者是确定性，它们都是这个世界固有的特性。</p><p>图灵很懂得<strong>在边界里做事情，他把注意力放到了那些能够通过机械运动解决的问题，即可计算的问题上</strong>。</p><p>那什么问题是可计算的呢？图灵从著名的数学家希尔伯特那里得到了启发，希尔伯特一直在思考这样的三个问题：</p><ol><li>数学是完备的吗？所谓完备性，就是说对于任何一个命题，要么可以证明它是对的，要么可以证明它是错的。</li><li>数学是一致的吗？所谓一致性，就是说一个命题不能既是真的，又是假的。</li><li>数学是可判定的吗？所谓可判定性，就是说一个具体的问题，你能否判断它是否有答案。</li></ol><p>希尔伯特的三个问题从本质上划定了数学的边界，因为数学只能解决那些在数学上是完备的问题，而数学的一致性保证它没有似是而非的答案。当然这三个问题希尔伯特也没有答案，后来的哥德尔的理论告诉我们，世界上有很多问题我们无法判断其对错，因此其不是数学问题。</p><p>对比希尔伯特和图灵的三个问题可以看出，前者关心的是一个问题是否是数学问题，如果是，能否判断其有答案，而后者关心的是，如果一个问题已经是数学问题了，能否在有限的步骤种找到答案。</p><p>图灵也不知道自己问题的答案，所以他把精力放在了那些能够在有限步骤内计算出来的数学问题上，为此，他设计了一种被后世称为图灵机的数学模型，这个模型的定义一共有四条：</p><ol><li>要有一条无限长的被分成一个个格子的纸带，每个格子记录着符号或数字。</li><li>有一个读写头，可以在纸带上左右移动，它停在那里就可以改变哪里的符号或数字</li><li>有一套规则表，根据图灵机的当前状态和读写头所指格子中的符号或数字，人们查表后就知道下一步该做什么，当然完成这一步操作后，图灵机也进入了新的状态。</li><li>图灵机的状态需要记录在一个地方，即寄存器种。图灵机的状态数量是有限的，其中一个特殊状态是停机，一旦进入这个状态，则表明计算完成。</li></ol><blockquote><p>图灵机和有限状态机都是计算模型，用于描述和理解计算过程。但是，它们的能力和使用场景有显著的区别。</p><p>相同点：</p><p>都是抽象的计算模型，用于理解和描述计算过程。<br>都有一个定义良好的状态集合，可以根据输入从一个状态转移到另一个状态。<br>不同点：</p><p>计算能力：有限状态机只能执行有限的计算，而图灵机能执行任何可以由算法表述的计算，包括那些不能被有限状态机完成的计算。这是因为图灵机有无限的存储空间，而有限状态机的存储空间是有限的。<br>存储：有限状态机没有存储能力，或者说它的存储能力被限制在有限的状态中。图灵机则有一个无限的纸带或存储空间，它可以在这个纸带上写入或读取信息。<br>应用场景：由于其计算能力的限制，有限状态机通常用于设计简单的系统，如电梯控制系统，交通灯控制系统等。而图灵机则是用来描述和设计更复杂的计算任务，如编程语言，操作系统等。</p></blockquote><h1 id="怎样寻找最好的算法"><a href="#怎样寻找最好的算法" class="headerlink" title="怎样寻找最好的算法"></a>怎样寻找最好的算法</h1><h2 id="例题：总和最大区间问题"><a href="#例题：总和最大区间问题" class="headerlink" title="例题：总和最大区间问题"></a>例题：总和最大区间问题</h2><p>给定一个实数序列，设计一个最有效的算法，找到一个总和最大的区间。</p><p>解决这个问题有四个不同的方法，我们复杂度从高到低来讲。前两种很容易想到，就简单介绍下，我们主要讲后两种</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先复杂度最高的就是三重循环，假设我们区间的起点和终点的索引分别是p和q，那么我们需要通过两重循环遍历所有p和q的组合，然后每种组合中，我们需要遍历p和q之间所有的数字进行加和，假设为S(p,q)，这就是$O(N^3)$</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>方法一种我们可以感觉到有很多重复的计算，因为如果我们知道了S(p,q),再求S(p,1+1)的时候就不需要再把所有的数加一遍了，减少了一次循环。</p><p>有的人可能会担心这种算法需要记录下所有的中间结果S(p,q)，其实我们有多种思路可以避免这个问题，</p><p>一种方案是通过前缀和的思路，先遍历一遍获取前缀和数组，然后通过双重循环比较出最大区间</p><p>另一种方案理解起来稍微复杂一点，对于每一次外层循环，即p确定情况下，我们只需要记录三个中间值：</p><ol><li>从p开始到q位置的总和S(p,q),用于计算S(p,q+1)</li><li>第二个是从p开始到q为止所有总和中最大的那个值，假设为Max，有了这个值之后，如果S(p,q+1) &lt;= Max,则Max维持不变，否则更新Max</li><li>第三个需要记录的就是区间结束的位置，不妨以r来表示，如果Max更新了，相应的区间结束位置也要更新为q+1。</li></ol><p>最后每次内层循环结束后，如果Max更新了，可以更新最后的结果。</p><p>这样一来，算法的复杂度就降低到了$O(N^2)$</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>我们还可以采用分治算法来解决这个问题，假设我们将序列一分为二，分成1到$\frac{k}{2}$，以及$\frac{k}{2} + 1$到k，然后对两个子序列分别求其总和最大的区间，接下来有两种情况：</p><ol><li>前后两个子序列的总和最大区间之间没有间隔，也就是说前一个子区间的综合最大区间是[p, k/2],后一个综合最大区间是[k/2 + 1, q]，如果两个区间各自的和都为正数，那么此时整个序列总和最大区间就是[p, q]，否则就选取两个子序列中大的那个。</li><li>如果前后两个子序列总和最大区间之间有间隔，我们假定分别为[p1, q1], [p2, q2]，那么整个序列总和最大区间是下面三者中最大的那一个：</li></ol><ul><li>[p1, q1]</li><li>[p2, q2]</li><li>[p1, q2]</li></ul><p>那么为什么不能是[p1, p2],[q1, p2],[q1, q2]呢？</p><p>我们简单解释下[p1, p2]为什么不可能，这里建议大家在纸上画个数轴理解下，数轴上从左到右有五个点，分别是，p1, q1, k/2, p2, q2</p><p>因为[p1, q1]是前半段最大的，所以[p1, q1] &gt; [p1, k/2]的，而[p1, k/2] = [p1, q1] + [q1 + 1, k/2]，所以[q1 + 1, k/2] &lt; 0，同理，[k/2 + 1, p2 - 1] &lt; 0，所以[q1 + 1, p2] &lt; 0，所以[p1, p2] = [p1, q1] + [q1 + 1, p2] &lt; [p1, q1]</p><p>那么子序列又如何求和呢？继续递归，把每个子序列当作完整的序列处理，再拆分为两个子序列就好。这种递归复杂度是$O(logk)$，每次递归的复杂度为O(k)，所以总体的复杂度降低到了$O(klogk)$</p><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><p>这种方法是在方法二的基础上的改进，在方法二中，我们事先设定区间的左边界p，在此条件下确定总和最大区间的右边界q，然后再改变左边界，遍历所有的可能性。</p><p>但是这种方法实际上已经在无形中找到了总和最大区间的右边界，我们从这个角度出发，寻找一下线性复杂度，即O(k)的算法，步骤如下：</p><ol><li>现在序列中找到第一个大于0的数字，如果这个数字不存在，即所有的数字都是非零既负，那么整个序列中最大的数就是要找的区间，这时算法的复杂度为O(k)。因此，我们可以不失一般性地假设第一个数字为正数（因为如果第一个数字不为正，就直接从头部删除，如此反复，直到第一个数字为正）</li><li>使用类似方法2中的做法，先把左边界固定在第一个数，然后让q=2，3，5…k，计算S(1, k), 以及到目前为止最大值Maxf和达到最大值的右边界r。</li><li>如果对于所有的q，都有S(1, q) &gt;= 0，或者存在某个$q_0$，当$q&gt;q_0$时，上述条件满足，这个情况比较简单，当扫描到最后，即q=k时，所保留的那个Maxf所对应的r就是我们要找的区间右边界。为什么呢？因为无论起点q在哪里，从r+1开始，无论有边界在哪里，都会导致区间和变小，所以右边界不可能往后延长了。这个比较好理解，因为S(p, r) 是最大的，所以任意一个S(r+ 1, m)，m取值从r+1到k，都是负的，而且这一点与p在哪里无关。</li></ol><p>现在我们找到了右边界，但是我们还没有找到左边界，因为上述过程只是保证了，任意一个S(r+ 1, m)，m取值从r+1到k，都是负的，并没有保证此时的p一定是区间和最大的左边界。其实这个时候，我们使用逆向思维，从后往前计算运用上述三个步骤，得到的就是左边界l，及其最大值Maxb了，同理我们可以证明任意S(m, l - 1)都是负的。</p><p>上述过程其实有一点问题，即前提是<strong>如果对于所有的q，都有S(1, q) &gt;= 0，或者存在某个$q_0$，当$q&gt;q_0$时</strong>，如果在数组中间部分突然出现一个非常大的负数，假设为v，导致从这里开始，后续的S（1， q）都是负的，而其实区间和最大的区间在这个非常大的负数后面的区间中，上述的算法就会出错，具体表现就是我们会把左边界找到v的右边，右边界找到v的左边。</p><p>此时我们需要稍微改进我们的算法的步骤2和3</p><p>改进后的步骤：<br>步骤2. 先把左边界固定在一个大于0的位置，假设为p，然后让q=p,p+1,…k,计算S(p,q),以及到目前为止最大的Max和达到Max的右边界r，如果我们算到某一步S(p,q)&lt;0时，反向计算Maxb，并确定了从1到q个数之间和最大的区间，假定为$[l_1, r_1]$，这个区间的和为$Max_1$<br>步骤3. 我们继续从q+1往后扫描，重复上述过程，找到第一个大于0的元素p’,开始做累加操作，直到又出现S(p’, q’)&lt;0的情况，这个时候我们得到了第二个局部和最大的区间$[l_2, r_2]$，相应的和为$Max_2$</p><p>现在我们需要确定从头开始到q’的和最大区间了，我们只需要比较，$Max_1,Max_2, Max_1 + Max_2 + S(r_1 + 1, l_2 -1)（也就是S(l_1, r_2)）$这三个数值就行。</p><p>我们直观上可以先否定掉最后一种情况，因为如果可以跨越这个特别小的负数的话，那么我们就没必要费这么大劲了，不过我们还是要证明下</p><p>因为$[q + 1, l_2 - 1]$之间的每一个数都小于0，所以$S(q+1, l_2 - 1) \lt 0$</p><p>同时由于，$S(l_1, r_1) + S(r_1 + 1, q) = S(p, r_1) + S(r_1 + 1, q) = S(p,q) \lt 0$</p><p>结合上述两个式子可得：$Max_1 + S(r_1 + 1, l_2 - 1) = S(l_1, r_1) + S(r_1 + 1, q) + S(q + 1, l_2 -1) &lt; 0$，也就是$S(l_1,r_2) = Max_1 + Max_2 + S(r_1 + 1, l_2 - 1) &lt; Max_2$</p><p>步骤4. 继续采取步骤三的方法，不断向后扫描得到一个个局部和最大的区间和相应的部分和$Max_i$，比较Max和$Max_i$，决定是否更新结果。</p><h2 id="如何建立计算机科学的感觉"><a href="#如何建立计算机科学的感觉" class="headerlink" title="如何建立计算机科学的感觉"></a>如何建立计算机科学的感觉</h2><p>在计算机科学领域，从一个能解决问题的人，上升到一个能够找到最佳解决方案的人，需要培养对计算机科学的感觉。对于这个问题，有经验的从业者一开始就大致能够判断出它一定有优于平方复杂度的解法。这样他们才会朝这个方向努力，那么这种感觉如何建立呢？</p><ol><li>首先是对一个问题边界的认识，在这道题种，我们知道至少要扫描一遍序列，因此不可能低于线性复杂度</li><li>其次，在计算机科学中，优化算法的最常用的方法就是检查一种算法是否在做大量的无效计算或者重复计算。</li><li>需要逆向思维，有些问题正着思考很难，但是逆向很简单，也要熟练掌握计算机的算法思维，掌握每种算法思想的本质是在做什么，什么情况下适用，比如分治思想就是和把大问题拆解成相同的规模更小的子问题。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇博客的题目和写作动机都来自于吴军博士的《计算之魂》，我只是在此梳理下自己的理解，同时这篇文章所讲内容就像书中引言所讲的那种，偏向于“道”的层次，有种学生时期做题到一定程度之后，慢慢有了一定的比较玄的所谓的题感的意思。吴军博士在书中将这种感觉称为一个程序员对计算的“品味”，对于已经站在门槛上有了感觉但是说不清的程序员来讲，会有种醍醐灌顶的感觉。&lt;/p&gt;
&lt;p&gt;博客篇幅有限，先梳理下计算的本质与如何提高算法性能。&lt;/p&gt;</summary>
    
    
    
    <category term="Alogrithm" scheme="https://sunra.top/categories/Alogrithm/"/>
    
    
  </entry>
  
  <entry>
    <title>合并有序数列并寻找中位数</title>
    <link href="https://sunra.top/posts/84ab92ad/"/>
    <id>https://sunra.top/posts/84ab92ad/</id>
    <published>2023-08-13T01:27:58.000Z</published>
    <updated>2023-09-16T03:26:14.869Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了两个题目，有一定的相似性，就一起总结下。一道题目是合并n个有序的数组/链表，另一道题目是寻找两个有序数组中所有数字的中位数。</p><p>第一个题目，有多种思路，一种是不断从n个数组中取出一个数组，进行合并两个数组的操作，基础操作是合并两个数组。</p><p>第二个题目，最简单的思路也是合并两个数组之后取中位数，不过还可以通过二分法的方式优化，最后再说。</p><span id="more"></span><h1 id="合并K个升序列表"><a href="#合并K个升序列表" class="headerlink" title="合并K个升序列表"></a>合并K个升序列表</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">输出：[1,1,2,3,4,4,5,6]</span><br><span class="line">解释：链表数组如下：</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">将它们合并到一个有序链表中得到。</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法一：顺序合并"><a href="#方法一：顺序合并" class="headerlink" title="方法一：顺序合并"></a>方法一：顺序合并</h3><p>我们可以想到一种最朴素的方法：用一个变量 ans 来维护以及合并的链表，第 i 次循环把第 i 个链表和 ans 合并，答案保存到 ans 中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode *a, ListNode *b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((!a) || (!b)) <span class="keyword">return</span> a ? a : b;</span><br><span class="line">        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;</span><br><span class="line">        <span class="keyword">while</span> (aPtr &amp;&amp; bPtr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val) &#123;</span><br><span class="line">                tail-&gt;next = aPtr; aPtr = aPtr-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail-&gt;next = bPtr; bPtr = bPtr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = (aPtr ? aPtr : bPtr);</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        ListNode *ans = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; lists.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            ans = <span class="built_in">mergeTwoLists</span>(ans, lists[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法二：分治合并"><a href="#方法二：分治合并" class="headerlink" title="方法二：分治合并"></a>方法二：分治合并</h3><p>考虑优化方法一，用分治的方法进行合并。</p><ul><li>将 k 个链表配对并将同一对中的链表合并；</li><li>第一轮合并以后， k 个链表被合并成了 $\frac{k}{2}$ 个链表，平均长度为 $\frac{2n}{k}$，然后是 $\frac{k}{4}$ 个链表，$\frac{k}{8}$ 个链表等等；</li><li>重复这一过程，直到我们得到了最终的有序链表。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode *a, ListNode *b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((!a) || (!b)) <span class="keyword">return</span> a ? a : b;</span><br><span class="line">        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;</span><br><span class="line">        <span class="keyword">while</span> (aPtr &amp;&amp; bPtr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val) &#123;</span><br><span class="line">                tail-&gt;next = aPtr; aPtr = aPtr-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail-&gt;next = bPtr; bPtr = bPtr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = (aPtr ? aPtr : bPtr);</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">merge</span><span class="params">(vector &lt;ListNode*&gt; &amp;lists, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> lists[l];</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mergeTwoLists</span>(<span class="built_in">merge</span>(lists, l, mid), <span class="built_in">merge</span>(lists, mid + <span class="number">1</span>, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">merge</span>(lists, <span class="number">0</span>, lists.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法三：使用优先队列合并"><a href="#方法三：使用优先队列合并" class="headerlink" title="方法三：使用优先队列合并"></a>方法三：使用优先队列合并</h3><p>这个方法和前两种方法的思路有所不同，我们需要维护当前每个链表没有被合并的元素的最前面一个，k 个链表就最多有 k 个满足这样条件的元素，每次在这些元素里面选取 val 属性最小的元素合并到答案中。在选取最小元素的时候，我们可以用优先队列来优化这个过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode *ptr;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Status &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> val &gt; rhs.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    priority_queue &lt;Status&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> node: lists) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node) q.<span class="built_in">push</span>(&#123;node-&gt;val, node&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode head, *tail = &amp;head;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> f = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            tail-&gt;next = f.ptr; </span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (f.ptr-&gt;next) q.<span class="built_in">push</span>(&#123;f.ptr-&gt;next-&gt;val, f.ptr-&gt;next&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法四：每次取出k个链表中最小的"><a href="#方法四：每次取出k个链表中最小的" class="headerlink" title="方法四：每次取出k个链表中最小的"></a>方法四：每次取出k个链表中最小的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode[]</span>&#125; <span class="variable">lists</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeKLists = <span class="keyword">function</span>(<span class="params">lists</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pres = <span class="keyword">new</span> <span class="title class_">Array</span>(lists.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="literal">undefined</span>, lists[i]));</span><br><span class="line">    <span class="keyword">const</span> curs = <span class="keyword">new</span> <span class="title class_">Array</span>(lists.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> lists[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="keyword">let</span> tail = dummy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(curs.<span class="title function_">some</span>(<span class="function"><span class="params">c</span> =&gt;</span> c !== <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; lists.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curs[min] === <span class="literal">null</span> &amp;&amp; curs[i] !== <span class="literal">null</span>) &#123;</span><br><span class="line">                min = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curs[min] !== <span class="literal">null</span> &amp;&amp; curs[i] !== <span class="literal">null</span>) &#123;</span><br><span class="line">                min = curs[min].<span class="property">val</span> &lt; curs[i].<span class="property">val</span> ? min : i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tail.<span class="property">next</span> = curs[min];</span><br><span class="line">        tail = tail.<span class="property">next</span>;</span><br><span class="line"></span><br><span class="line">        pres[min] = curs[min];</span><br><span class="line">        curs[min] = curs[min].<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="寻找两个有序数组中的中位数"><a href="#寻找两个有序数组中的中位数" class="headerlink" title="寻找两个有序数组中的中位数"></a>寻找两个有序数组中的中位数</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p><p>算法的时间复杂度应该为 O(log (m+n)) 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,3], nums2 = [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = [1,2,3] ，中位数 2</span><br></pre></td></tr></table></figure><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法一：合并数组后取中位数"><a href="#方法一：合并数组后取中位数" class="headerlink" title="方法一：合并数组后取中位数"></a>方法一：合并数组后取中位数</h3><p>随便选择上一个题目的一种方法进行合并，然后取中位数就好</p><h3 id="方法二：指针法"><a href="#方法二：指针法" class="headerlink" title="方法二：指针法"></a>方法二：指针法</h3><p>其实我们不需要另外开辟空间去存储合并后的数组，我们只需要知道中位数在那里就可以了</p><p>用 len 表示合并后数组的长度，如果是奇数，我们需要知道第 （len+1）/2 个数就可以了，如果遍历的话需要遍历 int(len/2 ) + 1 次。如果是偶数，我们需要知道第 len/2和 len/2+1 个数，也是需要遍历 len/2+1 次。所以遍历的话，奇数和偶数都是 len/2+1 次。</p><p>返回中位数的话，奇数需要最后一次遍历的结果就可以了，偶数需要最后一次和上一次遍历的结果。所以我们用两个变量 left 和 right，right 保存当前循环的结果，在每次循环前将 right 的值赋给 left。这样在最后一次循环的时候，left 将得到 right 的值，也就是上一次循环的结果，接下来 right 更新为最后一次的结果。</p><p>循环中该怎么写，什么时候 A 数组后移，什么时候 B 数组后移。用 aStart 和 bStart 分别表示当前指向 A 数组和 B 数组的位置。如果 aStart 还没有到最后并且此时 A 位置的数字小于 B 位置的数组，那么就可以后移了。也就是aStart＜m&amp;&amp;A[aStart]&lt; B[bStart]。</p><p>但如果 B 数组此刻已经没有数字了，继续取数字 B[ bStart ]，则会越界，所以判断下 bStart 是否大于数组长度了，这样 || 后边的就不会执行了，也就不会导致错误了，所以增加为 aStart＜m&amp;&amp;(bStart) &gt;= n||A[aStart]&lt;B[bStart]) 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span>[] B)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> A.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> B.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> m + n;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>, right = -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">aStart</span> <span class="operator">=</span> <span class="number">0</span>, bStart = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        left = right;</span><br><span class="line">        <span class="keyword">if</span> (aStart &lt; m &amp;&amp; (bStart &gt;= n || A[aStart] &lt; B[bStart])) &#123;</span><br><span class="line">            right = A[aStart++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = B[bStart++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((len &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (left + right) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>上边的两种思路，时间复杂度都达不到题目的要求 O(log(m+n)O(log(m+n)O(log(m+n)。看到 log，很明显，我们只有用到二分的方法才能达到。我们不妨用另一种思路，题目是求中位数，其实就是求第 k 小数的一种特殊情况，而求第 k 小数有一种算法。</p><p>解法二中，我们一次遍历就相当于去掉不可能是中位数的一个值，也就是一个一个排除。由于数列是有序的，其实我们完全可以一半儿一半儿的排除。假设我们要找第 k 小数，我们可以每次循环排除掉 k/2 个数。看下边一个例子。</p><p>假设我们的两个数组分别是：</p><p>[1,3,4,9]<br>[1,2,3,4,5,6,7,8,9,10]</p><p>我们比较两个数组的第 k/2 个数字，如果 k 是奇数，向下取整。也就是比较第 3 个数字，上边数组中的 4 和下边数组中的 3，如果哪个小，就表明该数组的前 k/2 个数字都不是第 k 小数字，所以可以排除。也就是 1，2，3 这三个数字不可能是第 7 小的数字，我们可以把它排除掉。将 1349 和 45678910 两个数组作为新的数组进行比较。</p><p>A[1] ，A[2] ，A[3]，A[k/2] … ，B[1]，B[2]，B[3]，B[k/2] … ，如果 A[k/2]&lt;B[k/2] ，那么A[1]，A[2]，A[3]，A[k/2] 都不可能是第 k 小的数字。</p><p>A 数组中比 A[k/2] 小的数有 k/2-1 个，B 数组中，B[k/2] 比 A[k/2] 小，假设 B[k/2] 前边的数字都比 A[k/2] 小，也只有 k/2-1 个，所以比 A[k/2] 小的数字最多有 k/1-1+k/2-1=k-2个，所以 A[k/2] 最多是第 k-1 小的数。而比 A[k/2] 小的数更不可能是第 k 小的数了，所以可以把它们排除。</p><p>由于我们已经排除掉了 3 个数字，就是这 3 个数字一定在最前边，所以在两个新数组中，我们只需要找第 7 - 3 = 4 小的数字就可以了，也就是 k = 4。此时两个数组，比较第 2 个数字，3 &lt; 5，所以我们可以把小的那个数组中的 1 ，3 排除掉了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。</span></span><br><span class="line">    <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) * <span class="number">0.5</span>;  </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getKth</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> start1, <span class="type">int</span> end1, <span class="type">int</span>[] nums2, <span class="type">int</span> start2, <span class="type">int</span> end2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> end1 - start1 + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> end2 - start2 + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 </span></span><br><span class="line">    <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">    <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start1 + Math.min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start2 + Math.min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">        <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近看到了两个题目，有一定的相似性，就一起总结下。一道题目是合并n个有序的数组/链表，另一道题目是寻找两个有序数组中所有数字的中位数。&lt;/p&gt;
&lt;p&gt;第一个题目，有多种思路，一种是不断从n个数组中取出一个数组，进行合并两个数组的操作，基础操作是合并两个数组。&lt;/p&gt;
&lt;p&gt;第二个题目，最简单的思路也是合并两个数组之后取中位数，不过还可以通过二分法的方式优化，最后再说。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>洪水填充算法</title>
    <link href="https://sunra.top/posts/886d125/"/>
    <id>https://sunra.top/posts/886d125/</id>
    <published>2023-08-06T03:35:03.000Z</published>
    <updated>2023-09-16T03:26:14.861Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了一个编程大赛是用程序去走迷宫，其中提到了一种比较有趣的方式，叫做洪水填充算法，它模拟的是在假设我们在一个迷宫的入口注水，如果有出口，水必定会从出口流出的这个过程，听起来比较有趣，于是看了一下其算法思想。</p><span id="more"></span><h1 id="什么是洪水填充算法"><a href="#什么是洪水填充算法" class="headerlink" title="什么是洪水填充算法"></a>什么是洪水填充算法</h1><p>洪水填充算法是一种用于图像处理和计算机图形学中的算法，用于将特定区域内的像素值替换为新的值。它从一个种子点开始，将相邻的像素逐个加入到一个队列中，并逐个处理队列中的像素，直到队列为空。处理过程中，可以根据特定的条件来判断是否将相邻的像素加入队列，以控制填充的范围。</p><p>洪水填充(也称为种子填充)是一种算法，用于确定连接到多维数组中给定节点的区域。</p><p>它用于绘画程序的“桶”填充工具，以用不同的颜色填充连接的、类似颜色的区域，并在围棋和扫雷等游戏中用于确定哪些棋子被清除。当应用于图像以用颜色填充特定的有界区域时，它也称为边界填充。</p><p>洪水填充算法采用三个参数：起始节点、目标颜色和替换颜色。</p><p>考虑左边的以下矩阵——如果起始节点是 (3, 9)，目标颜色为 “BLACK” 替换颜色是 “GREY”，该算法在矩阵中查找所有通过目标颜色的路径连接到起始节点的节点，并将它们更改为替换颜色。</p><h1 id="洪水填充算法与BFS，DFS的关系"><a href="#洪水填充算法与BFS，DFS的关系" class="headerlink" title="洪水填充算法与BFS，DFS的关系"></a>洪水填充算法与BFS，DFS的关系</h1><p>BFS和DFS是用于图的遍历的算法，它们可以用于搜索图中的节点或路径。它们的主要区别在于遍历的顺序不同。</p><p>BFS是一种层次遍历算法，从起始节点开始，依次访问其所有的相邻节点，然后再访问相邻节点的相邻节点，以此类推。BFS使用队列来保存待访问的节点，保证了按照层次进行遍历。</p><p>DFS是一种深度遍历算法，从起始节点开始，沿着一条路径一直遍历到底，直到无法继续深入为止，然后回溯到上一个节点，继续遍历其他路径。DFS使用栈来保存待访问的节点，保证了深度优先的特性。</p><p>洪水填充算法可以看作是一种特殊的BFS算法，它在图像中以种子点为起始节点，按照广度优先的方式进行遍历，直到无法再扩展。因此，可以说洪水填充算法是BFS的一种应用。</p><p>另外，洪水填充算法也可以使用DFS来实现，只需将栈替换为递归调用即可。但是相比于BFS，DFS在洪水填充算法中可能会导致堆栈溢出的问题，因为DFS会一直深入直到无法再扩展，而图像中的区域可能非常大，导致递归调用层次过深。</p><p>综上所述，洪水填充算法与BFS和DFS有一定的关系，可以将其看作是BFS的一种特殊应用，而DFS也可以用于实现洪水填充算法，但需要注意堆栈溢出的问题。</p><h1 id="洪水填充算法的实现"><a href="#洪水填充算法的实现" class="headerlink" title="洪水填充算法的实现"></a>洪水填充算法的实现</h1><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面列出了所有八种可能的动作</span></span><br><span class="line">row = [-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">col = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查是否可以从像素 (x, y)</span></span><br><span class="line"><span class="comment"># 当前像素。函数返回 false 如果像素</span></span><br><span class="line"><span class="comment"># 颜色不同，或者不是有效像素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isSafe</span>(<span class="params">mat, x, y, target</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &lt;= x &lt; <span class="built_in">len</span>(mat) <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; <span class="built_in">len</span>(mat[<span class="number">0</span>]) <span class="keyword">and</span> mat[x][y] == target</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 BFS 进行洪水填充</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floodfill</span>(<span class="params">mat, x, y, replacement</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 基础案例</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mat <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">len</span>(mat):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 创建Queue并入队起始像素</span></span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((x, y))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 获取目标颜色</span></span><br><span class="line">    target = mat[x][y]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#目标颜色与替换相同</span></span><br><span class="line">    <span class="keyword">if</span> target == replacement:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Queue变空时#中断</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 将前端节点出列并处理</span></span><br><span class="line">        x, y = q.popleft()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 用替换的像素颜色替换当前像素颜色</span></span><br><span class="line">        mat[x][y] = replacement</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 处理当前像素的所有八个相邻像素并</span></span><br><span class="line">        <span class="comment"># 将每个有效像素排入Queue</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row)):</span><br><span class="line">            <span class="comment"># 如果位置 (x + row[k], y + col[k]) 处的相邻像素是</span></span><br><span class="line">            <span class="comment">#有效，与当前像素颜色相同</span></span><br><span class="line">            <span class="keyword">if</span> isSafe(mat, x + row[k], y + col[k], target):</span><br><span class="line">                <span class="comment"># 将相邻像素排入Queue</span></span><br><span class="line">                q.append((x + row[k], y + col[k]))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 矩阵显示具有不同颜色的屏幕部分</span></span><br><span class="line">    mat = [</span><br><span class="line">            [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">    ]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#启动节点</span></span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">    y = <span class="number">9</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 具有目标颜色`X`</span></span><br><span class="line">    <span class="comment">#替换色</span></span><br><span class="line">    replacement = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 用替换色替换目标色</span></span><br><span class="line">    floodfill(mat, x, y, replacement)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 更换后打印颜色</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> mat:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面列出了所有八种可能的动作</span></span><br><span class="line">row = [-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">col = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查是否可以从像素 (x, y)</span></span><br><span class="line"><span class="comment"># 当前像素。函数返回 false 如果像素</span></span><br><span class="line"><span class="comment"># 颜色不同，或者不是有效像素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isSafe</span>(<span class="params">mat, x, y, target</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &lt;= x &lt; <span class="built_in">len</span>(mat) <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; <span class="built_in">len</span>(mat[<span class="number">0</span>]) <span class="keyword">and</span> mat[x][y] == target</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 DFS 进行洪水填充</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floodfill</span>(<span class="params">mat, x, y, replacement</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 基础案例</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mat <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">len</span>(mat):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 获取目标颜色</span></span><br><span class="line">    target = mat[x][y]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#目标颜色与替换相同</span></span><br><span class="line">    <span class="keyword">if</span> target == replacement:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 用替换的像素颜色替换当前像素颜色</span></span><br><span class="line">    mat[x][y] = replacement</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 处理当前像素的所有八个相邻像素并</span></span><br><span class="line">    <span class="comment"># 每个有效像素重复</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row)):</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 如果位置 (x + row[k], y + col[k]) 处的相邻像素是</span></span><br><span class="line">        <span class="comment"># 一个有效像素，与当前像素颜色相同</span></span><br><span class="line">        <span class="keyword">if</span> isSafe(mat, x + row[k], y + col[k], target):</span><br><span class="line">            floodfill(mat, x + row[k], y + col[k], replacement)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 矩阵显示具有不同颜色的屏幕部分</span></span><br><span class="line">    mat = [</span><br><span class="line">            [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">        ]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#启动节点</span></span><br><span class="line">    x, y = (<span class="number">3</span>, <span class="number">9</span>)   <span class="comment"># 具有目标颜色`X`</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#替换色</span></span><br><span class="line">    replacement = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 使用 DFS 将目标颜色替换为替换颜色</span></span><br><span class="line">    floodfill(mat, x, y, replacement)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 更换后打印颜色</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> mat:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h1 id="使用洪水填充算法解迷宫"><a href="#使用洪水填充算法解迷宫" class="headerlink" title="使用洪水填充算法解迷宫"></a>使用洪水填充算法解迷宫</h1><p>洪水填充算法（Flood Fill Algorithm）通常用于填充连通区域。虽然它不是用于解决迷宫最短路径问题的常规算法，但我们可以将其稍作修改来实现这个目标。</p><p>以下是使用洪水填充算法解决迷宫最短路径问题的步骤：</p><ol><li><p>创建一个与迷宫相同大小的二维数组，用于表示迷宫的状态。初始状态下，所有的格子都被标记为未访问状态。</p></li><li><p>选择一个起始点作为洪水的源点，并将其标记为已访问状态。</p></li><li><p>将源点加入到一个队列中。</p></li><li><p>进入循环，直到队列为空：</p></li></ol><ul><li>从队列中取出一个格子。</li><li>检查该格子的上、下、左、右四个邻居格子：<ul><li>如果邻居格子是终点，说明找到了最短路径，可以结束算法。</li><li>如果邻居格子是通路（未访问状态），将其标记为已访问状态，并将其加入队列中。</li></ul></li></ul><ol><li><p>如果队列为空，说明无法找到最短路径。</p></li><li><p>反向追踪标记的路径，从终点开始，根据每个格子周围的已访问格子找到最短路径。</p></li></ol><p>这种方法基于广度优先搜索（BFS）的思想，通过逐层遍历迷宫来找到最短路径。洪水填充算法的核心思想是从源点开始，逐渐扩散到周围的格子，直到达到目标点。</p><p>请注意，这种方法并不保证找到迷宫的最短路径，但它是一种简单且直观的方法，可以用于解决一般情况下的迷宫问题。对于复杂的迷宫，可能需要使用其他更高级的算法来找到最短路径。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近看到了一个编程大赛是用程序去走迷宫，其中提到了一种比较有趣的方式，叫做洪水填充算法，它模拟的是在假设我们在一个迷宫的入口注水，如果有出口，水必定会从出口流出的这个过程，听起来比较有趣，于是看了一下其算法思想。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（七）—— 管理沟通上篇</title>
    <link href="https://sunra.top/posts/eea95eb1/"/>
    <id>https://sunra.top/posts/eea95eb1/</id>
    <published>2023-07-30T00:35:37.000Z</published>
    <updated>2023-09-16T03:26:14.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="管理沟通的两个视角"><a href="#管理沟通的两个视角" class="headerlink" title="管理沟通的两个视角"></a>管理沟通的两个视角</h3><p>为什么管理沟通总是很难做。<br>一方面因为管理沟通确实是个很有挑战性的话题，对于技术管理者来说尤其是<br>另一方面很重要的原因是，我们在学习管理沟通的时候，重心往往放在沟通上，这就割裂了管理和沟通，因此，不但过对的管理沟通解决不了问题，还会给员工很强的套路感。如<br>总是和员工说要积极，看到员工不积极还很恼火，这忽视了提高员工积极性要靠员工激励方案。<br>认为团队文化的建设就是喊口号，不断强调，如果忽视了管理举措和文化的一致性，强调再多也没有用</p><span id="more"></span><ul><li><p>管理视角</p><p>这是一个什么样的管理问题，是角色认知问题，还是管理规划，还是团队建设或任务管理问题</p></li></ul><ul><li><p>沟通视角</p><p>对于当前的管理问题，沟通应该怎么做，沟通的目的是什么，要准备哪些内容，以何种方式来沟通。</p></li></ul><h3 id="管理沟通的挑战"><a href="#管理沟通的挑战" class="headerlink" title="管理沟通的挑战"></a>管理沟通的挑战</h3><ul><li><p>技术工作</p><p>做技术工作，主要和客观事物，自然规律打交道，客观事物和自然规律的特点就是确定性，精确性和稳定性。也正是对这些特性的熟练掌握，体现出我们对客观事物的认知水平。<br>对于这些客观的，稳定的特质，我们的信念是认识她，掌握它，遵循它，利用它。<br>所以，精确，严谨，稳定以及按照规则办事，讲逻辑而非情感和感受，是技术人的基本哲学。<br>越是优秀和出色的技术人，这些特质越明显。接下来，“悲剧”就发生了，这些人往往是上级提拔管理人才的重要人选。而相对于稳定，客观的技术来说，人是非常不稳定的因素，技术人赖以成功的最拿手的改造这个世界的手段，在应对人的时候会狼狈不堪。</p></li><li><p>项目管理</p><p>技术人从编程语言和技术框架的规划，转换到项目管理的流程和规范，对于价值观的挑战还不是颠覆性的，精确性，规范性，确定性依然可以很好地发挥作用。</p></li><li><p>和下级合作</p><p>做了管理者，要和一群人相处，如果说安排他们做事还有些规矩可以遵守的话，那么员工激励就很难用规范和规则来实现了。流程和机制是用来保障工作的下限的，而激励是激发团队工作的上限</p></li><li><p>和上级合作</p><p>对规则感和掌控感而言，和下级合作至少有一个因素可以利用，即管理者的职位和角色带来的职权影响力，从职权角度讲，因为下级向你汇报，你对他们的工作有分配，知情，评价的权利，你可以主导团队的一些规则和文化。从视野角度讲，团队成员的工作都在你的视野范围内，所以你会有一种掌控感。但是和上级合作，则什么都没有。</p></li></ul><h3 id="管理沟通的基本框架"><a href="#管理沟通的基本框架" class="headerlink" title="管理沟通的基本框架"></a>管理沟通的基本框架</h3><ul><li><p>目的</p><ul><li>建立通道</li><li>同步信息</li><li>表达感情</li><li>输出影响</li></ul></li><li><p>通道</p><ul><li><p>什么是好的通道</p><ul><li><p>稳定性</p><p>即这个通道是否是稳定可靠的，不会动不动就谈崩了或者断了联系，即使有点误会双方也能相互理解和包容。<br>稳定性的背后是信任，信任让通道保持“通”</p></li><li><p>性能</p><p>沟通的效率，在这个维度上，双方的默契气到了决定性的作用</p></li></ul></li><li><p>如何建立沟通通道</p><ul><li><p>明确沟通意愿</p><p>初级沟通着需要明白，上级默认是需要下级主动向上沟通反馈的，而非默认不需要。<br>那么如何提高自己的沟通意愿呢？首先是审视自己的角色，自己是一位工程师还是一位管理者。其次，审视自己的初衷，你是为了自己而沟通还是为了团队沟通。</p></li><li><p>评估事物的特点</p><p>也就是，根据事务的特点，例如是否重要，是否紧急，是否敏感，是否正式，是否例行等，来确定沟通的方式和频次。</p></li><li><p>了解沟通风格</p><p>了解沟通对象的沟通风格，如果说审视事务的特点，是根据事来选择沟通方式，那么审视沟通对象的风格，就是根据人来选择沟通方式。<br>探讨沟通风格和管理风格的工具比较多，例如大家熟悉的DISC，盖洛普的四大优势领域，MBTI等。<br>核心就是根据沟通对象的特点，来选用更高效和对方易接受的沟通方式，这样才更容易互相理解。<br>如果来不及去了解，可以从下面几个方向去思考：他关注人还是事，他关注过程还是结果，他重逻辑还是感受，他重思考还是行动，他偏好直接还是委婉，他喜欢书面沟通还是当面沟通</p></li><li><p>审视信任关系</p><p>越信任，双方之间的沟通就越简单</p></li></ul></li></ul></li></ul><ul><li><p>内容</p><ul><li><p>内容选取</p><p>明确沟通什么，不沟通什么，沟通内容的选取是有效沟通的前提</p></li><li><p>呈现逻辑</p><p>内容选定之后，接下来就是对内容的呈现，无论是书面的还是当面，逻辑性痘痕重要。由于书面沟通节奏慢，成本高，因此呈现逻辑更加关键。比如对于邮件，以下四个原则收效显著：标题清晰，指向明确，结论优先，结构MECE</p></li><li><p>倾听</p><p>倾听的目的是为了分辨对方言谈中传递的信息，观点和意图</p></li><li><p>确认</p><p>当我们收到对方的内容的时候，就想当然地以为自己理解了对方，这就造成了很多的一厢情愿。这个时候，一两个简答的“回放式”问题就可以确认是否是这样</p></li></ul></li><li><p>影响力</p><p>共同不包括影响力，但是影响力却在很大程度上影响着沟通效果，很多时候影响力甚至是决定性的。<br>同样的沟通，具有不同影响力的人和你沟通，效果是不一样的。</p></li></ul><h3 id="管理沟通的四项积累"><a href="#管理沟通的四项积累" class="headerlink" title="管理沟通的四项积累"></a>管理沟通的四项积累</h3><ul><li><p>管理逻辑</p><p>管理逻辑和管理判断力是做好管理沟通的重要因素，而且这因素会随着管理认知和管理方法论的积累而不断提升，变得越来越有效</p></li><li><p>通道品质</p><p>信任水平和默契程度，无法速成，积累的水平越高，沟通通道的品质就越高</p></li><li><p>工具流程</p><p>沟通有很多的工具，技巧和流程，我们不需要完全掌握，而只需要掌握自己最顺手的工具，抽取并提炼</p></li><li><p>影响力</p><p>影响力的积累不是一两天的事情，其发挥作用的时候却非常稳定。</p></li></ul><h3 id="两个重要的沟通技术"><a href="#两个重要的沟通技术" class="headerlink" title="两个重要的沟通技术"></a>两个重要的沟通技术</h3><p>通道品质好就靠通道，通道品质不好就靠沟通技术</p><ul><li><p>3F倾听</p><ul><li><p>事实Fact</p><p>对齐事实信息是必要且高效的，随着信息的不断同步和默契度不断提升，在一些沟通中，这一步经常被省略，但是不代表这个不重要。</p></li><li><p>感受Feel</p><p>针对相同的客观事实，双方的感受和看法也常常是不同的。<br>我们常说的默契，主要体现在沟通双方对彼此的感受和判断逻辑的理解基础上，因此，双方越熟悉彼此的立场，思维方式，沟通风格，就越容易达成默契。<br>在默契还没有形成的时候，要有意识的去询问对方的感受，避免猜测和想当然。</p></li><li><p>意图Focus</p><p>当意图没有矛盾和冲突的时候，一场沟通本来可以达成彼此满意的结果，但是在沟通中，不在一个频道，把事实，感受，责任，原因，方案放在一起说，就导致鸡同鸭讲</p></li></ul></li><li><p>发问</p><p>大部分管理者擅长的是告诉，而不是发问</p></li></ul><ul><li><p>封闭式提问</p><p>让回答着只能在某个集合中做出选择，而无法随意发挥。例如<br>xxx，好不好/是不是。</p></li></ul><pre><code>- 适用场景  1. 要降低回答成本的时候  2. 要收敛和聚焦话题的时候  3. 要得出结论并加以确认的时候</code></pre><ul><li><p>开放式问题</p><p>回答者可以按照自己的意思进行陈述而不受限制的问题</p></li></ul><pre><code>- 适用场景  1 收集信息和观点的时候。  2. 激发对方表达意愿的时候。有时候，激发员工的表达欲，也是一种有效的激励手段  3. 缓和谈话气氛的时候</code></pre><h3 id="影响力"><a href="#影响力" class="headerlink" title="影响力"></a>影响力</h3><p>一种不是用强制性力量却能改变别人看法和行为的能力，一般又分为职权影响力和非职权影响力。</p><ul><li><p>职权影响力</p><ul><li><p>传统因素</p><p>在社会传统意识和社会规范中，人们对上级固有认知 让人们对上级的基本姿态是服从</p></li></ul></li></ul><ul><li><p>职位因素</p><p>从组织架构的角度，由于上级对下级有奖惩和评价的权利，是的下级对上级有一种敬畏感</p></li></ul><ul><li><p>资历因素</p><p>资历深的人，在资历浅的人眼里是值得尊重的</p></li></ul><ul><li><p>非职权影响力</p><ul><li><p>信任</p><ul><li><p>人品或人格</p><ol><li>深入了解。信任是建立在深入了解的基础上的，所以通过全方位的加深了解来提升信任是常用手段。</li><li>价值观认同。和我们价值观匹配的人更容易相互信任。</li></ol></li><li><p>历史表现</p><ol><li>及时响应对方，因为及时响应意味着可控，可以来，所以及时响应可以提升信任感。</li><li>去承诺，然后兑现承诺。即我们常说的承诺一致性。<br>2.1 不要承诺很多，而只要去承诺哪些你和上级都认为重要的事情<br>2.2 如果中途发生变化，提前做出更合理的调整并和上级重新明确约定<br>2.3 全力以赴确保兑现。</li></ol></li></ul></li><li><p>专业</p><ul><li>提升权威性</li><li>提升逻辑性</li></ul></li><li><p>情绪</p><ul><li><p>通过诉诸情怀来感染人</p><p>前提是，它得是真的，勉强往情怀上靠反而会让人反感。</p></li><li><p>通过情绪感染人</p><p>人不是纯理性的</p></li></ul></li><li><p>互惠</p><p>这一点是关于“心理债务”的，其影响力发挥的逻辑是，我之所以听你的，是因为我欠你的。</p></li></ul></li></ul><pre><code>- 理清楚对方的诉求，去满足对方的诉求，然后翻过来满足自己的诉求- 主动提供支持和帮助</code></pre><ul><li><p>提高影响力</p><ul><li><p>积累信任</p><ul><li>梳理自己闪光的品质，提炼并彰显出来</li><li>承诺一致性原则，把一个个当前表现积累为历史表现</li><li>对于特定对象，盘点你们相互认同的价值观</li></ul></li><li><p>打磨专业度</p><ul><li>努力成为某个方向上专家</li><li>提升自己的逻辑思维能力和表达能力</li></ul></li><li><p>运用情绪</p><ul><li>为自己的工作赋予某种情怀和意义</li><li>展现自己的气魄和勇气</li></ul></li><li><p>着眼互惠</p><ul><li>双赢思维</li><li>提供帮助</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;管理沟通的两个视角&quot;&gt;&lt;a href=&quot;#管理沟通的两个视角&quot; class=&quot;headerlink&quot; title=&quot;管理沟通的两个视角&quot;&gt;&lt;/a&gt;管理沟通的两个视角&lt;/h3&gt;&lt;p&gt;为什么管理沟通总是很难做。&lt;br&gt;一方面因为管理沟通确实是个很有挑战性的话题，对于技术管理者来说尤其是&lt;br&gt;另一方面很重要的原因是，我们在学习管理沟通的时候，重心往往放在沟通上，这就割裂了管理和沟通，因此，不但过对的管理沟通解决不了问题，还会给员工很强的套路感。如&lt;br&gt;总是和员工说要积极，看到员工不积极还很恼火，这忽视了提高员工积极性要靠员工激励方案。&lt;br&gt;认为团队文化的建设就是喊口号，不断强调，如果忽视了管理举措和文化的一致性，强调再多也没有用&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在两台Centos机器上部署主从复制的mysql</title>
    <link href="https://sunra.top/posts/547eb08f/"/>
    <id>https://sunra.top/posts/547eb08f/</id>
    <published>2023-07-22T06:16:34.000Z</published>
    <updated>2023-09-16T03:26:14.857Z</updated>
    
    <content type="html"><![CDATA[<p>为了保证数据的可靠，我们一般会对数据醉一次主从复制，最近我也进行了一点实践，踩了几个坑，在这里总结下。</p><span id="more"></span><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>我自身有两台centos的云服务器，一台已经装过mysql了，不过是5.7版本，一台是我刚装的mysql，是8.0版本。</p><h1 id="主从备份的流程"><a href="#主从备份的流程" class="headerlink" title="主从备份的流程"></a>主从备份的流程</h1><h2 id="将5-7的数据库升级"><a href="#将5-7的数据库升级" class="headerlink" title="将5.7的数据库升级"></a>将5.7的数据库升级</h2><p>因为我是打算用5.7所在的服务器作为从库的服务器，而mysql的主从备份有要求，从库的版本不能低于主库的，所以第一步就是升级</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>首先，我们要大概了解下MySQL5.7和8.0有哪些不同，参考官方文档和其他网友文章，概括总结出MySQL8.0以下几点新特性：</p><ul><li>默认字符集由latin1变为utf8mb4。</li><li>MyISAM系统表全部换成InnoDB表。</li><li>JSON特性增强。</li><li>支持不可见索引，支持直方图。</li><li>sql_mode参数默认值变化。</li><li>默认密码策略变更。</li><li>新增角色管理。</li><li>支持窗口函数，支持Hash join。</li></ul><p>根据版本变化及官方升级教程，列举出以下几点注意事项：</p><ul><li>注意字符集设置。为了避免新旧对象字符集不一致的情况，可以在配置文件将字符集和校验规则设置为旧版本的字符集和比较规则。</li><li>密码认证插件变更。为了避免连接问题，可以仍采用5.7的mysql_native_password认证插件。</li><li>sql_mode支持问题。8.0版本sql_mode不支持NO_AUTO_CREATE_USER，要避免配置的sql_mode中带有NO_AUTO_CREATE_USER。</li><li>是否需要手动升级系统表。在MySQL 8.0.16版本之前，需要手动的执行mysql_upgrade来完成该步骤的升级，在MySQL 8.0.16版本及之后是由mysqld来完成该步骤的升级。</li></ul><h3 id="升级流程"><a href="#升级流程" class="headerlink" title="升级流程"></a>升级流程</h3><p>官网下载对应版本的tar包，可通过wget下载或者本地下载后上传。</p><blockquote><p>下载地址：<br><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a><br>选择mysql-8.0.19-linux-glibc2.12-x86_64.tar.xz<br>注意，如果你下载速度很慢，可以考虑使用淘宝的镜像地址：<a href="https://mirrors.aliyun.com/mysql">https://mirrors.aliyun.com/mysql</a></p></blockquote><p>行以下步骤解压tar包：</p><ol><li><p>安装包上传至原安装包目录下 我的是/usr/local/<br>cd /usr/local/</p></li><li><p>解压安装包<br>xz -d mysql-8.0.19-linux-glibc2.12-x86_64.tar.xz<br>tar -xvf mysql-8.0.19-linux-glibc2.12-x86_64.tar</p></li><li><p>文件夹重命名为mysql8<br>mv mysql-8.0.19-linux-glibc2.12-x86_64 mysql8</p></li><li><p>更改文件夹所属<br>chown -R mysql.mysql /usr/local/mysql8/</p></li><li><p>更改配置文件my.cnf</p></li></ol><p>因5.7版本与8.0版本参数有所不同，为了能顺利升级，我们需要更改部分配置参数。主要注意sql_mode、basedir、密码认证插件及字符集设置，其他参数最好还是按照原5.7的来，不需要做调整。下面展示下更改后的配置文件：</p><blockquote><p>最后几个for8.0的参数要格外注意<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">mysqld</span>]</span><br><span class="line"><span class="string">user</span> <span class="string">=</span> <span class="string">mysql</span>        </span><br><span class="line"><span class="string">datadir</span> <span class="string">=</span> <span class="string">/data/mysql/data</span>  </span><br><span class="line"><span class="string">port</span> <span class="string">=</span> <span class="number">3306</span>               </span><br><span class="line"></span><br><span class="line"><span class="string">socket</span> <span class="string">=</span> <span class="string">/data/mysql/tmp/mysql.sock</span></span><br><span class="line"><span class="string">pid-file</span>  <span class="string">=</span> <span class="string">/data/mysql/tmp/mysqld.pid</span></span><br><span class="line"><span class="string">tmpdir</span> <span class="string">=</span> <span class="string">/data/mysql/tmp</span>    </span><br><span class="line"><span class="string">skip_name_resolve</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">max_connections</span> <span class="string">=</span> <span class="number">2000</span></span><br><span class="line"><span class="string">group_concat_max_len</span> <span class="string">=</span> <span class="number">1024000</span></span><br><span class="line"><span class="string">lower_case_table_names</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">log_timestamps=SYSTEM</span></span><br><span class="line"><span class="string">max_allowed_packet</span> <span class="string">=</span> <span class="string">32M</span></span><br><span class="line"><span class="string">binlog_cache_size</span> <span class="string">=</span> <span class="string">4M</span></span><br><span class="line"><span class="string">sort_buffer_size</span> <span class="string">=</span> <span class="string">2M</span></span><br><span class="line"><span class="string">read_buffer_size</span> <span class="string">=</span> <span class="string">4M</span></span><br><span class="line"><span class="string">join_buffer_size</span> <span class="string">=</span> <span class="string">4M</span></span><br><span class="line"><span class="string">tmp_table_size</span> <span class="string">=</span> <span class="string">96M</span></span><br><span class="line"><span class="string">max_heap_table_size</span> <span class="string">=</span> <span class="string">96M</span></span><br><span class="line"><span class="string">max_length_for_sort_data</span> <span class="string">=</span> <span class="number">8096</span></span><br><span class="line"><span class="string">default_time_zone</span> <span class="string">=</span> <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#logs</span></span><br><span class="line"><span class="string">server-id</span> <span class="string">=</span> <span class="number">1003306</span></span><br><span class="line"><span class="string">log-error</span> <span class="string">=</span> <span class="string">/data/mysql/logs/error.log</span></span><br><span class="line"><span class="string">slow_query_log</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">slow_query_log_file</span> <span class="string">=</span> <span class="string">/data/mysql/logs/slow.log</span></span><br><span class="line"><span class="string">long_query_time</span> <span class="string">=</span> <span class="number">3</span></span><br><span class="line"><span class="string">log-bin</span> <span class="string">=</span> <span class="string">/data/mysql/logs/binlog</span></span><br><span class="line"><span class="string">binlog_format</span> <span class="string">=</span> <span class="string">row</span></span><br><span class="line"><span class="string">log_bin_trust_function_creators</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">gtid_mode</span> <span class="string">=</span> <span class="string">ON</span></span><br><span class="line"><span class="string">enforce_gtid_consistency</span> <span class="string">=</span> <span class="string">ON</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#for8.0</span></span><br><span class="line"><span class="string">sql_mode</span> <span class="string">=</span> <span class="string">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span></span><br><span class="line"><span class="string">character-set-server</span> <span class="string">=</span> <span class="string">utf8</span></span><br><span class="line"><span class="string">collation_server</span> <span class="string">=</span> <span class="string">utf8_general_ci</span></span><br><span class="line"><span class="string">basedir</span> <span class="string">=</span> <span class="string">/usr/local/mysql8</span></span><br><span class="line"><span class="string">skip_ssl</span></span><br><span class="line"><span class="string">default_authentication_plugin=mysql_native_password</span></span><br></pre></td></tr></table></figure></p></blockquote><ol><li>执行升级动作</li></ol><p>所有前置工作准备好后就可以开始正式升级了，不过升级前还是建议先全库备份下。万事俱备后，按照如下指示进行正式升级。</p><p>进入原5.7 mysql命令行 正确关闭数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> version();</span></span><br><span class="line">+------------+</span><br><span class="line">| version()  |</span><br><span class="line">+------------+</span><br><span class="line">| 5.7.23-log |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&#x27;innodb_fast_shutdown&#x27;</span>;</span></span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Variable_name        | Value |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| innodb_fast_shutdown | 1     |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保数据都刷到硬盘上，更改成0</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> global innodb_fast_shutdown=0;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">shutdown;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">Bye</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出至终端 用mysql8.0.19客户端直接启动</span></span><br><span class="line">[root@centos ~]# /usr/local/mysql8/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=mysql &amp; </span><br><span class="line">[1] 23333</span><br><span class="line">[root@centos ~]# 2020-05-20T07:07:02.337626Z mysqld_safe Logging to &#x27;/data/mysql/logs/error.log&#x27;.</span><br><span class="line">2020-05-20T07:07:02.366244Z mysqld_safe Starting mysqld daemon with databases from /data/mysql/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可观察下错误日志看是否报错 然后重新登录测试</span></span><br><span class="line">[root@centos ~]# mysql -uroot -p123456 </span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 17</span><br><span class="line">Server version: 8.0.19 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> version();</span></span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 8.0.19    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ol><li>修改环境变量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">因basedir由/usr/local/mysql变成了/usr/local/mysql8，故相关环境变量推荐修改下。可按照以下步骤来操作验证：</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改mysql服务启动项配置</span></span><br><span class="line">vi /etc/init.d/mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改basedir目录</span></span><br><span class="line">basedir=/usr/local/mysql8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改PATH变量</span></span><br><span class="line">vi /etc/profile </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将PATH中的/usr/local/mysql/bin改为/usr/local/mysql8/bin</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生效验证</span></span><br><span class="line">[root@centos ~]# source /etc/profile</span><br><span class="line">[root@centos ~]# which mysql</span><br><span class="line">/usr/local/mysql8/bin/mysql</span><br><span class="line">[root@centos ~]# mysql -V</span><br><span class="line">mysql  Ver 8.0.19 for linux-glibc2.12 on x86_64 (MySQL Community Server - GPL)</span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><h4 id="如果没法用systemctl来控制mysql怎么办"><a href="#如果没法用systemctl来控制mysql怎么办" class="headerlink" title="如果没法用systemctl来控制mysql怎么办"></a>如果没法用systemctl来控制mysql怎么办</h4><p>操作流程：</p><p>1.进入/etc/systemd/system</p><p>cd /etc/systemd/system</p><p>2.创建mysql.service</p><p>vi mysql.service</p><p>3.mysql.service中添加配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/mysql8/bin/mysqld_safe --defaults-file=/etc/my.cnf --datadir=/usr/local/mysql/data</span><br><span class="line">ExecStop=/usr/local/mysql8/bin/mysqladmin --defaults-file=/etc/my.cnf shutdown</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>注意，这里的路径要改成你自己的实际路径</p><h2 id="设置主从备份"><a href="#设置主从备份" class="headerlink" title="设置主从备份"></a>设置主从备份</h2><h3 id="分别在两个数据库上创建一个可以远程访问的账号"><a href="#分别在两个数据库上创建一个可以远程访问的账号" class="headerlink" title="分别在两个数据库上创建一个可以远程访问的账号"></a>分别在两个数据库上创建一个可以远程访问的账号</h3><h3 id="认主流程"><a href="#认主流程" class="headerlink" title="认主流程"></a>认主流程</h3><h4 id="主服务数据库"><a href="#主服务数据库" class="headerlink" title="主服务数据库"></a>主服务数据库</h4><ol><li>登陆到主服务器的mysql，并执行如下语句创建用户，授予权限：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql复制代码CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO slave@&quot;%&quot; IDENTIFIED BY &quot;123456&quot;;</span><br></pre></td></tr></table></figure>修改my.cnf配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure>说明：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">log-bin:开启二进制日志，该日志是在事务提交时写日志文件的。默认大小是1G，后面加001,002这样的后缀顺加。</span><br><span class="line"></span><br><span class="line">server-id，唯一标识主机，mysql主从每个mysql实例配置都不一样就行。这个值默认是0，如果是0，主服务器拒绝任何从服务器的连接。</span><br><span class="line"></span><br><span class="line">其他配置（不是必须配置的）：</span><br><span class="line"></span><br><span class="line">1、binlog-do-db=db_001（主数据库配置）       #指定mysql的binlog日志记录哪个db，配置需要同步的数据库，可以配置多个，如果没有此配置项则同步全部。</span><br><span class="line"></span><br><span class="line">2、binlog-ignore-db=mysql（主数据库配置）    #配置不同步的数据库，可以配置多个。</span><br><span class="line"></span><br><span class="line">3、binlog_format = mixed     #配置binlog的格式</span><br><span class="line"></span><br><span class="line">4、read-only = 0                   #配置是否只读  0代表不只读，1代表只读</span><br><span class="line"></span><br><span class="line">5、auto-increament-increment = 10    #用于设定双主情况下自增列的ID冲突使用的，主要用来设置自增步长</span><br><span class="line"></span><br><span class="line">6、auto-increment-offset = 1               #表示这台服务器的序号，从1开始，不超过auto-increament-increment</span><br></pre></td></tr></table></figure><p>重启数据库</p><h4 id="从服务器设置："><a href="#从服务器设置：" class="headerlink" title="从服务器设置："></a>从服务器设置：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id=2</span><br><span class="line">replicate-do-db=test</span><br><span class="line">skip-slave-start=true</span><br></pre></td></tr></table></figure><p>重启数据库</p><h4 id="配置从服务器认主"><a href="#配置从服务器认主" class="headerlink" title="配置从服务器认主"></a>配置从服务器认主</h4><p>获取binlog的信息<br>我们先到主（master）服务器上获取binlog的信息，在mysql的命令界面输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>这里展示的就是我们当前主服务器使用的binlog的文件名，其中position是文件中偏移量，我们之后配置slave需要用到这些信息，这个文件在每次服务器状态变化后都不同<br>进入最关键的一步了，在进入从服务器mysql操作界面后，输入如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stop slave;          //先停步slave服务线程，这个是很重要的，如果不这样做会造成以下操作不成功，第一次设计主从的话忽略。</span><br><span class="line"></span><br><span class="line">change master to </span><br><span class="line">master_host=&#x27;192.0.0.131&#x27;,</span><br><span class="line">master_user=&#x27;slave&#x27;,</span><br><span class="line">master_password=&#x27;123456&#x27;,</span><br><span class="line">master_log_file=&#x27;mysql-bin.000002&#x27;, </span><br><span class="line">master_log_pos=1472;</span><br></pre></td></tr></table></figure><p>这里user和password就是我们第一步在主服务器上创建的用户名和密码，然后MASTER_LOG_FILE 就是我们上一步查看到的master在使用的binlog文件（这个文件在每次主服务器状态变化后都不同），MASTER_LOG_POS   就是binlog的偏移量，用于同步扫描使用。master_log_file对应File, master_log_pos对应Position。Mysql 5.x以上版本已经不支持在配置文件中指定主服务器相关选项。<br>执行完抛警告的话没关系，没有异常就可以。<br>开启从服务器slave线程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看（Slave）状态</span></span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了保证数据的可靠，我们一般会对数据醉一次主从复制，最近我也进行了一点实践，踩了几个坑，在这里总结下。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>用JS实现一个3D模型渲染器</title>
    <link href="https://sunra.top/posts/ad8a980c/"/>
    <id>https://sunra.top/posts/ad8a980c/</id>
    <published>2023-07-16T07:28:16.000Z</published>
    <updated>2023-09-16T03:26:14.869Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们讲了一系列的关于Unity渲染原理的博客，这次我们就开始实战一下，首先是用js实现一下矩阵和向量的计算，这个是基础们也是我们系里博客的第一篇：<a href="https://sunra.top/posts/12801/">线性代数与模型变换</a></p><span id="more"></span><h2 id="向量计算"><a href="#向量计算" class="headerlink" title="向量计算"></a>向量计算</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> <span class="keyword">extends</span> <span class="title class_ inherited__">GObject</span> &#123;</span><br><span class="line">  <span class="comment">// 表示二维点的类，二维点需要三个坐标表示，是因为齐次坐标的表示下，可以将平移旋转和缩放统一到一个表达式中，具体可以参考开头的博客</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">z</span> = z</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 两个向量之间做插值</span></span><br><span class="line">  <span class="title function_">interpolate</span>(<span class="params">other, factor</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> p2 = other</span><br><span class="line">    <span class="keyword">let</span> x = p1.<span class="property">x</span> + (p2.<span class="property">x</span> - p1.<span class="property">x</span>) * factor</span><br><span class="line">    <span class="keyword">let</span> y = p1.<span class="property">y</span> + (p2.<span class="property">y</span> - p1.<span class="property">y</span>) * factor</span><br><span class="line">    <span class="keyword">let</span> z = p1.<span class="property">z</span> + (p2.<span class="property">z</span> - p1.<span class="property">z</span>) * factor</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(x, y, z)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s += <span class="variable language_">this</span>.<span class="property">x</span>.<span class="title function_">toFixed</span>(<span class="number">3</span>)</span><br><span class="line">    s += <span class="variable language_">this</span>.<span class="property">y</span>.<span class="title function_">toFixed</span>(<span class="number">3</span>)</span><br><span class="line">    s += <span class="variable language_">this</span>.<span class="property">z</span>.<span class="title function_">toFixed</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">multi_num</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(<span class="variable language_">this</span>.<span class="property">x</span> * n, <span class="variable language_">this</span>.<span class="property">y</span> * n, <span class="variable language_">this</span>.<span class="property">z</span> * n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sub</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="property">x</span> - v.<span class="property">x</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="variable language_">this</span>.<span class="property">y</span> - v.<span class="property">y</span></span><br><span class="line">    <span class="keyword">let</span> z = <span class="variable language_">this</span>.<span class="property">z</span> - v.<span class="property">z</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(x, y, z)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">length</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable language_">this</span>.<span class="property">x</span> * <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span> * <span class="variable language_">this</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">z</span> * <span class="variable language_">this</span>.<span class="property">z</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将向量变为单位向量</span></span><br><span class="line">  <span class="title function_">normalize</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> l = <span class="variable language_">this</span>.<span class="title function_">length</span>()</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> factor = <span class="number">1</span> / l</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">multi_num</span>(factor)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向量点乘</span></span><br><span class="line">  <span class="title function_">dot</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span> * v.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span> * v.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">z</span> * v.<span class="property">z</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向量叉乘</span></span><br><span class="line">  <span class="title function_">cross</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="property">y</span> * v.<span class="property">z</span> - <span class="variable language_">this</span>.<span class="property">z</span> * v.<span class="property">y</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="variable language_">this</span>.<span class="property">z</span> * v.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">x</span> * v.<span class="property">z</span></span><br><span class="line">    <span class="keyword">let</span> z = <span class="variable language_">this</span>.<span class="property">x</span> * v.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">y</span> * v.<span class="property">x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(x, y, z)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a>矩阵计算</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span> <span class="keyword">extends</span> <span class="title class_ inherited__">GObject</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">matrix_list</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="keyword">if</span> (matrix_list) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">m</span> = matrix_list</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">m</span> = [</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> m = <span class="variable language_">this</span>.<span class="property">m</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      s += m[i].<span class="title function_">toFixed</span>(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">multiply</span>(<span class="params">other</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> m1 = <span class="variable language_">this</span>.<span class="property">m</span></span><br><span class="line">    <span class="keyword">let</span> m2 = other.<span class="property">m</span></span><br><span class="line">    <span class="keyword">let</span> m = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">16</span>; index++) &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(index / <span class="number">4</span>)</span><br><span class="line">      <span class="keyword">let</span> j = index % <span class="number">4</span></span><br><span class="line">      m[i * <span class="number">4</span> + j] = m1[i * <span class="number">4</span>] * m2[j] + m1[i * <span class="number">4</span> + <span class="number">1</span>] * m2[<span class="number">4</span> + j] + m1[i * <span class="number">4</span> + <span class="number">2</span>] * m2[<span class="number">2</span> * <span class="number">4</span> + j] + m1[i * <span class="number">4</span> + <span class="number">3</span>] * m2[<span class="number">3</span> * <span class="number">4</span> + j]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">zero</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">new</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">identity</span>(<span class="params"></span>) &#123;</span><br><span class="line">    m = [</span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">lookAtLH</span>(<span class="params">eye, target, up</span>) &#123;</span><br><span class="line">    <span class="comment">// z轴方向为眼睛位置指向目标物体的方向</span></span><br><span class="line">    <span class="keyword">let</span> zaxis = target.<span class="title function_">sub</span>(eye).<span class="title function_">normalize</span>()</span><br><span class="line">    <span class="comment">// x方向为up和z方向的叉乘的结果，简单来说，就是右手定则，拇指从up方向，旋转到z方向，大拇指指向即位x方向</span></span><br><span class="line">    <span class="keyword">let</span> xaxis = up.<span class="title function_">cross</span>(zaxis).<span class="title function_">normalize</span>()</span><br><span class="line">    <span class="comment">// y方向为z方向与x方向的叉乘结果</span></span><br><span class="line">    <span class="keyword">let</span> yaxis = zaxis.<span class="title function_">cross</span>(xaxis).<span class="title function_">normalize</span>()</span><br><span class="line">    <span class="comment">// 最终x,y,z三个组成直角坐标轴</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ex = -xaxis.<span class="title function_">dot</span>(eye)</span><br><span class="line">    <span class="keyword">let</span> ey = -yaxis.<span class="title function_">dot</span>(eye)</span><br><span class="line">    <span class="keyword">let</span> ez = -zaxis.<span class="title function_">dot</span>(eye)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      xaxis.<span class="property">x</span>, yaxis.<span class="property">x</span>, zaxis.<span class="property">x</span>, <span class="number">0</span>,</span><br><span class="line">      xaxis.<span class="property">y</span>, yaxis.<span class="property">y</span>, zaxis.<span class="property">y</span>, <span class="number">0</span>,</span><br><span class="line">      xaxis.<span class="property">z</span>, yaxis.<span class="property">z</span>, zaxis.<span class="property">z</span>, <span class="number">0</span>,</span><br><span class="line">      ex, ey, ez, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">perspectiveFovLH</span>(<span class="params">field_of_view, aspect, znear, zfar</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> h = <span class="number">1</span> / <span class="title class_">Math</span>.<span class="title function_">tan</span>(field_of_view / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> w = h / aspect</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      w, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, h, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, zfar / (zfar - znear), <span class="number">1</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, (znear * zfar) / (znear - zfar), <span class="number">0</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rotationX</span>(<span class="params">angle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, c, s, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, -s, c, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rotationY</span>(<span class="params">angle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      c, <span class="number">0</span>, -s, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      s, <span class="number">0</span>, c, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rotationZ</span>(<span class="params">angle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle)</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      c, s, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      -s, c, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">rotation</span>(<span class="params">angle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title class_">Matrix</span>.<span class="title function_">rotationZ</span>(angle.<span class="property">z</span>)</span><br><span class="line">    <span class="keyword">let</span> y = <span class="title class_">Matrix</span>.<span class="title function_">rotationX</span>(angle.<span class="property">x</span>)</span><br><span class="line">    <span class="keyword">let</span> z = <span class="title class_">Matrix</span>.<span class="title function_">rotationY</span>(angle.<span class="property">y</span>)</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">multiply</span>(y).<span class="title function_">multiply</span>(z)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">translation</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; x, y, z &#125; = v</span><br><span class="line">    <span class="keyword">let</span> m = [</span><br><span class="line">      <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">      x, y, z, <span class="number">1</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Matrix</span>.<span class="title function_">new</span>(m)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="variable language_">this</span>.<span class="property">m</span></span><br><span class="line">    <span class="keyword">let</span> x = v.<span class="property">x</span> * m[<span class="number">0</span>] + v.<span class="property">y</span> * m[<span class="number">1</span> * <span class="number">4</span> + <span class="number">0</span>] + v.<span class="property">z</span> * m[<span class="number">2</span> * <span class="number">4</span> + <span class="number">0</span>] + m[<span class="number">3</span> * <span class="number">4</span> + <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> y = v.<span class="property">x</span> * m[<span class="number">1</span>] + v.<span class="property">y</span> * m[<span class="number">1</span> * <span class="number">4</span> + <span class="number">1</span>] + v.<span class="property">z</span> * m[<span class="number">2</span> * <span class="number">4</span> + <span class="number">1</span>] + m[<span class="number">3</span> * <span class="number">4</span> + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> z = v.<span class="property">x</span> * m[<span class="number">2</span>] + v.<span class="property">y</span> * m[<span class="number">1</span> * <span class="number">4</span> + <span class="number">2</span>] + v.<span class="property">z</span> * m[<span class="number">2</span> * <span class="number">4</span> + <span class="number">2</span>] + m[<span class="number">3</span> * <span class="number">4</span> + <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">let</span> w = v.<span class="property">x</span> * m[<span class="number">3</span>] + v.<span class="property">y</span> * m[<span class="number">1</span> * <span class="number">4</span> + <span class="number">3</span>] + v.<span class="property">z</span> * m[<span class="number">2</span> * <span class="number">4</span> + <span class="number">3</span>] + m[<span class="number">3</span> * <span class="number">4</span> + <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vector</span>.<span class="title function_">new</span>(x / w, y / w, z / w)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前我们讲了一系列的关于Unity渲染原理的博客，这次我们就开始实战一下，首先是用js实现一下矩阵和向量的计算，这个是基础们也是我们系里博客的第一篇：&lt;a href=&quot;https://sunra.top/posts/12801/&quot;&gt;线性代数与模型变换&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>使用指数回退算法重试请求</title>
    <link href="https://sunra.top/posts/d58e86d6/"/>
    <id>https://sunra.top/posts/d58e86d6/</id>
    <published>2023-07-08T07:10:35.000Z</published>
    <updated>2023-09-16T03:27:07.889Z</updated>
    
    <content type="html"><![CDATA[<p>我们在搭建自己的服务的时候，同时会用到一些第三方服务的api，这些api可能会有速率的限制，这个时候，我们就需要控制我们的发送请求的速率，有很多种方法，比如我们直接计算出来每秒最多请求几次，然后做一些精细化的控制，当然我们也有比较简单粗暴但是行之有效的方法，就是等一会儿再请求，这就是指数回退算法。</p><span id="more"></span><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>下面是使用 TypeScript 实现的函数，该函数可以使用指数回退算法重试抛出指定错误的请求：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> retryWithExponentialBackoff&lt;T&gt;(<span class="attr">request</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>&lt;T&gt;, <span class="attr">errorType</span>: <span class="built_in">any</span>, <span class="attr">maxRetries</span>: <span class="built_in">number</span>, <span class="attr">initialDelay</span>: <span class="built_in">number</span>, <span class="attr">maxDelay</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> retries = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> delay = initialDelay;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (retries &lt; maxRetries) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">request</span>();</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> errorType) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Retry attempt <span class="subst">$&#123;retries + <span class="number">1</span>&#125;</span> failed with error: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (retries === maxRetries - <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, delay));</span><br><span class="line">        delay = <span class="title class_">Math</span>.<span class="title function_">min</span>(delay * <span class="number">2</span>, maxDelay);</span><br><span class="line">        retries++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Max retries (<span class="subst">$&#123;maxRetries&#125;</span>) exceeded.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数接受以下参数：</p><ul><li><code>request</code>：一个返回 Promise 的函数，表示要重试的请求。</li><li><code>errorType</code>：要捕获并重试的错误类型。</li><li><code>maxRetries</code>：最大重试次数。</li><li><code>initialDelay</code>：初始延迟时间（毫秒）。</li><li><code>maxDelay</code>：最大延迟时间（毫秒）。</li></ul><p>函数会在每次请求失败时捕获指定的错误类型，并使用指数回退算法进行重试。重试的次数将根据 <code>maxRetries</code> 参数确定，初始延迟时间为 <code>initialDelay</code>，每次重试后的延迟时间将加倍，但不会超过 <code>maxDelay</code>。</p><p>如果达到最大重试次数仍然失败，函数将抛出一个错误。</p><p>以下是一个示例用法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一个可能会失败的请求</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">makeRequest</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">  <span class="keyword">if</span> (random &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Request failed&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指数回退算法重试请求</span></span><br><span class="line"><span class="title function_">retryWithExponentialBackoff</span>(makeRequest, <span class="title class_">Error</span>, <span class="number">3</span>, <span class="number">1000</span>, <span class="number">5000</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Request succeeded with result: <span class="subst">$&#123;result&#125;</span>`</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Request failed after retries: <span class="subst">$&#123;error.message&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>makeRequest</code> 函数模拟了一个可能会失败的请求。我们使用 <code>retryWithExponentialBackoff</code> 函数对该请求进行重试，最大重试次数为 3，初始延迟时间为 1000 毫秒，最大延迟时间为 5000 毫秒。</p><p>如果请求成功，将输出 <code>Request succeeded with result: 42</code>；如果重试次数达到上限仍然失败，将输出类似于 <code>Request failed after retries: Max retries (3) exceeded.</code> 的错误信息。</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p>优点比较明显，就是简单，重试就完事了，不过每次重试失败都会让下一次的重试来得更晚，就导致了没有可能会有“饿死”的现象，也没有办法通过优先级去控制</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在搭建自己的服务的时候，同时会用到一些第三方服务的api，这些api可能会有速率的限制，这个时候，我们就需要控制我们的发送请求的速率，有很多种方法，比如我们直接计算出来每秒最多请求几次，然后做一些精细化的控制，当然我们也有比较简单粗暴但是行之有效的方法，就是等一会儿再请求，这就是指数回退算法。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>基于可扩展策略的房贷计算器</title>
    <link href="https://sunra.top/posts/43e8c1fa/"/>
    <id>https://sunra.top/posts/43e8c1fa/</id>
    <published>2023-07-02T00:13:40.000Z</published>
    <updated>2023-09-16T03:26:14.869Z</updated>
    
    <content type="html"><![CDATA[<p>最近重新看《程序员的个人财富课》，其中讲到了程序员的能力可以用在很多方面，比如可以算一下如何买房最划算，并给了一个简单的房贷计算器的算法，我对这个算法进行了一定的扩展，直接上源码。</p><p>如果感兴趣想要体验，可以关注公众号后台回复房贷计算器，又一个将数据可视化后的demo。</p><span id="more"></span><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等额本息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateRepaymentBX</span>(<span class="params">totalLoan, year, interestRate</span>) &#123;</span><br><span class="line">  <span class="comment">// 将利率转换为月利率</span></span><br><span class="line">  <span class="keyword">const</span> monthlyInterestRate = <span class="built_in">parseFloat</span>(interestRate) / <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">const</span> loanTerm = year * <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">const</span> totalLoanByMillion = <span class="built_in">parseFloat</span>(totalLoan);</span><br><span class="line">  <span class="comment">// 计算每个月的还款额</span></span><br><span class="line">  <span class="keyword">const</span> monthlyPayment = (totalLoanByMillion * monthlyInterestRate * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">1</span> + monthlyInterestRate, loanTerm)) / (<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">1</span> + monthlyInterestRate, loanTerm) - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 计算总共的还款额</span></span><br><span class="line">  <span class="keyword">const</span> totalRepayment = monthlyPayment * loanTerm;</span><br><span class="line">  <span class="comment">// 初始化结果数组</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> balance = totalLoanByMillion;</span><br><span class="line">  <span class="comment">// 计算每个月的本金和利息</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= loanTerm; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> monthlyInterest = balance * monthlyInterestRate;</span><br><span class="line">    <span class="keyword">const</span> monthlyPrincipal = monthlyPayment - monthlyInterest;</span><br><span class="line">    balance -= monthlyPrincipal;</span><br><span class="line">    result.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">month</span>: i,</span><br><span class="line">      <span class="attr">monthlyPayment</span>: monthlyPayment,</span><br><span class="line">      <span class="attr">monthlyPrincipal</span>: monthlyPrincipal,</span><br><span class="line">      <span class="attr">monthlyInterest</span>: monthlyInterest,</span><br><span class="line">      <span class="attr">balance</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, balance)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">totalRepayment</span>: totalRepayment,</span><br><span class="line">    <span class="attr">result</span>: result</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等额本金</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateRepaymentBJ</span>(<span class="params">totalLoan, year, interestRate</span>) &#123;</span><br><span class="line">  <span class="comment">// 将利率转换为月利率</span></span><br><span class="line">  <span class="keyword">const</span> monthlyInterestRate = <span class="built_in">parseFloat</span>(interestRate) / <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">const</span> loanTerm = year * <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">const</span> totalLoanByMillion = <span class="built_in">parseFloat</span>(totalLoan);</span><br><span class="line">  <span class="comment">// 计算每个月的本金</span></span><br><span class="line">  <span class="keyword">const</span> monthlyPrincipal = <span class="built_in">parseFloat</span>(totalLoanByMillion) / loanTerm;</span><br><span class="line">  <span class="comment">// 初始化结果数组</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="comment">// 计算每个月的还款额和利息</span></span><br><span class="line">  <span class="keyword">let</span> balance = totalLoanByMillion;</span><br><span class="line">  <span class="keyword">let</span> monthlyPayment;</span><br><span class="line">  <span class="keyword">let</span> monthlyInterest;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= loanTerm; i++) &#123;</span><br><span class="line">    monthlyInterest = balance * monthlyInterestRate;</span><br><span class="line">    monthlyPayment = monthlyPrincipal + monthlyInterest;</span><br><span class="line">    balance -= monthlyPrincipal;</span><br><span class="line">    result.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">month</span>: i,</span><br><span class="line">      <span class="attr">monthlyPayment</span>: monthlyPayment,</span><br><span class="line">      <span class="attr">monthlyPrincipal</span>: monthlyPrincipal,</span><br><span class="line">      <span class="attr">monthlyInterest</span>: monthlyInterest,</span><br><span class="line">      <span class="attr">balance</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, balance)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计算总共的还款额</span></span><br><span class="line">  <span class="keyword">const</span> totalRepayment = totalLoanByMillion + result.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, current</span>) =&gt;</span> total + current.<span class="property">monthlyInterest</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">totalRepayment</span>: totalRepayment,</span><br><span class="line">    <span class="attr">result</span>: result,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LoanType</span> = &#123;</span><br><span class="line">  <span class="attr">BJ</span>: <span class="string">&#x27;BJ&#x27;</span>,</span><br><span class="line">  <span class="attr">BX</span>: <span class="string">&#x27;BX&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculateRepayment = &#123;</span><br><span class="line">  [<span class="title class_">LoanType</span>.<span class="property">BJ</span>]: calculateRepaymentBJ,</span><br><span class="line">  [<span class="title class_">LoanType</span>.<span class="property">BX</span>]: calculateRepaymentBX,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculate</span>(<span class="params">loadType, syLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> syRepayment = calculateRepayment[loadType](syLoan, syYear, syInterestRate)</span><br><span class="line">  <span class="keyword">const</span> gjjRepayment = calculateRepayment[loadType](gjjLoan, gjjYear, gjjInterestRate);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [shortRepayment, longRepayment] = [syRepayment.<span class="property">result</span>, gjjRepayment.<span class="property">result</span>].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">length</span> - b.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mergedRepayment = longRepayment.<span class="title function_">map</span>(<span class="function">(<span class="params">longItem, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; longRepayment.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> shortItem = shortRepayment[i];</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">month</span>: longItem.<span class="property">month</span>,</span><br><span class="line">        <span class="attr">monthlyPayment</span>: longItem.<span class="property">monthlyPayment</span> + shortItem.<span class="property">monthlyPayment</span>,</span><br><span class="line">        <span class="attr">monthlyPrincipal</span>: longItem.<span class="property">monthlyPrincipal</span> + shortItem.<span class="property">monthlyPrincipal</span>,</span><br><span class="line">        <span class="attr">monthlyInterest</span>: longItem.<span class="property">monthlyInterest</span> + shortItem.<span class="property">monthlyInterest</span>,</span><br><span class="line">        <span class="attr">balance</span>: longItem.<span class="property">balance</span> + shortItem.<span class="property">balance</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">month</span>: longItem.<span class="property">month</span>,</span><br><span class="line">        <span class="attr">monthlyPayment</span>: longItem.<span class="property">monthlyPayment</span>,</span><br><span class="line">        <span class="attr">monthlyPrincipal</span>: longItem.<span class="property">monthlyPrincipal</span>,</span><br><span class="line">        <span class="attr">monthlyInterest</span>: longItem.<span class="property">monthlyInterest</span>,</span><br><span class="line">        <span class="attr">balance</span>: longItem.<span class="property">balance</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">totalRepayment</span>: syRepayment.<span class="property">totalRepayment</span> + gjjRepayment.<span class="property">totalRepayment</span>,</span><br><span class="line">    <span class="attr">result</span>: mergedRepayment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strategies = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;先租后买，全款买（排除理财与房价变动因素）&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> need = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="built_in">parseFloat</span>(totalPrice - currentPrincipal) / (income - outcome - rent));</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: need,</span><br><span class="line">        <span class="attr">firstPayNeed</span>: need,</span><br><span class="line">        <span class="attr">totalPayment</span>: totalPrice + need * rent,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(need).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>([&#123; <span class="attr">month</span>: need + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: totalPrice, <span class="attr">monthlyPrincipal</span>: totalPrice, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: <span class="number">0</span> &#125;])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;等额本金贷款买&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> repayment = <span class="title function_">calculate</span>(<span class="string">&#x27;BJ&#x27;</span>, totalPrice - firstPay - gjjLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate);</span><br><span class="line">      <span class="keyword">const</span> &#123; result, totalRepayment &#125; = repayment;</span><br><span class="line">      <span class="keyword">const</span> firstPayNeed = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, firstPay - currentPrincipal) / (income - outcome - rent);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: firstPayNeed + <span class="title class_">Math</span>.<span class="title function_">max</span>(syYear, gjjYear) * <span class="number">12</span>,</span><br><span class="line">        firstPayNeed,</span><br><span class="line">        <span class="attr">totalPayment</span>: totalRepayment+ firstPayNeed * rent + firstPay,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(firstPayNeed).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;等额本息贷款买&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> repayment = <span class="title function_">calculate</span>(<span class="string">&#x27;BX&#x27;</span>, totalPrice - firstPay - gjjLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate);</span><br><span class="line">      <span class="keyword">const</span> &#123; result, totalRepayment &#125; = repayment;</span><br><span class="line">      <span class="keyword">const</span> firstPayNeed = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, firstPay - currentPrincipal) / (income - outcome - rent);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: firstPayNeed + <span class="title class_">Math</span>.<span class="title function_">max</span>(syYear, gjjYear) * <span class="number">12</span>,</span><br><span class="line">        firstPayNeed,</span><br><span class="line">        <span class="attr">totalPayment</span>: totalRepayment+ firstPayNeed * rent + firstPay,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(firstPayNeed).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;等额本金贷款买，能提前还款则提前还款（不考虑提前还款的影响）&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> repayment = <span class="title function_">calculate</span>(<span class="string">&#x27;BJ&#x27;</span>, totalPrice - firstPay - gjjLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate);</span><br><span class="line">      <span class="keyword">const</span> &#123; result &#125; = repayment;</span><br><span class="line">      <span class="keyword">let</span> total = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, currentPrincipal - firstPay);</span><br><span class="line">      <span class="keyword">let</span> loanNeed = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(loanNeed = <span class="number">0</span>; loanNeed &lt; result.<span class="property">length</span>; loanNeed++) &#123;</span><br><span class="line">        total += income - outcome - result[loanNeed].<span class="property">monthlyPayment</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt;= result[loanNeed].<span class="property">balance</span>) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> firstPayNeed = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, firstPay - currentPrincipal) / (income - outcome - rent);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: loanNeed + firstPayNeed,</span><br><span class="line">        firstPayNeed,</span><br><span class="line">        <span class="attr">totalPayment</span>: result.<span class="title function_">slice</span>(<span class="number">0</span>, loanNeed).<span class="title function_">map</span>(<span class="function"><span class="params">_</span> =&gt;</span> _.<span class="property">monthlyPayment</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> total + cur, <span class="number">0</span>) + result[loanNeed].<span class="property">balance</span> + firstPay,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(firstPayNeed).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>(result.<span class="title function_">slice</span>(<span class="number">0</span>, loanNeed).<span class="title function_">map</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> (&#123; ..._, <span class="attr">month</span>: firstPayNeed + _.<span class="property">month</span> &#125;)))</span><br><span class="line">          .<span class="title function_">concat</span>([&#123; <span class="attr">month</span>: firstPayNeed + loanNeed + <span class="number">1</span>, <span class="attr">monthlyPrincipal</span>: result[loanNeed].<span class="property">balance</span>, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">monthlyPayment</span>: result[loanNeed].<span class="property">balance</span>, <span class="attr">balance</span>: <span class="number">0</span> &#125;])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;等额本息贷款买，能提前还款则提前还款（不考虑提前还款的影响）&#x27;</span>,</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">(<span class="params">&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> repayment = <span class="title function_">calculate</span>(<span class="string">&#x27;BX&#x27;</span>, totalPrice - firstPay - gjjLoan, gjjLoan, syYear, gjjYear, syInterestRate, gjjInterestRate);</span><br><span class="line">      <span class="keyword">const</span> &#123; result &#125; = repayment;</span><br><span class="line">      <span class="keyword">let</span> total = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, currentPrincipal - firstPay);</span><br><span class="line">      <span class="keyword">let</span> loanNeed = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(loanNeed = <span class="number">0</span>; loanNeed &lt; result.<span class="property">length</span>; loanNeed++) &#123;</span><br><span class="line">        total += income - outcome - result[loanNeed].<span class="property">monthlyPayment</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt;= result[loanNeed].<span class="property">balance</span>) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> firstPayNeed = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, firstPay - currentPrincipal) / (income - outcome - rent);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">totalNeed</span>: loanNeed + firstPayNeed,</span><br><span class="line">        firstPayNeed,</span><br><span class="line">        <span class="attr">totalPayment</span>: result.<span class="title function_">slice</span>(<span class="number">0</span>, loanNeed).<span class="title function_">map</span>(<span class="function"><span class="params">_</span> =&gt;</span> _.<span class="property">monthlyPayment</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> total + cur, <span class="number">0</span>) + result[loanNeed].<span class="property">balance</span> + firstPay,</span><br><span class="line">        <span class="attr">detail</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(firstPayNeed).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123; <span class="attr">month</span>: i + <span class="number">1</span>, <span class="attr">monthlyPayment</span>: rent, <span class="attr">monthlyPrincipal</span>: rent, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">balance</span>: totalPrice &#125;))</span><br><span class="line">          .<span class="title function_">concat</span>(result.<span class="title function_">slice</span>(<span class="number">0</span>, loanNeed).<span class="title function_">map</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> (&#123; ..._, <span class="attr">month</span>: firstPayNeed + _.<span class="property">month</span> &#125;)))</span><br><span class="line">          .<span class="title function_">concat</span>([&#123; <span class="attr">month</span>: firstPayNeed + loanNeed + <span class="number">1</span>, <span class="attr">monthlyPrincipal</span>: result[loanNeed].<span class="property">balance</span>, <span class="attr">monthlyInterest</span>: <span class="number">0</span>, <span class="attr">monthlyPayment</span>: result[loanNeed].<span class="property">balance</span>, <span class="attr">balance</span>: <span class="number">0</span> &#125;])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">executeStrategies</span> (&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`房屋总价为<span class="subst">$&#123;totalPrice&#125;</span>元，首付为：<span class="subst">$&#123;firstPay&#125;</span>元，现有：<span class="subst">$&#123;currentPrincipal&#125;</span>元，月收入为：<span class="subst">$&#123;income&#125;</span>元，每个月租房支出为：<span class="subst">$&#123;rent&#125;</span>元，其他消费为：<span class="subst">$&#123;outcome&#125;</span>元`</span>)</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  strategies.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123;name, execute&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> repayment = <span class="title function_">execute</span>(&#123;totalPrice, firstPay, currentPrincipal, gjjLoan, income, outcome, rent, syYear, gjjYear, syInterestRate, gjjInterestRate&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`策略：<span class="subst">$&#123;name&#125;</span>, 需要时间为<span class="subst">$&#123;repayment.totalNeed&#125;</span>个月, 住房总花费为<span class="subst">$&#123;repayment.totalPayment&#125;</span>元`</span>)</span><br><span class="line">    result.<span class="title function_">push</span>(&#123;...repayment, <span class="attr">strategyName</span>: name&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">executeStrategies</span>(&#123;</span><br><span class="line">  <span class="attr">totalPrice</span>: <span class="number">5000000</span>,</span><br><span class="line">  <span class="attr">firstPay</span>: <span class="number">1500000</span>,</span><br><span class="line">  <span class="attr">currentPrincipal</span>: <span class="number">1500000</span>,</span><br><span class="line">  <span class="attr">gjjLoan</span>: <span class="number">1000000</span>,</span><br><span class="line">  <span class="attr">income</span>: <span class="number">50000</span>,</span><br><span class="line">  <span class="attr">outcome</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">rent</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">syYear</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">gjjYear</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">syInterestRate</span>: <span class="number">0.043</span>,</span><br><span class="line">  <span class="attr">gjjInterestRate</span>: <span class="number">0.031</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  executeStrategies</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近重新看《程序员的个人财富课》，其中讲到了程序员的能力可以用在很多方面，比如可以算一下如何买房最划算，并给了一个简单的房贷计算器的算法，我对这个算法进行了一定的扩展，直接上源码。&lt;/p&gt;
&lt;p&gt;如果感兴趣想要体验，可以关注公众号后台回复房贷计算器，又一个将数据可视化后的demo。&lt;/p&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>React如何在不打断英文单词情况下截断长文本</title>
    <link href="https://sunra.top/posts/b5b58dee/"/>
    <id>https://sunra.top/posts/b5b58dee/</id>
    <published>2023-06-24T02:33:32.000Z</published>
    <updated>2023-09-16T03:27:07.893Z</updated>
    
    <content type="html"><![CDATA[<p>文本过长用省略号来进行截断css就可以实现，不过默认的效果无法实现单词不被截断，所以就用js实现了一版, 这样不仅可以做到单词不被截断，也可以做到在css不能使用的时候进行截断，比如在canvas中需要截断文字的情况</p><span id="more"></span><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chineseCharacterPattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;[\u4E00-\u9FA5]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getStringWidth = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> contextMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="title class_">CanvasRenderingContext2D</span>&gt;();</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">str: <span class="built_in">string</span>, fontSize: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> context = contextMap.<span class="title function_">get</span>(fontSize) ?? <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">      <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (span) &#123;</span><br><span class="line">        <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">        context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (context &amp;&amp; span) &#123;</span><br><span class="line">          <span class="keyword">const</span> fontFamily = <span class="variable language_">window</span></span><br><span class="line">            .<span class="title function_">getComputedStyle</span>(span, <span class="literal">null</span>)</span><br><span class="line">            .<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;font-family&#x27;</span>);</span><br><span class="line">          context.<span class="property">font</span> = <span class="string">`<span class="subst">$&#123;fontSize&#125;</span>px <span class="subst">$&#123;fontFamily&#125;</span>`</span>;</span><br><span class="line">          contextMap.<span class="title function_">set</span>(fontSize, context);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (context) &#123;</span><br><span class="line">      <span class="keyword">const</span> metrics = context.<span class="title function_">measureText</span>(str);</span><br><span class="line">      <span class="keyword">return</span> metrics.<span class="property">width</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="property">length</span> * fontSize;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">splitStr</span>(<span class="params">str: <span class="built_in">string</span>, separator: <span class="built_in">RegExp</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> startIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = str[i];</span><br><span class="line">    <span class="keyword">if</span> (chineseCharacterPattern.<span class="title function_">test</span>(current) || separator.<span class="title function_">test</span>(current)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (startIndex &lt; i) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(str.<span class="title function_">slice</span>(startIndex, i));</span><br><span class="line">      &#125;</span><br><span class="line">      result.<span class="title function_">push</span>(current);</span><br><span class="line">      startIndex = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (startIndex &lt; str.<span class="property">length</span>) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(str.<span class="title function_">slice</span>(startIndex));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useTruncateLongString</span>(<span class="params"></span></span><br><span class="line"><span class="params">  maxPixelLength: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  fontSize: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  omission = <span class="string">&#x27;...&#x27;</span>,</span></span><br><span class="line"><span class="params">  separator = /,? +/,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> truncateLongString = <span class="title function_">useCallback</span>(</span><br><span class="line">    (<span class="attr">str</span>: <span class="built_in">string</span>): [<span class="built_in">string</span>, <span class="built_in">boolean</span>] =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">getStringWidth</span>(str, fontSize) &lt;= maxPixelLength) &#123;</span><br><span class="line">        <span class="keyword">return</span> [str, <span class="literal">false</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> strSplitBySeparator = <span class="title function_">splitStr</span>(str, separator);</span><br><span class="line">      <span class="keyword">const</span> firstWord = strSplitBySeparator[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">getStringWidth</span>(firstWord, fontSize) &gt; maxPixelLength) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">`<span class="subst">$&#123;firstWord&#125;</span><span class="subst">$&#123;omission&#125;</span>`</span>, <span class="literal">true</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> currentWidth = <span class="title function_">getStringWidth</span>(omission, fontSize);</span><br><span class="line">      <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> word <span class="keyword">of</span> strSplitBySeparator) &#123;</span><br><span class="line">        <span class="keyword">const</span> wordWidth = <span class="title function_">getStringWidth</span>(word, fontSize);</span><br><span class="line">        currentWidth += wordWidth;</span><br><span class="line">        <span class="keyword">if</span> (currentWidth &lt; maxPixelLength) &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(word);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> [<span class="string">`<span class="subst">$&#123;result.join(<span class="string">&#x27;&#x27;</span>)&#125;</span><span class="subst">$&#123;omission&#125;</span>`</span>, <span class="literal">true</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> [result.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>), <span class="literal">false</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    [maxPixelLength, fontSize, omission, separator],</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> truncateLongString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;文本过长用省略号来进行截断css就可以实现，不过默认的效果无法实现单词不被截断，所以就用js实现了一版, 这样不仅可以做到单词不被截断，也可以做到在css不能使用的时候进行截断，比如在canvas中需要截断文字的情况&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://sunra.top/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>状态压缩在算法中的应用</title>
    <link href="https://sunra.top/posts/338aebbd/"/>
    <id>https://sunra.top/posts/338aebbd/</id>
    <published>2023-06-21T00:47:43.000Z</published>
    <updated>2023-09-16T03:26:14.877Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机算法中，状态压缩是一种优化技术，它通过将一些状态信息压缩成更小的数据结构来减少内存使用和提高程序效率。通常情况下，状态压缩适用于需要处理大量状态的算法，例如搜索、动态规划等。状态压缩的常见方法包括使用位运算、哈希表、数组等数据结构来存储状态信息。这些方法可以显著减少算法的时间和空间复杂度，提高算法的执行效率。</p><span id="more"></span><p>简单来说，状态压缩就是在一个用一种更加巧妙地方式去减少算法运行过程中各种状态的CURD，从而减少时间复杂度和空间复杂度。</p><p>我们就以leetcode上的一道题来实战下状态压缩在动态规划中的应用：</p><p>这是题干：</p><p>给你两组点，其中第一组中有 size1 个点，第二组中有 size2 个点，且 size1 &gt;= size2 。</p><p>任意两点间的连接成本 cost 由大小为 size1 x size2 矩阵给出，其中 cost[i][j] 是第一组中的点 i 和第二组中的点 j 的连接成本。如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。</p><p>返回连通两组点所需的最小成本。</p><p>这个题目也是个二分图的问题，不过和<a href="https://sunra.top/posts/5352/">匈牙利算法</a>所解决的问题不同，这里的配对不是只能一对一，而是可以多对多，只要每个点都和另一个图中的某个点相连就好</p><p>我们来看一下这道题的解题思路</p><p>记第一组点数为 $size_1$，第二组点数为 $size_2$。根据数据范围，我们可以使用二进制数 s 来表示一个点集，s 的第 k 位为 1 表示第 k 个点在点集 s 中，s 的第 k 位为 0 表示第 k 个点不在点集 s 中。使用 dp[i][s] 表示第一组的前 iii 个点（前 i 个点指第 0,1,2,…,i−1 个点）与第二组的点集 s 的最小连通成本（因为 size1≥size2，所以将第二组作为点集），有四种情况：</p><ul><li><p>i=0 且 s=0：<br>两组点都为空，因此最小连通成本为 dp[0][0]=0。</p></li><li><p>i=0 且 s≠0<br>第一组的点为空，第二组的点不为空，因此无法连通，令 dp[0][s]=∞。</p></li><li><p>i≠0 且 s=0：<br>第一组的点不为空，第二组的点为空，因此无法连通，令 dp[i][0]=∞。</p></li><li><p>i≠0 且 s≠0<br>考虑第一组第 i−1 个点与第二组点集 s 的第 k 个点连接，使用 $s_{-k}$表示点集 s 去除第 k 个点后的剩余点集，那么连通成本 c 有三种情况：</p><ul><li><p>第二组点集 s 的第 k 个点不再与其他点连接，那么 c=dp[i][s−k]+cost[i−1][k]；</p></li><li><p>第一组第 i−1 个点不再与其他点连接，那么 c=dp[i−1][s]+cost[i−1][k]；</p></li><li><p>第一组第 i−1 个点和第二组点集 s 的第 k 个点都不再与其他点连接，那么 c=dp[i−1][s−k]+cost[i−1][k]。</p></li></ul></li></ul><p>枚举第一组第 i−1 个点与第二组点集 s 中任一 k∈s 的点连接，那么状态转移方程如下：</p><p>dp[i][s]=min⁡k∈s{min⁡{dp[i][s−k],dp[i−1][s],dp[i−1][s−k]}+cost[i−1][k]}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connectTwoGroups = <span class="keyword">function</span>(<span class="params">cost</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> size1 = cost.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> size2 = cost[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> m = <span class="number">1</span> &lt;&lt; size2;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(size1 + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> / <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= size1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> s = <span class="number">0</span>; s &lt; m; s++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; size2; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((s &amp; (<span class="number">1</span> &lt;&lt; k)) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i][s], dp[i][s ^ (<span class="number">1</span> &lt;&lt; k)] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">            dp[i][s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i][s], dp[i - <span class="number">1</span>][s] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">            dp[i][s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i][s], dp[i - <span class="number">1</span>][s ^ (<span class="number">1</span> &lt;&lt; k)] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[size1][m - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据结构上进行压缩"><a href="#数据结构上进行压缩" class="headerlink" title="数据结构上进行压缩"></a>数据结构上进行压缩</h2><p>这个算法中的动态规划不用多讲了，其实这里面也蕴含着状态压缩，比如将一个布尔数组压缩为一个二进制的数字就是一个常见的做法，可能从空间上讲看不出多大提升，但是在本题中，我们需要以布尔数组表示状态，并以这个状态为key时，那么我们只能用map来存储键值对，但是如果我们实用二进制数字作为key，我们就可以使用数组来存储键值对了。</p><h2 id="剔除无用的中间状态的存储"><a href="#剔除无用的中间状态的存储" class="headerlink" title="剔除无用的中间状态的存储"></a>剔除无用的中间状态的存储</h2><p>另一种状态压缩指的是识别出无用的状态并进行剔除</p><p>转移方程的 dp[i][∗] 计算只与 dp[i−1][∗] 和 dp[i][∗] 相关，因此我们可以只使用一维数组来保存，从而节省空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connectTwoGroups = <span class="keyword">function</span>(<span class="params">cost</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> size1 = cost.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> size2 = cost[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> m = <span class="number">1</span> &lt;&lt; size2;</span><br><span class="line">    <span class="keyword">const</span> dp1 = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> dp2 = <span class="keyword">new</span> <span class="title class_">Array</span>(m);</span><br><span class="line">    </span><br><span class="line">    dp1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= size1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> s = <span class="number">0</span>; s &lt; m; s++) &#123;</span><br><span class="line">        dp2[s] = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; size2; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((s &amp; (<span class="number">1</span> &lt;&lt; k)) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp2[s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp2[s], dp2[s ^ (<span class="number">1</span> &lt;&lt; k)] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">            dp2[s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp2[s], dp1[s] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">            dp2[s] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp2[s], dp1[s ^ (<span class="number">1</span> &lt;&lt; k)] + cost[i - <span class="number">1</span>][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp1.<span class="title function_">splice</span>(<span class="number">0</span>, m, ...dp2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp1[m - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在计算机算法中，状态压缩是一种优化技术，它通过将一些状态信息压缩成更小的数据结构来减少内存使用和提高程序效率。通常情况下，状态压缩适用于需要处理大量状态的算法，例如搜索、动态规划等。状态压缩的常见方法包括使用位运算、哈希表、数组等数据结构来存储状态信息。这些方法可以显著减少算法的时间和空间复杂度，提高算法的执行效率。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://sunra.top/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（六）—— 任务管理</title>
    <link href="https://sunra.top/posts/5d2fbe1a/"/>
    <id>https://sunra.top/posts/5d2fbe1a/</id>
    <published>2023-06-17T23:53:30.000Z</published>
    <updated>2023-09-16T03:26:14.869Z</updated>
    
    <content type="html"><![CDATA[<p>把事情做出来，得到结果，是管理工作的落脚点，同时也是验证管理规划是否合理，团队建设是否有效最重要的标准和依据</p><p>从工作中来，到工作中去。千万不要为了建立机制而建立机制，每一个机制都要有实用价值。</p><p>由于机制都是有场景化特性的，当场景发生变化，机制也要升级。对于机制的重新审视和学习都意味着额外的开销，因此，每个机制的维护都是有成本的，如果没有随着场景变化而升级更新，就会成为没有意义的机制，时间长了就会变成常见的：什么机制都有，但是执行效果都不好</p><span id="more"></span><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ul><li><p>事前</p><p>对于管理者最需要回答的问题就是需要做哪些事，先做哪件，后做哪件，也就是梳理任务的优先级，对应到管理中就是“排优先级”</p></li><li><p>事中</p><p>确保事情按照计划推进，对应到管理中就是“有效执行”或者狭义的“项目管理”</p></li><li><p>事后</p><p>要有意识地总结经验教训，并形成一些“规矩”和“做法”，让以后相似的工作可以做的更好，更顺畅，对应到管理中就是“流程机制”</p></li></ul><h3 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h3><ul><li><p>轻重缓急</p><p>对于每个具体的团队来说，当下能做的工作是有限的，一味增加并发并不会让团队的产出更高效</p></li></ul><ul><li><p>轻重缓急的决策步骤</p><ul><li><p>重要紧急四象限</p></li><li><p>如何判断一个工作是否重要，是否紧急</p><p>如果做，是否受益很大，受益越大越重要<br>如果不做，是否损失很大，损失越大，越紧急</p></li><li><p>常见的情形</p><p>把日常工作分为两种情况：一种是计划内的，一种是计划外的<br>对于计划内的工作，需要关注在一个规划周期内它的价值和收益有多大，要把价值足够大的任务安排进来，持续地推进<br>对于计划外的工作，由于是突发情况，首先要判断中断即有安排来立即跟进新情况。中断既有安排一定会影响手头的工作，也就是说，会影响本来的收益。</p></li><li><p>步骤</p><p>首先判断工作的轻重缓急来指定自己的计划。对于计划内的工作，看收益是否足够大，收益越大越重要，收益越大，就越需要给予相匹配的优先级，资源和关注度；收益相对较小的，就放入todo list，作为待办任务<br>对于计划外的工作，看损失是否足够大，损失越大越紧急。损失够大就按照紧急任务安排，以“止损”为核心目的。如果损失可控就放入计划内的工作列表，以收益为衡量指标。</p></li></ul></li><li><p>决策要点</p><ul><li><p>目标需要一以贯之</p><p>前面提到，通过看收益来判断一个任务是否重要，那么应该按照什么参照物来衡量收益呢？<br>答案是目标，规划的目标里蕴含着我们一段时间内最重要的诉求和期待，也是衡量影响工作收益大小的坐标轴。所以我们目标的设定和评估贯穿着整个管理工作的全过程，目标越明确，在关键时刻我们的方向感越强。</p></li><li><p>任务的评估纬度是有弹性的</p><p>对于一个任务来说，其进度，质量和效果这三个要素是可以此消彼长的所以在拆解任务的时候，对进度的预期不同，对质量的要求不同，对效果的期待不同，都会导致预计时间和优先级变化</p></li><li><p>沟通是不可或缺的</p><p>上级更倾向于告诉你他们要什么，而不会主动告诉你他们愿意用什么来交换，不完全是因为是他们“唯利是图”，而是因为，评估影响并给出相应的方案不是他们的工作，这是你清楚且拿手的。<br>上级判断不出对你即有安排的影响有多大，需要你来给出评估，如果你什么都不说，默认是没有影响的。</p></li></ul></li></ul><ul><li><p>过程管理</p><ul><li><p>如何确保项目的有效执行</p><ul><li><p>充分条件视角</p><p>列出有效执行的所有要点然后照着执行就好，不过不太现实</p></li></ul></li></ul></li></ul><pre><code>- 必要条件视角  列出一些要点，在项目执行过程中确保做到，虽然我们给不出项目有效执行的全部条件，但是我们肯定可以在长期的项目管理中提出一些要点，只要这些要点没有做到，项目就很难得到有效地实施</code></pre><ul><li><p>有效执行的四个障碍</p><ul><li><p>目标不清</p><ul><li>目标不明确，不可衡量</li><li>目标没有对齐，有偏差</li><li>目标发生变化了，没有同步相关的人</li></ul></li><li><p>总负责人缺失</p><ul><li><p>三个问题</p><ul><li>项目涉及的各个团队是否都有一个明确的负责人</li><li>负责人和所有项目组成员，是否都清楚个方面的负责人</li><li>项目是否有唯一的总负责人，总负责人是否有效</li></ul></li><li><p>两个容易模糊的地方</p><ul><li>各负责人对于“负责”的理解不一致</li><li>总负责人无效或缺失</li></ul></li></ul></li><li><p>缺乏有效运转的机制</p><ul><li><p>问题</p><ul><li>某些管理者见识过某些优秀人的优秀表现，就过于迷信人的主动性和职业水平，一旦出现问题，总是觉得人不行。事实上，团队成员的能力水平是正态分布的，，即便是真的人不行，从不行到行也是需要过程的，此时就是管理者应该做事的时候</li><li>人不行的时候，就喜欢用流程和机制。结果管理者就制定了全套的流程让团队遵循，由于学习和执行成本很高，，员工遵循起来很痛苦，因此导致流程机制睡大觉</li></ul></li><li><p>总结</p><ul><li>过于依赖人的主动性，缺乏流程和机制</li><li>虽然有机制，但是没有人监督执行</li><li>虽然有人监督执行，但是员工不愿意执行</li></ul></li></ul></li><li><p>沟通不到位</p><ul><li>主动意识不足，沟通不够主动</li><li>通报意识不足，没有通知所有相关人员</li><li>闭环意识不足，广播出去了，就默认对方收到了</li></ul></li></ul></li><li><p>有效执行的四个要素</p><ul><li>目标清晰</li><li>责任明确</li><li>机制健全</li><li>沟通到位</li></ul></li></ul><ul><li><p>流程机制</p><p>很多管理者一方面希望很多管理工作能够通过流程和机制来保障，从而提高自己的管理效率；另一方面，又为大量的流程机制趴在文档里睡大觉而一筹莫展</p></li></ul><ul><li><p>流程机制建立的步骤</p><p>作为管理者，想让员工分担我们手头上的工作，要么靠梯队，要么靠流程机制</p></li></ul><pre><code>- 所谓靠梯度，就是团队内部有胜任度非常高的人，可以帮我们搞定这件事- 所谓靠机制，就是设计一套方案，来专门应对某个场景出现的问题，用这套方案指导员工做好这类工作- 如果初衷是人才培养，那么去带着员工一起做，去培养梯队是合理的。但是如果初衷是减轻管理者的负担，那反而是应该靠机制。而且，培养梯队永远是远水，靠机制解决当下问题是近渴，多么良好的梯队都提到不了机制的作用</code></pre><ul><li><p>授权机制建立的过程</p><ul><li><p>明确目标</p><p>明确改机制是要解决什么场景下的什么问题。<br>机制的一大特点，就是场景化特性非常明显，因为他们都是为了应对特定场景下的特定问题产生的，例如服务报警机制</p></li><li><p>提炼应对该场景的关键点</p><p>从你和经验丰富的人身上提炼出应对该场景的关键环节，因此，如果有成功经验，这些关键点的提炼会容易很多。<br>这里并不推荐去整理一个详细的操作文档，和一个步骤完整的文档相比，关键点提炼更为重要，这会让执行成本变低，也更具操作性。</p></li><li><p>明确监督者</p><p>也就是，由谁来确保机制的执行，以及在什么时候检查关键点，每个流程和机制的执行情况如何，谁来检查和确认</p></li><li><p>评估操作成本</p><p>确认该机制对执行者来说是可操作的，建立机制的目的是为了简化工作，理想状态是实现管理事务的“自动驾驶”，如果建立机制会给执行者带来更高的操作成本，就需要反思这个机制的合理性</p></li><li><p>形成共识</p><p>和相关执行人沟通并取得共识</p></li></ul></li><li><p>流程机制建立的原则</p><ul><li><p>可操作性</p><p>即简单原则，也就是说，机制要以最低的学习成本和操作成本为原则，这是最重要的原则，如果建立的机制不具备可操作性，那么即使管理者自我感觉再完美，能应对和解决的问题越多，也要果断抛弃</p></li><li><p>只打关键点</p><p>建立流程机制，没必要对所有细节进行完整描述，没人喜欢长篇大论的文字，技术人尤其如此，你只需要告诉大家，在那几个关键的节点要做什么即可</p></li><li><p>明确到人</p><p>问责原则。各个关键点由谁来跟进，这个问题要有明确的约定，不能完全靠人的自觉性</p></li><li><p>实用原则，要随着场景变化升级</p><p>从工作中来，到工作中去。千万不要为了建立机制而建立机制，每一个机制都要有实用价值。<br>由于机制都是有场景化特性的，当场景发生变化，机制也要升级。对于机制的重新审视和学习都意味着额外的开销，因此，每个机制的维护都是有成本的，如果没有随着场景变化而升级更新，就会成为没有意义的机制，时间长了就会变成常见的：什么机制都有，但是执行效果都不好</p></li></ul></li><li><p>流程机制的常见问题</p><ul><li><p>机制是不是越多越好</p><p>机制不是越多越好，而是越少越好。这个和机制的简单原则，实用原则一脉相承。机制的建立并不会解决问题，对机制的执行才能解决问题，而机制的建立，执行和后期维护都是需要成本的，所以不要贪多</p></li><li><p>人靠谱还是机制靠谱</p><p>人的表现波动性比较大，机制的意义在于，当人不靠谱的时候，去保证做事的下限</p></li><li><p>机制足够靠谱，是不是就不用激励了</p><p>机制是保证做事的下限，并不能替代激励的作用</p></li></ul></li></ul><ul><li><p>如何高效执行</p><p>曾经有位公司老板说，竞争对手的团队天天996，于是也想让自己的团队996。<br>问题是，他希望通过996来达成什么目的。<br>他其实并不知道为什么要996，只是希望大家努力，至于要达成什么目的，他并不清楚。<br>要记住，996只是手段，而手段必须为某个目的服务，目的还不明确的时候，手段的有效性是无法评判的。我们常常靠所谓的“理所当然”去做决策，往往达不到期待的效果，甚至事与愿违，唯一的效果就是阶段性的安慰</p></li></ul><ul><li><p>高效执行=个体产能<em>合作有效度</em>方向有效度*工作时长</p><p>很多管理者都把焦点放在了工作时长上，这就是一将无能，累死三军</p></li></ul><pre><code>- 个体产能=实力*意愿=能力培养*员工激励- 合作有效度  通过分工让大家劲往一处使，同时靠平时积累起来的信任和默契让团队有良好的协作水平- 方向有效度  - 脱离目标谈执行的问题    - 激励失效      - 工作反复切换，之前的讨论评估设计开发都成了沉没成本      - 时间越来越紧，挑战越来越大      - 员工认为管理层没想清楚，质疑管理层能力    - 协作失调      - 明确而认知一致的目标，有助于保持统一的工作步调      - 目标不清晰，会导致低效率沟通    - 忙乱无效      - 明确目标      - 明确目标的衡量指标</code></pre>]]></content>
    
    
    <summary type="html">从工作中来，到工作中去。千万不要为了建立机制而建立机制，每一个机制都要有实用价值。由于机制都是有场景化特性的，当场景发生变化，机制也要升级。对于机制的重新审视和学习都意味着额外的开销，因此，每个机制的维护都是有成本的，如果没有随着场景变化而升级更新，就会成为没有意义的机制，时间长了就会变成常见的：什么机制都有，但是执行效果都不好</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（五）—— 团队建设下篇</title>
    <link href="https://sunra.top/posts/3350143e/"/>
    <id>https://sunra.top/posts/3350143e/</id>
    <published>2023-06-07T12:52:08.000Z</published>
    <updated>2023-09-16T03:26:14.869Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>梯队</p><p>能力，激励，分工，协作这四个要素组合起来就能实现个体战斗力和团队战斗力的有力输出，但是并不能保证团队有持续的动力。<br>要提升一个团队的耐力和韧性，可以通过两个要素来做工作，梯队培养和团队文化。<br>一个团队的梯队，就像团队的骨架一样，决定了团队是否健壮；而团队文化就好像是团队的气质和调性，它会吸引气味相投的人持续加入，把不符合团队气质的人筛选出去。</p></li></ul><span id="more"></span><pre><code>- 梯队规划- 梯队培养    - 选拔和物色培养对象        - 原则            - 保持人才选拔和团队建设的一致性                - 能力：个体能力和业务特点是否相匹配，其能力潜质是否可培养                - 协作：其协作的意识和能力，与团队的要求和期待是否匹配                - 文化：其行为风格和价值观，和团队文化价值观是否匹配            - 重视和自己有互补的人              风格相近的人协作效率会更高，但是缺乏更丰富的洞见和视角。    - 培养物色出来的人        - 对齐期待          管理者和员工对该员工的个人发展的期待达成共识。常用的方式是IDP，即个人发展计划。            - 不承诺原则：即不承诺给员工任何好处              一方面，能够成为团队核心骨干，是靠自己的影响力，而不是承诺。其次，如果无法兑现，这个人可能会流失。              PS：你不承诺任何好处，他为什么要听你的？这个人可能现在就流失了        - 做好授权          能力和影响力都是在实战中积累起来的，这就需要给培养对象提供发挥空间和做事的机会。            - 事前                - 审视初衷                  要明确自己在此次授权中想要收获什么，想把某件事做出来，还是把人带出来                - 明确期待                  让培养对象明确管理者的期待                - 听其思路                  交代好授权任务之后，先听听他对这件事的看法和思路，就可以大体判断出，他独立负责这项工作道理靠不靠谱，也不失为风险把控的良方                - 重要约定                  管理者要对自己特别关心的事情和培养对象作出约定，比如，如何检查是否完成，什么时候检查等            - 事中                - 了解进度                - 给与支持            - 事后                - 评估结果                  对于任何一次授权，针对授权对象的工作结果和表现给予有理有据的评价和及时的反馈                - 洞察优势                  盘点在整个授权过程中，授权对象所表现出来的突出优势有哪些                - 积极反馈                  对于授权对象的工作，要给出一些正向的反馈                - 一条改进                  给出一两条改进的意见        - 建立反馈            - 建立周期性沟通机制，让沟通常规化            - 评审IDP，对IDP执行情况的评估和反馈，才能体现IDP的更大价值            - 安排第二导师</code></pre><ul><li><p>文化</p><ul><li><p>什么是团队文化</p><p>对于团队文化本身，没有唯一明确的定义，每个团队都有一些约定俗成的工作方式和是非判断，以至于在团队中，即使没有人告诉你什么是对的，什么是错的，你大体上也能清楚什么该做，什么不该做。</p></li></ul></li></ul><pre><code>- 团队文化的价值  鲜明的团队文化，至少会给团队带来效率，空间，归属和耐力四种价值    - 效率是由文化的秩序性带来的效果      由于团队文化中包含着约定俗成的工作标准和决策依据，并且团队成员对此都有共识，因此不必事事请示上级。一个强调“安全”的团队，每个人都会考虑工作中的安全措施，统一的行为准则和协作上的默契，会极大提高效率    - 空间是由文化的导向性带来的效果      在符合价值导向的前提下，员工可以自主选择自己的工作手段，甚至是工作内容，这位很多由主动性的员工提供了自主发挥的空间    - 归属是文化的筛选性带来的效果      团队文化有筛选器的作用，认同该文化的人会不断加入进来，而不认同的会逐渐淡出    - 耐力是由文化的延续性带来的效果      文化对一个组织，是相对稳定的元素，它能够在新老员工之间传承，不会因为个别人员的变动而产生变化- 团队文化建设的步骤    - 提炼      用合适的词句表述出来        - 误区            - 拿来主义：你团队的文化和你喜欢什么文化关系不大，而和你是什么样的人关系很大                - 面对问题，总是抱怨，那么强调积极文化是不可行的                - 面对合作，总是对抗，那么强调紧密合作是不可行的                - 面对工作，总是被动等待，那么提倡主动是不行的                - 面对下属，总是漠不关心，那么强调温暖是不行的            - 越简练越好                - 目的是让大家理解并记住，不是字数越少越好        - 方式            - 从自己身上的优秀品质中提炼，从而将优秀的特质放大到整个团队，你身上没有的特质，不适合作为团队文化去培养    - 主张      把提炼出来的文化，宣贯给整个团队，包括上级和兄弟团队        - 不是见着谁就讲，而是要有意识在一些公开或私下场合，把团队文化告诉大家    - 践行        - 员工不买账文化的原因            - 文化提炼的时候，不是从管理者自身提炼的，管理者不能以身作则，言行不一致            - 没有把团队文化和管理工作结合，光说不练，没有让员工感受到践行文化的益处</code></pre>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;梯队&lt;/p&gt;
&lt;p&gt;能力，激励，分工，协作这四个要素组合起来就能实现个体战斗力和团队战斗力的有力输出，但是并不能保证团队有持续的动力。&lt;br&gt;要提升一个团队的耐力和韧性，可以通过两个要素来做工作，梯队培养和团队文化。&lt;br&gt;一个团队的梯队，就像团队的骨架一样，决定了团队是否健壮；而团队文化就好像是团队的气质和调性，它会吸引气味相投的人持续加入，把不符合团队气质的人筛选出去。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（五）：图形学中是如何表达几何体的</title>
    <link href="https://sunra.top/posts/43b8f2f/"/>
    <id>https://sunra.top/posts/43b8f2f/</id>
    <published>2023-06-03T23:35:35.000Z</published>
    <updated>2023-09-16T03:26:14.865Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/posts/83267170/">上一篇关于如何使用贴图的博客</a>中我们讲了如何从贴图中提取我们想要的数据。</p><p>这篇博客我们先简单讲一下贴图的应用，然后从位移贴图过渡到集合体的表达。</p><h1 id="几何体的应用方式"><a href="#几何体的应用方式" class="headerlink" title="几何体的应用方式"></a>几何体的应用方式</h1><p>在GPU编程中，贴图就等于我们CPU编程中内存+范围查询，可以用贴图存储我们计算过程中的需要的数据并对数据进行范围查询。</p><p>所以贴图中不仅仅可以用来存储物体本身上点的颜色信息，还可以存储诸如环境信息，法线信息，位移信息等。</p><span id="more"></span><h2 id="环境贴图"><a href="#环境贴图" class="headerlink" title="环境贴图"></a>环境贴图</h2><p>如下图所示，本来这个茶壶上对环境的反射需要是实时计算的，但是环境时无限远的，所以茶壶相对环境位置不变，这个反射结果也是不变的，所以我们可以提前计算好，然后保存在贴图中，在做渲染的时候，将茶壶本身的颜色贴图和环境贴图的采样结果进行混合就好。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685836152/origin-of-ray/WX20230604-074845_2x_slesm0.png" alt="环境光贴图示例"></p><h2 id="凹凸贴图（法线贴图）"><a href="#凹凸贴图（法线贴图）" class="headerlink" title="凹凸贴图（法线贴图）"></a>凹凸贴图（法线贴图）</h2><p>如果我们的几何体本身比较平滑，我们想要在平滑的表面山制造出凹凸感，比如在一个平面上制造出柏油马路的观感，可以采用凹凸贴图的方式，因为本身我们看到的所谓的凹凸感也是因为光线反射的角度不同导致的，我们可以直接在计算反射角的时候通过凹凸贴图加以干预就好。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685836608/origin-of-ray/WX20230604-075634_2x_punp7t.png" alt="凹凸贴图示例"></p><h2 id="位移贴图"><a href="#位移贴图" class="headerlink" title="位移贴图"></a>位移贴图</h2><p>刚才我们说可以通过凹凸贴图的方式来改变光滑表面的每个点的反射角度来制造凹凸感，那我们其实也可以直接通过位移贴图的方式，在渲染的时候真的就改变点的位置来改变渲染效果。</p><p>这种方式和凹凸贴图的区别是，凹凸贴图不改变点的位置，只是改变法线方向，而唯一贴图是直接改变点的位置，它存储的是对应点基于原本位置的位置。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685836839/origin-of-ray/WX20230604-080024_2x_zs2mii.png" alt="位移贴图"></p><p>那这里就涉及一个问题，我改变了位置，如何计算新的法线？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685837204/origin-of-ray/WX20230604-080630_2x_hlz5v6.png" alt=""></p><blockquote><p>这里的位移贴图其实是一种几何体的表示方式，是一种显式表示方式</p></blockquote><h1 id="几何体的表示方式"><a href="#几何体的表示方式" class="headerlink" title="几何体的表示方式"></a>几何体的表示方式</h1><p>我们有很多中不同的表示几何体的方式，但是主要分为两种，一种是显式的，一种是隐式的。</p><h2 id="隐式的表示方式"><a href="#隐式的表示方式" class="headerlink" title="隐式的表示方式"></a>隐式的表示方式</h2><p>所谓的隐式的方式，它表示的是集合体上的点所满足的关系，理论上我们找到所有满足关系的点，就可以得到这个几何体。</p><p>常见的隐式表示方式有：</p><ul><li>algebraic surface </li><li>level sets </li><li>distance functions</li></ul><h3 id="algebraic-surface"><a href="#algebraic-surface" class="headerlink" title="algebraic surface"></a>algebraic surface</h3><p>对于隐式的表示方式来说，它表示的是集合上的点所满足的关系，所以它可以很简单的判断一个点是不是在几何体的面上，而他的缺点在于，你很难看出来它表示的是个什么东西，如下图</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685871570/origin-of-ray/WX20230604-173434_2x_xq4b0x.png" alt=""></p><p><strong>这里我们可能会产生一个疑问，那就是这种事方式是否只能表示比较简单且有规律的图形？</strong></p><p>其实隐式的方式可以表示非常复杂的图形的，这里提供两个思路：</p><p>第一个思路是，如果我们学过高等数学，任何函数都可以傅立叶展开多个函数相加的方式，同样的，我们可以通过足够多的函数相加拟合出任何函数，只要你有这个知识储备且愿意花时间就好。</p><p>第二个思路，比较像我们在做图表时候的思路，用多个简单的图形的拼接或者剔除等方式(即布尔运算)来做，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685873239/origin-of-ray/WX20230604-180548_2x_rkvbsv.png" alt=""></p><h3 id="distance-functions"><a href="#distance-functions" class="headerlink" title="distance functions"></a>distance functions</h3><p>如图所示，这种方式是刚才我们说的第二个思路布尔运算的一种变体</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685873316/origin-of-ray/WX20230604-180825_2x_dqnxqs.png" alt=""></p><p>符号距离函数（Signed Distance Function，简称 SDF）是一种在计算机图形学和几何处理中常用的数学表示方法。它用于描述一个点到某个形状表面的最短距离，同时包含了该点相对于形状表面的位置信息。SDF 的值可以是正数、负数或零：</p><ol><li>当点位于形状表面上时，SDF 的值为零。</li><li>当点位于形状内部时，SDF 的值为负数，表示点到形状表面的最短距离。</li><li>当点位于形状外部时，SDF 的值为正数，表示点到形状表面的最短距离。</li></ol><p>SDF 在许多应用中都有广泛应用，如光线追踪、碰撞检测、流体模拟等。它的优点在于可以高效地计算点与形状之间的距离，同时保留了点相对于形状的位置信息。</p><p>上图中我们在融合两个球的过程中，首先计算出空间中的任意点分别相对于两个球表面的距离函数，然后加权，结果为0的点留下</p><p>如果三维的比较难理解，我们可以用二维的一个图看看：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685874029/origin-of-ray/WX20230604-181955_2x_bwc80b.png" alt=""></p><h3 id="level-sets"><a href="#level-sets" class="headerlink" title="level sets"></a>level sets</h3><p>这种方式也是一种变体，针对的是我们没法写出SDF的情况，只能写出一个大致的表格映射的情况下，我们大概如何获得融合后的结果，以一条线为例：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685874317/origin-of-ray/WX20230604-182337_2x_galu1n.png" alt=""></p><h2 id="显式的表示方式"><a href="#显式的表示方式" class="headerlink" title="显式的表示方式"></a>显式的表示方式</h2><p>而显式的表示方式，就是直接给出点面的信息，或者通过参数映射的方式，比如我们非常常见的Mesh。我们刚才说的位移贴图其实就是一种映射方式，所以我们刚才说它是一种显式的几何体表示方式。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685872152/origin-of-ray/WX20230604-174903_2x_ycsu26.png" alt=""></p><p>常见的显式表示方式有：</p><ul><li>point cloud: 点云</li><li>polygon mesh：我们常见Mesh</li><li>Subdivision, simplification, regularization：细分，简化，规范化</li></ul><p>而显式的表示方式，缺点就是比较难判断一个点是否在几何体的面上。如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685872127/origin-of-ray/WX20230604-174830_2x_tblcod.png" alt=""></p><h3 id="点云"><a href="#点云" class="headerlink" title="点云"></a>点云</h3><p>这种比较好理解，就是大量的点，这些点之间也不需要连线，只要足够多，就能看不到缝隙。</p><p>因为它是一系列的点，所以用一个数组存储就好，只不过这个数据量非常大</p><h3 id="多边形网格"><a href="#多边形网格" class="headerlink" title="多边形网格"></a>多边形网格</h3><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685875059/origin-of-ray/WX20230604-183728_2x_umqfyz.png" alt=""></p><h1 id="具体的使用场景"><a href="#具体的使用场景" class="headerlink" title="具体的使用场景"></a>具体的使用场景</h1><h2 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h2><p>贝塞尔曲线是由几个点来决定曲线的一种方法，有着非常常见的应用，比如如果我们用过xmind，在不同标签之间建立连线的时候，会给我们四个点，其中两个点固定是需要连接的两个标签的位置，另外给了我们两个点可以拖动，拖动之后就可以改变曲线的形状，这个曲线就是一个三次贝塞尔曲线。</p><p>贝塞尔曲线可以有n次（n大于等于2），我们以二次贝塞尔曲线为例来解释，其他的依次类推就好</p><p>如图，假设我们有三个点，我们这三个点决定了我们曲线从$b_0$开始，$b_1$结束，起点的切线方向需要是$\vec{b_0b_1}$，终点的切线方向需要是$\vec{b_1b_2}$</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685875421/origin-of-ray/WX20230604-184317_2x_s9t7pt.png" alt=""></p><p>具体求解这曲线，我们可以采用如下方式，假设我们有一个点在时间内从$b_0$移动到$b_1$，那么在任意一个时间点t，它的位置应该是：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685875422/origin-of-ray/WX20230604-184327_2x_zwtft8.png" alt=""></p><p>图中的$b_0b_0^1$与$b_0^1b_1$的比值, $b_1b_1^1$与$b_1^1b_2$的比值，$b_0^1b_0^2$与$b_0^2b_1^1$的比值都为t/（1-t）</p><p>二次贝塞尔曲线其实就是先用三个点按比例得到了两个新的点，然后再在新的两个点的连线上按照比例得到一个点</p><p>三次的贝塞尔曲线其实就是四个点来决定曲线，相通的方式，从四个点逐步变成1个点</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685876629/origin-of-ray/WX20230604-190230_2x_jvrfhj.png" alt=""></p><p>再高次的贝塞尔曲线其实就是不断递归上述过程：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685876770/origin-of-ray/WX20230604-190558_2x_ka27xu.png" alt=""></p><p>我们刚才只讲述贝塞尔曲线的是怎么得到的，那么如何用公式表达这个过程呢？如下是二次贝塞尔曲线的结果</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685876959/origin-of-ray/WX20230604-190907_2x_p480q9.png" alt=""></p><p>这结果其实我们把等式右边的系数拿出来，是$(1 - t + t) ^ 2$的展开式</p><p>对于高阶的贝塞尔曲线，其公式如下，其中的B表示的是二项分布的展开式，即每次得到结果的概率是t，那么n次独立重复实验出现j次结果的概率：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877128/origin-of-ray/WX20230604-191159_2x_ydqw3a.png" alt=""></p><h3 id="贝塞尔曲线的拼接"><a href="#贝塞尔曲线的拼接" class="headerlink" title="贝塞尔曲线的拼接"></a>贝塞尔曲线的拼接</h3><p>当我们一个曲线是非常高阶的贝塞尔曲线的时候，其实是很难控制的，如下图所示：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877394/origin-of-ray/WX20230604-191433_2x_nhew7z.png" alt=""></p><p>所以我们可以采取多个低阶贝塞尔曲线拼接的方式：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877395/origin-of-ray/WX20230604-191622_2x_mejshx.png" alt=""></p><h2 id="贝塞尔曲面"><a href="#贝塞尔曲面" class="headerlink" title="贝塞尔曲面"></a>贝塞尔曲面</h2><p>贝塞尔曲面是由4*4=16个点来控制的曲面：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877530/origin-of-ray/WX20230604-191801_2x_fdb6aw.png" alt=""></p><p>如下图所示，首先水平每一行的四个点可以得到一个贝塞尔曲线，此时我们得到了四条贝塞尔曲线，然后我们再想象有一个平面竖直切下去，和四个贝塞尔曲线得到四个点，这四个点再能确定一个贝塞尔曲线，我们移动这个数值面的过程中就可以得到一个贝塞尔曲面：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877530/origin-of-ray/WX20230604-191809_2x_aojora.png" alt=""></p><p>这个过程其实还是个递归的过程：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685877822/origin-of-ray/WX20230604-192243_2x_rri2kz.png" alt=""></p><h2 id="Mesh-细分"><a href="#Mesh-细分" class="headerlink" title="Mesh 细分"></a>Mesh 细分</h2><p>所谓mesh细分，指的是，将mesh中的多边形进行拆分，以获得更加光滑的效果</p><p>从定义中我们就可以看出，这个mesh细分其实有两件事情要做，第一件事是把多边形拆分，第二部要对拆分后的多边形进行调整，不然单纯的拆分并不会得到更加光滑的效果，就比如我们把一个三角形三条边中点连起来得到四个三角形，但是这四个三角形还是在一个面上，不会有更光滑的效果出来</p><h3 id="Loop-Subdvision"><a href="#Loop-Subdvision" class="headerlink" title="Loop Subdvision"></a>Loop Subdvision</h3><blockquote><p>叫Loop只是因为发明者算法的人叫Loop</p></blockquote><p>算法第一步就是把三角形的三条边的顶点连起来，我们就得到了四个三角形。</p><p>接下来我们要更新点的位置来使拆分后的面有更光滑的效果：</p><p>对于三个新的点，我们采取以下方式更新坐标</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878264/origin-of-ray/WX20230604-193041_2x_atmqd9.png" alt=""></p><p>对于原本的三个点，我们更新方式如下：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878264/origin-of-ray/WX20230604-193048_2x_zjmgjl.png" alt=""></p><h3 id="Catmull-Clark-Subdivision"><a href="#Catmull-Clark-Subdivision" class="headerlink" title="Catmull-Clark Subdivision"></a>Catmull-Clark Subdivision</h3><p>Loop细分的限制很明显，只能拆分三角面，那么对于多边形我们如何拆分呢？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878453/origin-of-ray/WX20230604-193338_2x_jacoyn.png" alt=""></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878491/origin-of-ray/WX20230604-193440_2x_m28frs.png" alt=""></p><p>可以看出来，只有第一次拆分才会增加奇异点的数量，也就是只有第一次把三角形拆分成三个四边形之后，四边形怎么拆分得到的都是四边形了。</p><p>那么我们在如何使用更新新的四边形的位置呢？</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878677/origin-of-ray/WX20230604-193716_2x_ypkihf.png" alt=""></p><h2 id="Mesh-简化"><a href="#Mesh-简化" class="headerlink" title="Mesh 简化"></a>Mesh 简化</h2><h3 id="边坍缩"><a href="#边坍缩" class="headerlink" title="边坍缩"></a>边坍缩</h3><p>其实就删掉一个边，或者说把边的两个顶点合并成一个。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685878849/origin-of-ray/WX20230604-194001_2x_afzlfm.png" alt="">、</p><p>这个方案听起来简单，但是有两个问题，删除哪个边，合并之后的点的位置在哪里才能引入最小的误差。</p><blockquote><p>注意，在图形学中，很多所谓的最，只是效果上可以接受的意思</p></blockquote><p>这里我们引入一个新的概念，叫做二次度量误差，即距离被删除的面L2距离和最小时候的L2距离</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685879253/origin-of-ray/WX20230604-194447_2x_eou8un.png" alt=""></p><p>我们只需要计算出所有面的二次度量误差，然后依次选取最小的删除就好。</p><p>这里其实有个问题，就是每次删除后，都会影响一些点的位置，从而影响其二次度量误差，我们需要重新计算并重新排序获得最小的进行删除。这里我们就要用到优先级队列这个数据结构，每次获取队头进行删除，然后更新被影响到的二次度量误差，再从队头获取就好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/posts/83267170/&quot;&gt;上一篇关于如何使用贴图的博客&lt;/a&gt;中我们讲了如何从贴图中提取我们想要的数据。&lt;/p&gt;
&lt;p&gt;这篇博客我们先简单讲一下贴图的应用，然后从位移贴图过渡到集合体的表达。&lt;/p&gt;
&lt;h1 id=&quot;几何体的应用方式&quot;&gt;&lt;a href=&quot;#几何体的应用方式&quot; class=&quot;headerlink&quot; title=&quot;几何体的应用方式&quot;&gt;&lt;/a&gt;几何体的应用方式&lt;/h1&gt;&lt;p&gt;在GPU编程中，贴图就等于我们CPU编程中内存+范围查询，可以用贴图存储我们计算过程中的需要的数据并对数据进行范围查询。&lt;/p&gt;
&lt;p&gt;所以贴图中不仅仅可以用来存储物体本身上点的颜色信息，还可以存储诸如环境信息，法线信息，位移信息等。&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>GAMES101 系列总结（四）：如何应用纹理贴图</title>
    <link href="https://sunra.top/posts/83267170/"/>
    <id>https://sunra.top/posts/83267170/</id>
    <published>2023-05-25T10:43:16.000Z</published>
    <updated>2023-09-16T03:26:14.865Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunra.top/posts/2a17dbd0/">上一篇关于Shading的博客</a>中最后我们提到了Texture是我们用来对点进行输入的方式。</p><p>之前我们的说，每个点都有自己的UV坐标，然后通过UV坐标去贴图上找到对应的点，然后把值取出来就好，三角形中间的像素点我们可以通过中心坐标来进行插值。</p><p>但是问题来，如果我们的贴图过小，就可能导致模型是上多个点对应相同的UV，那么就会造成模糊，反之如果贴图过大，UV坐标差别过大，会造成最后产生锯齿或者摩尔纹的效果。</p><p>本文就来讲一下，游戏引擎是如何解决这两种问题的。</p><span id="more"></span><h1 id="基本的采样规则"><a href="#基本的采样规则" class="headerlink" title="基本的采样规则"></a>基本的采样规则</h1><p>（x,y）是屏幕上的像素坐标，（u,v）是模型上的点对应的纹理坐标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for each rasterized screen sample (x,y): </span><br><span class="line">    (u,v) = evaluate texture coordinate at (x,y) </span><br><span class="line">    texcolor = texture.sample(u,v);</span><br><span class="line">    set sample’s color to texcolor;</span><br></pre></td></tr></table></figure><h1 id="如果贴图过小会怎样"><a href="#如果贴图过小会怎样" class="headerlink" title="如果贴图过小会怎样"></a>如果贴图过小会怎样</h1><h2 id="方案一：纹理放大"><a href="#方案一：纹理放大" class="headerlink" title="方案一：纹理放大"></a>方案一：纹理放大</h2><p>这个方案是最简单的方案，贴图过小就通过一定的算法进行放大。</p><p>这里我们引入一个新的概念，叫做纹素(texel)，即纹理上的一个点（A pixel on a texture），我们的UV坐标从贴图上取到的就是一个纹素</p><p>纹理放大的算法常见的有三种：Nearest，Biliner，Bicubic</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685012251/origin-of-ray/WX20230525-185641_2x_ngjuhb.png" alt="三种算法纹理放大效果图"></p><p>我们以Biliner为例来讲解下纹理放大的过程。</p><p>假设我们要采样下图中红色点的值，我们选取该点周围的四个点，然后计算我们要采样的点与四个纹素中心之间的距离，并用这个距离进行插值：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685012555/origin-of-ray/WX20230525-190006_2x_uxgax3.png" alt="Biliner插值过程"></p><h1 id="如果纹理过大会怎样"><a href="#如果纹理过大会怎样" class="headerlink" title="如果纹理过大会怎样"></a>如果纹理过大会怎样</h1><p>首先我们看一个效果图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685012653/origin-of-ray/WX20230525-190358_2x_eujo53.png" alt=""></p><p>它在近的地方，因为贴图过大，丢失了一些细节导致出现了锯齿，而在远处，又因为过多的细节产生了摩尔纹。（原因属于个人理解，但效果是这样的没错）</p><p>当贴图过大的时候，实际上就是如下效果：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685065463/origin-of-ray/WX20230526-094407_2x_irakss.png" alt=""></p><p>也就是当我们利用一开始说的的<code>基本采样规则</code>去找贴图上的某个纹素的时候，找到的不是一个，而是一片。</p><blockquote><p>换句话说，贴图过小，多个像素找到同一个纹素，贴图过大，一个像素可以匹配多个纹素</p></blockquote><h2 id="方案一：超采样"><a href="#方案一：超采样" class="headerlink" title="方案一：超采样"></a>方案一：超采样</h2><p>这个超采样技术的算法其实和刚才的纹理放大是一样的，只不过针对贴图过小的情况，超采样针对的是原始贴图，用于生成一个分辨率更高的原始贴图，而当贴图过大时，一个像素可能对应多个纹素，那么该像素的从贴图上的采样结果是有其周围的多个纹素共同决定的。</p><p>下图为超采样的效果图：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685066672/origin-of-ray/WX20230526-100416_2x_gbp78o.png" alt=""></p><p>可以看到，超采样确实是有效果的，但是问题就是，计算代价过大，每个像素都需要计算多个点的值并进行插值。</p><h2 id="方案二：求平均值"><a href="#方案二：求平均值" class="headerlink" title="方案二：求平均值"></a>方案二：求平均值</h2><p>超采样计算麻烦，我们就简单的在一个范围内求平均值就好</p><h2 id="方案三：Mipmap"><a href="#方案三：Mipmap" class="headerlink" title="方案三：Mipmap"></a>方案三：Mipmap</h2><p>这是一种更快的范围查询，是一种空间换时间的思路，需要我们事先计算好不同采样频率下范围查询的结果存储到贴图中，即生成不同程度低分辨率的贴图，当出现贴图过大的情况时，直接去更小分辨率的贴图上进行查找。</p><p>Mipmap是一种纹理映射的技术，用于在不同距离和角度下呈现不同细节的纹理。一个Mipmap纹理是由多个不同分辨率的纹理图像组成的，每个图像都是前一个图像的1/4大小。Mipmap的level是指Mipmap纹理中的第几个图像，从0开始计数，0级是原始纹理图像。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685067134/origin-of-ray/WX20230526-101158_2x_od1rbi.png" alt=""></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685067194/origin-of-ray/WX20230526-101305_2x_rznotd.png" alt=""></p><p>这种方案有两个关键点：</p><ol><li>生成不同级别的Mipmap</li><li>如何确定使用哪个级别的Mipmap</li></ol><p>第一点是图像压缩的算法，有很多，我们不多赘述，也不是渲染特有的知识，我们主要看一下如何确定级别，即这个<code>D</code></p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685067404/origin-of-ray/WX20230526-101635_2x_mhbe63.png" alt=""></p><p>Mipmap的level可以通过以下公式计算：</p><p>level = log2(max(w, h))</p><p>其中，w和h是纹理图像的宽度和高度，max(w, h)表示宽度和高度中的最大值。这个公式的意思是，每个Mipmap级别的图像都是前一个级别的图像的1/4大小，因此在计算时使用对数函数以2为底数，可以得到最大级别的大小。</p><p>例如，如果原始纹理图像的大小为512x512像素，则Mipmap纹理包含8个级别，分别是0级到7级。0级是原始图像，1级是256x256像素的图像，2级是128x128像素的图像，以此类推。</p><p>我们需要采用合理的Level才会有比价好的效果，级别越高，细节越少，如果因为过小再使用贴图过小时的超采样方法，会更加模糊：</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685067916/origin-of-ray/WX20230526-102501_2x_ihkpzv.png" alt=""></p><h2 id="方案四：Anisotropic-Filtering"><a href="#方案四：Anisotropic-Filtering" class="headerlink" title="方案四：Anisotropic Filtering"></a>方案四：Anisotropic Filtering</h2><p>Mipmap其实还是有限制的，它只能去对正方向的贴图做mipmap。</p><p>因为他的这个限制，一方面，在做采样的时候会用到很多用不到的点，增加计算量，其次是一些像素对应的是覆盖多个纹素的长方形，导致超采样模糊。</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685068320/origin-of-ray/WX20230526-103146_2x_veggr4.png" alt=""></p><p>针对长方形的情况，我们可以采用Anisotropic Filtering</p><p><img src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1685068399/origin-of-ray/WX20230526-103312_2x_hr9ugc.png" alt=""></p><p>按比例缩小的正方形贴图在对角线，其他位置存放一些宽度压缩活着长度压缩的图</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sunra.top/posts/2a17dbd0/&quot;&gt;上一篇关于Shading的博客&lt;/a&gt;中最后我们提到了Texture是我们用来对点进行输入的方式。&lt;/p&gt;
&lt;p&gt;之前我们的说，每个点都有自己的UV坐标，然后通过UV坐标去贴图上找到对应的点，然后把值取出来就好，三角形中间的像素点我们可以通过中心坐标来进行插值。&lt;/p&gt;
&lt;p&gt;但是问题来，如果我们的贴图过小，就可能导致模型是上多个点对应相同的UV，那么就会造成模糊，反之如果贴图过大，UV坐标差别过大，会造成最后产生锯齿或者摩尔纹的效果。&lt;/p&gt;
&lt;p&gt;本文就来讲一下，游戏引擎是如何解决这两种问题的。&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://sunra.top/categories/Unity/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人的管理方法论（四）—— 团队建设上篇</title>
    <link href="https://sunra.top/posts/409cc99/"/>
    <id>https://sunra.top/posts/409cc99/</id>
    <published>2023-05-21T01:43:25.000Z</published>
    <updated>2023-09-16T03:26:14.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是好的团队"><a href="#什么是好的团队" class="headerlink" title="什么是好的团队"></a>什么是好的团队</h3><ul><li><p>业绩好</p><ul><li>看方向：管理规划阶段，定义何为好的业绩，并规划与之匹配的团队</li><li>带人：即团队建设阶段，不断提高团队取得业绩的能力，包括个人能力和团队能力</li><li>做事：任务管理阶段，如何通过良好的把控把计划落地执行，产出结果</li></ul></li><li><p>效率高</p><ul><li>看方向：目标越清晰，效率越高</li><li>带人：团队成员个体能力越强，团队成员间的协作水平越高，团队效率就越高</li><li>做事：流程和规则越有效率，操作越熟练，做事效率就越高</li></ul></li><li><p>可持续</p><ul><li>看方向：团队规划的合理性和有效性</li><li>带人：完善的梯度和成熟的团队文化</li><li>做事：团队的韧劲是磨练出来的，磨练离不开持续地做事</li></ul></li></ul><span id="more"></span><h3 id="团建要素"><a href="#团建要素" class="headerlink" title="团建要素"></a>团建要素</h3><h4 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h4><ul><li><p>能力的构成</p><ul><li><p>能力三核</p><ul><li><p>知识</p><ul><li>知道和理解的内容信息，一般用广度和深度来衡量</li></ul></li><li><p>技能</p><ul><li>操作和完成某项工作的技术和能力，一般用熟练度来衡量</li></ul></li><li><p>才干</p><ul><li>自发高频运用的思维，行动和感受模式，也包括品格特质等</li></ul></li></ul></li><li><p>工作能力的三个维度</p><ul><li><p>专业能力</p><ul><li><p>对于技术人来说，一般指的就是技术能力，这对于不同的团队来说不一样。可以从广度和深度来衡量</p><p>广度：代表能搞定多大规模的事情<br>深度：代表能搞定多复杂的事情</p></li></ul></li><li><p>通用能力</p><p>如：结构化思考能力。团队协作能力。项目管理能力。快速学习能力</p></li><li><p>人格力量</p><p>人格力量通常指的是一个人在面对某一情形时的稳定态度和表现，比如迎难而上，坚持不懈，积极正向等。<br>这些人格力量对于能否搞定一件事情有时至关重要，但是培养起来却不是一朝一夕的事情，往往来自于每个人长期的生活工作经历，而且一旦形成就很难改变。<br>但很难改变不意味着不能改变。为了让团队成员趋于某一特定的共同气质，管理者需要旗帜鲜明地倡导团队推崇的品格。</p></li></ul></li></ul></li><li><p>能力培养的目标</p><p>学习目标最好专题化，而不是散落一地的知识点</p></li></ul><pre><code>- 举例  - 专业能力角度    现有技术串讲    核心技术专题化学习：      架构专题      存储专题      前端专题      安全专题      运维专题      自动化测试专题    扩展新技术      业务发展需要的新技术      领域前沿技术  - 通用能力角度    项目管理能力    带人能力    沟通表达能力</code></pre><ul><li><p>能力培养的标准</p><p>提升员工能力的初衷是什么？不同的初衷决定制定什么标准，然后把这个标准写入员工的个人发展计划中，并与他们达成一致</p></li></ul><pre><code>- 避免期待不清导致期待过高或效果不佳- 合理安排管理者的精力投入，并合理分配对不同培养对象投入的精力</code></pre><ul><li><p>能力培养的方法</p><p>7成靠工作实践，2成靠互相交流，1成靠听课和看书自学</p></li><li><p>员工学习意愿</p><p>如何激发员工的学习的动力和意愿呢？</p></li></ul><pre><code>- 推：给压力，推着他学  - 提出明确的工作要求  - 建立学习机制。如强制要求遵守学习规则，并完成学习任务- 拉：给方向，引导他学  - 树立榜样  - 配备导师  - 为团队制定成长的技能图- 放手：给发挥空间，自主学习  - 给员工勇挑重担的机会  - 给员工自主空间，让他独立思考  - 给他信心和耐心，允许他犯错，走弯路</code></pre><ul><li><p>能力培养的两个信念</p><ul><li><p>相信员工能力的差异性，也就是看到差异，重视丰富性</p><p>知识经济时代，员工的创造力能为团队带来更大的价值，创造力往往来自于差异的碰撞</p></li><li><p>相信团队能力的系统性，也就是欣赏差异，重视互补性</p></li></ul></li></ul><ul><li><p>激励</p><p>个体战斗力取决于两个要素：个体能力和使用能力的意愿</p></li></ul><ul><li><p>员工激励的挑战</p><p>向上沟通，员工激励和团队凝聚力是管理者心中最有挑战性的三个管理主题</p></li></ul><pre><code>- 激励认知不系统  了解一些激励的技巧和方法，但是不了解激励的全貌，也不清楚背后的原因，因此没有系统的激励方案- 激励手段匮乏  实实在在的物质激励不受管理者掌控，“画大饼”的精神激励员工又不买账，可用的激励手段少- 激励不得要领</code></pre><ul><li><p>马斯洛需求层次理论</p><p>这个理论是否适用于中国？有什么需要因地制宜改变的吗</p></li><li><p>员工激励发展的三个阶段</p><ul><li><p>本能</p><p>主要来源于对生存和安全的渴望，需求层次处于“马斯洛需求层次模型”的最底层。</p></li></ul></li></ul><pre><code>- 外驱  基本哲学就是“寻求奖励，避免惩罚”，也就是胡萝卜加大棒。这是近200年来工业时代被广泛认同的激励方式，其核心目的在于让员工“服从”。  同一时代的泰勒的“科学管理理论”认为，工人好像就是机器上的零件，他们只需要在正确的时间用正确的方法做正确的事，以保证这台机器运转良好，在满是流水线的工业时代，工人要做的是“服从”而不是别出心裁的创造  - 存在的问题    - 对大部分管理者来说，除了画饼，物质上的激励手段不受管理者掌控    - 导致内在动机消失，降低员工自驱力    - 造成业绩下降    - 扼杀创造力    - 抑制善行      比如，当一个团队对于优秀的奖励不明显，对于错误的惩罚却很严重的时候    - 鼓励欺诈，走捷径，不道德手段    - 让人上瘾，让员工对外部激励上瘾    - 滋生短视思维    - 会逐渐被免疫，“善用威者不轻怒，善用恩者不妄施”  - 非物质激励手段    如表扬和正向反馈，其外部激励的负面危害较低，是一项可以常用的外部手段    - 具体原则：表扬的内容要具体    - 公开原则：公开表扬      - 让被表扬的员工有更大的激励      - 告诉团队每个人，什么样的行为和价值观是团队认同和倡导的    - 及时原则- 内驱  - 内驱的三个方面    - 主导自己的人生，即“自主”    - 延展自己的能力，即“专精”    - 让生活更有意义，即“目的”  - 使用内驱来激励员工，是一个不可回避的选择    - 时代的选择      知识经济时代，员工的创造力能为公司创造更多的价值，而创造力是需要自主和差异，这一点和工业时代的理念几乎相反。    - 人的选择      随着中国经济和文化的发展，物质奖惩和别人的评价变得不如以前重要了，很多职场人有自己独特的工作价值观，尤其关注自己是否愿意干  - 如何激发    - 提高员工工作的自主性，也就是，给员工一定程度的自主掌控感      - 首先是工作时间和地点的自由      - 其次是工作内容的自由度        员工可以在一定程度上选择自己的工作内容    - 提高员工专精度，让员工持续成长      这里的专精强调的不是设定目标成为某个专家，而是强调自主投入的过程，为员工创造愿意自主投入的条件      - 明确的工作目标        对员工的要求越清晰，他越愿意投入努力      - 目标要略有挑战性        对员工要求太高会带来焦虑，太低会带来无聊      - 要能发挥其优势        每个人都愿意做自己擅长的事情，如果某项工作能发挥员工的独特优势，员工必定会投入热情。        优势是可以有很多层面的，我们可能满足不了某员工所期望的工作内容，但是还可以在行为模式和思维模式上去考虑，比如让其去做一些沟通的事情    - 提高工作的意义感和使命感      在不拒绝利益的同时，追求“价值”最大化，希望自己做出来的工作是有意义和价值的      总有一批人是因为工作没有价值而离职的，他们不是矫情，而是真的需要自己的工作有价值</code></pre><ul><li><p>员工幸福感</p><ul><li><p>全面可持续幸福（PERMA）</p><p>不仅仅是情绪上的快乐，而是一种蓬勃的生命状态，马丁塞利格曼将其称之为“盛放”</p></li></ul></li></ul><pre><code>  - 正面情绪    你在营造什么样的团队氛围，团队成员之间是彼此信赖，合作愉快，互帮互助还是抱怨指责，死气沉沉？  - 人际关系    你做了什么来提高员工的归属感和融入感？是否涉及了一些活动和机制，让员工之间更愿意互相支持，比如比较常见的，是否为每个员工安排指定导师了？  - 投入    是否为员工自主投入创造了条件，比如是否设定了清晰的目标，给他们适当的挑战，并支持他们发挥自己的优势  - 成就    迎接挑战并取得成就，是大部分工程师非常享受的事情，，但是这需要一个前提，即我们对于成就的刻画。    把日常工作项目化，把大型项目里程碑化  - 人生意义</code></pre><ul><li><p>激励方案的设计</p><ul><li><p>激励对象</p><p>该激励方案是针对某个人，某个群里还是团队全员</p></li><li><p>激励目的</p><p>明确该激励方案想要达到的效果</p></li><li><p>激励类型</p><p>主要是区分该方案是重点在于短期效果还是长期效果</p></li><li><p>激励手段</p><p>选择在什么激励要素上开展工作，驱动的三个阶段的各个要素，PERMA的五个要素都可以考虑</p></li><li><p>激励对象的情况</p><p>要对被激励对象有充足的了解，，例如该对象的激励基线是什么，只有明显超过这个基线才有激励效果，如果低于这个基线，就会有明显的负激励</p></li><li><p>合理性评估</p><ul><li>从成本上要考虑性价比</li><li>风险：即会对谁造成明显的负激励</li></ul></li><li><p>激励时机</p></li></ul></li><li><p>员工激励挑战的应对</p><ul><li>激励的认知：从单一的激励维度，升级为立体的激励体系</li><li>激励功夫用在平时，而不应靠一些临时的刺激性方案</li><li>了解设计一个激励方案所需要考虑的各个要素，并能够进行操作</li></ul></li></ul><h4 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h4><ul><li><p>分工的目的</p><p>很多人第一反应是提高效率。但是，如果追求效率，应该减少分工，因为合作的人越多效率越低，所以有些团队裁员后反而业绩上升。</p></li></ul><pre><code>- 为了实现规模化，分工不是为了效率，而是为了规模- 协作：分工是手段，协作是目的- 实现专精</code></pre><ul><li><p>常见的组织结构</p><ul><li><p>矩阵式结构</p><p>员工按照角色组队，划分成不同的角色团队，每个团队都有自己的负责人。要做项目时，会有专门的项目经理来向各个团队负责人申请人力。</p></li></ul></li></ul><pre><code>  - 优点：各个角色团队的专业度都很高  - 缺点：项目执行起来比较低效- BU式结构  做某项业务的所有人员和资源都统一调配。无论这个事业部是大是小，都角色齐全。  - 优点：合作效率高  - 缺点：资源冗余</code></pre><ul><li><p>常见的分工问题</p><ul><li><p>分工模糊</p><p>这是最常见的误区，甚至有些管理者为了让大家能够互相补位，主动承担，增强互助，还会去可以模糊边界，所谓“去边界化”。<br>但是，要注意，任何不以分工清晰为前提的边界模糊化，都会事与愿违。因为：<br>只有明确的分工，才会带来归属感，才愿意主动多付出一些。只要在明白了什么是自己该做的，才能知道做了什么叫“积极主动”</p></li><li><p>分工稳定性问题</p><p>只有稳定的分工才能体现分工的价值</p></li></ul></li></ul><pre><code>  - 业务的不断调整，会造成分工不断变化  - 长期稳定的分工，在带来专精的同时，也会带来局限和怠惰，割裂的视野</code></pre><ul><li><p>虚拟组织</p><ul><li><p>优点</p><ul><li><p>高效执行</p><p>虚拟团队的组织一般都是为了专人专事，聚焦目标，高效执行</p></li><li><p>资源配置合理</p><p>对很多工作来说，专门组建一个团队不值得，但又时不时需要设立新项目，虚拟团队就为这类需求提供了解决方案，大家可以因为做事走到一起，但又不是一个独立预算的团队</p></li><li><p>保持归属感</p></li></ul></li><li><p>原则</p><ul><li><p>专人专事，不宜太多</p></li><li><p>认同员工价值</p><p>既然你同意你的员工加入到这个虚拟组织，无论做出来的业绩是否是你最看重的，都要认同他的价值。<br>很多管理者常常以员工产出对自己团队价值不大为理由压低员工绩效，这是典型的让员工背负管理者的决策后果</p></li><li><p>目标明确，职责冠名</p></li></ul></li></ul></li></ul><h4 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h4><p>  努力的方向就是：像一个人那样默契</p><ul><li><p>如何提高协作水平</p><ul><li><p>整体统筹</p><ul><li><p>评估协作水平，找到工作重点</p><p>对于协作水平，我们很难给一个衡量标准，但是协作水平属于优良中差还是能够大概感觉的。<br>主要是回答好一个问题：当前协作中的主要问题是什么，做什么事可以明显提高协作水平</p></li><li><p>主张并推进各项工作</p><p>把“协作很重要”的理念贯彻给团队成员，并推进一些让员工切身高收到的措施来促进协作</p></li><li><p>整体协调，提供仲裁</p><p>协作是一个动态过程，员工在协作过程中肯定会出现分歧和摩擦，管理者要把解决分歧作为改善协作关系的契机。<br>解决协作中的分歧和矛盾，恰恰是提升协作水平最有效的手段</p></li></ul></li><li><p>建立机制</p><p>员工之间并不会因为员工都积极主动就能协作好，管理者需要提供模版和指导，避免混乱和不知所措。<br>员工之间该如何协作，不是自然而然就清楚的，需要管理者建立一些机制来指引大家。</p></li></ul></li></ul><pre><code>- 提升互信  - 深入而立体的互相了解  - 有针对性的团建活动  - 增加合作机会，共同面对挑战- 不断练习</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是好的团队&quot;&gt;&lt;a href=&quot;#什么是好的团队&quot; class=&quot;headerlink&quot; title=&quot;什么是好的团队&quot;&gt;&lt;/a&gt;什么是好的团队&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;业绩好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看方向：管理规划阶段，定义何为好的业绩，并规划与之匹配的团队&lt;/li&gt;
&lt;li&gt;带人：即团队建设阶段，不断提高团队取得业绩的能力，包括个人能力和团队能力&lt;/li&gt;
&lt;li&gt;做事：任务管理阶段，如何通过良好的把控把计划落地执行，产出结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;效率高&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看方向：目标越清晰，效率越高&lt;/li&gt;
&lt;li&gt;带人：团队成员个体能力越强，团队成员间的协作水平越高，团队效率就越高&lt;/li&gt;
&lt;li&gt;做事：流程和规则越有效率，操作越熟练，做事效率就越高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可持续&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看方向：团队规划的合理性和有效性&lt;/li&gt;
&lt;li&gt;带人：完善的梯度和成熟的团队文化&lt;/li&gt;
&lt;li&gt;做事：团队的韧劲是磨练出来的，磨练离不开持续地做事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Sundry" scheme="https://sunra.top/categories/Sundry/"/>
    
    
  </entry>
  
</feed>
