<!DOCTYPE html>
<html lang>
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 3.9.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"sunra.top","root":"/","scheme":"Muse","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"always","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"path":"search.xml"};
  </script>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8623125811074939" crossorigin="anonymous"></script>
  <meta name="description" content="上一个博客大概讲了下babel-parser的工作流程，主要有两个内容，一个是Tokenizer把代码字符串拆分成Token数组，一个是parser把Token数组转换为AST树。 这一次就来仔细看看Tokenizer的逻辑。">
<meta name="keywords" content="Babel 源码解析">
<meta property="og:type" content="article">
<meta property="og:title" content="深入Babel原理系列（三）Tokenizer">
<meta property="og:url" content="https://sunra.top/[object Object]/43883">
<meta property="og:site_name" content="Origin of Ray">
<meta property="og:description" content="上一个博客大概讲了下babel-parser的工作流程，主要有两个内容，一个是Tokenizer把代码字符串拆分成Token数组，一个是parser把Token数组转换为AST树。 这一次就来仔细看看Tokenizer的逻辑。">
<meta property="og:locale" content="default">
<meta property="og:updated_time" content="2023-05-26T03:50:25.152Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="深入Babel原理系列（三）Tokenizer">
<meta name="twitter:description" content="上一个博客大概讲了下babel-parser的工作流程，主要有两个内容，一个是Tokenizer把代码字符串拆分成Token数组，一个是parser把Token数组转换为AST树。 这一次就来仔细看看Tokenizer的逻辑。">

<link rel="canonical" href="https://sunra.top/[object Object]/43883">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'default'
  };
</script>

  <title>深入Babel原理系列（三）Tokenizer | Origin of Ray</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-KEJ1L66CKC"></script>
    <script>
      if (CONFIG.hostname === location.hostname) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'G-KEJ1L66CKC');
      }
    </script>


  <script>
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "https://hm.baidu.com/hm.js?cc2e15dfd66849cf1d7843d0d532438e";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>




  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="Origin of Ray" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">Origin of Ray</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
      <p class="site-subtitle" itemprop="description">一起探索互联网的秘密</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>Home</a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>Categories</a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>Archives</a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>Search
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
        <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off" placeholder="Searching..." spellcheck="false" type="search" class="search-input">
  </div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div id="search-result">
  <div id="no-result">
    <i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i>
  </div>
</div>

    </div>
  </div>

</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="default">
    <link itemprop="mainEntityOfPage" href="https://sunra.top/[object Object]/43883">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1592617514/avatar_rpap6c.jpg">
      <meta itemprop="name" content="Ray Sun">
      <meta itemprop="description" content="拨开互联网的迷雾">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Origin of Ray">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          深入Babel原理系列（三）Tokenizer
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">Posted on</span>

              <time title="Created: 2021-07-03 15:14:13" itemprop="dateCreated datePublished" datetime="2021-07-03T15:14:13+08:00">2021-07-03</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Modified: 2023-05-26 11:50:25" itemprop="dateModified" datetime="2023-05-26T11:50:25+08:00">2023-05-26</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-folder"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/Babel/" itemprop="url" rel="index"><span itemprop="name">Babel</span></a>
                </span>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <p>上一个博客大概讲了下babel-parser的工作流程，主要有两个内容，一个是Tokenizer把代码字符串拆分成Token数组，一个是parser把Token数组转换为AST树。</p>
<p>这一次就来仔细看看Tokenizer的逻辑。</p>
<a id="more"></a>
<p>Tokenizer的源码只有四个文件，分别是context.js，index.js，state.js，type.js，我们一个个来分析。</p>
<h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p>首先是type.js，顾名思义，这个文件中定义了所有Token的type</p>
<p>先看看TokenType的定义，注意，官方注释很重要，便于我们理解这些变量存在的意义：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The `beforeExpr` property is used to disambiguate between 1) binary</span></span><br><span class="line"><span class="comment">// expression (&lt;) and JSX Tag start (&lt;name&gt;); 2) object literal and JSX</span></span><br><span class="line"><span class="comment">// texts. It is set on the `updateContext` function in the JSX plugin.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The `startsExpr` property is used to determine whether an expression</span></span><br><span class="line"><span class="comment">// may be the “argument” subexpression of a `yield` expression or</span></span><br><span class="line"><span class="comment">// `yield` statement. It is set on all token types that may be at the</span></span><br><span class="line"><span class="comment">// start of a subexpression.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `isLoop` marks a keyword as starting a loop, which is important</span></span><br><span class="line"><span class="comment">// to know when parsing a label, in order to allow or disallow</span></span><br><span class="line"><span class="comment">// continue jumps to that label.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> beforeExpr = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> startsExpr = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> isLoop = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> isAssign = <span class="literal">true</span>; <span class="comment">// 该Token可以是否标志着赋值，如=</span></span><br><span class="line"><span class="keyword">const</span> prefix = <span class="literal">true</span>; <span class="comment">// 该Token是否可以是一个一元表达式的前缀，如！</span></span><br><span class="line"><span class="keyword">const</span> postfix = <span class="literal">true</span>; <span class="comment">// 该Token是否可以是一个一元表达式的后缀，如++</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TokenOptions = &#123;</span><br><span class="line">  keyword?: <span class="built_in">string</span>,</span><br><span class="line">  beforeExpr?: <span class="built_in">boolean</span>,</span><br><span class="line">  startsExpr?: <span class="built_in">boolean</span>,</span><br><span class="line">  rightAssociative?: <span class="built_in">boolean</span>,</span><br><span class="line">  isLoop?: <span class="built_in">boolean</span>,</span><br><span class="line">  isAssign?: <span class="built_in">boolean</span>,</span><br><span class="line">  prefix?: <span class="built_in">boolean</span>,</span><br><span class="line">  postfix?: <span class="built_in">boolean</span>,</span><br><span class="line">  binop?: ?<span class="built_in">number</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TokenType &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">  keyword: ?<span class="built_in">string</span>;</span><br><span class="line">  beforeExpr: <span class="built_in">boolean</span>;</span><br><span class="line">  startsExpr: <span class="built_in">boolean</span>;</span><br><span class="line">  rightAssociative: <span class="built_in">boolean</span>;</span><br><span class="line">  isLoop: <span class="built_in">boolean</span>;</span><br><span class="line">  isAssign: <span class="built_in">boolean</span>;</span><br><span class="line">  prefix: <span class="built_in">boolean</span>;</span><br><span class="line">  postfix: <span class="built_in">boolean</span>;</span><br><span class="line">  binop: ?<span class="built_in">number</span>;</span><br><span class="line">  updateContext: ?<span class="function">(<span class="params">context: <span class="built_in">Array</span>&lt;TokContext&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">label: <span class="built_in">string</span>, conf: TokenOptions = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.label = label;</span><br><span class="line">    <span class="keyword">this</span>.keyword = conf.keyword;</span><br><span class="line">    <span class="keyword">this</span>.beforeExpr = !!conf.beforeExpr;</span><br><span class="line">    <span class="keyword">this</span>.startsExpr = !!conf.startsExpr;</span><br><span class="line">    <span class="keyword">this</span>.rightAssociative = !!conf.rightAssociative;</span><br><span class="line">    <span class="keyword">this</span>.isLoop = !!conf.isLoop;</span><br><span class="line">    <span class="keyword">this</span>.isAssign = !!conf.isAssign;</span><br><span class="line">    <span class="keyword">this</span>.prefix = !!conf.prefix;</span><br><span class="line">    <span class="keyword">this</span>.postfix = !!conf.postfix;</span><br><span class="line">    <span class="keyword">this</span>.binop = conf.binop != <span class="literal">null</span> ? conf.binop : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.updateContext = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个结构相对来讲还不是很复杂，但是这些参数一时之间我们可能也看不出所有的用意，没关系，我们看看几个具体的例子，来分析：</p>
<p>在分析具体的例子前，我们可以先看两个工具方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> keywords = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;string, TokenType&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createKeyword</span>(<span class="params">name: string, options: TokenOptions = &#123;&#125;</span>): <span class="title">TokenType</span> </span>&#123;</span><br><span class="line">  options.keyword = name;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="keyword">new</span> TokenType(name, options);</span><br><span class="line">  keywords.set(name, token);</span><br><span class="line">  <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBinop</span>(<span class="params">name: string, binop: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> TokenType(name, &#123; beforeExpr, binop &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个createKeyword就是创建一个keyword类型的TokenType，结合上面的代码，我们能看出来，keyword类型的TokenType一个比较特殊的地方，是它的keyword变量有值，而且值和label相同。</p>
<p>createBinop的作用是创建一个二元表达式类型，其特点就是beforeExpr是true，且binop有具体的值</p>
<p>好了，看完这些，我们就来看看几个具体的例子</p>
<p>首先是基本的变量类型的Type，如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num: <span class="keyword">new</span> TokenType(<span class="string">"num"</span>, &#123; startsExpr &#125;),</span><br><span class="line">bigint: <span class="keyword">new</span> TokenType(<span class="string">"bigint"</span>, &#123; startsExpr &#125;),</span><br></pre></td></tr></table></figure>
<p>然后是符号类型的Type</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bracketL: <span class="keyword">new</span> TokenType(<span class="string">"["</span>, &#123; beforeExpr, startsExpr &#125;),</span><br><span class="line">bracketR: <span class="keyword">new</span> TokenType(<span class="string">"]"</span>),</span><br><span class="line">question: <span class="keyword">new</span> TokenType(<span class="string">"?"</span>, &#123; beforeExpr &#125;),</span><br></pre></td></tr></table></figure>
<p>运算符类型：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eq: <span class="keyword">new</span> TokenType(<span class="string">"="</span>, &#123; beforeExpr, isAssign &#125;),</span><br><span class="line">incDec: <span class="keyword">new</span> TokenType(<span class="string">"++/--"</span>, &#123; prefix, postfix, startsExpr &#125;),</span><br><span class="line">pipeline: createBinop(<span class="string">"|&gt;"</span>, <span class="number">0</span>),</span><br><span class="line">nullishCoalescing: createBinop(<span class="string">"??"</span>, <span class="number">1</span>),</span><br></pre></td></tr></table></figure>
<p>关键字类型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_break: createKeyword(<span class="string">"break"</span>),</span><br><span class="line">_case: createKeyword(<span class="string">"case"</span>, &#123; beforeExpr &#125;),</span><br><span class="line">_default: createKeyword(<span class="string">"default"</span>, &#123; beforeExpr &#125;),</span><br><span class="line">_do: createKeyword(<span class="string">"do"</span>, &#123; isLoop, beforeExpr &#125;),</span><br></pre></td></tr></table></figure>
<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>刚才Type还有一个updateContext没有讲，这个函数与context.js有关，给JSX插件用的。我们一起来看一下</p>
<p>一开始，注释里就说了，context是做什么的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The token context is used to track whether the apostrophe "`"</span></span><br><span class="line"><span class="comment">// starts or ends a string template</span></span><br></pre></td></tr></table></figure>
<p>就是用来分析模板字符串的，它的类型定义更加简单：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TokContext</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(token: string, preserveSpace?: boolean) &#123;</span><br><span class="line">    <span class="keyword">this</span>.token = token;</span><br><span class="line">    <span class="keyword">this</span>.preserveSpace = !!preserveSpace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  token: string;</span><br><span class="line">  preserveSpace: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个types指的是分析模板字符串过程中可以又嵌套的模板字符串，所以有个context的栈，用来检测所有的模板字符串是否闭合的，这个栈中只有两种类型的数据，一种是花括号，一种是反引号</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> types: &#123;</span><br><span class="line">  [key: string]: TokContext,</span><br><span class="line">&#125; = &#123;</span><br><span class="line">  brace: <span class="keyword">new</span> TokContext(<span class="string">"&#123;"</span>),</span><br><span class="line">  template: <span class="keyword">new</span> TokContext(<span class="string">"`"</span>, <span class="literal">true</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后剩下的所有代码就是给刚才所有type中会和模板字符串扯上关系的type添加updateContext方法来维护解析过程中的contex栈</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">backQuote: new TokenType("`", &#123; startsExpr &#125;),</span></span><br><span class="line"><span class="comment">braceL: new TokenType("&#123;", &#123; beforeExpr, startsExpr &#125;),</span></span><br><span class="line"><span class="comment">braceHashL: new TokenType("#&#123;", &#123; beforeExpr, startsExpr &#125;),</span></span><br><span class="line"><span class="comment">dollarBraceL: new TokenType("$&#123;", &#123; beforeExpr, startsExpr &#125;),</span></span><br><span class="line"><span class="comment">braceR: new TokenType("&#125;", &#123; beforeExpr &#125;),</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">tt.braceR.updateContext = <span class="function"><span class="params">context</span> =&gt;</span> &#123;</span><br><span class="line">  context.pop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR</span></span><br><span class="line"><span class="comment">// ideally only dollarBraceL "$&#123;" needs a non-template context</span></span><br><span class="line"><span class="comment">// in order to indicate that the last "`" in `$&#123;`" starts a new string template</span></span><br><span class="line"><span class="comment">// inside a template element within outer string template.</span></span><br><span class="line"><span class="comment">// but when we popped such context in `&#125;`, we lost track of whether this</span></span><br><span class="line"><span class="comment">// `&#125;` matches a `$&#123;` or other tokens matching `&#125;`, so we have to push</span></span><br><span class="line"><span class="comment">// such context in every token that `&#125;` will match.</span></span><br><span class="line">tt.braceL.updateContext =</span><br><span class="line">  tt.braceHashL.updateContext =</span><br><span class="line">  tt.dollarBraceL.updateContext =</span><br><span class="line">    context =&gt; &#123;</span><br><span class="line">      context.push(types.brace);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">tt.backQuote.updateContext = <span class="function"><span class="params">context</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当解析到反引号的时候，看看当前的栈顶是不是模板类型，如果是，那就说明上一个反引号已经进过栈了，也就是走过一次else逻辑了，那这时候就把上次进栈的template弹出来。</span></span><br><span class="line">  <span class="keyword">if</span> (context[context.length - <span class="number">1</span>] === types.template) &#123;</span><br><span class="line">    context.pop();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context.push(types.template);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>这个文件中定义的是解析过程中的状态，包括当前解析到了那个位置，哪一行，那一列，第几个字符等等。</p>
<p>这个文件所有的内容都是在声明这个state的class，所以接下来所有的代码都是在这个类中的。</p>
<p>首先是初始化函数，这个类没有构造函数，倒是有个初始化函数，需要调用者自己调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">strict: boolean;</span><br><span class="line">curLine: number;</span><br><span class="line"></span><br><span class="line"><span class="comment">// And, if locations are used, the &#123;line, column&#125; object</span></span><br><span class="line"><span class="comment">// corresponding to those offsets</span></span><br><span class="line">startLoc: Position;</span><br><span class="line">endLoc: Position;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The current position of the tokenizer in the input.</span></span><br><span class="line">pos: number = <span class="number">0</span>;</span><br><span class="line">lineStart: number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">init(options: Options): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.strict =</span><br><span class="line">    options.strictMode === <span class="literal">false</span> ? <span class="literal">false</span> : options.sourceType === <span class="string">"module"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.curLine = options.startLine;</span><br><span class="line">  <span class="keyword">this</span>.startLoc = <span class="keyword">this</span>.endLoc = <span class="keyword">this</span>.curPosition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这个初始化函数做的事很简单，首先是对严格模式的一个判断和保存</p>
<p>另一个就是初始化curLine为传入的开始行，这个curLine会在后面解析过程中不断变化</p>
<p>最后就是初始化startLoc和endLoc，这两个值在后面不会再发生变化了，最起码在state类中没有方法去改变它，在以后继续看的时候如果看到了哪里改变了，我再回来更新。</p>
<p>而这个curPosition函数也很简单</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curPosition(): Position &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Position(<span class="keyword">this</span>.curLine, <span class="keyword">this</span>.pos - <span class="keyword">this</span>.lineStart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Position的第一个参数是行数，第二个参数是列数</p>
<p>这个curLine在之前刚被初始化为startLine，而pos和lineStart没有在之前被赋值，所以都是0</p>
<h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><p>除了上面两个函数，还有一个clone函数，用来深复制State的，没什么特别逻辑，放在这里，有兴趣的可以看看。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">clone(skipArrays?: boolean): State &#123;</span><br><span class="line">   <span class="keyword">const</span> state = <span class="keyword">new</span> State();</span><br><span class="line">   <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, length = keys.length; i &lt; length; i++) &#123;</span><br><span class="line">     <span class="keyword">const</span> key = keys[i];</span><br><span class="line">     <span class="comment">// $FlowIgnore</span></span><br><span class="line">     <span class="keyword">let</span> val = <span class="keyword">this</span>[key];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!skipArrays &amp;&amp; <span class="built_in">Array</span>.isArray(val)) &#123;</span><br><span class="line">       val = val.slice();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// $FlowIgnore</span></span><br><span class="line">     state[key] = val;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> state;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><p>State中有大量的属性，都是用来保存解析状态，并生成AST的，很多属性直接说，感受不到用处，就补充几个一看就知道做什么的属性吧</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The current position of the tokenizer in the input.</span></span><br><span class="line"> pos: number = <span class="number">0</span>;</span><br><span class="line"> lineStart: number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Properties of the current token:</span></span><br><span class="line"> <span class="comment">// Its type</span></span><br><span class="line"> type: TokenType = tt.eof;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// For tokens that include more information than their type, the value</span></span><br><span class="line"> value: any = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Its start and end offset</span></span><br><span class="line"> start: number = <span class="number">0</span>;</span><br><span class="line"> end: number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Position information for the previous token</span></span><br><span class="line"> <span class="comment">// $FlowIgnore this is initialized when generating the second token.</span></span><br><span class="line"> lastTokEndLoc: Position = <span class="literal">null</span>;</span><br><span class="line"> <span class="comment">// $FlowIgnore this is initialized when generating the second token.</span></span><br><span class="line"> lastTokStartLoc: Position = <span class="literal">null</span>;</span><br><span class="line"> lastTokStart: number = <span class="number">0</span>;</span><br><span class="line"> lastTokEnd: number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// The context stack is used to track whether the apostrophe "`" starts</span></span><br><span class="line"> <span class="comment">// or ends a string template</span></span><br><span class="line"> context: <span class="built_in">Array</span>&lt;TokContext&gt; = [ct.brace];</span><br><span class="line"> <span class="comment">// Used to track whether a JSX element is allowed to form</span></span><br><span class="line"> exprAllowed: boolean = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Used to signal to callers of `readWord1` whether the word</span></span><br><span class="line"> <span class="comment">// contained any escape sequences. This is needed because words with</span></span><br><span class="line"> <span class="comment">// escape sequences must not be interpreted as keywords.</span></span><br><span class="line"> containsEsc: boolean = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// This property is used to track the following errors</span></span><br><span class="line"> <span class="comment">// - StrictNumericEscape</span></span><br><span class="line"> <span class="comment">// - StrictOctalLiteral</span></span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> <span class="comment">// in a literal that occurs prior to/immediately after a "use strict" directive.</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// todo(JLHwung): set strictErrors to null and avoid recording string errors</span></span><br><span class="line"> <span class="comment">// after a non-directive is parsed</span></span><br><span class="line"> strictErrors: <span class="built_in">Map</span>&lt;number, ErrorTemplate&gt; = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Tokens length in token store</span></span><br><span class="line"> tokensLength: number = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><p>最后就是Tokenizer的主逻辑了，接近1600行，我们来慢慢分析。</p>
<p>其实代码虽多，但是核心思路不复杂，首先就是构造函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">isLookahead: boolean;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Token store.</span></span><br><span class="line">tokens: <span class="built_in">Array</span>&lt;Token | N.Comment&gt; = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(options: Options, input: string) &#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="keyword">new</span> State();</span><br><span class="line">  <span class="keyword">this</span>.state.init(options);</span><br><span class="line">  <span class="keyword">this</span>.input = input;</span><br><span class="line">  <span class="keyword">this</span>.length = input.length;</span><br><span class="line">  <span class="keyword">this</span>.isLookahead = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就是初始化了State，并且调用了init函数。</p>
<p>然后就是几个解析的入口函数，也就是那些被外界调用方法，如next等</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pushToken(token: Token | N.Comment) &#123;</span><br><span class="line">    <span class="comment">// Pop out invalid tokens trapped by try-catch parsing.</span></span><br><span class="line">    <span class="comment">// Those parsing branches are mainly created by typescript and flow plugins.</span></span><br><span class="line">    <span class="keyword">this</span>.tokens.length = <span class="keyword">this</span>.state.tokensLength;</span><br><span class="line">    <span class="keyword">this</span>.tokens.push(token);</span><br><span class="line">    ++<span class="keyword">this</span>.state.tokensLength;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Move to the next token</span></span><br><span class="line"></span><br><span class="line">  next(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.checkKeywordEscapes();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.tokens) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pushToken(<span class="keyword">new</span> Token(<span class="keyword">this</span>.state));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state.lastTokEnd = <span class="keyword">this</span>.state.end;</span><br><span class="line">    <span class="keyword">this</span>.state.lastTokStart = <span class="keyword">this</span>.state.start;</span><br><span class="line">    <span class="keyword">this</span>.state.lastTokEndLoc = <span class="keyword">this</span>.state.endLoc;</span><br><span class="line">    <span class="keyword">this</span>.state.lastTokStartLoc = <span class="keyword">this</span>.state.startLoc;</span><br><span class="line">    <span class="keyword">this</span>.nextToken();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line"></span><br><span class="line">  eat(type: TokenType): boolean &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.match(type)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.next();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line"></span><br><span class="line">  match(type: TokenType): boolean &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.type === type;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>nextToken我们上篇博客讲了，主要就是两个，一个是分析模板字符串，一个是getTokenFromCode，主要就是这个getTokenFromCode，判断了各种情况，然后调用不同的方法，如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Anything else beginning with a digit is an integer, octal</span></span><br><span class="line"><span class="comment">// number, or float. (fall through)</span></span><br><span class="line"><span class="keyword">case</span> charCodes.digit1:</span><br><span class="line"><span class="keyword">case</span> charCodes.digit2:</span><br><span class="line"><span class="keyword">case</span> charCodes.digit3:</span><br><span class="line"><span class="keyword">case</span> charCodes.digit4:</span><br><span class="line"><span class="keyword">case</span> charCodes.digit5:</span><br><span class="line"><span class="keyword">case</span> charCodes.digit6:</span><br><span class="line"><span class="keyword">case</span> charCodes.digit7:</span><br><span class="line"><span class="keyword">case</span> charCodes.digit8:</span><br><span class="line"><span class="keyword">case</span> charCodes.digit9:</span><br><span class="line">  <span class="keyword">this</span>.readNumber(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quotes produce strings.</span></span><br><span class="line"><span class="keyword">case</span> charCodes.quotationMark:</span><br><span class="line"><span class="keyword">case</span> charCodes.apostrophe:</span><br><span class="line">  <span class="keyword">this</span>.readString(code);</span><br><span class="line">  <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>
<p>还有大量其他的函数，如readRegexp读取正则，readEscapedChar等等，大部分代码都是这种，每个内部都像我上个博客讲的读取模板字符串那样，内部是个小的状态机。</p>

    </div>

    
    
    
        

<div>
<ul class="post-copyright">
  <li class="post-copyright-author">
    <strong>Post author:  </strong>Ray Sun
  </li>
  <li class="post-copyright-link">
    <strong>Post link: </strong>
    <a href="https://sunra.top/[object Object]/43883" title="深入Babel原理系列（三）Tokenizer">https://sunra.top/[object Object]/43883</a>
  </li>
  <li class="post-copyright-license">
    <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="external nofollow noopener noreferrer" target="_blank"><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</a> unless stating additionally.
  </li>
</ul>
</div>

        

  <div class="followme">
    <p>Welcome to my other publishing channels</p>

    <div class="social-list">

        <div class="social-item">
          <a target="_blank" class="social-link" href="/atom.xml">
            <span class="icon">
              <i class="fa fa-rss"></i>
            </span>

            <span class="label">RSS</span>
          </a>
        </div>
    </div>
  </div>


      <footer class="post-footer">

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/[object Object]/5517" rel="prev" title="深入Babel原理系列（二）Parser代码结构简介">
      <i class="fa fa-chevron-left"></i> 深入Babel原理系列（二）Parser代码结构简介
    </a></div>
      <div class="post-nav-item">
    <a href="/[object Object]/10113" rel="next" title="React Hook实战总结 - 如何用React Hook写出没那么复杂的项目">
      React Hook实战总结 - 如何用React Hook写出没那么复杂的项目 <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          Table of Contents
        </li>
        <li class="sidebar-nav-overview">
          Overview
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#Type"><span class="nav-number">1.</span> <span class="nav-text">Type</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Context"><span class="nav-number">2.</span> <span class="nav-text">Context</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#State"><span class="nav-number">3.</span> <span class="nav-text">State</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#init"><span class="nav-number">3.1.</span> <span class="nav-text">init</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#clone"><span class="nav-number">3.2.</span> <span class="nav-text">clone</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#其他属性"><span class="nav-number">3.3.</span> <span class="nav-text">其他属性</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#index"><span class="nav-number">4.</span> <span class="nav-text">index</span></a></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Ray Sun" src="https://res.cloudinary.com/dvtfhjxi4/image/upload/v1592617514/avatar_rpap6c.jpg">
  <p class="site-author-name" itemprop="name">Ray Sun</p>
  <div class="site-description" itemprop="description">拨开互联网的迷雾</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">266</span>
          <span class="site-state-item-name">posts</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">16</span>
        <span class="site-state-item-name">categories</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/Sun668" title="GitHub → https://github.com/Sun668" rel="external nofollow noopener noreferrer" target="_blank"><i class="fab fa-github fa-fw"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:947692259@qq.com" title="E-Mail → mailto:947692259@qq.com" rel="external nofollow noopener noreferrer" target="_blank"><i class="fa fa-envelope fa-fw"></i>E-Mail</a>
      </span>
  </div>
  <div class="cc-license motion-element" itemprop="license">
    <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" class="cc-opacity" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/cc-by-nc-sa.svg" alt="Creative Commons"></a>
  </div>



      </div>

      <div class="wechat_channel" style="width: 50%;margin-left: 25%;">
        <br>
        <!-- 这里添加你的二维码图片 -->
        <img src="/images/wechat_channel.png">
        <!-- <span>公众号</span> -->
      </div>
    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2023</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Ray Sun</span>
</div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>
<script src="/js/utils.js"></script><script src="/js/motion.js"></script>
<script src="/js/schemes/muse.js"></script>
<script src="/js/next-boot.js"></script>



  
  <script>
    (function(){
      var canonicalURL, curProtocol;
      //Get the <link> tag
      var x=document.getElementsByTagName("link");
		//Find the last canonical URL
		if(x.length > 0){
			for (i=0;i<x.length;i++){
				if(x[i].rel.toLowerCase() == 'canonical' && x[i].href){
					canonicalURL=x[i].href;
				}
			}
		}
    //Get protocol
	    if (!canonicalURL){
	    	curProtocol = window.location.protocol.split(':')[0];
	    }
	    else{
	    	curProtocol = canonicalURL.split(':')[0];
	    }
      //Get current URL if the canonical URL does not exist
	    if (!canonicalURL) canonicalURL = window.location.href;
	    //Assign script content. Replace current URL with the canonical URL
      !function(){var e=/([http|https]:\/\/[a-zA-Z0-9\_\.]+\.baidu\.com)/gi,r=canonicalURL,t=document.referrer;if(!e.test(r)){var n=(String(curProtocol).toLowerCase() === 'https')?"https://sp0.baidu.com/9_Q4simg2RQJ8t7jm9iCKT-xh_/s.gif":"//api.share.baidu.com/s.gif";t?(n+="?r="+encodeURIComponent(document.referrer),r&&(n+="&l="+r)):r&&(n+="?l="+r);var i=new Image;i.src=n}}(window);})();
  </script>




  <script src="/js/local-search.js"></script>












  

  

  

</body>
</html>
